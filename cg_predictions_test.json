{
  "created_utc": "2025-09-14T17:46:58.980094Z",
  "items": [
    {
      "text": "def group_by_length(lst):\n res = {}\n for x in lst:\n length = len(x)\n if length not in res:\n res[length] = [x]\n else:\n res[length].append(x)\n return res\n \ninput = ['word', 'sentence', 'hello', 'programming']\noutput = group_by_length(input)\nprint(output) // {4: ['word', 'hello'], 8: ['sentence'], 11: ['programming']}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.028881442761165214,
      "p_css": 0.0012610324010883603,
      "p_html": 0.00017343306808346578,
      "p_java": 1.8964742332266407e-08,
      "p_javascript": 0.013656072934606432,
      "p_matlab": 0.0003364972621300359,
      "p_python": 0.9523654449600983,
      "p_sql": 0.0033136529828767004,
      "p_typescript": 1.2404665209113267e-05
    },
    {
      "text": "import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits\n    string = ''.join(random.choice(chars) for _ in range(8))\n    return string",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 1.7156424544833947e-15,
      "p_css": 1.4682311633814538e-09,
      "p_html": 1.3468542883471009e-09,
      "p_java": 0.8222435917303285,
      "p_javascript": 4.280562819076442e-18,
      "p_matlab": 5.0231303022760437e-11,
      "p_python": 2.0588908041357726e-06,
      "p_sql": 0.177754346446682,
      "p_typescript": 6.686666704026548e-11
    },
    {
      "text": "# Game script\nimport random\n\n# Welcome message\nprint(\"Welcome to the guessing game!\")\n\n# Generate a random number\ntarget_number = random.randint(1, 10)\n\n# Initialise variables and flags\nguessed = False\nattempts = 0\n\nwhile not guessed:\n attempts += 1\n guess = int(input(\"Guess a number (1-10): \"))\n\n if guess < target_number:\n  print(\"That's too low. Try again!\")\n elif guess > target_number:\n  print(\"That's too high. Try again!\")\n else:\n  guessed = True\n\n# Congratulations message\nif guessed:\n print(\"Congratulations! You guessed the number in {} attempts\".format(attempts))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.010852236324740585,
      "p_css": 0.026828983493904047,
      "p_html": 0.01216884486891362,
      "p_java": 0.00044433876309123345,
      "p_javascript": 0.0021837624979785864,
      "p_matlab": 0.001255841512825727,
      "p_python": 0.9089733332097117,
      "p_sql": 0.0026624217544967367,
      "p_typescript": 0.03463023757433784
    },
    {
      "text": "\"\"\"\nA function to print out a Pascal triangle\n\"\"\"\n\ndef pascal_triangle(n): \n    # Initialize the row\n    row = [1]\n\n    # Calculate each successive row \n    y = [0] \n    for x in range(max(n, 0)): \n        print(row)\n\t\t# Compute the next row\n        row = [sum(i) for i in zip(row + y, y + row)] \n        # Copy the row\n        y = row[:] \n\t\t\nif __name__ == '__main__':\n    n = 5\n    pascal_triangle(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006255356651029241,
      "p_css": 0.031028030939649762,
      "p_html": 0.00671440523389378,
      "p_java": 0.006398949152431792,
      "p_javascript": 0.10578261090715275,
      "p_matlab": 0.028779191165442933,
      "p_python": 0.7818477316805765,
      "p_sql": 0.031448245325739164,
      "p_typescript": 0.007375299930010393
    },
    {
      "text": "import numpy as np\nimport tensorflow as tf\n\n# Define inputs and outputs\nX = tf.placeholder(tf.float32, shape=[3, 4])\ny = tf.placeholder(tf.float32, shape=[3, 1])\n\n# Define weights and biases\nW = tf.Variable(tf.random_normal([4, 1]))\nb = tf.Variable(tf.random_normal([1]))\n\n# Define model\nmodel = tf.sigmoid(tf.matmul(X, W ) + b)\n\n# Define cost and optimizer\ncost = tf.reduce_mean(-y * tf.log(model) - (1-y) * tf.log(1-model))\noptimizer = tf.train.GradientDescentOptimizer(0.1).minimize(cost)\n\n# Train model\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(1000):\n        sess.run(optimizer, feed_dict={X:[[0,0,1,0],[1,0,0,0],[1,1,0,0]], y:[[0],[1],[1]]})\n\n# Print results\nprint(\"Final weights\", sess.run(W))\nprint(\"Final bais: \", sess.run(b))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.022372923273286948,
      "p_css": 0.2949012320032223,
      "p_html": 0.006725524840635367,
      "p_java": 0.00028214031081622953,
      "p_javascript": 0.00592616901556115,
      "p_matlab": 0.006869693107120176,
      "p_python": 0.6031513579079187,
      "p_sql": 0.0006627182007888694,
      "p_typescript": 0.059108241340650104
    },
    {
      "text": "def filter_words_with_one_vowel(sentence):\n    num_words = 0\n    for word in sentence.split():\n        vowels = 0\n        for char in word:\n            if char in 'aeiou':\n                vowels += 1\n        if vowels == 1:\n            num_words += 1\n    return num_words\n\nsentence = 'I hardly ever go out and I hate taking pictures.'\nnum_words = filter_words_with_one_vowel(sentence)\n\nprint('Number of words with one vowel:', num_words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001612999458282861,
      "p_css": 0.005891837854742439,
      "p_html": 0.0016398540848247738,
      "p_java": 0.00020194139202618644,
      "p_javascript": 0.0003500654257524581,
      "p_matlab": 0.0029417881801134995,
      "p_python": 0.9712048568754839,
      "p_sql": 0.016272325535940005,
      "p_typescript": 0.001336030705288544
    },
    {
      "text": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n    def find_fifth_from_end(self):\n        if self is None:\n            return None\n        curr = self\n        prev = self\n        count = 0\n        while curr.next is not None:\n            count += 1\n            if count >= 5:\n                prev = prev.next\n            curr = curr.next\n        if count < 5:\n            return None\n        else:\n            return prev.data\n        \n# Example\nn1 = Node(1)\nn2 = Node(2)\nn3 = Node(3)\nn4 = Node(4)\nn5 = Node(5)\nn6 = Node(6)\nn7 = Node(7)\n\n# Linked list setup\nn1.next = n2\nn2.next = n3\nn3.next = n4\nn4.next = n5\nn5.next = n6\nn6.next = n7\n\n# Find 4th element from the end\nprint(n1.find_fifth_from_end())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0825373941410284e-05,
      "p_css": 0.011168696427933913,
      "p_html": 0.0019064550739742445,
      "p_java": 2.5937344678424697e-05,
      "p_javascript": 4.0965993449151466e-05,
      "p_matlab": 3.0631517817806786e-05,
      "p_python": 0.9250780752937399,
      "p_sql": 0.061103646014874856,
      "p_typescript": 0.0006147669595904455
    },
    {
      "text": "def merge_sort(arr):\n if len(arr) >1: \n mid = len(arr)//2  #Finding the mid of the array \n L = arr[:mid]   # Dividing the array elements  \n R = arr[mid:] # into 2 halves \n  \n merge_sort(L) # Sorting the first half \n merge_sort(R) # Sorting the second half \n  \n i = j = k = 0\n  \n # Copy data to temp arrays L[] and R[] \n while i < len(L) and j < len(R): \n if L[i] < R[j]: \n arr[k] = L[i] \n i+=1\n else: \n arr[k] = R[j] \n j+=1\n k+=1\n  \n # Checking if any element was left \n while i < len(L): \n arr[k] = L[i] \n i+=1\n k+=1\n  \n while j < len(R): \n arr[k] = R[j] \n j+=1\n k+=1\n  \ndef print_list(arr): \n for i in range(len(arr)):         \n print(arr[i],end=\" \") \n print() \n  \n# Driver code to test above \nif __name__ == '__main__': \n arr = [5,3,6,8,10,1,4,7] \n print (\"Given array is\", end=\"\\n\")  \n print_list(arr) \n merge_sort(arr) \n print(\"Sorted array is: \", end=\"\\n\") \n print_list(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.7903265950015697e-05,
      "p_css": 5.4699527302319145e-05,
      "p_html": 2.1642831189432146e-05,
      "p_java": 3.969648572594425e-06,
      "p_javascript": 1.8473445730089656e-05,
      "p_matlab": 0.7452589276521047,
      "p_python": 0.24968464798361545,
      "p_sql": 6.718337085005441e-06,
      "p_typescript": 0.004933017308450403
    },
    {
      "text": "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\nimport os\nfrom setuptools import setup\n\ntry:\n    long_description = open(\"README.rst\").read()\nexcept IOError:\n    long_description = \"\"\n\nLOCALEDIR = os.path.join('share', 'locale')\n\nsetup(\n    name=\"pygiftparser\",\n    version=\"1.1\",\n    url=\"https://github.com/mtommasi/pygiftparser\",\n    description=\"GIFT parser in python that parses a Gift source code and loads data in a Question/Answer model for further use in an application\",\n    license=\"MIT\",\n    author=\"Marc Tommasi - UdL/INRIA\",\n    author_email=\"first.last@univ-lille.fr\",\n    py_modules=['pygiftparser.parser',\n                'pygiftparser.i18n',\n                'pygiftparser.answer',\n                'pygiftparser.question',\n                'pygiftparser.utils'],\n    install_requires=['yattag', 'markdown', 'MarkdownSuperscript'],\n    long_description=long_description,\n    classifiers=[\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Topic :: Text Processing\"\n    ],\n    data_files=[(os.path.join('share',\n                              'locale',\n                              lang,\n                              'LC_MESSAGES'),\n                 [os.path.join('share',\n                               'locale',\n                               lang,\n                               'LC_MESSAGES',\n                               'pygiftparser.mo')])\n                for lang in os.listdir(LOCALEDIR)]\n)\n",
      "y_true": "sql",
      "pred_label": "css",
      "p_bash": 0.08685928301594988,
      "p_css": 0.4719817584132836,
      "p_html": 0.02706445694101328,
      "p_java": 0.008885137098007805,
      "p_javascript": 0.012534062336102242,
      "p_matlab": 0.014667418322026103,
      "p_python": 0.0009875290998548802,
      "p_sql": 0.13693185381409775,
      "p_typescript": 0.24008850095966458
    },
    {
      "text": "my_list = list(range(0, 30, 5))\nprint(my_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005105768300457524,
      "p_css": 0.002523861848102401,
      "p_html": 0.00175667277356535,
      "p_java": 0.00013464523484079993,
      "p_javascript": 0.0002443583249092195,
      "p_matlab": 0.003684530411739244,
      "p_python": 0.9890876625987579,
      "p_sql": 0.001154414612208341,
      "p_typescript": 0.0009032773658312124
    },
    {
      "text": "numbers = [i for i in range(0, N+1)]\nunique_numbers = list(set(numbers))\n\nprint(unique_numbers)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.6898255020567098e-05,
      "p_css": 9.689376856194822e-06,
      "p_html": 0.00024296208438505788,
      "p_java": 0.011148748385161986,
      "p_javascript": 6.595188595785847e-05,
      "p_matlab": 0.0002644282064706348,
      "p_python": 0.9877658094618966,
      "p_sql": 0.00044065567819339004,
      "p_typescript": 3.485666605782142e-05
    },
    {
      "text": "def first_last(lst):\n    first_element = lst[0]\n    last_element = lst[-1]\n    return [first_element, last_element]\n\nprint(first_last([5,3,1,7,9]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.836105875990522e-05,
      "p_css": 0.0006448912525127697,
      "p_html": 0.00022802691386729804,
      "p_java": 1.2712590961666919e-05,
      "p_javascript": 4.1975810192781846e-05,
      "p_matlab": 3.975240975961875e-06,
      "p_python": 0.9987582519237734,
      "p_sql": 0.00013327741498220897,
      "p_typescript": 9.852779397401964e-05
    },
    {
      "text": "import numpy as np\n\narray = np.random.randint(1, 10, size=(10, 7))\nprint(array)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.27862861843861464,
      "p_css": 0.0039522653076184255,
      "p_html": 0.0021957214041176303,
      "p_java": 1.966414027575013e-05,
      "p_javascript": 1.2530191130871555e-05,
      "p_matlab": 0.000604773358059237,
      "p_python": 0.7130459880683115,
      "p_sql": 3.116236397262753e-06,
      "p_typescript": 0.0015373228554744426
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# Set the URL\nurl = 'https://www.instagram.com/{username}'\n\n# Make a request\nresponse = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(response.text, 'lxml')\n\n# Extract the followers\nfollowers = soup.find('span', {'class': 'g47SY'}).next_sibling.text\n\n# Print the followers\nprint(f'Number of followers of the user: {followers}')",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 2.4195386629881196e-11,
      "p_css": 0.9860664518572061,
      "p_html": 0.00031002633496939107,
      "p_java": 0.011828722841804976,
      "p_javascript": 1.0280592885629067e-05,
      "p_matlab": 7.030609344363063e-09,
      "p_python": 0.0006467973623609781,
      "p_sql": 0.0001882329256810467,
      "p_typescript": 0.0009494810302871037
    },
    {
      "text": "largest = 0\nlist = [3, 6, 8, 11, 12]\n\nfor i in list:\n  if i > largest:\n    largest = i\n\nprint(largest)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00011418081831111255,
      "p_css": 6.932067235373022e-05,
      "p_html": 0.0011204528779095264,
      "p_java": 1.0239797061799056e-05,
      "p_javascript": 4.856676515344156e-05,
      "p_matlab": 0.997672183484377,
      "p_python": 0.0008029179140570248,
      "p_sql": 3.770958076497356e-05,
      "p_typescript": 0.00012442809001171596
    },
    {
      "text": "def insertion_sort(arr): \n    #Iterationg through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        \n        while j >= 0 and arr[j] > key: \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2556373647233618e-05,
      "p_css": 0.0001480017144052441,
      "p_html": 4.317059456442022e-06,
      "p_java": 2.2497068231701347e-06,
      "p_javascript": 8.213088932457153e-06,
      "p_matlab": 0.7649148714734142,
      "p_python": 0.23481004452361978,
      "p_sql": 1.4775479986836141e-06,
      "p_typescript": 9.826851170261617e-05
    },
    {
      "text": "def str_to_list(string):\n    return string.split(' ')",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.1040111542913217e-12,
      "p_css": 4.214747239176482e-07,
      "p_html": 5.2029512426411414e-08,
      "p_java": 0.9997828634505806,
      "p_javascript": 1.47181573407041e-14,
      "p_matlab": 9.865680820072872e-11,
      "p_python": 0.00021316265050876494,
      "p_sql": 3.4916883859908427e-06,
      "p_typescript": 8.606512770740351e-09
    },
    {
      "text": "def combine_string_lengths(word1, word2): \n  return len(word1) + len(word2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011350656644406227,
      "p_css": 0.0027774733675249735,
      "p_html": 0.0020369714281019574,
      "p_java": 0.00021678572038401212,
      "p_javascript": 0.00045532536871914183,
      "p_matlab": 0.00012745538934871053,
      "p_python": 0.9911444106929799,
      "p_sql": 0.0008429121723518255,
      "p_typescript": 0.0012636001961490759
    },
    {
      "text": "data = {\n    'height': '150cm',\n    'age': 20,\n    'name': 'John'\n}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0007937058319600839,
      "p_css": 0.9838758800176552,
      "p_html": 0.005275456417495217,
      "p_java": 0.006756620747339984,
      "p_javascript": 2.4393115454822556e-06,
      "p_matlab": 4.563990203819328e-05,
      "p_python": 0.0027576237503429426,
      "p_sql": 0.00012306265403406994,
      "p_typescript": 0.00036957136758879286
    },
    {
      "text": "def sort_strings(s):\n    return sorted(s)\n\nprint(sort_strings(['apple', 'banana', 'pear', 'mango']))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001356050776830061,
      "p_css": 0.03911021228362321,
      "p_html": 0.00366308475020072,
      "p_java": 0.00025983540419513004,
      "p_javascript": 0.0010905057166967378,
      "p_matlab": 0.0002758471544736751,
      "p_python": 0.9517766570204276,
      "p_sql": 0.0011954237762670107,
      "p_typescript": 0.0012723831172857727
    },
    {
      "text": "string_list = string.split(substring,1)\nprint(string_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.604141426199175e-05,
      "p_css": 0.020611667435204258,
      "p_html": 0.0066873311730417054,
      "p_java": 0.43631032989618046,
      "p_javascript": 6.466136099343661e-06,
      "p_matlab": 0.0002835946389423327,
      "p_python": 0.4539490824404425,
      "p_sql": 0.08037596897062653,
      "p_typescript": 0.001729517895201007
    },
    {
      "text": "def fibonacci(n): \n a = 0\n b = 1\n if n < 0:\n print(\"Incorrect input\")\n elif n == 0:\n return a \n elif n == 1:\n return b\n else:\n for i in range(2,n+1): \n c = a + b \n a = b \n b = c \n return b \n\nn = 10\nprint(fibonacci(n))\n\n# Output: 55",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.1925612555351176e-06,
      "p_css": 9.483339801124614e-07,
      "p_html": 3.1498315398571047e-06,
      "p_java": 1.295552021233126e-08,
      "p_javascript": 4.595620697528553e-08,
      "p_matlab": 5.3695316703757395e-06,
      "p_python": 0.9999868023169185,
      "p_sql": 4.6758494026146936e-07,
      "p_typescript": 1.092796793293348e-08
    },
    {
      "text": "def permutations(string):\n perms = []\n if len(string) == 1:\n perms.append(string)\n return perms\n \n for i in range(len(string)):  \n substring = string[:i] + string[i+1:]\n for permutation in permutations(substring):  \n perms.append(string[i] + permutation)\n return perms\n\npermutations('ABC')",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.1262752211985762e-11,
      "p_css": 5.1493850942348e-07,
      "p_html": 2.8283347543221964e-07,
      "p_java": 0.9997871261226222,
      "p_javascript": 2.495314112362758e-13,
      "p_matlab": 5.72917332358176e-07,
      "p_python": 0.00018665285378807677,
      "p_sql": 2.479103694009998e-05,
      "p_typescript": 5.9285820219264756e-08
    },
    {
      "text": "sentence = \"This is a sentence\"\nsentence_list = sentence.split()\nfrequency_list = []\n\nfor word in sentence_list:\n    frequency_list.append(sentence_list.count(word))\n    \nfrequency_dict = dict(zip(sentence_list, frequency_list))\n\nprint(frequency_dict)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0404286086523656,
      "p_css": 0.1577798629923162,
      "p_html": 0.06989361547006381,
      "p_java": 0.001481756685741523,
      "p_javascript": 0.0036871814347509773,
      "p_matlab": 0.03579014170979238,
      "p_python": 0.6181720341262613,
      "p_sql": 0.062401184812564646,
      "p_typescript": 0.010365614116143522
    },
    {
      "text": "def str_to_int(lst):\n  int_lst = []\n  for i in lst:\n    int_lst.append(int(i))\n  return int_lst",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 8.242738286693453e-06,
      "p_css": 3.203503301648264e-06,
      "p_html": 8.553673137164694e-06,
      "p_java": 0.999377428335419,
      "p_javascript": 1.6920693244298927e-06,
      "p_matlab": 5.044991532435317e-08,
      "p_python": 0.0005960057971640299,
      "p_sql": 1.5700327259737449e-06,
      "p_typescript": 3.2534007256011143e-06
    },
    {
      "text": "def list_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total/length",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.5313706485868035e-05,
      "p_css": 0.00010085385578215166,
      "p_html": 0.00018349221521342154,
      "p_java": 0.05279849892519938,
      "p_javascript": 0.00924428097831088,
      "p_matlab": 1.9747453615455845e-09,
      "p_python": 0.9373052495840646,
      "p_sql": 0.0003012871973512113,
      "p_typescript": 2.102156284711103e-05
    },
    {
      "text": "import http.server\n\nserver_address = ('', 8000) \nhttpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)\nhttpd.serve_forever()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.0008845130500681091,
      "p_css": 0.00048440098212637806,
      "p_html": 0.971923556568014,
      "p_java": 5.339561995327293e-05,
      "p_javascript": 0.0002073301086247608,
      "p_matlab": 3.160314707533479e-07,
      "p_python": 0.02494281338329007,
      "p_sql": 3.666564872755578e-05,
      "p_typescript": 0.001467008607725132
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n \n# Load the dataset\ndf = pd.read_csv(‘data.csv’)\n \n# Create feature and target matrices\nX = df.drop(‘Accepted’, axis=1).values\ny = df[‘Accepted’].values\n \n# Create and train model\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# New data\nnew_data =np.array([[x1, x2, x3, x4]]) \n \n# Predict\nmodel.predict(new_data)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.26070096735974424,
      "p_css": 0.07195824184175112,
      "p_html": 0.0034603574447181797,
      "p_java": 2.728754480496719e-05,
      "p_javascript": 8.561093637560999e-06,
      "p_matlab": 6.674217098524455e-05,
      "p_python": 0.5987286371466236,
      "p_sql": 3.1650269130726914e-06,
      "p_typescript": 0.065046040370822
    },
    {
      "text": "class MinHeap:\n    def __init__(self):\n        self.heap_list = [0]\n        self.current_size = 0\n\n    def insert(self, item):\n        self.heap_list.append(item)\n        self.current_size += 1\n        self.fix_new_item()\n\n    def fix_new_item(self):\n        idx = self.current_size\n        while idx // 2 > 0:\n            if self.heap_list[idx] < self.heap_list[idx // 2]:\n                temp = self.heap_list[idx // 2]\n                self.heap_list[idx // 2] = self.heap_list[idx]\n                self.heap_list[idx] = temp\n            idx = idx // 2",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00018272583277613417,
      "p_css": 0.04511872307940717,
      "p_html": 0.3392790355365986,
      "p_java": 1.3485926233699438e-05,
      "p_javascript": 0.00023951639241701498,
      "p_matlab": 0.0003413278174308711,
      "p_python": 0.07192565217765276,
      "p_sql": 0.5423955934870156,
      "p_typescript": 0.0005039397504680746
    },
    {
      "text": "def reverse_string(my_str): \n  rev_str = \"\" \n  \n  for i in my_str: \n    rev_str = i + rev_str\n  \n  return rev_str\n\nmy_str = 'Hello World'\n\nreverse_string(my_str)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.15513481987769825,
      "p_css": 0.009929270077999871,
      "p_html": 0.017191552490944593,
      "p_java": 5.063630462062585e-07,
      "p_javascript": 0.032315858239251996,
      "p_matlab": 0.014572143863981766,
      "p_python": 0.7635527856564145,
      "p_sql": 0.0013573914059567857,
      "p_typescript": 0.005945672024705964
    },
    {
      "text": "class Employee:\n def __init__(self, name, age, salary):\n self.name = name\n self.age = age\n self.salary = salary\n\nclass Company:\n def __init__(self, name):\n self.name = name\n self.employees = []\n \n def add_employee(self, employee):\n self.employees.append(employee)\n \nemployee1 = Employee('John Doe', 30, 25000)\nemployee2 = Employee('Jane Doe', 28, 30000)\n\ncompany = Company('ACME Inc.')\ncompany.add_employee(employee1)\ncompany.add_employee(employee2)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.005496365248580959,
      "p_css": 0.3300530287157207,
      "p_html": 0.11996354200158472,
      "p_java": 0.35870712308573666,
      "p_javascript": 4.011399628753556e-07,
      "p_matlab": 0.00016739431430805196,
      "p_python": 0.16406445582607473,
      "p_sql": 0.020351260729048845,
      "p_typescript": 0.0011964289389825684
    },
    {
      "text": "def find_longest_substring(s, characters):\n    longest_length = 0\n    longest_substring = \"\"\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if set(substring).issubset(characters):\n                if len(substring) > longest_length:\n                    longest_length = len(substring)\n                    longest_substring = substring\n\n    return longest_substring",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002768759433702984,
      "p_css": 0.00013197817971973298,
      "p_html": 0.0005792356985080907,
      "p_java": 1.4714403565080762e-05,
      "p_javascript": 3.132392806790148e-05,
      "p_matlab": 0.07355215786628955,
      "p_python": 0.9244310794681061,
      "p_sql": 0.0007695875188690807,
      "p_typescript": 0.0002130469935042354
    },
    {
      "text": "def differentiate(equation):\n    # Get the coefficient and exponent of all terms\n    terms = equation.split(\"+\")\n    coefficient = []\n    exponents = []\n\n    for term in terms:\n        coef, exp = term.split(\"x\")\n        coef = int(coef)\n        if exp == \"\":\n            exp = 1\n        else:\n            exp = int(exp)\n        coefficient.append(coef)\n        exponents.append(exp)\n\n    # Calculate the differentiated equation \n    for i in range (len(coefficient)):\n        coefficient[i] = coefficient[i] * exponents[i]\n        exponents[i] -= 1\n\n    # Format the new equation \n    result = \"\"\n    for i in range(len(coefficient)):\n        if coefficient[i] == 0:\n            continue\n        else:\n            if coefficient[i] > 0:\n                result += \"+\"\n            result += str(coefficient[i])\n            if exponents[i] != 0:\n                result += \"x\"\n                if exponents[i] != 1:\n                    result += \"^\" + str(exponents[i])\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0038358765686209943,
      "p_css": 0.013085008835822204,
      "p_html": 0.004181172193453049,
      "p_java": 0.002877483771023629,
      "p_javascript": 0.002943037399301884,
      "p_matlab": 0.037592954461470186,
      "p_python": 0.9188331891260834,
      "p_sql": 0.01030813380389274,
      "p_typescript": 0.006343143840332126
    },
    {
      "text": "#Import libraries \nimport requests \nfrom bs4 import BeautifulSoup \n\n#Make a request to the url \nurl = 'http://www.example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content, 'html.parser') \n\n#Extract data \ndata = [] \n\nfor x in soup.find_all('div', class_=\"data-cell\"): \n data.append(x.text.strip()) \n\n#Print the data \nprint(data)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.9081742537819655e-13,
      "p_css": 0.1697102848539815,
      "p_html": 0.8288872746063657,
      "p_java": 0.0013354636337723866,
      "p_javascript": 3.5354318097241306e-07,
      "p_matlab": 6.617118053857918e-08,
      "p_python": 6.366840398688624e-06,
      "p_sql": 3.649291346456777e-05,
      "p_typescript": 2.3697437464710013e-05
    },
    {
      "text": "def binarySearch(arr, start, end, x): \n    if end >= start:  \n        mid = start + (end - start) // 2 \n        if arr[mid] == x: \n            return mid  \n        elif arr[mid] > x: \n            return binarySearch(arr, start, mid - 1, x)  \n        else: \n            return binarySearch(arr, mid + 1, end, x)  \n    else: \n        return -1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00011969521366155221,
      "p_css": 0.0006268711509321773,
      "p_html": 0.00012660613689533372,
      "p_java": 1.9476660326216535e-05,
      "p_javascript": 3.697346567231772e-05,
      "p_matlab": 0.0020581666502272325,
      "p_python": 0.9968221815767017,
      "p_sql": 5.5959073644723075e-05,
      "p_typescript": 0.00013407007193873613
    },
    {
      "text": "import psycopg2\nimport sys\n\ntry:\n conn = psycopg2.connect(\"dbname = 'books' user = 'postgres' host = 'localhost' password = 'password'\")\nexcept psycopg2.Error as e:\n print e\n\ntry:\n cur = conn.cursor()\nexcept psycopg2.Error as e:\n print e\n\ndef createTable():\n query = \"CREATE TABLE books(title text, author text);\"\n try:\n cur.execute(query)\n except psycopg2.Error as e:\n print e\n\ndef addBook(title, author):\n query = \"INSERT INTO books (title, author) VALUES (%s, %s);\"\n try:\n cur.execute(query, (title, author))\n conn.commit()\n except psycopg2.Error as e:\n print e\n\ndef viewBooks():\n query = \"SELECT * FROM books;\"\n try:\n cur.execute(query)\n results = cur.fetchall()\n print results\n except psycopg2.Error as e:\n print e\n\ndef viewBook(title):\n query = \"SELECT * FROM books WHERE title = '%s';\" % title\n try:\n cur.execute(query)\n results = cur.fetchone()\n print results\n except psycopg2.Error as e:\n print e\n\nif __name__ == \"__main__\":\n createTable()\n addBook(\"The Catcher in the Rye\", \"J.D. Salinger\")\n viewBooks()\n viewBook(\"The Catcher in the Rye\")",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.00023740751337139124,
      "p_css": 0.014877404335334958,
      "p_html": 0.07999692461697493,
      "p_java": 3.6506848181401334e-06,
      "p_javascript": 0.0005808669579258357,
      "p_matlab": 4.145010239494772e-05,
      "p_python": 0.008520804137777317,
      "p_sql": 0.20643128429142338,
      "p_typescript": 0.6893102073599792
    },
    {
      "text": "class StudentDetails:\n def __init__(self):\n  self.students=[]\n \n def add_student(self,name,age,roll):\n  self.students.append({\"name\":name,\"age\":age,\"roll\":roll})\n \n def print_table(self):\n  print(\"Name\\tAge\\tRoll\")\n  for s in self.students:\n   print(\"{}\\t{}\\t{}\".format(s['name'],s['age'],s['roll']))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0011703990888027149,
      "p_css": 0.14189768176722956,
      "p_html": 0.0940499100821758,
      "p_java": 0.2177445061566573,
      "p_javascript": 4.3727454744375694e-07,
      "p_matlab": 0.0004002749996829065,
      "p_python": 0.5301188592269751,
      "p_sql": 0.014041601864974869,
      "p_typescript": 0.0005763295389542938
    },
    {
      "text": "The class Stopwatch is used to measure elapsed time. The __init__ method initializes two variables, self._start_time and self._end_time which are used to store the start and end times of the elapsed time measurement. The methods start() and stop() are then used to mark the beginning and end of the measurement respectively. The get_elapsed_time() method then calculates the elapsed time by subtracting the start time from the end time.",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 1.631123399045895e-06,
      "p_css": 3.9246588944164217e-07,
      "p_html": 4.293924048381697e-07,
      "p_java": 9.559336951001519e-07,
      "p_javascript": 0.0071276122275354984,
      "p_matlab": 2.8597152360941893e-10,
      "p_python": 5.397749988025923e-06,
      "p_sql": 9.269051052900604e-07,
      "p_typescript": 0.9928626539160113
    },
    {
      "text": "def solve(eq):\n    lhs_x = eq.split(\"=\")[0]\n    rhs = float(eq.split(\"=\")[1])\n    x = float(lhs_x.split(\"+\")[0].split(\"x\")[0])\n    constant = float(lhs_x.split(\"+\")[1])\n    return (rhs - constant) / x\n\nif __name__ == \"__main__\":\n    eq = \"2x + 3 = 5\"\n    print(solve(eq))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.17447453412051417,
      "p_css": 0.13829843429398367,
      "p_html": 0.06589862109516627,
      "p_java": 0.0028048732546661153,
      "p_javascript": 0.24623044413976133,
      "p_matlab": 0.0258374826546206,
      "p_python": 0.2788284983522558,
      "p_sql": 0.050532904639889464,
      "p_typescript": 0.017094207449142456
    },
    {
      "text": "def print_string(text):\n    if len(text) > 0:\n        print(text)\n    else:\n        raise Exception('The input string is empty')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00012029262415749604,
      "p_css": 0.06493920385733104,
      "p_html": 0.0006418385635609258,
      "p_java": 0.01780804709898072,
      "p_javascript": 2.8711599552722925e-05,
      "p_matlab": 0.00015733077369367303,
      "p_python": 0.826861432784897,
      "p_sql": 0.08373899426079662,
      "p_typescript": 0.005704148437029967
    },
    {
      "text": "def fibonacci_sequence(num): \n \n    a = 0\n    b = 1\n \n    if num < 0: \n        print(\"Incorrect input\") \n    elif num == 0: \n        return a \n    elif num == 1: \n        return b \n    else: \n        for i in range(2,num): \n            c = a + b \n            a = b \n            b = c \n        return b \n \nprint(fibonacci_sequence(num))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1407142951252343e-07,
      "p_css": 2.929174677685477e-11,
      "p_html": 2.47851281634644e-07,
      "p_java": 3.7409619318332365e-09,
      "p_javascript": 8.003826753936035e-09,
      "p_matlab": 0.9934363392879064,
      "p_python": 0.006563181593216307,
      "p_sql": 9.025623235128478e-08,
      "p_typescript": 1.5165853468262787e-08
    },
    {
      "text": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.5282349561354333e-06,
      "p_css": 1.311251988892571e-08,
      "p_html": 3.557353265537443e-05,
      "p_java": 8.693189882630018e-07,
      "p_javascript": 1.2440992696861243e-06,
      "p_matlab": 0.9873593068398039,
      "p_python": 0.01259667821965027,
      "p_sql": 4.0310479439824533e-07,
      "p_typescript": 3.383537362305442e-06
    },
    {
      "text": "words1 = [\"Hello\",\"World\",\"My\",\"Name\",\"Is\"]\nwords2 = [\"John\", \"Smith\", \"Where\", \"Are\", \"You\"]\n\nfor i in range(len(words1)):\n    print(words1[i], words2[i])",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.5872762533426381,
      "p_css": 5.699065705201144e-05,
      "p_html": 0.003519940205657602,
      "p_java": 6.568165001204803e-10,
      "p_javascript": 0.06466147822792671,
      "p_matlab": 0.014238260099439551,
      "p_python": 0.3254363222740236,
      "p_sql": 0.0022287724184909016,
      "p_typescript": 0.0025819821179550078
    },
    {
      "text": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for elem in lst:\n        if elem in seen:\n            duplicates.append(elem)\n        else:\n            seen.add(elem)\n    return duplicates",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003130190297563692,
      "p_css": 0.008605210983865064,
      "p_html": 0.006083639512314868,
      "p_java": 0.0026994086367289707,
      "p_javascript": 0.0015419072257844045,
      "p_matlab": 0.00672653033220893,
      "p_python": 0.9665410250902957,
      "p_sql": 0.0013875430121306658,
      "p_typescript": 0.0032845449091075856
    },
    {
      "text": "def last_occurrence(arr, item):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == item:\n            return i\n    return -1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.4143683980058943e-07,
      "p_css": 1.1035205131119755e-06,
      "p_html": 3.531172935376533e-06,
      "p_java": 5.9554490995721226e-08,
      "p_javascript": 5.396859042297407e-07,
      "p_matlab": 0.8911790862717743,
      "p_python": 0.10881517544090097,
      "p_sql": 3.9708773077437875e-08,
      "p_typescript": 1.232078678739774e-07
    },
    {
      "text": "word_dict = {'Python': 1, 'is': 2, 'an': 3, 'interpreted': 4, 'high-level': 5, 'programming': 6, 'language': 7, 'for': 8, 'general-purpose': 9, 'programming': 10 }",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.0008361620005371475,
      "p_css": 0.01663191774925164,
      "p_html": 0.0016916239443387207,
      "p_java": 3.376582635475141e-05,
      "p_javascript": 0.2313192042121161,
      "p_matlab": 0.0035404286820719098,
      "p_python": 0.001936308676105334,
      "p_sql": 8.180197878492454e-05,
      "p_typescript": 0.7439287869304395
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nhtml = response.content\nsoup = BeautifulSoup(html, 'html5lib')\n\nlinks = []\nfor link in soup.find_all('a', href=True):\n links.append(link['href'])\n \nprint(links)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.2468499119763137e-15,
      "p_css": 3.66821447245982e-05,
      "p_html": 0.05072803405154624,
      "p_java": 0.9491565604514582,
      "p_javascript": 2.7294526790855343e-07,
      "p_matlab": 5.375427265547115e-05,
      "p_python": 2.3245565777911163e-05,
      "p_sql": 1.4128566961070992e-06,
      "p_typescript": 3.7711871386886695e-08
    },
    {
      "text": "def reverseList(list):\n    start = 0\n    end = len(list) - 1\n  \n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n  \n    return list\n\nlist = [1, 2, 4, 7, 9]\n\nreverseList(list)\n# Output: [9, 7, 4, 2, 1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00044967480599286637,
      "p_css": 0.001638139258459014,
      "p_html": 0.0012513952761440666,
      "p_java": 5.9003202399269366e-05,
      "p_javascript": 0.00041942161753999945,
      "p_matlab": 0.0005611221999430509,
      "p_python": 0.9820311233070709,
      "p_sql": 0.013014967989697087,
      "p_typescript": 0.0005751523427538377
    },
    {
      "text": "#!/usr/bin/env python\n\nimport immlib\nfrom immlib import LogBpHook, BpHook\n\n\nclass ReturnBP(BpHook):\n    def __init__(self):\n        BpHook.__init__(self)\n        \n    def run(self, regs):\n        imm = immlib.Debugger()\n        eip = regs[\"EIP\"]\n        imm.log(\"bp, EIP is 0x%08X \" % eip)\n        imm.addKnowledge(\"0x%08X\" % eip, eip)\n        #self.UnHook()\n        imm.deleteBreakpoint(eip, eip+4)\n        imm.run()\n        \nclass ReturnLog(LogBpHook):\n    def __init__(self):\n        LogBpHook.__init__(self)\n    \n    def run(self, regs):\n        imm = immlib.Debugger()\n        eip = regs[\"EIP\"]\n        imm.log(\"log, EIP is 0x%08X \" % eip)\n        imm.addKnowledge(\"0x%08X\" % eip, eip)\n        self.UnHook()\n        imm.deleteBreakpoint(eip, eip+4)\n\ndef main(args):    \n    imm = immlib.Debugger()    \n    module = imm.getModule(imm.getDebuggedName())\n    imm.log(\"module %s at 0x%08X\" % (module.getName(), module.getBase()))\n    use_log_bp = True\n\n    if len(args) > 0 and args[0] == \"false\":\n        imm.log(\"Using non logging bp\")\n        use_log_bp = False\n    \n    \n    # make sure module is analysed\n    if not module.isAnalysed():\n        module.Analyse()\n    knowledge = imm.listKnowledge()\n    hooked = 0\n    not_hooked = 0\n    \n    for f in imm.getAllFunctions(module.getBase()): \n        for ret in imm.getFunctionEnd(f):\n            if \"0x%08X\" % ret not in knowledge:\n                #imm.log(\"function 0x%08X ret at 0x%08X\" % (f, ret))\n                if use_log_bp:\n                    hook = ReturnLog()\n                    hook.add(\"ReturnLog 0x%08X\"%f, ret)                \n                    hooked +=1\n                else:\n                    hook = ReturnBP()\n                    hook.add(\"ReturnBP 0x%08X\"%f, ret)                \n                    hooked +=1\n                    \n                # i think fasthook because fast hook is over writing rets, getFunctionEnd is having trouble\n                #fast = immlib.FastLogHook(imm)\n                #fast.logFunction(ret)\n                #fast.logRegister(\"EIP\")\n                #fast.Hook()\n            else:\n                not_hooked += 1\n        \n    \n    imm.log(\"Hooked %i, skipped %i\" % (hooked, not_hooked))             \n    return \"Found returns, attached hooks\"\n",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.00046651245683407245,
      "p_css": 0.0014449309983871645,
      "p_html": 0.02018673483275627,
      "p_java": 0.00016647152743767734,
      "p_javascript": 0.9170627958675283,
      "p_matlab": 0.00014678268824642736,
      "p_python": 0.051448713697660915,
      "p_sql": 0.00647810730011912,
      "p_typescript": 0.002598950631029957
    },
    {
      "text": "import requests\nimport pymongo\n\n# Establish connection to MongoDB\nclient = pymongo.MongoClient('mongodb://localhost:27017/')\ndb = client['aggregated_data']\n\n# Make a request to each API and aggregate the data\ndata_points = []\nfor url in ['url_1', 'url_2', etc.]:\n req = requests.get(url)\n data_points.append(req.json())\n\n# Store the data in the MongoDB database\ndb.aggregated_data.insert_many(data_points)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.4103254089517496e-05,
      "p_css": 0.8708239535865524,
      "p_html": 0.0009798557873316829,
      "p_java": 5.370005317672091e-05,
      "p_javascript": 0.002073228495920817,
      "p_matlab": 0.0003997514285344679,
      "p_python": 0.004997340746846454,
      "p_sql": 0.0006592597063671787,
      "p_typescript": 0.11998880694118068
    },
    {
      "text": "def find_prime_number(n):\n    number = n + 1\n    while True:\n        counter = 0\n        for i in range(2, number):\n          if number % i == 0:\n            counter = 1\n        if counter == 0:\n            break\n        number += 1\n    return number\n\nnum = int(input(\"Enter a number:\"))\nprime = find_prime_number(num)\n\nprint(prime)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.433974111407894e-06,
      "p_css": 4.2171388363910784e-07,
      "p_html": 1.3072850225864854e-05,
      "p_java": 6.811005398636221e-06,
      "p_javascript": 1.146937885053052e-07,
      "p_matlab": 0.0004801476477857668,
      "p_python": 0.999494207699482,
      "p_sql": 2.4174836791769904e-06,
      "p_typescript": 3.7293164495507557e-07
    },
    {
      "text": "sequence = [3, 2, 5, 1, 9]\n\n# finding the largest number\nmax_num = max(sequence)\n\n# finding the index of the largest number in the sequence\nindex = sequence.index(max_num)\n\nprint(\"The largest number in the sequence is:\", max_num)\nprint(\"The position of the largest number in the sequence is:\", index)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.007877472913477072,
      "p_css": 0.003245911239563264,
      "p_html": 0.1086038777817456,
      "p_java": 0.00010814938803431262,
      "p_javascript": 0.260957163278044,
      "p_matlab": 4.93710168577431e-05,
      "p_python": 0.2686117824511662,
      "p_sql": 0.00031044387778653653,
      "p_typescript": 0.3502358280533253
    },
    {
      "text": "def findPairs(nums, t_sum):\n    '''Function to find all the unique pairs of numbers \n    that add up to the target sum.'''\n    num_set = set(nums)\n    found_pairs = []\n    for num in nums:\n        if (t_sum - num) in num_set:\n            found_pair = (min(num, t_sum - num), max(num, t_sum - num))\n            if found_pair not in found_pairs:\n                found_pairs.append(found_pair)\n    return found_pairs\n    \nnums = [2, 3, 5, 7]\nt_sum = 10\nprint(findPairs(nums, t_sum))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.554125160376546e-06,
      "p_css": 2.9798790505105553e-09,
      "p_html": 2.194625144731273e-06,
      "p_java": 3.18015670248177e-06,
      "p_javascript": 0.002377672478522111,
      "p_matlab": 0.9973630004278778,
      "p_python": 0.0002329619057569097,
      "p_sql": 9.810266422530851e-06,
      "p_typescript": 9.623034533845226e-06
    },
    {
      "text": "# Python3 program to find LCM of two numbers \n\n# method to return gcd of a and b \ndef gcd(a, b): \n    if a == 0 : \n        return b \n          \n    return gcd(b % a, a) \n      \n# method to return LCM of two numbers \ndef lcm(a, b): \n    return (a*b) // gcd(a, b)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.2256182694397572e-06,
      "p_css": 8.780119021195481e-07,
      "p_html": 4.302396202974869e-06,
      "p_java": 0.9995725867964608,
      "p_javascript": 7.142321032783349e-05,
      "p_matlab": 9.789707662204147e-12,
      "p_python": 0.00031278453297057157,
      "p_sql": 1.7939646746991764e-06,
      "p_typescript": 3.3005459402024716e-05
    },
    {
      "text": "def median(nums):\n    nums.sort()\n    mid = len(nums) // 2\n    \n    if len(nums) % 2 == 0:\n        return (nums[mid] + nums[mid-1]) / 2\n    else:\n        return nums[mid]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.158403846581548e-05,
      "p_css": 0.00022330607538301607,
      "p_html": 6.179776401259991e-05,
      "p_java": 8.853261200729797e-06,
      "p_javascript": 1.952307976839953e-05,
      "p_matlab": 4.815307619416649e-06,
      "p_python": 0.9995097059216553,
      "p_sql": 5.790907167081588e-05,
      "p_typescript": 5.250548022415499e-05
    },
    {
      "text": "formatted = '{\\n  \"name\":\"John\",\\n  \"age\":30,\\n  \"city\":\"New York\"\\n}'",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00014253773772140464,
      "p_css": 0.9988769193132616,
      "p_html": 0.00013733507039854315,
      "p_java": 0.0005648870223657133,
      "p_javascript": 7.321023768275956e-07,
      "p_matlab": 1.2229493118932363e-05,
      "p_python": 0.00024011557418885496,
      "p_sql": 8.507099588447167e-06,
      "p_typescript": 1.6736586979782346e-05
    },
    {
      "text": "def edit_distance(str1, str2):\n    matrix = []\n    for i in range(len(str1) + 1):\n        matrix.append([0] * (len(str2) + 1))\n        \n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n        \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])\n    \n    return matrix[len(str1)][len(str2)]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.382714503617545e-05,
      "p_css": 3.933597450199809e-06,
      "p_html": 6.210755009621575e-07,
      "p_java": 1.7855666737911635e-06,
      "p_javascript": 0.00013407151673633762,
      "p_matlab": 0.02047037089745456,
      "p_python": 0.9789923230527979,
      "p_sql": 0.00036916657624746276,
      "p_typescript": 1.3900572102526357e-05
    },
    {
      "text": "#importing libraries\nimport pulp\n\n#creating array\nstocks = [\"a\", \"b\", \"c\"]\n\n#creating problem\nprob = pulp.LpProblem(\"Maximise Profit\", pulp.LpMaximize)\n\n#creating variables\nx = pulp.LpVariable.dicts(\"number of stocks\", stocks, lowBound=0)\n\n#creating objective function\nprob += pulp.lpSum([200*x[\"a\"], 150*x[\"b\"], 250*x[\"c\"]]), \"Maximizing Profit\"\n\n#constraints\nprob += x[\"a\"] + x[\"b\"] + x[\"c\"] <= 4, \"Total Cost\"\nprob += x[\"a\"] * 300 + x[\"b\"] * 250 + x[\"c\"] * 250 <= 1000, \"Investment Cost\"\n\n#solving problem\nprob.solve()\n\n#printing results\nfor stock in stocks:\n print(\"Number of\", stock, \"stocks bought:\", pulp.value(x[stock]))\n\n#printing total profit\nprint(\"Total Profit:\", pulp.value(prob.objective))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.03188937222754369,
      "p_css": 0.41549403400940993,
      "p_html": 0.0319292396496766,
      "p_java": 0.003658039922043201,
      "p_javascript": 0.10385306954907159,
      "p_matlab": 0.11819391120162628,
      "p_python": 0.1511207590503351,
      "p_sql": 0.01646335970191478,
      "p_typescript": 0.12739821468837886
    },
    {
      "text": "def generateTable(num):\n    htmlTable = \"\"\n\n    htmlTable += \"<table border=\\\"1\\\">\\n\"\n    htmlTable += \"<tr>\\n\"\n    htmlTable += \"<th>Number</th>\\n\"\n    htmlTable += \"<th>Multiple</th>\\n\"\n    htmlTable += \"</tr>\\n\"\n\n    for i in range(1, 11):\n        htmlTable += \"<tr>\\n\"\n        htmlTable += \"<td>\" + str(num) + \"</td>\\n\"\n        htmlTable += \"<td>\" + str(num * i) + \"</td>\\n\"\n        htmlTable += \"</tr>\\n\"\n\n    htmlTable += \"</table>\"\n\n    return htmlTable",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.9053350735124732e-05,
      "p_css": 4.290881523134953e-07,
      "p_html": 0.3203936152862471,
      "p_java": 3.6346504643218657e-06,
      "p_javascript": 6.015888224978911e-05,
      "p_matlab": 0.6360696540594711,
      "p_python": 0.04341954958888008,
      "p_sql": 3.389915504092505e-05,
      "p_typescript": 5.93875905794711e-09
    },
    {
      "text": "def is_unique(string):\n    chars = set()\n    for char in string:\n        if char in chars:\n            return False\n        else:\n            chars.add(char)\n    return True\n\nprint(is_unique(string))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.988180775125417e-08,
      "p_css": 0.0002920867796824099,
      "p_html": 3.666368097452238e-05,
      "p_java": 0.9715545060444823,
      "p_javascript": 1.3075012638238232e-09,
      "p_matlab": 2.565352383323482e-07,
      "p_python": 0.027072462299774475,
      "p_sql": 0.0010417462850360636,
      "p_typescript": 2.2571855028695444e-06
    },
    {
      "text": "#import libraries \nimport pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\n\n#import dataset \ndf = pd.read_csv('stock_data.csv')\n\n#divide the data into independent and dependent variables \nX = df.drop('target_stock', axis=1).values\ny = df['target_stock'].values\n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = SVR() \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.876644501231115,
      "p_css": 0.03370119946161617,
      "p_html": 0.0008028765815914275,
      "p_java": 7.224183975364585e-07,
      "p_javascript": 6.009654773411224e-06,
      "p_matlab": 1.6522067386394215e-06,
      "p_python": 0.051533765726479684,
      "p_sql": 5.14062834313938e-07,
      "p_typescript": 0.037308758656453694
    },
    {
      "text": "import nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\n# Define a function to get the simple POS tag\ndef get_simple_pos(tag):\n \n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN\n\n# Create a lemmatizer object \nlemmatizer = WordNetLemmatizer()\n\ndef lemmatize_sentence(sentence):\n    #tokenize the sentence and find the POS tag for each token\n    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  \n    #tuple of (token, simple POS tag)\n    nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged]\n    lemmatized_sentence = []\n    for word, tag in nltk_tagged:\n        lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))\n    return \" \".join(lemmatized_sentence)\n\n# Create the chatbot\ndef create_bot():\n    print(\"Hello! I am a customer service chatbot. How can I help you?\")\n    response = input()\n    response = lemmatize_sentence(response)\n    # Perform actions based on the response\n    if response == \"quit\":\n        return\n    else:\n        print(\"Thank you for your question. I will get back to you shortly with an answer.\")\n        create_bot()\n\ncreate_bot()",
      "y_true": "sql",
      "pred_label": "css",
      "p_bash": 0.026823904045507784,
      "p_css": 0.4487559786103983,
      "p_html": 0.13300897529248532,
      "p_java": 1.747687597548322e-05,
      "p_javascript": 0.015586431909092688,
      "p_matlab": 0.0015934222209787387,
      "p_python": 0.08742939209019336,
      "p_sql": 0.17455791018445618,
      "p_typescript": 0.11222650877091213
    },
    {
      "text": "def sum_range(start, end):\n    total = 0\n    for i in range(start,end + 1):\n        total += i\n    return total\n\n# Test the function\nprint(sum_range(1, 10)) # Output: 55",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.7884820769161774e-05,
      "p_css": 4.3399064294938564e-05,
      "p_html": 9.659235950683634e-05,
      "p_java": 3.659790710141673e-07,
      "p_javascript": 0.0004040159942364322,
      "p_matlab": 3.7260179591322485e-05,
      "p_python": 0.9993631377142604,
      "p_sql": 1.2080431091139034e-05,
      "p_typescript": 5.263457178808756e-06
    },
    {
      "text": "def capitalize_string(str):\n    words = str.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)\n\ncapitalized_string = capitalize_string(\"this is an example\")\nprint(capitalized_string)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0005825867905105945,
      "p_css": 0.0005444052384134018,
      "p_html": 0.041700703942433824,
      "p_java": 0.0004846543704659569,
      "p_javascript": 0.0026853291524275135,
      "p_matlab": 0.00015499824552327412,
      "p_python": 0.07331806252207523,
      "p_sql": 0.8804321294814321,
      "p_typescript": 9.713025671813387e-05
    },
    {
      "text": "def is_palindrome(s):\n  #reverse string and compare \n  rev = s[::-1]\n  if (s == rev): \n    return True\n  else: \n    return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.317638546535408e-05,
      "p_css": 0.0022609065791414805,
      "p_html": 0.0014687776566128417,
      "p_java": 0.017735127198995913,
      "p_javascript": 1.2980388243852339e-06,
      "p_matlab": 2.12936088059311e-05,
      "p_python": 0.9757309818291275,
      "p_sql": 0.0013407948151938748,
      "p_typescript": 0.001427643887832604
    },
    {
      "text": "def calculate_total(order_items, tax_rate):\n    total = 0.00\n    for item in order_items:\n        total += (item[\"Price\"] * item[\"Qty\"])\n    total += total * tax_rate\n    return total\n\norder_items = [{\"Name\":\"Apples\",\"Price\":2.00,\"Qty\":2},{\"Name\":\"Milk\",\"Price\":2.50,\"Qty\":1},{\"Name\":\"Eggs\",\"Price\":3.00,\"Qty\":6}]\ntax_rate = 0.08\n\ntotal = calculate_total(order_items, tax_rate)\nprint(total)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0010790957097229956,
      "p_css": 0.04377259768636964,
      "p_html": 0.01145407643314101,
      "p_java": 0.008517647043871483,
      "p_javascript": 6.805024963577416e-05,
      "p_matlab": 0.00013215255946325948,
      "p_python": 0.9346475248596964,
      "p_sql": 9.500431960533229e-05,
      "p_typescript": 0.00023385113849398688
    },
    {
      "text": "import json\n\ndata = json.loads(data_json)\n\n# Output:\ndata = {\n \"name\": \"John Doe\",\n \"age\": 18,\n \"hobbies\": [\"reading\", \"swimming\", \"gaming\"],\n \"contact\": {\n  \"email\": \"johndoe@example.com\",\n  \"mobile\": \"+1900000000\"\n }\n}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.0688227063449457e-07,
      "p_css": 0.9495356220393402,
      "p_html": 0.0006722655992421631,
      "p_java": 0.04975980594132749,
      "p_javascript": 1.006667795909861e-06,
      "p_matlab": 2.354408939714423e-07,
      "p_python": 2.540356794986159e-05,
      "p_sql": 4.319261550258148e-06,
      "p_typescript": 1.2345996295356664e-06
    },
    {
      "text": "#!/bin/bash\n\n# OS check\nif [ $(uname) == 'Darwin' ];\nthen\n    echo \"Mac OS detected\"\nelif [ $(uname) == 'Linux' ];\nthen\n    echo \"Linux OS detected\"\nfi\n\n# install homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n\n# install git\nbrew install git\n\n# install node\nbrew install node\n\n# install nvm\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n\n# install yarn\nbrew install yarn\n\n# install postgres\nbrew install postgres\n\n# create local postgres database\ncreatedb your_dbname\n\n# install python\nbrew install python\n\n# start postgres server\npg_ctl -D /usr/local/var/postgres start",
      "y_true": "bash",
      "pred_label": "bash",
      "p_bash": 0.9999999999999445,
      "p_css": 7.037002283771948e-15,
      "p_html": 3.2411225302918326e-14,
      "p_java": 2.871797174411275e-22,
      "p_javascript": 3.0733925670708368e-15,
      "p_matlab": 6.638090122886361e-16,
      "p_python": 5.014023372660116e-16,
      "p_sql": 1.1748475868693049e-14,
      "p_typescript": 8.769796837227135e-18
    },
    {
      "text": "def find_closest_value(list_values, target_value):\n closest_value = None\n min_diff = float('inf')\n for value in list_values:\n diff = abs(target_value - value)\n if diff < min_diff:\n min_diff = diff\n closest_value = value\n return closest_value\n\nprint(find_closest_value(list_values, target_value)) # Output: 4",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.4829014702369024e-05,
      "p_css": 0.00035533794077153376,
      "p_html": 3.161768163406689e-05,
      "p_java": 1.0443955589779793e-06,
      "p_javascript": 4.135479650026431e-06,
      "p_matlab": 0.999567372301128,
      "p_python": 8.550577123740115e-08,
      "p_sql": 1.0513540999012177e-05,
      "p_typescript": 5.064139784827962e-06
    },
    {
      "text": "# import necessary libraries\nfrom sklearn import svm\n\n# define the model\nmodel = svm.SVC(kernel='rbf', gamma=1.0, C=1.0)\n\n# fit the model\nmodel.fit(X, y)\n\n# make predictions\ny_pred = model.predict(X)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9954084060946411,
      "p_css": 0.00016609235913985212,
      "p_html": 1.676954869819108e-05,
      "p_java": 2.5393304010156175e-07,
      "p_javascript": 2.9022610733878834e-06,
      "p_matlab": 7.050302864417964e-07,
      "p_python": 0.004390133345492604,
      "p_sql": 2.77655257813808e-10,
      "p_typescript": 1.4737149973175832e-05
    },
    {
      "text": "def classify(input):\n    if input == \"apple\":\n        label = \"fruit\"\n    else:\n        label = \"not fruit\"\n    return label",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06629548985457416,
      "p_css": 0.15539122774654282,
      "p_html": 0.06052543650570604,
      "p_java": 0.0008361089655781862,
      "p_javascript": 0.002538755862434546,
      "p_matlab": 0.009894240335953795,
      "p_python": 0.6945423198968809,
      "p_sql": 0.007723791021379739,
      "p_typescript": 0.002252629810949785
    },
    {
      "text": "import re\n\ndef convert_to_identifier(input_string):\n    # Replace all non-alphanumeric characters\n    output_string = re.sub(r'\\W+', '', input_string)\n    \n    # If the first character is non-alphabetic, prepend an underscore\n    if not output_string[0].isalpha(): \n        output_string = \"_\" + output_string\n        \n    return output_string\n\nidentifier = convert_to_identifier(\"hello-world\")\nprint(identifier)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.14479438066294822,
      "p_css": 0.0032826158438670682,
      "p_html": 0.08632744285500271,
      "p_java": 8.655499039079012e-08,
      "p_javascript": 0.023352265958197567,
      "p_matlab": 0.0011034882751482808,
      "p_python": 0.731915832281461,
      "p_sql": 0.004935909292506504,
      "p_typescript": 0.004287978275878165
    },
    {
      "text": "# Generate a Fibonacci sequence\n\n# Function to generate Fibonacci sequence\ndef Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\n# Print the sequence upto n terms\nterms = 10\nprint(\"Fibonacci sequence:\")\nfor num in range(1, terms + 1):\n    print(Fibonacci(num))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001091218622010862,
      "p_css": 1.5921902097041356e-05,
      "p_html": 0.00017213632917180665,
      "p_java": 3.1307829134283953e-06,
      "p_javascript": 0.0012765185498536432,
      "p_matlab": 0.006708538605262336,
      "p_python": 0.9915618678576393,
      "p_sql": 0.00011404302310200697,
      "p_typescript": 3.8721087759233404e-05
    },
    {
      "text": "from datetime import date \n  \n# Function to calculate number of days between two dates \ndef getNumberOfDays(date1, date2): \n    return (date2 - date1).days \n  \n# Driver program \ndate1 = date(2020, 8, 18) \ndate2 = date(2020, 9, 1) \nprint(getNumberOfDays(date1, date2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01968207212947898,
      "p_css": 0.0253953817680918,
      "p_html": 0.0038157782039588686,
      "p_java": 0.0017592212762610122,
      "p_javascript": 0.030605534959584728,
      "p_matlab": 4.955749942514054e-05,
      "p_python": 0.9140615829344281,
      "p_sql": 0.0028834432853928455,
      "p_typescript": 0.001747427943378672
    },
    {
      "text": "def new_string(s1, s2):\n    new_str = \"\"\n    for char in s2:\n        if char not in s1:\n            new_str += char\n\n    return new_str\n\nprint(new_string(\"Python\", \"Programming\")) # Output: \"roammig\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03998733316868658,
      "p_css": 0.01111245243082935,
      "p_html": 0.0033319524100401308,
      "p_java": 1.6829961630406995e-05,
      "p_javascript": 0.001546927274688043,
      "p_matlab": 0.0055885484764055604,
      "p_python": 0.930442842189007,
      "p_sql": 0.0027378446758292963,
      "p_typescript": 0.005235269412883689
    },
    {
      "text": "def is_anagram(word1, word2):\n    word1 = word1.replace(' ', '').lower()\n    word2 = word2.replace(' ', '').lower()\n\n    if len(word1) != len(word2):\n        return False\n\n    count = {}\n    for letter in word1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    for letter in word2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003791529305437892,
      "p_css": 0.0034073291854489988,
      "p_html": 0.0016770270165882822,
      "p_java": 3.532911337841983e-05,
      "p_javascript": 0.00021812024302217536,
      "p_matlab": 0.01037761502130077,
      "p_python": 0.9821081800428074,
      "p_sql": 0.0012904120585237344,
      "p_typescript": 0.0005068343883862382
    },
    {
      "text": "def reverse(s):\n    if len(s) == 0: \n        return s \n    else: \n        return reverse(s[1:]) + s[0]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003660679466494841,
      "p_css": 0.0008770368310042077,
      "p_html": 0.00040049033570231906,
      "p_java": 1.55942526902711e-05,
      "p_javascript": 6.882957012782866e-05,
      "p_matlab": 0.00018079715679494127,
      "p_python": 0.9975630630969292,
      "p_sql": 0.00044023140752859986,
      "p_typescript": 8.788940257300015e-05
    },
    {
      "text": "import json\nimport requests\n \ndef search_engine(query):\n \n # Make a request to the search engine API\n r = requests.get('http://search-engine.com/api/search', params={'query': query})\n \n # Parse the response\n response = json.loads(r.text)\n \n # Return the most relevant result\n return response['results'][0]\n \nsearch_engine('python programming')",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.5991828400120305e-06,
      "p_css": 0.7751717018261101,
      "p_html": 0.00013486353026113344,
      "p_java": 6.715629630913363e-05,
      "p_javascript": 0.001707768382041742,
      "p_matlab": 1.532107198804129e-06,
      "p_python": 0.01731880468348353,
      "p_sql": 0.00017644818498230568,
      "p_typescript": 0.2054201258067731
    },
    {
      "text": "def edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    dp = [[ 0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    return dp[m][n]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002197626459962545,
      "p_css": 5.737435918157952e-05,
      "p_html": 4.297461601135149e-05,
      "p_java": 3.0479949818957796e-05,
      "p_javascript": 0.0006483855469633391,
      "p_matlab": 0.11071870674521307,
      "p_python": 0.8704719628798206,
      "p_sql": 0.017546116041043412,
      "p_typescript": 0.0002642372159514284
    },
    {
      "text": "def find_longest_sequence(arr):\n    max_length = 0\n    start_index = 0\n\n    # find first non-matching element\n    while start_index < len(arr) - 1 and arr[start_index] + 1 == arr[start_index + 1]:\n        start_index += 1\n\n    # compare subsequent elements\n    for i in range(start_index + 1, len(arr)):\n        prev = arr[i-1]\n        curr = arr[i]\n\n        # count length of consecutive sequence\n        if prev + 1 == curr:\n            length = i - start_index + 1\n\n            # update max length\n            if  length > max_length:\n                max_length = length\n        else:\n            # current sequence ended, reset\n            start_index = i\n    return max_length",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.000321054802898352,
      "p_css": 0.0008456373504000623,
      "p_html": 0.0002704410229448138,
      "p_java": 9.510297637868833e-05,
      "p_javascript": 0.003634197377791651,
      "p_matlab": 0.49232155415881934,
      "p_python": 0.5011920752076104,
      "p_sql": 0.0006566280359487738,
      "p_typescript": 0.0006633090672077498
    },
    {
      "text": "def fibonacci(n):\n a, b = 0, 1\n for i in range(n):\n  a, b = b, a + b\n return a\n\nfor i in range(51):\n print(fibonacci(i))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.1424916657694844e-07,
      "p_css": 2.2630377473433415e-08,
      "p_html": 2.028706151014955e-06,
      "p_java": 2.4837617183019743e-08,
      "p_javascript": 2.5725278208710208e-08,
      "p_matlab": 0.7857585656039923,
      "p_python": 0.21423795855592706,
      "p_sql": 8.739570175376127e-07,
      "p_typescript": 2.8573447278782384e-07
    },
    {
      "text": "class Node:\n def __init__(self, state, parent_node = None, cost_to_start = 0):\n self.state = state\n self.parent_node = parent_node\n self.cost_to_start = cost_to_start\n self.total_cost = 0\n\ndef set_total_cost(self, total_cost):\n self.total_cost = total_cost\n\ndef get_path_from_root(self):\n path = [self]\n node = self\n while node.parent_node:\n node = node.parent_node\n path.append(node)\n return path[::-1]\n\ndef get_states_from_root(self):\n return list(map(lambda node: node.state, self.get_path_from_root()))\n\ndef __str__(self):\n return str(self.state)\n\ndef __repr__(self):\n return str(self.state)\n\nclass AStar:\n def __init__(self, start_state, expand_edge, heuristic_cost, goal_test):\n self.start_node = Node(start_state)\n self.expand_edge = expand_edge\n self.heuristic_cost = heuristic_cost\n self.goal_test = goal_test\n\ndef search(self):\n open_list = [self.start_node]\n closed_list = []\n\n while open_list:\n node = self.select_node_for_expansion(open_list)\n if self.goal_test(node.state):\n return node.get_path_from_root()\n open_list.remove(node)\n closed_list.append(node)\n child_nodes = self.expand_edge(node)\n \n for child_node in child_nodes:\n self.update_costs(child_node, node, open_list, closed_list)\n\n open_list.sort(key=lambda x: x.total_cost)\n \n raise Exception('Goal not reachable')\n\ndef select_node_for_expansion(self, open_list):\n node = open_list[0]\n for n in open_list:\n if n.total_cost < node.total_cost:\n node = n\n return node\n\ndef update_costs(self, child_node, parent_node, open_list, closed_list):\n cost_from_start_to_child = parent_node.cost_to_start + self.expand_edge(parent_node, child_node)\n total_cost = cost_from_start_to_child + self.heuristic_cost(child_node)\n in_open_list = any(map(lambda x: x.state == child_node.state, open_list))\n in_closed_list = any(map(lambda x: x.state == child_node.state, closed_list))\n\n if not in_open_list and not in_closed_list:\n child_node.cost_to_start = cost_from_start_to_child\n child_node.set_total_cost(total_cost)\n child_node.parent_node = parent_node\n open_list.append(child_node)\n elif in_open_list and total_cost < open_list[0].total_cost:\n node = list(filter(lambda x: x.state == child_node.state, open_list))[0]\n node.cost_to_start = cost_from_start_to_child\n node.set_total_cost(total_cost)\n node.parent_node = parent_node\n elif in_closed_list and total_cost < closed_list[0].total_cost:\n node = list(filter(lambda x: x.state == child_node.state, open_list))[0]\n node.cost_to_start = cost_from_start_to_child \n node.set_total_cost(total_cost)\n node.parent_node = parent_node \n open_list.append(node)\n closed_list.remove(node)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004888018424031118,
      "p_css": 0.046600501651408645,
      "p_html": 0.04218814305624926,
      "p_java": 9.242621821016057e-05,
      "p_javascript": 0.000221338869638255,
      "p_matlab": 0.0005535658429344883,
      "p_python": 0.7313551332972184,
      "p_sql": 0.1641100971287132,
      "p_typescript": 0.014389992093224483
    },
    {
      "text": "def find_longest_increasing_subarray(arr): \n    n = len(arr) \n  \n    # Initialize overall max \n    max_len = 1\n  \n    # Initialize starting point of current subarray \n    start_index = 0\n  \n    # Initialize ending point of current subarray \n    end_index = 0\n  \n    # Initialize current max \n    curr_max = 1\n  \n    # Traverse array elements \n    for i in range(1, n): \n  \n        # If element is greater than previous one \n        if arr[i] > arr[i - 1]: \n            curr_max += 1\n              \n        # Else Reset current max and \n        # starting point of current subarray \n        else: \n            if curr_max > max_len: \n                max_len = curr_max \n                start_index = i - curr_max \n                end_index = i - 1\n            curr_max = 1\n          \n    # Compare the last maximum length with \n    # overall maximum length \n    if curr_max > max_len: \n        max_len = curr_max \n        start_index = n - curr_max \n        end_index = n - 1\n          \n    # Print starting and ending index of longest \n    # increasing contiguous subarray \n    print(\"Longest increasing contiguous \" + \n          \"subarray is [\",  \n          arr[start_index], \"..\", arr[end_index], \n          \"] of length\", max_len)\n          \n# Driver code\narr = [2, 6, 4, 8, 10]\nfind_longest_increasing_subarray(arr)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002010667509056477,
      "p_css": 0.0033699625057360665,
      "p_html": 0.0015956079186347405,
      "p_java": 0.0012622892109938881,
      "p_javascript": 0.005959182285646672,
      "p_matlab": 0.45172665588057803,
      "p_python": 0.5122202385216111,
      "p_sql": 0.0016047473289046484,
      "p_typescript": 0.020250648838838398
    },
    {
      "text": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age =  age\n        self.gender = gender",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00013113133814304038,
      "p_css": 0.015597875181183149,
      "p_html": 0.0128772386525721,
      "p_java": 0.1572328361646075,
      "p_javascript": 1.2016257827480556e-08,
      "p_matlab": 3.984042561278055e-06,
      "p_python": 0.8111791556861325,
      "p_sql": 0.0027812952931465357,
      "p_typescript": 0.00019647162539612745
    },
    {
      "text": "def remove_longest_string(list_strings):\n    longest_string = \"\"\n    for string in list_strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    list_strings.remove(longest_string)\n    return list_strings\n\nprint(remove_longest_string(list_strings))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.530932951706805e-06,
      "p_css": 0.0032141507575313747,
      "p_html": 0.0010050113282476032,
      "p_java": 0.6222360387475481,
      "p_javascript": 5.740802390095875e-07,
      "p_matlab": 0.0002101923723198454,
      "p_python": 0.36940725280403297,
      "p_sql": 0.0034667187693693128,
      "p_typescript": 0.00045353020776003867
    },
    {
      "text": "from collections import Counter\n\ndef word_frequency(paragraph): \n  words = paragraph.split()\n  counts = Counter(words)\n  return counts.most_common()\n\nparagraph = \"This is a sample sentence to try out the program.\"\nprint(word_frequency(paragraph))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011614093594060619,
      "p_css": 0.011374534823162398,
      "p_html": 0.030227483632475266,
      "p_java": 0.004145047905202864,
      "p_javascript": 0.0018633555825638397,
      "p_matlab": 5.892911409173318e-05,
      "p_python": 0.9195970772942489,
      "p_sql": 0.019597758935285675,
      "p_typescript": 0.001521719118908651
    },
    {
      "text": "\"\"\"\nWrite a python code to generate a random password with at least 8 characters that includes at least one lower case letter, one upper case letter and one number\n\"\"\"\n\nimport string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n    all_chars = letters + digits + symbols\n\n    password = \"\".join(random.choice(all_chars) for i in range(8))\n    lower_count = 0\n    upper_count = 0\n    digit_count = 0\n\n    for char in password:\n        if char.islower():\n            lower_count += 1\n        elif char.isupper():\n            upper_count += 1\n        elif char.isdigit():\n            digit_count += 1\n\n    while lower_count == 0 or upper_count == 0 or digit_count == 0:\n        password = \"\".join(random.choice(all_chars) for i in range(8))\n        lower_count = 0\n        upper_count = 0\n        digit_count = 0\n        for char in password:\n            if char.islower():\n                lower_count += 1\n            elif char.isupper():\n                upper_count += 1\n            elif char.isdigit():\n                digit_count += 1\n    return password\n\nif __name__ == '__main__':\n    print(generate_password())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.1882228764911153e-07,
      "p_css": 1.7714599494633493e-07,
      "p_html": 1.0186660113247915e-05,
      "p_java": 1.2199553421041166e-05,
      "p_javascript": 3.724794216771154e-08,
      "p_matlab": 0.002338980559746427,
      "p_python": 0.0029495921677001272,
      "p_sql": 0.994646628851113,
      "p_typescript": 4.1978991681182346e-05
    },
    {
      "text": "#! /usr/bin/env python3\n\"\"\"\n services-wrapper A small tool which wraps around check-services.php and tries to\n                guide the services process with a more modern approach with a\n                Queue and workers.\n\n Based on the original version of poller-wrapper.py by Job Snijders\n\n Author:        Neil Lathwood <neil@librenms.org>\n                Orsiris de Jong <contact@netpower.fr>\n Date:          Oct 2019\n\n Usage:         This program accepts one command line argument: the number of threads\n                that should run simultaneously. If no argument is given it will assume\n                a default of 1 thread.\n\n Ubuntu Linux:  apt-get install python-mysqldb\n FreeBSD:       cd /usr/ports/*/py-MySQLdb && make install clean\n RHEL 7:        yum install MySQL-python\n RHEL 8:        dnf install mariadb-connector-c-devel gcc && python -m pip install mysqlclient\n\n Tested on:     Python 3.6.8 / PHP 7.2.11 / CentOS 8\n\n License:       This program is free software: you can redistribute it and/or modify it\n                under the terms of the GNU General Public License as published by the\n                Free Software Foundation, either version 3 of the License, or (at your\n                option) any later version.\n\n                This program is distributed in the hope that it will be useful, but\n                WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n                Public License for more details.\n\n                You should have received a copy of the GNU General Public License along\n                with this program. If not, see http://www.gnu.org/licenses/.\n\n                LICENSE.txt contains a copy of the full GPLv3 licensing conditions.\n\"\"\"\n\nimport LibreNMS.library as LNMS\n\ntry:\n\n    import json\n    import os\n    import queue\n    import subprocess\n    import sys\n    import threading\n    import time\n    from optparse import OptionParser\n\nexcept ImportError as exc:\n    print('ERROR: missing one or more of the following python modules:')\n    print('threading, queue, sys, subprocess, time, os, json')\n    print('ERROR: %s' % exc)\n    sys.exit(2)\n\n\nAPP_NAME = \"services_wrapper\"\nLOG_FILE = \"logs/\" + APP_NAME + \".log\"\n_DEBUG = False\nservicedisco = False\nreal_duration = 0\nservice_devices = 0\n\n\"\"\"\n Threading helper functions\n\"\"\"\n# (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC0\ndef memc_alive():\n    try:\n        global memc\n        key = str(uuid.uuid4())\n        memc.set('poller.ping.' + key, key, 60)\n        if memc.get('poller.ping.' + key) == key:\n            memc.delete('poller.ping.' + key)\n            return True\n        else:\n            return False\n    except:\n        return False\n\n\ndef memc_touch(key, time):\n    try:\n        global memc\n        val = memc.get(key)\n        memc.set(key, val, time)\n    except:\n        pass\n\n\ndef get_time_tag(step):\n    ts = int(time.time())\n    return ts - ts % step\n#EOC0\n\n\n\"\"\"\n    A seperate queue and a single worker for printing information to the screen prevents\n    the good old joke:\n\n        Some people, when confronted with a problem, think,\n        \"I know, I'll use threads,\" and then they two they hav erpoblesms.\n\"\"\"\n\n\ndef printworker():\n    nodeso = 0\n    while True:\n        # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC4\n        global IsNode\n        global servicedisco\n        if servicedisco:\n            if not IsNode:\n                memc_touch('service.master', 10)\n                nodes = memc.get('service.nodes')\n                if nodes is None and not memc_alive():\n                    print(\"WARNING: Lost Memcached. Taking over all devices. Nodes will quit shortly.\")\n                    servicedisco = False\n                    nodes = nodeso\n                if nodes is not nodeso:\n                    print(\"INFO: %s Node(s) Total\" % (nodes))\n                    nodeso = nodes\n            else:\n                memc_touch('service.nodes', 10)\n            try:\n                worker_id, device_id, elapsed_time = print_queue.get(False)\n            except:\n                pass\n                try:\n                    time.sleep(1)\n                except:\n                    pass\n                continue\n        else:\n            worker_id, device_id, elapsed_time = print_queue.get()\n        # EOC4\n        global real_duration\n        global per_device_duration\n        global service_devices\n        real_duration += elapsed_time\n        per_device_duration[device_id] = elapsed_time\n        service_devices += 1\n        if elapsed_time < 300:\n            print(\"INFO: worker %s finished device %s in %s seconds\" % (worker_id, device_id, elapsed_time))\n        else:\n            print(\"WARNING: worker %s finished device %s in %s seconds\" % (worker_id, device_id, elapsed_time))\n        print_queue.task_done()\n\n\"\"\"\n    This class will fork off single instances of the check-services.php process, record\n    how long it takes, and push the resulting reports to the printer queue\n\"\"\"\n\n\ndef poll_worker():\n    while True:\n        device_id = poll_queue.get()\n        # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC5\n        if not servicedisco or memc.get('service.device.' + str(device_id)) is None:\n            if servicedisco:\n                result = memc.add('service.device.' + str(device_id), config['distributed_poller_name'], 300)\n                if not result:\n                    print(\"This device (%s) appears to be being service checked by another service node\" % (device_id))\n                    poll_queue.task_done()\n                    continue\n                if not memc_alive() and IsNode:\n                    print(\"Lost Memcached, Not service checking Device %s as Node. Master will check it.\" % device_id)\n                    poll_queue.task_done()\n                    continue\n            # EOC5\n            try:\n                start_time = time.time()\n\n                output = \"-d >> %s/services_device_%s.log\" % (log_dir, device_id) if debug else \">> /dev/null\"\n                # TODO replace with command_runner\n                command = \"/usr/bin/env php %s -h %s %s 2>&1\" % (service_path, device_id, output)\n                subprocess.check_call(command, shell=True)\n\n                elapsed_time = int(time.time() - start_time)\n                print_queue.put([threading.current_thread().name, device_id, elapsed_time])\n            except (KeyboardInterrupt, SystemExit):\n                raise\n            except:\n                pass\n        poll_queue.task_done()\n\n\nif __name__ == '__main__':\n    logger = LNMS.logger_get_logger(LOG_FILE, debug=_DEBUG)\n\n    install_dir = os.path.dirname(os.path.realpath(__file__))\n    LNMS.check_for_file(install_dir + '/config.php')\n    config = json.loads(LNMS.get_config_data(install_dir))\n\n    service_path = config['install_dir'] + '/check-services.php'\n    log_dir = config['log_dir']\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC1\n    if 'distributed_poller_group' in config:\n        service_group = str(config['distributed_poller_group'])\n    else:\n        service_group = False\n\n\n    if ('distributed_poller' in config and\n        'distributed_poller_memcached_host' in config and\n        'distributed_poller_memcached_port' in config and\n        config['distributed_poller']):\n        try:\n            import memcache\n            import uuid\n            memc = memcache.Client([config['distributed_poller_memcached_host'] + ':' +\n                                    str(config['distributed_poller_memcached_port'])])\n            if str(memc.get(\"service.master\")) == config['distributed_poller_name']:\n                print(\"This system is already joined as the service master.\")\n                sys.exit(2)\n            if memc_alive():\n                if memc.get(\"service.master\") is None:\n                    print(\"Registered as Master\")\n                    memc.set(\"service.master\", config['distributed_poller_name'], 10)\n                    memc.set(\"service.nodes\", 0, 300)\n                    IsNode = False\n                else:\n                    print(\"Registered as Node joining Master %s\" % memc.get(\"service.master\"))\n                    IsNode = True\n                    memc.incr(\"service.nodes\")\n                servicedisco = True\n            else:\n                print(\"Could not connect to memcached, disabling distributed service checks.\")\n                servicedisco = False\n                IsNode = False\n        except SystemExit:\n            raise\n        except ImportError:\n            print(\"ERROR: missing memcache python module:\")\n            print(\"On deb systems: apt-get install python3-memcache\")\n            print(\"On other systems: pip3 install python-memcached\")\n            print(\"Disabling distributed discovery.\")\n            servicedisco = False\n    else:\n        servicedisco = False\n    # EOC1\n\n    s_time = time.time()\n    real_duration = 0\n    per_device_duration = {}\n    service_devices = 0\n\n    \"\"\"\n        Take the amount of threads we want to run in parallel from the commandline\n        if None are given or the argument was garbage, fall back to default of 16\n    \"\"\"\n    usage = \"usage: %prog [options] <workers> (Default: 1 (Do not set too high)\"\n    description = \"Spawn multiple check-services.php processes in parallel.\"\n    parser = OptionParser(usage=usage, description=description)\n    parser.add_option('-d', '--debug', action='store_true', default=False,\n                      help=\"Enable debug output. WARNING: Leaving this enabled will consume a lot of disk space.\")\n    (options, args) = parser.parse_args()\n\n    debug = options.debug\n    try:\n        amount_of_workers = int(args[0])\n    except (IndexError, ValueError):\n        amount_of_workers = 1\n\n    devices_list = []\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC2\n    if service_group is not False:\n        query = \"SELECT DISTINCT(`services`.`device_id`) FROM `services` LEFT JOIN `devices` ON `services`.`device_id` = `devices`.`device_id` WHERE `devices`.`poller_group` IN(\" + service_group + \") AND `devices`.`disabled` = 0\"\n    else:\n        query = \"SELECT DISTINCT(`services`.`device_id`) FROM `services` LEFT JOIN `devices` ON `services`.`device_id` = `devices`.`device_id` WHERE `devices`.`disabled` = 0\"\n    # EOC2\n\n    db = LNMS.db_open(config['db_socket'], config['db_host'], config['db_port'], config['db_user'], config['db_pass'], config['db_name'])\n    cursor = db.cursor()\n    cursor.execute(query)\n    devices = cursor.fetchall()\n    for row in devices:\n        devices_list.append(int(row[0]))\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC3\n    if servicedisco and not IsNode:\n        query = \"SELECT MAX(`device_id`), MIN(`device_id`) FROM `services`\"\n        cursor.execute(query)\n        devices = cursor.fetchall()\n        maxlocks = devices[0][0] or 0\n        minlocks = devices[0][1] or 0\n    # EOC3\n    db.close()\n\n    poll_queue = queue.Queue()\n    print_queue = queue.Queue()\n\n    print(\"INFO: starting the service check at %s with %s threads\" % (time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n                                                                      amount_of_workers))\n\n    for device_id in devices_list:\n        poll_queue.put(device_id)\n\n    for i in range(amount_of_workers):\n        t = threading.Thread(target=poll_worker)\n        t.setDaemon(True)\n        t.start()\n\n    p = threading.Thread(target=printworker)\n    p.setDaemon(True)\n    p.start()\n\n    try:\n        poll_queue.join()\n        print_queue.join()\n    except (KeyboardInterrupt, SystemExit):\n        raise\n\n    total_time = int(time.time() - s_time)\n\n    print(\"INFO: services-wrapper checked %s devices in %s seconds with %s workers\" % (service_devices, total_time, amount_of_workers))\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC6\n    if servicedisco or memc_alive():\n        master = memc.get(\"service.master\")\n        if master == config['distributed_poller_name'] and not IsNode:\n            print(\"Wait for all service-nodes to finish\")\n            nodes = memc.get(\"service.nodes\")\n            while nodes is not None and nodes > 0:\n                try:\n                    time.sleep(1)\n                    nodes = memc.get(\"service.nodes\")\n                except:\n                    pass\n            print(\"Clearing Locks\")\n            x = minlocks\n            while x <= maxlocks:\n                memc.delete('service.device.' + str(x))\n                x = x + 1\n            print(\"%s Locks Cleared\" % x)\n            print(\"Clearing Nodes\")\n            memc.delete(\"service.master\")\n            memc.delete(\"service.nodes\")\n        else:\n            memc.decr(\"service.nodes\")\n        print(\"Finished %s.\" % time.time())\n    # EOC6\n\n    show_stopper = False\n\n    if total_time > 300:\n        print(\"WARNING: the process took more than 5 minutes to finish, you need faster hardware or more threads\")\n        print(\"INFO: in sequential style service checks the elapsed time would have been: %s seconds\" % real_duration)\n        for device in per_device_duration:\n            if per_device_duration[device] > 300:\n                print(\"WARNING: device %s is taking too long: %s seconds\" % (device, per_device_duration[device]))\n                show_stopper = True\n        if show_stopper:\n            print(\"ERROR: Some devices are taking more than 300 seconds, the script cannot recommend you what to do.\")\n        else:\n            recommend = int(total_time / 300.0 * amount_of_workers + 1)\n            print(\n                \"WARNING: Consider setting a minimum of %d threads. (This does not constitute professional advice!)\" % recommend)\n\n        sys.exit(2)\n",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.4215611003605952,
      "p_css": 0.021316479488827898,
      "p_html": 0.0026237980257382875,
      "p_java": 2.016345130970896e-06,
      "p_javascript": 0.0001360475520972145,
      "p_matlab": 2.1757356387024627e-06,
      "p_python": 0.0008133474717642236,
      "p_sql": 0.026913264822425894,
      "p_typescript": 0.5266317701977815
    },
    {
      "text": "class MyClass:\n\n    def __init__(self):\n        self.name = None",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006317871313575393,
      "p_css": 0.004341516558857667,
      "p_html": 0.027661004903519856,
      "p_java": 0.017051407728191446,
      "p_javascript": 1.135879163436573e-06,
      "p_matlab": 5.388734989754887e-06,
      "p_python": 0.9285572115985703,
      "p_sql": 0.021259113572104305,
      "p_typescript": 0.0004914338932459388
    },
    {
      "text": "def print_sum(a, b):\n    print(a + b)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0023515384333333837,
      "p_css": 0.013940280807173328,
      "p_html": 0.006153839310028727,
      "p_java": 0.0003074183046865665,
      "p_javascript": 0.0012881298337424412,
      "p_matlab": 0.0008542369787324888,
      "p_python": 0.969805187414222,
      "p_sql": 0.002158288340253575,
      "p_typescript": 0.0031410805778273065
    },
    {
      "text": "def sum_of_min_max(lst):\n    \"\"\"\n    Function to take a list of integers and returns the summation of the largest and smallest numbers\n    Arguments:\n    lst -- list -- list of integers\n    Output:\n    summation -- int -- summation of the largest and smallest numbers\n    \"\"\"\n    min_val = min(lst)\n    max_val = max(lst)\n    summation = min_val + max_val\n    return summation",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0004412142485910814,
      "p_css": 0.0006034093332437802,
      "p_html": 0.002352513775094159,
      "p_java": 0.010446382917006126,
      "p_javascript": 0.8164997745185694,
      "p_matlab": 5.770275447951553e-07,
      "p_python": 0.11703186011629055,
      "p_sql": 0.0005182368896617627,
      "p_typescript": 0.052106031173998556
    },
    {
      "text": "import random\n\ndef generate_sequence():\n    sequence = \"\"\n    for _ in range(20):\n        char = chr(random.randint(97, 122))\n        sequence += char\n    return sequence\n\noutput = generate_sequence()\nprint(output)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011793772865283999,
      "p_css": 0.0002208005760113806,
      "p_html": 0.0004105536873430481,
      "p_java": 2.3498615231247794e-06,
      "p_javascript": 2.2454692136697194e-05,
      "p_matlab": 0.00015803857638559878,
      "p_python": 0.996977361929392,
      "p_sql": 0.0010249108546802705,
      "p_typescript": 4.152535999308079e-06
    },
    {
      "text": "def fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_numbers = [0, 1]\n        for i in range(2, n):\n            fib_numbers.append(fib_numbers[i-2] + fib_numbers[i-1])\n        return fib_numbers",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.500944897591499e-06,
      "p_css": 1.1690256973090805e-05,
      "p_html": 4.3011740737420016e-05,
      "p_java": 1.436531582859891e-06,
      "p_javascript": 2.090146889005376e-06,
      "p_matlab": 0.09306726337500092,
      "p_python": 0.9068217292402876,
      "p_sql": 4.056118715189615e-05,
      "p_typescript": 3.716576479813722e-06
    },
    {
      "text": "def remove_duplicates(list):\n  new_list = []\n  for item in list:\n    if item not in new_list:\n      new_list.append(item)\n  return new_list",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0006111373028402367,
      "p_css": 0.006318253599649576,
      "p_html": 0.020322625600485086,
      "p_java": 5.376358576914718e-05,
      "p_javascript": 0.007861583043945651,
      "p_matlab": 0.8631778268465734,
      "p_python": 0.10023220086339747,
      "p_sql": 0.0010489140201995026,
      "p_typescript": 0.00037369513713992036
    },
    {
      "text": "class Foo:\n    def __init__(self, private_var, public_var):\n        # Private members\n        self.__private_var = private_var\n        # Public members\n        self.public_var = public_var\n        \n    # Private method\n    def __private_method(self):\n        return self.__private_var\n    \n    # Public method\n    def public_method(self):\n        return self.public_var",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.9326885810046413e-13,
      "p_css": 1.5229545632509575e-12,
      "p_html": 3.298549025086995e-11,
      "p_java": 0.9999999997400237,
      "p_javascript": 4.2721029954191145e-23,
      "p_matlab": 5.383134776772219e-19,
      "p_python": 1.3228968221356816e-10,
      "p_sql": 9.294550942695171e-11,
      "p_typescript": 3.955148383677357e-14
    },
    {
      "text": "import numpy as np\nimport tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(10, input_dim=5, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=50, batch_size=32, verbose=2)\n\n# Evaluate the model\nscores = model.evaluate(X_test, y_test, verbose=2)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.3357073230292128,
      "p_css": 0.00628342978356858,
      "p_html": 0.02634217087001165,
      "p_java": 0.0006658102504179434,
      "p_javascript": 2.101928083960411e-05,
      "p_matlab": 5.135470461845099e-06,
      "p_python": 0.5929531891670993,
      "p_sql": 2.0262547687556375e-07,
      "p_typescript": 0.03802171952291145
    },
    {
      "text": "for i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"* \",end=\"\")\n    print(\"\\r\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.085710486787063e-10,
      "p_css": 3.4472827714954125e-11,
      "p_html": 1.1914268772471904e-08,
      "p_java": 1.9935629881057275e-11,
      "p_javascript": 1.2584729498205393e-11,
      "p_matlab": 0.7300602322514775,
      "p_python": 0.2699397370667598,
      "p_sql": 1.7424357356820615e-08,
      "p_typescript": 7.67572288627541e-10
    },
    {
      "text": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Task(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n description = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n task = Task(description=request.json['description'])\n db.session.add(task)\n db.session.commit()\n return jsonify(task.id)\n\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n tasks = Task.query.all()\n return jsonify([task.description for task in tasks])\n\n@app.route('/tasks/int:id', methods=['PUT'])\ndef update_task(id):\n task = Task.query.get(id)\n task.description = request.json['description']\n db.session.commit()\n return jsonify({'message': 'Task updated'})\n\n@app.route('/tasks/int:id', methods=['DELETE'])\ndef delete_task(id):\n Task.query.filter_by(id=id).delete()\n db.session.commit()\n return jsonify({'message': 'Task deleted'})\n\nif __name__ == '__main__':\n app.run(debug=True)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 0.0004069237283436883,
      "p_css": 0.0031061803081059917,
      "p_html": 0.9941149633637855,
      "p_java": 0.0004157811181021378,
      "p_javascript": 5.567570666140019e-05,
      "p_matlab": 1.6013545774395283e-06,
      "p_python": 0.0004255786405097675,
      "p_sql": 0.0012851276605296779,
      "p_typescript": 0.00018816811938430288
    },
    {
      "text": "import string\nimport random\n\ndef generate_password(length):\n # Create all strings\n lowercase_letters = string.ascii_lowercase\n uppercase_letters = string.ascii_uppercase\n numbers = string.digits\n # Empty string to store password\n password = ''\n # Generate random singles strings and add to password\n for i in range(length):\n random_lowercase = random.choice(lowercase_letters)\n random_uppercase = random.choice(uppercase_letters)\n random_number = random.choice(numbers)\n password += random_lowercase + random_uppercase + random_number\n # Shuffle the password\n password_list = list(password)\n random.shuffle(password_list)\n password = ''.join(password_list)\n return password\n\npassword_length = 8\npassword = generate_password(password_length)\nprint(password)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 7.801032540889332e-10,
      "p_css": 9.504162265881196e-07,
      "p_html": 3.747919902912365e-07,
      "p_java": 0.0007617915603574194,
      "p_javascript": 1.636770068365851e-09,
      "p_matlab": 1.5917076960731182e-09,
      "p_python": 0.0002747624007389762,
      "p_sql": 0.9989609977023218,
      "p_typescript": 1.119119783853971e-06
    },
    {
      "text": "#Function for splitting a given string by every nth character\ndef splitStringByN(string, n): \n    res = [string[i:i+n] for i in range(0, len(string), n)] \n    return res\n\n# Driver code\nstring = \"Hello World!\"\nn = 3\nsplitString = splitStringByN(string, n)\nprint(splitString)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.8625419134768766e-12,
      "p_css": 1.0503206739056964e-06,
      "p_html": 2.6328354016046466e-07,
      "p_java": 0.9973525964203976,
      "p_javascript": 2.213366330433846e-12,
      "p_matlab": 1.3374434789864185e-09,
      "p_python": 0.002478810934340586,
      "p_sql": 0.00016724575187145534,
      "p_typescript": 3.1947657037504735e-08
    },
    {
      "text": "count = 0\nfor row in arr:\n    for col in row:\n        if col > 5:\n            count += 1\nprint(count)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.882061268629232e-05,
      "p_css": 0.0028407789881311637,
      "p_html": 0.00016806825456073672,
      "p_java": 9.979376722962198e-06,
      "p_javascript": 9.656280527400862e-05,
      "p_matlab": 0.8448056502923589,
      "p_python": 0.15165446210696978,
      "p_sql": 0.00014149678984422845,
      "p_typescript": 0.00019418077345192505
    },
    {
      "text": "def isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n\nnum_list = [12, 23, 7, 8, 10, 15]\n\nprime_numbers = []\nfor n in num_list:\n    if isPrime(n):\n        prime_numbers.append(n)\n\nprint(prime_numbers) #[23, 7]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.9360344739192143e-08,
      "p_css": 9.952134188125176e-11,
      "p_html": 1.3315728938195097e-07,
      "p_java": 9.298023803980586e-10,
      "p_javascript": 2.633701040850513e-09,
      "p_matlab": 0.9998809525013262,
      "p_python": 0.00011887978088945344,
      "p_sql": 5.021314747010679e-09,
      "p_typescript": 6.51581060183924e-09
    },
    {
      "text": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\n\n# Read data\ndata = pd.read_csv('news.csv', encoding='utf-8')\n\n# Vectorize data\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['headline'])\n\n# Train the model\nmodel = LinearSVC()\nmodel.fit(X, data['tags'])\n\n# Test the model\npredicted = model.predict(X)\nprint(accuracy_score(data['tags'], predicted))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.05949815259592249,
      "p_css": 0.12104905495227242,
      "p_html": 0.002876562985311964,
      "p_java": 3.917236201059676e-05,
      "p_javascript": 4.4400946412605865e-05,
      "p_matlab": 1.0749871908546485e-05,
      "p_python": 0.8132418450076374,
      "p_sql": 1.3838022794644192e-06,
      "p_typescript": 0.003238677476244519
    },
    {
      "text": "# Function to find the sum of digits\ndef sum_digits(num):\n # Variable to store the sum of digits\n sum = 0\n \n while num > 0:\n  digit = num % 10\n  sum = sum + digit\n  num = num // 10\n \n return sum\n \nnum = 1234\nsum = sum_digits(num)\nprint(\"Sum of digits of %d is %d\" % (num, sum))\n# Output: Sum of digits of 1234 is 10",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00013417323947971602,
      "p_css": 1.956051548891519e-06,
      "p_html": 0.00215046176476109,
      "p_java": 0.15418645573607406,
      "p_javascript": 0.20656113554396396,
      "p_matlab": 0.6321713513820828,
      "p_python": 0.0017161595063580656,
      "p_sql": 0.0005134010870263013,
      "p_typescript": 0.002564905688705242
    },
    {
      "text": "import numpy as np \nfrom scipy.optimize import curve_fit\n\n# Define the x-coordinate values \nxData = np.arange(-5, 5, 0.1) \n\n# Define the y-coordinate values\nyData = 3*xData**2 + 2*xData + 3 \n\n# Define the polynomial function \ndef func(x, a, b, c): \n    return a*x**2 + b*x + c \n\n# Fit the polynomial \nparams, params_covariance = curve_fit(func, xData, yData) \n\n# Extract parameters from the params array \na = params[0] \nb = params[1] \nc = params[2]\n\nprint('Fitted polynomial: {0:.2f}x^2 + {1:.2f}x + {2:.2f}'.format(a, b, c))\n\nOutput: Fitted polynomial: 3.00x^2 + 2.00x + 3.00",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.005122855491282601,
      "p_css": 0.9167853168992586,
      "p_html": 0.0021593291839697507,
      "p_java": 0.0062393706666143516,
      "p_javascript": 0.011217077624061095,
      "p_matlab": 0.00022594871109419515,
      "p_python": 0.04116849557303659,
      "p_sql": 0.0004035070606072298,
      "p_typescript": 0.016678098790075282
    },
    {
      "text": "def quick_sort(arr):\n if len(arr) == 0:\n return arr\n \n pivot = arr[len(arr) // 2]\n left_arr, right_arr = [], []\n \n for i in range(len(arr)):\n if arr[i] < pivot:\n left_arr.append(arr[i])\n elif arr[i] > pivot:\n right_arr.append(arr[i])\n \n return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.592139059474154e-06,
      "p_css": 1.2281157301921077e-05,
      "p_html": 3.276223177117619e-06,
      "p_java": 9.368868664042308e-07,
      "p_javascript": 5.381640601596029e-07,
      "p_matlab": 0.9904882700653169,
      "p_python": 0.00948713984404784,
      "p_sql": 4.2623832040000213e-07,
      "p_typescript": 3.5392818497023795e-06
    },
    {
      "text": "def power_of_integer(x, n):\n    if n == 0:\n        return 1\n    \n    if n % 2 == 0:\n        return power_of_integer(x*x, n//2)\n    else:\n        return x * power_of_integer(x*x, (n-1)//2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.597065936728295e-05,
      "p_css": 4.960474453871232e-05,
      "p_html": 3.498172367255708e-05,
      "p_java": 6.1023588060407805e-06,
      "p_javascript": 7.4287902476166415e-06,
      "p_matlab": 0.0005743311898694385,
      "p_python": 0.9992516475743248,
      "p_sql": 3.624806692720296e-05,
      "p_typescript": 3.6848922463092967e-06
    },
    {
      "text": "import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n print(\"Serving at port\", PORT)\n httpd.serve_forever()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.0058754923040180975,
      "p_css": 0.008579727244493627,
      "p_html": 0.5331597911043543,
      "p_java": 0.0004031581934359526,
      "p_javascript": 0.0009349743130631519,
      "p_matlab": 4.449942500299855e-05,
      "p_python": 0.4195600298748273,
      "p_sql": 0.0011386884058406412,
      "p_typescript": 0.030303639134963888
    },
    {
      "text": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Load training data\ntrain_data = pd.read_csv(\"train.csv\")\nX_train = train_data[\"Name\"].values\ny_train = train_data[\"Gender\"].values\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Fit the vectorizer\nvectorizer.fit(X_train)\n\n# Transform the vectorizer\nX_train_vectorized = vectorizer.transform(X_train)\n\n# Create a model\nmodel = LogisticRegression()\n\n# Fit the model\nmodel.fit(X_train_vectorized, y_train)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.4142282849311052,
      "p_css": 0.046224459830500955,
      "p_html": 0.005506378853300974,
      "p_java": 0.00018654635623589907,
      "p_javascript": 0.00010235251950304727,
      "p_matlab": 8.821556596574008e-05,
      "p_python": 0.5005364295792101,
      "p_sql": 6.57836067150281e-06,
      "p_typescript": 0.033120754003506545
    },
    {
      "text": "# Using for loop \nfor num in range(0, 51): \n if num % 2 != 0: \n print(num, end = \" \") \n\n# Output: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1541183867951738e-07,
      "p_css": 2.561227863202698e-10,
      "p_html": 1.0768997114598181e-07,
      "p_java": 2.7652082534568023e-09,
      "p_javascript": 6.672640615399807e-09,
      "p_matlab": 0.9999974828662429,
      "p_python": 2.2414063410059244e-06,
      "p_sql": 5.227744642288571e-09,
      "p_typescript": 3.7703890147008136e-08
    },
    {
      "text": "objects = [\n    {'name': 'a', 'value': None},\n    {'name': 'b', 'value': None},\n    {'name': 'c', 'value': None}\n]",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 0.0019936597919016567,
      "p_css": 0.03594554846068164,
      "p_html": 0.0011436284488638895,
      "p_java": 0.3105603138523196,
      "p_javascript": 7.905797223221007e-06,
      "p_matlab": 0.6481142382614117,
      "p_python": 2.3327055102916162e-05,
      "p_sql": 0.0005438133148015406,
      "p_typescript": 0.0016675650176938585
    },
    {
      "text": "def check_for_int(lst, int):\n    if int in lst:\n        return True\n    else:\n        return False\n    \nlst = [2, 4, 6]\nint = 4\n\nis_found = check_for_int(lst, int)\nprint(is_found)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 7.201054172867216e-08,
      "p_css": 3.415465413252682e-09,
      "p_html": 9.360737990209278e-09,
      "p_java": 0.9999821308668445,
      "p_javascript": 6.987055041259172e-10,
      "p_matlab": 2.7486939678023557e-18,
      "p_python": 1.7783091643672606e-05,
      "p_sql": 6.850569915047516e-11,
      "p_typescript": 4.875556054459568e-10
    },
    {
      "text": "\"\"\"Module containing python functions, which generate first order Redfield kernel.\n   For docstrings see documentation of module neumann1.\"\"\"\n\nimport numpy as np\nimport itertools\n\nfrom ...wrappers.mytypes import doublenp\nfrom ...wrappers.mytypes import complexnp\n\nfrom ..aprclass import Approach\nfrom .neumann1 import Approach1vN\n\n\n# ---------------------------------------------------------------------------------------------------\n# Redfield approach\n# ---------------------------------------------------------------------------------------------------\nclass ApproachRedfield(Approach):\n\n    kerntype = 'pyRedfield'\n\n    def prepare_arrays(self):\n        Approach1vN.prepare_arrays(self)\n\n    def clean_arrays(self):\n        Approach1vN.clean_arrays(self)\n\n    def generate_fct(self):\n        Approach1vN.generate_fct(self)\n\n    def generate_coupling_terms(self, b, bp, bcharge):\n        Tba, phi1fct = self.leads.Tba, self.phi1fct\n        si, kh = self.si, self.kernel_handler\n        nleads, statesdm = si.nleads, si.statesdm\n\n        acharge = bcharge-1\n        ccharge = bcharge+1\n\n        # --------------------------------------------------\n        for a, ap in itertools.product(statesdm[acharge], statesdm[acharge]):\n            if kh.is_included(a, ap, acharge):\n                bpap = si.get_ind_dm1(bp, ap, acharge)\n                ba = si.get_ind_dm1(b, a, acharge)\n                fct_aap = 0\n                for l in range(nleads):\n                    fct_aap += (+ Tba[l, b, a]*Tba[l, ap, bp]*phi1fct[l, bpap, 0].conjugate()\n                                - Tba[l, b, a]*Tba[l, ap, bp]*phi1fct[l, ba, 0])\n                kh.set_matrix_element(fct_aap, b, bp, bcharge, a, ap, acharge)\n        # --------------------------------------------------\n        for bpp in statesdm[bcharge]:\n            if kh.is_included(bpp, bp, bcharge):\n                fct_bppbp = 0\n                for a in statesdm[acharge]:\n                    bppa = si.get_ind_dm1(bpp, a, acharge)\n                    for l in range(nleads):\n                        fct_bppbp += +Tba[l, b, a]*Tba[l, a, bpp]*phi1fct[l, bppa, 1].conjugate()\n                for c in statesdm[ccharge]:\n                    cbpp = si.get_ind_dm1(c, bpp, bcharge)\n                    for l in range(nleads):\n                        fct_bppbp += +Tba[l, b, c]*Tba[l, c, bpp]*phi1fct[l, cbpp, 0]\n                kh.set_matrix_element(fct_bppbp, b, bp, bcharge, bpp, bp, bcharge)\n            # --------------------------------------------------\n            if kh.is_included(b, bpp, bcharge):\n                fct_bbpp = 0\n                for a in statesdm[acharge]:\n                    bppa = si.get_ind_dm1(bpp, a, acharge)\n                    for l in range(nleads):\n                        fct_bbpp += -Tba[l, bpp, a]*Tba[l, a, bp]*phi1fct[l, bppa, 1]\n                for c in statesdm[ccharge]:\n                    cbpp = si.get_ind_dm1(c, bpp, bcharge)\n                    for l in range(nleads):\n                        fct_bbpp += -Tba[l, bpp, c]*Tba[l, c, bp]*phi1fct[l, cbpp, 0].conjugate()\n                kh.set_matrix_element(fct_bbpp, b, bp, bcharge, b, bpp, bcharge)\n        # --------------------------------------------------\n        for c, cp in itertools.product(statesdm[ccharge], statesdm[ccharge]):\n            if kh.is_included(c, cp, ccharge):\n                cpbp = si.get_ind_dm1(cp, bp, bcharge)\n                cb = si.get_ind_dm1(c, b, bcharge)\n                fct_ccp = 0\n                for l in range(nleads):\n                    fct_ccp += (+ Tba[l, b, c]*Tba[l, cp, bp]*phi1fct[l, cpbp, 1]\n                                - Tba[l, b, c]*Tba[l, cp, bp]*phi1fct[l, cb, 1].conjugate())\n                kh.set_matrix_element(fct_ccp, b, bp, bcharge, c, cp, ccharge)\n        # --------------------------------------------------\n\n    def generate_current(self):\n        E, Tba = self.qd.Ea, self.leads.Tba\n        phi1fct, phi1fct_energy = self.phi1fct, self.phi1fct_energy\n\n        si = self.si\n        ncharge, nleads, statesdm = si.ncharge, si.nleads, si.statesdm\n\n        phi1 = self.phi1\n        current = self.current\n        energy_current = self.energy_current\n\n        kh = self.kernel_handler\n        for charge in range(ncharge-1):\n            ccharge = charge+1\n            bcharge = charge\n            for c, b in itertools.product(statesdm[ccharge], statesdm[bcharge]):\n                cb = si.get_ind_dm1(c, b, bcharge)\n\n                for l in range(nleads):\n                    current_l, energy_current_l = 0, 0\n\n                    for bp in statesdm[bcharge]:\n                        if not kh.is_included(bp, b, bcharge):\n                            continue\n                        phi0bpb = kh.get_phi0_element(bp, b, bcharge)\n\n                        cbp = si.get_ind_dm1(c, bp, bcharge)\n                        fct1 = phi1fct[l, cbp, 0]\n                        fct1h = phi1fct_energy[l, cbp, 0]\n\n                        phi1[l, cb] += Tba[l, c, bp]*phi0bpb*fct1\n                        current_l += Tba[l, b, c]*Tba[l, c, bp]*phi0bpb*fct1\n                        energy_current_l += Tba[l, b, c]*Tba[l, c, bp]*phi0bpb*fct1h\n\n                    for cp in statesdm[ccharge]:\n                        if not kh.is_included(c, cp, ccharge):\n                            continue\n                        phi0ccp = kh.get_phi0_element(c, cp, ccharge)\n\n                        cpb = si.get_ind_dm1(cp, b, bcharge)\n                        fct2 = phi1fct[l, cpb, 1]\n                        fct2h = phi1fct_energy[l, cpb, 1]\n\n                        phi1[l, cb] += Tba[l, cp, b]*phi0ccp*fct2\n                        current_l += Tba[l, b, c]*phi0ccp*Tba[l, cp, b]*fct2\n                        energy_current_l += Tba[l, b, c]*phi0ccp*Tba[l, cp, b]*fct2h\n\n                    current[l] += -2*current_l.imag\n                    energy_current[l] += -2*energy_current_l.imag\n\n        self.heat_current[:] = energy_current - current*self.leads.mulst\n# ---------------------------------------------------------------------------------------------------\n",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.001407087812934418,
      "p_css": 0.0025369612836889897,
      "p_html": 0.01873885906610152,
      "p_java": 1.5057429466925586e-05,
      "p_javascript": 0.00013630229769440335,
      "p_matlab": 0.7205552154865288,
      "p_python": 0.2384176023621347,
      "p_sql": 0.016891217324375908,
      "p_typescript": 0.0013016969370744425
    },
    {
      "text": "def mergeSortedArrays(arr1, arr2):\n    l1 = len(arr1)\n    l2 = len(arr2)\n    l = l1 + l2\n    arr = [0] * l\n\n    i = 0\n    j = 0\n    k = 0\n\n    while (i < l1 and j < l2):\n        if (arr1[i] < arr2[j]):\n            arr[k] = arr1[i]\n            k = k + 1\n            i = i + 1\n        else:\n            arr[k] = arr2[j]\n            k = k + 1\n            j = j + 1\n\n    while (i < l1):\n        arr[k] = arr1[i]\n        k = k + 1\n        i = i + 1\n\n    while (j < l2):\n        arr[k] = arr2[j]\n        k = k + 1\n        j = j + 1\n\n    return arr\n\narr1 = [3, 5, 7] \narr2 = [1, 2, 4] \n\nprint(mergeSortedArrays(arr1, arr2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012606804074462058,
      "p_css": 0.007216099215572147,
      "p_html": 0.0021652985534227525,
      "p_java": 0.0007960944078436217,
      "p_javascript": 0.0010231118260555431,
      "p_matlab": 0.05676841285493429,
      "p_python": 0.923384669382042,
      "p_sql": 0.000550242278033924,
      "p_typescript": 0.006835391074649378
    },
    {
      "text": "def find_max_element(arr):\n  \n  max = arr[0]\n  \n  for i in range(1, len(arr)):\n    # compare current max with the next array element\n    if arr[i] > max:\n      max = arr[i]\n  \n  return max\n\narr = [2, 7, 1, 6, 5]\nmax_element = find_max_element(arr)\nprint(\"Max element in the array:\", max_element)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.311506838879529e-06,
      "p_css": 6.4119592126553355e-06,
      "p_html": 4.3870471072116324e-06,
      "p_java": 4.7503122970627407e-07,
      "p_javascript": 2.7529903593617936e-06,
      "p_matlab": 0.9540322618503208,
      "p_python": 0.04592977797744233,
      "p_sql": 2.2169580834075195e-07,
      "p_typescript": 1.4399941680779258e-05
    },
    {
      "text": "a, b = 0, 1\n \n# print the first 100 Fibonacci numbers\nfor i in range(100):\n    print(a, end=' ')\n    a, b = b, a + b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.285451414057783e-05,
      "p_css": 3.272088539160589e-05,
      "p_html": 0.0004250393738750145,
      "p_java": 2.923050088684034e-05,
      "p_javascript": 0.000190900594890913,
      "p_matlab": 0.0005184894349052615,
      "p_python": 0.9984290135369251,
      "p_sql": 0.00014823196731380214,
      "p_typescript": 0.0001435191916710097
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef crawl(url):\n page = requests.get(url)\n soup = BeautifulSoup(page.text, \"html.parser\")\n with open(\"document.txt\", \"w\") as f:\n f.write(soup.prettify())\n\ncrawl(\"https://www.example.com\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.194310524507589e-16,
      "p_css": 0.0005392933960709099,
      "p_html": 0.002175269355593859,
      "p_java": 0.9972729974796877,
      "p_javascript": 2.1262245995391066e-08,
      "p_matlab": 1.08320612950206e-09,
      "p_python": 1.0179560607669507e-05,
      "p_sql": 4.2687852487055385e-07,
      "p_typescript": 1.8109840624466798e-06
    },
    {
      "text": "class TreeNode:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass TreeEncoder:\n    def encode(self, root):\n        if root is None: \n            return \"None\"\n        else: \n            left_tree = self.encode(root.left)\n            right_tree = self.encode(root.right)\n            return str(root.value) + \"(\" + left_tree + \", \" + right_tree + \")\"",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 2.0147086053381836e-07,
      "p_css": 0.016032608424273207,
      "p_html": 0.0179516912821084,
      "p_java": 0.009531888659181791,
      "p_javascript": 5.081263953130701e-05,
      "p_matlab": 0.0031340459689301664,
      "p_python": 0.0010824513476743118,
      "p_sql": 0.9521292640647776,
      "p_typescript": 8.703614266259555e-05
    },
    {
      "text": "#Function to check if a number is prime\ndef checkPrime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n\n#Function to find prime numbers in given range\ndef getPrimeNumbersInRange(low,high):\n    if low < high:\n        for i in range(low,high + 1):\n            if checkPrime(i):\n                print(i,\" is a prime number\")\n\n#Call the function\nlow = 30\nhigh = 50\ngetPrimeNumbersInRange(low, high)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.032040381477066e-07,
      "p_css": 4.539780248389701e-08,
      "p_html": 5.236469771667152e-06,
      "p_java": 2.5035330208707777e-07,
      "p_javascript": 0.0010294872587079428,
      "p_matlab": 0.982911744278939,
      "p_python": 0.016040026405014264,
      "p_sql": 1.1353109605510175e-05,
      "p_typescript": 1.1535228189666673e-06
    },
    {
      "text": "def select_approved_rows():\n   sql = \"SELECT * FROM table WHERE status = 'approved'\"\n   cur.execute(sql)\n   return cur.fetchall()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0017128703627078926,
      "p_css": 0.0028965759251305574,
      "p_html": 0.002000794977966712,
      "p_java": 0.00013477191116166142,
      "p_javascript": 0.0011374862074789074,
      "p_matlab": 0.00017785420104256117,
      "p_python": 0.012847284554848086,
      "p_sql": 0.9781249985847646,
      "p_typescript": 0.0009673632748988032
    },
    {
      "text": "import os\nimport sys\nimport argparse\nimport paddle.fluid as fluid\n\n\ndef Transpile(src_dir, dst_dir, model_filename, params_filename):\n    place = fluid.CPUPlace()\n    exe = fluid.Executor(place)\n\n    inference_scope = fluid.core.Scope()\n    with fluid.scope_guard(inference_scope):\n        print \"Loading inference_program from \", src_dir\n        [inference_program, feed_target_names,\n         fetch_targets] = fluid.io.load_inference_model(src_dir, exe, model_filename, params_filename)\n\n        inference_transpiler_program = inference_program.clone()\n        # NOTE: Applying the inference transpiler will change the inference_transpiler_program.\n        t = fluid.InferenceTranspiler()\n        # Under the with statement, inference_scope is the global scope.\n        t.transpile(inference_transpiler_program, place)\n\n        #print inference_transpiler_program\n\n        print \"Saving the optimized inference_program to \", dst_dir\n        # There is a bug in fluid.io.save_inference_model, so we can use the following code instead.\n        if not os.path.isdir(dst_dir):\n            os.makedirs(dst_dir)\n        model_path = os.path.join(dst_dir, model_filename)\n        with open(model_path, \"wb\") as f:\n            f.write(inference_transpiler_program.desc.serialize_to_string())\n        fluid.io.save_persistables(exe, dst_dir, inference_transpiler_program, params_filename)\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--src_dir', help='Source directory of inference model')\n    parser.add_argument('--dst_dir', help='Dstination directory of inference model')\n    parser.add_argument('--model_filename', default=None, help='The name of model file')\n    parser.add_argument('--params_filename', default=None, help='The name of params file')\n    args = parser.parse_args()\n    Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename)\n\n\nif __name__ == '__main__':\n    main()\n",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.4623262028273727,
      "p_css": 0.09108424456644593,
      "p_html": 0.009147539052287183,
      "p_java": 0.00014300862847787813,
      "p_javascript": 0.003993562421440202,
      "p_matlab": 2.560284250833583e-06,
      "p_python": 0.003862256352373959,
      "p_sql": 0.08399985258269546,
      "p_typescript": 0.3454407732846559
    },
    {
      "text": "import random\n\ndef get_available_positions(Board):\n    available_positions = []\n    for i in range(3):\n        for j in range(3):\n            if Board[i][j] == ' ':\n                available_positions.append((i, j))\n    return available_positions\n\ndef is_game_over(Board, depth):\n    if depth == 0:\n        return True\n\n    for i in range(3):\n        if (Board[i][0] == Board[i][1] == Board[i][2] and Board[i][0] != ' '):\n            return True\n        elif (Board[0][i] == Board[1][i] == Board[2][i] and Board[0][i] != ' '):\n            return True\n    if (Board[0][0] == Board[1][1] == Board[2][2] and Board[0][0] != ' ') or (Board[2][0] == Board[1][1] == Board[0][2] and Board[2][0] != ' '):\n        return True\n\n    available_positions = get_available_positions(Board)\n    if len(available_positions) == 0:\n        return True\n\n    return False\n\ndef get_next_move(Board, player, depth):\n    best_position = None\n    best_score = float('-inf')\n    if player == 'X':\n        player2 = 'O'\n    else:\n        player2 = 'X'\n\n    available_positions = get_available_positions(Board)\n\n    for position in available_positions:\n        Board[position[0]][position[1]] = player\n        score = minimax(Board, player2, depth-1)\n        Board[position[0]][position[1]] = ' '\n        if score > best_score:\n            best_score = score\n            best_position = position\n    return best_position\n\ndef minimax(Board, player, depth):\n    if is_game_over(Board, depth):\n        if player == 'X':\n            return -1\n        elif player == 'O':\n            return 1\n        else:\n            return 0\n\n    best_score = float('-inf')\n    if player == 'X':\n        player2 = 'O'\n    else:\n        player2 = 'X'\n    available_positions = get_available_positions(Board)\n    for position in available_positions:\n        Board[position[0]][position[1]] = player\n        score = minimax(Board, player2, depth-1)\n        Board[position[0]][position[1]] = ' '\n        best_score = max(score, best_score)\n    return best_score\n\nboard = [[' ', ' ', ' '],\n [' ', ' ', ' '],\n [' ', ' ', ' ']]\nplayer = 'X'\ndepth = 5\n\nnext_move = get_next_move(board, player, depth)\nprint(next_move)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0026520373278510474,
      "p_css": 0.007958257326230067,
      "p_html": 0.0056296987271373675,
      "p_java": 0.00023898483827910848,
      "p_javascript": 0.0013399494734086111,
      "p_matlab": 0.033728661668325846,
      "p_python": 0.9104039163007938,
      "p_sql": 0.03447334467685365,
      "p_typescript": 0.0035751496611204814
    },
    {
      "text": "def main():\n print(\"Hello World\")\n \nif __name__ == \"__main__\":\n main()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9983838318297841,
      "p_css": 2.460160708333138e-06,
      "p_html": 2.9039777054931493e-06,
      "p_java": 1.8976853598935865e-17,
      "p_javascript": 3.2254970852775715e-05,
      "p_matlab": 2.4496226049242307e-09,
      "p_python": 0.0015772391169291123,
      "p_sql": 1.1799048604117313e-06,
      "p_typescript": 1.2758953715019266e-07
    },
    {
      "text": "import string\nimport random\n\ndef generate_random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string = generate_random_string(10)\nprint(random_string)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.1303939997385984e-08,
      "p_css": 5.136205414871233e-07,
      "p_html": 8.290158664487783e-07,
      "p_java": 2.4736986764543497e-05,
      "p_javascript": 4.116554097401026e-09,
      "p_matlab": 2.4627524663118467e-07,
      "p_python": 0.0007418390750477861,
      "p_sql": 0.9992317282021231,
      "p_typescript": 9.140391607776855e-08
    },
    {
      "text": "def hex_to_binary(hex_str):\n    # convert hex to int \n    num = int(hex_str, 16)\n    # convert int to binary string\n    bin_str = bin(num)[2:]\n    \n    return bin_str\n\nprint(hex_to_binary(\"0xA2\"))\n# Output: \"10100010\"",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.2443469316347125e-06,
      "p_css": 3.2869235315692488e-09,
      "p_html": 6.419683700760145e-08,
      "p_java": 0.9999929537902128,
      "p_javascript": 1.5537835612722533e-09,
      "p_matlab": 5.873245864339109e-13,
      "p_python": 5.693149371493004e-06,
      "p_sql": 2.253687263994709e-08,
      "p_typescript": 1.713848003193234e-08
    },
    {
      "text": "def print_square(size): \n\n    # loop to print size number of lines \n    for _ in range(size): \n\n        # print stars on each line \n        print(\"*\" * size) \n\nif __name__ == '__main__':\n    size = 8\n    print_square(size)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005119692272330369,
      "p_css": 0.002222792275721703,
      "p_html": 0.014182585370549335,
      "p_java": 6.501137156429758e-05,
      "p_javascript": 0.0007010207348552954,
      "p_matlab": 0.020043973681800383,
      "p_python": 0.9476557377346504,
      "p_sql": 0.011235305653173261,
      "p_typescript": 0.0033816039504524584
    },
    {
      "text": "#\n# A module capable of changing alphabet letter cases.\n#\n# It uses very generic Python functionality to ensure\n# backward compatibility.\n#\n#\n# The programme processes a set of characters by default\n# If no character is entered for processing, the programme\n# simply exists. This can be turned off by setting 'a' to 1\n# (for all vowels) or 2 (for all consonants).\n# \n#\n#\n\nimport os;\nimport sys;\nimport re;\nimport string;\nfrom re import sub;\n\n\n#\n#! Get parsed arguments\n#\ndef get_parsed_args():\n        \n    # Pre-allocate\n    parser = \"\";\n    args = \"\";\n    if sys.version_info < (2,7):\n        from optparse import OptionParser\n        parser = OptionParser();\n        parser.add_option(\"-i\", \"--input_path\", type=str, help=\"Input file path with extension\");\n        parser.add_option(\"-o\", \"--output_path\", type=str, help=\"Output file path with extension\");\n        parser.add_option(\"-a\", \"--all_chars\", type=int, help=\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\", default=0);\n        parser.add_option(\"-c\", \"--c\", type=str, help=\"Characters to process (comma-separated list, no whitespace)\", default=\"\");\n\n    else:\n        from argparse import ArgumentParser\n        parser = ArgumentParser();\n        parser.add_argument(\"-i\", \"--input_path\", type=str, help=\"Input file path with extension\");\n        parser.add_argument(\"-o\", \"--output_path\", type=str, help=\"Output file path with extension\");\n        parser.add_argument(\"-a\", \"--all_chars\", type=int, help=\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\", default=0);\n        parser.add_argument(\"-c\", \"--c\", type=str, help=\"Characters to process (comma-separated list, no whitespace)\", default=\"\");\n    \n    args = parser.parse_args();\n    args = vars(args);\n\n    ##print(option)\n    ##print(args)\n    ##print(type(option))\n    ##print(option.c)\n    ##print(option.all_chars)\n    ##print(option.input_path)\n    ##print(option.output_path)\n\n    # Safety assertions\n    assert (args['all_chars'] >= 0 and args['all_chars'] <= 2), \\\n           \"Invalid value! programme exiting!\\n type python switchLetterCase.py -h for information on arguments\"\n\n    # If nothing to process, programme will exit\n    if (args['all_chars'] == 0) and \\\n       ((args['c'] == \"\") or \\\n        (args['c'] == \" \") or \\\n        args['all_chars'] is None or \\\n        all([x is ',' for x in args['c']])):\n        \n        print(\".....Nothing to process, programme exiting.\\n\\n\");\n        sys.exit(0);\n\n    return args;\n\n\n#\n#! Main processor function\n#\n\ndef process_files(args):\n\n    \n    try:\n        # Get handlers\n        f1 = open(args['input_path'], 'r')\n        f2 = open(args['output_path'], 'w');\n\n        # Initial setup\n        line_to_write = \"\"       \n        if (args['all_chars'] == 0):    # process characters in the list\n\n            gg = \"\".join(args['c'])\n\n            for line in f1:\n                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);\n\n        elif (args['all_chars'] == 1):    # process vowels only\n\n            vowels = sub('[^aeiou]+','',string.ascii_lowercase)\n\n            for line in f1:\n                g = [y.upper() if y in vowels else y.lower() if y.upper() in vowels else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);       \n\n        elif (args['all_chars'] == 0):    # process consonants in the list\n\n            consonants = sub('[aeiou]+','',string.ascii_lowercase)\n\n            for line in f1:\n                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];\n                line_to_write = \"\".join(g);\n                f2.write(line_to_write);\n\n        # Print some INFO    \n        print(\"All characters toggled! Terminating programme......\\n\\n\");\n\n        f1.close();\n        f2.close();\n          \n    except (Exception, BaseException, IOError, ValueError, WindowsError) as e:        \n        print(e);\n\n    finally:\n        del f1, f2\n\n",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.13753010731123966,
      "p_css": 0.049760518797712525,
      "p_html": 0.11305875967355916,
      "p_java": 0.0030072550403137817,
      "p_javascript": 0.005126206237293512,
      "p_matlab": 0.00018063036391618184,
      "p_python": 0.00551138113361071,
      "p_sql": 0.6743160134691881,
      "p_typescript": 0.011509127973166403
    },
    {
      "text": "def get_strings_with_prefix(strings, letter):\n    result = []\n\n    for string in strings:\n        if string.startswith(letter):\n            result.append(string)\n    return result\n\ndata = [\"apple\", \"banana\", \"kiwi\", \"melon\"]\n\nresult = get_strings_with_prefix(data, \"a\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.48740932457326e-09,
      "p_css": 0.04475633921700128,
      "p_html": 5.8607261696874196e-05,
      "p_java": 0.12985938444743997,
      "p_javascript": 1.866810586322224e-09,
      "p_matlab": 3.3222435432529696e-06,
      "p_python": 0.8198149400385595,
      "p_sql": 0.005479612681722854,
      "p_typescript": 2.7784755816135346e-05
    },
    {
      "text": "my_list = [1, 2, 3, 4, 5] \nnew_list = [x**2 for x in my_list if x % 2 == 0]",
      "y_true": "matlab",
      "pred_label": "matlab",
      "p_bash": 0.0002977466677345736,
      "p_css": 0.0005021917087849384,
      "p_html": 0.0007239441744845439,
      "p_java": 4.315902969070516e-05,
      "p_javascript": 8.649449389482073e-05,
      "p_matlab": 0.9054096558065826,
      "p_python": 0.09217696725136704,
      "p_sql": 0.0002712262216365907,
      "p_typescript": 0.0004886146458239908
    },
    {
      "text": "import random \n \nnum = random.randint(1,10)\nguess = 0\nattempts = 0\n \nwhile guess != num and attempts < 3:\n    guess = int(input(\"Guess a number between 1 and 10: \"))\n    attempts += 1\n    if guess == num:\n        print(\"You guessed correctly in\", attempts, \"attempts\")\n    elif guess > num:\n        print(\"Too High\")\n    else:\n        print(\"Too Low\")\nif guess != num:    \n    print(\"You failed to guess the number\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006166767531847223,
      "p_css": 0.00023575836192483716,
      "p_html": 0.00185416802125351,
      "p_java": 0.00030495946339129375,
      "p_javascript": 0.00013422905503426922,
      "p_matlab": 0.03351333952168604,
      "p_python": 0.9575309425400047,
      "p_sql": 0.0011052408188235348,
      "p_typescript": 0.004704685464696881
    },
    {
      "text": "import sys\n\narg1 = sys.argv[1]\narg2 = sys.argv[2]\n\nif arg1 == arg2:\n print('equal')\nelse:\n print('not equal')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.013868928970115676,
      "p_css": 0.1647771989709936,
      "p_html": 0.019580505732210974,
      "p_java": 0.00046374388925981603,
      "p_javascript": 0.003005131369167404,
      "p_matlab": 0.01586130384590351,
      "p_python": 0.7548650133187892,
      "p_sql": 0.02071031727819993,
      "p_typescript": 0.006867856625359737
    },
    {
      "text": "def max_min(list):  \n    max_element = 0\n    min_element = list[0] \n     \n    for num in list:\n        if num > max_element: \n            max_element = num \n        if num < min_element:\n            min_element = num \n     \n    print(\"Max element is: \" + str(max_element)) \n    print(\"Min element is: \" + str(min_element)) \n     \n#test list \nlist = [23, 12, 56, 72, 9, 10]\nmax_min(list)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1092207487708655e-09,
      "p_css": 8.838645728575116e-12,
      "p_html": 5.254408313519779e-09,
      "p_java": 3.366313454186824e-10,
      "p_javascript": 7.874973569655287e-09,
      "p_matlab": 0.9999999478545833,
      "p_python": 3.372140663021917e-08,
      "p_sql": 2.0778678544304436e-09,
      "p_typescript": 1.7620692446459156e-09
    },
    {
      "text": "class Fibonacci:\n    def __init__(self, n):\n        self.n = n\n        self.fib = []\n    \n    def generate_list(self):\n        if self.n <= 0:\n            print('Invalid input.')\n        elif self.n == 1:\n            self.fib = [0]\n        else:\n            self.fib = [0,1]\n            for i in range(2,self.n):\n                self.fib.append(self.fib[i-2] + self.fib[i-1])\n        return self.fib",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002245531979017757,
      "p_css": 0.006609630685328797,
      "p_html": 0.19430924048631332,
      "p_java": 3.212104663068515e-06,
      "p_javascript": 2.2372818994497703e-05,
      "p_matlab": 0.00012605462304643902,
      "p_python": 0.6069738911253196,
      "p_sql": 0.1916049584517536,
      "p_typescript": 0.00012608650667911706
    },
    {
      "text": "dict = {\n    \"car\" : \"Ford\", \n    \"bike\" : \"Honda\"\n}",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 0.0010053756783183793,
      "p_css": 0.022959725476107664,
      "p_html": 0.0046037545643256095,
      "p_java": 0.898680968570332,
      "p_javascript": 2.7724742169676604e-06,
      "p_matlab": 0.00234891324474707,
      "p_python": 0.06626596071418939,
      "p_sql": 0.0005321381885074329,
      "p_typescript": 0.0036003910892554894
    },
    {
      "text": "list_nums = [1, 2, 3, 4, 5]\n\naverage = lambda list_nums: sum(list_nums) / len(list_nums)\n\nprint(average(list_nums))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008744764161935628,
      "p_css": 0.03688592796641441,
      "p_html": 0.024361323447283374,
      "p_java": 0.004783150771710863,
      "p_javascript": 0.0055428756711070545,
      "p_matlab": 0.006547449348030058,
      "p_python": 0.8953678444403051,
      "p_sql": 0.004095659440894329,
      "p_typescript": 0.013671004752319105
    },
    {
      "text": "def factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\nnum = 7\nprint('factorial of {} is {}'.format(num, factorial(num)))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.570763001365499e-07,
      "p_css": 1.5294407697396137e-07,
      "p_html": 1.2759512740929051e-06,
      "p_java": 4.901431422314718e-08,
      "p_javascript": 1.3233553468405975e-06,
      "p_matlab": 0.01411776772341783,
      "p_python": 0.9858713786204165,
      "p_sql": 6.453508315059848e-06,
      "p_typescript": 9.418065382195771e-07
    },
    {
      "text": "def get_min_max(numbers):\n max_num = max(numbers)\n min_num = min(numbers)\n new_list = []\n for i in numbers:\n  if i == max_num or i == min_num:\n   new_list.append(i)\n return new_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005775668950447055,
      "p_css": 0.0006961779205981295,
      "p_html": 0.0077060300397396465,
      "p_java": 0.05081351213521288,
      "p_javascript": 0.0018869352932213324,
      "p_matlab": 6.139602716674409e-06,
      "p_python": 0.9373449543763342,
      "p_sql": 8.942815105015146e-05,
      "p_typescript": 0.0008792555860821936
    },
    {
      "text": "total = 0\nfor number in range(1, 21, 2):\n    total += number    \nprint(f\"Sum of the first 10 odd numbers is {total}\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.17458608503548e-06,
      "p_css": 2.3095964585891763e-05,
      "p_html": 0.0005674316063098892,
      "p_java": 0.1151807564583013,
      "p_javascript": 7.315473231514087e-07,
      "p_matlab": 6.591914339776365e-05,
      "p_python": 0.8837410836455929,
      "p_sql": 1.9959900391854536e-05,
      "p_typescript": 0.0003928471480124307
    },
    {
      "text": "import random\n\ndef generate_random_number(number):\n    random.seed(number)\n    rand_number = random.randint(1, number**2)\n    return rand_number",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0352521691967764e-05,
      "p_css": 4.212669443005702e-05,
      "p_html": 1.2528323515596227e-05,
      "p_java": 2.414997911433683e-07,
      "p_javascript": 2.1816519277238434e-06,
      "p_matlab": 1.0953926524519116e-07,
      "p_python": 0.9985308812933443,
      "p_sql": 0.001398590568106769,
      "p_typescript": 2.9879079272243615e-06
    },
    {
      "text": "def sort_list(numbers):\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.452961978546761e-06,
      "p_css": 2.397598176487909e-06,
      "p_html": 4.822859696985603e-05,
      "p_java": 0.3096062871708791,
      "p_javascript": 5.364247550386507e-05,
      "p_matlab": 3.996642791248822e-09,
      "p_python": 0.6902619780063036,
      "p_sql": 1.6768638779461668e-05,
      "p_typescript": 6.240554766347005e-06
    },
    {
      "text": "def length_longest_word(s):\n    longest_word = \"\"\n    longest_len = 0\n  \n    words = s.split()\n    for word in words:\n        if len(word) > longest_len:\n            longest_len = len(word)\n            longest_word = word\n  \n    return len(longest_word)\n  \nresult = length_longest_word(string)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00012020667024826579,
      "p_css": 0.0005756151918087165,
      "p_html": 0.0003487684953935925,
      "p_java": 3.0050744212017785e-05,
      "p_javascript": 8.092496179849601e-07,
      "p_matlab": 9.146515888545762e-06,
      "p_python": 0.9965466419688337,
      "p_sql": 0.0023591281425851453,
      "p_typescript": 9.633021411912322e-06
    },
    {
      "text": "#!/usr/bin/env python3\n#\n#   Copyright (c) 2014 Shubham Chaudhary <me@shubhamchaudhary.in>\n#\n#   This program is free software: you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License as published by\n#   the Free Software Foundation, either version 3 of the License, or\n#   (at your option) any later version.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nimport os\nimport os.path\nimport platform\nimport random\nimport re\nimport sys\nimport time\n\nif sys.version_info >= (3,):\n    import urllib.request as urllib2\n    import urllib.parse as urlparse\n    import urllib.error as urlerror\nelse:\n    import urllib2\n    import urlparse\n\n\ndef atoi(text):\n    return int(text) if text.isdigit() else text\n\ndef natural_keys(text):\n    '''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''\n    return [atoi(c) for c in re.split('(\\d+)', text)]\n\ndef notify_user(message=None):\n    ''' Notify the user about a particular event with given message\n    '''\n    if not message:\n        message = 'Notification!!!'\n    #print('-'*len(message))\n    print('-'*int((len(message)-6)/2), 'NOTIFICATION', '-'*int((len(message)-6)/2))\n    print(message)\n\ndef get_page_data():\n    ''' Get page data as string from server\n    '''\n    print('Sending request to servers of Colors . . .')\n    full_url = 'http://colors.in.com/in/biggboss'\n    full_url = 'http://colors.in.com/in/biggboss/videos/episodes'\n    # Send request\n    try:\n        #res.geturl(), .url=str, .status=200, .info=200, .msg=OK,\n        response = urllib2.urlopen(full_url)\n    except urlerror.HTTPError as exep:\n        print('The server couldn\\'t fulfill the request.',\n              'Error code: ', exep.code)\n    except urlerror.URLError as exep:\n        print('We failed to reach a server.')\n        print('Reason: ', exep.reason)\n    else:\n        # everything is fine\n        #if verbose:\n        print('Data received, Decoding . . .')\n        web_page = str(response.read()) # More pythonic than .decode('utf-8')\n        return web_page\n\ndef get_link(web_page):\n    ''' Get Latest episode link\n    '''\n    month = time.strftime('%B')\n    new_link_pattern = r'http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episode\\d\\d-' + month.lower() + r'-\\d+\\w\\w-2014.*?.html'\n    #print('Checking: ', new_link_pattern)\n    link_reg = re.findall(new_link_pattern, web_page)\n    if link_reg:\n        #print(link_reg.group())\n        success_set = sorted(set(link_reg), key=natural_keys)\n        return success_set[-1]\n\ndef get_episode_list(web_page, new_episode_pattern=None):\n    ''' Get latest episode list from webpage\n    '''\n    if not new_episode_pattern:\n        ### PATTERN used by colors\n        #<li><a title=\"Bigg Boss 8, Full Episode-8, 29th September, 2014\"\n        #href=\"http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episode8-29th-october-2014-69087-2.html#nav\">\n        #http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episode23-november-14th-2014-10101036-2.html#nav\n        #Bigg Boss 8, Full Episode-8, 29th September, 2014</a></li>\n        #Bigg Boss 8, Full Episode-10, October 1st, 2014</a></li>\n        new_episode_pattern = time.strftime(r'%B-\\d+\\w\\w').lower()\n        month = time.strftime('%B')\n        new_episode_pattern = r'Bigg Boss \\d+, Full Episode-\\d+, ' + month + r' \\d+\\w\\w, 2014';\n        #new_episode_pattern = r'Bigg Boss \\d+, Full Episode-\\d+'\n\n    print('Checking for new episode with pattern:', new_episode_pattern)\n    success = re.findall(new_episode_pattern, web_page)\n    success_set = sorted(set(success), key=natural_keys)\n    return success_set\n\n\ndef check_biggboss_episode(new_episode_pattern=None, verbose=False):\n    ''' Check for the latest bigg boss episode\n    '''\n    web_page = get_page_data()\n    if verbose:\n        print('Page Received:\\n', web_page)\n    success_set = get_episode_list(web_page, new_episode_pattern)\n    # Parse for success or failure\n    print('Found:')\n    for item in success_set:\n        print('\\t', item)\n    current_date = int(time.strftime('%d'))\n    current_hour = int(time.strftime('%H'))\n    current_month = time.strftime('%B')\n\n    if (current_month.lower() in success_set[-1].lower() and (\n                (str(current_date) in success_set[-1] and\n                    (current_hour >= 20)) or\n                (str(current_date-1) in success_set[-1] and\n                    (current_hour >= 0 and current_hour < 20))\n                )\n            ):\n        msg = 'Found new episode online'\n        notify_user(msg)\n        latest_link = get_link(web_page)\n        if latest_link:\n            print('Here\\'s the link: ', latest_link)\n    else:\n        print('No new episode right now')\n\ndef main():\n    ''' Main function - Parse command line arguments\n    '''\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog='BiggBoss-checker')\n    parser.add_argument(\"-p\", \"--pattern\", type=str, dest=\"pattern\",\n                        help=\"Search for this pattern instead of default\")\n    parser.add_argument(\"-v\", \"--verbose\", dest=\"verbosity\",\n            action='store_true', default=False, help='Show verbose output')\n    args = parser.parse_args()\n\n    # Check input\n    try:\n        check_biggboss_episode(args.pattern, verbose=args.verbosity)\n    except:\n        raise\n    return 0\n\nif __name__ == '__main__':\n    try:\n        main()\n        if os.name == 'nt' or platform.system() == 'Windows':\n            input('Press Enter or Close the window to exit !')\n    except KeyboardInterrupt:\n        print('\\nClosing garacefully :)', sys.exc_info()[1])\n    except urlerror.HTTPError:\n        print('HTTP Error:', sys.exc_info()[1])\n    except SystemExit:\n        pass\n    except:\n        print('Unexpected Error:', sys.exc_info()[0])\n        print('Details:', sys.exc_info()[1])\n        raise\n",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00014813538420090273,
      "p_css": 0.007003252606001938,
      "p_html": 0.9782495248837476,
      "p_java": 0.0008402183303158818,
      "p_javascript": 1.9062963768924814e-06,
      "p_matlab": 5.713469419948106e-09,
      "p_python": 0.0007463154052452679,
      "p_sql": 0.000687237162526898,
      "p_typescript": 0.012323404218115251
    },
    {
      "text": "words = [\"carpet\", \"chair\", \"table\", \"floor\"]\n\ncategories = {}\nfor word in words:\n    if word in [\"carpet\"]:\n        categories[\"furnishing\"] = categories.get(\"furnishing\", []) + [word]\n    elif word in [\"chair\", \"table\"]:\n        categories[\"furniture\"] = categories.get(\"furniture\", []) + [word]\n    elif word in [\"floor\"]:\n        categories[\"flooring\"] = categories.get(\"flooring\", []) + [word]\n    else:\n        categories[\"other\"] = categories.get(\"other\", []) + [word]\n\nprint(categories)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03315337706619925,
      "p_css": 0.08385160865954758,
      "p_html": 0.00038926914302165184,
      "p_java": 8.144375803716273e-05,
      "p_javascript": 0.0046806802523855625,
      "p_matlab": 0.013466074628530347,
      "p_python": 0.7929030386178054,
      "p_sql": 0.01130138348421738,
      "p_typescript": 0.06017312439025569
    },
    {
      "text": "import tensorflow as tf\nfrom tensorflow.keras.layers import Input, Dense, Embedding, GRU, Dropout\n\ndef build_model(vocab_size, embedding_dim):\n    model = tf.keras.Sequential()\n    # Embedding layer\n    model.add(Embedding(vocab_size, embedding_dim, input_length=500))\n    # GRU layer\n    model.add(GRU(128, dropout=0.25))\n    # Dropout layer\n    model.add(Dropout(0.5))\n    # Output layer\n    model.add(Dense(vocab_size, activation='softmax'))\n    return model",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0847721762809541,
      "p_css": 0.00529931385375145,
      "p_html": 0.06988329310016224,
      "p_java": 0.026399501541169615,
      "p_javascript": 0.0004513958883401367,
      "p_matlab": 6.641921657054772e-06,
      "p_python": 0.8119450925505338,
      "p_sql": 4.144715070315921e-05,
      "p_typescript": 0.001201137712728352
    },
    {
      "text": "def delete_divisible_by_5(my_list):\n  new_list = []\n  for i in my_list:\n    if i % 5 != 0:\n      new_list.append(i)\n  return new_list\n\n# Test\nmy_list = [1, 10, 15, 20, 25]\n\nnew_list = delete_divisible_by_5(my_list)\n\nprint(\"List after deletion: \" + str(new_list))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00044657698872716195,
      "p_css": 0.003767047390907935,
      "p_html": 0.0024587675310367373,
      "p_java": 9.481455036917037e-05,
      "p_javascript": 0.00035305639934061594,
      "p_matlab": 0.024071047012854237,
      "p_python": 0.9671925919540677,
      "p_sql": 0.001091554578469694,
      "p_typescript": 0.0005245435942267627
    },
    {
      "text": "def substrings(input_string): \n    # Get the length of the string \n    length = len(input_string) \n    # List of all substrings  \n    substrings = []\n    # Iterate over the length of the input string\n    for i in range(length): \n        # Iterate over the length of the input string \n        # minus the start index\n        for j in range(i, length): \n            # Get substring\n            sub = input_string[i:j + 1] \n            # Add substring to the list\n            substrings.append(sub) \n\n    return substrings\n\nif __name__ == '__main__':\n    output = substrings(\"abcde\")\n    print(output)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.866693282909341e-05,
      "p_css": 0.0006449973086859197,
      "p_html": 0.0020270858034437647,
      "p_java": 0.038930930651988556,
      "p_javascript": 0.006428792503037697,
      "p_matlab": 9.685666817995495e-05,
      "p_python": 0.802493548740589,
      "p_sql": 0.1428197794802313,
      "p_typescript": 0.006459341911014832
    },
    {
      "text": "def find_max_min(lst):\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    \n    elif len(lst) == 2:\n        return max(lst), min(lst)\n    \n    mid = len(lst)//2\n    left_max, left_min = find_max_min(lst[:mid])\n    right_max, right_min = find_max_min(lst[mid:])\n\n    return max(left_max, right_max), min(left_min, right_min)\n\nmax_num, min_num = find_max_min([5, 3, 8, 2, 10, 1])\n\nprint(\"The maximum number is\", max_num)\nprint(\"The minimum number is\", min_num)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.3464996032859689e-05,
      "p_css": 0.00010037989664947892,
      "p_html": 6.643151324475773e-05,
      "p_java": 1.6478145523169862e-06,
      "p_javascript": 1.800107055240482e-05,
      "p_matlab": 2.6303616542757727e-07,
      "p_python": 0.9997459517182119,
      "p_sql": 2.323855450330211e-05,
      "p_typescript": 3.062140008753956e-05
    },
    {
      "text": "def confidence_voting(predictions):\n classifier_sum = 0\n total_confidence = 0\n for classifier, prediction in predictions.items(): \n     classifier_sum += prediction \n     total_confidence += (classifier_sum * prediction)\n return total_confidence/classifier_sum",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011165080945779083,
      "p_css": 0.03491600133895277,
      "p_html": 0.004957396536350223,
      "p_java": 0.0003752256855476255,
      "p_javascript": 0.005389531895715225,
      "p_matlab": 0.008506929339114401,
      "p_python": 0.9336364083705612,
      "p_sql": 0.00024283031208672404,
      "p_typescript": 0.0008105955758928128
    },
    {
      "text": "# Frequency of each character in the string\n\nstring = \"Code Generation Task\"\n\nfor i in string:\n    print(\"Number of Occurrence of\", i, \"is\", string.count(i))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.681570058731535e-13,
      "p_css": 1.5489837456815666e-07,
      "p_html": 1.75264814589417e-07,
      "p_java": 0.999900054394552,
      "p_javascript": 1.4454921103532473e-11,
      "p_matlab": 3.785711523379329e-09,
      "p_python": 7.032492938326306e-05,
      "p_sql": 2.7843090799393707e-05,
      "p_typescript": 1.4436214416165646e-06
    },
    {
      "text": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [7, -3, 10, 13, -6]\ntarget = -3\nprint(\"Index of\", target, \" is \", linear_search(arr, target)) # 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.3099880777948323e-05,
      "p_css": 4.006945329812665e-05,
      "p_html": 3.989831009065274e-05,
      "p_java": 7.704120940146396e-06,
      "p_javascript": 2.2941181605860493e-05,
      "p_matlab": 0.21939008099090337,
      "p_python": 0.780454476670735,
      "p_sql": 5.5344190598929325e-06,
      "p_typescript": 2.6194972589017024e-05
    },
    {
      "text": "import random \n  \ndef shuffle_list(arr): \n      \n    # Shuffle given list \n    random.shuffle(arr) \n    return arr \n  \n# Driver function \narr = [1,2,3,4,5]\n\nprint(\"Initial list: \\n\",arr)\nprint(\"\\nFinal list: \\n\",shuffle_list(arr))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.624863763065703e-05,
      "p_css": 0.0007151165102980115,
      "p_html": 0.00013132495919428438,
      "p_java": 4.118464606432339e-05,
      "p_javascript": 0.002240257930946848,
      "p_matlab": 0.028348078202159708,
      "p_python": 0.9670874786068442,
      "p_sql": 0.0012838338805697105,
      "p_typescript": 7.647662629226537e-05
    },
    {
      "text": "\"\"\"\nGenerate a visual ASCII art in Python\n\"\"\"\n\ndef generate_ascii(drawing): \n    height = len(drawing) + 2\n    width = len(drawing[0]) + 2\n\n    def get_ascii_cell(cell):\n        # Define the character in the ASCII art\n        if cell == '*':\n            return '*'\n        if cell == ' ':\n            return ' '\n        if cell == '.':\n            return '.'\n\n    # Render the picture as ASCII\n    result = ''\n    for row in range(height):\n        for col in range(width):\n            if row == 0 or row == height - 1 or col == 0 or col == width - 1:\n                result += '*'\n            else:\n                result += get_ascii_cell(drawing[row-1][col-1])\n        result += '\\n'\n    return result\n\nif __name__ == '__main__':\n    drawing = [['*', ' ', '*'],\n               [' ', '*', ' '],\n               ['*', ' ', '*']]\n    print(generate_ascii(drawing))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005339155014389537,
      "p_css": 0.0023730545362711125,
      "p_html": 0.0005296201523733489,
      "p_java": 6.825659020297182e-06,
      "p_javascript": 0.0006612537475081188,
      "p_matlab": 0.007213944352395571,
      "p_python": 0.9728618952697035,
      "p_sql": 0.00035133060795355497,
      "p_typescript": 0.010662920660385058
    },
    {
      "text": "# define the algorithm \ndef find_min_num(nums):\n # declare a variable to hold the minimum number\n min_num = float('inf')\n\n # iterate over the numbers \n for num in nums: \n # if the number is smaller than the current minimum \n if num < min_num: \n # replace it \n min_num = num\n \n # once out of the loop, return the minimum number \n return min_num\n\n# call the algorithm \nmin_num = find_min_num([12, 24, 9]) \nprint(min_num) # output: 9",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.003190463986372912,
      "p_css": 0.0006144838318847244,
      "p_html": 0.0047615942750245345,
      "p_java": 0.0031706388316919847,
      "p_javascript": 0.38208117451964263,
      "p_matlab": 0.024061046810160778,
      "p_python": 0.06055896431515925,
      "p_sql": 0.00816185514596612,
      "p_typescript": 0.513399778284097
    },
    {
      "text": "\"\"\"\nWrite a Python program to parse a given string and extract the domain name\n\"\"\"\n\nimport re\n\ndef extract_domain_name(string):\n    domain_name = ''\n    matches = re.findall(r\"://([^/]+)/?\", string)\n    if len(matches) > 0:\n        domain_name = matches[0]\n    return domain_name\n\nstring = 'https://www.google.com/search?q=google+search'\ndomain_name = extract_domain_name(string)\n\nprint(\"The domain name extracted is:\", domain_name)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.044680103852065e-13,
      "p_css": 4.197097520754269e-09,
      "p_html": 1.3658687400830099e-08,
      "p_java": 0.9999997029026865,
      "p_javascript": 5.6178670016003665e-14,
      "p_matlab": 1.961574544105018e-11,
      "p_python": 2.5665082549008414e-07,
      "p_sql": 1.6205870910390814e-08,
      "p_typescript": 6.365055665948521e-09
    },
    {
      "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(units=200, input_dim=2, activation='relu'))\nmodel.add(Dense(units=200, activation='relu'))\nmodel.add(Dense(units=1, activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X, y, epochs=1500, batch_size=128)\n\n# evaluate the model\nscores = model.evaluate(X, y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.727786680615067,
      "p_css": 0.0010044206244626793,
      "p_html": 0.03059607935443461,
      "p_java": 0.0007783837288708821,
      "p_javascript": 6.4734293691688576e-06,
      "p_matlab": 9.003207288090631e-07,
      "p_python": 0.23564252915016964,
      "p_sql": 2.8724832421340737e-08,
      "p_typescript": 0.004184504052064829
    },
    {
      "text": "import requests\n\nurl = 'https://www.nytimes.com/2020/11/19/us/denver-police-protest.html'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n title = response.text.split(\"<title>\")[1].split(\"</title>\")[0]\n print(title)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 4.800644047591107e-14,
      "p_css": 0.017220662006725222,
      "p_html": 0.9558110516984638,
      "p_java": 0.026940329393461627,
      "p_javascript": 2.5218440586417236e-07,
      "p_matlab": 1.8257554476564046e-07,
      "p_python": 2.5535709436255624e-05,
      "p_sql": 1.7889604637830305e-06,
      "p_typescript": 1.974714505288244e-07
    },
    {
      "text": "import requests\n\napi_url = 'http://example.com/api'\n\n# Make a get request\nresponse = requests.get(api_url)\n\n# Check status code\nif response.status_code == 200:\n # Get the response data as JSON\n data = response.json()\n\n # Do something with the data\n print(data)\n\n# Make a post request\ndata = {\n 'name': 'John Doe'\n}\n\nresponse = requests.post(api_url, data=data)\n\n# Check status code\nif response.status_code == 201:\n # Get the reponse data as JSON\n data = response.json()\n\n # Do something with the data\n print(data)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 8.996339827230084e-07,
      "p_css": 0.9984349178139295,
      "p_html": 6.06967783404048e-05,
      "p_java": 1.3625784209283932e-06,
      "p_javascript": 2.40213757149229e-06,
      "p_matlab": 2.709717306023308e-07,
      "p_python": 0.0001521267863439694,
      "p_sql": 2.0746277202504194e-05,
      "p_typescript": 0.0013265770224777076
    },
    {
      "text": "def lcs(X , Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n  \n# Driver program to test the above function \nX = \"abcdaf\"\nY = \"zbcdf\"\n\nprint(\"The length of LCS is \", lcs(X, Y))",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0038921822844845888,
      "p_css": 0.00012371692719165603,
      "p_html": 0.0006202942829569622,
      "p_java": 4.885701357246132e-05,
      "p_javascript": 0.665894430597156,
      "p_matlab": 0.002479761976979022,
      "p_python": 0.2459722227162425,
      "p_sql": 0.030759349849139316,
      "p_typescript": 0.0502091843522774
    },
    {
      "text": "def sort_list(numbers): \n numbers.sort()\n return numbers\n\nprint(sort_list([4, 3, 2, 5, 1]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.375821491406064e-05,
      "p_css": 0.00031938895424980074,
      "p_html": 0.00039359509434654067,
      "p_java": 0.06444907099016255,
      "p_javascript": 0.0006600999296331297,
      "p_matlab": 2.691077165557219e-09,
      "p_python": 0.9339062931603889,
      "p_sql": 0.000129454940807382,
      "p_typescript": 7.833602442068392e-05
    },
    {
      "text": "def merge_unique_sorted_lists(list1, list2):\n\tmerged_list = list1+list2\n\tunique_list = list(set(merged_list))\n\tunique_list.sort()\n\treturn unique_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007600982686289737,
      "p_css": 0.004149455402289974,
      "p_html": 0.0019552416264822666,
      "p_java": 0.00022134564365942566,
      "p_javascript": 0.0006146374800618426,
      "p_matlab": 0.00034825429953546055,
      "p_python": 0.9895641835025475,
      "p_sql": 0.0010580215521404188,
      "p_typescript": 0.0013287622246541302
    },
    {
      "text": "from sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Product(Base):\n __tablename__ = 'product'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Employee(Base):\n __tablename__ = 'employee'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Customer(Base):\n __tablename__ = 'customer'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Purchase(Base):\n __tablename__ = 'purchase'\n id = Column(Integer, primary_key=True)\n product_id = Column(Integer, ForeignKey('product.id'))\n employee_id = Column(Integer, ForeignKey('employee.id'))\n customer_id = Column(Integer, ForeignKey('customer.id'))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00020636853188372257,
      "p_css": 0.01111116345316656,
      "p_html": 0.058476343637380815,
      "p_java": 0.8655064980832327,
      "p_javascript": 6.865362459046743e-07,
      "p_matlab": 2.502549298145592e-05,
      "p_python": 0.0621303814891422,
      "p_sql": 0.001958026962012184,
      "p_typescript": 0.0005855058139544206
    },
    {
      "text": "def populateDict(lst):\n    my_dict = {}\n    for i in lst:\n        my_dict[i] = i\n    return my_dict\n\nmy_numbers = [1, 2, 3, 4, 5]\nmy_dict = populateDict(my_numbers)\nprint(my_dict)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007347093096245534,
      "p_css": 0.41797758949337893,
      "p_html": 0.0007101087999729077,
      "p_java": 0.00013681130475090393,
      "p_javascript": 0.00028661113848399693,
      "p_matlab": 0.000920688293368164,
      "p_python": 0.5776453061990018,
      "p_sql": 0.0004237596317208302,
      "p_typescript": 0.0011644158296979232
    },
    {
      "text": "def findLongestWord(string):\n # Split the string into an array of words\n words = string.split(\" \")\n\n # Initialize the longest word as empty string\n longestWord = \"\"\n\n# Iterate over the words and keep track of the longest one\n for word in words:\n if len(word) > len(longestWord):\n longestWord = word\n\n # Return the longest word\n return longestWord\n\n# Test\nstring = \"I love learning new things\"\nlongestWord = findLongestWord(string)\nprint(\"Longest word is \" + longestWord)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.1569386263286055e-06,
      "p_css": 7.44123257075395e-05,
      "p_html": 0.0018258112585232533,
      "p_java": 0.7188067060438296,
      "p_javascript": 1.740649773064683e-05,
      "p_matlab": 1.7642991528864256e-06,
      "p_python": 0.20943185908069462,
      "p_sql": 0.06972346968219634,
      "p_typescript": 0.00011541387353896024
    },
    {
      "text": "# Function to reverse each word\ndef word_reverse(s) : \n    # Splitting each word\n    words = s.split() \n    rev_str = \"\" \n    for word in words: \n        # Reversing each word\n        rev_str += word[::-1] + \" \"\n    return rev_str",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04506067427722694,
      "p_css": 0.012996940674769883,
      "p_html": 0.022120800311179724,
      "p_java": 4.409540264511851e-05,
      "p_javascript": 0.152391815881585,
      "p_matlab": 0.0013783299193572754,
      "p_python": 0.7125065296704493,
      "p_sql": 0.05323695401969954,
      "p_typescript": 0.0002638598430872231
    },
    {
      "text": "def remove_duplicates(lst): \n  non_duplicate_lst = [] \n\n  for i in lst: \n    if i not in non_duplicate_lst: \n      non_duplicate_lst.append(i) \n\n  return non_duplicate_lst \n\nlst = [1, 4, 2, 5, 6, 4, 1, 5]\nprint(remove_duplicates(lst))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00012886147182678248,
      "p_css": 0.0008845131627965693,
      "p_html": 0.0005836228467839256,
      "p_java": 7.613648687631326e-06,
      "p_javascript": 3.537885020837121e-05,
      "p_matlab": 0.019112242319960875,
      "p_python": 0.978647462872878,
      "p_sql": 0.0004368115151953408,
      "p_typescript": 0.00016349331166261142
    },
    {
      "text": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# load the dataset\nsentiments = pd.read_csv('sentiment_data.csv')\n\n# define the input data\nX = sentiments['text']\n\n# define the labels\ny = sentiments['sentiment']\n\n# vectorize the words\ncv = CountVectorizer()\nX = cv.fit_transform(X)\n\n# create and train the model\nmodel = MultinomialNB()\nmodel.fit(X, y)\n\n# test the input\ninput = 'The movie was great'\ninput = cv.transform([input])\nresult = model.predict(input)[0]\n\n# print the result\nprint(result)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7573599461332486,
      "p_css": 0.010491394616962432,
      "p_html": 0.00010752075660056391,
      "p_java": 1.8355177293944013e-07,
      "p_javascript": 2.3115925185304234e-05,
      "p_matlab": 1.3314533116389204e-07,
      "p_python": 0.23116879023082854,
      "p_sql": 1.0128426786021084e-06,
      "p_typescript": 0.0008479027973919486
    },
    {
      "text": "def findMode(arr): \n max_count = 1 \n mode = arr[0] \n count = 1 \n  \n for i in range(1,len(arr)): \n if (arr[i] == arr[i - 1]): \n count = count + 1 # increment count\n if (count > max_count): \n max_count = count # update max_count \n mode = arr[i] \n else: \n count = 1 # reset count \n  \n return mode \n\n# Driver program \narr = [2, 4, 3, 3, 5, 3, 7] \nprint(findMode(arr)) # prints 3",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0007496427323830639,
      "p_css": 0.00028352356173838784,
      "p_html": 4.7349779726865936e-05,
      "p_java": 1.8111588089480797e-06,
      "p_javascript": 9.509764520576139e-06,
      "p_matlab": 0.17529552963682102,
      "p_python": 0.8235752862923112,
      "p_sql": 2.0036214188459445e-05,
      "p_typescript": 1.7310859501331654e-05
    },
    {
      "text": "def find_longest_common_subsequence(s1, s2):\n    # Create a two dimensional array \n    arr = [[0 for i in range(len(s2) + 1)]  \n           for j in range(len(s1) + 1)] \n    \n    # Iterate over the strings \n    for i in range(1, len(s1) + 1): \n        for j in range(1, len(s2) + 1): \n    \n        # if the characters are same, update the \n        # value at current index by adding 1 to \n        # value at the diagonal left \n            if s1[i - 1] == s2[j - 1]: \n                arr[i][j] = arr[i - 1][j - 1] + 1\n            else: \n        # If not same, take the maximum \n        # value of the cell to the left \n        # and cell above \n                arr[i][j] = max(arr[i - 1][j], \n                                arr[i][j - 1])\n\n    # return the last element of the \n    # table which is our result \n    return arr[len(s1)][len(s2)]",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 8.631838808790668e-06,
      "p_css": 2.5762250140977876e-05,
      "p_html": 1.0825521100942316e-05,
      "p_java": 7.738175657670542e-07,
      "p_javascript": 4.881569608831016e-05,
      "p_matlab": 0.9638109234566067,
      "p_python": 0.014110320426789981,
      "p_sql": 0.00012612321555940297,
      "p_typescript": 0.021857823777338983
    },
    {
      "text": "for i in range(1, 11):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2415972227325905e-13,
      "p_css": 1.6911048586434646e-18,
      "p_html": 1.1057399553217356e-12,
      "p_java": 5.510266050076294e-15,
      "p_javascript": 7.48076876636178e-15,
      "p_matlab": 0.999998444523721,
      "p_python": 1.5554749300339005e-06,
      "p_sql": 3.862174504852572e-14,
      "p_typescript": 6.723799180726865e-14
    },
    {
      "text": "def removeVowels(inputString):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n    outputString = \"\"\n    for char in inputString:\n        if char not in vowels:\n            outputString += char\n    \n    return outputString",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0019472845191757721,
      "p_css": 0.009896916057973108,
      "p_html": 0.005143151574761951,
      "p_java": 9.958637237833045e-05,
      "p_javascript": 0.0010343854064894145,
      "p_matlab": 0.020942693838189846,
      "p_python": 0.9549125576326394,
      "p_sql": 0.0036472370484252233,
      "p_typescript": 0.002376187549966865
    },
    {
      "text": "def gcd(a, b): \n if(b == 0): \n  return a \n return gcd(b, a%b) \n\ndef main():\n a = 28 \n b = 15 \n print(gcd(a,b)) \n\nif __name__ == \"__main__\": \n main() \n\n# Output\n3",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.07120064622478835,
      "p_css": 0.013859191375682143,
      "p_html": 0.009280858243809965,
      "p_java": 0.0003414961633652833,
      "p_javascript": 0.0009904506973152927,
      "p_matlab": 0.8469444486937323,
      "p_python": 0.054921334505597136,
      "p_sql": 0.002040432269410693,
      "p_typescript": 0.0004211418262989982
    },
    {
      "text": "def is_valid_mul_table(matrix):\n num_list = set()\n for row in matrix:\n for item in row:\n num_list.add(item)\n \n length = int(len(matrix) ** 0.5)\n if len(num_list) != (length ** 2):\n return False \n for num in range(1,length ** 2 + 1):\n if num not in num_list:\n return False\n \n return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.0243235572870305e-05,
      "p_css": 1.036949166171173e-06,
      "p_html": 0.00022170896630512425,
      "p_java": 0.0003175173097234896,
      "p_javascript": 0.0012652161876071319,
      "p_matlab": 0.006233928554393337,
      "p_python": 0.9915605689624097,
      "p_sql": 0.0003356572512576025,
      "p_typescript": 4.122583564649079e-06
    },
    {
      "text": "def remove_item(items, target):\n    return [i for i in items if i != target]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00031421785223596804,
      "p_css": 0.04061960658292125,
      "p_html": 0.0018989938700359533,
      "p_java": 8.057715414344669e-05,
      "p_javascript": 0.002236399362840871,
      "p_matlab": 0.07465228583252559,
      "p_python": 0.8778013586562908,
      "p_sql": 0.002323343818615563,
      "p_typescript": 7.321687039072328e-05
    },
    {
      "text": "def sort_list(lst):\n  lst.sort(key = lambda x: x[1])\n  return lst",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.043748704872782e-05,
      "p_css": 0.0017490544353031695,
      "p_html": 0.00018263382696846687,
      "p_java": 1.240863616274388e-05,
      "p_javascript": 4.7235343997108926e-05,
      "p_matlab": 2.974415981497881e-06,
      "p_python": 0.9977711406225934,
      "p_sql": 0.00010759826858829652,
      "p_typescript": 5.651696335681675e-05
    },
    {
      "text": "import unittest\n\nclass TriangleTestCase(unittest.TestCase):\n    def setUp(self):\n        self.triangle1 = Triangle(2,3,4)\n        self.triangle2 = Triangle(3,4,5)\n\n    def test_area_triangle1(self):\n        self.assertEqual(self.triangle1.area(), 2.9047)\n        \n    def test_area_triangle2(self):\n        self.assertEqual(self.triangle2.area(), 6.0000)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00022270759637480286,
      "p_css": 0.02809066226954597,
      "p_html": 0.25280099842248094,
      "p_java": 4.891630174889735e-06,
      "p_javascript": 3.4922088367193095e-05,
      "p_matlab": 2.7261385814176975e-06,
      "p_python": 0.48465674202705594,
      "p_sql": 0.23396780128867126,
      "p_typescript": 0.0002185485387475804
    },
    {
      "text": "def evaluate_expression(expression):\n    try:\n        result = eval(expression)\n        print(result)\n    except:\n        print(\"Error: invalid expression\")\n\nevaluate_expression(\"1+1\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002733236830374354,
      "p_css": 0.008052428991808986,
      "p_html": 0.002731887328936036,
      "p_java": 6.284434521749453e-05,
      "p_javascript": 0.00044727545916961185,
      "p_matlab": 0.00015344057599877387,
      "p_python": 0.9828602648411227,
      "p_sql": 0.0029062992495399887,
      "p_typescript": 0.002512235525168942
    },
    {
      "text": "my_list = [x for x in range(0, 51) if x % 3 == 0]",
      "y_true": "matlab",
      "pred_label": "matlab",
      "p_bash": 1.0915556812076982e-08,
      "p_css": 2.6974340355221624e-10,
      "p_html": 3.49467722388427e-08,
      "p_java": 1.155293329279215e-09,
      "p_javascript": 9.960431830064298e-10,
      "p_matlab": 0.9999980952211216,
      "p_python": 1.8381630414650356e-06,
      "p_sql": 5.02599754532178e-09,
      "p_typescript": 1.3306430398963288e-08
    },
    {
      "text": "\"\"\"\nFind the k-nearest neighbors of a given point\n\"\"\"\nimport numpy as np \n  \ndef knn(point, k, points): \n    distances = []\n    for p in points:\n        distances.append((((point[0] - p[0]) ** 2 + (point[1] - p[1]) **2) ** 0.5, p))\n    distances.sort()\n    neighbors = []\n    for i in range(k): \n        neighbors.append(distances[i][1]) \n    return neighbors\n  \nif __name__ == \"__main__\": \n    # Array of points   \n    points = np.array([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) \n    # Provided point \n    point = (1, 2)\n    k = 3 \n    print(knn(point, k, points))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.012877839950130745,
      "p_css": 0.014663741691283087,
      "p_html": 0.00857973238826911,
      "p_java": 0.0002877202240476392,
      "p_javascript": 0.001081704605761939,
      "p_matlab": 0.4875645254073264,
      "p_python": 0.4574401827343522,
      "p_sql": 0.0023359337580707903,
      "p_typescript": 0.015168619240758128
    },
    {
      "text": "from random import randint\n\nclass TicTacToeAgent:\n \n board = [[0,0,0],\n [0,0,0],\n [0,0,0]]\n \n def __init__(self):\n self.turn = 1\n \n def checkpattern(self):\n for i in range(3):\n if self.board[i][0]==self.board[i][1] and \\\n self.board[i][1]==self.board[i][2] and \\\n self.board[i][0]!=0:\n return True\n \n for j in range(3):\n if self.board[0][j]==self.board[1][j] and \\\n self.board[1][j]==self.board[2][j] and \\\n self.board[0][j]!=0:\n return True\n \n if self.board[0][0]==self.board[1][1] and \\\n self.board[1][1]==self.board[2][2] and \\\n self.board[0][0]!=0:\n return True\n \n if self.board[2][0]==self.board[1][1] and \\\n self.board[1][1]==self.board[0][2] and \\\n self.board[2][0]!=0:\n return True\n return False\n \n def turn(self,x,y):\n self.board[x][y] = self.turn\n self.turn = -self.turn\n \n def play(self):\n flag = 1\n while flag ==1:\n #user move\n i=int(input(\"input row: \"))\n j=int(input(\"input col: \"))\n self.turn(i,j)\n if self.checkpattern():\n print(\"user won\")\n flag = 0\n \n else:\n #AI move\n i = randint(0,2)\n j = randint(0,2)\n self.turn(i,j)\n if self.checkpattern():\n print(\"computer won\")\n flag = 0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008285993211384325,
      "p_css": 0.01265300419955621,
      "p_html": 0.056237777628329884,
      "p_java": 4.578993898580823e-05,
      "p_javascript": 0.00010613308268884943,
      "p_matlab": 7.636272973316887e-05,
      "p_python": 0.5784844872571089,
      "p_sql": 0.34954131618162754,
      "p_typescript": 0.0020265296608312842
    },
    {
      "text": "import pyswarms as ps\n \ndef optimize(model, X, y):\n    # Configure hyperparameters\n    options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}\n \n    # Compute the hyperparameters\n    optimizer = ps.single.LocalBestPSO(n_particles=10, \n                                       dimensions=X.shape[1], \n                                       options=options)\n \n    # Perform the search\n    cost, pos = optimizer.optimize(model, X, y)\n \n    # Create and return the optimized model\n    hyperparameters = {'bias': pos[0],\n                       'weights': pos[1:]}\n \n    optimized_model = model(**hyperparameters)\n \n    return optimized_model",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.05738160215924013,
      "p_css": 0.078446334254837,
      "p_html": 0.027347138986619977,
      "p_java": 0.00021589626391046204,
      "p_javascript": 0.0009846179448990107,
      "p_matlab": 0.00024231355875557834,
      "p_python": 0.13984228269125062,
      "p_sql": 8.269782880049701e-05,
      "p_typescript": 0.6954571163116868
    },
    {
      "text": "def average(a, b, c):\n    return (a+b+c)/3",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000400320005749689,
      "p_css": 0.002663831498550027,
      "p_html": 0.001072731410488919,
      "p_java": 0.00010427946431280566,
      "p_javascript": 0.00031186302476806,
      "p_matlab": 4.497056627414336e-05,
      "p_python": 0.9945872100164365,
      "p_sql": 0.0003221691236123356,
      "p_typescript": 0.0004926248898075376
    },
    {
      "text": "#!/usr/bin/env python\n# MusicPlayer, https://github.com/albertz/music-player\n# Copyright (c) 2012, Albert Zeyer, www.az2000.de\n# All rights reserved.\n# This code is under the 2-clause BSD license, see License.txt in the root directory of this project.\n\nimport sys, os, random, fnmatch\n\n# Our parent path might contain a self-build musicplayer module. Use that one.\nsys.path = [os.path.abspath((os.path.dirname(__file__) or \".\") + \"/..\")] + sys.path\n\nimport musicplayer\nprint \"Module:\", musicplayer.__file__\n\n# ffmpeg log levels: {0:panic, 8:fatal, 16:error, 24:warning, 32:info, 40:verbose}\nmusicplayer.setFfmpegLogLevel(20)\n\ntry:\n\timport better_exchook\n\tbetter_exchook.install()\nexcept ImportError: pass # doesnt matter\n\ntry:\n\timport faulthandler\n\tfaulthandler.enable(all_threads=True)\nexcept ImportError:\n\tprint \"note: module faulthandler not available\"\n\t\nclass Song:\n\tdef __init__(self, fn):\n\t\tself.url = fn\n\t\tself.f = open(fn)\n\t\t\n\tdef __eq__(self, other):\n\t\treturn self.url == other.url\n\t\n\tdef readPacket(self, bufSize):\n\t\ts = self.f.read(bufSize)\n\t\t#print \"readPacket\", self, bufSize, len(s)\n\t\treturn s\n\n\tdef seekRaw(self, offset, whence):\n\t\tr = self.f.seek(offset, whence)\n\t\t#print \"seekRaw\", self, offset, whence, r, self.f.tell()\n\t\treturn self.f.tell()\n\nfiles = []\ndef getFiles(path):\n\tfor f in sorted(os.listdir(path), key=lambda k: random.random()):\n\t\tf = os.path.join(path, f)\n\t\tif os.path.isdir(f): getFiles(f) # recurse\n\t\tif len(files) > 1000: break # break if we have enough\n\t\tif fnmatch.fnmatch(f, '*.mp3'): files.append(f)\ngetFiles(os.path.expanduser(\"~/Music\"))\nrandom.shuffle(files) # shuffle some more\nfiles = sys.argv[1:] + files\nassert files, \"give me some files or fill-up ~/Music\"\n\ni = 0\n\ndef songs():\n\tglobal i, files\n\twhile True:\n\t\tyield Song(files[i])\n\t\ti += 1\n\t\tif i >= len(files): i = 0\n\ndef peekSongs(n):\n\tnexti = i + 1\n\tif nexti >= len(files): nexti = 0\n\treturn map(Song, (files[nexti:] + files[:nexti])[:n])\n\nplayer = musicplayer.createPlayer()\nplayer.outSamplerate = 48000\nplayer.queue = songs()\nplayer.peekQueue = peekSongs\nplayer.playing = True\n\ndef formatTime(t):\n\tif t is None: return \"?\"\n\tmins = long(t // 60)\n\tt -= mins * 60\n\thours = mins // 60\n\tmins -= hours * 60\n\tif hours: return \"%02i:%02i:%02.0f\" % (hours,mins,t)\n\treturn \"%02i:%02.0f\" % (mins,t)\n\nimport termios\n\ndef prepareStdin():\n\tfd = sys.stdin.fileno()\n\t\n\tif os.isatty(fd):\t\t\n\t\told = termios.tcgetattr(fd)\n\t\tnew = termios.tcgetattr(fd)\n\t\tnew[3] = new[3] & ~termios.ICANON & ~termios.ECHO\n\t\t# http://www.unixguide.net/unix/programming/3.6.2.shtml\n\t\tnew[6][termios.VMIN] = 0\n\t\tnew[6][termios.VTIME] = 1\n\t\t\n\t\ttermios.tcsetattr(fd, termios.TCSANOW, new)\n\t\ttermios.tcsendbreak(fd, 0)\n\n\t\timport atexit\n\t\tatexit.register(lambda: termios.tcsetattr(fd, termios.TCSANOW, old))\t\n\n\t\tprint \"Console control:\"\n\t\tprint \"  <space>:        play / pause\"\n\t\tprint \"  <left>/<right>: seek back/forward by 10 secs\"\n\t\tprint \"  <return>:       next song\"\n\t\tprint \"  <q>:            quit\"\n\ndef getchar():\n\tfd = sys.stdin.fileno()\n\tch = os.read(fd, 7)\n\treturn ch\n\nprepareStdin()\n\nwhile True:\n\tsys.stdout.write(\"\\r\\033[K\") # clear line\n\tif player.playing: sys.stdout.write(\"playing, \")\n\telse: sys.stdout.write(\"paused, \")\n\tcurSong = player.curSong\n\tif curSong:\n\t\turl = os.path.basename(curSong.url)\n\t\tif len(url) > 40: url = url[:37] + \"...\"\n\t\tsys.stdout.write(\n\t\t\turl + \" : \" +\n\t\t\tformatTime(player.curSongPos) + \" / \" +\n\t\t\tformatTime(player.curSongLen))\n\telse:\n\t\tsys.stdout.write(\"no song\")\n\t\n\tch = getchar()\n\tif ch == \"\\x1b[D\": # left\n\t\tplayer.seekRel(-10)\n\telif ch == \"\\x1b[C\": #right\n\t\tplayer.seekRel(10)\n\telif ch == \"\\x1b[A\": #up\n\t\tpass\n\telif ch == \"\\x1b[B\": #down\n\t\tpass\n\telif ch == \"\\n\": # return\n\t\tplayer.nextSong()\n\telif ch == \" \":\n\t\tplayer.playing = not player.playing\n\telif ch == \"q\":\n\t\tprint\n\t\tsys.exit(0)\n\tsys.stdout.flush()\n",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.00015403470197285327,
      "p_css": 0.14410972658836108,
      "p_html": 0.04811454498579557,
      "p_java": 0.00033895100152330214,
      "p_javascript": 0.0006909737466069124,
      "p_matlab": 0.00041449638332626486,
      "p_python": 0.09063954707442017,
      "p_sql": 0.707481083165196,
      "p_typescript": 0.008056642352797887
    },
    {
      "text": "def sum_prime_numbers(start, end):\n  total = 0\n  for num in range(start, end + 1):\n    if is_prime(num):\n      total += num\n  return total\n\ndef is_prime(num):\n  for i in range(2, num):\n    if num % i == 0:\n      return False\n  \n  return True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0234460508862737e-10,
      "p_css": 1.208205269251995e-15,
      "p_html": 1.0090176947732798e-09,
      "p_java": 4.780687151462289e-12,
      "p_javascript": 7.338188908313057e-12,
      "p_matlab": 0.9997958081366284,
      "p_python": 0.00020419057329940758,
      "p_sql": 9.818839479060719e-11,
      "p_typescript": 6.840156808227179e-11
    },
    {
      "text": "import time\nimport random\n\nquestions = [...List of questions]\n\ndef start_game():\n    score = 0\n    start_time = time.time()\n    for i in range( len(questions) ):\n        print(f'Question {i+1}:')\n        question = random.choice(questions)\n        print(question['text'])\n        print('Options:')\n        for j, option in enumerate(question['options'], start=1):\n            print(f\"{j}. {option}\")\n        answer = int(input('Answer: '))\n        if answer == question['answer']:\n            score += 1\n            print('Correct!\\n')\n        else:\n            print('Incorrect!\\n')\n        elapsed_time = time.time() - start_time\n        print(f'Time remaining: {30 - int(elapsed_time):02} seconds\\n')\n        if elapsed_time >= 30:\n            break\n    print(f'Your score is {score}/{len(questions)}')\n\nif __name__ == '__main__':\n    start_game()",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0005982528482402177,
      "p_css": 0.06888950672327847,
      "p_html": 0.0030577048336415703,
      "p_java": 0.0012455357220755394,
      "p_javascript": 0.0003001558587039913,
      "p_matlab": 0.00023795467951041052,
      "p_python": 0.8938348034139162,
      "p_sql": 0.031738713114566844,
      "p_typescript": 9.737280606675053e-05
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# make the request\nURL = \"https://example.com/product-list\"\nresponse = requests.get(URL)\n\n# parse the HTML\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# find all product prices on the page\nprices = soup.find_all('span', class_=\"price\")\n\n# print out all the prices\nfor price in prices:\n print(price.text)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.0070652322198734e-10,
      "p_css": 0.6505629983798435,
      "p_html": 0.2606551087619712,
      "p_java": 0.08814987367750929,
      "p_javascript": 8.651821693100769e-05,
      "p_matlab": 1.3540432005337457e-07,
      "p_python": 0.0003258283417284317,
      "p_sql": 0.00018138326605433624,
      "p_typescript": 3.815385093563123e-05
    },
    {
      "text": "def count_occurrences(arr): \n    # Initialize a new dictionary \n    count_dict = {} \n  \n    # Iterate through all the elements of arr\n    for row in arr: \n        for ele in row: \n  \n            # If element exists in the dictionary \n            if ele in count_dict.keys(): \n                count_dict[ele] += 1\n            else: \n                count_dict[ele] = 1\n  \n    return count_dict\n\narr = [['a', 'a', 'b', 'c', 'c'], ['c', 'b', 'a', 'a', 'b']]\nprint(count_occurrences(arr)) # prints {'a': 4, 'b': 3, 'c': 3}",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 0.00013663701365546662,
      "p_css": 0.0030782191357802816,
      "p_html": 9.684742521408844e-05,
      "p_java": 3.5806652202935777e-06,
      "p_javascript": 7.947879497382229e-05,
      "p_matlab": 0.9796982303553475,
      "p_python": 0.01648747959005062,
      "p_sql": 1.4749052846382336e-05,
      "p_typescript": 0.00040477796691140537
    },
    {
      "text": "myDict = {\n 'name': 'John',\n 'age': 25,\n 'height': 6.1,\n 'city': 'New York',\n 'job': 'Developer'\n}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00012201129118595943,
      "p_css": 0.9989605344602183,
      "p_html": 0.0002489232386063687,
      "p_java": 0.00030975151233638966,
      "p_javascript": 9.395473654389178e-07,
      "p_matlab": 7.106931488153369e-06,
      "p_python": 0.00032367092366719614,
      "p_sql": 1.3124662475417861e-05,
      "p_typescript": 1.393743265683376e-05
    },
    {
      "text": "import requests\n\nurl = 'https://www.example.com/'\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print('Success!')\nelse:\n    print('An error has occurred.')",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.1244431404458706e-23,
      "p_css": 9.587543255370093e-08,
      "p_html": 8.874332501105722e-10,
      "p_java": 0.9999998830392044,
      "p_javascript": 2.5762584118153528e-11,
      "p_matlab": 1.2043431493354279e-11,
      "p_python": 1.9852612637832437e-08,
      "p_sql": 2.5474561610319577e-10,
      "p_typescript": 5.276536830972639e-11
    },
    {
      "text": "#!/usr/bin/python\n#coding:utf-8\n\nj = '{\"action\": \"print\", \"method\": \"onData\", \"data\": {\"key1\" : 1, \"key2\":\"value2\"} }'\nimport json\n\nclass Payload(object):\n    def __init__(self, j):\n        self.__dict__ = json.loads(j)\n\np = Payload(j)\nprint '-' * 30\nprint dir(p)\nprint '-' * 30\nprint p.action\nprint p.method\nprint p.data\nprint type(p.data)\ndata = dict(p.data)\nprint 'new data:', data\n\nj2 = '{ \"identity\" :  \"dafei\", \"alert\" : \"you have message\", \"badge\":1, \"payload\": { \"k1\":\"v1\", \"k2\" : \"v2\"} }'\np2 = Payload(j2)\nprint dir(p2)\nprint type(p2.payload)\nprint p2.payload\n\nprint '-' *50\n\nclass ParseBase(object):\n    \"\"\"docstring for ParseBase\"\"\"\n    def __init__(self):\n        super(ParseBase, self).__init__()\n        self.http_status_code = 0\n\n    def parse(self, j):\n        dict_data = json.loads(j)\n        for key in self.__dict__:\n            print 'key:{}'.format(key)\n            if not key.startswith('http'):\n                value = dict_data.get(key)\n                self.__dict__[key] = value\n\nclass Http(ParseBase):\n    \"\"\"docstring for Http\"\"\"\n    def __init__(self):\n        super(Http, self).__init__()\n        self.name = None\n        self.id = None\n    \nh = Http()\nh.parse('{ \"name\" : \"大飞\", \"id\":1 }')\nprint dir(h)\nprint h.http_status_code\nprint h.name\nprint h.id\n\n",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.4956021186812588e-05,
      "p_css": 0.9712522762583299,
      "p_html": 0.0070583561819275355,
      "p_java": 2.4283868314271694e-06,
      "p_javascript": 5.75939445770947e-07,
      "p_matlab": 8.493223041930513e-08,
      "p_python": 0.014293700863956838,
      "p_sql": 0.007373576978856577,
      "p_typescript": 4.044437234924038e-06
    },
    {
      "text": "def sort_array(array):\n    for i in range(len(array)): \n        min_idx = i \n        for j in range(i+1, len(array)): \n            if array[min_idx] > array[j]: \n                min_idx = j       \n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\nresult = sort_array(array)\nprint(result) // Output: [1, 2, 3, 4, 5, 7]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0016210643659708714,
      "p_css": 0.00011645914576852359,
      "p_html": 0.0002076374771644159,
      "p_java": 1.0866892552349112e-05,
      "p_javascript": 1.5251384696415714e-05,
      "p_matlab": 0.9931939119376035,
      "p_python": 0.004760232025994511,
      "p_sql": 3.0063501651602545e-05,
      "p_typescript": 4.451326859766669e-05
    },
    {
      "text": "import tkinter as tk\n\nroot = tk.Tk()\n\ndef displayMessage():\n    print(\"Button was pressed!\")\n\nbutton = tk.Button(root,text=\"Press Me\",width=25,command=displayMessage)\nbutton.pack()\n\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004463106897569931,
      "p_css": 0.014775015413647952,
      "p_html": 0.011389226407139295,
      "p_java": 0.0007060811145021928,
      "p_javascript": 0.0012490166389782145,
      "p_matlab": 0.0020798811899693306,
      "p_python": 0.8965424021113916,
      "p_sql": 0.04052465647056401,
      "p_typescript": 0.028270613756237715
    },
    {
      "text": "import re\n\n# Representation of tokens\ntokens = [\n ['NUMBER',        r'\\d+(\\.\\d+)?'],\n ['OPEN_BRACE',    r'\\['],\n ['CLOSE_BRACE',   r'\\]'],\n ['TEXT',          r'[a-zA-Z]+']\n]\n\n# List of tokens\ntoken_list = []\nfor token, pattern in tokens:\n token_list.append(token)\n\n# Dictionary of tokens\ntoken_dict = {token: pattern for token, pattern in tokens}\n\ndef lex(string):\n token_list = []\n char_list = list(string)\n while char_list:\n for token, regex in token_dict.items():\n matchObj = re.match('^' + regex, ''.join(char_list))\n if matchObj:\n token_list.append((token, matchObj.group()))\n char_list = char_list[matchObj.end():]\n break\n else:\n raise SyntaxError\n return token_list\n\nprint(lex('[10.5 hello]'))\n# Output: [('OPEN_BRACE', '['), ('NUMBER', '10.5'), ('TEXT', 'hello'), ('CLOSE_BRACE', ']')]",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0018984452493410258,
      "p_css": 0.14161654156844988,
      "p_html": 0.07600215245366118,
      "p_java": 0.000918230246180885,
      "p_javascript": 0.00254168291114894,
      "p_matlab": 0.046251439625884266,
      "p_python": 0.6141603518091896,
      "p_sql": 0.10839079265574803,
      "p_typescript": 0.008220363480396295
    },
    {
      "text": "from paginator import Paginator\n\ndef page_items(items, page_number):\n    p = Paginator(items, 3) # items per page\n    return p.page(page_number).object_list\n\npage_1 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 1)\nprint(page_1) # [\"apple\", \"banana\", \"carrot\"]\n\npage_2 = page_items([\"apple\", \"banana\", \"carrot\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"iceberg lettuce\"], 2)\nprint(page_2) # [\"date\", \"elderberry\", \"fig\"]",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0015416756820005372,
      "p_css": 0.8535804672448822,
      "p_html": 0.0035549194348949782,
      "p_java": 9.383912711725611e-05,
      "p_javascript": 0.0011881238961092098,
      "p_matlab": 8.181575778927579e-05,
      "p_python": 0.13925418525360675,
      "p_sql": 0.0004953241680748312,
      "p_typescript": 0.00020964943552476112
    },
    {
      "text": "def encode(text):\n # Create an empty string\n encoded_string = ''\n # Iterate over every character\n for i in text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # Add +1 to each Character\n     n += 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     encoded_string += c\n \n # Return the result\n return encoded_string\n\ndef decode(encoded_text):\n # Create an empty string\n decoded_string = ''\n # Iterate over every character\n for i in encoded_text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # subtract -1 from each Character \n     n -= 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     decoded_string += c\n \n # Return the result\n return decoded_string\n\n# Test the code\ntext = 'Python'\nencoded_text = encode(text)\n decoded_text = decode(encoded_text)\n \n print ( text == decoded_text )  #True",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 3.4791254917094023e-07,
      "p_css": 0.0017918279842495163,
      "p_html": 4.436003310187802e-05,
      "p_java": 0.00021829550027136285,
      "p_javascript": 0.00015626644852954677,
      "p_matlab": 3.23983438979371e-05,
      "p_python": 0.0007725149110845864,
      "p_sql": 0.004836117774681859,
      "p_typescript": 0.9921478710916342
    },
    {
      "text": "def delete_last_char(string):\n    \"\"\"Delete the last character of a given string.\n\n    Args:\n        string (str): The string to remove the last character from. \n\n    Returns:\n        str: The string with the last character removed.\n    \"\"\"\n    return string[:-1]\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    result = delete_last_char(string)\n    print(result)",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 4.2929611233953123e-11,
      "p_css": 2.0593786853787044e-06,
      "p_html": 2.419275562557882e-07,
      "p_java": 0.9987502179430832,
      "p_javascript": 3.1448044441923312e-12,
      "p_matlab": 6.523505170030151e-12,
      "p_python": 0.0008538256091551377,
      "p_sql": 0.0003929720601700314,
      "p_typescript": 6.830287521412288e-07
    },
    {
      "text": "#!/usr/bin/python\n\nimport sys\nimport os\nfrom subprocess import call\nfrom Bio import SeqIO\n\nprint \"Usage: mitobim_run.py NumberOfReads ListOfFiles Reference [miramito/quickmito/seedmito] missmatch\"\n\ntry:\n    nreads = sys.argv[1]\nexcept:\n    nreads = raw_input(\"Introduce number of reads: \")\n\ntry:\n    lista = sys.argv[2]\nexcept:\n    lista = raw_input(\"Introduce list of files: \")\n\ntry:\n    ref = sys.argv[3]\nexcept:\n    ref = raw_input(\"Introduce Fasta file as reference: \")\n\ntry:\n    prot = sys.argv[4]\nexcept:\n    prot = raw_input(\"Introduce protocol name (miramito/quickmito/seedmito): \")\n\ntry:\n    mism = sys.argv[5]\nexcept:\n    mism = \"15\"\n\nmanifest = \"\"\"echo \"\\n#manifest file for basic mapping assembly with illumina data using MIRA 4\\n\\nproject = initial-mapping-testpool-to-Salpinus-mt\\n\\njob=genome,mapping,accurate\\n\\nparameters = -NW:mrnl=0 -AS:nop=1 SOLEXA_SETTINGS -CO:msr=no\\n\\nreadgroup\\nis_reference\\ndata = reference.fa\\nstrain = Salpinus-mt-genome\\n\\nreadgroup = reads\\ndata = reads.fastq\\ntechnology = solexa\\nstrain = testpool\\n\" > manifest.conf\"\"\"\n\nmiramito = \"\"\"mira manifest.conf && MITObim_1.8.pl --missmatch %s --clean -start 1 -end 1000 -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq -maf initial-mapping-testpool-to-Salpinus-mt_assembly/initial-mapping-testpool-to-Salpinus-mt_d_results/initial-mapping-testpool-to-Salpinus-mt_out.maf > log\"\"\" % mism\n\nquickmito = \"\"\"MITObim_1.8.pl -start 1 -end 1000 -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq --missmatch %s --quick reference.fa --clean > log\"\"\" % mism\n\nseedmito = \"\"\"MITObim_1.8.pl -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq --quick reference.fa --missmatch %s -end 1000 --clean > log\"\"\" % mism\n\nmiramitoout = \"\"\"/testpool-Salpinus_mt_genome_assembly/testpool-Salpinus_mt_genome_d_results/testpool-Salpinus_mt_genome_out_testpool.unpadded.fasta\"\"\"\n\npairs = open(lista).readlines()\n\nnpairs = len(pairs)/2\n\nfor npair in range(0,npairs):\n    pairone = pairs[npair*2][:-1]\n    pairtwo = pairs[(npair*2)+1][:-1]\n    name = \"\"\n    paironesplit = pairone.split(\".\")\n    if paironesplit[-1] == \"gz\":\n        name = \".\".join(paironesplit[0:-2])\n    elif paironesplit[-1] == \"fastq\" or paironesplit[-1] == \"fq\":\n        name = \".\".join(paironesplit[0:-1])\n    name = name[:-2]\n    foldername = \"%s_%s\" % (name,prot)\n    call(\"mkdir %s\" % foldername , shell=True)\n    os.chdir(foldername)\n\n    print \"\\nStarting with \" + name\n\n    call(\"seqtk sample -s100 ../%s %s > %s\" % (pairone,nreads,name+\".fq.subset1\"), shell=True)\n    call(\"seqtk sample -s100 ../%s %s > %s\" % (pairtwo,nreads,name+\".fq.subset2\"), shell=True)\n    call(\"shuffleSequences_fastq.pl %s %s %s\" % (name+\".fq.subset1\",name+\".fq.subset2\",name+\".shuffled.fastq\"), shell=True)\n    call(\"ln -sf %s reads.fastq\" % (name+\".shuffled.fastq\"), shell=True)\n    call(\"ln -sf ../%s reference.fa\" % ref, shell=True)\n    if prot == \"miramito\":\n        call(manifest, shell=True)\n        call(miramito, shell=True)\n    elif prot == \"quickmito\":\n        call(quickmito, shell=True)\n    elif prot == \"seedmito\":\n        call(seedmito, shell=True)\n    else:\n        break\n    list_dir = os.listdir(\".\")\n    list_dir.sort()\n    iterations = []\n    for dir in list_dir:\n        if dir.startswith(\"iteration\"):\n            iterations.append(dir)\n    os.chdir(\"../\")\n    consensus = \"%s/%s\" % (foldername,iterations[-1]+miramitoout)\n    secus = SeqIO.parse(open(consensus), \"fasta\")\n    out = open(\"%s_%s.fa\" % (name,prot), \"w\")\n    i = 0\n    for secu in secus:\n        i+=1\n        s = str(secu.seq)\n        s = s.replace(\"x\",\"n\")\n        out.write(\">%s_%s_%s\\n%s\\n\" % (name,prot,i, s))\n    out.close()\n\n    print name + \" finalized!!!\"\n",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 0.09430041878874816,
      "p_css": 0.016516153665897617,
      "p_html": 0.021339313734714992,
      "p_java": 0.8294272586382602,
      "p_javascript": 0.00024317573316912417,
      "p_matlab": 0.0013072388412638941,
      "p_python": 0.03136915026416832,
      "p_sql": 0.003474048235833749,
      "p_typescript": 0.0020232420979439166
    },
    {
      "text": "# Calculating frequency of each word in the given string\n \nstring = 'This is a simple sentence containing multiple words.'\n \n# Splitting the string into words \nwords = string.split()\n \n# Initializing a dictionary\ncount = {} \n\n# Mapping every word with its frequency in counts\nfor word in words:\n count[word] = count.get(word, 0) + 1\n \n# Printing the frequency each word\nfor word, frequency in count.items():\n print(f'{word}: {frequency}')\n\nOutput:\nThis: 1\nis: 1\na: 1\nsimple: 1\nsentence: 1\ncontaining: 1\nmultiple: 1\nwords: 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.692467232237708e-05,
      "p_css": 0.005881448154819836,
      "p_html": 0.002794620533372335,
      "p_java": 0.01426516659084931,
      "p_javascript": 4.4886258075289307e-07,
      "p_matlab": 5.405606858214363e-06,
      "p_python": 0.7264802840290653,
      "p_sql": 0.25044968040137594,
      "p_typescript": 8.60211487560769e-05
    },
    {
      "text": "def group_equal_sum(arr):\n    result = []\n    arr.sort()\n\n    while len(arr) > 0:\n        group = [arr[0]]\n        arr.remove(arr[0])\n\n        sum_ = group[0]\n        while sum_ in arr:\n            group.append(sum_)\n            arr.remove(sum_)\n            sum_ += 1\n\n        result.append(group)\n    return result",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.333837281391263e-05,
      "p_css": 0.0013830814457109443,
      "p_html": 0.0004429941134249671,
      "p_java": 3.905809054349251e-05,
      "p_javascript": 6.1902272081885e-05,
      "p_matlab": 0.9578089780264039,
      "p_python": 0.040081241425719456,
      "p_sql": 1.978801995423423e-05,
      "p_typescript": 8.961823334724686e-05
    },
    {
      "text": "def findCommonSubstring(str1, str2):\n    common_substring = \"\"\n    for i in range(len(str1)): \n        for j in range(len(str2)): \n            for k in range(min(len(str1) - i, len(str2) - j)): \n                if str1[i + k] != str2[j + k]: \n                    break\n            if k > len(common_substring): \n                common_substring = str1[i:i+k] \n    return common_substring \n \nresult = findCommonSubstring(\"alexandra\", \"andromeda\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.924037141906088e-07,
      "p_css": 2.89332913538986e-07,
      "p_html": 4.0762828212149125e-09,
      "p_java": 6.79262734107689e-08,
      "p_javascript": 0.0001031573498542454,
      "p_matlab": 0.013775327002180407,
      "p_python": 0.9858300813881685,
      "p_sql": 0.0002893650713626242,
      "p_typescript": 8.154492503898454e-07
    },
    {
      "text": "import random\n\ndef game():\n num = random.randint(0, 10)\n num_guesses = 0\n\n while True:\n guesses = int(input('Guess a number between 0 and 10: '))\n num_guesses += 1\n\n if guesses == num:\n print(f'You guessed correctly in {num_guesses} guesses! The number was {num}')\n break\n else:\n print('Wrong guess. Try again.')\n \ngame()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00038735502217273466,
      "p_css": 0.00012964260284484012,
      "p_html": 0.0006848669144256816,
      "p_java": 0.00019659328100717432,
      "p_javascript": 3.287879239450996e-05,
      "p_matlab": 0.0027279885662966122,
      "p_python": 0.994965426889157,
      "p_sql": 0.00045594695277460334,
      "p_typescript": 0.00041930097892685207
    },
    {
      "text": "from datetime import date, timedelta\n\ndef next_day(old_date):\n d = date.fromisoformat(old_date)       \n new_date = d + timedelta(1) \n return new_date.isoformat() \n\nnext_day(\"2020-06-20\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.013908170078613162,
      "p_css": 0.10874370105439879,
      "p_html": 0.006867524436134907,
      "p_java": 0.0004346619354222982,
      "p_javascript": 0.0015586902356898393,
      "p_matlab": 0.0005662791871961233,
      "p_python": 0.8646191783808618,
      "p_sql": 0.0013532231249505503,
      "p_typescript": 0.0019485715667325004
    },
    {
      "text": "import numpy as np\n\ndef minimize(x):\n  return np.power(x,4) + 7 * np.power(x,3) + 6 * np.power(x,2) - 6 * x\n\ndef optimize(f, x):\n  best_x = x \n  best_val = f(x)\n\n  while True:\n    new_x = x - 1e-3 \n    new_val = f(new_x)\n    if new_val < best_val: \n      best_x = new_x \n      best_val = new_val \n      x = new_x\n    else:\n      break\n  return best_x, best_val\n\nx = 0 \nx_min, val_min = optimize(minimize, x)\nprint(f'Minimum of function \"f(x)\" is at x={x_min}, with value {val_min}.')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.043127258979178844,
      "p_css": 0.1824219109282201,
      "p_html": 0.025282937249936726,
      "p_java": 0.002758919839466698,
      "p_javascript": 0.20367364927972384,
      "p_matlab": 0.03179806218106117,
      "p_python": 0.4870155817118276,
      "p_sql": 0.010610039638931397,
      "p_typescript": 0.013311640191653509
    },
    {
      "text": "def gcf(a, b):\n    if (a == 0):\n        return b\n    if (b == 0):\n        return a\n\n    if (a == b):\n        return a\n\n    if (a > b):\n        return gcf(a-b, b)\n    return gcf(a, b-a)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010162051815506945,
      "p_css": 0.00116563954118169,
      "p_html": 0.001793679675646696,
      "p_java": 0.000504197259228334,
      "p_javascript": 0.0005189686161752333,
      "p_matlab": 0.00991655774317598,
      "p_python": 0.9838755265714028,
      "p_sql": 0.0005782406593263662,
      "p_typescript": 0.0006309847523122896
    },
    {
      "text": "class Person:\n  def __init__(self, name, age, area):\n    self.name = name\n    self.age = age\n    self.area = area",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001406740427853864,
      "p_css": 0.0022544215897071355,
      "p_html": 0.016972951067705792,
      "p_java": 0.1777389104632777,
      "p_javascript": 1.6045450833289827e-07,
      "p_matlab": 3.0749400253330722e-06,
      "p_python": 0.800043117767405,
      "p_sql": 0.002770235096480605,
      "p_typescript": 7.645457810481132e-05
    },
    {
      "text": "import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Create\ndata = {'Size': [500], \n'Rooms': [4]}\n\ndf = pd.DataFrame(data)\n\n# Train\nX = df[['Size','Rooms']] \nY = df['Price'] \n\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0) \nregressor.fit(X, Y)\n\n# Predict\nregressor.predict([[500,4]]) # Predicted price: 1716.275",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.002139425290032982,
      "p_css": 0.7791191422113808,
      "p_html": 0.012211562346382482,
      "p_java": 0.00016567479556062718,
      "p_javascript": 0.00020205745098033801,
      "p_matlab": 0.0005982499638906942,
      "p_python": 0.19504944837620206,
      "p_sql": 0.0024782736318188603,
      "p_typescript": 0.008036165933751059
    },
    {
      "text": "import sys\n\ndef get_object_size(obj):\n    #Return the size of the object in bytes\n    return sys.getsizeof(obj)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008440053175974153,
      "p_css": 0.11708881926694373,
      "p_html": 0.006876535978527535,
      "p_java": 0.0005473581038514967,
      "p_javascript": 0.07609330320648697,
      "p_matlab": 0.0001425400957275197,
      "p_python": 0.4637032968677075,
      "p_sql": 0.008988038405463073,
      "p_typescript": 0.318120054899318
    },
    {
      "text": "def binary_to_string(b_string):\n s = \"\" \n for i in range(0, len(b_string), 8):\n byte = b_string[i: i + 8]\n s += chr(int(byte, 2))\n return s\n\nb_string = \"0100100001100101011011000110110001101111\"\nprint(binary_to_string(b_string))\n# Output: Hello",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002784219741207742,
      "p_css": 1.896176289592319e-06,
      "p_html": 5.347627303238401e-05,
      "p_java": 4.649869936039626e-06,
      "p_javascript": 8.781559803492915e-06,
      "p_matlab": 3.341934269081543e-07,
      "p_python": 0.9971407580091204,
      "p_sql": 5.657571729588758e-06,
      "p_typescript": 2.266054539867192e-07
    },
    {
      "text": "def findLongestIncreasingSubsequence(sequence): \n    n = len(sequence) \n  \n    # LIS[i] stores the length of the longest increasing \n    # subsequence upto index i \n    # Initialize the sequence as 1\n    LIS = [1 for i in range(n)] \n  \n    # Compute LIS values for all indexes  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if sequence[i] > sequence[j] and LIS[i]< LIS[j] + 1 : \n                LIS[i] = LIS[j]+1\n  \n    # Return  the maximum value \n    return max(LIS)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0014157673251789318,
      "p_css": 0.000964778509551892,
      "p_html": 0.004288520440549487,
      "p_java": 0.0001310611190422566,
      "p_javascript": 0.0013313835536376544,
      "p_matlab": 0.4478091642462433,
      "p_python": 0.4901131439835577,
      "p_sql": 0.002256405244377963,
      "p_typescript": 0.05168977557786076
    },
    {
      "text": "# import necessary libraries\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n \n# Load the data\niris = datasets.load_iris()\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(iris.data, \niris.target, random_state=0)\n \n# Initialize the model\nknn = KNeighborsClassifier(n_neighbors=1)\n \n# Train the model\nknn.fit(X_train, y_train)\n \n# Generate predictions\ny_pred = knn.predict(X_test)\n \n# Compute accuracy\naccuracy = knn.score(X_test, y_test)\n \n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.111969280483668,
      "p_css": 0.2583343877168786,
      "p_html": 0.04696582233971865,
      "p_java": 4.001167536966355e-05,
      "p_javascript": 0.0006661247934500473,
      "p_matlab": 0.00012360356159543524,
      "p_python": 0.5454435811090055,
      "p_sql": 0.00013988432232975816,
      "p_typescript": 0.036317303997984184
    },
    {
      "text": "def permutations(arr):\n    if len(arr) == 0:\n        return []\n\n    if len(arr) == 1:\n        return [arr]\n\n    l = []\n    for i in range(len(arr)):\n        m = arr[i]\n        remL = arr[:i] + arr[i+1:]\n        for p in permutations(remL):\n            l.append([m] + p)\n    return l\n\npermutations([1, 2, 3])",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.6191759092645476e-08,
      "p_css": 7.23111178927426e-08,
      "p_html": 3.404554880523818e-08,
      "p_java": 8.128999748841339e-09,
      "p_javascript": 4.702985048362043e-09,
      "p_matlab": 0.9950345831656985,
      "p_python": 0.0049652295555653305,
      "p_sql": 9.1446614702444e-09,
      "p_typescript": 2.2753664099299997e-08
    },
    {
      "text": "def find_sublists(my_list):\n # Initialize result \n res = [[]]  \n # Consider each element of the original list  \n for elements in my_list: \n  # Initialize temp \n  temp = []  \n  \n  # Store current element in temp \n  temp.append(elements) \n  \n  # For every element in the result, add the \n  # current element - temp \n  for r in res: \n   new_r = r + temp \n   res.append(new_r) \n   \n  # Print the result \n  for r in res: \n   print(r)          \n\n# Driver code \nmy_list = [1, 2, 3, 4] \n\nfind_sublists(my_list)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2188055813652728e-08,
      "p_css": 2.3255888336338953e-07,
      "p_html": 4.45072188065937e-08,
      "p_java": 3.440755270197842e-08,
      "p_javascript": 1.1889931351529248e-07,
      "p_matlab": 0.9999988554019421,
      "p_python": 5.0965807815961035e-08,
      "p_sql": 7.499716549057672e-09,
      "p_typescript": 6.435715092172012e-07
    },
    {
      "text": "def split_list(string_list):\n    mid = len(string_list) // 2\n    return string_list[:mid], string_list[mid:]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003482416062775324,
      "p_css": 0.01300363541413938,
      "p_html": 0.008891646937188451,
      "p_java": 0.0006120611781104478,
      "p_javascript": 0.0026013906859612412,
      "p_matlab": 0.0013147117631001426,
      "p_python": 0.9452261568400022,
      "p_sql": 0.019233057681132697,
      "p_typescript": 0.005634923437590204
    },
    {
      "text": "from flask import Flask, jsonify, request\nfrom flask_mysqldb import MySQL\n\napp = Flask(name)\n\n# Mysql configuration\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'password'\napp.config['MYSQL_DB'] = 'users'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'\n\nmysql = MySQL(app)\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n name = request.json['name']\n email = request.json['email']\n\n cur = mysql.connection.cursor()\n cur.execute(\"INSERT INTO users (name, email) VALUES (%s, %s)\", (name, email))\n mysql.connection.commit()\n cur.close()\n\n return jsonify({'message': 'User created'})\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users\")\n users = cur.fetchall()\n cur.close()\n\n return jsonify(users)\n\n@app.route('/users/int:id', methods=['GET'])\ndef get_user(id):\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users WHERE id=%s\", (id))\n user = cur.fetchone()\n cur.close()\n\n return jsonify(user)\n\nif name == \"main\":\n app.run(debug=True)",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.0010642048538120463,
      "p_css": 0.123912497874564,
      "p_html": 0.0014221738699419768,
      "p_java": 0.0007805747537742162,
      "p_javascript": 1.4382648309286066e-06,
      "p_matlab": 2.2558123276649357e-06,
      "p_python": 0.0006981178490104174,
      "p_sql": 0.8720553583285239,
      "p_typescript": 6.337839321500835e-05
    },
    {
      "text": "def base_conversion(n, from_base, to_base):\n    # convert from base-10 to from_base\n    rems = []\n    while n > 0:\n        rem = n % from_base\n        rems.append(rem)\n        n //= from_base\n\n    # convert from from_base to to_base\n    result = 0\n    for rem in rems[::-1]:\n        result *= from_base\n        result += rem \n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003253213789849029,
      "p_css": 0.07443147217136838,
      "p_html": 0.00788707032170146,
      "p_java": 0.0007177852768126887,
      "p_javascript": 0.006558193575525456,
      "p_matlab": 0.009589446530745425,
      "p_python": 0.8650763930219713,
      "p_sql": 0.00476709405495797,
      "p_typescript": 0.027719331257068325
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble  import RandomForestClassifier\n\n# read in the data\ndf = pd.read_csv('loan_data.csv')\n\n# split features and target\nX = df.drop(columns='default').values\ny = df['default'].values\n\n# split dataset into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# build the model\nmodel = RandomForestClassifier(n_estimators=500)\nmodel.fit(X_train, y_train)\n\n# predict\ny_pred = model.predict(X_test)\n\n# calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('Model accuracy is: ', accuracy)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.12095637944900182,
      "p_css": 0.18855073550878823,
      "p_html": 0.012973964102059643,
      "p_java": 2.1983081389486143e-05,
      "p_javascript": 0.00020158346374898287,
      "p_matlab": 5.893746547302864e-05,
      "p_python": 0.6719967298305786,
      "p_sql": 3.703460809987105e-05,
      "p_typescript": 0.0052026524908604915
    },
    {
      "text": "import requests\n\ndef http_request(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.text\n    else:\n        return None\n\nhttp_result = http_request('https://www.example.com/')",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.478020819470454e-22,
      "p_css": 7.789593270514647e-06,
      "p_html": 1.6074022058313126e-09,
      "p_java": 0.9999920748134026,
      "p_javascript": 2.8590934877772893e-11,
      "p_matlab": 6.296742066991405e-12,
      "p_python": 1.3248767181636947e-07,
      "p_sql": 1.4592117560779702e-09,
      "p_typescript": 4.1535717191567455e-12
    },
    {
      "text": "def descendingSort(nums):\n    # sort list in reverse order\n    nums.sort(reverse=True)\n    return nums\n\nprint(descendingSort([2, 4, 1, 6, 9, 8]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015318651055702508,
      "p_css": 0.0014540157628382371,
      "p_html": 0.00035409273766910215,
      "p_java": 1.3904423083472894e-05,
      "p_javascript": 0.00015200484288104333,
      "p_matlab": 2.1132572769182967e-05,
      "p_python": 0.9974655347514388,
      "p_sql": 0.0003410064398412688,
      "p_typescript": 4.512195892168801e-05
    },
    {
      "text": "elements = [\"A\", \"B\", \"C\", “D”] \nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nmydict = dict()\n\nfor i in range(len(elements)): # iterate through elements\n mydict[elements[i]] = numbers[i:i+3] # assign each element the next three numbers\n\nprint(mydict) \n# {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9], 'D': [7, 8, 9]}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.00021133906257312195,
      "p_css": 0.003949563001969064,
      "p_html": 0.0013650089175365875,
      "p_java": 0.004489456937628704,
      "p_javascript": 0.0009684346619868396,
      "p_matlab": 6.0225410718251435e-05,
      "p_python": 0.9880233883098394,
      "p_sql": 0.000403463801747786,
      "p_typescript": 0.0005291198960002632
    },
    {
      "text": "class Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def add(self, other):\n    self.x += other.x\n    self.y += other.y\n\n  def subtract(self, other):\n    self.x -= other.x\n    self.y -= other.y",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009447928007106552,
      "p_css": 0.01669456342665201,
      "p_html": 0.04648270651966348,
      "p_java": 0.00020720939773434733,
      "p_javascript": 0.0028933587045416698,
      "p_matlab": 1.5824049103385088e-05,
      "p_python": 0.8365125813551653,
      "p_sql": 0.09583292899541455,
      "p_typescript": 0.00041603475101472265
    },
    {
      "text": "import dash\nimport dash_cytoscape as cyto\nimport plotly.graph_objects as go\n\napp = dash.Dash(__name__)\n\n# create 3D line chart using Plotly\nx_values = [0,0.2,0.4,0.6,0.8,1] # just example values\ny_values = [0,0.5,1,2,1.5,3] # just example values\nz_values = [0,1,2,3,4,4] # just example values\n\ntrace1 = go.Scatter3d(x = x_values,\n y = y_values,\n z = z_values,\n mode = 'lines',\n line = dict(\n color = 'red',\n width = 5\n )\n)\n\nlayout= go.Layout(scene=dict(aspectmode='cube'))\n\n# create Dash Cytoscape component\ncyto_comp = cyto.Cytoscape(\n id='dash-cyto',\n elements=[],\n stylesheet=[],\n layout={'name': 'preset'}\n)\n\n# display elements\napp.layout = dash.Div([\n dash.Div([\n trace1\n ], style={'width': '50%'}),\n cyto_comp\n ])\n\nif __name__ == '__main__':\n app.run_server(debug=True)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 0.001992840546447794,
      "p_css": 0.011988830466626264,
      "p_html": 0.923765150674959,
      "p_java": 0.05725231555888215,
      "p_javascript": 6.662948873316534e-07,
      "p_matlab": 7.993511736075076e-05,
      "p_python": 0.0027613975685483023,
      "p_sql": 5.269725931913673e-05,
      "p_typescript": 0.002106166512969312
    },
    {
      "text": "def merge_sort(arr):\n \n if len(arr) > 1:\n \n mid = len(arr) // 2\n left = arr[:mid]\n right = arr[mid:]\n \n merge_sort(left)\n merge_sort(right)\n \n i = j = k = 0\n \n while i < len(left) and j < len(right):\n if left[i] < right[j]:\n arr[k] = left[i]\n i += 1\n else:\n arr[k] = right[j]\n j += 1\n k += 1\n \n while i < len(left):\n arr[k] = left[i]\n i += 1\n k += 1\n \n while j < len(right):\n arr[k] = right[j]\n j += 1\n k += 1\n \narr = [8, 4, 14, 1, 9]\n \nmerge_sort(arr)\n \nprint(arr) # prints [1, 4, 8, 9, 14]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004505433880117497,
      "p_css": 0.000982579173439674,
      "p_html": 0.0002323249518153749,
      "p_java": 3.692068672379353e-05,
      "p_javascript": 5.159340471457539e-05,
      "p_matlab": 0.23053599560203625,
      "p_python": 0.7672240110176933,
      "p_sql": 7.548755427098396e-05,
      "p_typescript": 0.00041054422129435675
    },
    {
      "text": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius \n \n    def area(self):\n        return 3.14 * self.radius * self.radius\n \n    def circumference(self):\n        return 2 * 3.14 * self.radius\n \n# Driver code \nc = Circle(2)\nprint('Area = ', c.area())\nprint('Circumference = ', c.circumference())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00011846076157813226,
      "p_css": 0.002032819665940868,
      "p_html": 0.006885956807728444,
      "p_java": 2.8913650784280973e-05,
      "p_javascript": 5.9547631191162506e-05,
      "p_matlab": 4.974967741207735e-06,
      "p_python": 0.983380601495143,
      "p_sql": 0.006998874191780761,
      "p_typescript": 0.0004898508281123386
    },
    {
      "text": "def sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4104394100785398e-15,
      "p_css": 7.210104916454194e-17,
      "p_html": 9.145585603828984e-17,
      "p_java": 4.1669386175910043e-16,
      "p_javascript": 1.172797574957096e-15,
      "p_matlab": 0.9999999999999951,
      "p_python": 5.3858170925279466e-18,
      "p_sql": 2.6876745468327157e-18,
      "p_typescript": 1.810560926344221e-15
    },
    {
      "text": "def merge_two_lists(list1, list2):\n return list1 + list2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.493716184263394e-05,
      "p_css": 0.001657314335794629,
      "p_html": 0.0004654495599492402,
      "p_java": 5.403063551080097e-05,
      "p_javascript": 0.00013209855125309833,
      "p_matlab": 2.7417410192007993e-05,
      "p_python": 0.9971677551741369,
      "p_sql": 0.00012296776493642093,
      "p_typescript": 0.00027802940638420694
    },
    {
      "text": "def find_substrings(string): \n  \n    # Create an empty list to store all the possible substrings\n    substrings = [] \n  \n    # Iterate through each character of the string\n    for i in range(len(string)): \n        for j in range(i, len(string)): \n            substrings.append(string[i: j + 1]) \n  \n    return substrings",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.6076120494714876e-10,
      "p_css": 4.880281465338521e-06,
      "p_html": 5.247201935271928e-06,
      "p_java": 0.9844784295131125,
      "p_javascript": 1.1381674184148507e-10,
      "p_matlab": 8.363473164286399e-06,
      "p_python": 0.014957579984155967,
      "p_sql": 0.0005318572396625535,
      "p_typescript": 1.3642031926082933e-05
    },
    {
      "text": "def currency_converter(input_currency, output_currency, exchange_rate):\namount = float(input('Enter the amount to convert: '))\ntotal_amount = amount * exchange_rate\n\nprint('{} {} = {} {}'.format(amount, input_currency, total_amount, output_currency))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.6364626915833477,
      "p_css": 0.12817147107862756,
      "p_html": 0.001105711276761745,
      "p_java": 0.00025192090028675583,
      "p_javascript": 0.06289725836708585,
      "p_matlab": 0.0005866595302945962,
      "p_python": 0.14668494569263968,
      "p_sql": 0.0013159218641138994,
      "p_typescript": 0.02252341970684222
    },
    {
      "text": "import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"I am happy.\", \"I am not happy.\", \"This is great!\"]\n\nanalyzer = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    scores = analyzer.polarity_scores(sentence)\n    print(f\"{sentence} : {scores}\")\n\n# Output: \n# I am happy. : {'neg': 0.0, 'neu': 0.357, 'pos': 0.643, 'compound': 0.6249}\n# I am not happy. : {'neg': 0.504, 'neu': 0.496, 'pos': 0.0, 'compound': -0.5859}\n# This is great! : {'neg': 0.0, 'neu': 0.312, 'pos': 0.688, 'compound': 0.6249}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.02825883843192131,
      "p_css": 0.11481158972998241,
      "p_html": 0.042117303831384914,
      "p_java": 0.003629459792057944,
      "p_javascript": 0.0010771312681818585,
      "p_matlab": 0.004277833653226515,
      "p_python": 0.751743910900542,
      "p_sql": 0.03544171834106364,
      "p_typescript": 0.01864221405163916
    },
    {
      "text": "def concat_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\nconcatenated_list = concat_lists(list_1, list_2)\nprint(concatenated_list) # [1, 2, 3, 4, 5, 6]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.9651910438358758e-08,
      "p_css": 2.4075395307951376e-07,
      "p_html": 1.2754006948979786e-07,
      "p_java": 1.2830396785801998e-08,
      "p_javascript": 4.019439964783666e-08,
      "p_matlab": 0.9999939371505449,
      "p_python": 5.519582412627033e-06,
      "p_sql": 1.5993913647617663e-15,
      "p_typescript": 9.22963114659691e-08
    },
    {
      "text": "def is_sorted(lst):\n # base case: if the list is empty then it is sorted\n if not lst:\n  return True\n # compare the first two element\n if lst[0] > lst[1]:\n  return False\n # recursively call the function with the remaining elements in the list\n return is_sorted(lst[1:])",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.00035475167489282115,
      "p_css": 0.0004880253235751884,
      "p_html": 0.002730562273211047,
      "p_java": 6.686268040574753e-05,
      "p_javascript": 0.5138558592899434,
      "p_matlab": 7.689277251204208e-05,
      "p_python": 0.46133557363577365,
      "p_sql": 0.002401622545786474,
      "p_typescript": 0.018689849803899608
    },
    {
      "text": "def cube_volume(side_length):\n    return side_length ** 3\n\nvolume = cube_volume(side_length)\nprint(f\"Volume of cube is {volume}\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005954285531212268,
      "p_css": 0.028118601722108155,
      "p_html": 0.017194420053536084,
      "p_java": 0.002837641958365377,
      "p_javascript": 0.022117533137160417,
      "p_matlab": 0.003029905277764754,
      "p_python": 0.893452033651647,
      "p_sql": 0.004959719949327934,
      "p_typescript": 0.022335858718878002
    },
    {
      "text": "import random \n\nmy_array = [random.randint(1, 100) for _ in range(100)]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010711467566631733,
      "p_css": 0.0001886172039693609,
      "p_html": 0.0007177742796860098,
      "p_java": 7.879967483992168e-06,
      "p_javascript": 0.00022551435567975356,
      "p_matlab": 0.23973072539395096,
      "p_python": 0.7428039140408034,
      "p_sql": 0.01514677185410548,
      "p_typescript": 0.00010765614765772699
    },
    {
      "text": "def find_sum_in_list(numbers_list, target_num):\n for num1 in numbers_list:\n for num2 in numbers_list:\n if num1 + num2 == target_num:\n return (num1, num2)\n\nfind_sum_in_list(numbers_list, target_num)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012995766357900718,
      "p_css": 0.005504131530502418,
      "p_html": 0.0025874527872988555,
      "p_java": 7.097077319395749e-05,
      "p_javascript": 0.0012779517450939837,
      "p_matlab": 0.048001355666490664,
      "p_python": 0.9375449817557603,
      "p_sql": 0.0018849756118400817,
      "p_typescript": 0.0018286034940298403
    },
    {
      "text": "def long_function(lst):\n    counter = 0\n    for i in lst:\n        counter += i\n    return counter",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000520319406092245,
      "p_css": 0.0020180366512501545,
      "p_html": 0.0033962295166130876,
      "p_java": 7.016488328180585e-05,
      "p_javascript": 0.00026305230444654426,
      "p_matlab": 0.0041503500926838325,
      "p_python": 0.9884065850319687,
      "p_sql": 0.0005118747238518123,
      "p_typescript": 0.0006633873898116823
    },
    {
      "text": "def gcd(num_1, num_2):\n  if num_2 == 0:\n    return num_1\n  return gcd(num_2, num_1 % num_2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.016047561775821395,
      "p_css": 0.030946677588209667,
      "p_html": 0.04061501254090741,
      "p_java": 0.005041492618433356,
      "p_javascript": 0.013124471112894538,
      "p_matlab": 0.33909403555307216,
      "p_python": 0.5245470882144722,
      "p_sql": 0.004497278719813101,
      "p_typescript": 0.026086381876376116
    },
    {
      "text": "def prime_factorize(x):\n if x == 1:\n return []\n i = 2\n prime_factors = []\n while x > 1:\n if x % i == 0:\n prime_factors.append(i)\n x= x / i\n else:\n i += 1\n return prime_factors\n\nprime_factorize(10) # Output: [2, 5]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00053797247615901,
      "p_css": 0.00047066706450565464,
      "p_html": 0.0004372779027211851,
      "p_java": 2.9872731526997717e-05,
      "p_javascript": 7.445923052061131e-05,
      "p_matlab": 0.9982489261098964,
      "p_python": 0.0001298940175062278,
      "p_sql": 2.450032379435826e-05,
      "p_typescript": 4.643014336986111e-05
    },
    {
      "text": "from xhtml2pdf import pisa\n \n# open the page\nwith open('input.html', 'r') as f:\n    html = f.read()\n \n# convert to PDF\npdf = pisa.CreatePDF(html, open('output.pdf', 'wb'))\n \n# print the result\nif not pdf.err:\n    print('PDF created successfully')\nelse:\n    print('Error creating PDF')",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.010423849179880438,
      "p_css": 0.003037075333354847,
      "p_html": 0.9610985559301937,
      "p_java": 5.40032015190473e-06,
      "p_javascript": 0.0003876079013128778,
      "p_matlab": 3.597308108887267e-05,
      "p_python": 0.00634805768067963,
      "p_sql": 8.278780514844788e-05,
      "p_typescript": 0.018580692768189525
    },
    {
      "text": "def is_palindrome(string): \n    left, right = 0, len(string) - 1\n \n    while right >= left: \n        if not string[left] == string[right]: \n            return False\n        left += 1\n        right -= 1\n    return True",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.748813595931606e-09,
      "p_css": 1.083013671596537e-05,
      "p_html": 9.707159000094688e-06,
      "p_java": 0.9868075783122537,
      "p_javascript": 3.8343178526127743e-11,
      "p_matlab": 3.260717996816813e-08,
      "p_python": 0.01299285272563701,
      "p_sql": 0.0001779745394631989,
      "p_typescript": 1.0227325934011672e-06
    },
    {
      "text": "import subprocess\n\ncommand = 'ls'\nprocess = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n\nfor line in process.stdout.splitlines():\n    print( line )",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9996283583039546,
      "p_css": 5.2657213961635905e-05,
      "p_html": 9.773381853925399e-05,
      "p_java": 1.0356423252585816e-06,
      "p_javascript": 6.947142798817395e-06,
      "p_matlab": 4.2010183407895716e-05,
      "p_python": 0.00013753047609899808,
      "p_sql": 5.098367253526728e-07,
      "p_typescript": 3.321738218816044e-05
    },
    {
      "text": "import random\nfor i in range(10):\n    print(random.randint(0, 9))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0391748703094457e-06,
      "p_css": 3.245551230787971e-07,
      "p_html": 3.0572093668526175e-06,
      "p_java": 7.2783942238338385e-09,
      "p_javascript": 4.3755594762359703e-08,
      "p_matlab": 0.014552671596954937,
      "p_python": 0.9854361629048412,
      "p_sql": 6.48353978555198e-06,
      "p_typescript": 2.0998506902922634e-07
    },
    {
      "text": "To estimate the relative performance of the JavaScript operation compared to the Python operation, we can use benchmarking or algorithmic analysis. Specifically, we can compare the running time complexity of the two algorithms. If one algorithm is more complex than the other, it will likely have greater relative performance overhead. To make the comparison more accurate, we can also consider the implementation of the algorithms, such as the data structure and language-specific optimization techniques used.",
      "y_true": "typescript",
      "pred_label": "typescript",
      "p_bash": 9.778005738950166e-12,
      "p_css": 3.8400132484404686e-13,
      "p_html": 2.9123181547298974e-10,
      "p_java": 1.0512119226903247e-12,
      "p_javascript": 6.968471783390201e-08,
      "p_matlab": 2.1931385241664838e-14,
      "p_python": 5.449266831533889e-12,
      "p_sql": 2.3964012803587407e-12,
      "p_typescript": 0.9999999300049696
    },
    {
      "text": "def selection_sort(array):\n    for i in range(len(array)):\n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(array)): \n            if array[min_idx] > array[j]: \n                min_idx = j \n\t\n        # Swap the found minimum element with  \n        # the first element         \n        array[i], array[min_idx] = array[min_idx], array[i] \n\n# Driver code to test above \narr = [3, 42, 1, 9, 20]\nselection_sort(arr)\nprint(\"Sorted Array: \", end=\"\\n\")  \nprint(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.0766092053824676e-05,
      "p_css": 1.9923180024980294e-06,
      "p_html": 4.787430470963048e-06,
      "p_java": 3.9859424794040035e-07,
      "p_javascript": 2.316935178073568e-06,
      "p_matlab": 0.9996013498623431,
      "p_python": 0.00030486767526446756,
      "p_sql": 1.8383783060263191e-07,
      "p_typescript": 5.3337254608445514e-05
    },
    {
      "text": "# To create a Django project, run the following command:\n$ django-admin startproject projectname\n\n# To create an app inside the project (e.g. accounts app):\n$ python manage.py startapp accounts\n```\n# In accounts/views.py\nfrom django.shortcuts import render\nfrom django.contrib.auth import authenticate, login\nfrom .forms import RegisterForm\n\ndef register_view(request):\n    if request.method == 'POST':\n        forms = RegisterForm(request.POST)\n        if forms.is_valid():\n            user = forms.save()\n            user.refresh_from_db()  # load the profile instance created by the signal\n            user.save()\n            raw_password = forms.cleaned_data.get('password1')\n            user = authenticate(username=user.username, password=raw_password)\n            login(request, user)\n            return redirect('index')\n    else:\n        forms = RegisterForm()\n    return render(request, 'accounts/register.html', {'forms': forms})\n```",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9999999820703563,
      "p_css": 1.5643324472991344e-08,
      "p_html": 5.519455198964256e-11,
      "p_java": 1.7797906227617139e-12,
      "p_javascript": 2.5290397328397256e-10,
      "p_matlab": 7.847396928769984e-11,
      "p_python": 8.834522216179384e-11,
      "p_sql": 2.4995595215029404e-11,
      "p_typescript": 1.784625915391068e-09
    },
    {
      "text": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef greet():\n    return \"Hello world!\"\n\nif __name__ == \"__main__\":\n    app.run()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.5946259316484246,
      "p_css": 0.03172214344335259,
      "p_html": 0.04196503972025141,
      "p_java": 6.559457088311054e-11,
      "p_javascript": 0.199167380827858,
      "p_matlab": 8.037244998731082e-05,
      "p_python": 0.11443196065737293,
      "p_sql": 0.017876969732100085,
      "p_typescript": 0.00013020145505863138
    },
    {
      "text": "print(\"Hello, World!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999734119020168,
      "p_css": 9.96764694856539e-10,
      "p_html": 8.203989019786867e-09,
      "p_java": 1.3871331484896268e-31,
      "p_javascript": 2.3140070270935628e-05,
      "p_matlab": 1.5029167266270406e-12,
      "p_python": 3.438768591603071e-06,
      "p_sql": 1.5910552505341453e-11,
      "p_typescript": 4.0953400341391626e-11
    },
    {
      "text": "def most_common_word(string):\n    string_list = string.split()\n    word_dict = {}\n    for word in string_list:\n        word_dict[word] = word_dict.get(word, 0) + 1\n    max_count = 0\n    most_common_word = None\n    for word, count in word_dict.items():\n        if count > max_count:\n            max_count = count\n            most_common_word = word\n    return most_common_word\n\nprint(most_common_word(string))\n# Output: the",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006764217765862446,
      "p_css": 0.018928506513093794,
      "p_html": 0.02482246250718679,
      "p_java": 0.02587207534430057,
      "p_javascript": 9.146753692943975e-06,
      "p_matlab": 0.0005080126364274956,
      "p_python": 0.9187592757052329,
      "p_sql": 0.009886816064750172,
      "p_typescript": 0.0005372826987291033
    },
    {
      "text": "if A > B:\n    print(\"A is greater than B\")\nelse:\n    print(\"B is greater than A\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.002689561665256033,
      "p_css": 0.06133614813940189,
      "p_html": 0.017080486032863017,
      "p_java": 0.004408665853094017,
      "p_javascript": 0.056768058289154225,
      "p_matlab": 0.3547217022577421,
      "p_python": 0.33305034448948917,
      "p_sql": 0.039965960979348805,
      "p_typescript": 0.12997907229365074
    },
    {
      "text": "def calculate_average(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return float(total) / len(numbers) if len(numbers) > 0 else 0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.55209575445947e-05,
      "p_css": 0.00028051650070058816,
      "p_html": 0.00021173009582979498,
      "p_java": 0.008705126754267474,
      "p_javascript": 0.0001349335084978048,
      "p_matlab": 1.3129244693417084e-07,
      "p_python": 0.9904862273476774,
      "p_sql": 6.973101585316829e-05,
      "p_typescript": 3.608252718236967e-05
    },
    {
      "text": "def anagramCheck(word1, word2):\n    # Removing whitespace characters\n    w1 = word1.replace(\" \", \"\")\n    w2 = word2.replace(\" \", \"\")\n    \n    # Check lengths\n    if len(w1) != len(w2):\n        return False\n    \n    # Convert to lowercase\n    w1 = w1.lower()\n    w2 = w2.lower()\n    \n    # Create dictionary to count frequency of each character\n    count_dict1 = dict()\n    count_dict2 = dict()\n    for ch in w1:\n        count_dict1[ch] = count_dict1.get(ch, 0) + 1\n    for ch in w2:\n        count_dict2[ch] = count_dict2.get(ch, 0) + 1\n    \n    # Check if character frequencies are equal\n    if count_dict1 != count_dict2:\n        return False        \n    return True\n\nword1 = 'rat'\nword2 = 'art'\nresult = anagramCheck(word1, word2)\nif result:\n    print('The words are anagrams.')\nelse:\n    print('The words are not anagrams.')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00020734334897993926,
      "p_css": 0.014298848107352019,
      "p_html": 0.0017415177419930134,
      "p_java": 1.8558252815220694e-05,
      "p_javascript": 0.0004980510658208123,
      "p_matlab": 0.0011281780671735912,
      "p_python": 0.9649697356519413,
      "p_sql": 0.010139051133081093,
      "p_typescript": 0.006998716630843047
    },
    {
      "text": "Create a Python program to implement a reinforcement learning agent that utilizes Q-learning for solving an environment with sparse rewards. The algorithm should keep the learning agent in a continuous loop of taking actions, observing rewards and updating the Q-value function to reach the outcome desired.",
      "y_true": "javascript",
      "pred_label": "bash",
      "p_bash": 0.46156103271755655,
      "p_css": 0.00012213745556968815,
      "p_html": 7.366567490234543e-05,
      "p_java": 2.672502945799944e-07,
      "p_javascript": 0.11681874730652086,
      "p_matlab": 0.00022617624183698877,
      "p_python": 1.392334350631471e-06,
      "p_sql": 3.9803812315701735e-05,
      "p_typescript": 0.4211567772066526
    },
    {
      "text": "# Constants for the game\nX = \"X\"\nO = \"O\"\nEMPTY = None\n\nclass NoughtsAndCrosses: \n def __init__(self):\n self.board = [[EMPTY, EMPTY, EMPTY],\n [EMPTY, EMPTY, EMPTY],\n [EMPTY, EMPTY, EMPTY]]\n \n # Player X goes first\n self.turn = X\n \n # Total number of moves played\n self.count = 0\n \n def move(self, row, col):\n # Validate move\n if self.board[row][col] != EMPTY:\n return\n \n # Apply move\n self.board[row][col] = self.turn\n \n # Update turn and move count\n if self.turn == X:\n self.turn = O\n else:\n self.turn = X\n self.count += 1\n \n def game_over(self):\n # Check for a draw\n if self.count == 9:\n return True\n \n # Check for a winner\n for i in range(0, 3):\n # Check Horizontal \n if self.board[i][0] == self.board[i][1] == self.board[i][2] != EMPTY:\n return True\n # Check Vertical \n if self.board[0][i] == self.board[1][i] == self.board[2][i] != EMPTY:\n return True\n # Check Diagonal\n if self.board[0][0] == self.board[1][1] == self.board[2][2] != EMPTY:\n return True\n if self.board[0][2] == self.board[1][1] == self.board[2][0] != EMPTY:\n return True\n \n return False\n \n # Print board\n def display_board(self):\n print('---' * 3)\n for row in self.board:\n print('|', end=\" \")\n for cell in row:\n if cell == EMPTY:\n print(' ', end=\" | \")\n elif cell == X:\n print('X', end=\" | \")\n else:\n print('O', end=\" | \")\n print('')\n print('---' * 3)\n\ngame = NoughtsAndCrosses()\n\n# Game loop\nwhile not game.game_over():\n game.display_board()\n row = int(input(\"Row: \"))\n col = int(input(\"Column: \"))\n game.move(row, col)\n\nprint(\"Game over!\")\ngame.display_board()",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.00017545703715339162,
      "p_css": 0.006857212450606053,
      "p_html": 0.013646027519399301,
      "p_java": 4.305517335726924e-06,
      "p_javascript": 2.8225436055937494e-05,
      "p_matlab": 8.160239305031852e-06,
      "p_python": 0.7251892807060156,
      "p_sql": 0.25402696660297164,
      "p_typescript": 6.436449115709782e-05
    },
    {
      "text": "import collections \n\ndef calculate_price(items): \n    items_dict = collections.Counter(items) \n    total_price = 0\n    # Iterate through each item\n    for item in items_dict: \n        price = items_dict[item] * prices[item] \n        total_price += price \n    # Return the total price\n    return total_price \n\n# Mapping of item and its price \nprices = { \n    'apple': 2, \n    'banana': 4, \n    'orange': 6\n    } \n# List of items to buy\nitems = ['apple', 'apple', 'orange', 'banana', 'apple'] \n\n# Calculate total price\nprice = calculate_price(items) \nprint(\"Total Price is\", price)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 6.762265308757927e-05,
      "p_css": 0.6114991086617202,
      "p_html": 0.0011521944643016302,
      "p_java": 1.3427332961200493e-05,
      "p_javascript": 0.0256952380373666,
      "p_matlab": 1.3509300610608863e-05,
      "p_python": 0.36119286703835196,
      "p_sql": 0.0002866741969959426,
      "p_typescript": 7.935831460430358e-05
    },
    {
      "text": "SELECT COUNT(mycolumn)\n    FROM mytable\n    WHERE mycolumn = 'myvalue'",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.01953558388044196,
      "p_css": 0.028589784579288523,
      "p_html": 0.012727002439784623,
      "p_java": 0.0008950165735633642,
      "p_javascript": 0.003392538850145791,
      "p_matlab": 0.0025085191475480734,
      "p_python": 0.2190426507901883,
      "p_sql": 0.7075579767851103,
      "p_typescript": 0.005750926953929081
    },
    {
      "text": "for i in range(10, 0, -1):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.9656415838442685e-12,
      "p_css": 9.24345959966392e-13,
      "p_html": 1.3906781818842273e-10,
      "p_java": 2.382126516031233e-13,
      "p_javascript": 1.6979731962244342e-13,
      "p_matlab": 0.9998352021961047,
      "p_python": 0.00016479765204655716,
      "p_sql": 3.2524040295583e-14,
      "p_typescript": 5.450371823541461e-12
    },
    {
      "text": "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    hashmap = {}\n    \n    for letter in str1:\n        if letter in hashmap:\n            hashmap[letter] += 1\n        else:\n            hashmap[letter] = 1\n    \n    for letter in str2:\n        if letter not in hashmap or hashmap[letter] == 0:\n            return False\n        else:\n            hashmap[letter] -= 1\n            \n    for key in hashmap:\n        if hashmap[key] != 0:\n            return False\n            \n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0018299857887435654,
      "p_css": 0.008407203106415743,
      "p_html": 0.0009788817946314282,
      "p_java": 0.00016333512255523408,
      "p_javascript": 0.011855616220576985,
      "p_matlab": 0.027114589382022606,
      "p_python": 0.9412380659734434,
      "p_sql": 0.006162918123933364,
      "p_typescript": 0.0022494044876775654
    },
    {
      "text": "def printSubstrings(s): \n    n = len(s) \n      \n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(s[i:j])\n  \n# Driver code \ns = \"Hello World\"\nprintSubstrings(s)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001573041108445698,
      "p_css": 9.961421013046562e-10,
      "p_html": 1.9386736449804337e-06,
      "p_java": 2.878262949544741e-17,
      "p_javascript": 1.9678577374366537e-06,
      "p_matlab": 0.021438791327058046,
      "p_python": 0.9769821978823905,
      "p_sql": 5.219978863370759e-07,
      "p_typescript": 1.5401566949120234e-06
    },
    {
      "text": "import hashlib\ndef encode_string_sha256(string):\n  return hashlib.sha256(string.encode('utf-8')).hexdigest()",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.482306891578693e-15,
      "p_css": 8.897376800100874e-08,
      "p_html": 2.308057789604587e-08,
      "p_java": 0.9999966093278606,
      "p_javascript": 8.503253764208887e-13,
      "p_matlab": 2.2611994024792217e-10,
      "p_python": 2.7899514669189747e-06,
      "p_sql": 4.851579583984949e-07,
      "p_typescript": 3.2813915848190632e-09
    },
    {
      "text": "from flask import Flask, jsonify, request\n\napp = Flask(name)\n\n@app.route('/api/customers/<int:id>', method=['GET'])\ndef get_customer(id):\n    # your code here\n    customer = Customer.query.filter_by(id=id).first()\n    if customer:\n        return jsonify({\n            'id': customer.id,\n            'name': customer.name,\n            'email': customer.email,\n            'address': customer.address\n        })\n    else:\n        return jsonify({'error': 'customer not found'}), 404\n\nif name == 'main':\n    app.run(debug=True)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.023135219210851193,
      "p_css": 0.8535750176234962,
      "p_html": 0.04852819483317254,
      "p_java": 0.04992471862947613,
      "p_javascript": 4.46286555589613e-05,
      "p_matlab": 1.5051737849468917e-05,
      "p_python": 0.020785922166521257,
      "p_sql": 0.0033310568460042395,
      "p_typescript": 0.0006601902970701056
    },
    {
      "text": "# Check to make sure the length of the phone number is 10\ndef check_phone_number(phone_number):\n    if len(phone_number) != 10:\n        return False\n\n    # Check to make sure all characters are digits\n    for c in phone_number:\n        if c < '0' or c > '9':\n            return False\n\n    # Phone number is valid\n    return True\n\n# Test the function\nprint(check_phone_number('8888881111')) # True",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.00018974510086001615,
      "p_css": 0.0012530820249392885,
      "p_html": 0.00029571329514729193,
      "p_java": 1.8267800082024253e-06,
      "p_javascript": 0.6081390195066569,
      "p_matlab": 2.8681756394017328e-05,
      "p_python": 0.3890629711407006,
      "p_sql": 0.0005861605449773571,
      "p_typescript": 0.0004427998503161888
    },
    {
      "text": "import datetime\ndate_string = input(\"Enter date in mm/dd/yyyy format:\")\ndate = datetime.datetime.strptime(date_string, \"%m/%d/%Y\")\nweekday = date.strftime(\"%A\")\nprint(\"The day for the date\",date_string,\"is\",weekday)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.044414201535760096,
      "p_css": 0.16084162897145696,
      "p_html": 0.012015807582194038,
      "p_java": 0.0005049721629607261,
      "p_javascript": 0.016396143318994298,
      "p_matlab": 0.007718393104761704,
      "p_python": 0.7338233605112239,
      "p_sql": 0.003230434078527797,
      "p_typescript": 0.02105505873412062
    },
    {
      "text": "def reverseArray(arr): \n    return arr[::-1] \n  \narr = [1,2,3,4,5] \nreverseArr = reverseArray(arr) \n  \nprint(\"Reversed array is\", reverseArr)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004789048504719592,
      "p_css": 0.002645271960802506,
      "p_html": 0.00032093011790378096,
      "p_java": 0.00017898699071437993,
      "p_javascript": 0.0005885098227687542,
      "p_matlab": 0.18715021764878106,
      "p_python": 0.8081283731310558,
      "p_sql": 4.384047682474074e-05,
      "p_typescript": 0.0004649650006769738
    },
    {
      "text": "def count_characters(string, character):\n    count = 0\n    for c in string:\n        if c == character:\n            count += 1\n    return count\n\ncount_characters(\"abracadabra\", 'a')  # 5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.103825348884656e-07,
      "p_css": 0.0025660471046549415,
      "p_html": 0.00036293451989886824,
      "p_java": 0.3476803112861711,
      "p_javascript": 8.659842827522743e-08,
      "p_matlab": 0.0006612030361604958,
      "p_python": 0.6450951179901403,
      "p_sql": 0.0034914583355847347,
      "p_typescript": 0.0001419307464264696
    },
    {
      "text": "def sort_names(names):\n    # sorted() returns an alphabetically sorted list\n    return sorted(names)\n\nunsorted_names = [\"John\", \"Jack\", \"Joan\", \"Adam\", \"Elena\", \"Mia\"]\n\nprint(sort_names(unsorted_names)) # ['Adam', 'Elena', 'Jack', 'Joan', 'John', 'Mia']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011096353658581531,
      "p_css": 0.143571559012762,
      "p_html": 0.04809734771664405,
      "p_java": 0.0005745686633150907,
      "p_javascript": 0.005529978959456828,
      "p_matlab": 0.0028823313657026957,
      "p_python": 0.7649405812902308,
      "p_sql": 0.008470152600520047,
      "p_typescript": 0.014837126732787058
    },
    {
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# =============================================================================\n#     FileName: api.py\n#         Desc: 2015-15/4/16:下午5:54\n#       Author: 苦咖啡\n#        Email: voilet@qq.com\n#     HomePage: http://blog.kukafei520.net\n#      History: \n# =============================================================================\n\nfrom django.shortcuts import render_to_response, HttpResponseRedirect, HttpResponse\nfrom django.template import RequestContext\nfrom django.contrib.auth.decorators import login_required\nimport commands, json, yaml\nfrom assets.models import Project\nfrom mysite.settings import auth_key\nfrom assets.models import Host, IDC\nimport hashlib, time\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.shortcuts import redirect\n# 登录\nfrom users.models import CustomUser\nfrom assets.models import project_swan\nfrom assets.ztree.service import ztree_tag\nfrom django.shortcuts import get_object_or_404\nfrom assets.models import Host, IDC, Service, Line, Project, HostRecord\nfrom cmdb_auth.models import AuthNode\n\n\n# songxs add\n@login_required\ndef ztree_project(request):\n    line_list = Line.objects.filter()\n    business = Project.objects.filter(line__isnull=False)\n    no_business = Project.objects.filter(line__isnull=True)\n    ztree_data = ztree_tag(request.user.username)\n\n    return render_to_response('default/default.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef ztree_business(request):\n    \"\"\"\n    树请求验证\n    :param request:\n    :return:\n    \"\"\"\n    business_name = request.GET.get(\"uuid\", False)\n    get_token = str(request.GET.get(\"token\", False))\n    ztree_data = ztree_tag(request.user.username)\n\n    try:\n        sum_token = str(hashlib.sha1(request.user.username + auth_key + business_name +\n                                     time.strftime('%Y-%m-%d', time.localtime(time.time()))).hexdigest())\n    except TypeError:\n        sum_token = False\n\n    if request.GET.get(\"options\") == \"host\":\n        uuid = request.GET.get('uuid', '')\n        ip = request.GET.get('ip', '')\n        if uuid:\n            host = get_object_or_404(Host, uuid=uuid)\n        elif ip:\n            host = get_object_or_404(Host, eth1=ip)\n        host_record = HostRecord.objects.filter(host=host).order_by('-time')\n        user_audit = AuthNode.objects.filter(node=host)\n        audit_count = user_audit.count()\n        return render_to_response('ztree/host_detail.html', locals(), context_instance=RequestContext(request))\n\n\n    content_status = True\n    idle = request.GET.get(\"idle\", False)\n\n    if get_token != sum_token:\n        content_status = False\n        return render_to_response('ztree/ztree_service.html', locals(), context_instance=RequestContext(request))\n\n    if business_name != u\"未分类\":\n        try:\n            bus_data = Project.objects.get(uuid=request.GET.get(\"uuid\"))\n            if not idle:\n                server_list = Host.objects.filter(business=bus_data, idle=True).order_by(\"create_time\")\n            else:\n                server_list = Host.objects.filter(business=bus_data, idle=False).order_by(\"create_time\")\n        except:\n            pass\n\n    else:\n        bus_data = u'未分类'\n        idc_data = IDC.objects.filter(type=1)\n        if not idle:\n            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=True).order_by(\"create_time\")\n        else:\n            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=False).order_by(\"create_time\")\n\n    if request.GET.get(\"options\") == \"swan_push\":\n        s = Ztree_class(business_name, request.user.first_name)\n        rst = s.swan()\n        rst_data = rst.get(\"swan_name\")\n        status = len(rst_data)\n        return render_to_response('ztree/swan.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"doc\":\n        data = Project.objects.get(pk=business_name)\n        # return render_to_response('ztree/swan.html', locals(), context_instance=RequestContext(request))\n        return render_to_response('markdown/index.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"highstate\":\n        project = Project.objects.get(uuid=business_name)\n        host_list = Host.objects.filter(business=project)\n        return render_to_response('ztree/highstate.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"monitor\":\n        return render_to_response('ztree/zabbix_count.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"salt\":\n        return render_to_response('ztree/saltstack.html', locals(), context_instance=RequestContext(request))\n\n\n    if request.GET.get(\"options\") == \"project\":\n        ip_list = []\n        server_list = {}\n        line_name = Line.objects.get(pk=business_name)\n        business_data = Project.objects.filter(line=business_name)\n\n        for i in business_data:\n            node = Host.objects.filter(business=i, idle=True)\n            for k in node:\n                if k.eth1 not in ip_list:\n                    ip_list.append(k.eth1)\n                    server_list[str(k.uuid)] = k.eth1\n        count = len(ip_list)\n        return render_to_response('ztree/project.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"types\":\n        get_env = request.GET.get(\"name\")\n        business_data = Project.objects.filter(pk=business_name)\n        server_list = Host.objects.filter(business=business_data, env=get_env).order_by(\"-create_time\")\n\n        count = server_list.count()\n        return render_to_response('ztree/ztree.html', locals(), context_instance=RequestContext(request))\n\n    if request.GET.get(\"options\") == \"service\":\n        s = []\n        bus_data = Project.objects.get(uuid=business_name)\n        server_list = Host.objects.filter(business=bus_data, idle=True).order_by(\"create_time\")\n\n        for i in server_list:\n            t = i.service.all()\n            for b in t:\n                if b not in s:\n                    s.append(b)\n\n        tag = request.GET.get(\"tgt\", False)\n\n        if tag:\n            service_all = Service.objects.get(name=tag)\n            server_list = Host.objects.filter(service=service_all, business=bus_data)\n\n        return render_to_response('ztree/ztree_service.html', locals(), context_instance=RequestContext(request))\n\n    count = server_list.count()\n    return render_to_response('ztree/ztree.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef CdnCache(request):\n    \"\"\"\n    树请求验证\n    :param request:\n    :return:\n    \"\"\"\n    service = request.GET.get(\"services\")\n    get_token = str(request.GET.get(\"token\"))\n    uuid = str(request.GET.get(\"uuid\"))\n\n    sum_token = str(hashlib.sha1(request.user.username + auth_key + service + time.strftime('%Y-%m-%d', time.localtime(\n            time.time()))).hexdigest())\n\n    content_status = True\n    if get_token != sum_token:\n        content_status = False\n\n    idc_data = IDC.objects.get(uuid=uuid)\n    service_all = Service.objects.get(name=service)\n    server_list = Host.objects.filter(idc=idc_data, service=service_all)\n    business_name = idc_data.name\n    service_tag = service\n\n    return render_to_response('ztree/service.html', locals(), context_instance=RequestContext(request))\n\n\n@login_required\ndef CdnIdc(request):\n    \"\"\"\n    树请求验证\n    :param request:\n    :return:\n    \"\"\"\n    get_token = str(request.GET.get(\"token\"))\n    uuid = str(request.GET.get(\"uuid\"))\n    idc_data = IDC.objects.get(uuid=uuid)\n\n    sum_token = str(hashlib.sha1(request.user.username + auth_key + idc_data.name + time.strftime('%Y-%m-%d',\n                                                                                                  time.localtime(\n                                                                                                          time.time()))).hexdigest())\n\n    content_status = True\n    if get_token != sum_token:\n        content_status = False\n\n    server_list = Host.objects.filter(idc=idc_data)\n    business_name = idc_data.name\n\n    return render_to_response('ztree/idc.html', locals(), context_instance=RequestContext(request))\n\n\nclass Ztree_class(object):\n    \"\"\"\n    ztree 类\n    \"\"\"\n\n    def __init__(self, project_name, user):\n        self.project_name = project_name\n        self.user = user\n\n    def monitor(self):\n        return True\n\n    def swan(self):\n        rst_data = {}\n\n        user_info = CustomUser.objects.get(first_name=self.user)\n\n        myform_rst = Project.objects.get(uuid=self.project_name)\n\n        rst = project_swan.objects.filter(project_name_id=myform_rst.uuid)\n\n        \"\"\"\n        所有当前项目发布名称放到一个list中\n        \"\"\"\n\n        swan_name_list = [i.swan_name for i in rst]\n        swan_push = user_info.project_swan_set.all()\n        user = CustomUser.objects.get(first_name=self.user)\n\n        if user.is_superuser:\n\n            for i in rst:\n                rst_data[str(i.uuid)] = i.swan_name\n\n        else:\n            swan_push = user_info.project_swan_set.all()\n            for i in swan_push:\n                if i.swan_name in swan_name_list:\n                    rst_data[str(i.uuid)] = i.swan_name\n\n        host_list = myform_rst.host_set.all()\n        content = {\"swan_name\": rst_data, \"host\": host_list}\n\n        return content\n\n    def highstate(self):\n        project = Project.objects.get(service_name=self.project_name)\n        # server_list = project.host_set\n        host_list = Host.objects.filter(business=project)\n\n        return True\n\n\n@csrf_exempt\ndef ZtreeIndex(request):\n    \"\"\"\n\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'POST':\n        otherParam = request.POST.get(\"otherParam\")\n        status = request.POST.get(\"status\")\n        line_id = request.POST.get(\"line_id\")\n\n        try:\n            name = request.POST.get(\"name\")\n            id = request.POST.get(\"id\")\n\n        except:\n            name = False\n\n        if not name:\n            ztree = ztree_tag(request.user.username)\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n\n        elif int(status[0]) == 1:\n            ztree = []\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n\n        else:\n            ztree = []\n            bus_data = Project.objects.get(service_name=name)\n            server_list = Host.objects.filter(business=bus_data).order_by(\"create_time\")\n\n            s = []\n            for i in server_list:\n                t = i.service.all().values()\n                for b in t:\n                    if b not in s:\n                        s.append(b)\n            tree_id = 0\n            for i in s:\n                tree_id += 1\n\n                token = hashlib.sha1(request.user.username + auth_key + i.get(\"name\") + time.strftime('%Y-%m-%d',\n                                                                                                      time.localtime(\n                                                                                                              time.time()))).hexdigest()\n\n                ztree.append({\"id\": tree_id, \"status\": 3, \"line_id\": line_id, \"name\": i.get(\"name\"), \"token\": token,\n                              \"t\": i.get(\"name\"), \"business\": bus_data.service_name})\n\n            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))\n    content = {\"status\": 403, \"message\": \"auth error\"}\n    return HttpResponse(json.dumps(content, ensure_ascii=False, indent=4))\n",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9200737502992833,
      "p_css": 0.07867746419970366,
      "p_html": 0.00019869188081459357,
      "p_java": 1.5812080899346867e-05,
      "p_javascript": 3.057715234467082e-05,
      "p_matlab": 9.274039767741564e-05,
      "p_python": 0.000624921230227088,
      "p_sql": 0.00025618602735408736,
      "p_typescript": 2.9856731695812575e-05
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup \n\ndef scrap_cnn():\n #make a request to CNN's homepage\n response = requests.get('https://cnn.com')\n\n # parse the html content\n soup = BeautifulSoup(response.text,'html.parser')\n \n # extract all the headline elements\n headlines = soup.find_all('h3', class_ = 'cd__headline')\n\n # scrape the text from the elements\n news_headlines = [headline.text for headline in headlines]\n \n # return the list of headlines\n return news_headlines\n\n\nif __name__ == \"__main__\":\n headlines = scrap_cnn()\n \n for headline in headlines:\n print(headline)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00014980104184096496,
      "p_css": 0.33460878282148143,
      "p_html": 0.6103764373806045,
      "p_java": 2.005156344289842e-05,
      "p_javascript": 0.004484192284433088,
      "p_matlab": 0.00011480268900332282,
      "p_python": 0.01633045045708006,
      "p_sql": 0.018868902868408,
      "p_typescript": 0.01504657889370569
    },
    {
      "text": "# code to display the result of a mathematical expression\n\nexpr = '(3 + 4) * 5'\n\n# Evaluate the expression\nresult = eval(expr)\n\n# Print the result\nprint(\"Result of the expression: \" + str(result))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00020223666844905057,
      "p_css": 0.006479627945978933,
      "p_html": 0.0006587559449685906,
      "p_java": 1.67412284778508e-05,
      "p_javascript": 0.023878094347055435,
      "p_matlab": 3.0046591004204507e-06,
      "p_python": 0.45669048958754854,
      "p_sql": 0.0027340094728200855,
      "p_typescript": 0.509337040145601
    },
    {
      "text": "import re\nimport nltk\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Preprocess the tweet\ndef preprocess(text):\n  text = text.lower() \n  text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n  tokens = nltk.word_tokenize(text)\n  tokens = [token for token in tokens if token not in stopwords.words('english')]\n  text = \" \".join(tokens)\n  return text\n\n# Create TF-IDF vectorizer\ntfidf_vectorizer = TfidfVectorizer()\n\n# Vectorize the sample tweet\nvectorized_text = tfidf_vectorizer.fit_transform(preprocess(tweet)).todense()\n\nfrom sklearn.cluster import KMeans\n\n# Create a cluster of tweets\nnumber_of_clusters = 3\nclusters = KMeans(n_clusters=number_of_clusters, random_state=0).fit(vectorized_text)\n\n# Print the cluster for the sample tweet\nprint(clusters.predict(vectorized_text))",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.010905872065205704,
      "p_css": 0.2114624066203791,
      "p_html": 0.004773667529398792,
      "p_java": 1.502938998969671e-05,
      "p_javascript": 0.0011119783043822427,
      "p_matlab": 0.0004602432828407617,
      "p_python": 0.6272974541599218,
      "p_sql": 0.1081438521647143,
      "p_typescript": 0.03582949648316768
    },
    {
      "text": "string = \"abcabc\"\n\n# To store unique substring\nlist_unique_substrings = []\n# Iterating through the length of string\nfor index_i in range(len(string)):\n    # Iterating through the range of index_i and string length\n    for index_j in range(index_i, len(string)):\n        # Slice the substring from index_i to index_j\n        substr = string[index_i: index_j + 1]\n        # check if substring is already in list\n        if substr not in list_unique_substrings:\n            list_unique_substrings.append(substr)\n\n# Print the list of unique substrings\nprint(list_unique_substrings)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.5886172365170066e-10,
      "p_css": 2.6831772503860423e-06,
      "p_html": 6.491842303937139e-07,
      "p_java": 0.9931574096009573,
      "p_javascript": 5.677308376409077e-09,
      "p_matlab": 0.000224672466597076,
      "p_python": 0.0034022187017046152,
      "p_sql": 0.002974345725428125,
      "p_typescript": 0.00023801530766190217
    },
    {
      "text": "import jsonrpclib\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/api\", methods=['POST'])\ndef handle():\n    # Decode and parse the request\n    req = jsonrpclib.loads(request.data)\n\n    # Call the correct method\n    method = req['method']\n    params = req['params']\n    result = globals()[method](*params)\n\n    # Encode and return the response\n    response = jsonrpclib.dumps({'result': result})\n    return response\n\ndef reduce(words):\n    return ''.join(words)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 3.932176563746298e-05,
      "p_css": 0.9561132284651607,
      "p_html": 0.0005667481435139216,
      "p_java": 0.0008701813715249434,
      "p_javascript": 0.0012469198053558033,
      "p_matlab": 2.4399851865765407e-08,
      "p_python": 0.013991922240751081,
      "p_sql": 0.027042211360090898,
      "p_typescript": 0.00012944244811338213
    },
    {
      "text": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.703703230280418e-08,
      "p_css": 6.747735962266248e-08,
      "p_html": 2.3995393034894098e-08,
      "p_java": 4.679856968559074e-09,
      "p_javascript": 7.797916446144237e-08,
      "p_matlab": 0.9993346972707106,
      "p_python": 0.0006631145532550117,
      "p_sql": 3.965256934520777e-09,
      "p_typescript": 1.9230419712837462e-06
    },
    {
      "text": "def isPalindrome(s):\n\n # remove whitespaces\n s = ''.join(s.split())\n\n # reverse string\n rev = s[::-1]\n\n # compare\n if rev == s:\n return True\n return False\n\nif isPalindrome(\"racecar\"):\n print('String is a palindrome')\nelse:\n print('String is not a palindrome')",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 4.6315114426308683e-07,
      "p_css": 0.0007401518001284692,
      "p_html": 0.0007470614521235366,
      "p_java": 0.8509131542026422,
      "p_javascript": 7.562276658377769e-08,
      "p_matlab": 5.916163534968714e-06,
      "p_python": 0.1019307140017937,
      "p_sql": 0.04562038015327141,
      "p_typescript": 4.2083452594706996e-05
    },
    {
      "text": "import random\nimport time\n\n# Create classes\nclass Player:\n    def __init__(self, name):\n        self.name = name\n        self.hp = 100\n        self.position = [0, 0]\n\nclass Enemy:\n    def __init__(self, name):\n        self.name = name\n        self.hp = random.randint(50, 100)\n\n# Initialize globals\nplayer = Player(input(\"What is your name? \"))\nenemies = []\ndone = False\n\n# Game loop\nwhile not done:\n    print(\"You are in room ({}, {})\".format(player.position[0], \n                                            player.position[1]))\n    print(\"1. Move\")\n    print(\"2. Check HP\")\n    print(\"3. Exit Game\")\n    action = int(input(\"What do you want to do? \"))\n\nif action == 1:\n    # Movement\n    x = int(input(\"Move how many units on the x-axis? \"))\n    y = int(input(\"Move how many units on the y-axis? \"))\n    player.position[0] += x\n    player.position[1] += y\n\nelif action == 2:\n    # Check HP\n    print(\"Your HP is {}\".format(player.hp))\n\nelif action == 3:\n    # Exit Game \n    done = True\n\n# Generate enemies randomly\nif random.random() < 0.1:\n    enemies.append(Enemy(\"Rat\"))\n    print(\"An enemy appeared!\")\n\n# Combat\nfor enemy in enemies:\n    print(\"A {} approaches!\".format(enemy.name))\n    print(\"What do you do? 1. Fight 2. Flee\")\n    action = int(input(\">\"))\n\n    if action == 1:\n        fight(player, enemy)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.008428920247513749,
      "p_css": 0.026003784214977895,
      "p_html": 0.004940057682024046,
      "p_java": 0.7912145181369612,
      "p_javascript": 1.2273408523453949e-06,
      "p_matlab": 4.199916449497112e-07,
      "p_python": 0.13743571820907682,
      "p_sql": 0.030911108771106692,
      "p_typescript": 0.001064245405842182
    },
    {
      "text": "def powersOfTwo(n):\n    powers = []\n    for i in range(n + 1):\n        powers.append(2**i)\n    return powers\n\nn = 8\nprint(powersOfTwo(n))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0002409279899024816,
      "p_css": 0.0002780706363647356,
      "p_html": 0.001016421167660237,
      "p_java": 3.5736976271240686e-05,
      "p_javascript": 6.664447835137492e-05,
      "p_matlab": 0.7628890734607169,
      "p_python": 0.23488907972362158,
      "p_sql": 0.0002866009198718407,
      "p_typescript": 0.00029744464723947085
    },
    {
      "text": "def binary_search(arr, num):\n    # define start and end point\n    start = 0 \n    end = len(arr)-1\n\n    while start <= end:\n        mid = (start + end)//2\n\n        # check if num is present at mid \n        if arr[mid] == num: \n            return mid \n\n        # If num is greater, ignore left half \n        elif arr[mid] < num: \n            start = mid + 1\n\n        # If num is smaller, ignore right half \n        else: \n            end = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.994330095365586e-06,
      "p_css": 1.0466606794221025e-07,
      "p_html": 5.851750996048449e-06,
      "p_java": 8.629467509127016e-07,
      "p_javascript": 2.4119996035805054e-06,
      "p_matlab": 0.9857434385184615,
      "p_python": 0.014220694304327342,
      "p_sql": 3.3167620586011668e-06,
      "p_typescript": 1.9324721638723692e-05
    },
    {
      "text": "class Calculator:\n    def __init__(self):\n        pass\n    \n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        else:\n            return a/b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0025424274520789623,
      "p_css": 0.0006510245572295836,
      "p_html": 0.0002620766772720953,
      "p_java": 2.5002128336542997e-05,
      "p_javascript": 2.2888983758529162e-05,
      "p_matlab": 2.1799932674107893e-07,
      "p_python": 0.9925521164100438,
      "p_sql": 0.0039006731696379668,
      "p_typescript": 4.3572622315684785e-05
    },
    {
      "text": "import re\n\nurl_pattern = re.compile(\n    r'^(?:http|ftp)s?://' # http:// or https://\n    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n    r'localhost|' #localhost...\n    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n    r'(?::\\d+)?' # optional port\n    r'(?:/?|[/?]\\S+)$', re.IGNORECASE)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.05253915828235563,
      "p_css": 0.015492402662150496,
      "p_html": 0.4585911496417222,
      "p_java": 0.0006221014374444856,
      "p_javascript": 0.0067907816533840735,
      "p_matlab": 0.0016997972280705736,
      "p_python": 0.44229189004233305,
      "p_sql": 0.0011166318803587012,
      "p_typescript": 0.020856087172180886
    },
    {
      "text": "import flask\nfrom flask import jsonify, request\n\n#creating a Flask app\napp = flask.Flask(__name__)\n\n#creating an array of courses\ncourses = [\n    {   \"id\":1, \"topic\":\"Web Development\", \"language\":\"Python\",\"price\":50},\n    {   \"id\":2, \"topic\":\"AI & ML\", \"language\":\"R\",\"price\":150},\n    {   \"id\":3, \"topic\":\"Data Science\", \"language\":\"Python\",\"price\":100},\n    {   \"id\":4, \"topic\":\"Machine Learning\", \"language\":\"Python\",\"price\":200}\n]\n\n#creating a search API\n@app.route(\"/search/\", methods=[\"GET\"])\ndef search():\n    #returning all courses\n    if request.args:\n        data = []\n        topic = request.args.get('topic')\n        language = request.args.get('language')\n        price_range = request.args.get('price')\n        for course in courses:\n            if topic == course['topic'] and language == course['language'] and (int(price_range) >= int(course['price'])):\n                data.append(course)\n        return jsonify({\"data\": data})\n    else:\n        return jsonify({\"data\": courses})\n\n#running the API\nif __name__ == \"__main__\":\n    app.run()",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00034132754886214496,
      "p_css": 0.9609473815613333,
      "p_html": 0.005360551780878966,
      "p_java": 0.0007931591782632921,
      "p_javascript": 0.00010508517988153508,
      "p_matlab": 4.017603192908535e-06,
      "p_python": 0.0018287442474463167,
      "p_sql": 0.0002456319616660242,
      "p_typescript": 0.030374100938475472
    },
    {
      "text": "def dec_to_bin(num):\n    binary = \"\"\n    while num > 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    return binary",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.3809622193001259e-05,
      "p_css": 5.071174811901672e-08,
      "p_html": 5.40926595961215e-05,
      "p_java": 5.169439096470512e-06,
      "p_javascript": 1.520404312296428e-05,
      "p_matlab": 0.9876232297910938,
      "p_python": 0.012253000202809762,
      "p_sql": 1.4248090439135356e-05,
      "p_typescript": 2.1195439900554913e-05
    },
    {
      "text": "def filter_numeric(input_list): \n    \n    num_list = [] \n  \n    for item in input_list:\n        if type(item) == int or type(item) == float: \n            num_list.append(item) \n   \n    return num_list \n  \ninput_list = [4, 2, 1, 15.6, 'p', 'y', 5.8] \nprint(filter_numeric(input_list)) \n#Output: [4, 2, 1, 15.6, 5.8]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.025831169211132533,
      "p_css": 0.0961128090172675,
      "p_html": 0.24601181054713792,
      "p_java": 0.008385636559516926,
      "p_javascript": 0.07134234726661527,
      "p_matlab": 0.002055951010024712,
      "p_python": 0.5496963764096474,
      "p_sql": 0.0003478140016364326,
      "p_typescript": 0.00021608597702120307
    },
    {
      "text": "def triangle_area(A, B, C): \n    return abs((A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0) \n  \n# Driver Code \nA = (2, 0) \nB = (-2, 0) \nC = (0, 4) \n  \nprint(\"Area of Triangle is\", triangle_area(A, B, C))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0022751242068007565,
      "p_css": 0.011330340885023972,
      "p_html": 0.005303305197753698,
      "p_java": 0.007579809497915275,
      "p_javascript": 0.02355782556011827,
      "p_matlab": 8.38091461850303e-05,
      "p_python": 0.8540496597440143,
      "p_sql": 0.004361341699060755,
      "p_typescript": 0.0914587840631281
    },
    {
      "text": "# Program to print the squares of all \n# the numbers from 1 to the given number \n  \n# Positive number taken as an input \nnum = 5\n  \n# Iterate from 1 to num \nfor i in range(1, num+1): \n  \n    # Calculate the square \n    value = i**2\n      \n    # Print the value \n    print(value)\n\n# Output:\n# 1\n# 4\n# 9\n# 16\n# 25",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0010346381904540129,
      "p_css": 5.711657052634762e-06,
      "p_html": 4.546140731387977e-05,
      "p_java": 1.2422334780039396e-07,
      "p_javascript": 0.022073928841721074,
      "p_matlab": 0.9728818262744853,
      "p_python": 9.061924049100778e-06,
      "p_sql": 8.697342441534901e-06,
      "p_typescript": 0.003940550139134582
    },
    {
      "text": "def factorial(n):\n  if n <= 1:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nprint(factorial(5)) # 120",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.287172337316154e-05,
      "p_css": 0.0001881700615639214,
      "p_html": 7.812266996712142e-05,
      "p_java": 2.6971381796844124e-06,
      "p_javascript": 5.742937956081616e-05,
      "p_matlab": 2.7273884302655253e-05,
      "p_python": 0.9995097845882682,
      "p_sql": 4.6581101841926826e-05,
      "p_typescript": 2.7069452942537394e-05
    },
    {
      "text": "def is_substring(s1, s2):\n # check for empty strings \n if s1 == '' or s2 == '':\n return False\n \n # check if s2 is a substring of s1\n if s1.find(s2) > -1:\n return True\n \n return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004959329644608906,
      "p_css": 0.00271762587485962,
      "p_html": 0.0023417594709212153,
      "p_java": 5.085216316102859e-05,
      "p_javascript": 0.0011124754455991367,
      "p_matlab": 0.0004598310459350655,
      "p_python": 0.9913679931369913,
      "p_sql": 0.0005335929130388996,
      "p_typescript": 0.0009199369850330454
    },
    {
      "text": "from org.myrobotlab.service import Arduino\nfrom org.myrobotlab.service import Servo\n\n# Create serial connection to Arduino\narduino = Arduino(\"Arduino1\", \"COM6\") # COM6 is the serial port\n\n# Connect servos to arduino \nbaseServo = Servo(arduino, \"baseServo\")\narmServo = Servo(arduino, \"armServo\")\n\n# Move servos\nbaseServo.moveTo(90)\narmServo.moveTo(180)\n\n# Move to a specific point\nbaseServo.moveTo(10)\narmServo.moveTo(20)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.22578484872424395,
      "p_css": 0.14328911602850913,
      "p_html": 0.032667635369442415,
      "p_java": 0.0004096506269169048,
      "p_javascript": 0.058115648120917324,
      "p_matlab": 0.015893781374253606,
      "p_python": 0.31969584414774666,
      "p_sql": 0.02400923832556676,
      "p_typescript": 0.18013423728240321
    },
    {
      "text": "def levenshtein_distance(s1, s2):\n    n = len(s1)\n    m = len(s2)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            cost = 0 if s1[i - 1] == s2[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, \n                            dp[i][j - 1] + 1, \n                            dp[i - 1][j - 1] + cost)\n    return dp[-1][-1]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.6731125912476025e-05,
      "p_css": 6.35294025487158e-06,
      "p_html": 0.00011927888985585703,
      "p_java": 3.190927451229904e-06,
      "p_javascript": 2.7573774551244216e-06,
      "p_matlab": 0.6709131274955191,
      "p_python": 0.3278706322068073,
      "p_sql": 0.0010220754052873125,
      "p_typescript": 3.585363145661618e-05
    },
    {
      "text": "def sum_of_divisors(n): \n    divisors = [i for i in range(1,n+1) if n%i == 0] \n    return sum(divisors) \n  \nn = 24\nprint(\"Sum of the positive divisors of 24 is:\",sum_of_divisors(n))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.002446963404578457,
      "p_css": 0.0020746433146551866,
      "p_html": 0.022035370797329926,
      "p_java": 0.11190087667704765,
      "p_javascript": 0.03112444797699983,
      "p_matlab": 0.49019655416599506,
      "p_python": 0.260809240330872,
      "p_sql": 0.006800415356567207,
      "p_typescript": 0.0726114879759547
    },
    {
      "text": "def is_in_range(n, lower, upper):\n    return lower <= n <= upper",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002440111509645928,
      "p_css": 0.007355501571981467,
      "p_html": 0.008711630554595649,
      "p_java": 0.0005564611666161402,
      "p_javascript": 0.001944662312997844,
      "p_matlab": 0.0007690892831718813,
      "p_python": 0.972920472023909,
      "p_sql": 0.0017669105224735354,
      "p_typescript": 0.00353516105460859
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# Specify a list of keywords\nkeywords = [\"web crawler\", \"python\", \"programming\"]\n\n# Loop through the list of keywords\nfor keyword in keywords:\n    page = requests.get(f\"https://www.google.com/search?q={keyword}\")\n\n    # Parse the response using BeautifulSoup\n    soup = BeautifulSoup(page.content, 'html.parser')\n\n    # Search for the given keyword\n    result_div = soup.find_all('div', attrs = {'class': 'g'}) \n\n    # Print the results\n    for item in result_div:\n        title = item.find(\"h3\").text\n        link = item.find(\"a\").get(\"href\")\n\n        print(f\"Title: {title}\")\n        print(f\"Link: {link}\")\n        print()",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 8.753705074896413e-10,
      "p_css": 0.013855785610537436,
      "p_html": 0.9218483195836618,
      "p_java": 0.000240761922002651,
      "p_javascript": 0.006993178046445093,
      "p_matlab": 4.266764928326307e-06,
      "p_python": 5.106617839466476e-05,
      "p_sql": 8.43089210610696e-05,
      "p_typescript": 0.05692231209759842
    },
    {
      "text": "import random\n\nrandom_number = random.uniform(1, 2)\nprint(random_number)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0025181977046415936,
      "p_css": 0.0054085821382799885,
      "p_html": 0.0030408165821930095,
      "p_java": 7.70700220907171e-05,
      "p_javascript": 0.0006715496311865884,
      "p_matlab": 0.00016165576947867763,
      "p_python": 0.9507377742251784,
      "p_sql": 0.036364227194291415,
      "p_typescript": 0.0010201267326595885
    },
    {
      "text": "def insert_element(list, index, element):\n    list.insert(index + 1, element)\n    return list",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 0.0033794718977745593,
      "p_css": 0.0004960582101618241,
      "p_html": 0.005604029251392638,
      "p_java": 0.00023502207064105912,
      "p_javascript": 0.002945880557477243,
      "p_matlab": 0.8208100622384135,
      "p_python": 0.1644141592894619,
      "p_sql": 0.0003588047578641217,
      "p_typescript": 0.0017565117268134227
    },
    {
      "text": "def find_common_elements(lst1, lst2):\n    result = []\n    set_2 = set(lst2)\n    for elem1 in lst1:\n        if elem1 in set_2:\n            result.append(elem1)\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0037273448500964577,
      "p_css": 0.057336642689976534,
      "p_html": 0.007408407733884163,
      "p_java": 0.0005135016420210704,
      "p_javascript": 0.0033798238988713156,
      "p_matlab": 0.10323394300968017,
      "p_python": 0.8112241377625221,
      "p_sql": 0.0066843334883195295,
      "p_typescript": 0.006491864924628718
    },
    {
      "text": "from collections import defaultdict\n\ntext = 'The quick brown fox jumps over the lazy dog. The fox barked at the dog.'\n\nwords = defaultdict(int)\n\n for word in text.split():\n  if len(word) >= 3:\n   words[word] += 1\n\nprint(words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.08364927221834897,
      "p_css": 0.028885913137483163,
      "p_html": 0.0058050303283827,
      "p_java": 0.0002598794304183256,
      "p_javascript": 0.0018988394849965818,
      "p_matlab": 3.459320967454691e-05,
      "p_python": 0.8225593045877704,
      "p_sql": 0.04120274045450069,
      "p_typescript": 0.01570442714842472
    },
    {
      "text": "def quick_sort(array):\n    if len(array) <= 1:\n        return array\n\n    pivot = array[0]\n    left = []\n    right = []\n\n    for element in array[1:]:\n        if element <= pivot:\n            left.append(element)\n        else:\n            right.append(element)\n\n    return quick_sort(left) + [pivot] + quick_sort(right)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.928577446398967e-09,
      "p_css": 1.2984282183161977e-09,
      "p_html": 7.860782135824755e-10,
      "p_java": 1.5018857703650066e-10,
      "p_javascript": 1.9188942766291447e-10,
      "p_matlab": 0.9999999909964657,
      "p_python": 6.102362053541149e-11,
      "p_sql": 5.70508825430885e-12,
      "p_typescript": 5.816438237898718e-10
    },
    {
      "text": "# Import the necessary libraries\nimport json \nfrom collections import OrderedDict \nimport pandas as pd\n\n# Load the data \nwith open('collection1.json') as json_file:\n    collection1 = json.load(json_file)\n\nwith open('collection2.json') as json_file:\n    collection2 = json.load(json_file)\n\n# Create a DataFrame from both collections\ndf1 = pd.DataFrame(collection1)\ndf2 = pd.DataFrame(collection2)\n\n# Calculate the probability of matching items\nmatch_probs = {}\n\nfor item1 in df1.item.unique():\n    for item2 in df2.item.unique():\n        item1_obs = df1.loc[df1['item'] == item1]\n        item2_obs = df2.loc[df2['item'] == item2]\n        match_prob = (len(item1_obs) * len(item2_obs)) / (len(df1) * len(df2))\n        match_probs[(item1,item2)] = match_prob\n\n# Print the results\nmatch_probs = OrderedDict(sorted(match_probs.items(), key=lambda x: x[1], reverse=True))\nprint(match_probs)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0005518168802428323,
      "p_css": 0.9298061803846086,
      "p_html": 0.00079843778004317,
      "p_java": 4.357583243933888e-07,
      "p_javascript": 0.00017416538748341078,
      "p_matlab": 4.5302517658503405e-06,
      "p_python": 0.061311320191117145,
      "p_sql": 6.269757597328277e-05,
      "p_typescript": 0.007290415790441344
    },
    {
      "text": "def is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1 + str1\n\n# testing\nprint(is_rotation('hello', 'lohel'))  # prints True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.010253223856520804,
      "p_css": 0.0009392060558339798,
      "p_html": 5.610991486955906e-06,
      "p_java": 7.307238742865334e-07,
      "p_javascript": 0.20887404587724742,
      "p_matlab": 7.614104263371739e-05,
      "p_python": 0.7752698870451379,
      "p_sql": 0.0027017719196390007,
      "p_typescript": 0.001879382487625726
    },
    {
      "text": "def find_largest_two(input_array):\n    largest1, largest2 = -float(\"inf\"), -float(\"inf\")\n    if len(input_array)<2:\n        return\n    for el in input_array:\n        if el > largest1:\n            largest2 = largest1\n            largest1 = el\n        elif el > largest2:\n            largest2 = el\n    return largest1,largest2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011780804114487375,
      "p_css": 0.02625243292068593,
      "p_html": 0.007788556830918659,
      "p_java": 0.0007158409421409461,
      "p_javascript": 0.0025080395837022767,
      "p_matlab": 0.026496317588285984,
      "p_python": 0.9137953317128169,
      "p_sql": 0.004908992707536906,
      "p_typescript": 0.005753683599424909
    },
    {
      "text": "string1 = \"Hello\"\nstring2 = \"World\"\n\nconcatenatedString = string1 + string2\n\nprint(concatenatedString) # \"HelloWorld\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.14119064151031901,
      "p_css": 0.0032634927041347837,
      "p_html": 0.0080095932566496,
      "p_java": 1.6597523745085227e-08,
      "p_javascript": 0.049667323116526,
      "p_matlab": 0.000397401040126133,
      "p_python": 0.794400040226647,
      "p_sql": 0.0009201142752727896,
      "p_typescript": 0.002151377272801005
    },
    {
      "text": "def countCharacters(string): \n    # Create dictionary to return  \n    # count of each character \n    str_dict = {} \n  \n    # Count frequency of each \n    # character of the string \n    for i in string: \n        if i in str_dict: \n            str_dict[i] += 1\n        else: \n            str_dict[i] = 1\n  \n    return str_dict \n\n# Driver code \nstring = \"String Counting\"\n\n# Print result \nprint(countCharacters(string))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 7.660883434189346e-17,
      "p_css": 2.1626591067823494e-08,
      "p_html": 2.442301135063556e-10,
      "p_java": 0.9999946359205331,
      "p_javascript": 8.190731793176138e-17,
      "p_matlab": 3.9237987141086223e-13,
      "p_python": 3.6605513717359836e-06,
      "p_sql": 1.6758024224425485e-06,
      "p_typescript": 5.854458999855877e-09
    },
    {
      "text": "def reverse_array(arr):\n    return arr[::-1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00018764107703423658,
      "p_css": 0.0011453120463082382,
      "p_html": 0.00022144022327544546,
      "p_java": 7.48911265115973e-05,
      "p_javascript": 0.00011559648347594524,
      "p_matlab": 0.019919328413906125,
      "p_python": 0.9780683147912096,
      "p_sql": 2.124182895352122e-05,
      "p_typescript": 0.00024623400932541074
    },
    {
      "text": "lastTwoElements = [1, 2, 3, 4, 5][-2:]\n\nprint(lastTwoElements)\n#Output: [4, 5]",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8026236146074905,
      "p_css": 0.0008397749900409352,
      "p_html": 0.0005062829531843107,
      "p_java": 1.291344181867039e-08,
      "p_javascript": 1.1834082335103283e-06,
      "p_matlab": 8.397797041716557e-10,
      "p_python": 0.19602821362538622,
      "p_sql": 9.166516547547818e-07,
      "p_typescript": 1.078817363680664e-11
    },
    {
      "text": "def letterToNumber(input_string):\n    result_string = \"\"\n    for letter in input_string:\n        result_string += str(ord(letter)-64)\n    return result_string\n\ninput_string  = \"Data Science\"\nsubstituted_string = letterToNumber(input_string)\nprint(\"Substituted string : \",substituted_string)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.365839328242966e-05,
      "p_css": 0.006502476187611736,
      "p_html": 0.006052958442870374,
      "p_java": 0.009339937014429625,
      "p_javascript": 0.00010560701612779038,
      "p_matlab": 0.0007829454460255195,
      "p_python": 0.9694261071873038,
      "p_sql": 0.006267953756441416,
      "p_typescript": 0.0014583565559073378
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n \n# Target page\nurl = 'https://example.com/products.html'\n \n# Get page content\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n \n# Scrape product details\nitems = soup.find_all(class_='item')\n \nfor item in items:\n # Title\n title = item.find(class_='title').get_text()\n \n # Price\n price = item.find(class_='price').get_text()\n \n # Description\n description = item.find(class_='description').get_text()\n \n # Image URL\n image_url = item.find('img', src=True)['src']\n \n # Print details\n print(title)\n print(price)\n print(description)\n print(image_url)\n print('\\n')",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.1316383521883293e-10,
      "p_css": 0.6978659584736865,
      "p_html": 0.30198436709819965,
      "p_java": 7.150456206546965e-05,
      "p_javascript": 5.687113314219364e-06,
      "p_matlab": 7.790707519315719e-09,
      "p_python": 7.156963451101342e-05,
      "p_sql": 8.679639964122804e-07,
      "p_typescript": 3.7250355356432195e-08
    },
    {
      "text": "from sklearn.cluster import KMeans\n\n# create KMeans object\nkmeans = KMeans(n_clusters=3)\n\n# fit the data\nkmeans.fit(data)\n\n# predict the clusters\npredicted_clusters = kmeans.predict(data)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03436610196033344,
      "p_css": 0.17041747205585148,
      "p_html": 0.02807264209447994,
      "p_java": 0.0003094438255608762,
      "p_javascript": 0.004413868942946582,
      "p_matlab": 0.001055066497841865,
      "p_python": 0.5157431673578172,
      "p_sql": 0.00026559223926231465,
      "p_typescript": 0.24535664502590637
    },
    {
      "text": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n# First Fibonacci number is 0 \n   elif n==1: \n      return 0\n# Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Input number of terms in the Fibonacci sequence\nnterms = 10\n\n# Check if the input number is valid\nif nterms <= 0:\n   print(\"Incorrect input\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(Fibonacci(i))\n       \n# This can be used to solve the Fibonacci Sequence puzzle\n# The puzzle is -\n# Given a number n, find the nth Fibonacci number\n# That can be easily done using the above code",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001275755012784568,
      "p_css": 7.946313147141952e-05,
      "p_html": 0.00010032565673859405,
      "p_java": 5.897526582919305e-06,
      "p_javascript": 0.012632793805329626,
      "p_matlab": 4.577659991922937e-05,
      "p_python": 0.6189830512038209,
      "p_sql": 0.00015244704177506656,
      "p_typescript": 0.36787266953308373
    },
    {
      "text": "list = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\n\nd = dict(list)\n\nprint(d)\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.026524928532700394,
      "p_css": 0.07480408174419366,
      "p_html": 0.023832227095625755,
      "p_java": 0.0001629995982535313,
      "p_javascript": 0.003497238318294518,
      "p_matlab": 0.0027642525566971394,
      "p_python": 0.8563867586724317,
      "p_sql": 0.011906780251529463,
      "p_typescript": 0.00012073323027375397
    },
    {
      "text": "def longestConsecutive(string):\n max_consecutive = \"\"\n current_consecutive = \"\"\n\n for char in string:\n if current_consecutive == \"\" or current_consecutive[-1] == char:\n current_consecutive += char\n else:\n if len(current_consecutive) > len(max_consecutive):\n max_consecutive = current_consecutive\n \n current_consecutive = char\n\n if len(current_consecutive) > len(max_consecutive):\n max_consecutive = current_consecutive\n\n return max_consecutive\n\nstring = \"aaaaaaabbbccdddee\"\n\nprint(longestConsecutive(string))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.709540178594706e-14,
      "p_css": 2.9570936691500075e-07,
      "p_html": 1.1623914794902805e-08,
      "p_java": 0.9992087909598781,
      "p_javascript": 1.6390045130195108e-16,
      "p_matlab": 3.25765867425201e-09,
      "p_python": 0.00078636977391591,
      "p_sql": 4.5277058650064115e-06,
      "p_typescript": 9.693331132253987e-10
    },
    {
      "text": "pattern = \"ca*\"\n\nfound_words = []\n\nfor word in words:\n    if fnmatch.fnmatch(word, pattern):\n        found_words.append(word)\n\nprint(found_words)\n\n# Output: [\"cat\", \"camel\"]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.20617459489706025,
      "p_css": 0.025139166293926873,
      "p_html": 0.14473003242386323,
      "p_java": 2.373533222723665e-05,
      "p_javascript": 0.0005745572871477324,
      "p_matlab": 0.3449543305867281,
      "p_python": 0.25873564469552673,
      "p_sql": 0.01950732163109453,
      "p_typescript": 0.0001606168524251906
    },
    {
      "text": "def bits_required(num):\n    num_bits = 0\n    if num == 0:\n        num_bits = 1\n    else:\n        while num > 0:\n            num_bits += 1\n            num >>= 1\n    return num_bits",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.483829616138416e-13,
      "p_css": 1.7338342782539242e-18,
      "p_html": 1.7970584928155714e-12,
      "p_java": 1.6384602890203429e-13,
      "p_javascript": 1.527339963762991e-13,
      "p_matlab": 0.9999999998065527,
      "p_python": 1.896342290119894e-10,
      "p_sql": 3.727472018995243e-13,
      "p_typescript": 6.783198809733302e-13
    },
    {
      "text": "import numpy as np\n\n# Calculate the soil moisture\ndef calculate_soil_moisture(temperature, humidity, soil_type):\n    # Calculation for sandy soil\n    moisture = 0\n    if soil_type == \"sandy\":\n        moisture = (temperature - 10) * humidity * 0.5\n    # Calculation for loamy soil\n    elif soil_type == \"loamy\":\n        moisture = (temperature - 20) * humidity * 0.6\n    # Calculation for clay soil\n    elif soil_type == \"clay\":\n        moisture = (temperature - 30) * humidity * 0.8\n    # Other types\n    else:\n        moisture = 10\n    # Calculate irrigation amount\n    if moisture > 4:\n        # No irrigation needed\n        irrigation_amount = 0\n    else:\n        # Irrigate the land\n        irrigation_amount = np.abs(4 - moisture)\n    return irrigation_amount",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.11189304810335973,
      "p_css": 0.2581254275936658,
      "p_html": 0.005060260380569421,
      "p_java": 0.0002496039530999427,
      "p_javascript": 0.007305938280925581,
      "p_matlab": 0.08810828789816756,
      "p_python": 0.5032539213217387,
      "p_sql": 0.0017651493760987421,
      "p_typescript": 0.024238363092374628
    },
    {
      "text": "import re\n\ndef generate_question(sentence):\n tokens = re.findall('\\w+', sentence)\n if tokens[0] == 'The':\n  question = 'What is' + ' ' + ' '.join(tokens[1:]) + '?'\n else:\n  question = 'What is the' + ' ' + ' '.join(tokens) + '?'\n  \n return question",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.007161061278606702,
      "p_css": 0.019162562110647707,
      "p_html": 0.26440666733607726,
      "p_java": 0.00022066122943949578,
      "p_javascript": 0.00939905866774853,
      "p_matlab": 0.001707678615262499,
      "p_python": 0.11502022823333115,
      "p_sql": 0.5774099511443646,
      "p_typescript": 0.005512131384522126
    },
    {
      "text": "from html.parser import HTMLParser\n\nclass LinkParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        if tag == 'a':\n            for (attrs,value) in attrs:\n                if attrs=='href':\n                    print(value)\n\nparser = LinkParser()\nparser.feed(html)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 4.044994187243173e-05,
      "p_css": 0.002414884905446824,
      "p_html": 0.9768975174626755,
      "p_java": 9.049834941835934e-07,
      "p_javascript": 7.10906071822847e-06,
      "p_matlab": 0.020575088564109452,
      "p_python": 6.405063019588431e-07,
      "p_sql": 3.850167960623091e-05,
      "p_typescript": 2.490289577519564e-05
    },
    {
      "text": "for i in range(len(numbers)-1, -1, -1):\n    print(numbers[i])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.318680834048131e-07,
      "p_css": 1.00033377420532e-07,
      "p_html": 3.79790946541136e-06,
      "p_java": 0.0003971452820214563,
      "p_javascript": 3.652954190053656e-07,
      "p_matlab": 3.144996459397836e-07,
      "p_python": 0.999593672645428,
      "p_sql": 4.110992752087813e-06,
      "p_typescript": 2.614738074319439e-07
    },
    {
      "text": "def add_numbers(a, b):\n return a + b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012301944068195585,
      "p_css": 0.003987747991535325,
      "p_html": 0.002902158679459525,
      "p_java": 0.00031218867602005957,
      "p_javascript": 0.000913777784127995,
      "p_matlab": 0.00021648270223205662,
      "p_python": 0.9879523945636358,
      "p_sql": 0.000831341461703893,
      "p_typescript": 0.0016537137344656732
    },
    {
      "text": "import sqlite3\n\n# create connection\nconn = sqlite3.connect(\"example.db\")\nc = conn.cursor()\n\n# create table\nc.execute(\"\"\" CREATE TABLE IF NOT EXISTS example (\n              id INTEGER PRIMARY KEY,\n              title TEXT,\n              content TEXT\n            ) \"\"\")\n\n# insert row\nc.execute(\"INSERT INTO example(title, content) VALUES (?,?)\", (title, content))\n\n# edit row\nc.execute(\"UPDATE example SET content=? WHERE id=?\", (new_content, id))\n\n# commit changes\nconn.commit()\n\n# close connection\nconn.close()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 8.723070712774096e-08,
      "p_css": 0.00014214546127647938,
      "p_html": 0.01038359935128886,
      "p_java": 1.8886539070939822e-05,
      "p_javascript": 2.9828264985241552e-06,
      "p_matlab": 9.654607904367007e-08,
      "p_python": 1.155006014737403e-06,
      "p_sql": 0.9894504011086486,
      "p_typescript": 6.459304158720135e-07
    },
    {
      "text": "class Die:\n    def __init__(self):\n        self.faces = [1, 2, 3, 4, 5, 6]\n\n    def roll(self):\n        return random.choice(self.faces)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.008856413980039e-05,
      "p_css": 0.0017198362867252893,
      "p_html": 0.015156551794260696,
      "p_java": 3.784975984716303e-06,
      "p_javascript": 8.880060622574267e-06,
      "p_matlab": 3.625927323867159e-07,
      "p_python": 0.6969670697615664,
      "p_sql": 0.2860320509115998,
      "p_typescript": 8.137505236850812e-05
    },
    {
      "text": "def initialize_dict(size):\n    my_dict = {}\n    for i in range(size):\n        my_dict[i] = None\n    return my_dict",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005903178780391882,
      "p_css": 0.02898920611723703,
      "p_html": 0.0033065210728196255,
      "p_java": 0.00013653269842460556,
      "p_javascript": 0.00011307339203694103,
      "p_matlab": 0.10322505403716051,
      "p_python": 0.8615154982794578,
      "p_sql": 0.00122567848175662,
      "p_typescript": 0.0008981180430674689
    },
    {
      "text": "def gradient_descent(lr, x, y):\n    m_curr = b_curr = 0 \n    iterations = 10000\n    n = len(x)\n\n    for i in range(iterations): \n        y_predicted = m_curr*x + b_curr\n        cost = (1/n) * sum([val**2 for val in (y-y_predicted)]) \n        md = -(2/n)*sum(x*(y-y_predicted))  \n        bd = -(2/n)*sum(y-y_predicted) \n        m_curr = m_curr - lr * md \n        b_curr = b_curr - lr * bd \n\n    return m_curr, b_curr",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002680310315371372,
      "p_css": 0.00724526528105306,
      "p_html": 0.01871598490491675,
      "p_java": 0.006298452150532375,
      "p_javascript": 0.002117737742688385,
      "p_matlab": 0.2874651143675369,
      "p_python": 0.6607971745771521,
      "p_sql": 0.009873315818604246,
      "p_typescript": 0.004806644842144704
    },
    {
      "text": "def simple_calculator():\n    num1 = float(input(\"Enter the first number: \")) \n    num2 = float(input(\"Enter the second number: \"))  \n    oper = input(\"Enter your operation (+, -, *, /): \")  \n      \n    if oper == \"+\":\n        print(\"Result:\", num1 + num2)  \n    elif oper == \"-\":\n        print(\"Result:\", num1 - num2)  \n    elif oper == \"*\":\n        print(\"Result:\", num1 * num2)  \n    elif oper == \"/\":\n        print(\"Result:\", num1 / num2)  \n    else:\n        print(\"Invalid operation\")\n\nsimple_calculator()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.327887603189298e-05,
      "p_css": 0.000730474326933896,
      "p_html": 3.9722628535261486e-05,
      "p_java": 5.189375760684592e-08,
      "p_javascript": 4.804851461270752e-06,
      "p_matlab": 5.027084014370286e-07,
      "p_python": 0.9990368248614043,
      "p_sql": 0.00016089678460363358,
      "p_typescript": 3.443068870593599e-06
    },
    {
      "text": "import json\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n payload = json.loads(request.data)\n print(payload)\n return \"OK\"\n\nif name == 'main':\n app.run(debug=True)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.008315678098334231,
      "p_css": 0.9894862281280078,
      "p_html": 0.00039567165865495593,
      "p_java": 0.0001056386678724824,
      "p_javascript": 6.361585454776652e-07,
      "p_matlab": 2.75403315631291e-06,
      "p_python": 0.0014916978093527423,
      "p_sql": 0.0001917974283310697,
      "p_typescript": 9.89801774501744e-06
    },
    {
      "text": "# Import libraries\nimport pandas as pd\nfrom sklearn.svm import SVC\n\n# Set up data\ndata = pd.DataFrame({\n    'features': [0.24, 0.34, 0.37],\n    'label': ['spam']\n})\n\n# Separate data into training and testing\nX_train = data.drop('label', axis=1)\ny_train = data.label\n\n# Train the model\nmodel = SVC()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_train)\n\n# Print accuracy\nprint(accuracy_score(y_train, predictions))",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.03479426410489456,
      "p_css": 0.7571112361302513,
      "p_html": 0.03337969177294967,
      "p_java": 1.3901029776983703e-05,
      "p_javascript": 8.573169147879613e-05,
      "p_matlab": 0.00012491117188573837,
      "p_python": 0.1591753313946684,
      "p_sql": 0.00019525719066080263,
      "p_typescript": 0.015119675513433715
    },
    {
      "text": "num1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\nif (num1 % num2 == 0):\n    print(\"The number %s is divisible by %s.\" % (num1, num2))\nelse:\n    print(\"The number %s is not divisible by %s.\" % (num1, num2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005445977424794198,
      "p_css": 0.0014854499866529818,
      "p_html": 0.00033045065129809606,
      "p_java": 0.0013623273568048786,
      "p_javascript": 0.00087760560329932,
      "p_matlab": 8.973341955956248e-07,
      "p_python": 0.9947395592533547,
      "p_sql": 0.0005976751518204182,
      "p_typescript": 6.143692009462991e-05
    },
    {
      "text": "def print_pattern(n): \n      \n    k = 0\n    for i in range(1, n+1): \n        # logic to print pattern\n        for j in range(i, n+1): \n            print(\"* \", end=\"\") \n        k = 0\n        for j in range(1, i*2): \n            if k == 0: \n                print(i, end=\"\")\n                k += 1\n            else: \n                print(\"$\", end=\"\")\n        print() \n   \nif __name__ == '__main__':\n    print_pattern(4)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.8173632299498648e-07,
      "p_css": 3.0237069513245934e-07,
      "p_html": 3.469375274359376e-06,
      "p_java": 1.1628918889832423e-08,
      "p_javascript": 7.698890848331778e-08,
      "p_matlab": 0.15005233685190592,
      "p_python": 0.8499291770559189,
      "p_sql": 1.4049508842282763e-05,
      "p_typescript": 3.944832130712738e-07
    },
    {
      "text": "def find_most_frequent(lst):\n    max_count = 0\n    most_frequent = None\n    count_dict = {}\n    for elem in lst:\n        if elem not in count_dict:\n            count_dict[elem] = 1\n        else:\n            count_dict[elem] += 1\n            \n        if count_dict[elem] > max_count:\n            most_frequent = elem\n            max_count = count_dict[elem]\n            \n    return most_frequent, max_count",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005709523894078166,
      "p_css": 0.024500020685206875,
      "p_html": 0.012427276196814772,
      "p_java": 0.0008305651135096559,
      "p_javascript": 0.0027376136624539735,
      "p_matlab": 0.033902912754017675,
      "p_python": 0.9081388725620669,
      "p_sql": 0.0025822273151292026,
      "p_typescript": 0.009170987816722603
    },
    {
      "text": "def is_palindrome(text):\n    return text == text[::-1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00016631889551910593,
      "p_css": 0.013943223129659024,
      "p_html": 0.00011585069659293006,
      "p_java": 3.692554802120396e-05,
      "p_javascript": 0.00019444150974860794,
      "p_matlab": 4.104110084217038e-05,
      "p_python": 0.9665489997973497,
      "p_sql": 0.007778517292851515,
      "p_typescript": 0.011174682029415938
    },
    {
      "text": "def int_to_roman(num):\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman = ''\n    for value, symbol in roman_numerals.items():\n        while num >= value:\n            roman += symbol\n            num -= value\n    return roman",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 1.6328295974494081e-06,
      "p_css": 5.412087792965652e-06,
      "p_html": 1.7081675234837666e-06,
      "p_java": 4.291704801836459e-08,
      "p_javascript": 5.666167398354028e-07,
      "p_matlab": 0.9999901266554364,
      "p_python": 1.2764994886566086e-08,
      "p_sql": 1.367660169446719e-07,
      "p_typescript": 3.6119485007443766e-07
    },
    {
      "text": "def calculate_total_tax(cost, rate):\n \"\"\"Calculate the total amount of taxes to be paid\"\"\"\n tax = cost * rate/100\n total = cost + tax\n\n return total\n\ntotal_amount = calculate_total_tax(700, 10)\nprint(f\"The total amount, including taxes, is {total_amount}\") # 770",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003241630063515202,
      "p_css": 0.025969191434860175,
      "p_html": 0.0022371093776540145,
      "p_java": 0.00024736684199505636,
      "p_javascript": 0.025940740633515563,
      "p_matlab": 0.00015908735415706544,
      "p_python": 0.7087937304580884,
      "p_sql": 0.0021665146765914513,
      "p_typescript": 0.2312446291596232
    },
    {
      "text": "\"\"\"\nCalculating the distance between two points with latitude and longitude\n\"\"\"\nimport math\n\ndef calc_dist(x1,y1,x2,y2):\n    \"\"\"\n    Calculates the distance between two points given their latitude and longitude.\n    Input: \n        x1, y1 - the latitude and longitude of the first point\n        x2, y2 - the latitude and longitude of the second point\n    Output:\n        distance - the distance between the two points\n    \"\"\"\n    # convert the latitude and longitude to radians\n    x1, y1, x2, y2 = map(math.radians, [x1, y1, x2, y2])\n    \n    # calculate the great circle distance\n    dlon = y2-y1\n    dlat = x2-x1\n    a = math.sin(dlat/2)**2 + math.cos(x1) * math.cos(x2)* math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371 # radius of Earth in kilometers\n    return c * r\n\n# the coordinates of point A and point B\nx1 = 51.509865\ny1 = -0.118092\nx2 = 40.730610\ny2 = -73.935242\n\n# calculate the distance between the two points\ndist = calc_dist(x1, y1, x2, y2)\nprint(\"The distance between two points is \" + str(dist) + \" kilometers\")",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0018955840689682934,
      "p_css": 0.00648682558535461,
      "p_html": 0.0034819280823135358,
      "p_java": 0.005186699285082075,
      "p_javascript": 0.005929569399161778,
      "p_matlab": 4.175481818156646e-06,
      "p_python": 0.23154726794804603,
      "p_sql": 0.007075150410203525,
      "p_typescript": 0.738392799739052
    },
    {
      "text": "def selection_sort(arr): \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with  \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.064151747706383e-07,
      "p_css": 2.0626048066031344e-07,
      "p_html": 2.1940831892494655e-07,
      "p_java": 2.0934195318341296e-08,
      "p_javascript": 1.2066388508130996e-07,
      "p_matlab": 0.9980848942340521,
      "p_python": 0.001913224559089699,
      "p_sql": 2.29143904126361e-09,
      "p_typescript": 1.005233364384985e-06
    },
    {
      "text": "import requests\n\nurl = 'https://example.com'\n\n# Set the form data  \ndata = {\n  'field1': 'value1',\n  'field2': 'value2',\n  'field3': 'value3',\n  'field4': 'value4'\n}\n\n# Send a POST request to the URL with the form data  \nr = requests.post(url, data=data)\n\n# Check the response code \nif r.status_code == 200: \n  print('Form submitted successfully.') \nelse:\n  print('Error submitting form.')",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 1.4982890734806142e-11,
      "p_css": 0.22174627400848895,
      "p_html": 0.011934860940955782,
      "p_java": 0.7567560692580793,
      "p_javascript": 0.0002222752124152661,
      "p_matlab": 3.6578209815745528e-06,
      "p_python": 0.0010449134819311657,
      "p_sql": 0.0006907144536288347,
      "p_typescript": 0.007601234808536523
    },
    {
      "text": "def longestSubstring(str) : \n n = len(str) \n  \n # Create a map of distinct characters \n distinct_char = {}  \n for i in range(n) : \n distinct_char[str[i]] = i \n  \n cur_start = 0\n cur_end = 0\n max_start = 0\n max_end = 0\n max_len = 0\n  \n # Iterate through all characters and check   \n # if it forms a valid substring or not \n for i in range(n) : \n  \n # If character is already present \n if (str[i] in distinct_char) : \n  \n # Reset the cur_end to recent position \n cur_end = i \n  \n # If character is not present in the  \n # already formed substring, then \n # update max_len if required  \n if (cur_end - cur_start + 1 > max_len) : \n max_len = cur_end - cur_start + 1\n max_start = cur_start \n max_end = cur_end \n  \n # Update cur_start for next iteration \n cur_start += 1\n  \n # Store last occurrence of current  \n # character in the map \n distinct_char[str[i]] = i \n  \n print(str[max_start : max_end + 1]) \n  \n# Driver \nstr = \"abcabcbb\"\nlongestSubstring(str) # Prints \"abc\"",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0005543702831214669,
      "p_css": 0.0002581295631931662,
      "p_html": 0.003400289955258749,
      "p_java": 1.127408286953729e-05,
      "p_javascript": 0.09950684853896609,
      "p_matlab": 0.28889590356533945,
      "p_python": 0.5517644767911374,
      "p_sql": 0.030585380494653196,
      "p_typescript": 0.02502332672546094
    },
    {
      "text": "def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        lessThanPivot = [x for x in arr[1:] if x < pivot]\n        moreThanPivot = [x for x in arr[1:] if x >= pivot]\n        sortedArray = quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)\n        return sortedArray",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.029746363360273e-09,
      "p_css": 1.8151157962573643e-08,
      "p_html": 3.5303983421950286e-09,
      "p_java": 1.0772548143589501e-09,
      "p_javascript": 7.633020588428216e-10,
      "p_matlab": 0.999998347017855,
      "p_python": 1.6171453602456683e-06,
      "p_sql": 2.3923477891815157e-10,
      "p_typescript": 6.045690462195475e-09
    },
    {
      "text": "str = \"Hello World!\"\nchars = list(str)\n\n# initialize counts as empty dictionary\nchar_counts = {}\n\nfor char in chars:\n    if char in char_counts:\n        char_counts[char] += 1\n    else:\n        char_counts[char] = 1\n\n# printing result\nfor char, count in char_counts.items():\n    print(\"{} : {}\".format(char, count))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005189759083524386,
      "p_css": 0.06227231027141594,
      "p_html": 0.002123821148038403,
      "p_java": 3.9341762388127e-09,
      "p_javascript": 0.0023138203579391005,
      "p_matlab": 0.0014823105668594666,
      "p_python": 0.9245996962499354,
      "p_sql": 0.0016622624866803387,
      "p_typescript": 0.0003560159014308755
    },
    {
      "text": "A Python list is an ordered collection of objects, stored in memory and indexed by number that can contain items of different types such as numbers, strings, and other lists.",
      "y_true": "typescript",
      "pred_label": "typescript",
      "p_bash": 4.743940585407781e-09,
      "p_css": 1.6214735760060025e-09,
      "p_html": 2.7734091034644497e-10,
      "p_java": 2.3247143740857343e-09,
      "p_javascript": 4.35940270905189e-06,
      "p_matlab": 4.183104844588744e-09,
      "p_python": 9.485544562892968e-08,
      "p_sql": 2.3263401793842473e-10,
      "p_typescript": 0.999995532358637
    },
    {
      "text": "def extract_substring(string, start, end):\n    '''This function will extract the substring between two given key words'''\n    \n    if start in string and end in string:\n        start_index = string.find(start) + len(start)\n        end_index = string.find(end)\n        extracted_string = string[start_index:end_index]\n        return extracted_string",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.512578491777848e-12,
      "p_css": 7.168624451464987e-07,
      "p_html": 4.9998219243971915e-08,
      "p_java": 0.9995851343771077,
      "p_javascript": 3.3390934491065255e-13,
      "p_matlab": 8.950750903516435e-11,
      "p_python": 0.0004019675360119306,
      "p_sql": 1.1931314912180425e-05,
      "p_typescript": 1.9981794987752576e-07
    },
    {
      "text": "import json\n\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\ndata_dict = json.loads(data)\n\nfor key, value in data_dict.items():\n    print(f'{key}: {value}')",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.6930322375584342e-08,
      "p_css": 0.9999953662688431,
      "p_html": 1.0775985354524146e-07,
      "p_java": 5.475496494117866e-09,
      "p_javascript": 3.298754483253019e-09,
      "p_matlab": 4.479020059773553e-06,
      "p_python": 1.3335343812107603e-09,
      "p_sql": 1.5710489482326024e-08,
      "p_typescript": 4.202646552993504e-09
    },
    {
      "text": "def diff_in_list(input_list):\n    \"\"\"This function takes a list of integers and returns a dictionary with the input number as key and the difference between two immediate numbers as value.\"\"\"\n    \n    output_dict = {}\n  \n    # Iterate over the list and create a dictionary with the \n    # input number as key and the difference between\n    # two immediate numbers as value\n    for i in range(len(input_list) - 1):\n        output_dict[input_list[i]] = input_list[i + 1] - input_list[i]\n    \n    return output_dict\n    \n# Sample Input\ninput_list = [1, 2, 4, 7, 11]\n\n# Print the output\nprint(diff_in_list(input_list))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00020487406564865762,
      "p_css": 0.0024911873656383353,
      "p_html": 0.0007566715259405804,
      "p_java": 0.0002486134125845493,
      "p_javascript": 0.0008510726020811027,
      "p_matlab": 4.51340391224878e-05,
      "p_python": 0.018795687025793845,
      "p_sql": 0.00014703552777309997,
      "p_typescript": 0.9764597244354174
    },
    {
      "text": "import flask from flask\nimport sqlite3\n\napp = flask.Flask(__name__)\n\n# create the database\nconn = sqlite3.connect('data.db')\ncur = conn.cursor()\n\n# create the table for your data\ncur.execute('''CREATE TABLE IF NOT EXISTS search \n(query TEXT, results TEXT)''')\n\n@app.route('/search', methods = ['GET', 'POST'])\ndef search():\n if flask.request.method == 'POST':\n # get the search term from the form\n query = flask.request.form['query']\n\n # search the database for the query\n cur.execute('''SELECT results FROM search \n WHERE query=?''', (query,))\n results = cur.fetchall()\n\n # return the results\n return flask.render_template('results.html', \nquery = query, results = results)\n\n# the search form\n@app.route('/')\ndef index():\n return flask.render_template('search.html')\n\nif __name__ == '__main__':\n app.run(debug = True)",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 5.405419617965339e-06,
      "p_css": 0.1468555395462942,
      "p_html": 0.05585172737041274,
      "p_java": 0.0005757853962628826,
      "p_javascript": 0.019968633026616223,
      "p_matlab": 8.031741135767948e-06,
      "p_python": 0.0018280570758264479,
      "p_sql": 0.12742242715864482,
      "p_typescript": 0.6474843932651889
    },
    {
      "text": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(8))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.8096666849369088e-14,
      "p_css": 3.0723850794375736e-10,
      "p_html": 4.111831887522193e-10,
      "p_java": 0.00021071438448722632,
      "p_javascript": 3.059225712987672e-15,
      "p_matlab": 3.931267866229464e-11,
      "p_python": 5.028087842769551e-07,
      "p_sql": 0.9997887820275521,
      "p_typescript": 2.141077546102211e-11
    },
    {
      "text": "import lxml.html\n\ndef parse_table(html_str):\n    root = lxml.html.fromstring(html_str)\n\n    # locate the table\n    table = root.xpath('//table')[0]\n\n    # collect header names\n    header_names = [th.text_content() for th in table.xpath('//th')]\n\n    # collect data rows\n    data_rows = table.xpath('//tr')[1:]\n    data_rows = [[td.text_content().strip() for td in row.xpath('td')]\n                    for row in data_rows]\n\n    # print the result\n    print(header_names)\n    print(data_rows)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.2555599733316014e-05,
      "p_css": 0.0007446165458010507,
      "p_html": 0.994857579975136,
      "p_java": 9.714081842594152e-07,
      "p_javascript": 0.0002647588990314252,
      "p_matlab": 1.3540764111413607e-05,
      "p_python": 0.004006554459342219,
      "p_sql": 9.592179521352843e-05,
      "p_typescript": 3.5005534471464687e-06
    },
    {
      "text": "def generate_strings(characters, length):\n    if length == 0:\n        return [\"\"]\n\n    result = []\n    for char in characters:\n        for string in generate_strings(characters, length-1):\n            result.append(char + string)\n\n    return result\n\nstrings = generate_strings([\"A\", \"B\", \"C\"], 3)\nprint(\"Strings:\", strings)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.5016984970860114e-07,
      "p_css": 0.002218941115262625,
      "p_html": 1.271735506527897e-05,
      "p_java": 0.0017518008359068277,
      "p_javascript": 5.012469985576484e-06,
      "p_matlab": 4.4758235385566515e-05,
      "p_python": 0.9664221759358045,
      "p_sql": 0.029536880409979174,
      "p_typescript": 7.463472760550218e-06
    },
    {
      "text": "num1 = 3\nnum2 = 5\n\nresult = num1 + num2\n\nprint(f'The sum of {num1} and {num2} is {result}')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.775694612038662e-05,
      "p_css": 0.003384813876092001,
      "p_html": 0.00016989339245595376,
      "p_java": 0.00014042573329088332,
      "p_javascript": 0.0013240189982905589,
      "p_matlab": 6.546769216926628e-06,
      "p_python": 0.9887403560185734,
      "p_sql": 0.0007577121314286157,
      "p_typescript": 0.005408476134531435
    },
    {
      "text": "def find_smaller_elements(nums, target):\n  indices = []\n  for i, num in enumerate(nums):\n    if num < target:\n      indices.append(i)\n  return indices\n  \nresult = find_smaller_elements([2, 3, 4, 5, 6], 4)\nprint(result) # [0, 1]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.89453260184e-07,
      "p_css": 1.299468888857212e-07,
      "p_html": 3.5130054782090836e-06,
      "p_java": 1.8962093327321635e-07,
      "p_javascript": 8.849353344455979e-07,
      "p_matlab": 0.9956862504411066,
      "p_python": 0.0042953450551929066,
      "p_sql": 1.0885564517801621e-05,
      "p_typescript": 1.8119772878819462e-06
    },
    {
      "text": "import random\n\n# Simulate a dice roll\nresult = random.randint(1,6)\nprint(\"Result of the dice roll:\", result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003185101932950642,
      "p_css": 0.008705901170379619,
      "p_html": 0.0007695894204283153,
      "p_java": 4.2447072497739124e-05,
      "p_javascript": 0.0010140455760085283,
      "p_matlab": 4.9606581888651266e-06,
      "p_python": 0.9792070156361083,
      "p_sql": 0.007110571865862288,
      "p_typescript": 0.002826958407230989
    },
    {
      "text": "import matplotlib.pyplot as plt \n\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplt.plot(x, y)\nplt.title('Line Chart') \nplt.xlabel('X-Axis') \nplt.ylabel('Y-Axis') \nplt.show()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.005081958519946075,
      "p_css": 0.0052140544107164835,
      "p_html": 0.8109153760341509,
      "p_java": 0.00035302762677073536,
      "p_javascript": 0.0004049935425250114,
      "p_matlab": 0.0010184909346627404,
      "p_python": 0.1669129251057894,
      "p_sql": 0.0007427446536953606,
      "p_typescript": 0.009356429171743256
    },
    {
      "text": "for i in range(1,11):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2415972227325905e-13,
      "p_css": 1.6911048586434646e-18,
      "p_html": 1.1057399553217356e-12,
      "p_java": 5.510266050076294e-15,
      "p_javascript": 7.48076876636178e-15,
      "p_matlab": 0.999998444523721,
      "p_python": 1.5554749300339005e-06,
      "p_sql": 3.862174504852572e-14,
      "p_typescript": 6.723799180726865e-14
    },
    {
      "text": "from sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n \n# Load the input data\nX = ...\ny = ...\n \n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n \n# Create and fit the Naive Bayes model\nclf = GaussianNB().fit(X_train, y_train)\n \n# Use the model to make predictions\npredictions = clf.predict(X_test)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.4334567364366595,
      "p_css": 0.09792517728676917,
      "p_html": 0.010425148730269927,
      "p_java": 5.261418518840154e-06,
      "p_javascript": 0.0012358715009355844,
      "p_matlab": 2.786031399982208e-05,
      "p_python": 0.22412916165226815,
      "p_sql": 2.9829852811144845e-05,
      "p_typescript": 0.23276495280776796
    },
    {
      "text": "net_energy_charge = 0\n\nfor carbohydrate in list_of_carbohydrates:\n if carbohydrate == 'glucose':\n  net_energy_charge += -2.3\n elif carbohydrate == 'fructose':\n  net_energy_charge += -2.5\n elif carbohydrate == 'galactose':\n  net_energy_charge += -3\n\nprint(net_energy_charge)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1870337272846572e-06,
      "p_css": 5.616186314884708e-05,
      "p_html": 1.1183432679619043e-05,
      "p_java": 2.1283338558124403e-08,
      "p_javascript": 1.0711526233446958e-06,
      "p_matlab": 0.9976782872657733,
      "p_python": 0.002150678985888442,
      "p_sql": 0.0001006292097422356,
      "p_typescript": 7.79773078372205e-07
    },
    {
      "text": "def normalize(nums):\n  min_num = min(nums)\n  max_num = max(nums)\n\n  for i, n in enumerate(nums):\n    if n > min_num and n < max_num:\n      if n - min_num > max_num - n:\n        nums[i] = max_num\n      else:\n        nums[i] = min_num\n\n  return nums\n\nprint(normalize([5, 4, 3, 4, 8, 6, 7]))\n# [5, 4, 3, 5, 8, 6, 7]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00022245330518917298,
      "p_css": 0.0015366442143913632,
      "p_html": 0.0023048378352514692,
      "p_java": 3.78071614851927e-05,
      "p_javascript": 9.386640477938208e-05,
      "p_matlab": 0.0002508614937922666,
      "p_python": 0.994553412396881,
      "p_sql": 7.766304922054991e-05,
      "p_typescript": 0.0009224541390095714
    },
    {
      "text": "import pandas as pd\n\ndf = pd.DataFrame({'Name': ['John', 'James', 'John'],\n                   'Age': [27, 25, 27],\n                   'City': ['London', 'Tokyo', 'Tokyo']})\n\n# identify all duplicates in the 'Name' column\nduplicates = df[df.duplicated(['Name'], keep=False)]\nprint(duplicates)\n\n# output\n    Name  Age    City\n0   John   27  London\n2   John   27   Tokyo",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0023124761123276627,
      "p_css": 0.9680478171588889,
      "p_html": 0.0035483338869660703,
      "p_java": 0.017096260243223367,
      "p_javascript": 1.7592537730735449e-06,
      "p_matlab": 3.5178492942435624e-05,
      "p_python": 0.008402025141782255,
      "p_sql": 0.0003253429837490422,
      "p_typescript": 0.00023080672634728173
    },
    {
      "text": "def increasing_diagonal(grid):\n # Get the number of rows and columns in the grid\n num_rows = len(grid)\n num_cols = len(grid[0])\n\n # Loop through the elements of the array\n for i in range(num_rows):\n  for j in range(num_cols):\n   # Check that the adjacent elements in the diagonal line\n   # are increasing\n   if i + 1 < num_rows and j + 1 < num_cols:\n    if grid[i][j] >= grid[i + 1][j + 1]:\n     return False\n \n return True\n \n# Test array\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n \n# Print solution\nprint(increasing_diagonal(grid))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0025374744685850515,
      "p_css": 0.00135857941518646,
      "p_html": 0.0014282128021144605,
      "p_java": 3.352162077680911e-05,
      "p_javascript": 0.004924439093403737,
      "p_matlab": 0.034536387296496565,
      "p_python": 0.7074319956068145,
      "p_sql": 0.004382339532228347,
      "p_typescript": 0.243367050164394
    },
    {
      "text": "def average_height(lst):\n    total = 0\n    for height in lst:\n        total += height\n    \n    return total / len(lst)\n\nresult = average_height([1.78, 1.90, 1.75, 1.82])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.175026621585544e-06,
      "p_css": 0.0007133212857593854,
      "p_html": 9.567642072651489e-05,
      "p_java": 1.5422735891245812e-06,
      "p_javascript": 1.0317236067659162e-05,
      "p_matlab": 8.90349879691058e-06,
      "p_python": 0.9990926356413754,
      "p_sql": 5.418624071380448e-05,
      "p_typescript": 1.4242376349563125e-05
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in csv data\ndata = pd.read_csv('stock_data.csv')\n\n# Split our data into testing and training sets\nX_train = data[data['date'] < '2014-01-01']\nX_test = data[data['date'] >= '2014-01-01']\n\n# Extract our feature and target columns\nX_train = X_train.drop(['date', 'price'], axis=1)\nX_test = X_test.drop(['date', 'price'], axis=1)\ny_train = data[data['date'] < '2014-01-01']['price']\ny_test = data[data['date'] >= '2014-01-01']['price']\n\n# Fit our Linear Regression Model\nlinear_regression = LinearRegression()\nlinear_regression.fit(X_train, y_train)\ny_preds = linear_regression.predict(X_test)\n\n# Print out our predictions\nfor i in range(1, len(y_preds)):\n print(f\"Predicted: {y_preds[i]}, Actual: {y_test.iloc[i]}\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001677202916291826,
      "p_css": 0.271847817249215,
      "p_html": 0.011336982446528903,
      "p_java": 8.612927387982762e-05,
      "p_javascript": 5.1089457552411634e-05,
      "p_matlab": 0.0002958012788063388,
      "p_python": 0.709701406984205,
      "p_sql": 0.0027392410295841306,
      "p_typescript": 0.0037738119885991446
    },
    {
      "text": "# Create a matrix using a list of lists\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\n\n# Create a matrix using Numpy\nimport numpy as np \nmatrix = np.array([[1, 2, 3],\n                    [4, 5, 6],\n                    [7, 8, 9]])",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.015392573269023779,
      "p_css": 0.0008049501484074142,
      "p_html": 0.0007375805705361888,
      "p_java": 1.7221143708024515e-05,
      "p_javascript": 8.045999121240553e-05,
      "p_matlab": 0.00020951587281206797,
      "p_python": 0.01007880599125398,
      "p_sql": 3.430960780859679e-06,
      "p_typescript": 0.9726754620522654
    },
    {
      "text": "def calculate(expr):\n    return eval(expr)\n\nresult = calculate(\"4 + 7\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001403862149433836,
      "p_css": 0.0035771028173097576,
      "p_html": 0.0001744299337978939,
      "p_java": 2.09974083396377e-05,
      "p_javascript": 0.00010141043787309714,
      "p_matlab": 1.3287281759823086e-05,
      "p_python": 0.9952746798333278,
      "p_sql": 0.0005491371180153544,
      "p_typescript": 0.0001485689546332145
    },
    {
      "text": "class Queue:\n def __init__(self):\n self.queue = []\n\n def push(self, item):\n self.queue.append(item)\n\n def pop(self):\n return self.queue.pop(0)\n\n def peek(self):\n return self.queue[0]\n\n# Usage example\nq = Queue()\nq.push(1)\nq.push(2)\nq.push(3)\n\nprint(q.pop()) # 1 \nprint(q.peek()) # 2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.433674350484371e-05,
      "p_css": 0.008463407406777756,
      "p_html": 0.04849433980196999,
      "p_java": 5.233925532795203e-05,
      "p_javascript": 0.0004153906529935598,
      "p_matlab": 1.3790843086632525e-05,
      "p_python": 0.7008540286305966,
      "p_sql": 0.24150023161511652,
      "p_typescript": 0.0001221350506260688
    },
    {
      "text": "for i in range(1, 11):\n print(5, 'X', i, '=', 5*i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2415972227325905e-13,
      "p_css": 1.6911048586434646e-18,
      "p_html": 1.1057399553217356e-12,
      "p_java": 5.510266050076294e-15,
      "p_javascript": 7.48076876636178e-15,
      "p_matlab": 0.999998444523721,
      "p_python": 1.5554749300339005e-06,
      "p_sql": 3.862174504852572e-14,
      "p_typescript": 6.723799180726865e-14
    },
    {
      "text": "def add_two_numbers(a, b, x=0):\n    return a + b + x",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0019570213590397235,
      "p_css": 0.003742014558601787,
      "p_html": 0.0022154520175463963,
      "p_java": 0.0003486538216099747,
      "p_javascript": 0.9750500586716987,
      "p_matlab": 0.00018289236633118995,
      "p_python": 0.013345837177905112,
      "p_sql": 0.0009317164225004256,
      "p_typescript": 0.0022263536047667887
    },
    {
      "text": "def missingNumbers(arr):\n        start = arr[0]\n        end = arr[len(arr)-1]\n        \n        result = []\n        \n        for i in range(start, end+1):\n            if i not in arr:\n                result.append(i)\n                \n        return result\n\n# Test Case\narr = [2, 3, 5, 6, 7, 8, 10]\nprint(missingNumbers(arr))\n\n# Output:\n# [4, 9]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.315529209991596e-07,
      "p_css": 1.2752428696923915e-05,
      "p_html": 7.799212911854258e-07,
      "p_java": 2.6571630175605788e-08,
      "p_javascript": 4.079500985613756e-08,
      "p_matlab": 0.456274042197317,
      "p_python": 0.5437112861920789,
      "p_sql": 2.0735803134774589e-07,
      "p_typescript": 2.32983023723671e-07
    },
    {
      "text": "class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass CircularLinkedList:\n def __init__(self):\n self.head = None\n\n def append(self, data):\n if not self.head:\n self.head = Node(data)\n self.head.next = self.head\n else:\n cur = self.head\n while cur.next != self.head:\n cur = cur.next\n\n new_node = Node(data)\n new_node.next = self.head\n cur.next = new_node\n \n def remove(self, key):\n cur = self.head\n prev = None\n while cur.next != self.head:\n if cur.data == key:\n if cur == self.head:\n prev.next = cur.next\n self.head = cur.next\n else:\n prev.next = cur.next\n return \n else:\n prev = cur.next\n cur = cur.next\n \n print(\"Element not found\")\n\ndef print_list(self):\n cur = self.head\n while cur:\n print(cur.data)\n cur = cur.next\n if cur == self.head:\n break",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.8387108100409214e-05,
      "p_css": 0.002920256813450507,
      "p_html": 0.9490385139665725,
      "p_java": 6.288147289162966e-06,
      "p_javascript": 1.904430101877268e-05,
      "p_matlab": 1.7736467610465507e-05,
      "p_python": 0.004108682380991529,
      "p_sql": 0.04380243728860944,
      "p_typescript": 6.865352635730934e-05
    },
    {
      "text": "def permutation(lst): \n  \n    # If lst is empty then there are no permutations \n    if len(lst) == 0: \n        return [] \n  \n    # If there is only one element in lst then, only \n    # one permuatation is possible \n    if len(lst) == 1: \n        return [lst] \n  \n    # Find the permutations for lst if there are \n    # more than 1 characters \n  \n    l = [] # empty list that will store current permutation \n  \n    # Iterate the input(lst) and calculate the permutation \n    for i in range(len(lst)): \n       m = lst[i] \n  \n       # Extract lst[i] or m from the list.  remLst is \n       # remaining list \n       remLst = lst[:i] + lst[i+1:] \n  \n       # Generating all permutations where m is first \n       # element \n       for p in permutation(remLst): \n           l.append([m] + p) \n    return l \n  \n# Driver program to test above function \ndata = list('123') \nfor p in permutation(data): \n    print (p)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0013821449393287006,
      "p_css": 0.0006885007985790441,
      "p_html": 0.0004906063115692449,
      "p_java": 4.69552802930735e-05,
      "p_javascript": 0.012528941437615168,
      "p_matlab": 0.04751837497403896,
      "p_python": 0.9208295203331838,
      "p_sql": 0.005211984583075005,
      "p_typescript": 0.011302971342316986
    },
    {
      "text": "#!/usr/bin/env python2\n# Copyright (c) 2015 The Deuscoin Core developers\n# Distributed under the MIT/X11 software license, see the accompanying\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n#\n\nfrom test_framework.test_framework import ComparisonTestFramework\nfrom test_framework.util import *\nfrom test_framework.mininode import CTransaction, NetworkThread\nfrom test_framework.blocktools import create_coinbase, create_block\nfrom test_framework.comptool import TestInstance, TestManager\nfrom test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\nfrom binascii import hexlify, unhexlify\nimport cStringIO\nimport time\nimport itertools\n\n'''\nThis test is meant to exercise BIP forks\nConnect to a single node.\nregtest lock-in with 108/144 block signalling\nactivation after a further 144 blocks\nmine 2 block and save coinbases for later use\nmine 141 blocks to transition from DEFINED to STARTED\nmine 100 blocks signalling readiness and 44 not in order to fail to change state this period\nmine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\nmine a further 143 blocks (LOCKED_IN)\ntest that enforcement has not triggered (which triggers ACTIVE)\ntest that enforcement has triggered\n'''\n\n\n\nclass BIP9SoftForksTest(ComparisonTestFramework):\n\n    def __init__(self):\n        self.num_nodes = 1\n\n    def setup_network(self):\n        self.nodes = start_nodes(1, self.options.tmpdir,\n                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                 binary=[self.options.testbinary])\n\n    def run_test(self):\n        self.test = TestManager(self, self.options.tmpdir)\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n        self.test.run()\n\n    def create_transaction(self, node, coinbase, to_address, amount):\n        from_txid = node.getblock(coinbase)['tx'][0]\n        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n        outputs = { to_address : amount }\n        rawtx = node.createrawtransaction(inputs, outputs)\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(rawtx))\n        tx.deserialize(f)\n        tx.nVersion = 2\n        return tx\n\n    def sign_transaction(self, node, tx):\n        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n        tx = CTransaction()\n        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n        tx.deserialize(f)\n        return tx\n\n    def generate_blocks(self, number, version, test_blocks = []):\n        for i in xrange(number):\n            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n            block.nVersion = version\n            block.rehash()\n            block.solve()\n            test_blocks.append([block, True])\n            self.last_block_time += 1\n            self.tip = block.sha256\n            self.height += 1\n        return test_blocks\n\n    def get_bip9_status(self, key):\n        info = self.nodes[0].getblockchaininfo()\n        for row in info['bip9_softforks']:\n            if row['id'] == key:\n                return row\n        raise IndexError ('key:\"%s\" not found' % key)\n\n\n    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n        # generate some coins for later\n        self.coinbase_blocks = self.nodes[0].generate(2)\n        self.height = 3  # height of the next block to build\n        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n        self.nodeaddress = self.nodes[0].getnewaddress()\n        self.last_block_time = int(time.time())\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n\n        # Test 1\n        # Advance from DEFINED to STARTED\n        test_blocks = self.generate_blocks(141, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 2\n        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n\n        # Test 3\n        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n        # using a variety of bits to simulate multiple parallel softforks\n        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 4\n        # 143 more version 536870913 blocks (waiting period-1)\n        test_blocks = self.generate_blocks(143, 4)\n        yield TestInstance(test_blocks, sync_every_block=False)\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n\n        # Test 5\n        # Check that the new rule is enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = activated_version\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n\n        self.last_block_time += 1\n        self.tip = block.sha256\n        self.height += 1\n        yield TestInstance([[block, True]])\n\n        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n\n        # Test 6\n        # Check that the new sequence lock rules are enforced\n        spendtx = self.create_transaction(self.nodes[0],\n                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n        invalidate(spendtx)\n        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n        spendtx.rehash()\n        invalidatePostSignature(spendtx)\n        spendtx.rehash()\n\n        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n        block.nVersion = 5\n        block.vtx.append(spendtx)\n        block.hashMerkleRoot = block.calc_merkle_root()\n        block.rehash()\n        block.solve()\n        self.last_block_time += 1\n        yield TestInstance([[block, False]])\n\n        # Restart all\n        stop_nodes(self.nodes)\n        wait_deuscoinds()\n        shutil.rmtree(self.options.tmpdir)\n        self.setup_chain()\n        self.setup_network()\n        self.test.clear_all_connections()\n        self.test.add_all_connections(self.nodes)\n        NetworkThread().start() # Start up network handling in another thread\n\n\n\n    def get_tests(self):\n        for test in itertools.chain(\n                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n        ):\n            yield test\n\n    def donothing(self, tx):\n        return\n\n    def csv_invalidate(self, tx):\n        '''Modify the signature in vin 0 of the tx to fail CSV\n        Prepends -1 CSV DROP in the scriptSig itself.\n        '''\n        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n                                      list(CScript(tx.vin[0].scriptSig)))\n\n    def sequence_lock_invalidate(self, tx):\n        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n        '''\n        tx.vin[0].nSequence = 0x00FFFFFF\n        tx.nLockTime = 0\n\n    def mtp_invalidate(self, tx):\n        '''Modify the nLockTime to make it fails once MTP rule is activated\n        '''\n        # Disable Sequence lock, Activate nLockTime\n        tx.vin[0].nSequence = 0x90FFFFFF\n        tx.nLockTime = self.last_block_time\n\nif __name__ == '__main__':\n    BIP9SoftForksTest().main()",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.01216505291812501,
      "p_css": 0.000297936017069556,
      "p_html": 0.005519876179595482,
      "p_java": 8.727317599816219e-07,
      "p_javascript": 0.00024085512724262325,
      "p_matlab": 5.658793995580017e-07,
      "p_python": 0.029993005907340185,
      "p_sql": 0.5765015640893725,
      "p_typescript": 0.3752802711500952
    },
    {
      "text": "import tweepy\n\n# authentication for twitter api\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_secret)\n\n# create an API instance\napi = tweepy.API(auth)\n\n# search for posts with the hashtag\nfor tweet in tweepy.Cursor(api.search, q='#news').items(10):\n # like post\n api.create_favorite(tweet.id)\n # follow the author\n api.create_friendship(tweet.user.id)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001082073441528085,
      "p_css": 0.3908220763624752,
      "p_html": 0.021713919776464138,
      "p_java": 0.0037600517887064993,
      "p_javascript": 0.012715591429872651,
      "p_matlab": 0.017279677424214775,
      "p_python": 0.451273965701299,
      "p_sql": 0.006225047056240143,
      "p_typescript": 0.0951275970191997
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Read in data\ndata = pd.read_csv(\"data.csv\")\n\n# Split into train and test\nX = data.drop(\"target_column\", axis=1)\ny = data[\"target_column\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a binary classification model \nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate model\ny_pred = model.predict(X_test)\naccuracy = (y_pred == y_test).mean() \nprint(\"Model accuracy:\", accuracy)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.019643422370291718,
      "p_css": 0.17467842170039247,
      "p_html": 0.02002840800015624,
      "p_java": 1.0878213478063794e-05,
      "p_javascript": 3.094244995964623e-05,
      "p_matlab": 4.4710562746277166e-05,
      "p_python": 0.7841726565908922,
      "p_sql": 1.841262982361042e-05,
      "p_typescript": 0.0013721474822599384
    },
    {
      "text": "import random\n\ndef generate_account_number():\n    # Generate a random Account number\n    account_number = '00' \n    nums = [str(random.randint(0, 9)) for _ in range(7)]\n    account_number += \"\".join(nums)\n    checksum = get_checksum(account_number)\n    account_number += str(checksum)\n    return account_number\n\ndef get_checksum(account_number):\n    n = 0\n    for i, num in enumerate(account_number):\n        n += int(num) * (i % 6 + 2)\n\n    checksum = 11 - (n % 11)\n    if checksum == 10:\n        return 0\n    elif checksum == 11:\n        return 5\n    else:\n        return checksum",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0003464046428066581,
      "p_css": 4.7919621263835095e-06,
      "p_html": 0.0007191586986456431,
      "p_java": 0.00016233827071920122,
      "p_javascript": 0.00021067930064580997,
      "p_matlab": 0.37546696535807417,
      "p_python": 0.6214253386365987,
      "p_sql": 0.0015378838750506026,
      "p_typescript": 0.00012643925533298634
    },
    {
      "text": "import json\n \n# parse json file\ndata = json.loads(<input>)\n \n# print key-value pairs for each item in json string\nfor item in data['data']:\n    print('ID:', item['id'])\n    print('Name:', item['name'])\n    print('Age:', item['age'])",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.0127241575102195e-06,
      "p_css": 0.9963878783632389,
      "p_html": 0.0021463425505474586,
      "p_java": 2.807732557836943e-05,
      "p_javascript": 2.2635011529629947e-06,
      "p_matlab": 3.2160259299394097e-06,
      "p_python": 0.001422422165081472,
      "p_sql": 8.632680228756905e-06,
      "p_typescript": 1.546640845025525e-07
    },
    {
      "text": "def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(len(list)-1):\n            if list[j]>list[j+1]:\n                list[j],list[j+1] = list[j+1],list[j]\n    return list\n\nif __name__ == '__main__':\n    list = [3,5,2,4,7,5]\n    print(bubble_sort(list))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.460606080535882e-06,
      "p_css": 3.273201216621056e-06,
      "p_html": 2.375856092447463e-05,
      "p_java": 5.387635388680971e-07,
      "p_javascript": 3.602695111542432e-06,
      "p_matlab": 0.9849173812116135,
      "p_python": 0.013090163683617971,
      "p_sql": 0.0019531146984998876,
      "p_typescript": 5.706579396683553e-06
    },
    {
      "text": "import base64\n\ndef encode_string(string):\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.087452710681401e-12,
      "p_css": 2.1693468889695e-06,
      "p_html": 1.1644860225226328e-06,
      "p_java": 0.9998178065761465,
      "p_javascript": 2.5777148373171874e-10,
      "p_matlab": 2.104745494231693e-08,
      "p_python": 0.00017641520204182926,
      "p_sql": 2.1772854959932858e-06,
      "p_typescript": 2.457940900568021e-07
    },
    {
      "text": "for i in range(1, 11):\n    if i % 2 != 0:\n        print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.379839654179141e-21,
      "p_css": 6.1351192684115876e-30,
      "p_html": 2.130406467552319e-20,
      "p_java": 1.2326546456504435e-22,
      "p_javascript": 3.330245168218143e-22,
      "p_matlab": 0.9999999999999998,
      "p_python": 1.5817524948768142e-16,
      "p_sql": 8.900544194337892e-23,
      "p_typescript": 1.5276440602791175e-21
    },
    {
      "text": "def extract_numbers(s): \n    return [int(el) for el in s.split(',') if el.lstrip('-').isnumeric()]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.047072085887586504,
      "p_css": 0.03488107748639124,
      "p_html": 0.024868666523362525,
      "p_java": 0.25666714857527695,
      "p_javascript": 0.008559772224728972,
      "p_matlab": 0.00230138365813145,
      "p_python": 0.60834863233673,
      "p_sql": 0.004464179268647721,
      "p_typescript": 0.012837054039144764
    },
    {
      "text": "class DecimalToBinary:\n  def __init__(self, num):\n    self.num = num\n\n  def convert(self):\n    if self.num > 1:\n      self.convert(self.num // 2)\n    print(self.num % 2, end='')\n\nnumber = DecimalToBinary(14)\nnumber.convert()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.409971865444836e-05,
      "p_css": 2.190042680547054e-05,
      "p_html": 0.015045912002157347,
      "p_java": 9.066286635548653e-06,
      "p_javascript": 2.386284121232278e-05,
      "p_matlab": 0.3254420233968784,
      "p_python": 0.6410541135581557,
      "p_sql": 0.018110736457856134,
      "p_typescript": 0.00019828531164477105
    },
    {
      "text": "def diff(a, b): \n   return abs(a - b) \n  \na = 21\nb = 49\n  \nprint(diff(a, b)) # Output 28",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03574254013261036,
      "p_css": 0.0767584506799904,
      "p_html": 0.0306919339626958,
      "p_java": 0.0014198743753200736,
      "p_javascript": 0.0007114979758232462,
      "p_matlab": 0.1398500399272176,
      "p_python": 0.7097126175193451,
      "p_sql": 0.0027869508726929655,
      "p_typescript": 0.0023260945543043046
    },
    {
      "text": "def sum_list(numbers):\n  summed_value = 0\n  for num in numbers:\n    summed_value += num\n  return summed_value",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0348052060181456e-05,
      "p_css": 2.020754857958724e-09,
      "p_html": 7.299441946029062e-05,
      "p_java": 0.008040237939905923,
      "p_javascript": 0.00011649203386481874,
      "p_matlab": 0.9040655493731294,
      "p_python": 0.08765219319100746,
      "p_sql": 2.6213606028666718e-05,
      "p_typescript": 1.596936378840098e-05
    },
    {
      "text": "def find_unique_combos(lst):\n    combos = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            combos.append(lst[i:j])\n    return list(set(tuple(x) for x in combos))\n\nprint(find_unique_combos([1,2,3,4]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.659477588787252e-06,
      "p_css": 8.089008019903789e-06,
      "p_html": 3.527059991228636e-05,
      "p_java": 4.7336310600634527e-07,
      "p_javascript": 8.332190536489726e-07,
      "p_matlab": 0.3081893574444026,
      "p_python": 0.691644671336261,
      "p_sql": 0.00010712263240921433,
      "p_typescript": 7.522919246602039e-06
    },
    {
      "text": "class VendingMachine:\n    def __init__(self):\n        self.coins_inserted = 0\n\n    def insert_coins(self, quarters, dimes):\n        self.coins_inserted += quarters * 25 + dimes * 10\n\n    def get_coins_inserted(self):\n        return self.coins_inserted",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.1631627114421125e-06,
      "p_css": 0.001214634910913333,
      "p_html": 0.03269751043769618,
      "p_java": 5.499607596182869e-08,
      "p_javascript": 1.7448533401008677e-07,
      "p_matlab": 2.8199553247651634e-09,
      "p_python": 0.8538463316803248,
      "p_sql": 0.11223722551819715,
      "p_typescript": 2.9019887918712386e-06
    },
    {
      "text": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef detect_loop(head):\n    slow_ptr = head\n    fast_ptr = head\n\n    #check if the linked list is empty\n    if head is None:\n        return False\n\n    #iterate over the list\n    while fast_ptr is not None and fast_ptr.next is not None:\n        slow_ptr = slow_ptr.next\n        fast_ptr = fast_ptr.next.next\n       \n        #if the slow and fast pointer are pointing to the same node, then there is a loop\n        if slow_ptr == fast_ptr:\n            return True\n    \n    return False",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00034972344270992886,
      "p_css": 0.022536808685773804,
      "p_html": 0.48596275592921756,
      "p_java": 0.00018967503078791778,
      "p_javascript": 0.003718380904333185,
      "p_matlab": 0.00023380082540409996,
      "p_python": 0.297277354471648,
      "p_sql": 0.0743432011490367,
      "p_typescript": 0.11538829956108886
    },
    {
      "text": "def find_binary_representation(num):\n    # base case \n    if num == 0: \n        return 0\n  \n    # stores the binary representation\n    bin_rep = \"\"  \n  \n    # to store the remainder \n    rem = 0\n  \n    while (num != 0): \n        # calculate remainder\n        rem = num % 2\n        bin_rep += str(rem)\n        num //= 2\n  \n    # reverse the string and return it\n    bin_rep = bin_rep[::-1]\n    return bin_rep\n\n\n# Main program\nnum = 42\nbinary_rep = find_binary_representation(num)\nprint(binary_rep)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00024070736463491482,
      "p_css": 2.609472829905442e-07,
      "p_html": 0.00012102653367452573,
      "p_java": 4.873670882558708e-05,
      "p_javascript": 6.222081334934564e-05,
      "p_matlab": 0.9618647176069407,
      "p_python": 0.030243722497789848,
      "p_sql": 0.00010707238259510829,
      "p_typescript": 0.007311535144907109
    },
    {
      "text": "def generate_prime_sequence(length):\n prime_sequence = []\n prime_number = 2\n while len(prime_sequence) < length:\n  is_prime = True\n  for i in range(2, int(prime_number/2) + 1):\n    if prime_number % i == 0:\n      is_prime = False\n      break\n  if is_prime:\n    prime_sequence.append(prime_number)\n  prime_number += 1\n return prime_sequence\n\nprint(generate_prime_sequence(8))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001889996695297675,
      "p_css": 0.0004952800150697417,
      "p_html": 0.001933565993900187,
      "p_java": 0.004322936507686273,
      "p_javascript": 0.002439791908292485,
      "p_matlab": 0.01791164612800831,
      "p_python": 0.9697837784070903,
      "p_sql": 0.0006624675896745883,
      "p_typescript": 0.0005605367549804759
    },
    {
      "text": "def average_list_items(list_items):\n  list_length = len(list_items)\n  list_sum = sum(list_items)\n  average = list_sum/list_length\n  return average",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006272173392943834,
      "p_css": 0.030717659699880967,
      "p_html": 0.01522611722118319,
      "p_java": 0.004233585569552911,
      "p_javascript": 0.0031573929271925248,
      "p_matlab": 0.0027832651039420594,
      "p_python": 0.9256515349410077,
      "p_sql": 0.003134499698808411,
      "p_typescript": 0.00882377144548845
    },
    {
      "text": "d = {'Name': 'John', 'Age': 30, 'City': 'New York'}\n \nfor key, value in d.items():\n    print(f'{key}: {value}')",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 2.1550724462796512e-07,
      "p_css": 0.9995502088559007,
      "p_html": 7.06289285322482e-07,
      "p_java": 2.534228197629295e-07,
      "p_javascript": 4.535994099070456e-08,
      "p_matlab": 0.00044842705051188845,
      "p_python": 2.263600875061957e-09,
      "p_sql": 1.1649324754984843e-07,
      "p_typescript": 2.475744804766735e-08
    },
    {
      "text": "def pounds_to_kilos(pounds):\n  return pounds * 0.453592\n\nwhile True:\n  pounds = float(input(\"Enter a weight in pounds: \"))\n  print(f\"{pounds} lbs = {pounds_to_kilos(pounds)} kgs\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0033760616546078294,
      "p_css": 0.002454706203032819,
      "p_html": 0.002764068204129417,
      "p_java": 1.3196699257708504e-05,
      "p_javascript": 5.992300808261256e-05,
      "p_matlab": 6.868795268347096e-05,
      "p_python": 0.9910462910374492,
      "p_sql": 0.00019479018536604524,
      "p_typescript": 2.2275055390986827e-05
    },
    {
      "text": "def longest_word(list_words):\n    longest_word = max(list_words, key=len)\n    print(\"Length of longest word: \" + str(len(longest_word)))\n    print(\"Longest Word: \" + longest_word)\n\nlist_words = [\"laptop\", \"computer\", \"keyboard\"]\nlongest_word(list_words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002283144624594214,
      "p_css": 0.002129091369999227,
      "p_html": 0.0023339204622618375,
      "p_java": 5.428157480010393e-05,
      "p_javascript": 0.002795281860341589,
      "p_matlab": 7.04548193839439e-05,
      "p_python": 0.988207126205902,
      "p_sql": 0.0016436204136229997,
      "p_typescript": 0.00048307866909391066
    },
    {
      "text": "import json\nimport requests\n\ndef lambda_handler(event, context):\n\n# Get the city name from the event\n city_name = event['request']['intent']['slots']['city']['value']\n\n# Make an API call for weather data\n response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid=<your_app_id_here>')\n response_json = response.json()\n\n# Get temperature, humidity, and wind speed\n temp = response_json['main']['temp']\n humidity = response_json['main']['humidity']\n wind_speed = response_json['wind']['speed']\n\n# Create the response\n response = {\n 'version': '1.0',\n 'response': {\n 'outputSpeech': {\n 'type': 'PlainText',\n 'text': f'The temperature is {temp}, the humidity is {humidity}, and the wind speed is {wind_speed} in {city_name}.'\n }\n }\n }\n\nreturn response",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00038136854722191116,
      "p_css": 0.9771854302457637,
      "p_html": 0.0003537886559013851,
      "p_java": 1.4746485505707718e-05,
      "p_javascript": 0.0005021279086475117,
      "p_matlab": 0.0004135856522202052,
      "p_python": 0.000920557225830536,
      "p_sql": 0.0005952413447076575,
      "p_typescript": 0.019633153934201706
    },
    {
      "text": "def convert_list_to_dict(list):\n    final_dict = {}\n\n    for index, value in enumerate(list):\n        final_dict.update({index: value})\n\n    return final_dict\n\nlist = [1,2,3,4,5,6]\nlist_dict = convert_list_to_dict(list)\nprint(list_dict)",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 8.44219274236374e-06,
      "p_css": 0.00012198494447549865,
      "p_html": 8.004016844406909e-05,
      "p_java": 4.6918244716158197e-07,
      "p_javascript": 2.0557978529024285e-05,
      "p_matlab": 0.9993988309221129,
      "p_python": 2.4453854044449657e-07,
      "p_sql": 0.00036125918248285224,
      "p_typescript": 8.170890225644753e-06
    },
    {
      "text": "strings = [\"string1\", \"string2\", \"string3\"]\nfor s in strings:\n    print(s)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011366731866035487,
      "p_css": 0.011998611009824994,
      "p_html": 0.0041714144512546465,
      "p_java": 0.00012637231963505055,
      "p_javascript": 0.0006628133419517156,
      "p_matlab": 0.14778821984612306,
      "p_python": 0.8247568579133627,
      "p_sql": 0.00635521871528733,
      "p_typescript": 0.0030038192159570535
    },
    {
      "text": "def count_words(sentence):\n  words = sentence.split()\n  num_words = len(words)\n  total_len = 0\n  for word in words:\n    total_len += len(word)\n  avg_word_len = total_len / num_words\n  return (num_words, avg_word_len)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00224549292255238,
      "p_css": 0.004662822891499649,
      "p_html": 0.008425368786080889,
      "p_java": 2.805270651500796e-05,
      "p_javascript": 0.00024254860827154778,
      "p_matlab": 0.00022989793145763304,
      "p_python": 0.9518612429921401,
      "p_sql": 0.03219590082550885,
      "p_typescript": 0.00010867233597390678
    },
    {
      "text": "def get_largest_diff(list_of_numbers):\n  max_number = list_of_numbers[0]\n  min_number = list_of_numbers[0]\n  \n  for num in list_of_numbers:\n    if num > max_number:\n      max_number = num\n    if num < min_number:\n      min_number = num\n  \n  return (max_number - min_number)\n  \nlist_of_numbers = [1,2,5,4,10,8]\nprint(get_largest_diff(list_of_numbers)) # 9",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.0756915737822e-07,
      "p_css": 2.449551170149967e-09,
      "p_html": 1.0361981379430749e-06,
      "p_java": 7.715850795443309e-08,
      "p_javascript": 1.9637917145552773e-07,
      "p_matlab": 0.9999876686512307,
      "p_python": 9.78656913440673e-06,
      "p_sql": 1.3132982114399892e-07,
      "p_typescript": 5.936952878436786e-07
    },
    {
      "text": "# import necessary libraries\nfrom pyswarms.single.global_best import GlobalBestPSO\nfrom sklearn.base import BaseEstimator\n\nclass PSOOptimizer(BaseEstimator):\n    def __init__(self, n_particles=10, dimensions=3, options=None):\n        self.n_particles = n_particles\n        self.dimensions = dimensions\n        self.options = options\n        \n    def optimize(self, obj_func, iters, lb, ub):\n        # Set-up optimizer\n        optimizer = GlobalBestPSO(n_particles=self.n_particles, dimensions=self.dimensions, \n                                    options=self.options)\n                \n        # Perform optimization\n        cost, pos = optimizer.optimize(obj_func, iters, lb, ub)\n        \n        # Return optimized parameters\n        return cost, pos",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.01057461063463436,
      "p_css": 0.3262851904816519,
      "p_html": 0.4063387688025405,
      "p_java": 6.197430611508855e-05,
      "p_javascript": 0.000116263064278242,
      "p_matlab": 4.6983084982250065e-05,
      "p_python": 0.10806727965415391,
      "p_sql": 0.14557017207264522,
      "p_typescript": 0.002938757898998581
    },
    {
      "text": "def is_in_range(num, a, b):\n    if num >= a and num <= b:\n        return True\n    else:\n        return False\n\nresult = is_in_range(4, 2, 4)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.936879929498318e-06,
      "p_css": 4.039394246024761e-07,
      "p_html": 4.806735687688135e-05,
      "p_java": 5.540114657509596e-07,
      "p_javascript": 2.8957186560418942e-06,
      "p_matlab": 0.14038239818421458,
      "p_python": 0.8595033823153776,
      "p_sql": 9.979538401068907e-06,
      "p_typescript": 4.4382055654162976e-05
    },
    {
      "text": "def get_common_elements(list_of_lists): \n    commons = []\n    for i in range(len(list_of_lists)): \n        commons = list(set(commons).intersection(list_of_lists[i]))\n    return commons",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003545015642448545,
      "p_css": 0.0001996786035865563,
      "p_html": 0.0008343978822216962,
      "p_java": 3.929810894785485e-05,
      "p_javascript": 6.93444935581862e-05,
      "p_matlab": 0.0680124756593128,
      "p_python": 0.9288830310759572,
      "p_sql": 0.0012435362165446136,
      "p_typescript": 0.0003637363956262221
    },
    {
      "text": "import cv2\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n \n#Creating the model\nmodel = Sequential()\n \n#Adding the first layer\nmodel.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n \n#Adding the second layer\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n \n#Adding the third layer\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n \n#Flattening Layer\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\n \n#Output Layer\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n \n#Compiling the model\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n \n#Train the model\nmodel.fit_generator(training_set,\n                         steps_per_epoch=1000,\n                         epochs=25,\n                         validation_data=test_set,\n                         validation_steps=200)\n \n#Prediction\ndef predict(path):\n img_array = cv2.imread(path)\n img_array = cv2.resize(img_array, (64, 64))\n img_array = np.array(img_array).reshape(-1, 64, 64, 3)\n predicted_array = model.predict(img_array)\n if predicted_array[0][0] == 1:\n  print('Face Detected')\n else:\n  print('Face not detected')",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.6408046958483217,
      "p_css": 0.0007475887210980812,
      "p_html": 0.0254853083596727,
      "p_java": 0.07175081175236059,
      "p_javascript": 0.00022136100132643462,
      "p_matlab": 8.360838291289742e-08,
      "p_python": 0.2603248746865901,
      "p_sql": 9.90308164537467e-07,
      "p_typescript": 0.0006642857140829862
    },
    {
      "text": "# Imports\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Function to crawl the website\ndef crawl_website(url):\n\t# Make a request to the website\n\tr = requests.get(url)\n\n\t# Parse the html\n\tsoup = BeautifulSoup(r.content)\n\n\t# Retrieve all the text\n\ttext = soup.get_text()\n\n\t# Count the number of words\n\tword_count = len(text.split())\n\t\n\treturn word_count",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 3.1282826445131604e-06,
      "p_css": 0.4343822361153312,
      "p_html": 0.056718524875443245,
      "p_java": 1.1343014930829696e-05,
      "p_javascript": 0.12026948789495338,
      "p_matlab": 1.1733821240043178e-06,
      "p_python": 0.04319102644323598,
      "p_sql": 0.019356618946640775,
      "p_typescript": 0.32606646104469605
    },
    {
      "text": "# Python program to print the first 10 Fibonacci numbers\n    \ndef Fibonacci(n): \n  f1 = 0\n  f2 = 1\n  if (n < 1): \n    return\n  for x in range(0, n): \n    print(f2, end = \" \") \n    next = f1 + f2 \n    f1 = f2 \n    f2 = next\n    \nFibonacci(10)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1776668338025007,
      "p_css": 0.0005289008843300111,
      "p_html": 0.0014145190210270548,
      "p_java": 2.8127732838650597e-05,
      "p_javascript": 0.0007584110343614018,
      "p_matlab": 0.0008653186201882796,
      "p_python": 0.8176517724610151,
      "p_sql": 0.0008712496396463329,
      "p_typescript": 0.00021486680409243969
    },
    {
      "text": "def starPattern(n):\n    # outer loop to handle number of rows\n    for i in range(0, n):\n        # inner loop to handle number of columns\n        for j in range(0, i + 1):\n            # printing stars\n            print(\"* \", end=\"\")\n        # ending line after each row\n        print(\"\\r\")\n\n# Driver code\nn = 5\nstarPattern(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.052157696777654e-05,
      "p_css": 7.680842701472419e-05,
      "p_html": 0.00016110021888319126,
      "p_java": 1.924122089076366e-05,
      "p_javascript": 0.00021165951060320167,
      "p_matlab": 0.0033930679566976352,
      "p_python": 0.9936381711458435,
      "p_sql": 0.0005110173806126237,
      "p_typescript": 0.0019384125624867527
    },
    {
      "text": "def fibonacci_numbers(n):\n result = []\n a, b = 0, 1\n while a < n:\n result.append(a)\n a, b = b, a+b\n return result\n\nn = 10\nfibonacci = fibonacci_numbers(n)\n\nprint(fibonacci)\n\n# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00010018279702072893,
      "p_css": 0.00351940347773526,
      "p_html": 0.00019424410508900276,
      "p_java": 1.0603318736331352e-05,
      "p_javascript": 1.1649326715769515e-05,
      "p_matlab": 0.00018885387484317566,
      "p_python": 0.9958866437234899,
      "p_sql": 6.0325700864264156e-05,
      "p_typescript": 2.80936755053825e-05
    },
    {
      "text": "def get_nth_item(lst, n):\n  \"\"\"\n  This function returns the nth item of a given list.\n  \"\"\"\n  return lst[n]",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0003175022883644637,
      "p_css": 0.00024249402769966307,
      "p_html": 0.0015791726838575461,
      "p_java": 0.00012074639412760493,
      "p_javascript": 0.6444067382250699,
      "p_matlab": 3.589971730092929e-05,
      "p_python": 0.351679056577839,
      "p_sql": 0.0005760360422689009,
      "p_typescript": 0.001042354043471865
    },
    {
      "text": "target_sum = 10\n\ncurrent_sum = 0\ni = 0\n\nwhile current_sum < target_sum:\n  current_sum = current_sum + i\n  i = i + 1\n\nprint(i - 1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01301140444934898,
      "p_css": 0.048941982396202025,
      "p_html": 0.04023288209911014,
      "p_java": 0.004770656768017758,
      "p_javascript": 0.010994546832834483,
      "p_matlab": 0.02679915504249867,
      "p_python": 0.8202748130550571,
      "p_sql": 0.004251967403847008,
      "p_typescript": 0.030722591953083873
    },
    {
      "text": "def prod(a, b):\n    return a*b\n\ndef total(mylist):\n    sum = 0\n    for num in mylist:\n        sum += num\n    return sum",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.948847222475911e-15,
      "p_css": 2.2483160807219105e-18,
      "p_html": 2.1450098060571885e-15,
      "p_java": 2.879623564434897e-14,
      "p_javascript": 1.778036424252472e-15,
      "p_matlab": 0.9999999999999625,
      "p_python": 2.7632350889839058e-17,
      "p_sql": 7.436147718358548e-17,
      "p_typescript": 2.8107243102253003e-15
    },
    {
      "text": "def filter_prime_numbers(numbers):\n    primes = []\n    for num in numbers:\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9377376059233505e-05,
      "p_css": 2.2613972401610442e-08,
      "p_html": 0.00011326160353044551,
      "p_java": 0.0038170125503210685,
      "p_javascript": 7.955978178832092e-06,
      "p_matlab": 0.2737745259284711,
      "p_python": 0.7222580586957894,
      "p_sql": 5.195518899219053e-06,
      "p_typescript": 4.589734778123585e-06
    },
    {
      "text": "String methods include capitalize(), count(), endswith(), find(), format(), index(), isalnum(), join(), lower(), replace(), split(), startswith(), strip(), title(), upper(), and zfill().",
      "y_true": "sql",
      "pred_label": "html",
      "p_bash": 0.010334698713211006,
      "p_css": 0.134420015091197,
      "p_html": 0.49522769824647334,
      "p_java": 0.11309153397438655,
      "p_javascript": 2.018010323564481e-05,
      "p_matlab": 0.00032205440534020693,
      "p_python": 0.10592635636660921,
      "p_sql": 0.07447750898046955,
      "p_typescript": 0.06617995411907746
    },
    {
      "text": "def difference(string1, string2):\n  new_string = ''\n  \n  for char in string2:\n    if char not in string1:\n      new_string += char\n      \n  return new_string\n\nstring1 = 'jello'\nstring2 = 'hello'\n\nprint(difference(string1, string2)) # Output: 'e'",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003833298873419468,
      "p_css": 0.002680025015315033,
      "p_html": 0.002466459040424846,
      "p_java": 3.7785084426451285e-06,
      "p_javascript": 0.0011898484435584182,
      "p_matlab": 0.001480687830675779,
      "p_python": 0.9867418456045774,
      "p_sql": 0.0012962224644469894,
      "p_typescript": 0.00030783421913940367
    },
    {
      "text": "# import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression \n\n# read dataset\ncancer_data = pd.read_csv(\"cancer_data.csv\")\n\n# split into train and test sets\nx_train, x_test, y_train, y_test = train_test_split(cancer_data.iloc[:,:-1], cancer_data.iloc[:,-1], test_size=0.25, random_state=0)\n\n# create the model \nlr_model = LogisticRegression() \nlr_model.fit(x_train,y_train)\n\n# accuracy\naccuracy = lr_model.score(x_test,y_test)\nprint(accuracy)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.024382821578840985,
      "p_css": 0.33344890717398334,
      "p_html": 0.016484959064899905,
      "p_java": 1.6598307521493113e-05,
      "p_javascript": 5.86568685467305e-05,
      "p_matlab": 0.0001037336334656705,
      "p_python": 0.5820735691316664,
      "p_sql": 0.0006049264314833123,
      "p_typescript": 0.04282582780959241
    },
    {
      "text": "def concatenate_strings(string1, string2):\n    return string1 + string2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0014804413987537315,
      "p_css": 0.0027050874713556473,
      "p_html": 0.003373558562067482,
      "p_java": 0.00048191482253153047,
      "p_javascript": 0.0012129851629098124,
      "p_matlab": 0.0004019308619565074,
      "p_python": 0.9859865143156761,
      "p_sql": 0.002046218507830767,
      "p_typescript": 0.0023113488969184826
    },
    {
      "text": "def add(nums):\n    return nums[0] + nums[1]\n\nprint(add([5, 10]))  #Prints 15",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001569115156369311,
      "p_css": 0.0005334131326360103,
      "p_html": 0.0003928267237245202,
      "p_java": 0.004456619649187982,
      "p_javascript": 6.673139525392267e-05,
      "p_matlab": 1.3616968792208432e-08,
      "p_python": 0.9927787722786509,
      "p_sql": 0.00014075502636995546,
      "p_typescript": 6.175302083864303e-05
    },
    {
      "text": "def calc_avg(nums):\n    total = 0\n    for n in nums:\n        total += n\n \n    return total/len(nums)\n \navg = calc_avg([5, 10, 15, 20, 25])\nprint(avg)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.1326985826011182e-05,
      "p_css": 0.0006144152345794985,
      "p_html": 0.0001231613820683782,
      "p_java": 2.368704942955994e-06,
      "p_javascript": 8.580905916646343e-06,
      "p_matlab": 2.827318267884439e-05,
      "p_python": 0.9991619848617539,
      "p_sql": 1.9246202901759506e-05,
      "p_typescript": 2.064253933190679e-05
    },
    {
      "text": "def encrypt_message(message, key): \n    encrypted_message = \"\" \n      \n    for i in range(len(message)): \n        x = (ord(message[i]) + \n             ord(key[i % len(key)])) % 26\n        x += ord('A') \n        encrypted_message += chr(x) \n          \n    return encrypted_message",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00042570753181717157,
      "p_css": 0.005040419610899154,
      "p_html": 0.0015049184834978867,
      "p_java": 7.29354074662264e-05,
      "p_javascript": 0.000229994490147142,
      "p_matlab": 0.0028027673232315256,
      "p_python": 0.9868306089768544,
      "p_sql": 0.0027048441894225454,
      "p_typescript": 0.0003878039866638713
    },
    {
      "text": "import requests\n\n# send the request \nresponse = requests.get(\"http://example.com\")\n\n# get the source code of the website\ndata = response.text \n\n# write the source code into a file\nwith open('example_source.txt', 'w') as file:\n file.write(data)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 8.509459444206351e-06,
      "p_css": 0.018783946364026718,
      "p_html": 0.0008514810990942344,
      "p_java": 8.506677430355954e-05,
      "p_javascript": 8.011404929683468e-05,
      "p_matlab": 2.8186409808049677e-07,
      "p_python": 0.0009026658606643759,
      "p_sql": 0.00027740219071817156,
      "p_typescript": 0.9790105323383539
    },
    {
      "text": "string = \"Hello, World, I am here\"\n\nlist = string.split(\", \")\nprint(list)\n\n# Output\n['Hello', 'World', 'I am here']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.3514585008393823,
      "p_css": 0.006914991583947159,
      "p_html": 0.013174879846080166,
      "p_java": 2.442332552727591e-09,
      "p_javascript": 0.0008436737817570139,
      "p_matlab": 4.2375821406689655e-05,
      "p_python": 0.6166234859014885,
      "p_sql": 0.010789057356533181,
      "p_typescript": 0.0001530324270725216
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Define the inputs and labels\nX = data[['square_feet', 'beds', 'baths']]\ny = data['price']\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Test the model\npredictions = model.predict(X)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.16178361247198284,
      "p_css": 0.05163994087647819,
      "p_html": 0.0005448583755130143,
      "p_java": 8.470719693031564e-07,
      "p_javascript": 4.457490498170887e-06,
      "p_matlab": 8.825321240586468e-07,
      "p_python": 0.15765956798463823,
      "p_sql": 6.707886976665099e-08,
      "p_typescript": 0.6283657661179264
    },
    {
      "text": "import os\n\n# Create the root directory\nos.mkdir(\"root\")\n\n# Switch to the root directory\nos.chdir(\"root\")\n\n# Create two child directories\nos.mkdir(\"child_dir_1\")\nos.mkdir(\"child_dir_2\")",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.29076825760264546,
      "p_css": 0.05738769014838299,
      "p_html": 0.015303900965549528,
      "p_java": 0.0003562739205500299,
      "p_javascript": 0.005613662175319627,
      "p_matlab": 0.0004168631429437769,
      "p_python": 0.03762793488236693,
      "p_sql": 0.07258018397633108,
      "p_typescript": 0.5199452331859106
    },
    {
      "text": "import pyautogui\n\ndef get_mouse_pos():\n    x, y = pyautogui.position()\n    return (x, y)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011289872089589896,
      "p_css": 0.034743847176351116,
      "p_html": 0.010079637960149991,
      "p_java": 0.0006485182660201507,
      "p_javascript": 0.003586131202711916,
      "p_matlab": 0.0008851911727901879,
      "p_python": 0.9333203883774245,
      "p_sql": 0.001888604230578316,
      "p_typescript": 0.0035578095243840044
    },
    {
      "text": "\"\"\"\nWrite a class in Python to validate a given password\n\"\"\"\n\nclass PasswordValidator:\n    def __init__(self, password):\n        self.password = password\n\n    def validate(self):\n        is_valid = True\n        # Add code to check length, special characters, etc.\n        if len(self.password) < 8:\n            is_valid = False\n\n        return is_valid\n\npwd = PasswordValidator(\"12345\")\n\nif pwd.validate():\n    print(\"The password is valid\")\nelse:\n    print(\"The password is invalid\")",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.0037143787614507743,
      "p_css": 0.002660132003497577,
      "p_html": 0.005985739690301679,
      "p_java": 5.9983201035963326e-05,
      "p_javascript": 0.0047939416597597585,
      "p_matlab": 3.2236540959354495e-05,
      "p_python": 0.030425929462326706,
      "p_sql": 0.8670521549910256,
      "p_typescript": 0.08527550368964264
    },
    {
      "text": "def sum_list(nums):\n return sum(nums)\n\nnums = [1, 2, 3, 4, 5]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001434198516227685,
      "p_css": 0.0008021978222305397,
      "p_html": 0.00032285776631120694,
      "p_java": 0.00018255716524770438,
      "p_javascript": 0.00010187923183881947,
      "p_matlab": 7.951008975697573e-06,
      "p_python": 0.9980184704199718,
      "p_sql": 0.000176272957701895,
      "p_typescript": 0.0002443937760996625
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\nheaders = {'User-Agent': 'Mozilla/5.0'}\n\nresponse = requests.get(url, headers=headers)\nsoup = BeautifulSoup(response.text, 'lxml')\n\ndata = []\nfor item in soup.find_all('div', class_='blog-post'):\n    post_data = {\n        'title': item.h2.text,\n        'body': item.p.text,\n        'url': item.find('a')['href']\n    }\n    data.append(post_data)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 5.264785985583909e-13,
      "p_css": 0.6293259528274187,
      "p_html": 0.35967474062430876,
      "p_java": 0.010984329139216879,
      "p_javascript": 3.128226050730517e-06,
      "p_matlab": 8.75234645669306e-08,
      "p_python": 8.48971122798782e-06,
      "p_sql": 3.1153064206785632e-06,
      "p_typescript": 1.5664136530727818e-07
    },
    {
      "text": "import tensorflow as tf\n\n# Create example deep learning model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, (3,3), input_shape=(300, 300, 3)))\nmodel.add(tf.keras.layers.MaxPool2D(2, 2))\nmodel.add(tf.keras.layers.Conv2D(64, (3,3), input_shape=(150, 150, 3)))\nmodel.add(tf.keras.layers.MaxPool2D(2, 2))\n\n# Optimize model for size\nmodel.add(tf.keras.layers.Conv2D(32, (3,3), input_shape=(50, 50, 3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPool2D(2, 2))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Conv2D(64, (3,3), input_shape=(25, 25, 3),activation=\"relu\"))\nmodel.add(tf.keras.layers.MaxPool2D(2, 2))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Flatten())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.020436181372052473,
      "p_css": 0.004188591784458842,
      "p_html": 0.04652053561372221,
      "p_java": 0.1262142285009494,
      "p_javascript": 0.0001112097650966864,
      "p_matlab": 5.240556878870538e-06,
      "p_python": 0.7935919341437837,
      "p_sql": 3.1584758700578255e-05,
      "p_typescript": 0.008900493504357258
    },
    {
      "text": "def minValue(root):\n  if root is None: # check if tree is empty\n   return -1\n  curr = root         \n  while curr.left:   # until we reach the leftmost leaf\n   curr = curr.left\n  return curr.data\n\n# Driver Program \nif __name__ == '__main__':  \n  \n   root = Node(4) \n   root.left = Node(2) \n   root.right = Node(7) \n   root.left.left = Node(1) \n   root.left.right = Node(3) \n   root.right.left = Node(6) \n   root.right.right = Node(8) \n  \n   print \"Minimum Element in BST is %d\" %(minValue(root))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005923961880938051,
      "p_css": 0.0037150063313246212,
      "p_html": 0.00413516356492415,
      "p_java": 0.000555429762364887,
      "p_javascript": 0.0025133108855807836,
      "p_matlab": 0.00332491270205906,
      "p_python": 0.9493603661318183,
      "p_sql": 0.026846978503399357,
      "p_typescript": 0.0036248702375907276
    },
    {
      "text": "class FrequencyTracker:\n    def __init__(self):\n        self.dictionary = {}\n    \n    def add_word(self,word):\n        if word in self.dictionary:\n            self.dictionary[word] += 1\n        else:\n            self.dictionary[word] = 1\n    \n    def get_frequency(self,word):\n        if word in self.dictionary:\n            return self.dictionary[word]\n        else:\n            return 0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0054338173094835625,
      "p_css": 0.2526428492248933,
      "p_html": 0.09587947956857987,
      "p_java": 7.358121426920083e-06,
      "p_javascript": 4.963403035473466e-05,
      "p_matlab": 0.00017151045602484605,
      "p_python": 0.562772176822962,
      "p_sql": 0.08220494818974598,
      "p_typescript": 0.0008382262765289002
    },
    {
      "text": "# Function to print the minimum number in a list \ndef min_in_list(list): \n    # Inialise minimum to first element in the list \n    min = list[0] \n  \n    # Traverse through the list from 1st index \n    # and update minimum if found \n    for i in range(len(list)): \n        if list[i] < min: \n            min = list[i] \n  \n    return min\n  \n# Driver Code \nlist = [5, 12, 3, 1, 8] \nprint (\"Minimum in the list is \", min_in_list(list))",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 0.0002065434098351922,
      "p_css": 0.0002001904909859033,
      "p_html": 0.00043920866938340896,
      "p_java": 1.1802207375133287e-05,
      "p_javascript": 0.27883062667934416,
      "p_matlab": 0.6126433633620537,
      "p_python": 0.05495147646308986,
      "p_sql": 0.026971696588541944,
      "p_typescript": 0.0257450921293907
    },
    {
      "text": "def longest_common_substring(strs):\n substr = strs[0]\n for s in strs[1:]:\n i = 0\n while i < min(len(substr), len(s)) and substr[i] == s[i]:\n i += 1\n substr = substr[:i]\n \n return substr\n\nprint(longest_common_substring([\"hello\", \"hi\", \"hell\"])) # Prints \"hell\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.024493123027056835,
      "p_css": 0.013813027992230435,
      "p_html": 0.010612548610138516,
      "p_java": 5.3522093497922844e-05,
      "p_javascript": 0.005286728482351276,
      "p_matlab": 0.010537912715299382,
      "p_python": 0.9147999592213226,
      "p_sql": 0.002121102040511437,
      "p_typescript": 0.018282075817591597
    },
    {
      "text": "# Define a function to get recommendations for a given user \ndef get_recommendations(user): \n    # Get the user preferences \n    user_preferences = user.get_preferences() \n  \n    # Initialize an empty list for recommendations \n    recommendations = [] \n    \n    # Get all products of type 'clothing' \n    clothing_products = get_all_products('clothing') \n  \n    # Iterate over the clothing products \n    for product in clothing_products: \n        # Calculate the similarity score \n        score = calculate_similarity_score(product, user_preferences) \n  \n        # If the score is greater than 0, add the product to the list of recommendations \n        if score > 0: \n            recommendations.append(product) \n  \n    # Return the list of recommendations \n    return recommendations",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0021095058139707985,
      "p_css": 0.22926646504703532,
      "p_html": 0.006840082352108006,
      "p_java": 0.00031927348627317664,
      "p_javascript": 0.4728708033162598,
      "p_matlab": 0.0028353650419151947,
      "p_python": 0.051149757825959485,
      "p_sql": 0.06357089623353089,
      "p_typescript": 0.17103785088294732
    },
    {
      "text": "def classify_sentence(sentences):\n    \n    labels = []\n    for sentence in sentences:\n        # add code to classify the sentence\n        # e.g. using a sentiment classifier\n        labels.append(\"positive\" if is_positive(sentence) else \"negative\")\n    \n    return labels",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0008748166762782912,
      "p_css": 0.0069047083415484,
      "p_html": 0.0010271664775879765,
      "p_java": 0.0011127856727800825,
      "p_javascript": 0.006906957968197967,
      "p_matlab": 0.0025906828659515995,
      "p_python": 0.024171179520109602,
      "p_sql": 0.006545446469163338,
      "p_typescript": 0.9498662560083828
    },
    {
      "text": "import sys\n\n# collect the user's input\nuser_input = input('Enter your command: ')\n\n# process the user's input and execute the corresponding command\nif user_input == 'exit':\n    sys.exit()\nelif user_input == 'help':\n    print('This is a helpful message.')\nelse:\n    print('Command not recognized, try again.')",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.2844712605707156,
      "p_css": 0.11815682342028161,
      "p_html": 0.041991343658910336,
      "p_java": 0.0002448244784589706,
      "p_javascript": 0.0013798317534797879,
      "p_matlab": 0.00078817517150532,
      "p_python": 0.22534507829761588,
      "p_sql": 0.023558618370934276,
      "p_typescript": 0.30406404427809824
    },
    {
      "text": "def pow(num, pow):\n    result = 1\n    for i in range(pow):\n        result *= num\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.3352574188396581e-06,
      "p_css": 3.2516607289434316e-07,
      "p_html": 6.2134104510407995e-06,
      "p_java": 1.909209319635572e-07,
      "p_javascript": 7.351518947911309e-07,
      "p_matlab": 0.22007761355649302,
      "p_python": 0.7798973183565571,
      "p_sql": 1.2990229562077312e-05,
      "p_typescript": 3.2779506183239465e-06
    },
    {
      "text": "#Python\n\ndef remove_duplicates(arr):\n    new_arr = []\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n    return new_arr\n\narr = [1, 2, 3, 1, 4, 2, 3]\nprint(\"The array without duplicates is:\", remove_duplicates(arr))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.669328662949928e-10,
      "p_css": 9.536200858733832e-11,
      "p_html": 5.717506024330417e-12,
      "p_java": 1.3047451759658579e-12,
      "p_javascript": 5.281819923131562e-11,
      "p_matlab": 0.9999999980856202,
      "p_python": 1.055276661513947e-09,
      "p_sql": 2.3966918233377454e-15,
      "p_typescript": 1.3696564171389637e-10
    },
    {
      "text": "class Stack:\n\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        if self.items:\n            return self.items.pop()\n        else:\n            return None\n    \n    def peek(self):\n        if self.items:\n            return self.items[-1]\n        else:\n            return None\n    \n    def size(self):\n        return len(self.items)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9819610028074236e-05,
      "p_css": 0.01649230619111155,
      "p_html": 0.01946940952817529,
      "p_java": 1.0519789942760924e-06,
      "p_javascript": 0.00017975225309601857,
      "p_matlab": 1.947554600685899e-06,
      "p_python": 0.7369308826563463,
      "p_sql": 0.2269017091510405,
      "p_typescript": 3.121076607365902e-06
    },
    {
      "text": "class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.02929720378672421,
      "p_css": 0.06661744746035057,
      "p_html": 0.049855279071786954,
      "p_java": 0.00848329160568625,
      "p_javascript": 0.006553198711212768,
      "p_matlab": 0.018622546558649786,
      "p_python": 0.77890826975364,
      "p_sql": 0.010243362822538082,
      "p_typescript": 0.03141940022941124
    },
    {
      "text": "def sort_strings(strings):\n    strings.sort()\n    return strings",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016441029153717046,
      "p_css": 0.012639813929575585,
      "p_html": 0.003304645954925261,
      "p_java": 0.000299133023803001,
      "p_javascript": 0.0008072776270690021,
      "p_matlab": 0.00031826175956035094,
      "p_python": 0.9754293807670154,
      "p_sql": 0.00279417055661568,
      "p_typescript": 0.002763213466064238
    },
    {
      "text": "#!/usr/bin/python2\n#\n#~~Player Functions~~\n\nfrom superRandom import superRandint, superChoice\nfrom time import sleep\nimport actions\nimport monsters\n\nclass CreatePlayer(object):\n  \n    def __init__(self, name):\n        self.health = 125\n        self.xp = 0 #TODO: use gained XP to gain levels\n        self.potions = 0\n        self.gold = 0\n        self.weapons = [\"dagger\"]\n        self.name = name\n        self.steps = 0\n        self.damage_dealt = 12 #not needed\n        self.current_weapon = \"dagger\"\n        self.dragon_attack = False\n        self.basilisk_attack = False\n        self.has_sword = False\n        self.has_pistol = False\n        self.has_rifle = False\n        self.run_away = 0\n        self.has_key = False\n\tself.turns = 0\n        \n    def __repr__(self):\n        return (\"\\nName: %s\\nHealth: %d\\nXP: %d\\nPotions: \"\n                \"%d\\nGold: %d\\nWeapons: %s\\nSteps: %d\\nCurr\"\n                \"ent Weapon: %s\\nDragon Attack: %s\\nBasili\"\n                \"skAttack: %s\\nHas Sword: %s\\nHas Pistol: \"\n                \"%s\\nHas Rifle: %s\\nTimes Run Away: %d\\nHa\"\n                \"s Key: %s\\nTurns: %s\" % (self.name,self.health,self.xp,\n                    self.potions,self.gold,self.weapons,\n                    self.steps,self.current_weapon,\n                    self.dragon_attack,self.basilisk_attack,\n                    self.has_sword,self.has_pistol,self.has_rifle,\n                    self.run_away,self.has_key,self.turns)\n                )\n\n    def find_gold(self):\n        amount = superRandint(1,25)\n        self.gold += amount\n        print \"\\nYou found %d gold coins, which brings you to a total of %d coins!\" % (amount, self.gold)\n        sleep(2)\n        return self\n    \n    def find_gold_debug(self,amount):\n        self.gold += amount\n        print \"\\nYou found %d gold coins, which brings you to a total of %d coins!\" % (amount, self.gold)\n        sleep(2)\n        return self\n    \n    def find_potions(self):\n        self.potions += 1\n        print \"\\nYou found a health potion! You now have %d potions in your inventory.\" % self.potions\n        sleep(2)\n        return self\n    \n    def find_weapon(self):\n        #TODO: add more weapons\n        weapons = [\"sword\",\"pistol\",\"rifle\"]\n        found = superChoice(weapons)\n        print \"\\nYou found a %s!\" % found\n        if found == \"sword\":\n            self.has_sword = True\n        elif found == \"pistol\":\n            self.has_pistol = True\n        else:\n            self.has_rifle = True\n        return self     \n    \n    def buy_potions(self):\n        print \"\\nGold: %d\" % self.gold\n        print \"Each potion costs 20 gold pieces and restores 25 HP.\"\n        amount = raw_input(\"\\nHow many would you like to purchase? \")\n        cost = int(amount) * 20\n        if self.gold >= int(cost):\n            self.gold = self.gold - int(cost)\n            self.potions += int(amount)\n            print \"\\n%d potions have been added to your inventory.\" % int(amount)\n            sleep(2)\n            return self\n        else:\n            print \"\\nSorry you don't have enough gold for %d potions!\" % int(amount)\n            sleep(2)\n            actions.visit_shop(self)\n    \n    def use_potion(self):\n        if self.potions > 0 and self.potions < 2:\n            self.potions -= 1\n            self.health += 25\n            print \"\\nYour health is now at %d\" % self.health\n        elif self.potions > 1:\n            print \"\\nYou currently have %d potions\" % self.potions\n            amount = int(raw_input(\"\\nHow many? \"))\n            raise_health = amount * 25\n            self.health += raise_health\n            self.potions -= amount\n            print \"\\nYour health is now at %d\" % self.health\n        else:\n            print \"\\nSorry you don't have any more potions!\"\n        sleep(2)\n        return self\n        \n    def list_inventory(self):\n        actions.clearscreen()\n        print (\"\\nName: %s\\n\"\n                \"Exp. Points: %d\\n\"\n                \"Potions Held: %d\\n\"\n                \"Gold: %d pieces\\n\"\n                \"Current Weapon: %s\" %(self.name, self.xp,\n                    self.potions, self.gold, self.current_weapon)\n                )\n        \n        if self.has_pistol is True and \"pistol\" not in self.weapons:\n            self.weapons.append(\"pistol\")\n        elif self.has_rifle is True and \"rifle\" not in self.weapons:\n            self.weapons.append(\"rifle\")\n        elif self.has_sword is True and \"sword\" not in self.weapons:\n            self.weapons.append(\"sword\") \n        print \"Weapons: %s\" % \", \".join(str(weapon) for weapon in self.weapons)\n        sleep(4)\n        \n    def low_health(self):\n        if self.health <= 60 and self.potions > 0:\n            print \"\\n*****DANGER*****\\n\"\n            choice = raw_input(\"\\nYour health is currently at %d, a\"\n                    \"nd you currently have %d potions in your inven\"\n                    \"tory. \\nWould you like to use one? \" % (self.health,self.potions)\n                    )\n            choice.lower()\n            if choice == 'y' or choice == 'yes':\n                self.use_potion()\n                return self\n            else:\n                print \"\\nOk tough guy.\"\n                sleep(2)\n                return self\n    \n    def set_health(self, newHealth):\n        self.health = newHealth\n        print \"\\nHealth set to %d\" % self.health\n        sleep(2)\n        return self\n    \n    def take_damage(self, damage):\n        self.health -= damage\n        print \"\\nYour health is now at %d\" % self.health\n        if self.health < 0:\n            print \"\\nYou were slain! Maybe you should carry more health potions with you next time!\\n\"\n            exit(0)\n        sleep(2)\n        return self\n    \n    def deal_damage(self,Monster):\n        if self.current_weapon == \"sword\":\n            damage_dealt = superRandint(13,30)\n        elif self.current_weapon == \"pistol\":\n            damage_dealt = superRandint(31,60)\n        elif self.current_weapon == \"rifle\":\n            damage_dealt = superRandint(61,120)\n        else: \n            damage_dealt = superRandint(1,12)\n        \n        Monster.take_damage(damage_dealt,self)\n        \n    def gain_xp(self,monster_name):\n        if monster_name == \"Dragon\":\n            gained = superRandint(40,150)\n        elif monster_name == \"Gremlin\":\n            gained = superRandint(1,35)\n        elif monster_name == \"Demon\":\n            gained = superRandint(15,50)\n        elif monster_name == \"Zombie\":\n            gained = superRandint(16,75)\n        else:\n            gained = superRandint(1,30)\n        self.xp += gained\n        print \"\\nYou gained %d XP!\" % gained\n        return self\n\n    def buy_weapon(self):\n        print \"\\nS)word:   25 Gold\"\n        print \"P)istol:  60 Gold\"\n        print \"R)ifle:   120 Gold\"\n        choice = raw_input(\"\\nWhich one would you like to purchase? \").lower()\n        if choice == 's'and self.gold >= 25:\n            self.gold -= 25\n            self.has_sword = True \n            print \"\\nA sword has been added to your inventory.\"\n            sleep(2)\n        elif choice == 'p' and self.gold >= 60:\n            self.gold -= 60\n            self.has_pistol = True\n            print \"\\nA pistol has been added to your inventory.\"\n            sleep(2)\n        elif choice == 'r' and self.gold >= 120:\n            self.gold -= 120\n            self.has_rifle = True\n            print \"\\nA rifle has been added to your inventory.\"\n            sleep(2)\n        else:\n            print \"\\nSorry you don't have enough gold for that purchase.\"\n            sleep(2)\n            actions.visit_shop(self)\n        return (self)\n    \n    def set_current_weapon(self): \n        print \"\\nCurrent Weapon: \" + self.current_weapon\n        #doesn't show correct weapons after a new weapon is found\n        #even if weapon is in inventory, method itself works perfectly.\n        print \"Available Weapons: %s\" % \", \".join(str(weapon) for weapon in self.weapons) \n        choice = raw_input(\"\\nUse weapon: \").lower()\n        if choice == \"sword\" and self.has_sword is True:\n            self.current_weapon = \"sword\"\n        elif choice == \"pistol\" and self.has_pistol is True:\n            self.current_weapon = \"pistol\"\n        elif choice == \"rifle\" and self.has_rifle is True:\n            self.current_weapon = \"rifle\"\n        elif choice == \"dagger\":\n            self.current_weapon = \"dagger\"\n        else:\n            print \"\\nSorry you don't currently have that weapon in your inventory.\"\n        print \"\\nCurrent weapon has been changed to: %s\" % self.current_weapon\n        sleep(2)\n        return self\n",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.304517065703061e-05,
      "p_css": 0.024168419418026294,
      "p_html": 0.02991099854262178,
      "p_java": 1.8676912100981277e-06,
      "p_javascript": 3.895953458022596e-06,
      "p_matlab": 8.203352609150459e-08,
      "p_python": 0.06741146013175596,
      "p_sql": 0.8781745838475523,
      "p_typescript": 0.00030564721119240556
    },
    {
      "text": "import datetime\nimport tkinter\n\nroot=tkinter.Tk()\nroot.title(\"Date\")\n\n# gets current date\ntoday = datetime.datetime.now()\n# formats date\ndate_string = today.strftime(\"%d/%m/%Y\")\n\n# creates label with date\ncurrent_date_label=tkinter.Label(root, text=date_string, fg=\"blue\")\n# pack/add label to app\ncurrent_date_label.pack()\n\n# run application\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011062730639492441,
      "p_css": 0.1513373742516797,
      "p_html": 0.06961268021634373,
      "p_java": 0.0028150544750984306,
      "p_javascript": 0.005233923022145874,
      "p_matlab": 0.00045327950789571914,
      "p_python": 0.6864820754738183,
      "p_sql": 0.047830766638839034,
      "p_typescript": 0.02517211577468671
    },
    {
      "text": "class FindMostFrequentWords:\n    def __init__(self, sentence):\n        self.sentence = sentence\n    \n    def find_most_frequent_words(self):\n        # Split the sentence into words \n        words = self.sentence.split()\n        \n        # Create a list of words and their frequencies\n        frequency_list = [[word, words.count(word)] \n        for word in set(words)] \n        \n        # Sort the list by frequency\n        frequency_list.sort(key=lambda x: x[1], reverse=True) \n        \n        # Return the top 5 most frequent words in the sentence\n        return frequency_list[:5] \n\nsentence = 'The the quick brown fox jumped over the lazy dog'\n\nfmf_words = FindMostFrequentWords(sentence) \ntop_5_words = fmf_words.find_most_frequent_words() \nprint(top_5_words) \n\n# Output:\n# [['the', 2], ['quick', 1], ['brown', 1], ['fox', 1], ['jumped', 1]]",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.000520031679513933,
      "p_css": 0.007264850245729583,
      "p_html": 0.017597397004752685,
      "p_java": 2.8277029251924664e-07,
      "p_javascript": 0.0007309632265377269,
      "p_matlab": 1.4159194328086908e-06,
      "p_python": 0.3962777475152069,
      "p_sql": 0.577223934835096,
      "p_typescript": 0.00038337680343774585
    },
    {
      "text": "def optimize(list1, list2):\n    best_combination = (0, 0)\n    best_value = -float('inf')\n    for x in list1:\n        for y in list2:\n            value = x + y\n            if value > best_value:\n                best_value = value\n                best_combination = (x, y)\n    return best_combination\n\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\nbest_combination = optimize(list1, list2)\nprint(best_combination)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.37256791867215e-07,
      "p_css": 6.3267418874558e-05,
      "p_html": 3.447787253312783e-06,
      "p_java": 1.151605127231465e-07,
      "p_javascript": 3.3002188977686946e-07,
      "p_matlab": 0.9999276777121288,
      "p_python": 6.582843431784969e-07,
      "p_sql": 2.7291628455471124e-06,
      "p_typescript": 1.337195360316646e-06
    },
    {
      "text": "def remove_extras(lst):\n    # Create a new list with unique items\n    unique_items = []\n    for item in lst:\n        if item not in unique_items:\n            unique_items.append(item)\n\n    # Return the list with unique items\n    return unique_items\n\ntest = [\"Apple\", \"Banana\", \"Orange\", \"Apple\", \"Banana\"]\nprint(remove_extras(test))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004968970862563386,
      "p_css": 0.08880683094740169,
      "p_html": 0.015559717484213753,
      "p_java": 4.391220849291251e-05,
      "p_javascript": 0.010220896718906613,
      "p_matlab": 0.0028921683290443687,
      "p_python": 0.877678751766013,
      "p_sql": 0.003062077147848448,
      "p_typescript": 0.001238748311823001
    },
    {
      "text": "def area_of_circle(radius):\n    return 3.14 * (radius ** 2)\n\nif __name__ == '__main__':\n    radius = 5\n    print(area_of_circle(radius)) # 78.5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0013773068203384883,
      "p_css": 0.00566880791520979,
      "p_html": 0.004519355188960125,
      "p_java": 0.0003329492955532589,
      "p_javascript": 0.0010297739931375627,
      "p_matlab": 0.00250700244124828,
      "p_python": 0.9800185004513183,
      "p_sql": 0.002503663151489965,
      "p_typescript": 0.002042640742744325
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# define url\nurl = \"https://www.example.com/news\"\n\n# send GET request to the specified url\npage = requests.get(url)\n\n# create BeautifulSoup object for parsing\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# extract all article titles, publication dates, and authors\nitems = soup.find_all('article')\nfor item in items:\n    title = item.find('h2').text\n    pub_date = item.find('time').text\n    author = item.find('span').text\n    print(title + ' | ' + pub_date + ' | ' + author)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 3.4227307339687704e-13,
      "p_css": 0.7527918995315367,
      "p_html": 0.1175434013883049,
      "p_java": 0.1292698449381842,
      "p_javascript": 3.154688390965991e-05,
      "p_matlab": 8.401740958638262e-08,
      "p_python": 0.00033562167810041645,
      "p_sql": 2.2736143713168075e-05,
      "p_typescript": 4.865418499173208e-06
    },
    {
      "text": "from sklearn.naive_bayes import GaussianNB\n\n# Create Gaussian Naive Bayes classifier with built-in datasets\ngnb = GaussianNB()\n# Train the model using the training sets\ngnb.fit(X_train, y_train)\n# Predict the output using the test set\ny_pred = gnb.predict(X_test)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.43307513190821906,
      "p_css": 0.002787020123653706,
      "p_html": 0.0013768303532974357,
      "p_java": 2.814924340609605e-06,
      "p_javascript": 0.002998339125754788,
      "p_matlab": 2.4889003807599457e-05,
      "p_python": 0.0011336567796407652,
      "p_sql": 3.146984826362605e-07,
      "p_typescript": 0.5586010030828035
    },
    {
      "text": "# define the substring array\nsubstrings = []\n\n# loop through the length of the string\nfor i in range(len(string)):\n    # create a loop to start with character 0 and end at character i\n    for j in range(i + 1):\n        # add all subsequences to the substring array\n        substrings.append(string[j:i + 1])\n\n# print the list of all possible subsequences\nprint(substrings)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.2396329097780744e-06,
      "p_css": 0.00046438227445453505,
      "p_html": 0.00017151272147838427,
      "p_java": 0.308717288457665,
      "p_javascript": 1.3684543432930642e-05,
      "p_matlab": 0.0022650543466479736,
      "p_python": 0.46238925618310234,
      "p_sql": 0.08918466172386393,
      "p_typescript": 0.13679092011644517
    },
    {
      "text": "x = 5\n\ndef evaluate_expression(x):\n    y = (1 / x) + (x ** 2)\n    return y",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001281678734368022,
      "p_css": 0.004467575099351219,
      "p_html": 0.0027522328425783676,
      "p_java": 0.0002772760234901933,
      "p_javascript": 0.0009061138879367185,
      "p_matlab": 0.0001607131107963322,
      "p_python": 0.9877550881203316,
      "p_sql": 0.0009403722690247907,
      "p_typescript": 0.0014589499121228176
    },
    {
      "text": "import concurrent.futures\n\ndef thread_function(script):\n  // Code to run the given script in parallel\n\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n  executor.map(thread_function, scripts)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.004748312327314512,
      "p_css": 0.00019864268387742852,
      "p_html": 0.002080483151667322,
      "p_java": 4.666453703865654e-07,
      "p_javascript": 0.00015670449422337823,
      "p_matlab": 7.306592185750631e-05,
      "p_python": 0.0020472535914629756,
      "p_sql": 5.557904642173905e-06,
      "p_typescript": 0.9906895132795844
    },
    {
      "text": "def normalize_vector(values):\n    length = 0\n    for v in values:\n        length += (v ** 2)\n    length = pow(length, 0.5)\n    if length == 0:\n        return [0 for v in values]\n    return [v / length for v in values]",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0003920381816464935,
      "p_css": 0.001625646228758083,
      "p_html": 0.00010631354925552084,
      "p_java": 3.973409764597808e-05,
      "p_javascript": 0.41440326220504237,
      "p_matlab": 0.2733302018150269,
      "p_python": 0.2747665252477147,
      "p_sql": 0.03517945266504553,
      "p_typescript": 0.00015682600986447913
    },
    {
      "text": "class Student():\n    \n    def __init__(self, name, grade):\n        self.name = name \n        self.grade = grade\n    \n    def get_name(self):\n        return self.name\n    \n    def get_grade(self):\n        return self.grade\n    \n    def set_grade(self, grade):\n        self.grade = grade",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007903140658549313,
      "p_css": 0.017868517546614487,
      "p_html": 0.04296016215945017,
      "p_java": 0.014014158341623797,
      "p_javascript": 1.5057741971800798e-06,
      "p_matlab": 1.585154174712449e-05,
      "p_python": 0.9016579682876623,
      "p_sql": 0.021925541752831564,
      "p_typescript": 0.0007659805300184137
    },
    {
      "text": "from flask import Flask\n \napp = Flask(__name__)\n \n@app.route('/', methods=['GET', 'POST'])\ndef handle_request():\n if request.method == 'POST':\n # Handles post request\n elif request.method == 'GET':\n # Handles get request\n \n if __name__ == '__main__':\n app.run(debug=True)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.4044494149486249,
      "p_css": 0.5909644050762105,
      "p_html": 0.00012335831708436016,
      "p_java": 7.629890001989678e-05,
      "p_javascript": 0.0001487319078221203,
      "p_matlab": 9.743323022233744e-06,
      "p_python": 0.0023773442790309234,
      "p_sql": 0.0018355093746070523,
      "p_typescript": 1.5193873577884945e-05
    },
    {
      "text": "def test_gt_5(num):\n    return num > 5",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.0895688162122836e-07,
      "p_css": 1.3724191129003904e-11,
      "p_html": 5.440912640978321e-07,
      "p_java": 3.380466683029909e-08,
      "p_javascript": 6.25905646624962e-08,
      "p_matlab": 0.9868827224012863,
      "p_python": 0.013115997402454015,
      "p_sql": 2.539469474629826e-07,
      "p_typescript": 1.7679221110513745e-07
    },
    {
      "text": "from sklearn import tree\nfrom sklearn.model_selection import train_test_split\n\n# Create the Decision Tree classifier \nclf = tree.DecisionTreeClassifier()\n\n# Train the classifier\nclf = clf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Evaluate model\naccuracy = clf.score(X_test, y_test)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9576578885584556,
      "p_css": 0.020681160076631525,
      "p_html": 0.0009479398237315289,
      "p_java": 4.3507584390966605e-06,
      "p_javascript": 0.0001234200173145814,
      "p_matlab": 2.810427378950511e-05,
      "p_python": 0.02011508091364691,
      "p_sql": 4.4120877348720115e-08,
      "p_typescript": 0.0004420114571139123
    },
    {
      "text": "# get 3 numbers\nnum1 = int(input(\"Please enter number 1: \"))\nnum2 = int(input(\"Please enter number 2: \"))\nnum3 = int(input(\"Please enter number 3: \"))\n\n# sort numbers\nsorted_nums = sorted([num1, num2, num3])\n\n# print sorted numbers\nprint(*sorted_nums, sep=', ')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00019742029385400202,
      "p_css": 0.00035360888778421956,
      "p_html": 0.00016660039516968008,
      "p_java": 0.25978946051124857,
      "p_javascript": 3.840236594052882e-05,
      "p_matlab": 9.866701254814452e-11,
      "p_python": 0.7394042256965186,
      "p_sql": 4.61170957744349e-05,
      "p_typescript": 4.164655042826362e-06
    },
    {
      "text": "def search(list, query): \n    return query in list",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 6.843975624964145e-05,
      "p_css": 0.03475218214956626,
      "p_html": 0.022196990024449737,
      "p_java": 0.010614482820321972,
      "p_javascript": 0.020984298469411477,
      "p_matlab": 0.2195411980039457,
      "p_python": 0.14012021571969213,
      "p_sql": 0.004750959204915564,
      "p_typescript": 0.5469712338514475
    },
    {
      "text": "def merge_sort(nums):\n    if len(nums) > 1:\n        mid_index = len(nums) // 2\n        left_half = nums[:mid_index]\n        right_half = nums[mid_index:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                nums[k] = left_half[i]\n                i += 1\n            else:\n                nums[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            nums[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            nums[k] = right_half[j]\n            j += 1\n            k += 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012196912266913412,
      "p_css": 0.004706645458226088,
      "p_html": 0.0022025997034932315,
      "p_java": 0.0003704670197613861,
      "p_javascript": 0.0005541355848058847,
      "p_matlab": 0.0008666882669695797,
      "p_python": 0.9853929500317077,
      "p_sql": 0.0007996969233643952,
      "p_typescript": 0.003887125784980269
    },
    {
      "text": "#!/usr/bin/env python\n\nfrom __future__ import division\nimport optparse, os\n\n#This script uses an aligned fasta file and a tab deliminted file containing CDS coordinates to create a nexus input for BEAST\n\n#In version 2.0, added a flag to throw if you only want coding sequence to be included in the nexus file\n\ndef main():\n    usage = '%prog [options]'\n    p = optparse.OptionParser()\n    p.add_option('-f', '--fasta',  help='Aligned fasta. [None]')\n    p.add_option('-c', '--coords', help='Tab delimited file with coordinates of CDS. Should have at least 3 tab delimited columns. The first is not used, will probably have some sort of CDS name. The next two have start and stop base positions.[None]')\n    p.add_option('-o', '--out',  help='Name for output nexus file. [None]')\n    p.add_option('--onlyCDS', default=False, action=\"store_true\",  help='Use this flag if you only want coding regions to be included in the output nexus file. [None]')\n    opts, args = p.parse_args()\n    \n    make_beast_nexus(opts)\n        \n#----------------------End of main()\n\ndef make_beast_nexus(opts):\n    fout=open(opts.out, 'w')\n\n    #Read in seqs\n    names, seqs = read_fasta_lists(opts.fasta)\n    #Get coding coordinates\n    coding_coords=get_coords(opts.coords)\n    \n    #Make concatenated coding seqs\n    coding_seqs=['']*len(seqs)\n    for start, end in coding_coords:\n        for i in range(len(seqs)):\n            coding_seqs[i]+=seqs[i][start-1:end]\n    \n    \n    if opts.onlyCDS:\n        fout.write(\"#NEXUS\\n[File created using beast_nexus_prep.py using %s and %s]\\n\\nBEGIN TAXA;\\n\" % (opts.fasta, opts.coords))\n        fout.write(\"DIMENSIONS NTAX=%d;\\n\\nTAXLABELS\\n%s\\n;\\n\\nEND;\\n\" % (len(names), '\\n'.join(names)))\n        fout.write(\"BEGIN CHARACTERS;\\nDIMENSIONS NCHAR=%d;\\nFORMAT DATATYPE=DNA MISSING=N GAP=-;\\nMATRIX\\n\\n%s\\n;\\n\\nEND;\\n\\n\" % (len(coding_seqs[0]), '\\n'.join(['%s %s' % (names[x], coding_seqs[x]) for x in range(len(names))])))    \n        fout.write(\"BEGIN ASSUMPTIONS;\\n\\tcharset coding = 1-%d;\\nend;\\n\" % (len(coding_seqs[0])))\n\n    else:\n        #Get non-coding coordinates\n        noncoding_coords=extrap_noncoding(coding_coords, len(seqs[0]))\n    \n        #Make concatenated noncoding seqs\n        noncoding_seqs=['']*len(seqs)\n        for start, end in noncoding_coords:\n            for i in range(len(seqs)):\n                noncoding_seqs[i]+=seqs[i][start-1:end]\n    \n        concat_seqs=[coding_seqs[i]+noncoding_seqs[i] for i in range(len(seqs))]\n    \n        coding_start=1\n        coding_end=len(coding_seqs[0])\n        noncoding_start=coding_end+1\n        noncoding_end=len(concat_seqs[0])\n    \n        fout.write(\"#NEXUS\\n[File created using beast_nexus_prep.py using %s and %s]\\n\\nBEGIN TAXA;\\n\" % (opts.fasta, opts.coords))\n        fout.write(\"DIMENSIONS NTAX=%d;\\n\\nTAXLABELS\\n%s\\n;\\n\\nEND;\\n\" % (len(names), '\\n'.join(names)))\n        fout.write(\"BEGIN CHARACTERS;\\nDIMENSIONS NCHAR=%d;\\nFORMAT DATATYPE=DNA MISSING=N GAP=-;\\nMATRIX\\n\\n%s\\n;\\n\\nEND;\\n\\n\" % (len(concat_seqs[0]), '\\n'.join(['%s %s' % (names[x], concat_seqs[x]) for x in range(len(names))])))    \n        fout.write(\"BEGIN ASSUMPTIONS;\\n\\tcharset coding = %d-%d;\\n\\tcharset noncoding = %d-%d;\\nend;\\n\" % (coding_start, coding_end, noncoding_start, noncoding_end ))\n\n\n\n    fout.close()\n    \ndef extrap_noncoding(coding_coords, seq_len):\n    non_coords=[]\n    #To handle noncoding at the very beginning of the sequence\n    if coding_coords[0][0] != 1:\n        non_coords.append((1,coding_coords[0][0]-1))    \n        \n    #To handle noncoding regions in between coding seqs\n    coding_sorted=sorted(coding_coords[:])\n    for i in range(len(coding_sorted[:-1])):\n        if coding_sorted[i+1][0]-coding_sorted[i][1]>0:\n            non_coords.append((coding_sorted[i][1]+1,coding_sorted[i+1][0]-1))\n\n    #To handle non-coding at the very end of the sequence\n    if coding_coords[-1][1] != seq_len:\n        non_coords.append((coding_coords[-1][1]+1, seq_len))\n\n    print non_coords\n    return non_coords\n\ndef get_coords(c_file):\n    fin=open(c_file, 'r')\n    coords=[]\n    for line in fin:\n        cols=line.strip().split('\\t')\n        coords.append((int(cols[1]), int(cols[2])))\n    return coords\n\n# Extracts data from a fasta sequence file. Returns two lists, the first holds the names of the seqs (excluding the '>' symbol), and the second holds the sequences\ndef read_fasta_lists(file):\n\tfin = open(file, 'r')\n\tcount=0\n\t\n\tnames=[]\n\tseqs=[]\n\tseq=''\n\tfor line in fin:\n\t\tline=line.strip()\n\t\tif line and line[0] == '>':                #indicates the name of the sequence\n\t\t\tcount+=1\n\t\t\tnames.append(line[1:])\n\t\t\tif count>1:\n\t\t\t\tseqs.append(seq)\n\t\t\tseq=''\n\t\telse: seq +=line\n\tseqs.append(seq)\n\t\n\treturn names, seqs\n\n###------------------------------------->>>>    \n\nif __name__ == \"__main__\":\n    main()\n",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.11192324052437447,
      "p_css": 0.0004342945998507409,
      "p_html": 0.0019575445016526203,
      "p_java": 2.409715082011983e-05,
      "p_javascript": 2.334674434961221e-05,
      "p_matlab": 0.00046892124936141045,
      "p_python": 0.009018627643795156,
      "p_sql": 0.001341974778798009,
      "p_typescript": 0.8748079528069979
    },
    {
      "text": "# Print all prime numbers up to 100\n\nfor num in range(2,101):  \n   if all(num%i!=0 for i in range(2,num)):\n      print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.893970875592629e-16,
      "p_css": 1.8957138961772476e-24,
      "p_html": 2.1484129043901174e-15,
      "p_java": 2.651147911196449e-16,
      "p_javascript": 8.029360230612621e-16,
      "p_matlab": 0.999999999999664,
      "p_python": 3.29085684624068e-13,
      "p_sql": 2.4211578723677314e-15,
      "p_typescript": 4.445585769232972e-16
    },
    {
      "text": "list_of_names= [\"Asher\", \"Aster\", \"Athena\", \"Robert\"]\nlist_of_names.sort()\n\nprint(list_of_names)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0023787555907480366,
      "p_css": 0.02059917884746065,
      "p_html": 0.007327868886228502,
      "p_java": 0.0003936242595084538,
      "p_javascript": 0.0012682260834329954,
      "p_matlab": 0.0010883438851459987,
      "p_python": 0.9615303430703502,
      "p_sql": 0.0031860541505069947,
      "p_typescript": 0.002227605226617948
    },
    {
      "text": "even_arr = [x for x in arr if x % 2 == 0]",
      "y_true": "matlab",
      "pred_label": "matlab",
      "p_bash": 4.891697756674816e-21,
      "p_css": 8.868018763277773e-21,
      "p_html": 2.294781780145474e-21,
      "p_java": 5.46606090376973e-22,
      "p_javascript": 7.585213748875264e-22,
      "p_matlab": 1.0,
      "p_python": 1.1351720507578218e-21,
      "p_sql": 2.7984362552686077e-24,
      "p_typescript": 1.1387250775006292e-20
    },
    {
      "text": "def double_list(list_nums):\n for num in list_nums:\n print(num * 2)\n \nlist_nums = [4, 6, 2, 8]\ndouble_list(list_nums)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00013001101317197786,
      "p_css": 5.058926829452741e-06,
      "p_html": 0.00030672118980262905,
      "p_java": 2.112607852238109e-05,
      "p_javascript": 8.498324715658435e-05,
      "p_matlab": 0.9889671570053215,
      "p_python": 0.010208330432811594,
      "p_sql": 6.626487763491289e-05,
      "p_typescript": 0.00021034722874905962
    },
    {
      "text": "def expression(x):\n    return 3 * x + 5\n\nprint(expression(7))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00011483411375945646,
      "p_css": 0.0031969369950747588,
      "p_html": 0.0007739370725505938,
      "p_java": 3.5339937902132533e-05,
      "p_javascript": 0.00013090491883645597,
      "p_matlab": 2.7278917323936286e-05,
      "p_python": 0.9943236358015032,
      "p_sql": 0.0011637274731341395,
      "p_typescript": 0.00023340476991528673
    },
    {
      "text": "def compare_string_length(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004096045312847343,
      "p_css": 0.0004044230164011407,
      "p_html": 5.532380041963458e-07,
      "p_java": 4.009729115752479e-05,
      "p_javascript": 0.14137614742202692,
      "p_matlab": 0.00010555059101283255,
      "p_python": 0.8517775207478266,
      "p_sql": 0.005691295900111684,
      "p_typescript": 0.00019480726217430773
    },
    {
      "text": "word_count = {}\n\nfor word in words:\n    if word not in word_count:\n        word_count[word] = 1\n    else:\n        word_count[word] += 1\n\nprint(word_count) # output: {'Hello': 2, 'World': 1, 'again': 1}",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.7941495541273941,
      "p_css": 0.004532833383809149,
      "p_html": 0.006460478855148055,
      "p_java": 1.918999975798305e-09,
      "p_javascript": 0.001748620863022787,
      "p_matlab": 0.0016813689236930844,
      "p_python": 0.19087704588176027,
      "p_sql": 0.0004538502140156251,
      "p_typescript": 9.624583215697236e-05
    },
    {
      "text": "def html_from_dict(data):\n    '''\n    This function creates an HTML table from list of dictionaries.\n    Each dictionary represents one row in the table.\n    '''\n\n    html = '<table>'\n    html += '<tr>'\n    \n    # table headings\n    data_keys = list(data[0].keys())\n    for key in data_keys:\n        html += '<th>' + str(key) + '</th>'\n    html += '</tr>'\n\n    # table content\n    for row in data:\n        html += '<tr>'\n        for key in data_keys:\n            html += '<td>' + str(row[key]) + '</td>'\n        html += '</tr>'\n    \n    html += '</table>'\n    \n    return html",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.1974618306719967e-11,
      "p_css": 7.411608380039879e-10,
      "p_html": 0.9999999654339243,
      "p_java": 7.393839265482547e-12,
      "p_javascript": 3.3278302411988844e-08,
      "p_matlab": 1.6724105983002143e-11,
      "p_python": 3.809313325264686e-10,
      "p_sql": 1.1775831395879393e-10,
      "p_typescript": 1.1830036436704719e-11
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read IMDB data\ndata_df = pd.read_csv('imdb_data.csv')\n\n# Create input data\nX = data_df[['director_name', 'num_critic_for_reviews', 'duration', 'gross']]\ny = data_df['imdb_score']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train model\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train)\n\n# Predict rating for movie 'Grey Island'\ngrey_island_X = [['Grey Island', 2, 101, 1607800]]\n\nprint(regressor.predict(grey_island_X)) # Output: [3.6]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03262094272169959,
      "p_css": 0.08685558519263573,
      "p_html": 0.11288790455996711,
      "p_java": 4.9082992732333765e-05,
      "p_javascript": 0.0001580985080792867,
      "p_matlab": 0.0014050131010985838,
      "p_python": 0.7542532137392899,
      "p_sql": 0.00448222243912767,
      "p_typescript": 0.007287936745369836
    },
    {
      "text": "def is_prime(n):\n    if n==2 or n==3: return True\n    if n%2==0 or n<2: return False\n \n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n\ndef find_prime_numbers(start, end):\n    primes = []\n    for num in range(start,end + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nprint(find_prime_numbers(1100, 1300)) # Output: [1103, 1105, 1107, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.3994577054158045e-05,
      "p_css": 2.9672648091585448e-08,
      "p_html": 4.819329394801769e-05,
      "p_java": 4.522257730387149e-06,
      "p_javascript": 7.533439817155066e-07,
      "p_matlab": 0.18110913306634446,
      "p_python": 0.818801112235255,
      "p_sql": 5.154605656764535e-07,
      "p_typescript": 1.7460924723282466e-06
    },
    {
      "text": "def digit_sum(n):\n    if n == 0:\n        return 0\n\n    return (n % 10) + digit_sum(n // 10)\n\nn = 123\nprint(digit_sum(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.2452216718623767e-05,
      "p_css": 0.000337431535584948,
      "p_html": 7.344559309900399e-05,
      "p_java": 3.5031113063281034e-06,
      "p_javascript": 7.326501609470192e-06,
      "p_matlab": 2.5915044841051064e-05,
      "p_python": 0.9995303159269925,
      "p_sql": 2.942441307133386e-06,
      "p_typescript": 6.667628541119289e-06
    },
    {
      "text": "def quadratic(a, b, c):\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # find the two roots\n    root1 = (-b-d**0.5)/(2*a)\n    root2 = (-b+d**0.5)/(2*a)\n    return root1, root2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.015547740778461288,
      "p_css": 0.013886988412226178,
      "p_html": 0.012986437736607173,
      "p_java": 0.09073030961753942,
      "p_javascript": 0.010031802093207013,
      "p_matlab": 1.581486434368874e-05,
      "p_python": 0.7473727533067615,
      "p_sql": 0.0034482853509734657,
      "p_typescript": 0.10597986783988018
    },
    {
      "text": "def num_squares():\n  squares_dict = {}\n  for i in range(1,11):\n    squares_dict[i] = i*i \n  return squares_dict",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.7780549331140856e-16,
      "p_css": 1.5099600865564368e-22,
      "p_html": 3.456340717067845e-15,
      "p_java": 2.201929673352401e-17,
      "p_javascript": 1.858166694468247e-17,
      "p_matlab": 0.9999999460417763,
      "p_python": 5.395821946896584e-08,
      "p_sql": 1.506054145212628e-16,
      "p_typescript": 1.4167526327513303e-16
    },
    {
      "text": "# A class to represent a stack \nclass Stack:\n\tdef __init__(self):\t\n\t\tself.stack = []\n\t\t\n\tdef push(self, data):\n\t\tself.stack.append(data)\n\t\t\n\tdef pop(self):\n\t\treturn self.stack.pop()\n\t\t\n\tdef peek(self):\n\t\treturn self.stack[-1]\t\n\n# Create a stack of characters\nstring = 'Hello World!'\nchar_stack = Stack()\n\n# Push every character in the string to the stack\nfor i in string:\n\tchar_stack.push(i)\n\n# Pop and print each character from the stack\nwhile len(char_stack.stack) > 0:\n\tprint(char_stack.pop())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.1516683194763045e-05,
      "p_css": 0.02230302451348826,
      "p_html": 0.009900205329268285,
      "p_java": 2.4906154170693585e-05,
      "p_javascript": 1.3956321373387662e-05,
      "p_matlab": 4.889554019127825e-06,
      "p_python": 0.853972905133722,
      "p_sql": 0.11091000719660468,
      "p_typescript": 0.0028385891141588762
    },
    {
      "text": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.287412150243003e-06,
      "p_css": 0.0008784473333711349,
      "p_html": 0.00038057726980478295,
      "p_java": 5.174410651400043e-06,
      "p_javascript": 0.0001709109598354692,
      "p_matlab": 1.8072075166712099e-06,
      "p_python": 0.9985329923536913,
      "p_sql": 1.8680479316649675e-05,
      "p_typescript": 3.122573662496497e-06
    },
    {
      "text": "from flask import Flask\nfrom flask_restful import Resource, Api\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\napi = Api(app)\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef detect_intent_text():\n    IF session_id NOT present\n        PLEASE create session_id\n    request = detect_intent_texts(session_id, text)\n    response = request.fulfillment_text\n    return response\n\n\nif __name__ == '__main__':\n    app.run()",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.008459879148718421,
      "p_css": 0.975608735039684,
      "p_html": 0.002117565759540905,
      "p_java": 2.312762972281234e-06,
      "p_javascript": 1.1528844479488156e-05,
      "p_matlab": 6.063936647503433e-05,
      "p_python": 0.010027472172626185,
      "p_sql": 0.003590257324095973,
      "p_typescript": 0.00012160958140757545
    },
    {
      "text": "def print_conditions():\n    print(\"Hello World\")\n    print(\"Goodbye World\")\n\nprint_conditions()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9978606983577211,
      "p_css": 3.1738505951481578e-06,
      "p_html": 3.3618099078868983e-06,
      "p_java": 3.7038351202524786e-22,
      "p_javascript": 0.0001549399164011686,
      "p_matlab": 3.4690181581920588e-09,
      "p_python": 0.001977662812969906,
      "p_sql": 7.568219478655225e-08,
      "p_typescript": 8.410119178889751e-08
    },
    {
      "text": "def remove_divisible(lst, n):\n    new_list = []\n    for item in lst:\n        if item % n != 0:\n            new_list.append(item)\n    return new_list\n\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\nprint(remove_divisible(mylist, num)) # [7, 8, 21]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.332798567309659e-10,
      "p_css": 2.9823238896608644e-10,
      "p_html": 3.8183608897011554e-09,
      "p_java": 5.903918534048434e-11,
      "p_javascript": 2.711889355610535e-10,
      "p_matlab": 0.9999999836569144,
      "p_python": 1.1031303694221897e-08,
      "p_sql": 2.7934295039709783e-11,
      "p_typescript": 2.037464291185265e-10
    },
    {
      "text": "import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\nsid = SentimentIntensityAnalyzer() \n  \ntext = \"This movie was truly amazing\"\n\nsentiment_scores = sid.polarity_scores(text) \n\nif sentiment_scores['compound'] >= 0.05 : \n    print(\"Positive\") \nelif sentiment_scores['compound'] <= - 0.05 : \n    print(\"Negative\")\nelse : \n    print(\"Neutral\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01361726689766173,
      "p_css": 0.047551643995113066,
      "p_html": 0.004008698677634487,
      "p_java": 0.00023616993011583808,
      "p_javascript": 0.000485621304996878,
      "p_matlab": 0.002090804972044072,
      "p_python": 0.9175043801653389,
      "p_sql": 0.010568210925679571,
      "p_typescript": 0.003937203131415586
    },
    {
      "text": "import numpy as np \nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt \n\n# define training data\nx = np.array([i for i in range(len(stock_prices))]).reshape(-1,1)\ny = np.array(stock_prices)\n\n# create and train model \nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# make predictions \ny_pred = model.predict(x)\n\n# plot results\nplt.plot(x, y, 'o-')\nplt.plot(x, y_pred, 'x-')\nplt.title('Stock Prices with Linear Regression Model')\nplt.xlabel('Day')\nplt.ylabel('Price')\nplt.show()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.17984795457541083,
      "p_css": 0.0035924329106247774,
      "p_html": 0.01525416500960908,
      "p_java": 1.206305587736033e-05,
      "p_javascript": 1.2189841655423393e-05,
      "p_matlab": 0.0005542148975963395,
      "p_python": 0.7997936483753271,
      "p_sql": 3.435530487591873e-06,
      "p_typescript": 0.0009298958034115923
    },
    {
      "text": "print(\"Hello, World!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999734119020168,
      "p_css": 9.96764694856539e-10,
      "p_html": 8.203989019786867e-09,
      "p_java": 1.3871331484896268e-31,
      "p_javascript": 2.3140070270935628e-05,
      "p_matlab": 1.5029167266270406e-12,
      "p_python": 3.438768591603071e-06,
      "p_sql": 1.5910552505341453e-11,
      "p_typescript": 4.0953400341391626e-11
    },
    {
      "text": "from collections import Counter\n\nstring = \"The quick brown fox jumped over the lazy dog.\"\nwords = string.split()\nword_counts = Counter(words)\n\nunique_words = set(words)\n\nfor word in unique_words:\n    print(f\"{word:15} {word_counts[word]:3}\")",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.00068198426203468,
      "p_css": 0.060867953400142664,
      "p_html": 0.015149149495772465,
      "p_java": 0.018480222944964396,
      "p_javascript": 8.07349423638351e-06,
      "p_matlab": 0.00026812107906947153,
      "p_python": 0.7717322946637657,
      "p_sql": 0.13220338266905404,
      "p_typescript": 0.0006088179909601682
    },
    {
      "text": "import datetime\ndate_str = '2020-01-31'\n\ndef add_three_months(date_str):\n    d = datetime.datetime.strptime(date_str, '%Y-%m-%d')\n    d = d + datetime.timedelta(days=90)\n    date_str = d.strftime('%Y-%m-%d')\n    return date_str",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009350227617492187,
      "p_css": 0.06921895292735751,
      "p_html": 0.022223353232979623,
      "p_java": 0.002035782043121838,
      "p_javascript": 0.006168844937277515,
      "p_matlab": 0.01157332223650925,
      "p_python": 0.8665815666357825,
      "p_sql": 0.0029940363119885815,
      "p_typescript": 0.009853914057490976
    },
    {
      "text": "import speech_recognition as sr\n\nr = sr.Recognizer()\n\nwords = ['happy', 'sad', 'angry']\n\nwith sr.Microphone() as source:\n    print(\"Say a word.\")\n    audio = r.listen(source)\n\ntry:\n    word = r.recognize_google(audio).lower()\n    if word in words:\n        print(\"The emotion of the word is:\", word)\n    else:\n        print(\"The word is unknown.\")\nexcept:\n    print(\"Sorry could not recognize\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03337226824102582,
      "p_css": 0.015229956831368833,
      "p_html": 0.024258806748682568,
      "p_java": 3.93185086382644e-05,
      "p_javascript": 0.0011988611955414995,
      "p_matlab": 0.0005836800144240065,
      "p_python": 0.7488867903001344,
      "p_sql": 0.017958835189610656,
      "p_typescript": 0.15847148297057378
    },
    {
      "text": "class Person:\n  def __init__(self, name, age, gender):\n    self.name = name\n    self.age = age\n    self.gender = gender\n    \n    def display_person(self):\n      print(\"Name: \" + self.name + \"\\nAge: \" + str(self.age) + \"\\nGender: \" + self.gender)\n\nperson = Person(\"John\", 28, \"Male\")\nperson.display_person()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002833384028729077,
      "p_css": 0.005826892739658912,
      "p_html": 0.054752823713487365,
      "p_java": 0.04960044391644508,
      "p_javascript": 3.07998856111501e-06,
      "p_matlab": 1.3392242115126206e-05,
      "p_python": 0.8768846868735135,
      "p_sql": 0.012530600995412103,
      "p_typescript": 0.00010474112793395009
    },
    {
      "text": "def sort_list(list):\n    list.sort()\n    return list\n\nsorted_list = sort_list([\"Banana\", \"Apple\", \"Orange\", \"Pear\"])\nprint(sorted_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007141955510369023,
      "p_css": 0.014853373800319756,
      "p_html": 0.0034211712755569685,
      "p_java": 0.00018676157860372369,
      "p_javascript": 0.0008040320506985841,
      "p_matlab": 0.001106469003244616,
      "p_python": 0.9716312469223791,
      "p_sql": 0.006147762338388511,
      "p_typescript": 0.0011349874797718731
    },
    {
      "text": "import numpy as np\narr = np.zeros(4, dtype=int)\n \nfor i in range(len(arr)):\n    arr[i] = i",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006573782002596685,
      "p_css": 5.1024535934238955e-05,
      "p_html": 4.836466345473868e-05,
      "p_java": 0.002399820940733146,
      "p_javascript": 6.236304732317338e-07,
      "p_matlab": 0.002933212420508261,
      "p_python": 0.9937432637781468,
      "p_sql": 1.802659655104996e-06,
      "p_typescript": 0.00016450917083480013
    },
    {
      "text": "my_dict = {}\nfor item in my_list:\n    my_dict[item] = None\n\nprint(my_dict)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0006578434383487263,
      "p_css": 0.7252141794738719,
      "p_html": 0.006028879872384542,
      "p_java": 9.433113525055059e-05,
      "p_javascript": 0.0038717965730976534,
      "p_matlab": 0.0006442435929362549,
      "p_python": 0.2628765345044507,
      "p_sql": 0.00023907143063863393,
      "p_typescript": 0.00037311997902113466
    },
    {
      "text": "def purchase_item():\n  print(\"Hello! Let's purchase an item!\")\n  name = input(\"Please enter your name: \")\n  address = input(\"Please enter your address: \")\n  item = input(\"What would you like to purchase? \")\n  quantity = input(\"How many of that item would you like? \")\n\n  print(\"Thank you for your order!\")\n  print(\"Name: {}\".format(name))\n  print(\"Address: {}\".format(address))\n  print(\"Item: {}, Quantity: {}\".format(item, quantity))\n\npurchase_item()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.014235658323938683,
      "p_css": 0.08252056584303319,
      "p_html": 0.09858009822635172,
      "p_java": 0.0014312891995319162,
      "p_javascript": 0.20088783075415645,
      "p_matlab": 0.00011590222846085374,
      "p_python": 0.5998613579388824,
      "p_sql": 0.00018337047325965017,
      "p_typescript": 0.0021839270123852916
    },
    {
      "text": "# Python code for Quick Sort\ndef quickSort(arr):\n    less = []\n    pivots = []\n    more = []\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        for i in arr:\n            if i < pivot:\n                less.append(i)\n            elif i > pivot:\n                more.append(i)\n            else:\n                pivots.append(i)\n        less = quickSort(less)\n        more = quickSort(more)\n        return less + pivots + more\n \n# Driver Code to test above\narr = [3, 4, 7, 1, 8, 5]  \n  \n# Function call \nsorted_array = quickSort(arr)  \n  \n# Print the sorted array  \nprint(sorted_array)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.2813786877788293e-06,
      "p_css": 1.098840000188227e-05,
      "p_html": 4.214768785158113e-06,
      "p_java": 3.325682280459705e-07,
      "p_javascript": 4.5744778942461105e-05,
      "p_matlab": 0.9994320776553923,
      "p_python": 1.1215912552815779e-05,
      "p_sql": 1.5341979924598383e-06,
      "p_typescript": 0.0004906103394171215
    },
    {
      "text": "def smallest_of_list(nums):\n    smallest = float(\"inf\")\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n\ndef largest_of_list(nums):\n    largest = float(\"-inf\")\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\n\ndef avg_of_list(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.457571564078336e-08,
      "p_css": 3.746956363872443e-12,
      "p_html": 4.299482198867409e-08,
      "p_java": 5.5560876755787655e-09,
      "p_javascript": 3.4267019827094647e-09,
      "p_matlab": 0.9999878354665874,
      "p_python": 1.2073933912357546e-05,
      "p_sql": 1.2253619103011527e-08,
      "p_typescript": 1.178880668883074e-08
    },
    {
      "text": "def sort_by_length(arr): \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if len(arr[i]) < len(arr[j]): \n                arr[i], arr[j] = arr[j], arr[i] \n    return arr\n  \nprint(sort_by_length(arr))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.5325867390514617e-08,
      "p_css": 1.3525783517357004e-07,
      "p_html": 5.447738390315506e-08,
      "p_java": 1.2690751291599722e-08,
      "p_javascript": 6.513826427256465e-09,
      "p_matlab": 0.9391005791425414,
      "p_python": 0.06089909665056753,
      "p_sql": 7.272974264024056e-09,
      "p_typescript": 5.266825250349398e-08
    },
    {
      "text": "def scaleArray(arr, s1, s2):\n  scaledArr = []\n  for x in arr:\n    scaledArr.append((x + s1) / s2)\n  return scaledArr\n\narr = [1,2,3] \nscaledArr = scaleArray(arr, 2, 2)\nprint(scaledArr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.407454659796978e-08,
      "p_css": 2.765527010339186e-06,
      "p_html": 1.28633288336361e-07,
      "p_java": 2.2692582379588987e-08,
      "p_javascript": 4.4439712936818076e-08,
      "p_matlab": 0.9998698023215141,
      "p_python": 0.00012698538453085584,
      "p_sql": 1.0429306740345277e-08,
      "p_typescript": 1.5649750756772348e-07
    },
    {
      "text": "def sortByLength(strings):\n    \"\"\"Sort a list of strings according to their lengths\"\"\"\n    # Sort the list using a key function\n    return sorted(strings, key=len)\n\nif __name__ == '__main__':\n    strings = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\n    print(sortByLength(strings))",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0004777434562056567,
      "p_css": 0.005465441855501701,
      "p_html": 0.00023074794333571578,
      "p_java": 3.953717317167709e-06,
      "p_javascript": 0.9349365591873708,
      "p_matlab": 8.993628479586731e-05,
      "p_python": 0.015510593099701792,
      "p_sql": 0.002913672310022271,
      "p_typescript": 0.04037135214574898
    },
    {
      "text": "import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read the csv file and parse the data\ndf = pd.read_csv('iris.csv')\nx = df.drop('species', axis=1).values\ny = df['species'].values\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)\n\n# Train the Decision Tree\nmodel = DecisionTreeClassifier(criterion='entropy', max_depth=3)\nmodel.fit(X_train, y_train)\n\n# Make predictions and evaluate the accuracy\ny_pred = model.predict(X_test)\nscore = accuracy_score(y_test, y_pred)\n\n# Visualize the decision tree\nexport_graphviz(model, \nout_file='iris_tree.dot',\nfeature_names=['sepal length', 'sepal width', 'petal length', 'petal width'],\nclass_names=['setosa', 'versicolor', 'virginica'],\nfilled=True)",
      "y_true": "bash",
      "pred_label": "bash",
      "p_bash": 0.999999979293313,
      "p_css": 7.49961909028728e-09,
      "p_html": 1.3558675401779366e-10,
      "p_java": 1.933389975396326e-13,
      "p_javascript": 3.2293496320368416e-11,
      "p_matlab": 7.464096889738968e-13,
      "p_python": 1.2230216422453385e-08,
      "p_sql": 1.197746539167119e-20,
      "p_typescript": 8.080316137160257e-10
    },
    {
      "text": "def is_prime(n):\n    if n <= 1:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if is_prime(num):\n        print(\"The number is a prime number.\")\n    else:\n        print(\"The number is not a prime number.\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.1499597084280807e-06,
      "p_css": 4.915208113317981e-07,
      "p_html": 4.3328191904391855e-06,
      "p_java": 1.264244587181335e-06,
      "p_javascript": 7.230036205097071e-07,
      "p_matlab": 8.847103428245439e-07,
      "p_python": 0.9999868863656608,
      "p_sql": 3.85080407718925e-06,
      "p_typescript": 4.165720013318217e-07
    },
    {
      "text": "import numpy as np\n\ndef fourierTransform(signal):\n    N = signal.shape[0]\n    W = np.exp(2j * np.pi * np.arange(N) / N)\n    fourier = np.dot(signal, W)\n    return fourier",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03608635562140438,
      "p_css": 0.014119971242471297,
      "p_html": 0.006641904491420739,
      "p_java": 0.00032440066151268835,
      "p_javascript": 0.00017791923990797723,
      "p_matlab": 0.00045481339287124686,
      "p_python": 0.9341131523925922,
      "p_sql": 0.0014712483654629484,
      "p_typescript": 0.006610234592356552
    },
    {
      "text": "import numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0007408568551658855,
      "p_css": 0.005882640897151576,
      "p_html": 0.05491932029684343,
      "p_java": 0.7446926834533135,
      "p_javascript": 0.0032239511989218908,
      "p_matlab": 6.290549499136691e-08,
      "p_python": 0.17592898751413447,
      "p_sql": 0.0008637136944310422,
      "p_typescript": 0.013747783184543066
    },
    {
      "text": "try:\n    a = 5 / 0\nexcept ZeroDivisionError as error:\n    print(error)\nexcept Exception as error:\n    print(error)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00013738963056559065,
      "p_css": 0.0001833971615896144,
      "p_html": 0.0027852653082978303,
      "p_java": 5.2464121585096955e-05,
      "p_javascript": 4.9830810529410417e-05,
      "p_matlab": 0.00023368533589365794,
      "p_python": 0.038796871190606645,
      "p_sql": 0.00024562904493589217,
      "p_typescript": 0.9575154673959962
    },
    {
      "text": "class Animal:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n \n def speak(self):\n  print(\"My name is\", self.name)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.8424291613177755e-05,
      "p_css": 0.00011991676692916938,
      "p_html": 0.004281443871111827,
      "p_java": 0.903705009285442,
      "p_javascript": 1.9438886003447437e-08,
      "p_matlab": 2.800944893523812e-07,
      "p_python": 0.09097623304738445,
      "p_sql": 0.0008683212138718873,
      "p_typescript": 1.0351990272303967e-05
    },
    {
      "text": "def string_to_shell_command(string):\n    split_string = string.split()\n    command_name = split_string[0]\n    input_args = split_string[1:]\n    command_args = ''\n    for arg in input_args:\n        command_args += f'\"{arg}\"' + ' '\n    return f'{command_name} {command_args}'",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.8801199384745196e-06,
      "p_css": 0.0022859753353208613,
      "p_html": 0.0007015078960002334,
      "p_java": 0.905483639329253,
      "p_javascript": 2.3820218262536242e-07,
      "p_matlab": 0.00016550654343195213,
      "p_python": 0.0862140407170134,
      "p_sql": 0.004873173449975514,
      "p_typescript": 0.00027403840688397264
    },
    {
      "text": "def get_intersection(list_1, list_2):\n    return [elem for elem in list_1 if elem in list_2]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.434340054417953e-07,
      "p_css": 2.261268043077119e-06,
      "p_html": 1.7076560616603536e-06,
      "p_java": 1.1920162127666327e-07,
      "p_javascript": 6.022099104007726e-07,
      "p_matlab": 0.9999072654167391,
      "p_python": 8.623195773081135e-05,
      "p_sql": 8.333458060206218e-12,
      "p_typescript": 1.2688475549127643e-06
    },
    {
      "text": "def selection_sort(arr):\n    # traverse through all array elements\n    for i in range(len(arr)):\n        # find the minimum element in the remaining unsorted array\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        # swap the found minimum element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [5, 8, 10, 15, 2] \nselection_sort(arr)\nprint(\"Sorted array: \", arr)\n\nOutput: Sorted array:  [2, 5, 8, 10, 15]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.105218442767366e-07,
      "p_css": 7.437944914679439e-07,
      "p_html": 2.360838271694289e-07,
      "p_java": 2.05717493989925e-08,
      "p_javascript": 1.348496267076453e-07,
      "p_matlab": 0.9988860057426461,
      "p_python": 0.00111175692713394,
      "p_sql": 2.5645363086638992e-09,
      "p_typescript": 2.8894414453234373e-07
    },
    {
      "text": "user_input = input(\"Enter a string: \")\n\nchar_list = []\n\nfor char in user_input:\n char_list.append(char)\n\nprint(char_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006604603432586817,
      "p_css": 0.04932299799828042,
      "p_html": 0.015632242946910745,
      "p_java": 0.043566052505651015,
      "p_javascript": 7.592162632370825e-05,
      "p_matlab": 0.023147497486979106,
      "p_python": 0.8367060086092224,
      "p_sql": 0.029329677972571258,
      "p_typescript": 0.0015591405108026151
    },
    {
      "text": "def evaluate(expression): \n    expression = expression.replace(\" \", \"\")\n    tokens = list(expression)\n    \n    a = tokens.pop(0)\n    while len(tokens) > 0: \n        op = tokens.pop(0)\n        b = tokens.pop(0)\n        if op == '+':\n            a = int(a) + int(b)\n        elif op == '-':\n            a = int(a) - int(b)\n        elif op == '*':\n            a = int(a) * int(b)\n        elif op == '/':\n            a = int(a) / int(b)\n        else: \n            return False\n    \n    return a\n\nresult = evaluate(expression)\nprint(result)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.052492728619189e-12,
      "p_css": 1.5652219032861936e-12,
      "p_html": 2.789158487677626e-12,
      "p_java": 0.9999999996015336,
      "p_javascript": 7.313432708673694e-13,
      "p_matlab": 1.6735920010575475e-23,
      "p_python": 3.877865189692927e-10,
      "p_sql": 8.167118138544404e-13,
      "p_typescript": 7.249493533716013e-13
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# load dataset\ndf = pd.read_csv('sales_data.csv')\n\n# features and target values\nX = df.drop(['Weekly_Sales'], axis = 1)\ny = df.Weekly_Sales\n\n# split into train and test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# train the model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# predict values\ny_pred = regressor.predict(X_test)\n\n# model evaluation\nfrom sklearn.metrics import mean_squared_error, r2_score\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred)\n\n# print results\nprint(\"Root Mean Squared Error: {}\".format(rmse))\nprint(\"R2 Score: {}\".format(r2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.024819745961766306,
      "p_css": 0.13406772460751218,
      "p_html": 0.005812054461294189,
      "p_java": 1.625099598151913e-05,
      "p_javascript": 4.484034857169818e-05,
      "p_matlab": 3.386687548599909e-05,
      "p_python": 0.8302339136568543,
      "p_sql": 0.0005465944401178617,
      "p_typescript": 0.004425008652416121
    },
    {
      "text": "def create_list(string):\n    entries = string.split(\";\")\n    result = []\n    for entry in entries:\n        info = entry.split(\", \")\n        person = {\n            'name': info[0],\n            'surname': info[1],\n            'age': info[2],\n        }\n        result.append(person)\n    return result\n\nstring = \"John, Smith, 25; Polly, King, 22\"\n\nresult = create_list(string)\nprint(result)",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 9.969632413160708e-10,
      "p_css": 0.0007232977250106243,
      "p_html": 1.4157554224449137e-05,
      "p_java": 0.9888624043597858,
      "p_javascript": 4.7515576185235963e-11,
      "p_matlab": 1.4009880537773677e-08,
      "p_python": 0.010042281943869883,
      "p_sql": 0.0003573451651818296,
      "p_typescript": 4.981975681733289e-07
    },
    {
      "text": "def replace_all_occurrences(str, char, replacement):\n  return str.replace(char, replacement)\n\nprint(replace_all_occurrences(\"Hello World!\", 'l', 'X'))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.058434797986578385,
      "p_css": 0.0017318299131660192,
      "p_html": 0.004215096858302845,
      "p_java": 8.174252477431423e-10,
      "p_javascript": 0.04007244178269421,
      "p_matlab": 3.072460261151404e-05,
      "p_python": 0.894943807957503,
      "p_sql": 0.00042813858535945524,
      "p_typescript": 0.00014316149635953338
    },
    {
      "text": "import numpy as np\n\n# Define the function\ndef function(x):\n    return x**2 - 6*x + 9\n\n# Calculate the roots\nroots = np.roots([1, -6, 9])\n\nprint(\"The solutions for the equation are: x={} and x={}\".format(roots[0], roots[1]))",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.03212285931629605,
      "p_css": 0.011273039896837369,
      "p_html": 0.0005316554996122197,
      "p_java": 2.7267952100371055e-05,
      "p_javascript": 0.8198090079673452,
      "p_matlab": 0.00020181544054477844,
      "p_python": 0.026519932415291433,
      "p_sql": 0.0002663906955740044,
      "p_typescript": 0.1092480308163985
    },
    {
      "text": "def diffMaxMin(arr):\n    maxVal = arr[0]\n    minVal = arr[0]\n    \n    for num in arr:\n        if num > maxVal:\n            maxVal = num\n        elif num < minVal:\n            minVal = num\n            \n    return maxVal - minVal\n\narr = [1, 8, 4, 5, 9]\nresult = diffMaxMin(arr)\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.1970812060589415e-09,
      "p_css": 1.1065738601771704e-10,
      "p_html": 4.399352565006824e-09,
      "p_java": 8.678921300201404e-10,
      "p_javascript": 1.7276003046740424e-09,
      "p_matlab": 0.999997291658525,
      "p_python": 2.6918263192651256e-06,
      "p_sql": 4.4850175097275126e-10,
      "p_typescript": 5.76407058890806e-09
    },
    {
      "text": "import numpy as np\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(allocation):\n    # Calculate portfolio return on investment\n    portfolio_return = np.sum(allocation * stock_return)\n    return -portfolio_return\n\n# Set the bounds and constraints\nbounds = [(0, n) for n in available_stocks]\nconstraints = [{'type': 'eq', 'fun': lambda x: np.sum(x)-1}]\n\n# Initialize the starting allocations\nstarting_allocations = np.array([1/len(available_stocks)]*len(available_stocks))\n\n# Optimize\nresult = minimize(objective, starting_allocations, bounds=bounds, constraints=constraints)\nallocation = result.x\n\n# Print the optimal portfolio allocation\nprint(allocation)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.12529065991852717,
      "p_css": 0.7060781449370199,
      "p_html": 0.0058085555127287015,
      "p_java": 0.00023942185029033426,
      "p_javascript": 0.00826229320680846,
      "p_matlab": 0.0005375535950099563,
      "p_python": 0.1275227537817926,
      "p_sql": 0.0008584756092441217,
      "p_typescript": 0.025402141588578713
    },
    {
      "text": "def get_longer_string(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    else:\n        return string2\n\nlonger_string = get_longer_string(\"Hello\", \"World\")\nprint(longer_string)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.056862795367188794,
      "p_css": 0.0006918203836401429,
      "p_html": 0.0009054171723599582,
      "p_java": 7.387743105823864e-10,
      "p_javascript": 0.00188018114781131,
      "p_matlab": 4.234501830721859e-05,
      "p_python": 0.9391743984586287,
      "p_sql": 0.0003274986161042708,
      "p_typescript": 0.00011554309718526418
    },
    {
      "text": "def add_fifteen(num):\n    return num + 15",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.5233578417761248e-06,
      "p_css": 3.3522050881876355e-09,
      "p_html": 4.177477689760218e-06,
      "p_java": 2.9081561830057345e-07,
      "p_javascript": 5.854227171194932e-07,
      "p_matlab": 0.9986925988936454,
      "p_python": 0.0012984466311138224,
      "p_sql": 1.1063198476436148e-06,
      "p_typescript": 1.2677293210851854e-06
    },
    {
      "text": "def get_pairs(list, k):\n pairs = []\n for i in range(len(list)):\n for j in range(i+1, len(list)):\n if list[i] + list[j] == k:\n pairs.append( [list[i], list[j]] )\n return pairs\n\nprint(get_pairs([1, 2, 3, 4, 5], 5))\n\n# Output: [[1, 4], [2, 3]]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.348601527759879e-06,
      "p_css": 4.6627147062307584e-07,
      "p_html": 4.783129258011085e-06,
      "p_java": 6.247580524101119e-08,
      "p_javascript": 9.39724859287546e-07,
      "p_matlab": 0.9955884953955945,
      "p_python": 0.004366732349357275,
      "p_sql": 3.688826779836984e-05,
      "p_typescript": 2.837843292595094e-07
    },
    {
      "text": "# Python program to print all  \n# prime number in an interval \n\nstart = 1\nend = 100\n\nfor val in range(start, end + 1): \n    if val > 1: \n        for n in range(2, val//2 + 2): \n            if (val % n) == 0: \n                break\n            else: \n                if n == val//2 + 1: \n                    print(val)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1993690885934114,
      "p_css": 0.00020846885399415264,
      "p_html": 0.00034977703671433807,
      "p_java": 7.58760280309587e-07,
      "p_javascript": 0.00012924408095051844,
      "p_matlab": 0.2833027243374742,
      "p_python": 0.5159185546226888,
      "p_sql": 0.0007091336796770622,
      "p_typescript": 1.2250034809339814e-05
    },
    {
      "text": "import numpy as np \nimport pandas as pd \nfrom sklearn.linear_model import LinearRegression \n  \n#read the dataset\ndata = pd.read_csv('house_data.csv') \n  \n#split features and target\nX = data.iloc[:, :-1].values \ny = data.iloc[:, 3].values \n  \n#initialize the linear regression model  \nmodel = LinearRegression() \n  \n# fit the model with the data \nmodel.fit(X, y) \n  \n#make predictions on the test set\npredicted_price = model.predict([[square_footage, num_bedrooms, num_bathrooms]]) \n  \nprint('The expected price for the house is: $',predicted_price)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.2821430980216474,
      "p_css": 0.08067284844422468,
      "p_html": 0.002061079503255453,
      "p_java": 2.9529103499650393e-06,
      "p_javascript": 0.00012484722858586408,
      "p_matlab": 5.857225854876103e-06,
      "p_python": 0.14509159884549064,
      "p_sql": 2.898566031549941e-06,
      "p_typescript": 0.4898948192545596
    },
    {
      "text": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2993006700253814e-08,
      "p_css": 5.3149853979911544e-08,
      "p_html": 1.949156973612501e-08,
      "p_java": 1.7072085756017438e-09,
      "p_javascript": 1.0814163438826656e-08,
      "p_matlab": 0.9999979020055625,
      "p_python": 1.971594757543358e-06,
      "p_sql": 4.859780321886835e-10,
      "p_typescript": 2.7757899366024894e-08
    },
    {
      "text": "name = input(\"Enter your name: \")\nprint(\"Hello \" + name + \"!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8811172815877356,
      "p_css": 0.0006648907667306777,
      "p_html": 0.00852651292548568,
      "p_java": 0.01374583533036293,
      "p_javascript": 7.618062136367426e-07,
      "p_matlab": 2.579181055732017e-05,
      "p_python": 0.09584196744774694,
      "p_sql": 4.68658104975327e-05,
      "p_typescript": 3.0092514669832556e-05
    },
    {
      "text": "FROM python:3.7\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"]\n\n# File app.py\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n return 'Hello world!'\n\nif __name__ == '__main__':\n app.run(host='0.0.0.0', debug=True)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999994125645257,
      "p_css": 1.5406501089901018e-07,
      "p_html": 2.1409368142696754e-07,
      "p_java": 5.025038344154309e-16,
      "p_javascript": 1.681184511660256e-07,
      "p_matlab": 5.895219244971888e-10,
      "p_python": 3.083099979106105e-08,
      "p_sql": 1.956314794980534e-08,
      "p_typescript": 1.7466059902054066e-10
    },
    {
      "text": "#!/usr/bin/env python\n\n\"\"\"\n  diff_controller.py - controller for a differential drive\n  Copyright (c) 2010-2011 Vanadium Labs LLC.  All right reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n      * Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n      * Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n      * Neither the name of Vanadium Labs LLC nor the names of its \n        contributors may be used to endorse or promote products derived \n        from this software without specific prior written permission.\n  \n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL VANADIUM LABS BE LIABLE FOR ANY DIRECT, INDIRECT,\n  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"\n\nimport rospy\n\nfrom math import sin,cos,pi\n\nfrom geometry_msgs.msg import Quaternion\nfrom geometry_msgs.msg import Twist\nfrom nav_msgs.msg import Odometry\nfrom diagnostic_msgs.msg import *\nfrom tf.broadcaster import TransformBroadcaster\n\nfrom ax12 import *\nfrom controllers import *\nfrom struct import unpack\n\nclass DiffController(Controller):\n    \"\"\" Controller to handle movement & odometry feedback for a differential \n            drive mobile base. \"\"\"\n    def __init__(self, device, name):\n        Controller.__init__(self, device, name)\n        self.pause = True\n        self.last_cmd = rospy.Time.now()\n\n        # parameters: rates and geometry\n        self.rate = rospy.get_param('~controllers/'+name+'/rate',10.0)\n        self.timeout = rospy.get_param('~controllers/'+name+'/timeout',1.0)\n        self.t_delta = rospy.Duration(1.0/self.rate)\n        self.t_next = rospy.Time.now() + self.t_delta\n        self.ticks_meter = float(rospy.get_param('~controllers/'+name+'/ticks_meter'))\n        self.base_width = float(rospy.get_param('~controllers/'+name+'/base_width'))\n\n        self.base_frame_id = rospy.get_param('~controllers/'+name+'/base_frame_id', 'base_link')\n        self.odom_frame_id = rospy.get_param('~controllers/'+name+'/odom_frame_id', 'odom')\n\n        # parameters: PID\n        self.Kp = rospy.get_param('~controllers/'+name+'/Kp', 5)\n        self.Kd = rospy.get_param('~controllers/'+name+'/Kd', 1)\n        self.Ki = rospy.get_param('~controllers/'+name+'/Ki', 0)\n        self.Ko = rospy.get_param('~controllers/'+name+'/Ko', 50)\n\n        # parameters: acceleration\n        self.accel_limit = rospy.get_param('~controllers/'+name+'/accel_limit', 0.1)\n        self.max_accel = int(self.accel_limit*self.ticks_meter/self.rate)\n\n        # output for joint states publisher\n        self.joint_names = [\"base_l_wheel_joint\",\"base_r_wheel_joint\"]\n        self.joint_positions = [0,0]\n        self.joint_velocities = [0,0]\n\n        # internal data            \n        self.v_left = 0                 # current setpoint velocity\n        self.v_right = 0\n        self.v_des_left = 0             # cmd_vel setpoint\n        self.v_des_right = 0\n        self.enc_left = None            # encoder readings\n        self.enc_right = None\n        self.x = 0                      # position in xy plane\n        self.y = 0\n        self.th = 0\n        self.dx = 0                     # speeds in x/rotation\n        self.dr = 0\n        self.then = rospy.Time.now()    # time for determining dx/dy\n\n        # subscriptions\n        rospy.Subscriber(\"cmd_vel\", Twist, self.cmdVelCb)\n        self.odomPub = rospy.Publisher(\"odom\", Odometry, queue_size=5)\n        self.odomBroadcaster = TransformBroadcaster()\n\t\t\n        rospy.loginfo(\"Started DiffController (\"+name+\"). Geometry: \" + str(self.base_width) + \"m wide, \" + str(self.ticks_meter) + \" ticks/m.\")\n\n    def startup(self):\n        if not self.fake:\n            self.setup(self.Kp,self.Kd,self.Ki,self.Ko) \n    \n    def update(self):\n        now = rospy.Time.now()\n        if now > self.t_next:\n            elapsed = now - self.then\n            self.then = now\n            elapsed = elapsed.to_sec()\n\n            if self.fake:\n                x = cos(self.th)*self.dx*elapsed\n                y = -sin(self.th)*self.dx*elapsed\n                self.x += cos(self.th)*self.dx*elapsed\n                self.y += sin(self.th)*self.dx*elapsed\n                self.th += self.dr*elapsed\n            else:\n                # read encoders\n                try:\n                    left, right = self.status()\n                except Exception as e:\n                    rospy.logerr(\"Could not update encoders: \" + str(e))\n                    return\n                rospy.logdebug(\"Encoders: \" + str(left) +\",\"+ str(right))\n\n                # calculate odometry\n                if self.enc_left == None:\n                    d_left = 0\n                    d_right = 0\n                else:\n                    d_left = (left - self.enc_left)/self.ticks_meter\n                    d_right = (right - self.enc_right)/self.ticks_meter\n                self.enc_left = left\n                self.enc_right = right\n\n                d = (d_left+d_right)/2\n                th = (d_right-d_left)/self.base_width\n                self.dx = d / elapsed\n                self.dr = th / elapsed\n\n                if (d != 0):\n                    x = cos(th)*d\n                    y = -sin(th)*d\n                    self.x = self.x + (cos(self.th)*x - sin(self.th)*y)\n                    self.y = self.y + (sin(self.th)*x + cos(self.th)*y)\n                if (th != 0):\n                    self.th = self.th + th\n\n            # publish or perish\n            quaternion = Quaternion()\n            quaternion.x = 0.0 \n            quaternion.y = 0.0\n            quaternion.z = sin(self.th/2)\n            quaternion.w = cos(self.th/2)\n            self.odomBroadcaster.sendTransform(\n                (self.x, self.y, 0), \n                (quaternion.x, quaternion.y, quaternion.z, quaternion.w),\n                rospy.Time.now(),\n                self.base_frame_id,\n                self.odom_frame_id\n                )\n\n            odom = Odometry()\n            odom.header.stamp = now\n            odom.header.frame_id = self.odom_frame_id\n            odom.pose.pose.position.x = self.x\n            odom.pose.pose.position.y = self.y\n            odom.pose.pose.position.z = 0\n            odom.pose.pose.orientation = quaternion\n            odom.child_frame_id = self.base_frame_id\n            odom.twist.twist.linear.x = self.dx\n            odom.twist.twist.linear.y = 0\n            odom.twist.twist.angular.z = self.dr\n            self.odomPub.publish(odom)\n\n            if now > (self.last_cmd + rospy.Duration(self.timeout)):\n                self.v_des_left = 0\n                self.v_des_right = 0\n\n            # update motors\n            if not self.fake:\n                if self.v_left < self.v_des_left:\n                    self.v_left += self.max_accel\n                    if self.v_left > self.v_des_left:\n                        self.v_left = self.v_des_left\n                else:\n                    self.v_left -= self.max_accel\n                    if self.v_left < self.v_des_left:\n                        self.v_left = self.v_des_left\n                \n                if self.v_right < self.v_des_right:\n                    self.v_right += self.max_accel\n                    if self.v_right > self.v_des_right:\n                        self.v_right = self.v_des_right\n                else:\n                    self.v_right -= self.max_accel\n                    if self.v_right < self.v_des_right:\n                        self.v_right = self.v_des_right\n                self.write(self.v_left, self.v_right)\n\n            self.t_next = now + self.t_delta\n \n    def shutdown(self):\n        if not self.fake:\n            self.write(0,0)\n\n    def cmdVelCb(self,req):\n        \"\"\" Handle movement requests. \"\"\"\n        self.last_cmd = rospy.Time.now()\n        if self.fake:\n            self.dx = req.linear.x        # m/s\n            self.dr = req.angular.z       # rad/s\n        else:\n            # set motor speeds in ticks per 1/30s\n            self.v_des_left = int( ((req.linear.x - (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0)\n            self.v_des_right = int( ((req.linear.x + (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0)\n\n    def getDiagnostics(self):\n        \"\"\" Get a diagnostics status. \"\"\"\n        msg = DiagnosticStatus()\n        msg.name = self.name\n        msg.level = DiagnosticStatus.OK\n        msg.message = \"OK\"\n        if not self.fake:\n            msg.values.append(KeyValue(\"Left\", str(self.enc_left)))\n            msg.values.append(KeyValue(\"Right\", str(self.enc_right)))\n        msg.values.append(KeyValue(\"dX\", str(self.dx)))\n        msg.values.append(KeyValue(\"dR\", str(self.dr)))\n        return msg\n\n    ###\n    ### Controller Specification: \n    ###\n    ###  setup: Kp, Kd, Ki, Ko (all unsigned char)\n    ###\n    ###  write: left_speed, right_speed (2-byte signed, ticks per frame)\n    ###\n    ###  status: left_enc, right_enc (4-byte signed)\n    ### \n    \n    def setup(self, kp, kd, ki, ko):\n        success = self.device.execute(253, AX_CONTROL_SETUP, [10, kp, kd, ki, ko])\n\n    def write(self, left, right):\n        \"\"\" Send a closed-loop speed. Base PID loop runs at 30Hz, these values\n                are therefore in ticks per 1/30 second. \"\"\"\n        left = left&0xffff\n        right = right&0xffff\n        success = self.device.execute(253, AX_CONTROL_WRITE, [10, left%256, left>>8, right%256, right>>8])\n\n    def status(self):\n        \"\"\" read 32-bit (signed) encoder values. \"\"\"\n        values = self.device.execute(253, AX_CONTROL_STAT, [10])\n        left_values = \"\".join([chr(k) for k in values[0:4] ])        \n        right_values = \"\".join([chr(k) for k in values[4:] ])\n        try:\n            left = unpack('=l',left_values)[0]\n            right = unpack('=l',right_values)[0]\n            return [left, right]\n        except:\n            return None\n\n",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 4.732119554283439e-05,
      "p_css": 0.012241672175100304,
      "p_html": 0.18600957326951553,
      "p_java": 2.8811991833258885e-06,
      "p_javascript": 3.4940967678286866e-06,
      "p_matlab": 9.151133736362085e-07,
      "p_python": 0.012071706450644069,
      "p_sql": 0.7893120806051831,
      "p_typescript": 0.0003103558946893882
    },
    {
      "text": "class Student:\n    def __init__(self, course_name, grades):\n        self.course_name = course_name\n        self.grades = grades\n        \n    def get_grade(self):\n        return sum(self.grades) / len(self.grades)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006633459423632783,
      "p_css": 0.0503596616274014,
      "p_html": 0.10306329545452912,
      "p_java": 0.0001691781444719154,
      "p_javascript": 0.00012502489287364362,
      "p_matlab": 4.241044708034753e-05,
      "p_python": 0.7383108195930138,
      "p_sql": 0.1042214842160049,
      "p_typescript": 0.0030447796822615286
    },
    {
      "text": "def character_count(text):\n    char_dict = {}\n    for char in text:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n\nresult = character_count(text)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010429421434632361,
      "p_css": 0.26658428248593746,
      "p_html": 0.00201609034977451,
      "p_java": 0.00010057615495939257,
      "p_javascript": 0.001225512266328668,
      "p_matlab": 0.0049332642907768,
      "p_python": 0.7119674837955862,
      "p_sql": 0.0071150996904151146,
      "p_typescript": 0.005014748822758502
    },
    {
      "text": "removed_string = string[:1] + string[2:]\nprint(removed_string) # \"xample\"",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 9.22753345226816e-23,
      "p_css": 7.44857195395343e-13,
      "p_html": 1.545071355857603e-14,
      "p_java": 0.9999999997575009,
      "p_javascript": 2.6352492226918604e-25,
      "p_matlab": 4.789181568366088e-18,
      "p_python": 1.9987781254498496e-10,
      "p_sql": 4.1858780937164426e-11,
      "p_typescript": 1.8975648666343276e-15
    },
    {
      "text": "class TreeNode:\n    def __init__(self, name, value, left=None, right=None):\n        self.name = name\n        self.value = value\n        self.left = left\n        self.right = right",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.002116784913170741,
      "p_css": 0.06257802016654834,
      "p_html": 0.11538615770867411,
      "p_java": 0.36433381384507346,
      "p_javascript": 7.942394219895216e-07,
      "p_matlab": 0.02484749675764939,
      "p_python": 0.0025842883479647886,
      "p_sql": 0.4273326943359321,
      "p_typescript": 0.0008199496855651673
    },
    {
      "text": "def count_pairs(numbers, x):\n    count = 0\n    i, j = 0, len(numbers) - 1\n    while i < j: \n        sum = numbers[i] + numbers[j]\n        if sum == x: \n            count += 1\n            i += 1\n        elif sum < x: \n            i += 1 \n        else: \n            j -= 1\n    return count",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.010196185987639e-05,
      "p_css": 0.00031706803477514283,
      "p_html": 0.00048384308095044293,
      "p_java": 0.7133394003613326,
      "p_javascript": 0.0003794081766090447,
      "p_matlab": 5.4646375629037526e-08,
      "p_python": 0.28519122208594627,
      "p_sql": 0.00015225414849728274,
      "p_typescript": 7.664750365367297e-05
    },
    {
      "text": "def remove_vowels(string1, string2):\n  res = ''\n  vowels = 'aeiouAEIOU'\n\n  for char in string1 + string2:\n    if char not in vowels:\n      res += char\n  \n  return res\n\nprint(remove_vowels(string1, string2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00019941657897511555,
      "p_css": 0.003953242464720623,
      "p_html": 0.0007147151987603869,
      "p_java": 1.8892512095475794e-05,
      "p_javascript": 0.00013012219547833088,
      "p_matlab": 0.000616440748533802,
      "p_python": 0.9924681030936057,
      "p_sql": 0.001614890232057505,
      "p_typescript": 0.00028417697577314953
    },
    {
      "text": "def sum_of_digits(n):\n   \"\"\"Find the sum of all the digits of an integer n\"\"\"\n   s = 0\n   while n:\n       s += n % 10\n       n //= 10\n   return s",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0006126269459855845,
      "p_css": 0.002063338825863603,
      "p_html": 0.007983813493958448,
      "p_java": 0.003822249404721906,
      "p_javascript": 0.6153984098665137,
      "p_matlab": 2.5080550670766694e-05,
      "p_python": 0.3624322047377915,
      "p_sql": 0.0003235576460741421,
      "p_typescript": 0.0073387185284202955
    },
    {
      "text": "def primeFactors(n): \n    pf = [] \n    i = 2\n    while i * i <= n: \n        if n % i: \n            i += 1\n        else: \n            n //= i \n            pf.append(i)\n    if n > 1: \n        pf.append(n)\n  \n    return pf",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.1792224794253523e-06,
      "p_css": 1.3529100306923148e-05,
      "p_html": 7.463936203227295e-06,
      "p_java": 7.90086482454601e-07,
      "p_javascript": 1.0760555829355303e-06,
      "p_matlab": 0.9999637296598926,
      "p_python": 6.102242194033423e-06,
      "p_sql": 1.4283891491250766e-06,
      "p_typescript": 2.7013077092763735e-06
    },
    {
      "text": "# Program to find the longest common subsequence between two strings \ndef lcs(X, Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n\n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n\n    # Following steps to build L[m+1][n+1] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n\n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"ABACEDF\"\nY = \"ABDCF\"\n\nprint(\"Length of LCS is \", lcs(X, Y))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.036232686606720015,
      "p_css": 0.00021116497334462564,
      "p_html": 0.0011040475902145833,
      "p_java": 0.00011335234939735321,
      "p_javascript": 0.04276502951027539,
      "p_matlab": 0.0010403666477248133,
      "p_python": 0.8380225375613038,
      "p_sql": 0.060011613906662604,
      "p_typescript": 0.020499200854356782
    },
    {
      "text": "def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([3,6,8,10,1,2,1]))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.9765850164487715e-09,
      "p_css": 1.0719138954215695e-08,
      "p_html": 2.163579895784466e-09,
      "p_java": 5.080810893188007e-10,
      "p_javascript": 2.850024762959677e-10,
      "p_matlab": 0.9999970636282284,
      "p_python": 2.916704641623668e-06,
      "p_sql": 1.889470046110096e-10,
      "p_typescript": 2.8257955154914374e-09
    },
    {
      "text": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Data\ntexts = ['This is an amazing day!', 'I am feeling sad today.']\nlabels = [1, 0] # 1 = positive sentiment and 0 = negative sentiment\n\n# Vectorizing the texts\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(texts)\n\n# Splitting the data\nX_train, X_test, y_train, y_test = train_test_split(X, labels, test_size = 0.25, random_state = 0)\n\n# Fitting the model\nclassifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n\n# Predicting\ny_pred = classifier.predict(X_test)\nprint(y_pred)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0656862105979932,
      "p_css": 0.05173677175385699,
      "p_html": 0.0016379994578697974,
      "p_java": 5.400106575100297e-05,
      "p_javascript": 0.00045153487322125655,
      "p_matlab": 4.7891241956077575e-05,
      "p_python": 0.7169503622784321,
      "p_sql": 0.00010522522327349028,
      "p_typescript": 0.16333000350764612
    },
    {
      "text": "#Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0004514514490251277,
      "p_css": 0.2744258181523311,
      "p_html": 0.0012930998274245386,
      "p_java": 3.411167300856885e-07,
      "p_javascript": 0.00740992523694721,
      "p_matlab": 0.6505236323020375,
      "p_python": 1.918222975069593e-05,
      "p_sql": 0.0003502336656376319,
      "p_typescript": 0.06552631602011615
    },
    {
      "text": "x = 5\ny = 7\nsum = x + y\n\n# Add the correct operator here\nsum = x + y\n\nprint(\"Sum=\", sum)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00048379234533805197,
      "p_css": 0.0005940837756218424,
      "p_html": 0.0029617181991601813,
      "p_java": 0.9879053834338635,
      "p_javascript": 0.0036193283635657463,
      "p_matlab": 1.093885196528045e-05,
      "p_python": 0.0036020560663116534,
      "p_sql": 0.0005784363262382589,
      "p_typescript": 0.0002442626379354486
    },
    {
      "text": "import random\n\n# Define the board\nboard = ['_', '_', '_', \n         '_', '_', '_', \n         '_', '_', '_']\n\n# Define the players\nplayer = 'X'\nai = 'O'\n\n# Define the rules of the game\ndef play_game():\n # Draw initial board\n draw_board(board)\n\n # Choose the player to start (randomly)\n choose_player()\n \n # Start playing the game\n game_state = 'Playing'\n while game_state == 'Playing':\n  if player == 'X':\n   # Ask the player to make a move\n   make_move(player)\n   # Check if anyone has won the game after the player's move\n   game_state = check_game(board, player)\n   # Change the player\n   player = ai\n  else:\n   # Let the AI make a move\n   make_move(ai)\n   # Check if anyone has won the game after the AI's move\n   game_state = check_game(board, ai)\n   # Change the player\n   player = 'X'\n \n\n# Draw the board\ndef draw_board(board):\n print(\"-----------------\")\n for i in range(3):\n  print(\"| \", board[i*3], \" | \", board[i*3 + 1], \" | \", board[i*3 + 2], \" |\")\n  print(\"-----------------\") \n\n# Choose the player to start (randomly)\ndef choose_player():\n global player\n random_num = random.randint(0,1)\n if random_num == 0:\n  player = 'X'\n else:\n  player = 'O'\n\n# Make a move\ndef make_move(player):\n legal_moves = [i for i, x in enumerate(board) if x == '_']\n move = -1\n\n # Player is human\n if player == 'X':\n  while move not in legal_moves:\n     move = int(input(\"Choose your move: (0-9)\"))\n \n # Player is AI\n else:\n  move = random.choice(legal_moves)\n\n # Make the move\n board[move] = player\n\n# Check if anyone has won\ndef check_game(board, player):\n for row in range(3):\n  if board[row*3] == board[row*3 + 1] and board[row*3 + 1] == board[row*3 + 2]:\n   if board[row*3] == player:\n    return 'Player ' + player + ' won the game!'\n\n for col in range(3):\n  if board[col] == board[col + 3] and board[col + 3] == board[col + 6]:\n   if board[col] == player:\n    return 'Player ' + player + ' won the game!'\n\n if board[0] == board[4] and board[4] == board[8]:\n  if board[0] == player:\n   return 'Player ' + player + ' won the game!'\n\n if board[2] == board[4] and board[4] == board[6]:\n  if board[2] == player:\n   return 'Player ' + player + ' won the game!'\n\n # Check if all the squares are filled\n if board.count('_') == 0:\n  return 'Draw!'\n\n return 'Playing'\n\n# Execute the game\nplay_game()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.062278464865816514,
      "p_css": 0.03337813271100301,
      "p_html": 0.00877388425698169,
      "p_java": 0.00012433616796644325,
      "p_javascript": 0.1004645340748511,
      "p_matlab": 0.02055202178571387,
      "p_python": 0.33506198757131067,
      "p_sql": 0.27683921155455765,
      "p_typescript": 0.16252742701179906
    },
    {
      "text": "import random\n\nitems = ['a', 'b', 'c', 'd']\nrandom.shuffle(items)\n\nprint(items)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00033144601338052737,
      "p_css": 0.05914167398168215,
      "p_html": 0.0010095800970019806,
      "p_java": 1.106825736844975e-05,
      "p_javascript": 0.0052060002106490465,
      "p_matlab": 6.242413166211592e-06,
      "p_python": 0.8926501331755792,
      "p_sql": 0.041637256262653,
      "p_typescript": 6.599588519424352e-06
    },
    {
      "text": "for i in range(3, 11):\n    if(i % 2 == 0):\n        print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.379839654179141e-21,
      "p_css": 6.1351192684115876e-30,
      "p_html": 2.130406467552319e-20,
      "p_java": 1.2326546456504435e-22,
      "p_javascript": 3.330245168218143e-22,
      "p_matlab": 0.9999999999999998,
      "p_python": 1.5817524948768142e-16,
      "p_sql": 8.900544194337892e-23,
      "p_typescript": 1.5276440602791175e-21
    },
    {
      "text": "import os\n\ndef get_filetype(filename):\n _, file_extension = os.path.splitext(filename)\n return(file_extension.lower()[1:])\n\nfiletype = get_filetype(\"example.jpg\")\nprint(filetype)\n\n# Output: jpg",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.031083588539124435,
      "p_css": 0.33982969274567676,
      "p_html": 0.03356342896478868,
      "p_java": 0.00612563896668215,
      "p_javascript": 0.005099379920269565,
      "p_matlab": 0.0003837273678924023,
      "p_python": 0.5204052088846634,
      "p_sql": 0.0632307192176121,
      "p_typescript": 0.0002786153932905523
    },
    {
      "text": "prime_nos = {11, 13, 17, 19, 23, 29}\n\noutput_dict = {prime_no: prime_no**2 for prime_no in prime_nos}\nprint(output_dict)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.005482334935176599,
      "p_css": 0.021919296345630685,
      "p_html": 0.013287570203335305,
      "p_java": 0.0008753405242169029,
      "p_javascript": 0.004971566205859991,
      "p_matlab": 0.07923654888576405,
      "p_python": 0.862096623416317,
      "p_sql": 0.0036054111858529426,
      "p_typescript": 0.008525308297846694
    },
    {
      "text": "def sortList(input_list):\n # Create an empty list to store the sorted elements\n sorted_list = []\n \n while len(input_list) > 0:\n # Take the first element of the input list\n min_element = input_list[0]\n \n # Get the index of the minimum element\n min_index = 0\n \n # Iterate over the list to find the index of the minimum element\n for i in range(1, len(input_list)):\n # Check if the current element is the smallest\n if input_list[i] < min_element:\n min_element = input_list[i]\n min_index = i\n \n # After finding the minimum element, append it to the sorted list\n sorted_list.append(min_element)\n \n # Remove the minimum element from the input list\n del input_list[min_index]\n \n # Return the sorted list\n return sorted_list\n \n# Test\ninput_list = [14, 2, 3, 12, 15, 8]\n\nsorted_list = sortList(input_list)\n\nprint(sorted_list)\n# Output: [2, 3, 8, 12, 14, 15]",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.007483580461944282,
      "p_css": 0.0034188249645002488,
      "p_html": 0.005144767720668605,
      "p_java": 3.684244399901895e-05,
      "p_javascript": 0.634932340377204,
      "p_matlab": 0.04174792541578343,
      "p_python": 0.11598648784363999,
      "p_sql": 0.0005495166320658969,
      "p_typescript": 0.19069971414019463
    },
    {
      "text": "def last_elements(lst, n):\n    return lst[-n:]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.819192307854659e-05,
      "p_css": 0.00011738681098889915,
      "p_html": 4.769404209300214e-05,
      "p_java": 3.514819746534356e-06,
      "p_javascript": 1.003973904387956e-05,
      "p_matlab": 3.478468270202896e-07,
      "p_python": 0.999743966020612,
      "p_sql": 3.781935866721665e-05,
      "p_typescript": 2.103943894269167e-05
    },
    {
      "text": "#import matplotlib.pyplot as plt \nimport numpy as np \nimport sympy as sym \nfrom scipy import optimize \n\n# define the function\ndef function(x, y):\n\treturn 5*x + 3*y \n\n# define the inputs\nx = sym.Symbol('x') \ny = sym.Symbol('y') \n\n# optimize the function\nresult = optimize.minimize(function, [0, 0]) \n\n# output the results\nprint('The optimal value of x is:', result.x[0]) \nprint('The optimal value of y is:', result.x[1])",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.00043222338512496976,
      "p_css": 0.005132141664271983,
      "p_html": 4.50303428797234e-05,
      "p_java": 2.813051463158953e-07,
      "p_javascript": 0.9937897676652824,
      "p_matlab": 4.356961754217712e-06,
      "p_python": 9.099886000566031e-05,
      "p_sql": 3.3886394401927655e-05,
      "p_typescript": 0.0004713134211326516
    },
    {
      "text": "# views.py\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        results = MyModel.objects.filter(\n            Q(title__icontains=query) # Search title field\n            | Q(body__icontains=query) # Search body field\n        ).distinct()\n    else:\n        results = []\n    return render(request, 'results.html', {\n        'results': results,\n        'query': query\n    })\n\n# models.py\nclass MyModel(models.Model):\n    title = models.CharField(max_length=100)\n    body = models.TextField()\n    \n# results.html\n<h1>Results</h1>\n{% if results %}\n    {% for result in results %}\n        {{ result.title }}\n    {% endfor %}\n{% else %}\n    <p>No results</p>\n{% endif %}",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 0.0013612753898068811,
      "p_css": 0.0008732960483778144,
      "p_html": 0.9949418469106718,
      "p_java": 5.542609393556602e-06,
      "p_javascript": 0.0027746855353010806,
      "p_matlab": 3.459954549731949e-06,
      "p_python": 5.296966761327429e-06,
      "p_sql": 7.83424533306656e-07,
      "p_typescript": 3.3813160604371764e-05
    },
    {
      "text": "class SpeciesClassifier():\n    def __init__(self, species_list):\n        self.species_list = species_list\n\n    def classify_species(self, species_name):\n        for name_from_list in self.species_list:\n            if name_from_list == species_name:\n                return self.species_list[name_from_list]['classification']\n        return None",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 6.106208195930669e-06,
      "p_css": 0.00354088215669442,
      "p_html": 0.02021642067561211,
      "p_java": 3.7031125234967984e-07,
      "p_javascript": 1.3647142383864207e-06,
      "p_matlab": 2.9653777175481984e-06,
      "p_python": 0.43857264245078276,
      "p_sql": 0.5376290537820304,
      "p_typescript": 3.0194323476185026e-05
    },
    {
      "text": "def is_prime(n):\n if n <= 1:\n return False\n\n for i in range(2, n):\n\n if n % i == 0:\n return False\n\n return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.583796435139497e-07,
      "p_css": 2.829063375768894e-08,
      "p_html": 3.962396070607732e-06,
      "p_java": 9.785096474935669e-09,
      "p_javascript": 2.3007483727141916e-08,
      "p_matlab": 9.283407907303936e-05,
      "p_python": 0.9999028516607115,
      "p_sql": 9.45152148318359e-08,
      "p_typescript": 3.78860726559015e-08
    },
    {
      "text": "import math\n\ndef generate_primes(n): \n    primes = []\n    num = 2\n    while len(primes) < n: \n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                is_prime = False\n                break\n\n        if is_prime: \n            primes.append(num)\n\n        num += 1\n    \n    return primes\n\nn = 8\nprimes = generate_primes(n)\nprint(primes)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.782930020539034e-05,
      "p_css": 1.0848871992370977e-07,
      "p_html": 4.0766139266206086e-05,
      "p_java": 2.904748881258546e-05,
      "p_javascript": 2.8843047110024e-06,
      "p_matlab": 0.974149979744147,
      "p_python": 0.02573592739461514,
      "p_sql": 3.7585705927838434e-06,
      "p_typescript": 9.698568929918636e-06
    },
    {
      "text": "class Vector3D:\n\n def __init__(self, x, y, z):\n self.x = x\n self.y = y\n self.z = z\n  \n def dot_product(self, vec2):\n return (self.x * vec2.x + self.y * vec2.y + self.z * vec2.z)\n  \n def cross_product(self, vec2):\n return Vector3D(\n  self.y * vec2.z - self.z * vec2.y,\n  self.z * vec2.x - self.x * vec2.z,\n  self.x * vec2.y - self.y * vec2.x\n )\n  \n def magnitude(self):\n return (self.x**2 + self.y**2 + self.z**2)**0.5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003346398514429589,
      "p_css": 0.01943470450002516,
      "p_html": 0.1810594721377637,
      "p_java": 2.0201922295806942e-05,
      "p_javascript": 0.00017371395326956697,
      "p_matlab": 1.9866041856078762e-05,
      "p_python": 0.629778258228885,
      "p_sql": 0.1684282369076487,
      "p_typescript": 0.0007509064568131483
    },
    {
      "text": "def count_words(text):\n    ''' Counts the number of words in a text '''\n    # Optimization #1: Replacing the loop and using Python's count method\n    word_count = len(text.split(' ')) \n    return word_count",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0055536295791740456,
      "p_css": 0.007595557587243985,
      "p_html": 0.00021610733421384957,
      "p_java": 7.396225762611152e-06,
      "p_javascript": 0.002992368453050244,
      "p_matlab": 3.4046975512336336e-06,
      "p_python": 0.1444855276956734,
      "p_sql": 0.001705701213829536,
      "p_typescript": 0.8374403072135012
    },
    {
      "text": "def filter_x(list):\n    new_list = []\n\n    # iterate through the list \n    for i in list:\n        if 'x' not in i:\n            # add the string not containing x\n            new_list.append(i)\n    return new_list\n\nlist = ['abc', 'efg', 'X', 'xyz', 'xabc']\nfiltered_list = filter_x(list)\nprint(\"The list after filtering: \", filtered_list)",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.00046260719176772233,
      "p_css": 0.00580381735316474,
      "p_html": 0.005768503535036353,
      "p_java": 0.023071283411813033,
      "p_javascript": 0.000866411725859808,
      "p_matlab": 0.25016147326205906,
      "p_python": 0.15224829699632467,
      "p_sql": 0.5414709112818167,
      "p_typescript": 0.020146695242157932
    },
    {
      "text": "import string\nimport random\n\ndef password_generator(length):\n   password_characters = string.ascii_letters + string.digits + string.punctuation\n   new_password = \"\".join(random.choice(password_characters) for i in range(length))\n   return new_password",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 5.752697796988442e-13,
      "p_css": 9.273315141397717e-09,
      "p_html": 1.3434531183786398e-08,
      "p_java": 0.05629935946588396,
      "p_javascript": 5.05382495043141e-14,
      "p_matlab": 2.3265891962232473e-09,
      "p_python": 3.250377197890738e-05,
      "p_sql": 0.9436681109875661,
      "p_typescript": 7.395094647429838e-10
    },
    {
      "text": "def generate_dict(list1):\n    my_dict = {}\n    for item in list1:\n        my_dict[item] = item ** 2\n    return my_dict",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005126391274171762,
      "p_css": 0.24869758685441407,
      "p_html": 0.009879336002659958,
      "p_java": 7.810234899324258e-05,
      "p_javascript": 0.009949491898759074,
      "p_matlab": 0.0002087169097981864,
      "p_python": 0.7303174700308049,
      "p_sql": 0.0001162517595139272,
      "p_typescript": 0.00024040506763947254
    },
    {
      "text": "import math\n\nnum = float(input(\"Enter a number: \"))\n\n# checking if the number is negative\nif num < 0:\n    print(\"The square root of the given number cannot be computed\")\nelse:\n    print(\"The square root of the given number is:\",math.sqrt(num))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00020053767165723307,
      "p_css": 4.267106474322489e-05,
      "p_html": 0.00039541442816774526,
      "p_java": 1.897444998759507e-05,
      "p_javascript": 0.0017142294216288326,
      "p_matlab": 0.019217892117468268,
      "p_python": 0.751536581437193,
      "p_sql": 0.0009878119373998863,
      "p_typescript": 0.22588588747175425
    },
    {
      "text": "from sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# Load the data\nX = np.array([[1000], [2000], [3000]])\ny = np.array([20000, 40000, 60000])\n\n# Create the linear regression model\nmodel = LinearRegression()\n\n# Train the model with the data\nmodel.fit(X, y)\n\n# Print the model parameters\nprint('Intercept:', model.intercept_) \nprint('Coefficient:', model.coef_)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9960073022639163,
      "p_css": 0.00021066486821534248,
      "p_html": 6.017706643332267e-05,
      "p_java": 9.128252093625482e-08,
      "p_javascript": 1.8426253733971417e-06,
      "p_matlab": 5.315508681162363e-07,
      "p_python": 0.0024163237319457472,
      "p_sql": 8.163574641706948e-11,
      "p_typescript": 0.0013030665290909868
    },
    {
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n# CadQuery script to generate connector models\n\n## requirements\n## freecad (v1.5 and v1.6 have been tested)\n## cadquery FreeCAD plugin (v0.3.0 and v0.2.0 have been tested)\n##   https://github.com/jmwright/cadquery-freecad-module\n\n## This script can be run from within the cadquery module of freecad.\n## To generate VRML/ STEP files for, use export_conn_jst_xh\n## script of the parent directory.\n\n#* This is a cadquery script for the generation of MCAD Models.             *\n#*                                                                          *\n#*   Copyright (c) 2016                                                     *\n#* Rene Poeschl https://github.com/poeschlr                                 *\n#* All trademarks within this guide belong to their legitimate owners.      *\n#*                                                                          *\n#*   This program is free software; you can redistribute it and/or modify   *\n#*   it under the terms of the GNU General Public License (GPL)             *\n#*   as published by the Free Software Foundation; either version 2 of      *\n#*   the License, or (at your option) any later version.                    *\n#*   for detail see the LICENCE text file.                                  *\n#*                                                                          *\n#*   This program is distributed in the hope that it will be useful,        *\n#*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *\n#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *\n#*   GNU Library General Public License for more details.                   *\n#*                                                                          *\n#*   You should have received a copy of the GNU Library General Public      *\n#*   License along with this program; if not, write to the Free Software    *\n#*   Foundation, Inc.,                                                      *\n#*   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA           *\n#*                                                                          *\n#* The models generated with this script add the following exception:       *\n#*   As a special exception, if you create a design which uses this symbol, *\n#*   and embed this symbol or unaltered portions of this symbol into the    *\n#*   design, this symbol does not by itself cause the resulting design to   *\n#*   be covered by the GNU General Public License. This exception does not  *\n#*   however invalidate any other reasons why the design itself might be    *\n#*   covered by the GNU General Public License. If you modify this symbol,  *\n#*   you may extend this exception to your version of the symbol, but you   *\n#*   are not obligated to do so. If you do not wish to do so, delete this   *\n#*   exception statement from your version.                                 *\n#****************************************************************************\n\n__title__ = \"model description for 4UCON 17809 series connectors\"\n__author__ = \"hackscribble\"\n__Comment__ = 'model description for 4UCON 17809 series connectors using cadquery'\n\n___ver___ = \"0.3 18/06/2020\"\n\n\nimport cadquery as cq\nfrom Helpers import show\nfrom collections import namedtuple\nimport FreeCAD\nfrom conn_4ucon_17809_params import *\n\nfrom ribbon import Ribbon\n\n\ndef generate_straight_pin(params, pin_1_side):\n    foot_height = seriesParams.foot_height\n    pin_width=seriesParams.pin_width\n    pin_depth=seriesParams.pin_depth\n    pin_height=seriesParams.pin_height\n    pin_inside_distance=seriesParams.pin_inside_distance\n    pin_thickness = seriesParams.pin_thickness\n    chamfer_long = seriesParams.pin_chamfer_long\n    chamfer_short = seriesParams.pin_chamfer_short\n    sign = 1 if pin_1_side else -1\n    pin=cq.Workplane(\"YZ\").workplane(offset=-pin_width/2.0)\\\n        .moveTo(0, foot_height)\\\n        .line(sign*pin_thickness/2,0)\\\n        .line(sign*1.27,-foot_height)\\\n        .line(0, -2.54)\\\n        .line(sign*-pin_thickness,0)\\\n        .line(0, 2.54)\\\n        .line(sign*-1.27, foot_height)\\\n        .line(0,1)\\\n        .close()\\\n        .extrude(pin_width).edges(\"|X\").fillet(0.07)\n    return pin\n\n\ndef generate_2_pin_group(params, pin_1_side):\n    pin_pitch=params.pin_pitch\n    pin_y_pitch=params.pin_y_pitch\n    num_pins=params.num_pins\n    pin_a = generate_straight_pin(params, pin_1_side).translate((0, -pin_y_pitch/2, 0))\n    pin_b = pin_a.translate((0, -2 * pin_y_pitch, 0))\n    pin_group = pin_a.union(pin_b)\n    return pin_group\n\n\ndef generate_pins(params):\n    pin_pitch=params.pin_pitch\n    num_pins=params.num_pins\n    pins = generate_2_pin_group(params, pin_1_side=True)\n    for i in range(1, num_pins // 2):\n        pins = pins.union(generate_2_pin_group(params, i % 2 == 0).translate((i*pin_pitch,0,0)))\n    return pins\n\n\ndef generate_2_contact_group(params):\n    pin_y_pitch=params.pin_y_pitch\n    foot_height = seriesParams.foot_height\n    pin_thickness = seriesParams.pin_thickness\n    pin_width=seriesParams.pin_width\n    y_offset = -(2*pin_y_pitch)\n    c_list = [\n        ('start', {'position': (pin_y_pitch, foot_height), 'direction': 90.0, 'width':pin_thickness}),\n        ('line', {'length': 4.5}),\n        ('arc', {'radius': 0.2, 'angle': 35.0}),\n        ('line', {'length': 3}),\n        ('arc', {'radius': 2.0, 'angle': -70.0}),\n        ('line', {'length': 2}),\n        ('arc', {'radius': 0.2, 'angle': 35.0}),\n        ('line', {'length': 2.8}),\n    ]\n    ribbon = Ribbon(cq.Workplane(\"YZ\").workplane(offset=-pin_width/2.0), c_list)\n    contact1 = ribbon.drawRibbon().extrude(pin_width)\n    contact2 = contact1.mirror(\"XZ\")\n    contact1 = contact1.union(contact2).translate((0,-3*pin_y_pitch/2.0,0))\n    return contact1\n\n\ndef generate_contacts(params):\n    num_pins=params.num_pins\n    pin_pitch=params.pin_pitch\n    pair = generate_2_contact_group(params)\n    contacts = pair\n    for i in range(0, num_pins // 2):\n        contacts = contacts.union(pair.translate((i*pin_pitch,0,0)))\n    return contacts\n\n\ndef generate_body(params, calc_dim):\n    pin_inside_distance = seriesParams.pin_inside_distance\n    pin_width = seriesParams.pin_width\n    num_pins = params.num_pins\n    pin_pitch = params.pin_pitch\n    pin_y_pitch=params.pin_y_pitch\n\n    body_length = calc_dim.length\n    body_width = seriesParams.body_width\n    body_height = seriesParams.body_height\n    body_fillet_radius = seriesParams.body_fillet_radius\n\n    marker_x_inside = seriesParams.marker_x_inside\n    marker_y_inside = seriesParams.marker_y_inside\n    marker_size = seriesParams.marker_size\n    marker_depth = seriesParams.marker_depth\n\n    foot_height = seriesParams.foot_height\n    foot_width = seriesParams.foot_width\n    foot_length = seriesParams.foot_length\n    foot_inside_distance = seriesParams.foot_inside_distance\n\n    slot_length = calc_dim.slot_length\n    slot_outside_pin = seriesParams.slot_outside_pin\n    slot_width = seriesParams.slot_width\n    slot_depth = seriesParams.slot_depth\n    slot_chamfer = seriesParams.slot_chamfer\n\n    hole_width = seriesParams.hole_width\n    hole_length = seriesParams.hole_length\n    hole_offset = seriesParams.hole_offset\n    hole_depth = seriesParams.hole_depth\n\n    top_void_depth = seriesParams.top_void_depth\n    top_void_width = seriesParams.top_void_width\n    bottom_void_width = calc_dim.bottom_void_width\n\n    recess_depth = seriesParams.recess_depth\n    recess_large_width = seriesParams.recess_large_width\n    recess_small_width = seriesParams.recess_small_width\n    recess_height = seriesParams.recess_height\n\n    x_offset = (((num_pins // 2) - 1)*pin_pitch)/2.0\n    y_offset = -(1.5*pin_y_pitch)\n\n    # body\n    body = cq.Workplane(\"XY\").workplane(offset=foot_height).moveTo(x_offset, y_offset)\\\n        .rect(body_length, body_width).extrude(body_height)\\\n        .edges(\"|Z\").fillet(body_fillet_radius).edges(\">Z\").fillet(body_fillet_radius)\n\n    # pin 1 marker\n    body = body.faces(\">Z\").workplane().moveTo(-(body_length/2)+marker_x_inside, (body_width/2)-marker_y_inside)\\\n        .line(-marker_size,-marker_size/2).line(0, marker_size).close().cutBlind(-marker_depth)\n\n    # foot\n    foot = cq.Workplane(\"YZ\").workplane(offset=(body_length/2)-foot_inside_distance)\\\n        .moveTo(y_offset - foot_length/2, 0)\\\n        .line(foot_length*0.2,0)\\\n        .line(0,foot_height/2)\\\n        .line(foot_length*0.6,0)\\\n        .line(0,-foot_height/2)\\\n        .line(foot_length*0.2,0)\\\n        .line(0,foot_height)\\\n        .line(-foot_length,0)\\\n        .close()\\\n        .extrude(-foot_width)\n\n    foot_mirror = foot.mirror(\"YZ\")\n\n    foot = foot.union(foot_mirror).translate((x_offset, 0, 0))\n\n    body = body.union(foot)\n\n    # slot\n    body = body.faces(\">Z\").workplane().rect(slot_length, slot_width).cutBlind(-slot_depth)\n\n    chamfer = cq.Workplane(\"XY\").workplane(offset=foot_height+body_height).moveTo(x_offset, y_offset) \\\n    .rect(slot_length+2*slot_chamfer, slot_width+2*slot_chamfer) \\\n    .workplane(offset=-slot_chamfer).rect(slot_length, slot_width) \\\n    .loft(combine=True)\n\n    body = body.cut(chamfer)\n\n    # contact holes\n    body = body.faces(\">Z\").workplane().center(0, hole_offset)\\\n        .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, hole_length)\\\n        .center(0, -2*hole_offset)\\\n        .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, hole_length)\\\n        .cutBlind(-2)\n\n    # internal void\n    body = body.faces(\">Z\").workplane(offset=-hole_depth)\\\n        .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, top_void_width)\\\n        .cutBlind(-(top_void_depth-hole_depth))\n\n    body = body.faces(\">Z\").workplane(offset=-top_void_depth)\\\n        .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, bottom_void_width)\\\n        .cutBlind(-(body_height-top_void_depth))\n\n    # body end recesses\n    body = body.faces(\">Z\").workplane().center(body_length/2.0-recess_depth/2.0, 0)\\\n        .rect(recess_depth, recess_small_width).cutBlind(-recess_height)\n\n    recess = cq.Workplane(\"XY\").workplane(offset=foot_height+body_height).center(x_offset-body_length/2.0+recess_depth/2.0, y_offset)\\\n        .rect(recess_depth, recess_large_width).extrude(-recess_height).edges(\">X\").edges(\"|Z\").fillet(0.3)\n\n    body = body.cut(recess)\n\n    return body\n\n\ndef generate_part(part_key):\n    params = all_params[part_key]\n    calc_dim = dimensions(params)\n    pins = generate_pins(params)\n    body = generate_body(params, calc_dim)\n    contacts = generate_contacts(params)\n    return (pins, body, contacts)\n\n\n# opened from within freecad\nif \"module\" in __name__:\n    part_to_build = 'ucon_17809_02x10_1.27mm'\n\n    FreeCAD.Console.PrintMessage(\"Started from CadQuery: building \" +\n                                 part_to_build + \"\\n\")\n    (pins, body, contacts) = generate_part(part_to_build)\n\n    show(pins)\n    show(body)\n    show(contacts)\n\n\n",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 0.01585574065368712,
      "p_css": 0.0021888936323081138,
      "p_html": 0.8948580810294471,
      "p_java": 0.0006841803078410181,
      "p_javascript": 5.025033408869947e-07,
      "p_matlab": 6.287689425874603e-08,
      "p_python": 2.692046336941604e-06,
      "p_sql": 6.576596054098804e-07,
      "p_typescript": 0.08640918929053909
    },
    {
      "text": "# Function to check prime or not\ndef isPrime(n): \n    result = True\n  \n    # check if number is divisible from 2 to n-1 or not\n    for i in range(2, n): \n        if n%i == 0: \n            result = False\n            break\n          \n    return result \n  \n# printing prime numbers between 1 to 50\nfor n in range(1, 51):\n    if isPrime(n): \n        print(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.3120393409844674e-05,
      "p_css": 3.908163359304527e-05,
      "p_html": 0.00012310131254185757,
      "p_java": 4.638846364600326e-06,
      "p_javascript": 0.002908839056853321,
      "p_matlab": 0.03198342133864837,
      "p_python": 0.9636503763363006,
      "p_sql": 0.00029863685706737244,
      "p_typescript": 0.0009587842252211371
    },
    {
      "text": "from flask import Flask, request\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Users(Resource):\n    def get(self, userId):\n        # return user object with userId\n        pass\n\n    def post(self):\n        # create new user\n        pass\n\n    def put(self, userId):\n        # update user object with userId\n        pass\n\n    def delete(self, userId):\n        # delete user object with userId\n        pass\n\nclass Courses(Resource):\n    def get(self,courseId):\n        # return course object with courseId\n        pass\n\n    def post(self):\n        # create new course\n        pass\n\n    def put(self,courseId):\n        # update course object with courseId\n        pass\n\n    def delete(self,courseId):\n        # delete course object with courseId\n        pass\n\nclass Grades(Resource):\n    def get(self,courseId):\n        # return grade object with courseId\n        pass\n\n    def post(self):\n        # create new grade\n        pass\n\n    def put(self,courseId):\n        # update grade object with courseId\n        pass\n\n    def delete(self,courseId):\n        # delete grade object with courseId\n        pass\n\napi.add_resource(Users, '/users/<userId>')\napi.add_resource(Courses, '/courses/<courseId>')\napi.add_resource(Grades, '/courses/<courseId>/grades')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
      "y_true": "sql",
      "pred_label": "css",
      "p_bash": 0.00038817566392387995,
      "p_css": 0.45301255317736494,
      "p_html": 0.013197083291775224,
      "p_java": 2.4180146024127725e-05,
      "p_javascript": 0.00018777117910651753,
      "p_matlab": 4.35670074599892e-05,
      "p_python": 0.13213276036510063,
      "p_sql": 0.38906403426116876,
      "p_typescript": 0.011949874908076035
    },
    {
      "text": "import mysql.connector\n\n# establish a database connection\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"user\",\n    password=\"password\",\n    database=\"database\"\n)\n\n# create a cursor object\ncursor = mydb.cursor()\n\n# execute the SQL query\ncursor.execute(\"SELECT * FROM table\")\n\n# fetch the rows from the cursor object\nrows = cursor.fetchall()\n\n# print all the details\nfor row in rows:\n    print(row)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 9.691377156488379e-05,
      "p_css": 0.0007885773988947902,
      "p_html": 7.339022925145097e-05,
      "p_java": 1.4688622879967864e-06,
      "p_javascript": 0.00010232236240477664,
      "p_matlab": 8.720137374854046e-06,
      "p_python": 0.0008042808317861251,
      "p_sql": 0.9938890640505109,
      "p_typescript": 0.00423526235592417
    },
    {
      "text": "class Laptop:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03271206196992043,
      "p_css": 0.006611428998242064,
      "p_html": 0.04046192976928964,
      "p_java": 0.00022259382285893725,
      "p_javascript": 0.0001826046569061294,
      "p_matlab": 8.175683040797807e-05,
      "p_python": 0.9183288185201338,
      "p_sql": 0.0001450432153829347,
      "p_typescript": 0.001253762216858151
    },
    {
      "text": "student_grades = {\n    \"Bob\": \"A\",\n    \"Carol\": \"B\",\n    \"Ted\": \"C\",\n    \"Alice\": \"A\"\n}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.03571322436530443,
      "p_css": 0.20928008360436984,
      "p_html": 0.04922030887118728,
      "p_java": 0.0075149946180420295,
      "p_javascript": 0.01780335427100742,
      "p_matlab": 0.035356876868542504,
      "p_python": 0.5845253146199166,
      "p_sql": 0.007272632074099894,
      "p_typescript": 0.05331321070752995
    },
    {
      "text": "import tweepy\nimport time\n\nconsumer_key = 'your consumer key'\nconsumer_secret = 'your consumer secret'\n\naccess_token = 'your access token'\naccess_token_secret = 'your access token secret'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ninterests = ['computers', 'cricket', 'movies'] # interests of the user\n\nwhile True:\n for interest in interests:\n  search = '#' + interest\n  tweets = api.search(search)\n  for tweet in tweets:\n   api.retweet(tweet.id)\n  time.sleep(30) # sleep for 30 seconds",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0013111656616849269,
      "p_css": 0.3436704037978113,
      "p_html": 0.057458457797288795,
      "p_java": 0.03274303177199142,
      "p_javascript": 0.009994798290594126,
      "p_matlab": 0.02496834276125349,
      "p_python": 0.46451461982530323,
      "p_sql": 0.010019763141979719,
      "p_typescript": 0.05531941695209288
    },
    {
      "text": "def get_values(data):\n    \"\"\"\n    Gets the values from a dictionary.\n    \n    Args:\n        data (dict): The dictionary from which to get the values\n        \n    Returns:\n        values (list): A list of the values from the dictionary\n    \"\"\"\n    values = []\n    for value in data.values():\n        values.append(value)\n    return values\n\nif __name__ == \"__main__\":\n    data = {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    }\n    print(get_values(data))",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0001104064822906359,
      "p_css": 0.926355397192621,
      "p_html": 0.0051144449293443655,
      "p_java": 9.491665841100229e-06,
      "p_javascript": 0.00020171115478624307,
      "p_matlab": 0.00717403908476555,
      "p_python": 5.897744146819752e-05,
      "p_sql": 0.0050101773471768,
      "p_typescript": 0.05596535470170587
    },
    {
      "text": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nnum = int(input(\"Enter an integer: \"))\nprint(\"Factorial of \", num, \"is: \", factorial(num))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.5724508881423496e-05,
      "p_css": 3.909128953197484e-09,
      "p_html": 4.9342398555156444e-05,
      "p_java": 6.606909055204043e-05,
      "p_javascript": 3.637973825734497e-05,
      "p_matlab": 0.8879575065283704,
      "p_python": 0.11183296629585594,
      "p_sql": 1.0627654999374722e-05,
      "p_typescript": 1.137987539928502e-05
    },
    {
      "text": "class Interpreter:\n \n    def __init__(self):\n        self.opeartors = {\n            '+':   self.add,\n            '-':   self.sub,\n            '/':   self.div,\n            '*':   self.mul,\n        }\n \n    def parse(self, text):\n        expressions = text.split(' ')\n        return expressions\n \n    def evaluate(self, expressions):\n        operator = self.opeartors.get(expressions[1])\n        if not operator:\n            raise Exception('Invalid operator')\n        return operator(expressions[0], expressions[2])\n \n    def add(self, a, b):\n        return int(a) + int(b)\n \n    def sub(self, a, b):\n        return int(a) - int(b)\n \n    def div(self, a, b):\n        return int(a) / int(b)\n \n    def mul(self, a, b):\n        return int(a) * int(b)",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 6.964251462650065e-11,
      "p_css": 8.323755934164918e-11,
      "p_html": 9.166922225951977e-08,
      "p_java": 0.9999998405447798,
      "p_javascript": 9.003019374050957e-12,
      "p_matlab": 5.543939083885876e-23,
      "p_python": 6.559976066738955e-08,
      "p_sql": 1.981929316641805e-09,
      "p_typescript": 4.2425027372279066e-11
    },
    {
      "text": "def group_by_department(employees):\n  result = {}\n  for emp in employees:\n    if emp[\"department\"] in result:\n      result[emp[\"department\"]].append(emp)\n    else:\n      result[emp[\"department\"]] = [emp]\n  return result\n\nconst result = group_by_department(employees);\nconsole.log(result);",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 7.685949642545334e-07,
      "p_css": 0.00012989750314979783,
      "p_html": 1.2493123466057154e-05,
      "p_java": 5.239546627801871e-07,
      "p_javascript": 0.9981813699780052,
      "p_matlab": 0.00010962425074565814,
      "p_python": 0.001494198668217774,
      "p_sql": 5.828634554129143e-05,
      "p_typescript": 1.283758124727483e-05
    },
    {
      "text": "strings = ['cat', 'dog', 'apple', 'banana']\n\nstrings.sort()\n\nfor string in strings:\n    print(string)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.7358889813590306e-07,
      "p_css": 0.017151141217173243,
      "p_html": 0.00016834245988564585,
      "p_java": 0.8796156492195287,
      "p_javascript": 1.7096412245633733e-08,
      "p_matlab": 2.7203969641285457e-05,
      "p_python": 0.10040111532600014,
      "p_sql": 0.002540529721515519,
      "p_typescript": 9.582740094516302e-05
    },
    {
      "text": "import requests\n\n# list of cities for which we want the weather forecast\ncities = [\"New York\", \"London\", \"Beijing\", \"Los Angeles\", \"Berlin\", \"Tokyo\", \"Mumbai\", \"Moscow\"]\n\n# api key\napi_key = YOUR_API_KEY\n\n# base url for the weather api\nurl = \"http://api.openweathermap.org/data/2.5/weather?q={}&APPID=\" + api_key\n\n# create an empty list to store weather data\nweather_data = []\n\n# loop through the cities and get the weather data\nfor city in cities:\n\t# make a request to the api\n\tr = requests.get(url.format(city)).json()\n\t# store the weather data in the list\n\tweather_data.append(r)\n\n# print the weather data\nprint(weather_data)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 6.017460027069953e-05,
      "p_css": 0.5493678921729541,
      "p_html": 0.014757714319308255,
      "p_java": 0.00011184418056474172,
      "p_javascript": 0.03025817096064511,
      "p_matlab": 0.001374438692518567,
      "p_python": 0.04223391324572527,
      "p_sql": 0.008341640999878554,
      "p_typescript": 0.35349421082813476
    },
    {
      "text": "import numpy as np\nfrom sklearn.svm import SVC \n\n# Dataset \ntraining_data = [\n {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]\n\n# Feature extraction \nX = []\ny = []\nfor data in training_data:\n X.append(data['features'])\n y.append(data['label'])\n\n# Model \nclf = SVC()\nclf.fit(X, y) \n\n# Prediction \npredict_data = [1, 0, 1]\npredicted_label = clf.predict([predict_data])\n\nprint(predicted_label[0])",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.018983238551086752,
      "p_css": 0.7790409064896082,
      "p_html": 0.042448781368913835,
      "p_java": 0.0001451913247990266,
      "p_javascript": 0.0002840604079454889,
      "p_matlab": 0.008530555819006271,
      "p_python": 0.1284101421365914,
      "p_sql": 4.785538168833684e-05,
      "p_typescript": 0.022109268520360645
    },
    {
      "text": "def is_palindrome(s): \n    # Reverse the string \n    rev = s[::-1] \n  \n    # Check if the string is equal to its reverse \n    if (s == rev): \n        return True\n    return False\n  \n# Driver code \ns = \"aba\"\nans = is_palindrome(s) \n  \nif ans == 1: \n    print(\"Yes\") \nelse: \n    print(\"No\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.4624711211835854e-05,
      "p_css": 0.0038292118959462147,
      "p_html": 0.001861027671753043,
      "p_java": 0.1619435379018494,
      "p_javascript": 9.421304694521504e-06,
      "p_matlab": 4.4825319947608194e-05,
      "p_python": 0.7290565183219623,
      "p_sql": 0.06995561985829152,
      "p_typescript": 0.03327521301434353
    },
    {
      "text": "def has_special_characters(string):\n    import re\n    return bool(re.search('[^a-zA-Z0-9]', string))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.653293801846968e-11,
      "p_css": 1.7853595235243832e-06,
      "p_html": 6.295442755803023e-05,
      "p_java": 0.9993212479715646,
      "p_javascript": 2.2400108443985816e-11,
      "p_matlab": 1.7283887178519445e-08,
      "p_python": 0.0006053449128863825,
      "p_sql": 8.300313229399002e-06,
      "p_typescript": 3.4967241785825085e-07
    },
    {
      "text": "import random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(8))\n print(password)\n\ngenerate_password()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.061687865924525e-12,
      "p_css": 1.5458841635016043e-08,
      "p_html": 2.6872861258841775e-08,
      "p_java": 0.003225320082734761,
      "p_javascript": 9.718303411573037e-15,
      "p_matlab": 2.4461429957415304e-09,
      "p_python": 8.148683784871787e-06,
      "p_sql": 0.9967664845751895,
      "p_typescript": 1.879373464209712e-09
    },
    {
      "text": "def is_prime(list_of_numbers):\n    # Iterate over the list of numbers\n    for num in list_of_numbers:\n        # Check if the number is divisible by any number\n        # other than 1 and the number itself\n        for divisor in range(2, num):\n            if num % divisor == 0:\n                # If there is any divisor, the\n                # number is not a prime number\n                return False\n    # All the numbers in the list are prime numbers\n    return True\n\nlist_of_numbers = [2, 3, 5, 7, 8, 11, 13, 15]\noutcome = is_prime(list_of_numbers)\nprint(outcome)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00015684598007203112,
      "p_css": 8.578178176080772e-06,
      "p_html": 0.0005173148485544134,
      "p_java": 0.0001720688389754278,
      "p_javascript": 0.0636187282337146,
      "p_matlab": 0.6245840060824133,
      "p_python": 0.2877804875290476,
      "p_sql": 0.0034335281389892016,
      "p_typescript": 0.019728442170057228
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# URL of the S&P 500 Website\nurl = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'\n\n# Send GET request \nresp = requests.get(url)\n\n# Parse response as HTML\nsoup = BeautifulSoup(resp.text, 'html.parser')\n\n# Find the table containing data\ntable = soup.find('table', {'class': 'wikitable sortable'})\n\n# Extract the companies from the table\ncompanies = []\nfor row in table.findAll(\"tr\"):\n    # Skip the headers\n    if not row.findAll(\"th\"): \n        tds = row.findAll(\"td\")\n        companies.append([td.text.strip() for td in tds[1:2]])\n\nprint(\"List of S&P 500 Companies:\")\nfor company in companies:\n    print(company[0])",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 7.396932026463211e-07,
      "p_css": 0.03467831667953123,
      "p_html": 0.9620704184329915,
      "p_java": 8.683766153723929e-05,
      "p_javascript": 0.0008792312342454761,
      "p_matlab": 7.721722285361814e-05,
      "p_python": 0.0015992952776703868,
      "p_sql": 0.0004065887875416749,
      "p_typescript": 0.00020135501042639676
    },
    {
      "text": "def generate_numbers():\n    numbers = []\n    for i in range(10):\n        numbers.append(random.randint(0,10))\n    return numbers",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.746678752023468e-06,
      "p_css": 1.2819804976750312e-05,
      "p_html": 0.0001311697165177352,
      "p_java": 0.004587410311165976,
      "p_javascript": 3.840988146020566e-05,
      "p_matlab": 6.716336198127843e-05,
      "p_python": 0.99514110764493,
      "p_sql": 3.853592871248135e-06,
      "p_typescript": 1.1319007344543974e-05
    },
    {
      "text": "class Vector:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def magnitude(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5\n    \n    def dot_product(self, other):\n        return self.x*other.x + self.y*other.y + self.z*other.z",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.488861832177447e-05,
      "p_css": 0.007196158047655206,
      "p_html": 0.06276461162313601,
      "p_java": 2.7046373334479882e-06,
      "p_javascript": 0.00014816935016387386,
      "p_matlab": 1.3733283909850596e-06,
      "p_python": 0.7395945989162601,
      "p_sql": 0.1901505865023607,
      "p_typescript": 6.690897637778355e-05
    },
    {
      "text": "# anagram checker\n\ndef check_anagrams(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True \n    else: \n        return False \n  \n# Driver code \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif(check_anagrams(str1, str2)): \n    print(\"The strings are anagrams.\")  \nelse: \n    print(\"The strings aren't anagrams.\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0019766793270644145,
      "p_css": 0.002923879935163797,
      "p_html": 1.6663102004323946e-05,
      "p_java": 0.00014993208292638665,
      "p_javascript": 0.28378614673908314,
      "p_matlab": 0.0004619206149520195,
      "p_python": 0.6735762434572983,
      "p_sql": 0.020972883970357025,
      "p_typescript": 0.01613565077115066
    },
    {
      "text": "import random\nimport string\n\ndef generate_password():\n password_length = 8\n chars = string.ascii_letters + string.digits \n return ''.join(random.choice(chars) for i in range(password_length))\n\nprint(generate_password())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 3.398176490367889e-11,
      "p_css": 3.626573050096055e-08,
      "p_html": 6.685569372318852e-08,
      "p_java": 0.00011388151633243067,
      "p_javascript": 6.04227635873466e-13,
      "p_matlab": 1.124182503041348e-08,
      "p_python": 1.2794834557152297e-05,
      "p_sql": 0.999873203991229,
      "p_typescript": 5.260046101114047e-09
    },
    {
      "text": "class FlightSchedule:\n    def __init__(self):\n    self.airport_info ={}\n    \n    def add_flight(self,flight_name,source,destination,departure_time,arrival_time):\n    self.airport_info[flight_name] = {\n        'source': source,\n        'destination': destination,\n        'departure_time': departure_time,\n        'arrival_time': arrival_time\n    }\n    \n    def get_flight_info(self,flight_name):\n    if flight_name in self.airport_info:\n        return self.airport_info[flight_name]\n    else:\n        return 'Flight does not exist.'",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.000627655112372329,
      "p_css": 0.02301760906156705,
      "p_html": 0.08675607801883864,
      "p_java": 4.1110966251772345e-05,
      "p_javascript": 0.00010203196354780239,
      "p_matlab": 0.0001457626047229246,
      "p_python": 0.751357648913871,
      "p_sql": 0.1345955900480273,
      "p_typescript": 0.0033565133108011554
    },
    {
      "text": "import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008174191830767773,
      "p_css": 0.033748259802423956,
      "p_html": 0.05709274399707153,
      "p_java": 0.0002048731676210519,
      "p_javascript": 0.00015268922393394548,
      "p_matlab": 0.008173740259156528,
      "p_python": 0.8600177665763012,
      "p_sql": 0.00022743926900643235,
      "p_typescript": 0.03220829587371751
    },
    {
      "text": "def count_7(nums):\n  count = 0\n  for num in nums:\n    if num == 7:\n      count += 1\n  return count",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.06814338954342e-08,
      "p_css": 1.0330995618196441e-10,
      "p_html": 8.294953773096557e-08,
      "p_java": 3.2961585322497474e-09,
      "p_javascript": 1.9483182045071386e-08,
      "p_matlab": 0.9997150845842926,
      "p_python": 0.0002846500171810897,
      "p_sql": 6.839510443662373e-08,
      "p_typescript": 5.048979965131705e-08
    },
    {
      "text": "import datetime\n\n# Function to convert the timestamp \ndef getDateTime(timestamp):\n return datetime.datetime.fromtimestamp(timestamp).strftime(\"%d-%m-%Y\")\n\n# Driver program\ntimestamp = 1591123259\nprint(getDateTime(timestamp))\n# Output: 17-06-2020",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1713183621800795,
      "p_css": 0.04124035812216079,
      "p_html": 0.011967910683820204,
      "p_java": 0.000415551708239808,
      "p_javascript": 0.16578581235234988,
      "p_matlab": 0.00022113973483470326,
      "p_python": 0.6018430816327807,
      "p_sql": 0.005511520455524889,
      "p_typescript": 0.0016962631302094812
    },
    {
      "text": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndataset = pd.read_csv('dataset.csv')\n\n# Define features and labels\nX = dataset.iloc[:, :4]\ny = dataset.iloc[:, -1]\n\n# Split the dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Normalize the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy: ', accuracy)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.4332260362261572,
      "p_css": 0.13802371407212166,
      "p_html": 0.006021188739421334,
      "p_java": 9.662063918486125e-06,
      "p_javascript": 0.00017517889846664422,
      "p_matlab": 2.177692223636959e-05,
      "p_python": 0.3690838226991963,
      "p_sql": 4.69696144799379e-06,
      "p_typescript": 0.05343392341703388
    },
    {
      "text": "def average(arr):\n    return sum(arr) / len(arr)\n\nmylist = [3, 5, 7, 9, 12]\n\nprint(\"Average of mylist is:\", average(mylist))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.369761397972966e-09,
      "p_css": 1.3614075832553448e-08,
      "p_html": 1.6575297042095226e-09,
      "p_java": 1.2673071497021432e-08,
      "p_javascript": 1.9855756033373413e-08,
      "p_matlab": 0.9999998709759634,
      "p_python": 5.465879968285103e-08,
      "p_sql": 7.345821484875616e-11,
      "p_typescript": 1.9121584369687223e-08
    },
    {
      "text": "class PuzzleState:\n    \n    def __init__(self, puzz): \n        self.puzz = puzz\n    \n    \n    def get_neighbors(self): \n        indices = [[i, j] for i in range(3) for j in range(3)] \n        neighbors = [] \n        for i, j in indices:\n            if self.puzz[i][j] == 0:\n                zero_list = [[i-1, j], [i+1, j], [i, j-1], [i, j+1]]\n                for row, col in zero_list:\n                    if 0<=row<3 and 0<=col<3:\n                        neighbor = [list(x) for x in self.puzz] \n                        neighbor[i][j], neighbor[row][col] = neighbor[row][col], neighbor[i][j] \n                        neighbors.append(PuzzleState(neighbor))  \n        return neighbors\n    \n\ndef bfs(start_state): \n    visited = set()  # stores previously visited states \n    frontier = [start_state] \n\n    while frontier: \n        current = frontier.pop(0) \n        if current.puzz == [[1,2,3],[4,5,6],[7,8,0]]:\n            return current\n        visited.add(str(current.puzz)) \n        for nbr in current.get_neighbors():\n            if str(nbr.puzz) not in visited: \n                frontier.append(nbr)\n\nstart_state = PuzzleState([[4,2,3],[1,0,5],[7,8,6]]) \nbfs(start_state)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00014626982107748322,
      "p_css": 0.0012493462888456906,
      "p_html": 0.00321591039825242,
      "p_java": 3.126493274620348e-05,
      "p_javascript": 5.0026394616104494e-05,
      "p_matlab": 0.7742264613923487,
      "p_python": 0.20065924483646388,
      "p_sql": 0.020157614656286765,
      "p_typescript": 0.00026386127936283446
    },
    {
      "text": "#importing necessary libraries\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.metrics.pairwise import cosine_similarity\n\n#Defining a function to calculate cosine similarity\ndef cosine_similarity(text):\n   vectors = [t for t in text]\n   cv = CountVectorizer()\n   counts = cv.fit_transform(vectors)\n   return cosine_similarity(counts)\n   \n#Declaring the corpus of documents\ncorpus = ['the goal of this search engine is to find documents similar to a query', \n          'the algorithm begins by vectorizing the query and the documents',\n          'the query and documents are then compared using cosine similarity']\n          \n#Calculating similarity\nsimilarity_matrix = cosine_similarity(corpus)\n\n#Printing the cosine similarity matrix\nprint(similarity_matrix)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00040342059004375125,
      "p_css": 0.006082086307485746,
      "p_html": 0.00013285214551790568,
      "p_java": 1.0044493329443611e-05,
      "p_javascript": 0.009755412994709495,
      "p_matlab": 1.4772899796509276e-05,
      "p_python": 0.004432256534798203,
      "p_sql": 5.479441734220059e-05,
      "p_typescript": 0.9791143596169768
    },
    {
      "text": "d = {} \n  \n# Let us add 10 key-value pairs to dictionary \nfor i in range(1,11): \n    d[i] = i ** 2 \n  \n# Print the dictionary items \nprint(d.items())",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 3.662750146203484e-10,
      "p_css": 4.6913795200715993e-07,
      "p_html": 1.9211306084586748e-07,
      "p_java": 1.575399690503897e-08,
      "p_javascript": 0.9999670828087094,
      "p_matlab": 2.7172840492939983e-05,
      "p_python": 5.040268252179986e-06,
      "p_sql": 2.2055009536362078e-10,
      "p_typescript": 2.649071068321024e-08
    },
    {
      "text": "from collections import Counter \n\ndef most_common (collection): \n\tdata = Counter(collection) \n\treturn data.most_common(1)[0] \n\ncollection = [1, 4, 5, 3, 4, 6, 5, 3, 4]\nassert most_common(collection) == (4, 3) \nprint (\"Most Common element is: \",most_common(collection))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016660420730729576,
      "p_css": 0.1065591699535782,
      "p_html": 0.007212665103930828,
      "p_java": 0.00035171822248675937,
      "p_javascript": 0.0047712692228089595,
      "p_matlab": 0.002201424198535191,
      "p_python": 0.8746655643836944,
      "p_sql": 0.0008860179892016953,
      "p_typescript": 0.0016861288526911064
    },
    {
      "text": "import requests\nimport re\n\ndef scrape_phone_numbers(urls):\n    phone_numbers = []\n    for url in urls:\n        response = requests.get(url)\n        numbers = re.findall(\"([+]\\d{2}\\s?0?\\d{10})\", response.text)\n        phone_numbers.extend(numbers)\n    return phone_numbers",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.696463809342988e-06,
      "p_css": 0.03752988192884038,
      "p_html": 0.011895794193917238,
      "p_java": 0.011284569247839193,
      "p_javascript": 0.00026958965551746164,
      "p_matlab": 6.634652602442009e-06,
      "p_python": 0.9381372662136934,
      "p_sql": 0.0007909229628426517,
      "p_typescript": 7.964468093772939e-05
    },
    {
      "text": "s = 'Google'\n# improved code\n# use of built-in functions to count the number of occurrences of 'o' in a string\ncount = s.count('o')\n\nprint('Number of occurrences of \"o\": {}'.format(count))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 7.52398230585022e-06,
      "p_css": 0.001496707691027096,
      "p_html": 0.00013890367863537355,
      "p_java": 0.0010745144264221003,
      "p_javascript": 0.0005416107471381411,
      "p_matlab": 2.0215137065190356e-05,
      "p_python": 0.2908315364053167,
      "p_sql": 0.002215502848163136,
      "p_typescript": 0.7036734850839264
    },
    {
      "text": "class TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 1.7163067505885208e-05,
      "p_css": 0.015720589318809267,
      "p_html": 0.04071353334946222,
      "p_java": 5.470541704407709e-06,
      "p_javascript": 7.690643459085254e-06,
      "p_matlab": 1.025843019079505e-06,
      "p_python": 0.2194541503450088,
      "p_sql": 0.7235332913888833,
      "p_typescript": 0.0005470855021478712
    },
    {
      "text": "def sort_string(string):\n    # convert string to list\n    chars = list(string)\n    # sort the list \n    chars.sort()\n    # return the sorted string\n    return ''.join(chars)\n\nsorted_string = sort_string('abzcdr')\nprint(sorted_string)",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 4.61129948194798e-09,
      "p_css": 0.00010234914276384613,
      "p_html": 2.035514527403945e-05,
      "p_java": 0.5975773970653864,
      "p_javascript": 1.1159515134100287e-08,
      "p_matlab": 2.1371770730425599e-07,
      "p_python": 0.0030700451091786336,
      "p_sql": 0.39921581293525243,
      "p_typescript": 1.3811113622587215e-05
    },
    {
      "text": "\n# coding: utf-8\n\n# In[1]:\n\nimport pandas as pd\nimport time\nfrom sys import argv\n\nlogfile = argv[1]\nfilesize = argv[2]\n\n\n# # Python Pandas Benchmark\n\n# In[3]:\n\n\nprefix = \"file:////Users/tony/Dropbox/Projects/UW/cse599c-17sp-projects/spark-advantage/data/\"\n\nif(filesize == 'original'):\n    tairfname     = \"Tair_WA_nohead.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.csv\"\nelif (filesize == 'medium'):\n    tairfname     = \"Tair_WA_nohead.MEDIUM.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.MEDIUM.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.MEDIUM.csv\"\nelif (filesize == \"small\"):\n    tairfname     = \"Tair_WA_nohead.SMALL.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.SMALL.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.SMALL.csv\"\n\n\n\nstartTime = time.time()\n\n\n\ntair = pd.read_csv(prefix+tairfname)\ntsoil = pd.read_csv(prefix+tsoilfname)\ntsurface = pd.read_csv(prefix+tsurfacefname)\n\njoined = tair.merge(tsoil, on=[\"datetime\", \" lat\", \" lon\"]).merge(tsurface, on=[\"datetime\", \" lat\", \" lon\"])\n\njoined.columns = [name.strip() for name in joined.columns]\njoined[['lat', 'lon']] = joined[['lat', 'lon']].apply(pd.to_numeric)\n\nseattle = joined[(joined['lon'] > -125.52) & \\\n                 (joined['lon'] < -120.2)  & \\\n                 (joined['lat'] > 49.0)    & \\\n                 (joined['lat'] < 51.0)]\n\nseattle.groupby(by=['lat', 'lon'])['Tair'].mean()\n\nexptime = time.time() - startTime\nwith open(logfile, 'a') as log:\n    log.write(str(exptime)+'\\n')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0038713721414639335,
      "p_css": 0.14022257696164428,
      "p_html": 0.028766639944818134,
      "p_java": 0.004225106218576424,
      "p_javascript": 0.017901535706494366,
      "p_matlab": 0.015596125583061896,
      "p_python": 0.7146436252894951,
      "p_sql": 0.04559280269483027,
      "p_typescript": 0.029180215459615688
    },
    {
      "text": "def expression_evaluator(expr):\n    expr_list = expr.split()\n    stack = []\n\n    for items in expr_list: \n        if items == '*':\n            stack.append(int(stack.pop()) * int(stack.pop())) \n        elif items == '/':\n            divider = int(stack.pop())\n            stack.append(int(stack.pop()) / divider) \n        elif items == '+':\n            stack.append(int(stack.pop()) + int(stack.pop())) \n        elif items == '-':\n            substractor = int(stack.pop())\n            stack.append(int(stack.pop()) - substractor) \n        else:\n            stack.append(items)\n           \n    assert len(stack) == 1, 'Expression should contain a valid operator.'\n    return stack[0]\n    \nexpr = \"7 * 4 + 2 - 1\"\nresult = expression_evaluator(expr)\nprint(result)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00037909831217492943,
      "p_css": 0.004546058382611047,
      "p_html": 0.00026254875937604857,
      "p_java": 0.9864000734260768,
      "p_javascript": 0.00020799534894294945,
      "p_matlab": 2.883762661951615e-07,
      "p_python": 0.008066629804319487,
      "p_sql": 4.78636395303918e-05,
      "p_typescript": 8.944395070244715e-05
    },
    {
      "text": "from collections import defaultdict\n\nstrings = [\"Apple\", \"Orange\", \"Banana\", \"Pineapple\"]\n\ndictionary = defaultdict(list)\nfor string in strings:\n    char_count = len(string)\n    dictionary[char_count].append(string)\n\nprint(dictionary)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.2796600641237867e-07,
      "p_css": 0.24048990888408267,
      "p_html": 0.00013795265891892143,
      "p_java": 0.7309819796836582,
      "p_javascript": 2.5208367723293663e-09,
      "p_matlab": 3.0879150941044596e-05,
      "p_python": 0.02562390316980443,
      "p_sql": 0.002679190781023004,
      "p_typescript": 5.6055184728417856e-05
    },
    {
      "text": "def concat_strings(a, b):\n    return a + b\n\nresult = concat_strings(\"Hello \", \"world!\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1360695695757054,
      "p_css": 0.001764485211721427,
      "p_html": 0.00036180710525754754,
      "p_java": 8.428125492042755e-13,
      "p_javascript": 0.004204779635711479,
      "p_matlab": 1.435985107637384e-06,
      "p_python": 0.857439949027018,
      "p_sql": 0.00010731908420863814,
      "p_typescript": 5.0654374426988885e-05
    },
    {
      "text": "def is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 8.86899116190237e-06,
      "p_css": 0.00021554516045965003,
      "p_html": 0.00037252458935636666,
      "p_java": 0.006989599924132526,
      "p_javascript": 0.00041539390846674515,
      "p_matlab": 0.0002923019213515898,
      "p_python": 0.014299341007128392,
      "p_sql": 0.00035946997954325116,
      "p_typescript": 0.9770469545183995
    },
    {
      "text": "def gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    return gcd(num2, num1 % num2)\n\nprint(gcd(num1, num2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006966252428471412,
      "p_css": 0.005074666225539531,
      "p_html": 0.0020211001257429205,
      "p_java": 5.484835096183823e-05,
      "p_javascript": 0.0006832894519261115,
      "p_matlab": 0.04572323351522038,
      "p_python": 0.9437672759660197,
      "p_sql": 0.0010841066440723472,
      "p_typescript": 0.0008948544776698239
    },
    {
      "text": "config = {\n 'templates': {\n 'index': 'templates/index.html',\n 'about': 'templates/about.html',\n 'contact': 'templates/contact.html'\n },\n 'static': {\n 'css': 'static/css/main.css',\n 'js': 'static/js/main.js'\n },\n 'credentials': {\n 'db_host': 'localhost',\n 'db_port': 3306,\n 'db_user': 'root',\n 'db_pass': '123456'\n }\n}",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 1.4633307626313986e-05,
      "p_css": 9.666127253189347e-09,
      "p_html": 0.9990738903393774,
      "p_java": 0.0009015084830659107,
      "p_javascript": 2.736386101644856e-07,
      "p_matlab": 1.139134305855206e-13,
      "p_python": 7.326043838069681e-08,
      "p_sql": 4.805666265004391e-10,
      "p_typescript": 9.610824074140084e-06
    },
    {
      "text": "import itertools\n\nwords = [\"cat\", \"dog\", \"pizza\", \"coffee\"]\ncombinations = list(itertools.combinations(words, 2))\n\nfor i in range(len(combinations)):\n    print(combinations[i])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00034416612503780403,
      "p_css": 0.0008204100714904283,
      "p_html": 0.002568771206015954,
      "p_java": 4.144842099089348e-05,
      "p_javascript": 9.642464726745404e-05,
      "p_matlab": 0.009344616308924048,
      "p_python": 0.9764023467953895,
      "p_sql": 0.010187667499483046,
      "p_typescript": 0.0001941489254010625
    },
    {
      "text": "# Importing necessary libraries\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Create a dataframe\ndf = pd.DataFrame({'Email':not_spam_emails + spam_emails, \n                      'label':['not_spam', 'not_spam', 'not_spam',\n                               'spam', 'spam', 'spam']})\n\n# Feature extraction\ncv = CountVectorizer()\nX = cv.fit_transform(df['Email'])\n\n# Split the data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, df['label'], \n                                            test_size=0.33, random_state=42)\n\n# Create model\nfrom sklearn.naive_bayes import MultinomialNB\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\n\n# Predict the results\ny_pred = clf.predict(X_test)\n\n# Calculate accuracy\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.015834305469080746,
      "p_css": 0.42667488628209177,
      "p_html": 0.006582900005698496,
      "p_java": 2.0779780241170937e-05,
      "p_javascript": 0.00023848652427443516,
      "p_matlab": 7.643854295991747e-05,
      "p_python": 0.5471117634427782,
      "p_sql": 0.0005212533305258114,
      "p_typescript": 0.002939186622349409
    },
    {
      "text": "import matplotlib.pyplot as plt \n  \n# Data to plot \nlabels = 'My', 'name', 'is', 'John'\nsizes = [1, 1, 1, 1]\n\n# Plot\nplt.pie(sizes, labels=labels, \n        autopct='%1.1f%%', shadow=True, startangle=90) \n\nplt.axis('equal') \n\nplt.show()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.012376930598813257,
      "p_css": 0.018009250951420877,
      "p_html": 0.3571284687647012,
      "p_java": 0.024553895602260324,
      "p_javascript": 0.03440586503479734,
      "p_matlab": 0.011877969485572626,
      "p_python": 0.24761544687819215,
      "p_sql": 0.031335276020596395,
      "p_typescript": 0.2626968966636459
    },
    {
      "text": "import random\nimport string\n\ndef random_string():\n    chars = string.ascii_lowercase\n    size = 16\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(random_string())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.0346811398513165e-09,
      "p_css": 1.5859009990408216e-07,
      "p_html": 6.509088651510074e-07,
      "p_java": 2.0116046809742784e-05,
      "p_javascript": 2.6031689773331082e-11,
      "p_matlab": 7.229986397830837e-08,
      "p_python": 8.713545192081935e-05,
      "p_sql": 0.9998918399127115,
      "p_typescript": 2.5729016293165713e-08
    },
    {
      "text": "def double(number):\n    return number * 2\n\n# Output \n6",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00040625839527757976,
      "p_css": 0.001122913427857664,
      "p_html": 0.0003009484521517194,
      "p_java": 7.518332932001884e-06,
      "p_javascript": 2.832360191331179e-05,
      "p_matlab": 5.090111187975776e-06,
      "p_python": 0.9980887436027631,
      "p_sql": 3.4997625669368444e-05,
      "p_typescript": 5.206450247221794e-06
    },
    {
      "text": "import tkinter as tk\nfrom time import strftime\n\n# Create the main root window\nroot = tk.Tk()\n\n# Create the time label and add it to the root window\ntime_label = tk.Label(root, font=(\"times\", 20, \"bold\"), bg=\"white\")\ntime_label.pack(side=\"top\", fill=\"both\", expand=True)\n\n# Create a function to update the label with the current time\ndef update_label():\n    time_string = strftime(\"%H:%M:%S\")\n    time_label.configure(text=time_string)\n    time_label.after(1000, update_label)\n\n# Update the root window every 1000 milliseconds (1 second)\nupdate_label()\n\n# Start the root window event loop\nroot.mainloop()",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.0019743377716903683,
      "p_css": 0.0027416481530976866,
      "p_html": 0.002914317365565621,
      "p_java": 9.564799088017932e-06,
      "p_javascript": 0.005375361636132068,
      "p_matlab": 5.4500700613023385e-06,
      "p_python": 0.0028892120868768112,
      "p_sql": 0.02616273381985703,
      "p_typescript": 0.9579273742976312
    },
    {
      "text": "\"\"\"\nПрограмма ищет оптимальное решение для задачи про два кувшина\nДля работы требуется Python 3\n\"\"\"\nfrom enum import Enum\n\n\nclass Action(Enum):\n    \"\"\"\n    Действия с кувшинами\n    \"\"\"\n    empty = 0\n    fill = 1\n    transfer = 2\n    start = 3\n\n\ndef get_pitchers_volume():\n    \"\"\"\n    Возвращает список из целочисленных значений объёмов кувшинов\n    \"\"\"\n    while True:  # pitchers_volume это list из целых чисел, полученных разбиением вводимой строки\n        pitchers_volume = list(int(pitcher) for pitcher in input(\"Введите через пробел объёмы двух кувшинов: \").split())\n\n        if len(pitchers_volume) != 2:  # Мы рассматриваем только случаи с двумя кувшинами\n            print('Айайай! Попробуйте заново.')\n        else:\n            return pitchers_volume\n\n\ndef get_target():\n    \"\"\"\n    Возвращает целочисленный желаемый объём\n    \"\"\"\n    return int(input(\"Введите желаемый объём: \"))\n\n\ndef greatest_common_divisor(a, b):\n    \"\"\"\n    Считает наибольший общий делитель.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef make_edges(i, j, i_max, j_max):\n    \"\"\"\n    Создаёт список из всех исходящих ветвей графа в точке (i, j)\n    Где i и j — наполненность первого и второго кувшинов\n    \"\"\"\n    edges = dict()\n\n    # Если кувшины не пусты, их можно опустошить\n    if i != 0:\n        edges[(0, j)] = Action.empty\n    if j != 0:\n        edges[(i, 0)] = Action.empty\n\n    # Если кувшины не полные, их можно наполнить\n    if i != i_max:\n        edges[(i_max, j)] = Action.fill\n    if j != j_max:\n        edges[(i, j_max)] = Action.fill\n\n    # Из непустого кувшина можно перелить в неполный\n    if i != 0 and j_max-j >= i:\n        edges[(0, j+i)] = Action.transfer\n    if j != 0 and i_max-i >= j:\n        edges[(i+j, 0)] = Action.transfer\n\n    # Причем, если в неполном не хватит места,\n    # то оба кувшина останутся непустыми\n    if j != 0 and 0 < i_max-i < j:\n        edges[(i_max, j - (i_max-i))] = Action.transfer\n    if i != 0 and 0 < j_max-j < i:\n        edges[(i - (j_max-j), j_max)] = Action.transfer\n    return edges\n\n\ndef make_pitchers_graph(pitchers_volume):\n    \"\"\"\n    Создаёт словарь, в котором ключи — все комбинации наполненности кувшинов,\n    а значения — возможные переходы из каждой комбинации\n    \"\"\"\n    pitchers_graph = dict()\n    gcd = greatest_common_divisor(pitchers_volume[0], pitchers_volume[1])\n    for i in range(0, int(pitchers_volume[0]/gcd)+1):      # Найдём наименьшее общее кратное у объёмов кувшинов\n        for j in range(0, int(pitchers_volume[1]/gcd)+1):  # И поделим каждый из объёмов на него, для оптимизации\n            pitchers_graph[(i*gcd, j*gcd)] = make_edges(i*gcd, j*gcd, pitchers_volume[0], pitchers_volume[1])\n    return pitchers_graph\n\n\ndef dijkstra(graph, start_node, target):\n    \"\"\"\n    Находит кратчайший путь в графе\n    \"\"\"\n    distance = dict.fromkeys(graph, float('inf'))\n    path = dict()\n    path[start_node] = [[[start_node], [Action.start]]]  # Путь записывается в виде словаря, в котором к каждому из\n    distance[start_node] = 0                           # имён узлов сосоставляется list из предыдущих узлов\n    node_set = set(graph)                              # с добавлением типа действия с кувшинами\n    targets_list = [node for node in node_set                   # Цели хранятся как list из всех узлов, которые\n                    if node[0] == target or node[1] == target]  # подходят в качестве финиша\n\n    while node_set:\n        node = min(node_set, key=distance.get)\n        if node in targets_list and node in path:  # Как только нашли подходящий узел — выходим. Поскольку мы ищем\n            return path[node]                      # от точки (0, 0), а вес каждого ребра считаем одинаковым,\n        node_set.remove(node)                      # то первый найденный узел и будет оптимальным\n        for child_node in graph[node].keys():\n            if distance[child_node] >= distance[node] + 1:  # Вес каждого ребра считаем за единицу\n                distance[child_node] = distance[node] + 1\n                path[child_node] = list()\n                path[child_node].extend(path[node])     # Путь до нового узла состоит из пути до его родителя\n                path[child_node].append([[child_node],  # плюс сам переход\n                                         [graph[node].get(child_node)]])  # с добавлением типа действия\n\n\ndef show_answer(path, target):\n    \"\"\"\n    Выводит ответ в человекочитаемом виде\n    \"\"\"\n    if path is not None:\n        print('Требуется шагов: {}'.format(len(path)-1))\n        for node in path:\n            print(node[0][0], end=' ')  # Состояние кувшинов\n            print(node[1][0].name)      # Тип действия\n    else:\n        print('Нельзя получить {}л., имея только данные кувшины.'.format(target))\n\n\npitchers_volume = get_pitchers_volume()  # Получаем с клавиатуры объёмы кувшинов\ntarget_node = get_target()               # И желаемый объём\nstart_node = (0, 0)  # Начинаем с пустых кувшинов\npitchers_graph = make_pitchers_graph(pitchers_volume)  # Создаём граф из всех состояний кувшинов\npath = dijkstra(pitchers_graph, start_node, target_node)  # Находим кратчайший путь\nshow_answer(path, target_node)  # Выводим результат",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.08858732125265112,
      "p_css": 0.10845405356268105,
      "p_html": 0.004693589421294843,
      "p_java": 0.007992744529223836,
      "p_javascript": 0.000275395736343941,
      "p_matlab": 0.2737733843194782,
      "p_python": 0.4855766776820289,
      "p_sql": 0.006775184906320594,
      "p_typescript": 0.023871648589977437
    },
    {
      "text": "import http.server\n\n# Create the server object and set the port\nserver = http.server.HTTPServer(('localhost', 8080), http.server.BaseHTTPRequestHandler)\n\n# Start listening for requests\nserver.serve_forever()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00028876960415019116,
      "p_css": 0.0005085598311867113,
      "p_html": 0.9103664747670261,
      "p_java": 8.97262740117466e-06,
      "p_javascript": 0.00027365672440865854,
      "p_matlab": 3.7303191758162725e-08,
      "p_python": 0.01105690816376896,
      "p_sql": 2.117926884526331e-05,
      "p_typescript": 0.07747544171002123
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nlinks = [link.get('href') for link in soup.find_all('a')]\nprint(links)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 5.879191001250747e-10,
      "p_css": 0.012570639130886093,
      "p_html": 0.8338090986248352,
      "p_java": 0.11730707989093768,
      "p_javascript": 6.055242933035681e-05,
      "p_matlab": 0.0011263996949602351,
      "p_python": 0.033825506327676585,
      "p_sql": 0.0012915294057344782,
      "p_typescript": 9.193907720167169e-06
    },
    {
      "text": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n        \nclass Products:\n    def __init__(self):\n        self.products = []\n \n    def add_product(self, product):\n        self.products.append(product)\n \n    def get_product(self, name):\n        for product in self.products:\n            if product.name == name:\n                return product\n        return None",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010803964765233895,
      "p_css": 0.1375488919289243,
      "p_html": 0.01590595650659385,
      "p_java": 0.17084387790518019,
      "p_javascript": 1.544480390651308e-07,
      "p_matlab": 3.382903910485183e-05,
      "p_python": 0.6619640004369548,
      "p_sql": 0.012359595654729485,
      "p_typescript": 0.00026329760395008586
    },
    {
      "text": "def fill_missing_values(data):\n    for column in data.columns:\n        if data[column].isnull().any():\n            mean = data[column].mean()\n            data[column] = data[column].fillna(mean)\n    return data",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000918052880809145,
      "p_css": 0.10179441013506106,
      "p_html": 0.1758070896521921,
      "p_java": 0.0003848049717141806,
      "p_javascript": 0.0013371052277638402,
      "p_matlab": 0.0073818413073160095,
      "p_python": 0.6286571450016453,
      "p_sql": 0.027127125867638813,
      "p_typescript": 0.056592424955859595
    },
    {
      "text": "nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00020113388483127348,
      "p_css": 0.0005605634950768455,
      "p_html": 0.00023488183877248071,
      "p_java": 0.0006544922624576518,
      "p_javascript": 5.5406463428724524e-05,
      "p_matlab": 5.685448514113738e-05,
      "p_python": 0.9980146242412303,
      "p_sql": 0.0001213572127912515,
      "p_typescript": 0.00010068611627032498
    },
    {
      "text": "def start_vowel(input_string):\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\"] \n    if input_string[0] in vowel_list: \n      print(\"String starts with a vowel\") \n    else:\n      print(\"String does not start with a vowel\")\n\nstart_vowel(\"abc\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.407677318151251e-06,
      "p_css": 0.00725538587962254,
      "p_html": 0.0015326759121053986,
      "p_java": 0.6682537650965925,
      "p_javascript": 4.59869391143939e-07,
      "p_matlab": 0.0008575344212232957,
      "p_python": 0.28756102510279097,
      "p_sql": 0.024328510223521824,
      "p_typescript": 0.010205235817434223
    },
    {
      "text": "import time\nimport threading\n \n \ndef do_something(seconds):\n    print(\"Sleeping for {} seconds\".format(seconds))\n    time.sleep(seconds)\n \n \nstart = time.perf_counter()\n \nt1 = threading.Thread(target=do_something, args=[1])\nt2 = threading.Thread(target=do_something, args=[1])\nt3 = threading.Thread(target=do_something, args=[1])\nt4 = threading.Thread(target=do_something, args=[1])\n \nt1.start()\nt2.start()\nt3.start()\nt4.start()\n\nt1.join()\nt2.join()\nt3.join()\nt4.join()\n \nfinish = time.perf_counter()\n \nprint(f'Finished in {round(finish-start, 2)} second(s)')",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0019675740876757934,
      "p_css": 0.005830607250802798,
      "p_html": 0.0108722032830448,
      "p_java": 0.0011773990786110092,
      "p_javascript": 0.0007612135236285189,
      "p_matlab": 0.00015512346438607466,
      "p_python": 0.09012423875491138,
      "p_sql": 0.8883219935665385,
      "p_typescript": 0.0007896469904008794
    },
    {
      "text": "def search_substring(string, substring):\n  if substring in string:\n    return \"Substring found!\"\n  else:\n    return \"Substring not found.\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.826291850127467e-06,
      "p_css": 0.0038407413369546547,
      "p_html": 0.0011396735774682498,
      "p_java": 0.24742487969692467,
      "p_javascript": 8.030694652978102e-07,
      "p_matlab": 0.0002797458948174122,
      "p_python": 0.7429499238247089,
      "p_sql": 0.003871932886149367,
      "p_typescript": 0.0004844734216613424
    },
    {
      "text": "class MyClass:\n    def __init__(self):\n        pass\n\n    def method1(self):\n        pass\n\n    def method2(self):\n        pass\n\n    def method3(self):\n        pass\n\n    def method4(self):\n        pass\n\n    def method5(self):\n        pass",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002423496981223658,
      "p_css": 0.018540961645467372,
      "p_html": 0.03617350846848008,
      "p_java": 8.476699158178712e-05,
      "p_javascript": 0.00028807723505683297,
      "p_matlab": 8.206365618565287e-05,
      "p_python": 0.8991171464216227,
      "p_sql": 0.038701177315742456,
      "p_typescript": 0.006769948567740716
    },
    {
      "text": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList:  \n    def __init__(self):\n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head\n        self.head = new_node\n  \n    def print_list(self): \n        temp = self.head \n        while (temp): \n            print(temp.data) \n            temp = temp.next\n  \nlist = LinkedList() \nlist.push(1) \nlist.push(2) \nlist.push(3) \nlist.push(4) \nlist.print_list()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 4.317043366641117e-06,
      "p_css": 0.00188896238928359,
      "p_html": 0.7481231565741666,
      "p_java": 5.731203118622651e-06,
      "p_javascript": 4.108138651235913e-05,
      "p_matlab": 0.017507131779075636,
      "p_python": 0.00046177279806494345,
      "p_sql": 0.23181057615987902,
      "p_typescript": 0.00015727066653252537
    },
    {
      "text": "# -*- coding: utf-8 -*-\n'''\nCreated on Jan 30, 2015\nModified on Jan 30, 2015\n@author: rainier.madruga@gmail.com\nA simple Python Program to scrape the ESPN FC website for content.\n'''\n'''\nVersion Number of Script\n'''\nversion = '0.01.a'\n\n# Import Libraries needed for Scraping the various web pages\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport datetime\nimport requests\nimport os\nimport platform\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\n# Establish the process Date & Time Stamp\nts = datetime.datetime.now().strftime(\"%H:%M:%S\")\nds = datetime.datetime.now().strftime(\"%Y-%m-%d\")\ndate = datetime.datetime.now().strftime(\"%Y%m%d\")\n\n# Updates the Time Stamp\ndef updateTS():\n    update = datetime.datetime.now().strftime(\"%H:%M:%S\")\n    return update\n\n# Download Image\ndef downloadImage(imageURL, localFileName):\n    response = requests.get(imageURL)\n    if response.status_code == 200:\n        print 'Downloading %s...' % (localFileName)\n    with open(localFileName, 'wb') as fo:\n        for chunk in response.iter_content(4096):\n            fo.write(chunk)\n    return True\n\n# Program Version & System Variables\nparseVersion = 'ESPN Premier League Team News ' + version\nprint ds + ' :: ' + ts + ' :: ' + parseVersion\n\n# Set Output Path for Windows or Mac environments\nos_System = platform.system()\nwin_BasePath = \"C:/Users/Rainier/Documents/GitHub/python-soccer\"\n\nif os_System == \"Windows\":\n    outputPath = win_BasePath + \"/PL-Data/\"\n    outputImgPath = win_BasePath + \"/PL-Data/imgs/\"\n    outputTeamPath = win_BasePath + \"/PL-Data/teams/\"\n    outputMatchPath = win_BasePath + \"/PL-Data/match/\"\nelse:\n    outputPath = 'PL-Data/'\n    outputImgPath = 'PL-Data/imgs/'\n    outputTeamPath = 'PL-Data/teams/'\n    outputMatchPath = 'PL-Data/match/'\n\nhr = \" >>> *** ====================================================== *** <<<\"\nshr = \" >>> *** ==================== *** <<<\"\n\nprefixBBC = \"http://www.bbc.com\"\nprefixESPN = \"http://www.espnfc.us\"\n\nteamURLs = ['/club/arsenal/359/index','/club/aston-villa/362/index','/club/burnley/379/index','/club/chelsea/363/index','/club/crystal-palace/384/index','/club/everton/368/index','/club/hull-city/306/index','/club/leicester-city/375/index','/club/liverpool/364/index','/club/manchester-city/382/index','/club/manchester-united/360/index','/club/newcastle-united/361/index','/club/queens-park-rangers/334/index','/club/southampton/376/index','/club/stoke-city/336/index','/club/sunderland/366/index','/club/swansea-city/318/index','/club/tottenham-hotspur/367/index','/club/west-bromwich-albion/383/index','/club/west-ham-united/371/index']\n\ndef teamNews(x):\n\tteamURL = x\n\tteamName = x\n\tteamName = teamName[6:len(teamName)-10]\n\tteamURL = prefixESPN + teamURL\n\tteamHTML = urllib2.urlopen(teamURL)\n\tteamSoup = BeautifulSoup(teamHTML)\t\n\trecentNews = teamSoup.find(\"div\", {\"id\":\"feed\"})\n\trecentNewsItems = recentNews.find_all(\"div\", {\"class\":\"feed-item-content\"})\n\trecapOutput = []\n\tprint \"Team News Parsed :: \" + teamName\n\tfor i in recentNewsItems:\n\t\trecapPhotoItem = i.find(\"div\", {\"class\":\"thumbnail picture\"})\n\n\t\tif len(i) > 3:\n\t\t\t# recapPhotoItem = recapPhotoItem.find(\"img\")\n\t\t\t# print recapPhotoItem[\"src\"]\n\t\t\t# with open(outputTxt, \"a\") as f:\n\t\t\t#\tf.write('\\n' + shr + '\\n')\n\t\t\t#\tf.write(i.prettify())\n\t\t\t#\tf.write('\\n' + shr + '\\n')\n\t\t\t#\tf.close()\n\t\t\t# print shr\n\t\t\trecapHeadline = i.find(\"h2\")\n\t\t\trecapHeadlineDetails = recapHeadline.find(\"a\")\n\t\t\trecapHeadlineDetails = recapHeadlineDetails[\"href\"]\n\t\t\trecapHeadline = recapHeadline.get_text(strip=True)\n\t\t\trecapAge = i.find(\"span\", {\"class\":\"age\"})\n\t\t\trecapAge = recapAge.get_text(strip=True)\n\t\t\trecapOutput.append(date + \"|\" + teamName + \"|\" + recapHeadline + \"|\" + recapHeadlineDetails + \"|\" + recapAge)\n\t\t\t#print shr\n\t\t\t# print i.prettify()\n\t\t\t#print recapHeadlineDetails \n\t\t\t#print shr\n\t\t\t#recapDetails = recapHeadline.find(\"a\")\n\t\t\t#recapDetails = recapDetails[\"href\"]\n\t\t\t#print recapDetails\n\t\t\t# print recapAge.get_text(strip=True)\n\t\t\t\n\t\t\t#print updateTS()\n\t\t\t#print shr\n\t\t\t# print i\n\t\telse:\n\t\t\t#print i\n\t\t\t#print shr\n\t\t\trecapGameOpponents = i.find_all(\"div\", {\"class\":\"team-name\"})\n\t\t\trecapGameScore = i.find_all(\"div\", {\"class\":\"team-score\"})\n\t\t\trecapGameStatus = i.find(\"div\", {\"class\":\"game-info\"})\n\t\t\trecapGameHome = recapGameOpponents[0].get_text(strip=True)\n\t\t\trecapGameAway = recapGameOpponents[1].get_text(strip=True)\n\t\t\trecapHomeScore = recapGameScore[0].get_text(strip=True)\n\t\t\trecapAwayScore = recapGameScore[1].get_text(strip=True)\n\t\t\t#recapGameInfo = i.find(\"div\", {\"clas=\":\"game-info\"})\n\t\t\trecapOutput.append(date + \"|\" + teamName + \"|\" + recapGameHome + \" \" + recapHomeScore +  \" v. \" + recapAwayScore + \" \"+ recapGameAway + \"||\")\n\t\t\t# print i\n\tfor i in recapOutput:\n\t\tprint i\n\tprint hr \n\treturn recapOutput\n\nteamNewstxt = 'teamNews.txt'\nwith open(teamNewstxt, \"w\") as f:\n   \tf.write(ds + \" :: \" + updateTS() + \" :: \" + parseVersion + '\\n' )\n   \tf.close()\n\nfor i in teamURLs:\n\tfor x in teamNews(i):\n\t\twith open(teamNewstxt, \"a\") as f:\n\t\t\tf.write(x + '\\n')\n\t\t\tf.close()\n",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 0.000909371360477617,
      "p_css": 0.002064293382288971,
      "p_html": 0.996079359414807,
      "p_java": 4.650492791461747e-06,
      "p_javascript": 5.891842252457562e-06,
      "p_matlab": 2.556550250274293e-06,
      "p_python": 0.000773167665746837,
      "p_sql": 6.257226585492008e-06,
      "p_typescript": 0.0001544520647998858
    },
    {
      "text": "def addNums(x, y):\n    return x + y",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0458681726310896e-12,
      "p_css": 2.5489143973834694e-10,
      "p_html": 2.7598246867965498e-11,
      "p_java": 8.025231839209999e-13,
      "p_javascript": 3.049889349032867e-12,
      "p_matlab": 3.595677408560778e-18,
      "p_python": 0.9999999972484059,
      "p_sql": 2.461794976084354e-09,
      "p_typescript": 4.1123042603913176e-13
    },
    {
      "text": "def compound_interest(principal, rate, time):\n    return principal * (1 + rate)**time\n\nresult = compound_interest(1000, 0.03, 5)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000739898270235656,
      "p_css": 0.02011184789093587,
      "p_html": 0.0025849442944231777,
      "p_java": 0.0002544305590383882,
      "p_javascript": 0.0010593597058502556,
      "p_matlab": 0.0003813516100174088,
      "p_python": 0.9703999081688583,
      "p_sql": 0.0031089505031336433,
      "p_typescript": 0.0013593089975073964
    },
    {
      "text": "def is_prime(num):\n    if num < 2:\n        return False\n    if num == 2 or num == 3: \n        return True\n\n    i = 2\n    while i*i <= num: \n        if (num % i) == 0: \n            return False\n        i += 1\n\n    return True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.057305881851221e-08,
      "p_css": 7.999694280543752e-14,
      "p_html": 5.389574364065108e-08,
      "p_java": 3.965109228152568e-10,
      "p_javascript": 1.6397437384348902e-09,
      "p_matlab": 0.9999187568507562,
      "p_python": 8.117276386740999e-05,
      "p_sql": 2.808238127880225e-10,
      "p_typescript": 3.5994154951934385e-09
    },
    {
      "text": "def hourglass_sum(arr):\n    max_sum = float(\"-inf\")\n    for row in range(4):\n        for col in range(4):\n            top = arr[row][col] + arr[row][col+1] + arr[row][col+2]\n            middle = arr[row+1][col+1]\n            bottom = arr[row+2][col] + arr[row+2][col+1] + arr[row+2][col+2]\n            curr_sum = top + middle + bottom\n            max_sum = max(max_sum, curr_sum)\n    return max_sum",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004580146676407931,
      "p_css": 0.0015334833710569,
      "p_html": 0.000769455754610205,
      "p_java": 0.00013822999628584966,
      "p_javascript": 0.00022523979953269075,
      "p_matlab": 0.07762175786761344,
      "p_python": 0.9182480218971245,
      "p_sql": 0.0002458036215902718,
      "p_typescript": 0.000759993024545186
    },
    {
      "text": "import random\nimport string\n\ndef generate_password():\n chars = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(chars) for i in range(12))\n return password\n\nif name == 'main':\n password = generate_password()\n print(password)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 8.29925621703512e-12,
      "p_css": 1.078008480936839e-08,
      "p_html": 1.1304287795391273e-08,
      "p_java": 0.0014167277674457708,
      "p_javascript": 5.389938141877097e-15,
      "p_matlab": 9.905732686841946e-10,
      "p_python": 1.2447858684081902e-06,
      "p_sql": 0.9985820037179092,
      "p_typescript": 6.455260896170525e-10
    },
    {
      "text": "def most_frequent(sequence): \n    return max(set(sequence), key = sequence.count) \n\nprint(most_frequent(sequence))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001728903891590502,
      "p_css": 0.023472863290554966,
      "p_html": 0.003257494177703329,
      "p_java": 0.00022016134778024378,
      "p_javascript": 0.0014906507380392205,
      "p_matlab": 0.0001398439101247166,
      "p_python": 0.9635371618535543,
      "p_sql": 0.004846401475352659,
      "p_typescript": 0.0013065193152999816
    },
    {
      "text": "#!   /usr/bin/env   python3\n# -*- coding: utf-8 -*\n'''\nTerminal tool to make Time Interval measures using the Tektronix FCA3103\n\n@file\n@date Created on Sep. 16, 2015\n@author Felipe Torres (torresfelipex1<AT>gmail.com)\n@copyright LGPL v2.1\n'''\n\n# ----------------------------------------------------------------------------|\n#                   GNU LESSER GENERAL PUBLIC LICENSE                         |\n#                 ------------------------------------                        |\n# This source file is free software; you can redistribute it and/or modify it |\n# under the terms of the GNU Lesser General Public License as published by the|\n# Free Software Foundation; either version 2.1 of the License, or (at your    |\n# option) any later version. This source is distributed in the hope that it   |\n# will be useful, but WITHOUT ANY WARRANTY; without even the implied warrant  |\n# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser  |\n# General Public License for more details. You should have received a copy of |\n# the GNU Lesser General Public License along with this  source; if not,      |\n# download it from http://www.gnu.org/licenses/lgpl-2.1.html                  |\n# ----------------------------------------------------------------------------|\n\n# -----------------------------------------------------------------------------\n#                                   Import                                   --\n# -----------------------------------------------------------------------------\nimport datetime\nimport argparse as arg\nfrom subprocess import check_output\n\nfrom FCA3103 import FCA3103\n\n\ndef main() :\n    '''\n    Tool for automatize the control of Tektronix FCA3103 Timer/Counter\n    '''\n    parser = arg.ArgumentParser(description='Tektronix FCA3103 tool')\n\n    parser.add_argument('--function', '-f', help='Measuring Function', choices=['mtint','tint'],\\\n    required=True)\n    parser.add_argument('--interval', '-t', help='Time between samples', type=int)\n    parser.add_argument('--samples', '-s', help='Number of samples', type=int, \\\n    default=1)\n    parser.add_argument('--debug', '-d', help=\"Enable debug output\", action=\"store_true\", \\\n    default=False)\n    parser.add_argument('--device', '-l', help=\"Device port\", type=int, default=1)\n    parser.add_argument('--output', '-o', help='Output data file', type=str)\n    parser.add_argument('--ref', '-r', help='Input channel for the reference',type=int, \\\n    choices=[1,2],default=1)\n    parser.add_argument('--trigl','-g',help='Input trigger level', type=float, \\\n    default=1.5)\n    parser.add_argument('--skip','-i',help='Ignore values far from mean  plus error',type=int, \\\n    default=0)\n    parser.add_argument('--tstamp','-x', help='Add timestamping for each measure',action=\"store_true\", \\\n    default=False)\n\n    args = parser.parse_args()\n\n    valid_port = False\n    ports = check_output([\"\"\"ls /dev | grep usbtmc\"\"\"],shell=True)[:-1]\n    for p in ports.splitlines():\n        p = p.decode('utf-8')\n        if int(p[-1]) == args.device:\n            valid_port = True\n    if not valid_port:\n        print(\"No device found at /dev/usbtmc%d\" % (args.device))\n        exit(6)  # No such device or address\n\n    device = FCA3103(args.device, args.ref, 2 if args.ref == 1 else 1)\n    device.show_dbg = args.debug\n    device.t_samples = args.interval\n    device.n_samples = args.samples\n    device.skip_values = True if args.skip > 0 else False\n    device.error = args.skip\n    # TODO: Add de posibility of using different trigger values for the inputs\n    device.trig_level[0] = device.trig_level[1] = args.trigl\n    # try:\n    if args.function == 'mtint':\n        print(\"Measuring Mean Time Interval between the inputs (%d secs)...\" % (args.samples))\n        mean = device.mean_time_interval(args.samples, args.interval)\n        print(\"Mean Time Interval for %d samples: %g\" % (args.samples, mean))\n\n    elif args.function == 'tint':\n        print(\"Measuring Time Interval between the inputs (%d secs)...\" % (args.samples+10))\n        values = device.time_interval(args.samples, tstamp=args.tstamp)\n        if args.output:\n            with open(args.output,'a+') as file:\n                file.write(\"# Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\\n\" % args.samples)\n                file.write(\"# %s\\n\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))\n                for v in values:\n                    if args.tstamp:\n                        file.write(\"%g\\t%g\\n\" % (v[0], v[1]))\n                    else:\n                        file.write(str(v))\n                        file.write(\"\\n\")\n            print(\"Output writed to '%s'\" % (args.output))\n        else:\n            print(\"Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\" % args.samples)\n            print(\"%s\\n\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))\n            for v in values:\n                print(v)\n\n    # except Exception as e:\n    #     print(e)\n\nif __name__ == \"__main__\" :\n    main()\n",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.003964376992568863,
      "p_css": 0.056081108266802654,
      "p_html": 0.004780053635037096,
      "p_java": 0.929730597663681,
      "p_javascript": 0.00010931894009208175,
      "p_matlab": 3.4259830430287653e-09,
      "p_python": 0.00060838120173968,
      "p_sql": 0.0011422638826861895,
      "p_typescript": 0.003583895991409335
    },
    {
      "text": "import nltk\n\ntokenized = nltk.word_tokenize(\"The cat sat on the mat.\")\nprint(tokenized)\n# Output: ['The', 'cat', 'sat', 'on', 'the', 'mat', '.']",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.015753154767919494,
      "p_css": 0.0732930767149445,
      "p_html": 0.01262385044210604,
      "p_java": 0.0003179981315249634,
      "p_javascript": 0.02337521409814716,
      "p_matlab": 0.0005537356492773246,
      "p_python": 0.23541598063701552,
      "p_sql": 0.008598988003864983,
      "p_typescript": 0.6300680015552
    },
    {
      "text": "input_number = 123456 \n\ndef find_sum_of_digits(number): \n    n = number \n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum \n\nsum_of_digits = find_sum_of_digits(input_number) \nprint(\"Sum of all digits in {} is {}.\" .format(input_number,sum_of_digits))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007013009543211377,
      "p_css": 0.009426722565824159,
      "p_html": 0.006746622819903426,
      "p_java": 0.12366834192181478,
      "p_javascript": 0.0045694695828541985,
      "p_matlab": 0.0008360510785136834,
      "p_python": 0.8514072122047247,
      "p_sql": 0.0010823945253770279,
      "p_typescript": 0.0015618843466668666
    },
    {
      "text": "import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_doc):\n  # Parse the XML document\n  tree = ET.parse(xml_doc)\n  # Get the root element\n  root = tree.getroot()\n  # Iterate through children\n  for child in root:\n    print(child.tag, child.attrib)\n\n# Function call \nparse_xml(\"sample.xml\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04413820105043206,
      "p_css": 0.0869697241079336,
      "p_html": 0.0639459232334407,
      "p_java": 0.0005526118567024548,
      "p_javascript": 0.19938154421255536,
      "p_matlab": 0.01978574796711891,
      "p_python": 0.528225069913848,
      "p_sql": 0.000812152911557805,
      "p_typescript": 0.05618902474641104
    },
    {
      "text": "import numpy as np\ndef add_vector(a, b):\n    return np.add(a,b)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01639082534064755,
      "p_css": 0.0012216240836718255,
      "p_html": 0.0010856367129062484,
      "p_java": 0.010636097431365048,
      "p_javascript": 5.134415669457198e-06,
      "p_matlab": 3.6118710735837606e-08,
      "p_python": 0.9678855102423777,
      "p_sql": 4.696543153653072e-05,
      "p_typescript": 0.0027281702231149313
    },
    {
      "text": "def reverse(sentence):\n words = sentence.split(' ')\n words.reverse()\n \n return ' '.join(words)\n\nprint(reverse(\"I love programming\"))  // Output: \"programming love I\"",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 4.612569205119272e-05,
      "p_css": 0.001400891298427016,
      "p_html": 0.0006309640251353601,
      "p_java": 6.440648921128396e-06,
      "p_javascript": 8.00095372526631e-05,
      "p_matlab": 5.463145145427525e-06,
      "p_python": 0.05799695273281621,
      "p_sql": 0.939697304408889,
      "p_typescript": 0.00013584851136204715
    },
    {
      "text": "def compare_dicts(dict1, dict2):\n  # Iterate through keys in both dictionaries and compare values\n  for key, value in dict1.items():\n    if key not in dict2 or dict2[key] != value:\n      return False\n \n  # If all elements matched\n  return True",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.00019352529017820682,
      "p_css": 0.8571356604129857,
      "p_html": 0.0012781001186069625,
      "p_java": 1.6500903064819208e-05,
      "p_javascript": 0.0004737006914848126,
      "p_matlab": 0.1386907977784104,
      "p_python": 0.0009125187869834167,
      "p_sql": 0.00041831610304969964,
      "p_typescript": 0.0008808799152356801
    },
    {
      "text": "def multiply_between(start, end):\n    result = 1\n    for i in range(start, end + 1):\n        result *= i\n    return result\n\nprint(multiply_between(2, 10))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.202462260462189e-08,
      "p_css": 3.7840696093244014e-06,
      "p_html": 3.303279258364032e-07,
      "p_java": 3.81730346082181e-09,
      "p_javascript": 1.9744107535481106e-08,
      "p_matlab": 8.901557529592874e-07,
      "p_python": 0.999993365252986,
      "p_sql": 1.4156910623546716e-06,
      "p_typescript": 1.4891663001507723e-07
    },
    {
      "text": "def max_of_two_values(val1, val2):\n    if val1 > val2:\n        return val1\n    else:\n        return val2\n\n# Function call with two arguments\nlargest_one = max_of_two_values(38, 64)\n\n# Print the largest number\nprint('The largest one is:', largest_one)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0023542468035769163,
      "p_css": 0.007759601194849928,
      "p_html": 0.011665994793046124,
      "p_java": 0.0010796925203374352,
      "p_javascript": 0.45155208959905274,
      "p_matlab": 0.00028063250426959343,
      "p_python": 0.5214450697299109,
      "p_sql": 0.0013681969600491397,
      "p_typescript": 0.0024944758949071817
    },
    {
      "text": "def min(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n\nprint(min(2, 5))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.981016101484064e-05,
      "p_css": 0.000500169927526745,
      "p_html": 0.00010131379712786782,
      "p_java": 1.823595587917713e-06,
      "p_javascript": 3.105841402980349e-05,
      "p_matlab": 5.6567976078858705e-05,
      "p_python": 0.9990548719290506,
      "p_sql": 0.0001633112181481933,
      "p_typescript": 3.107298143523591e-05
    },
    {
      "text": "def last_n_numbers(myList, n):\n  return myList[-n:]\n  \nres = last_n_numbers(myList, n)\nprint(res) \n\n# Output\n[8, 9, 10]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.7934209806179026e-07,
      "p_css": 1.9896211879667968e-07,
      "p_html": 2.0275032309659266e-08,
      "p_java": 1.3089895714763457e-08,
      "p_javascript": 4.07787732892725e-08,
      "p_matlab": 0.99999937969047,
      "p_python": 4.925612667029498e-08,
      "p_sql": 4.6386290333969145e-10,
      "p_typescript": 1.8141622320078087e-08
    },
    {
      "text": "def printPrimeFactors(n):\n    # Print the number of 2s that divide n\n    while n % 2 == 0:\n        print(2, end=\" \")\n        n = n/2\n  \n    # n must be odd at this point.  So we can skip\n    # one element (note i = i + 2) \n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            print(i, end=\" \")\n            n = n/i\n    # This condition is to handle the case when n\n    # is a prime number greater than 2\n    if n > 2:\n        print(n, end=\" \")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.478198740273307e-05,
      "p_css": 4.742836955451243e-05,
      "p_html": 0.00043917184887026404,
      "p_java": 0.0015165158074019664,
      "p_javascript": 0.00038629058922542487,
      "p_matlab": 0.00071789007082945,
      "p_python": 0.8956821919752335,
      "p_sql": 0.00028856626442177633,
      "p_typescript": 0.10088716308706039
    },
    {
      "text": "sorted_lst = sorted(lst, key=lambda x: x[key])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0031953811491228427,
      "p_css": 0.15319996188646703,
      "p_html": 0.006804486924196454,
      "p_java": 0.000475342335756475,
      "p_javascript": 0.00526069950580816,
      "p_matlab": 0.0005535693774914336,
      "p_python": 0.8260203999800727,
      "p_sql": 0.002698504677885302,
      "p_typescript": 0.0017916541631997607
    },
    {
      "text": "class Player:\n    \n    def __init__(self):\n        pass\n    \n    def attack(self):\n        print(\"The Player is attacking!\")\n    \n    def defend(self):\n        print(\"The Player is defending!\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010971725422810545,
      "p_css": 0.02709101481810376,
      "p_html": 0.02349282827442519,
      "p_java": 0.0001274750758095385,
      "p_javascript": 0.00350302217022998,
      "p_matlab": 5.508695056862278e-05,
      "p_python": 0.8323969595845259,
      "p_sql": 0.09284187641723216,
      "p_typescript": 0.01939456416682411
    },
    {
      "text": "#Function to calculate the sum of the natural numbers \ndef sumOfNaturals(n): \n  \n    #using Gauss formula\n    if n % 2 == 0: \n        sum = (n//2)*(n+1) \n    else: \n        sum = (n//2)*(n+1) + (n+1)//2\n  \n    return sum",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 9.797018828990882e-05,
      "p_css": 8.609495189806176e-05,
      "p_html": 0.00028713376679134945,
      "p_java": 0.10099458168370014,
      "p_javascript": 0.876238639468233,
      "p_matlab": 5.686945452839943e-07,
      "p_python": 0.0003499045865616192,
      "p_sql": 4.795602408105862e-05,
      "p_typescript": 0.02189715063589986
    },
    {
      "text": "def print_table(n):\n    for i in range(1, 11):\n        print('{0} x {1} = {2}'.format(n ,i , n*i))\n\nprint_table(4)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.109096648413972e-06,
      "p_css": 1.456925810772773e-07,
      "p_html": 1.7752368044916035e-05,
      "p_java": 3.2457363232594325e-07,
      "p_javascript": 7.324164434169241e-07,
      "p_matlab": 0.9363485810874876,
      "p_python": 0.06361659023911598,
      "p_sql": 9.67379196684647e-07,
      "p_typescript": 5.797146849415634e-06
    },
    {
      "text": "class Book:\n    def __init__(self, title, author, publication_year, number_of_pages):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n        self.number_of_pages = number_of_pages",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.9315703222515497e-06,
      "p_css": 0.002556091119879131,
      "p_html": 0.9938046118611776,
      "p_java": 3.180054620003861e-07,
      "p_javascript": 1.4328443959123384e-06,
      "p_matlab": 7.094474161901968e-08,
      "p_python": 0.002278018531112087,
      "p_sql": 0.0013496298564165917,
      "p_typescript": 7.895266492859442e-06
    },
    {
      "text": "def hello(name):\n    return \"Hello, \"+ name",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7913529896174895,
      "p_css": 8.881791425248943e-05,
      "p_html": 0.0025519981960142038,
      "p_java": 2.886855479128267e-07,
      "p_javascript": 0.08721317346538084,
      "p_matlab": 4.192314906897431e-05,
      "p_python": 0.11845998446349104,
      "p_sql": 5.353238308745943e-05,
      "p_typescript": 0.00023729212566761857
    },
    {
      "text": "def add_arrays(arr1, arr2):\n if len(arr1) != len(arr2):\n  raise Exception(\"Arrays are not of the same size!\")\n return [x + y for x, y in zip(arr1, arr2)]\n\nadd_arrays(arr1, arr2)  # [4, 6, 8]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001991965248682116,
      "p_css": 0.0065253209197569505,
      "p_html": 0.003815066169427251,
      "p_java": 0.0005830580905354484,
      "p_javascript": 0.0017560496588908132,
      "p_matlab": 0.00189702697086882,
      "p_python": 0.8797676714811354,
      "p_sql": 0.005824177356234989,
      "p_typescript": 0.0978396641044685
    },
    {
      "text": "def reverse_string(string): \n  rev_str = ''\n  idx = len(string) \n  while idx > 0: \n    rev_str += string[idx-1] \n    idx -= 1\n  return rev_str",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.052047240741391e-08,
      "p_css": 0.00019759984373430222,
      "p_html": 4.5436333571534974e-05,
      "p_java": 0.9799502223283335,
      "p_javascript": 4.923301932762118e-09,
      "p_matlab": 1.1283618249836143e-06,
      "p_python": 0.019562083019159474,
      "p_sql": 0.0002199170275226264,
      "p_typescript": 2.3567642079450267e-05
    },
    {
      "text": "def count_greater_than_user(user_num, num_list):\n    count = 0\n    for number in num_list:\n       if number > user_num:\n           count += 1\n    return count\n\nuser_num = int(input(\"User input: \"))  \nnum_list = [6, 7, 8, 9, 10]\n\nresult = count_greater_than_user(user_num, num_list)\nprint(f\"Number of numbers greater than {user_num}: {result}\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.1033812704067244e-05,
      "p_css": 0.0008120267699821082,
      "p_html": 7.631281263143791e-05,
      "p_java": 0.0003670018008364424,
      "p_javascript": 5.97183017618465e-05,
      "p_matlab": 1.0058033508453495e-07,
      "p_python": 0.9985983485624935,
      "p_sql": 3.9083771115470277e-05,
      "p_typescript": 1.6373588140091486e-05
    },
    {
      "text": "import logging\nimport sys\nfrom flask import Flask\n\napp = Flask(name)\n\n# Set up logging\napp.logger.addHandler(logging.StreamHandler(sys.stdout))\napp.logger.setLevel(logging.DEBUG)\n\n@app.route('/')\ndef index():\n app.logger.info('Processing request to index')\n return 'Hello World!'",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8238116635996655,
      "p_css": 0.1345259180397507,
      "p_html": 0.029924619101963316,
      "p_java": 1.0693987392279793e-07,
      "p_javascript": 0.003168462826879979,
      "p_matlab": 2.3611025745542205e-05,
      "p_python": 0.005327133217036113,
      "p_sql": 0.0029885855393945856,
      "p_typescript": 0.000229899709690371
    },
    {
      "text": "class Node:\n    def __init__(self,value):\n        self.left = None\n        self.right = None\n        self.value = value\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    \n    # Insert nodes to the binary search tree.\n    def insert(self,value):\n        new_node = Node(value)\n        if self.root == None:\n            self.root = new_node\n            return\n        else:\n            current_node = self.root\n            while True:\n                if value < current_node.value:\n                    if current_node.left == None:\n                        current_node.left = new_node\n                        return\n                    current_node = current_node.left\n                else:\n                    if current_node.right == None: \n                        current_node.right = new_node\n                        return\n                    current_node = current_node.right\n                \n    def printTree(self, node): \n        if node != None: \n            self.printTree(node.right)\n            print(node.value)\n            self.printTree(node.left)\n\n# Test code\nbst = BinarySearchTree()\nnums = [10,4,2,15,14,16]\nfor num in nums:\n    bst.insert(num)\nbst.printTree(bst.root)",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 0.0001846796983186679,
      "p_css": 0.01178729799468808,
      "p_html": 0.01327876372047533,
      "p_java": 5.5105222106368354e-05,
      "p_javascript": 8.401956947587115e-05,
      "p_matlab": 0.5994911673284489,
      "p_python": 0.0014521401546353772,
      "p_sql": 0.37161871515165834,
      "p_typescript": 0.002048111160193032
    },
    {
      "text": "# Extract the name and phone number from a given string\ndef extract_name_phone(input_string):\n    name_phone_dict = {}\n    data = input_string.split(': ')\n    \n    name_phone_dict['name'] = data[0]\n    name_phone_dict['phone'] = data[1]\n    \n    return name_phone_dict\n\nresult = extract_name_phone(\"John Doe: (+1) 555-665-8877\")\nprint(result)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0009666834584214159,
      "p_css": 0.6729667205719777,
      "p_html": 0.0025942726884716073,
      "p_java": 0.03500676170556886,
      "p_javascript": 1.0707125059312904e-07,
      "p_matlab": 1.7189729517132341e-06,
      "p_python": 0.2573905739239455,
      "p_sql": 0.007409178468710896,
      "p_typescript": 0.023663983138701734
    },
    {
      "text": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\ndata = pd.read_csv('data.csv')\n\nX = data[['Age', 'Gender']]\ny = data['Bought']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\nscore = model.score(X_test, y_test)\n\nprint(score)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.004577790127816015,
      "p_css": 0.5550253015893541,
      "p_html": 0.01392004270015992,
      "p_java": 1.1526007309586922e-05,
      "p_javascript": 2.982661114261348e-05,
      "p_matlab": 2.8603543408406367e-05,
      "p_python": 0.4261097254049799,
      "p_sql": 3.583168028483102e-05,
      "p_typescript": 0.0002613523355446315
    },
    {
      "text": "def group_modulo(list_numbers, num):\n    result = {i:[] for i in range(num)}\n    for number in list_numbers:\n        result[number % num].append(number)\n    \n    return result\n    \nresult = group_modulo(list_numbers, num)\nprint(result)",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 2.5300644714422774e-08,
      "p_css": 6.478889704832991e-09,
      "p_html": 2.146741704031455e-07,
      "p_java": 5.246634787354987e-09,
      "p_javascript": 2.4577573859183148e-08,
      "p_matlab": 0.9543910232997974,
      "p_python": 0.045607651913908503,
      "p_sql": 9.504012422591599e-07,
      "p_typescript": 9.810713822731892e-08
    },
    {
      "text": "nums = {x: x*x for x in range(1, n+1)}\nprint(nums)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 1.0893289340277336e-06,
      "p_css": 6.934509378819896e-07,
      "p_html": 5.294759471759677e-06,
      "p_java": 1.2377373534838364e-07,
      "p_javascript": 1.519151016596075e-07,
      "p_matlab": 0.011197068290791388,
      "p_python": 0.9887894421859543,
      "p_sql": 4.252997424277381e-06,
      "p_typescript": 1.883297649417866e-06
    },
    {
      "text": "def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x \n    else: \n        greater = y \n\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n\n    return lcm \n\nprint(lowest_common_multiple(x, y))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007785000088930954,
      "p_css": 0.025998430238682816,
      "p_html": 0.01325715924913592,
      "p_java": 0.001390559619927942,
      "p_javascript": 0.0029107996061685415,
      "p_matlab": 0.0804982284452097,
      "p_python": 0.8339098189658969,
      "p_sql": 0.0028110722058452327,
      "p_typescript": 0.03143893158020196
    },
    {
      "text": "def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([2, 4, 5, 1, 3])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.380540759889843e-06,
      "p_css": 0.000287075826083929,
      "p_html": 5.852927273689397e-05,
      "p_java": 0.0038909976392075244,
      "p_javascript": 0.00012082212459069307,
      "p_matlab": 4.983447185217547e-10,
      "p_python": 0.9955453853614628,
      "p_sql": 7.253638072351294e-05,
      "p_typescript": 1.6272356090147477e-05
    },
    {
      "text": "def findMinMax(list):\n    min_list = []\n    max_list = []\n    \n    for sublist in list: \n        min_list.append(min(sublist)) \n        max_list.append(max(sublist)) \n    return min_list, max_list \n\nlist = [[8, 4], [6, 2, 3], [1, 9, 7]] \nmin_list, max_list = findMinMax(list) \n\nprint(\"The min values of given sublist :\", min_list) \nprint(\"The max values of given sublist :\", max_list) \n\n# Output\n# The min values of given sublist : [4, 2, 1]\n#The max values of given sublist : [8, 6, 9]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011654249340487026,
      "p_css": 0.04459588181270611,
      "p_html": 0.03140549018898526,
      "p_java": 0.0010828513590043316,
      "p_javascript": 0.034054153769627116,
      "p_matlab": 0.03471675439754764,
      "p_python": 0.44360581039486047,
      "p_sql": 0.051973502685690946,
      "p_typescript": 0.34691130605109094
    },
    {
      "text": "def fibonacci(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        fib_list = fibonacci(n - 1)\n        fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001347188197988688,
      "p_css": 0.004326142125128951,
      "p_html": 0.002763586561335407,
      "p_java": 0.0003153062376961158,
      "p_javascript": 0.0008274890623906215,
      "p_matlab": 0.002801902823085996,
      "p_python": 0.9855937764783057,
      "p_sql": 0.0007009526113362192,
      "p_typescript": 0.001323655902732363
    },
    {
      "text": "def move_items(list1, list2): \n    for item in list1: \n        list2.append(item) \n    for i in range(len(list1)): \n        list1.pop() \n\nlist1 = [2, 4, 6, 8, 10]\nlist2 = [1, 3, 5, 7, 9] \n\nmove_items(list1, list2) \n\nprint(\"List 1 = \", list1) \nprint(\"List 2 = \", list2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.1518629471132235e-05,
      "p_css": 0.0007736520755794378,
      "p_html": 0.0005926127617952405,
      "p_java": 6.122842191005314e-06,
      "p_javascript": 8.348441040254354e-05,
      "p_matlab": 0.004098401928104422,
      "p_python": 0.9942728275739255,
      "p_sql": 0.00011291057887943832,
      "p_typescript": 3.846919965129791e-05
    },
    {
      "text": "def classify_inputs(lst):\n    result = []\n    for num in lst:\n        if num <= 0:\n            result.append('negative')\n        elif num > 0 and num <= 10:\n            result.append('non-negative')\n        else:\n            result.append('positive')\n    return result\n\nprint(classify_inputs([-2, 10, 11, 4, -1]))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.1798986943975088e-09,
      "p_css": 1.070602498012645e-09,
      "p_html": 1.687280312016098e-08,
      "p_java": 5.185869380415967e-10,
      "p_javascript": 3.766797228327124e-09,
      "p_matlab": 0.999922551261977,
      "p_python": 7.737189926534237e-05,
      "p_sql": 2.4240733676911564e-08,
      "p_typescript": 2.7189335176376553e-08
    },
    {
      "text": "for i in range(0,11):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2415972227325905e-13,
      "p_css": 1.6911048586434646e-18,
      "p_html": 1.1057399553217356e-12,
      "p_java": 5.510266050076294e-15,
      "p_javascript": 7.48076876636178e-15,
      "p_matlab": 0.999998444523721,
      "p_python": 1.5554749300339005e-06,
      "p_sql": 3.862174504852572e-14,
      "p_typescript": 6.723799180726865e-14
    },
    {
      "text": "import math\n\ndef calculateArea(side): \n    area = (3 * math.sqrt(3) * (side * side)) / 2\n    return area",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0031080727526261354,
      "p_css": 0.013878861392704386,
      "p_html": 0.004505883706681018,
      "p_java": 0.00037805836863249813,
      "p_javascript": 0.0010555317699543578,
      "p_matlab": 0.0006115951273585328,
      "p_python": 0.945992069220813,
      "p_sql": 8.071672744521877e-05,
      "p_typescript": 0.03038921093378503
    },
    {
      "text": "def add_without_plus_operator(a, b):\n    # Iterate till there is no carry\n    while (b != 0):\n        # Carry now contains common set bits of x and y\n        carry = a & b\n\n        # Sum of bits of x and y where at least one of the bits is not set\n        a = a ^ b\n\n        # Carry is shifted by one so that adding it to x gives the required sum\n        b = carry << 1\n\n    return a\n\nif __name__ == \"__main__\":\n    a = 3\n    b = 4\n    print(add_without_plus_operator(a, b))",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.00021245794893271774,
      "p_css": 0.00013741106575462683,
      "p_html": 0.0009406767265848323,
      "p_java": 0.00535719336869927,
      "p_javascript": 0.27173016696098906,
      "p_matlab": 0.00275216790653897,
      "p_python": 0.020920060790942132,
      "p_sql": 0.030434097185113706,
      "p_typescript": 0.6675157680464446
    },
    {
      "text": "import base64 \ndef base64_encode(string):\n    encodedBytes = base64.b64encode(string.encode(\"utf-8\"))\n    return str(encodedBytes, \"utf-8\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.0136823022708867e-18,
      "p_css": 1.0610275916812432e-09,
      "p_html": 9.994019072464517e-10,
      "p_java": 0.999999772804128,
      "p_javascript": 5.521707346259856e-14,
      "p_matlab": 3.072243855924159e-12,
      "p_python": 2.2198549488746011e-07,
      "p_sql": 3.101082599695999e-09,
      "p_typescript": 4.5737458225582216e-11
    },
    {
      "text": "def repopulate_missing(arr):\n    # Iterate the array \n    for i in range(len(arr)):\n        #Check if element is None\n        if arr[i] is None:\n            # Get neighbouring elements\n            before = arr[i - 1] if i > 0 else 0\n            after = arr[i + 1] if i < len(arr) - 1 else 0\n            \n            # Repopulate the element\n            arr[i] = (before + after) // 2\n       \n    return arr",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.3651653950322164e-10,
      "p_css": 1.28082479035537e-09,
      "p_html": 8.647633636837875e-11,
      "p_java": 3.1268948283017636e-11,
      "p_javascript": 1.936269859436505e-10,
      "p_matlab": 0.9999994640208483,
      "p_python": 5.33332614972303e-07,
      "p_sql": 4.688232529197138e-12,
      "p_typescript": 6.131349971571493e-10
    },
    {
      "text": "def find_index(arr, item):\n    for i, value in enumerate(arr):\n        if item == value:\n            return i\n    return -1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.3121431417831393e-09,
      "p_css": 2.8595381253872375e-07,
      "p_html": 2.0523346468015474e-08,
      "p_java": 3.307830654709634e-10,
      "p_javascript": 9.47728950880116e-09,
      "p_matlab": 0.9999996808244229,
      "p_python": 2.1645939845154138e-11,
      "p_sql": 2.37298724781019e-10,
      "p_typescript": 1.3192578131169644e-09
    },
    {
      "text": "def factorial(n):\t\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.1112715794483116e-05,
      "p_css": 7.136505564477444e-05,
      "p_html": 3.531836836023581e-05,
      "p_java": 1.2869066731951122e-06,
      "p_javascript": 3.5250645744119366e-05,
      "p_matlab": 2.5668894183900453e-05,
      "p_python": 0.9997573473952214,
      "p_sql": 2.0337267220680918e-05,
      "p_typescript": 1.2312751157187427e-05
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nURL = \"https://www.nba.com/scores\"\npage = requests.get(URL)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nresults = soup.find_all('li', class_=\"score\")\n\nscores = []\nfor result in results:\n    data=result.find_all(\"span\", {'class': 'scoreboardScore'})\n    scores.append([d.text for d in data])\n\nwith open(\"scores.txt\", \"w\") as f:\n    for score in scores:\n        f.write(\" \".join(score) + \"\\n\")",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 9.85611378027373e-10,
      "p_css": 0.5965626386847881,
      "p_html": 0.39256212272600893,
      "p_java": 0.006351595520423514,
      "p_javascript": 1.1026474274993177e-06,
      "p_matlab": 7.993251507066551e-05,
      "p_python": 0.00024995598437202384,
      "p_sql": 0.0021233354095016093,
      "p_typescript": 0.002069315526796316
    },
    {
      "text": "def to_uppercase(list):\n  return [item.upper() for item in list]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001910632579487399,
      "p_css": 0.022695383859192335,
      "p_html": 0.14283995701521768,
      "p_java": 0.0002836482147310489,
      "p_javascript": 0.10134504437478725,
      "p_matlab": 0.28332975450813314,
      "p_python": 0.43872557180982436,
      "p_sql": 0.007734824439644936,
      "p_typescript": 0.0011351831989818886
    },
    {
      "text": "def isPalindrome(n):\n    temp = n\n    rev = 0\n    while(temp > 0): \n        rev = (rev * 10) + (temp % 10) \n        temp = temp // 10\n    if n == rev:\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.77295861465821e-07,
      "p_css": 3.826487568595244e-06,
      "p_html": 8.679475559938406e-06,
      "p_java": 4.3898158739359696e-07,
      "p_javascript": 1.9071024071675133e-06,
      "p_matlab": 0.9999822530067011,
      "p_python": 5.928807851526274e-07,
      "p_sql": 4.7594660980719775e-08,
      "p_typescript": 1.577174868120385e-06
    },
    {
      "text": "import turtle\n\ndef draw_fish():\n    # draw the head\n    turtle.forward(40)\n    turtle.right(90)\n    turtle.forward(70) \n    turtle.left(150)\n    # draw the body\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(50)\n    # draw the tail\n    turtle.right(90)\n    turtle.forward(50)\n    turtle.right(130)\n    turtle.forward(90)\n    # draw the eyes\n    turtle.penup()\n    turtle.goto(30, 34)\n    turtle.pendown()\n    turtle.dot()\n    turtle.penup()\n    turtle.goto(70, 34)\n    turtle.pendown()\n    turtle.dot()\n\ndraw_fish()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04719120442941499,
      "p_css": 0.1900674071191133,
      "p_html": 0.26806272247342094,
      "p_java": 0.006133771338399009,
      "p_javascript": 0.03862153891463006,
      "p_matlab": 0.05243705154777418,
      "p_python": 0.3276043869609412,
      "p_sql": 0.012306317496875349,
      "p_typescript": 0.05757559971943112
    },
    {
      "text": "import random\n\ndef generate_random_number(min_value, max_value):\n    return random.randint(min_value, max_value)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011641226443249886,
      "p_css": 0.0025182731925313135,
      "p_html": 0.0013813687312646376,
      "p_java": 6.985483227039286e-05,
      "p_javascript": 0.0004120562823670878,
      "p_matlab": 5.5288615943452956e-05,
      "p_python": 0.9856268691171883,
      "p_sql": 0.008119662156662528,
      "p_typescript": 0.0006525044274471727
    },
    {
      "text": "import numpy as np\n\ndef k_means(data, k):\n centroids = np.random.uniform(low=np.min(data), high=np.max(data), size=(k, data.shape[1]))\n distances = np.zeros(shape=(data.shape[0], k))\n cluster_labels = np.zeros(shape=data.shape[0])\n\n while True:\n  # Calculate distances between data points and centroids\n  for i in range(k):\n   distances[:, i] = np.linalg.norm(data - centroids[i], axis=1)\n\n  # Assign clusters\n  cluster_labels = np.argmin(distances, axis=1)\n\n  # Compute new centroids\n  new_centroids = np.zeros(shape=centroids.shape)\n  for i in range(k):\n   new_centroids[i] = np.mean(data[cluster_labels == i], axis=0)\n\n  # Check for convergence\n  if np.allclose(centroids, new_centroids):\n   break\n\n  # Update centroids for next iteration\n  centroids = new_centroids\n\n return centroids, cluster_labels",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0027159647821663026,
      "p_css": 0.06356287038759877,
      "p_html": 0.03139691709413737,
      "p_java": 0.00031182869146205243,
      "p_javascript": 0.00046714717912324787,
      "p_matlab": 0.02668040659916415,
      "p_python": 0.7945907879582731,
      "p_sql": 0.06626515681576141,
      "p_typescript": 0.014008920492313589
    },
    {
      "text": "x = 0\n\nwhile x < 10:\n    x = x + 2\n    if x == 4:\n        continue\n    print(x)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00011355442512074249,
      "p_css": 0.0002907200691196019,
      "p_html": 0.0003095203444216197,
      "p_java": 2.0937748566923288e-05,
      "p_javascript": 3.05179998799053e-05,
      "p_matlab": 0.9874999923357606,
      "p_python": 0.011604452812930672,
      "p_sql": 7.479417625885184e-08,
      "p_typescript": 0.00013022947002361865
    },
    {
      "text": "import re\n\npattern = re.compile(r'\\d{3}')",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.012930726049185293,
      "p_css": 0.00044025244213385733,
      "p_html": 0.8999257348222444,
      "p_java": 2.060922393701817e-06,
      "p_javascript": 0.00013354965371993802,
      "p_matlab": 5.238865146223854e-05,
      "p_python": 0.08602850663367095,
      "p_sql": 0.00016106892781152671,
      "p_typescript": 0.00032571189737833273
    },
    {
      "text": "class InventoryItem:\n  def __init__(self, name, cost, quantity):\n    self.name = name\n    self.cost = cost\n    self.quantity = quantity",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0010048399011739094,
      "p_css": 0.0052029628625659494,
      "p_html": 0.02439920624235627,
      "p_java": 0.6275840167838279,
      "p_javascript": 2.6456577779901393e-07,
      "p_matlab": 2.6963202453587744e-05,
      "p_python": 0.32952190948382426,
      "p_sql": 0.011703491754568368,
      "p_typescript": 0.000556345203451889
    },
    {
      "text": "import random\n\ndef generate_password(length, num_special_char, allowed_chars):\n password = ''\n for i in range(length):\n  password += random.choice(allowed_chars)\n for i in range(num_special_char):\n  password += random.choice('!@#$%^&*')\n return ''.join(random.sample(password, len(password)))\n\n print(generate_password(length, num_special_char, allowed_chars))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 3.89980298440807e-08,
      "p_css": 1.2350497691861464e-08,
      "p_html": 7.717691489732261e-08,
      "p_java": 3.181421065195343e-10,
      "p_javascript": 2.2385976576361647e-07,
      "p_matlab": 5.156765731259215e-06,
      "p_python": 0.00031443877698071257,
      "p_sql": 0.9996800363735354,
      "p_typescript": 1.5380402369867874e-08
    },
    {
      "text": "def list_to_string(int_list):\n    string = \"\"\n\n    for i in int_list:\n        string += str(i) + \",\"\n\n    # Remove trailing comma\n    string = string[:-1]\n\n    return string\n\nint_list = [1, 4, 5, 6, 7] \nprint(list_to_string(int_list)) // \"1,4,5,6,7\"",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.7665799296091567e-12,
      "p_css": 3.2808512127775465e-07,
      "p_html": 6.836168809457024e-08,
      "p_java": 0.9999103599782546,
      "p_javascript": 1.1150603158316542e-13,
      "p_matlab": 5.402074281475846e-09,
      "p_python": 7.17012466398012e-05,
      "p_sql": 1.7516097506989255e-05,
      "p_typescript": 2.0825836906230205e-08
    },
    {
      "text": "def count_greater_than_threshold(list, threshold):\n    count = 0\n    for num in list:\n        if num > threshold:\n            count += 1\n    return count\nprint(count_greater_than_threshold(list, threshold)) # Prints 2",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.5929389656557854e-08,
      "p_css": 1.2866392318411934e-10,
      "p_html": 1.649609260457354e-08,
      "p_java": 4.8040822369482786e-11,
      "p_javascript": 5.62581240042745e-09,
      "p_matlab": 0.999999668630284,
      "p_python": 2.2768974292873683e-07,
      "p_sql": 3.748253994521451e-08,
      "p_typescript": 7.969433884498992e-09
    },
    {
      "text": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(17))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.567033514781533e-09,
      "p_css": 1.7878417641058357e-13,
      "p_html": 3.585344629799798e-08,
      "p_java": 1.3468281390084217e-10,
      "p_javascript": 3.278782556788256e-10,
      "p_matlab": 0.9976453520597908,
      "p_python": 0.0023546062871980977,
      "p_sql": 1.8494079205245402e-09,
      "p_typescript": 9.203836173120741e-10
    },
    {
      "text": "#Python code for subtracting two 8-bit integers\n\n# Function to subtract two 8-bit binary numbers \n# a and b \ndef subtractTwoBits(a, b): \n\t# a is larger \n\tif (a >= b): \n\t\t\n\t\t# Array storing values \n\t\t# after X-OR \n\t\tdiff = [0] * 8\n\t\t\n\t\t# Till same bits reach \n\t\tfor i in range(8): \n\t\t\t\n\t\t\t# If current of b is 0 \n\t\t\tif (b % 2 == 0): \n\t\t\t\n\t\t\t\t# Take X-OR with 0 \n\t\t\t\tdiff[i] = (int)(a % 2) \n\t\t\t\n\t\t\t# If current of b is 1 \n\t\t\telse: \n\t\t\t\n\t\t\t\t# Take the X-OR with 1 \n\t\t\t\tdiff[i] = (int)(a % 2) ^ 1\n\t\t\t\n\t\t\t# Right shift \n\t\t\ta = int(a / 2) \n\t\t\tb = int(b / 2) \n\t\t\n\t\t# Convert the Binary result to Integer \n\t\treturn diffToDecimal(diff) \n\t\n\telse: \n\t\tprint(\"Error: a is smaller\") \n\t\treturn -1\n\n# Function to convert 8 bit \n# binary number to Decimal \ndef diffToDecimal(diff): \n\t\n\t# Initialize the value \n\tval = 0\n\t\n\t# value before raising it  \n\t# to the power of 2 \n\tp = 1\n\t\n\t# Calculating the decimal value \n\tfor i in range (7, -1, -1): \n\t\n\t\t# Subtracting the value \n\t\tval = (val + (diff[i] * p))\t \n\t\tp = p * 2\n\t\t\n\treturn val \n\t\n# Driver Code \nx = 15\ny = 6\nres = subtractTwoBits(x, y) \nprint(res)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 7.66020052691276e-05,
      "p_css": 7.363057144957676e-05,
      "p_html": 3.6110565971087845e-05,
      "p_java": 0.7551049610234154,
      "p_javascript": 0.032619807676197925,
      "p_matlab": 6.502960081079969e-07,
      "p_python": 2.5248668995334623e-05,
      "p_sql": 0.00011319822809190129,
      "p_typescript": 0.21194979096460176
    },
    {
      "text": "def search_list(lst, s):\n for item in lst:\n  if item == s:\n   return True\n return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.1305929829351467e-05,
      "p_css": 0.00018265494473795676,
      "p_html": 0.0007663623508110349,
      "p_java": 3.172123514475347e-07,
      "p_javascript": 0.00011615062573889161,
      "p_matlab": 3.961513972547551e-06,
      "p_python": 0.9989158675558214,
      "p_sql": 2.128458744192493e-06,
      "p_typescript": 1.2514079930140454e-06
    },
    {
      "text": "def findClosestPalindrome(num):\n    # Convert number to string\n    num_str = str(num)\n    # Get length of number\n    length = len(num_str)\n\n    # Initialize solution\n    solution = None\n\n    # Loop over all possible number of same length\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        # Check if number is palindrome\n        if temp_str == temp_str[::-1]:\n            diff = abs(i-num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n\n    # Return the closest palindrome\n    return solution[0]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.783100159395409e-06,
      "p_css": 2.687769055319869e-05,
      "p_html": 0.00010073581056715291,
      "p_java": 0.00010641047616875322,
      "p_javascript": 0.0013435033640015015,
      "p_matlab": 0.02440064095963665,
      "p_python": 0.9714629902655211,
      "p_sql": 0.0024005588058088096,
      "p_typescript": 0.00015049952758370007
    },
    {
      "text": "import random\narray = [1, 2, 3, 4, 5, 6]\nrandom.shuffle(array)  # shuffle list in-place using a random permutation",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.12547005289878044,
      "p_css": 0.026784422535315135,
      "p_html": 0.03175415887075215,
      "p_java": 0.0006375157881692866,
      "p_javascript": 0.014672015232586101,
      "p_matlab": 0.1309794062239751,
      "p_python": 0.32002716670714254,
      "p_sql": 0.24169470899684703,
      "p_typescript": 0.10798055274643215
    },
    {
      "text": "def f_Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0: \n    print(\"Incorrect input\") \n  elif n == 0: \n    return a \n  elif n == 1: \n    return b \n  else: \n    for i in range(2,n): \n      c = a + b \n      a = b \n      b = c \n    return b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.916095133453596e-06,
      "p_css": 8.647203973851849e-07,
      "p_html": 5.54012893681934e-06,
      "p_java": 3.0472685028888105e-08,
      "p_javascript": 7.008722645077885e-08,
      "p_matlab": 0.00038228823452626294,
      "p_python": 0.9996044867548675,
      "p_sql": 3.7485835923961113e-06,
      "p_typescript": 5.492263443372865e-08
    },
    {
      "text": "class Invoice:\n    def __init__(self, item, price):\n        self.item = item\n        self.price = price\n    \n    def get_item(self):\n        return self.item\n    \n    def get_price(self):\n        return self.price\n\ninvoice = Invoice(\"Pen\", 3)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.068895541827557e-05,
      "p_css": 0.03139739135228536,
      "p_html": 0.028432510847633277,
      "p_java": 1.917252518841802e-06,
      "p_javascript": 0.00011625465858809025,
      "p_matlab": 4.897276396996895e-07,
      "p_python": 0.9326452162188205,
      "p_sql": 0.007345442768709798,
      "p_typescript": 3.008821838616008e-05
    },
    {
      "text": "def list_to_string(list):\n return ','.join(str(x) for x in list)\n\nlist_of_integers = [1, 2, 3, 4]\nprint(list_to_string(list_of_integers)) // Outputs: 1,2,3,4",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00018086745047106375,
      "p_css": 0.0005268678733316169,
      "p_html": 0.0014082241477521547,
      "p_java": 2.576956109196629e-05,
      "p_javascript": 0.0006795005581634193,
      "p_matlab": 0.0310490231459585,
      "p_python": 0.009882098223833595,
      "p_sql": 0.9559228644159149,
      "p_typescript": 0.0003247846234828292
    },
    {
      "text": "# Python3 program to find odd numbers in a range  \n\ndef odd_numbers(n): \n    odd_numbers = [] \n      \n    # looping through each number \n    for i in range(1, n + 1): \n        if i % 2 != 0: \n            odd_numbers.append(i) \n    return odd_numbers",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2422253077462138e-09,
      "p_css": 3.7137936338888733e-16,
      "p_html": 2.940083772600808e-10,
      "p_java": 1.3465747575723993e-11,
      "p_javascript": 8.755886970937225e-11,
      "p_matlab": 0.9999996634618735,
      "p_python": 3.3484227864745743e-07,
      "p_sql": 8.205050895452301e-12,
      "p_typescript": 5.038416797360005e-11
    },
    {
      "text": "import nltk\nfrom nltk.classify import AffinityPropagation\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ntext = \"Bonjour tout le monde!\"\nvectorizer = TfidfVectorizer(min_df = 1, analyzer = nltk.word_tokenize)\nX = vectorizer.fit_transform([text])\nclf = AffinityPropagation()\nclf.fit(X)\n\nlabels = clf.labels_\nlanguage = clf.cluster_centers_indices_[labels[0]]\nprint(vectorizer.get_feature_names()[language])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005476465400735189,
      "p_css": 0.22810147251591809,
      "p_html": 0.0025892401268452327,
      "p_java": 0.00012068301372131748,
      "p_javascript": 0.0006358150746045589,
      "p_matlab": 0.0003405421565609577,
      "p_python": 0.7539286540117931,
      "p_sql": 0.0017811976677104089,
      "p_typescript": 0.007025930032111194
    },
    {
      "text": "def check_range(num, lower, upper):\n        return (num >= lower and num <= upper)\n \nprint(check_range(10, 10, 20)) # prints True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010554716735773672,
      "p_css": 7.642707881996624e-06,
      "p_html": 0.0004536479497546445,
      "p_java": 7.418065036346875e-07,
      "p_javascript": 2.2430173114701197e-05,
      "p_matlab": 0.4115178096865289,
      "p_python": 0.586461597781346,
      "p_sql": 1.1220595309933059e-05,
      "p_typescript": 0.00046943762598273305
    },
    {
      "text": "class NNClass:\n    def __init__(self):\n        pass\n   \n    def forward(self, x):\n        self.x = x\n \n    def backward(self, dy):\n        dFdx = dy * (1/self.x)\n        return dFdx",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.9773213214620405e-05,
      "p_css": 0.0031717394606776833,
      "p_html": 0.032562125477170745,
      "p_java": 6.029779795096834e-06,
      "p_javascript": 1.527882562396196e-05,
      "p_matlab": 9.58154250482803e-07,
      "p_python": 0.8979923106237785,
      "p_sql": 0.0659725398350299,
      "p_typescript": 0.00023924463045888535
    },
    {
      "text": "import requests\nimport lxml.html as lh\n\n# Link of the website to get cities\nurl = 'http://example.com/cities'\n\n# Create list of cities\ncities = []\n\n# Get web page\nresponse = requests.get(url)\n\n# Parse the web page to get the table\ndoc = lh.fromstring(response.content)\ntr_elements = doc.xpath('//tr')\n\n# Loop through each row of the table\nfor tr in tr_elements[1:]:\n # Get the data from each column\n td = tr.xpath('td/text()')\n name = td[0].strip()\n country = td[1].strip()\n population = td[2].strip()\n area = td[3].strip()\n\n # Add a city to the list\n cities.append((name,country,population,area))\n\n# Print the list of cities\nprint(cities)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.2372126062886753e-07,
      "p_css": 0.014628897478710802,
      "p_html": 0.9783163950741306,
      "p_java": 0.0038224827174107886,
      "p_javascript": 0.0007446782219224742,
      "p_matlab": 1.7296002742178728e-06,
      "p_python": 0.0009434069289791047,
      "p_sql": 0.0013895906994373774,
      "p_typescript": 0.00015269555787386448
    },
    {
      "text": "import requests\n\ndef download_webpage(url):\n    '''\n    Function to download a webpage using Requests library\n    '''\n    response = requests.get(url)\n    #response.raise_for_status()\n    return response.text\n\nurl = 'http://example.com'\nwebpage = download_webpage(url)\nprint(webpage)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.888983384052547e-13,
      "p_css": 0.03354700945992628,
      "p_html": 0.00011587953647668584,
      "p_java": 0.9635285031176375,
      "p_javascript": 0.0002887231781686944,
      "p_matlab": 1.8723865504793242e-07,
      "p_python": 0.002485314547622022,
      "p_sql": 2.2989578222570284e-05,
      "p_typescript": 1.1393342902231365e-05
    },
    {
      "text": "\"\"\"\nWrite a Python program to remove the duplicates in a list and print the list in ascending order\n\"\"\"\n\ndef remove_duplicates_ascending(l):\n    return sorted(list(set(l)))\n\nif __name__ == \"__main__\":\n    l = [10,7,9,12,11,7,9,10]\n    res = remove_duplicates_ascending(l)\n    print(res) # [7, 9, 10, 11, 12]",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9713998569074292,
      "p_css": 0.00028865876176225106,
      "p_html": 0.0003568879845168945,
      "p_java": 1.2988833713849315e-07,
      "p_javascript": 0.0006035960576471344,
      "p_matlab": 0.006010729521754472,
      "p_python": 0.021042628194962585,
      "p_sql": 0.00023521614136349866,
      "p_typescript": 6.229654222680315e-05
    },
    {
      "text": "from sklearn.naive_bayes import MultinomialNB \n\nclf = MultinomialNB(alpha=1.0)\nclf.fit(X_train, y_train)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.14421582143967468,
      "p_css": 0.06009733982224862,
      "p_html": 0.014349717170536049,
      "p_java": 0.0005648246612194994,
      "p_javascript": 0.002247841034751517,
      "p_matlab": 0.001961092044266651,
      "p_python": 0.774634409052574,
      "p_sql": 0.0003493276383734688,
      "p_typescript": 0.0015796271363554566
    },
    {
      "text": "# Import Libraries\nimport numpy as np\n\n# Build dictionary containing necessary data\nwords = {\n 'come': ['spam', 'ham'],\n 'free': ['spam', 'ham'],\n 'money': ['spam', 'ham'],\n 'here': ['spam', 'ham'],\n 'win': ['spam', 'ham'],\n 'now': ['spam', 'ham'],\n 'urgent': ['spam', 'ham'],\n 'discount': ['spam', 'ham'],\n 'buy': ['spam', 'ham'],\n 'promo': ['spam', 'ham'],\n}\n\n# Number of Spam and non-Spam words\nspam_words = 0\nham_words = 0\n\n#Calculate number of words in each class\nfor key in words.keys():\n if 'spam' in words[key]:\n  spam_words += 1\n if 'ham' in words[key]:\n  ham_words += 1\n\n# Probabilities of each class\nP_spam = spam_words / (spam_words + ham_words)\nP_ham = ham_words / (spam_words + ham_words)\n\n# Probability of each word in each class\nwords_spam_prob = [0] * len(words)\nwords_ham_prob = [0] * len(words)\ni=0\n\nfor key in words.keys():\n if 'spam' in words[key]:\n  words_spam_prob[i] = words[key].count('spam') / spam_words\n if 'ham' in words[key]:\n  words_ham_prob[i] = words[key].count('ham') / ham_words\n i += 1\n\n# Function to classify spam and non-spam\ndef classify(comment):\n # Split comment into words\n words_in_comment = comment.split()\n \n # Calculate probability of comment being spam\n p_spam_comment = np.log(P_spam)\n p_ham_comment = np.log(P_ham)\n \n # Iterate through words in comment and calculate probability of comment being each class\n for word in words_in_comment:\n  if word in words:\n   p_spam_comment += np.log(words_spam_prob[list(words.keys()).index(word)])\n   p_ham_comment += np.log(words_ham_prob[list(words.keys()).index(word)])\n \n # Determine and return class of comment\n if p_spam_comment > p_ham_comment:\n  return 'spam'\n else:\n  return 'ham'",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.001404511877032071,
      "p_css": 0.07243288070915899,
      "p_html": 0.02493894039601609,
      "p_java": 0.00023674838450315856,
      "p_javascript": 0.05292487363484708,
      "p_matlab": 0.0049661375803048005,
      "p_python": 0.6632386743330264,
      "p_sql": 0.17266828370100462,
      "p_typescript": 0.007188949384106676
    },
    {
      "text": "def reverse_string(string):\n rev_string = ''\n for char in string:\n  rev_string = char + rev_string\n\n return rev_string\n\n # Time Complexity: O(N)\n # Space Complexity: O(N)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.4526779082149011e-05,
      "p_css": 0.00781556304007348,
      "p_html": 0.0020875800293345685,
      "p_java": 0.349832837298711,
      "p_javascript": 4.030509006621093e-06,
      "p_matlab": 0.00046208408994912413,
      "p_python": 0.631965257324979,
      "p_sql": 0.00705580869019522,
      "p_typescript": 0.0007623122386687511
    },
    {
      "text": "for i in range(1, 30, 2):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.797416231769487e-07,
      "p_css": 6.450254588091596e-07,
      "p_html": 6.0386532577091805e-06,
      "p_java": 7.60552700498318e-08,
      "p_javascript": 9.043736461473919e-08,
      "p_matlab": 0.9786592552392567,
      "p_python": 0.021330064831694893,
      "p_sql": 1.9978145132213638e-06,
      "p_typescript": 1.0522015608296438e-06
    },
    {
      "text": "unique_dict = {\n  'alec' : 'alec',\n  'bob'  : 'bob',\n  'sara' : 'sara',\n  'john' : 'john',\n  'elon' : 'elon'\n}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0616210084943166,
      "p_css": 0.7327299733553796,
      "p_html": 0.051465650145943315,
      "p_java": 0.0028434388626564317,
      "p_javascript": 0.009314292999856163,
      "p_matlab": 0.010153011257528275,
      "p_python": 0.10295110183761638,
      "p_sql": 0.0028339767467377387,
      "p_typescript": 0.02608754629996546
    },
    {
      "text": "def endswith(s, substring): \n    return s.endswith(substring) \n\n\ns = 'Hello World'\nsubstring = 'ld'\nprint(endswith(s, substring)) # prints True",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7569950621602708,
      "p_css": 0.0015620358998533186,
      "p_html": 0.0022789105900696653,
      "p_java": 7.462842667199692e-11,
      "p_javascript": 0.005260364112066959,
      "p_matlab": 3.186545924821371e-05,
      "p_python": 0.23348723884624983,
      "p_sql": 0.00010617855310239727,
      "p_typescript": 0.00027834430451041653
    },
    {
      "text": "nums = []\nans = 0\n\nfor _ in range(5):\n nums.append(int(input()))\n \nnums.sort()\n\nif len(nums) % 2 == 0:\n ans = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2\nelse:\n ans = nums[len(nums) // 2]\n \nprint(\"Median of the given numbers is: \" + str(ans))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00010085019678649878,
      "p_css": 0.00017121981347902453,
      "p_html": 0.00016739193914215266,
      "p_java": 0.0020794147337396367,
      "p_javascript": 9.069128240020426e-05,
      "p_matlab": 6.726969911625445e-07,
      "p_python": 0.9970328806093698,
      "p_sql": 0.0001510492238703573,
      "p_typescript": 0.00020582950422116543
    },
    {
      "text": "def roots(a, b, c):\n    disc = b*b - 4*a*c \n    root1 = (-b + math.sqrt(disc))/(2*a)\n    root2 = (-b - math.sqrt(disc))/(2*a)\n    return root1, root2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005565576720394284,
      "p_css": 0.01693311914088317,
      "p_html": 0.011738185154134599,
      "p_java": 0.0014814661038512471,
      "p_javascript": 0.0037363239219085124,
      "p_matlab": 0.0032521756949768854,
      "p_python": 0.9461972182309706,
      "p_sql": 0.001989562389489513,
      "p_typescript": 0.00910637264339125
    },
    {
      "text": "def infix_to_postfix(infix_expr):\n    prec = {}\n    prec[\"*\"] = 3\n    prec[\"/\"] = 3\n    prec[\"+\"] = 2\n    prec[\"-\"] = 2\n    prec[\"(\"] = 1\n    opStack = []\n    postfixList = []\n    tokenList = infix_expr.split()\n\n    for token in tokenList:\n        if token in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or token in \"0123456789\":\n            postfixList.append(token)\n        elif token == '(':\n            opStack.append(token)\n        elif token == ')':\n            topToken = opStack.pop()\n            while topToken != '(':\n                postfixList.append(topToken)\n                topToken = opStack.pop()\n        else:\n            while (len(opStack) != 0) and (prec[opStack[-1]] >= prec[token]):\n                  postfixList.append(opStack.pop())\n            opStack.append(token)\n\n    while len(opStack) != 0:\n        postfixList.append(opStack.pop())\n    return \" \".join(postfixList)",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 0.0033579839689040795,
      "p_css": 0.06023388594789312,
      "p_html": 0.009346799900289224,
      "p_java": 0.0005796562602391074,
      "p_javascript": 0.0021444713169169656,
      "p_matlab": 0.8830209632673517,
      "p_python": 0.01398938258970745,
      "p_sql": 0.020884680219796,
      "p_typescript": 0.006442176528902441
    },
    {
      "text": "def factorial(n):\n    result = 1\n    for x in range(2, n + 1):\n        result = result * x\n    return result\n\nfor n in range(1, 11):\n    print(n, \"! =\", factorial(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.3125158465806347e-09,
      "p_css": 2.2600802620470464e-09,
      "p_html": 2.781173487020736e-08,
      "p_java": 2.4243304145910277e-10,
      "p_javascript": 1.697029456151421e-09,
      "p_matlab": 0.005470811447830804,
      "p_python": 0.9945290842264132,
      "p_sql": 6.262389667335551e-08,
      "p_typescript": 6.378066045679878e-09
    },
    {
      "text": "import nltk\n\ntext1 = 'This is a nice day.'\ntext2 = 'It looks like a pleasant day.'\n\ntext1_tokens = nltk.word_tokenize(text1)\ntext2_tokens = nltk.word_tokenize(text2)\n\nsimilarity_score = len(set(text1_tokens).intersection(text2_tokens)) / float(len(set(text1_tokens).union(text2_tokens)))\n\nprint(similarity_score)\n// Output: 0.5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03667560161846165,
      "p_css": 0.06700215529505057,
      "p_html": 0.019375814204188744,
      "p_java": 0.0033949652375817423,
      "p_javascript": 0.002958592111984973,
      "p_matlab": 0.0009049678008332555,
      "p_python": 0.7965574640602745,
      "p_sql": 0.0489985600516478,
      "p_typescript": 0.02413187961997686
    },
    {
      "text": "from BeautifulSoup import BeautifulSoup\n\ndef parseHtml(html):\n    soup = BeautifulSoup(html)\n    links = []\n    for link in soup.findAll('a'):\n        links.append(link.get('href'))\n    return links",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 9.533724168692709e-06,
      "p_css": 6.61795669204853e-09,
      "p_html": 0.7958469630378667,
      "p_java": 3.548004586996567e-08,
      "p_javascript": 3.010516642996118e-06,
      "p_matlab": 0.20400172012609205,
      "p_python": 0.00013381840276779246,
      "p_sql": 3.3639738398786755e-06,
      "p_typescript": 1.5481206192486819e-06
    },
    {
      "text": "import numpy as np\n\ndef solveTSP(cost_matrix):\n n = len(cost_matrix[0])\n # matrix for storing intermediate results\n C = [[0 for i in range(n)] for j in range(1<<n)]\n # Administering initial values in matrix\n for i in range(n):\n  C[1<<i][i] = cost_matrix[i][0]\n\n # Dp to fill the remaining entries\n for mask in range(1, 1<<n):\n  for k in range(n):\n   if (mask & (1<<k)) != 0:\n    min_val = np.inf\n    for m in range(n):\n     if (mask & (1<<m)) != 0 and m != k:\n      min_val = min(min_val, C[mask ^ (1<<k)][m] + cost_matrix[m][k])\n    C[mask][k] = min_val\n\n # find the minimum cost tour         \n min_val = np.inf\n for k in range(n):\n  min_val = min(min_val, C[(1<<n) - 1][k] + cost_matrix[k][0])\n return min_val",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.9134061539598665e-06,
      "p_css": 3.599964169714257e-07,
      "p_html": 7.794567223260756e-06,
      "p_java": 8.086751737620106e-08,
      "p_javascript": 2.374255823723623e-07,
      "p_matlab": 0.918987714159119,
      "p_python": 0.08097208214886441,
      "p_sql": 6.734886457759207e-06,
      "p_typescript": 2.1082542665002238e-05
    },
    {
      "text": "for char in \"Hello World\":\n    print(char)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9754934343438542,
      "p_css": 0.00021266978902162394,
      "p_html": 0.00015833968242393403,
      "p_java": 7.222845155085445e-17,
      "p_javascript": 0.005979908197642956,
      "p_matlab": 2.804936222482538e-05,
      "p_python": 0.01811206664409088,
      "p_sql": 8.731869919815324e-06,
      "p_typescript": 6.800110821929995e-06
    },
    {
      "text": "def decToBin(num):\n    if num > 1:\n        decToBin(num//2) \n    print(num % 2,end = '')\n  \n# Driver code to test above\nif __name__ == '__main__': \n    num = 25\n    decToBin(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.3966661665008058e-09,
      "p_css": 4.6172000285461454e-14,
      "p_html": 5.200874004947697e-09,
      "p_java": 1.125781827369562e-09,
      "p_javascript": 1.984477234948325e-09,
      "p_matlab": 0.9999961112205479,
      "p_python": 3.452211796658092e-06,
      "p_sql": 1.50235763409395e-08,
      "p_typescript": 4.1183623351183735e-07
    },
    {
      "text": "def send_email(recipient_address, subject, body):\n import smtplib\n from email.message import EmailMessage\n \n message = EmailMessage()\n message['From'] = 'example@example.com'\n message['To'] = recipient_address\n message['Subject'] = subject\n message.set_content(body)\n \n with smtplib.SMTP('smtp.gmail.com', 587) as smtp:\n smtp.ehlo()\n smtp.starttls()\n smtp.login('example@example.com', 'yourpassword')\n smtp.send_message(message)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.799690417504299e-09,
      "p_css": 0.0033257719494650664,
      "p_html": 0.016305224163080594,
      "p_java": 0.9789505552867225,
      "p_javascript": 5.199246112259756e-05,
      "p_matlab": 2.031259807847641e-06,
      "p_python": 0.0013021475616707742,
      "p_sql": 4.9233091560576715e-05,
      "p_typescript": 1.3037426879640735e-05
    },
    {
      "text": "def is_even(num):\n    if num%2==0:\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.6400231520706498e-05,
      "p_css": 3.567153489114633e-08,
      "p_html": 0.00012416876082235926,
      "p_java": 6.603862011725986e-07,
      "p_javascript": 2.784049902029397e-06,
      "p_matlab": 0.8176138158794676,
      "p_python": 0.18222630717092572,
      "p_sql": 2.3827074813999414e-06,
      "p_typescript": 3.4451421441966652e-06
    },
    {
      "text": "def unique_characters(string):\n    unique_chars = {}\n    for char in string:\n        if char in unique_chars:\n            continue\n        else:\n            unique_chars[char] = True\n    return unique_chars\n\nresult = unique_characters('missisippi')\nprint(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0004274552043440814,
      "p_css": 0.0587426715772205,
      "p_html": 0.015298431649618733,
      "p_java": 0.02258844537414521,
      "p_javascript": 8.222210539961579e-06,
      "p_matlab": 0.00042094166524383016,
      "p_python": 0.9012713835343052,
      "p_sql": 0.0009883758957957161,
      "p_typescript": 0.00025407288878666285
    },
    {
      "text": "def get_sum(list):\n    total = 0\n    for num in list:\n        total += num\n    return total",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.660246702698285e-07,
      "p_css": 3.2333593555343986e-09,
      "p_html": 2.3638039652017506e-06,
      "p_java": 4.404637011901165e-08,
      "p_javascript": 3.1372683204522165e-07,
      "p_matlab": 0.999754619795116,
      "p_python": 0.0002407984161996712,
      "p_sql": 9.73996781592529e-07,
      "p_typescript": 6.169567056017091e-07
    },
    {
      "text": "def format_phone_number(phone_num):\n    return f\"({phone_num[:3]}) {phone_num[3:6]}-{phone_num[6:]}\"\n\nnumber = \"1234567890\"\nformatted_number = format_phone_number(number)\nprint(formatted_number)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 3.698415289998078e-07,
      "p_css": 5.5428709196372274e-05,
      "p_html": 3.798588114402803e-06,
      "p_java": 1.1936194769952695e-07,
      "p_javascript": 3.6095402909052883e-07,
      "p_matlab": 3.588611004959112e-08,
      "p_python": 0.9999340446018871,
      "p_sql": 5.207837374107422e-06,
      "p_typescript": 6.342198122177382e-07
    },
    {
      "text": "def prime_factorization(n): \n    prime_numbers = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            prime_numbers.append(i)\n            n = n / i\n        else:\n            i += 1\n    if n > 1:\n        prime_numbers.append(n)\n    return prime_numbers",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.689340979183402e-05,
      "p_css": 9.787409762456562e-05,
      "p_html": 5.8054341065886725e-05,
      "p_java": 6.42911234076203e-06,
      "p_javascript": 1.1652875660105449e-05,
      "p_matlab": 0.999756254135684,
      "p_python": 3.3501951007355204e-06,
      "p_sql": 9.075265858245572e-06,
      "p_typescript": 3.0416566873665167e-05
    },
    {
      "text": "def generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015195802843740976,
      "p_css": 0.020769313634835373,
      "p_html": 0.00022161685956343286,
      "p_java": 0.00024704746577766104,
      "p_javascript": 0.0002516985498172594,
      "p_matlab": 5.774368437934969e-06,
      "p_python": 0.8954453396634825,
      "p_sql": 0.0007431823974757813,
      "p_typescript": 0.0821640690321726
    },
    {
      "text": "# sum_list function takes in a list and \n# returns the sum of the elements of the list\ndef sum_list(input_list):\n  # Set sum to 0\n  sum = 0\n  \n  # Iterate through the list and \n  # add each element to the sum\n  for element in input_list:\n    sum = sum + element\n  \n  # Return the sum\n  return sum",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 8.538861531111067e-05,
      "p_css": 0.00022016192533446584,
      "p_html": 0.0005610139084280436,
      "p_java": 0.04426642328084951,
      "p_javascript": 0.6753251512982896,
      "p_matlab": 0.014630082029581482,
      "p_python": 0.0031608507437122717,
      "p_sql": 6.903515604429873e-05,
      "p_typescript": 0.26168189304244927
    },
    {
      "text": "class Fibonacci:\n    @staticmethod\n    def generateFibonacci(limit):\n        result = []\n        first = 0\n        second =1\n        while first <=limit:\n            result.append(first)\n            temp=first + second\n            first=second\n            second=temp\n        return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0030240057613241844,
      "p_css": 0.01664034457293541,
      "p_html": 0.0679126026404018,
      "p_java": 0.003718186748315223,
      "p_javascript": 0.004578838630754828,
      "p_matlab": 0.07863405297022565,
      "p_python": 0.7938559232913628,
      "p_sql": 0.020927028073335227,
      "p_typescript": 0.010709017311344847
    },
    {
      "text": "#! /usr/bin/env python\n# -*- Python -*-\n\n####################################################################################################\n\nimport argparse\nimport sys\n\nimport numpy as np\n\nimport mupdf as cmupdf\nfrom MuPDF import *\n\nfrom PyQt4 import QtCore, QtGui\n\n####################################################################################################\n\ndef show_metadata(ctx, doc):\n\n    for key in (\n        'Title',\n        'Subject',\n        'Author',\n        'Creator',\n        'Producer',\n        'CreationDate',\n        'ModDate',\n        ):\n        print cmupdf.get_meta_info(doc, key, 1024)\n    \n    fz_buffer = cmupdf.pdf_metadata(doc)\n    print cmupdf.fz_buffer_data(fz_buffer)\n    cmupdf.fz_drop_buffer(ctx, fz_buffer)\n\n####################################################################################################\n\ndef show_pdf(np_array):\n\n    application = QtGui.QApplication(sys.argv)\n\n    height, width = np_array.shape[:2]\n    image = QtGui.QImage(np_array.data, width, height, QtGui.QImage.Format_ARGB32)\n\n    label = QtGui.QLabel()\n    label.setPixmap(QtGui.QPixmap.fromImage(image))\n\n    area = QtGui.QScrollArea()\n    area.setWidget(label)\n    area.setWindowTitle(args.filename)\n    area.show()\n\n    application.exec_()\n\n####################################################################################################\n\ndef get_font_name(font):\n\n    font_name = cmupdf.get_font_name(font)\n    i = font_name.find('+')\n    if i:\n        font_name = font_name[i+1:] \n\n    return font_name\n\n####################################################################################################\n\ndef dump_bbox(obj):\n\n    return \"[%g %g %g %g]\" % (obj.bbox.x0, obj.bbox.y0,\n                              obj.bbox.x1, obj.bbox.y1)\n\n####################################################################################################\n\ndef dump_text_style(text_sheet):\n\n    style = text_sheet.style\n    while style:\n        font = style.font\n        message = \"span.s%u{font-family:\\\"%s\\\";font-size:%gpt\" % (style.id, get_font_name(font), style.size)\n        if cmupdf.font_is_italic(font):\n            message += ';font-style:italic'\n        if cmupdf.font_is_bold(font):\n            message += ';font-weight:bold;'\n        message += '}'\n        print message\n        style = style.next\n\n####################################################################################################\n\ndef dump_text_page_xml(text_page):\n\n    print \"<page>\"\n    for block in TextBlockIterator(text_page):\n        print \"<block bbox=\\\"\" + dump_bbox(block) + \"\\\">\"\n        for line in TextLineIterator(block):\n            print \" \"*2 + \"<line bbox=\\\"\" + dump_bbox(line) + \"\\\">\"\n            for span in TextSpanIterator(line):\n                print \" \"*4 + \"<span bbox=\\\"\" + dump_bbox(span) + \"\\\" \\\">\"\n                for ch in TextCharIterator(span):\n                    style = ch.style\n                    font_name = get_font_name(style.font)\n                    print \" \"*6 + \"<char \" + \\\n                        u\" c=\\\"%s\\\" font=\\\"%s\\\" size=\\\"%g\\\"/>\" % (unichr(ch.c), font_name, style.size)\n                print \" \"*4 + \"</span>\"\n            print \" \"*2 + \"</line>\"\n        print \"</block>\"\n    print \"</page>\"\n\n\n####################################################################################################\n\ndef dump_text_page(text_page):\n\n    empty_block = False\n    for block in TextBlockIterator(text_page):\n        if not empty_block:\n            print '\\n<Block>'\n        empty_block = True\n        for line in TextLineIterator(block):\n            line_text = u''\n            for span in TextSpanIterator(line):\n                span_text = u''\n                for ch in TextCharIterator(span):\n                    span_text += unichr(ch.c)\n                span_text = span_text.rstrip()\n                if span_text:\n                    line_text += '<Span>' + span_text + '</Span>'\n                else:\n                    line_text += '<Empty Span>'\n            if line_text:\n                print line_text\n                empty_block = False\n\n####################################################################################################\n\nclass GrowingTextBrowser(QtGui.QTextBrowser):\n\n    _id = 0\n\n    ##############################################\n\n    def __init__(self, *args, **kwargs):\n\n        GrowingTextBrowser._id += 1\n        self._id = GrowingTextBrowser._id\n\n        super(GrowingTextBrowser, self).__init__(*args, **kwargs)  \n        size_policy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)\n        size_policy.setHeightForWidth(True)\n        self.setSizePolicy(size_policy)\n        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n\n    ##############################################\n\n    def setPlainText(self, text):\n\n        super(GrowingTextBrowser, self).setPlainText(text)\n        self._text = text\n\n    ##############################################\n\n    def print_document_size(self, document=None):\n\n        if document is None:\n            document = self.document()\n        document_size = document.size()\n        print \"Document width\", document_size.width(), 'height', document_size.height()\n\n    ##############################################\n\n    def sizePolicy(self):\n\n        size_policy = super(GrowingTextBrowser, self).sizePolicy()\n        print 'GrowingTextBrowser.sizePolicy', self._id, \\\n            size_policy.horizontalPolicy(), size_policy.verticalPolicy()\n        return size_policy\n\n    ##############################################\n\n    def sizeHint(self):\n\n        size = super(GrowingTextBrowser, self).sizeHint()\n        print 'GrowingTextBrowser.sizeHint', self._id, size.width(), size.height()\n        return QtCore.QSize(0, 0)\n\n    ##############################################\n\n    def minimumSizeHint(self):\n\n        size = super(GrowingTextBrowser, self).minimumSizeHint()\n        print 'GrowingTextBrowser.minimumSizeHint', self._id, size.width(), size.height()\n        return QtCore.QSize(0, 0)\n\n    ##############################################\n\n    def heightForWidth(self, width):\n\n        print 'GrowingTextBrowser.heightForWidth', self._id, width\n        document = QtGui.QTextDocument(self._text)\n        document.setPageSize(QtCore.QSizeF(width, -1))\n        height = document.documentLayout().documentSize().toSize().height()\n        self.print_document_size(document)\n        return height + self.font().pointSize()\n\n    ##############################################\n\n    def resizeEvent(self, event):\n\n        print 'GrowingTextBrowser.resizeEvent', self._id, \\\n            'old', event.oldSize().width(), event.oldSize().height(), \\\n            'new', event.size().width(), event.size().height()\n        self.print_document_size()\n        return super(GrowingTextBrowser, self).resizeEvent(event)\n\n####################################################################################################\n\ndef append_block(parent, vertical_layout, source_text):\n\n    text_browser = GrowingTextBrowser(parent)\n    text_browser.setPlainText(source_text)\n    # vertical_layout.addWidget(text_browser)\n    horizontal_layout = QtGui.QHBoxLayout()\n    horizontal_layout.addWidget(text_browser, 0, QtCore.Qt.AlignTop)\n    vertical_layout.addLayout(horizontal_layout)\n\ndef show_text_page(text_page):\n\n    application = QtGui.QApplication(sys.argv)\n\n    main_window = QtGui.QMainWindow()\n    main_window.resize(1000, 800)\n    main_window.setWindowTitle(args.filename)\n\n    scroll_area = QtGui.QScrollArea(main_window)\n    # scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)\n    scroll_area.setWidgetResizable(True)\n    main_window.setCentralWidget(scroll_area)\n\n    container_widget = QtGui.QWidget()\n    vertical_layout = QtGui.QVBoxLayout(container_widget) # Set container_widget layout\n    scroll_area.setWidget(container_widget)\n\n    for block in TextBlockIterator(text_page):\n        block_text = u''\n        for line in TextLineIterator(block):\n            line_text = u''\n            for span in TextSpanIterator(line):\n                span_text = u''\n                for ch in TextCharIterator(span):\n                    span_text += unichr(ch.c)\n                span_text = span_text.rstrip()\n                if span_text: # Append span to line\n                    line_text += span_text\n                else: # Empty span then append a block\n                    if block_text:\n                        append_block(container_widget, vertical_layout, block_text)\n                    block_text = u''\n                    line_text = u''\n            # Append line to block\n            if block_text:\n                block_text += ' '\n            block_text += line_text\n        if block_text:\n            append_block(container_widget, vertical_layout, block_text)\n\n    spacer_item = QtGui.QSpacerItem(0, 0, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)\n    vertical_layout.addItem(spacer_item)\n\n    print 'Show'\n    #main_window.show()\n    main_window.showMaximized()\n    application.exec_()\n\n####################################################################################################\n\nargument_parser = argparse.ArgumentParser(description='Example.')\n\nargument_parser.add_argument('filename', metavar='FILENAME',\n                             help='PDF file')\n\nargument_parser.add_argument('--page', dest='page_number',\n                             type=int,\n                             default=1,\n                             help='Page number')\n\nargument_parser.add_argument('--zoom', dest='zoom',\n                             type=int,\n                             default=100,\n                             help='Zoom factor in %%')\n\nargument_parser.add_argument('--rotation', dest='rotation',\n                             type=int,\n                             default=0,\n                             help='Rotation')\n\nargs = argument_parser.parse_args()\n\n####################################################################################################\n\n# Create a context to hold the exception stack and various caches.\nctx = cmupdf.fz_new_context(None, None, cmupdf.FZ_STORE_UNLIMITED)\n\n####################################################################################################\n\n# Open the PDF, XPS or CBZ document.\ndoc = cmupdf.fz_open_document(ctx, args.filename)\n\nshow_metadata(ctx, doc)\n\n####################################################################################################\n\n# Retrieve the number of pages (not used in this example).\npage_count = cmupdf.fz_count_pages(doc)\n\n# Load the page we want. Page numbering starts from zero.\npage = cmupdf.fz_load_page(doc, args.page_number -1)\n\n####################################################################################################\n\n# Calculate a transform to use when rendering. This transform contains the scale and\n# rotation. Convert zoom percentage to a scaling factor. Without scaling the resolution is 72 dpi.\ntransform = cmupdf.fz_matrix_s()\ncmupdf.fz_rotate(transform, args.rotation)\ncmupdf.fz_pre_scale(transform, args.zoom / 100.0, args.zoom / 100.0)\n\n# Take the page bounds and transform them by the same matrix that we will use to render the page.\nbounds = cmupdf.fz_rect_s()\ncmupdf.fz_bound_page(doc, page, bounds)\ncmupdf.fz_transform_rect(bounds, transform)\n\n####################################################################################################\n\n# A page consists of a series of objects (text, line art, images, gradients). These objects are\n# passed to a device when the interpreter runs the page. There are several devices, used for\n# different purposes:\n#\n#\tdraw device -- renders objects to a target pixmap.\n#\n#\ttext device -- extracts the text in reading order with styling\n#\tinformation. This text can be used to provide text search.\n#\n#\tlist device -- records the graphic objects in a list that can\n#\tbe played back through another device. This is useful if you\n#\tneed to run the same page through multiple devices, without\n#\tthe overhead of parsing the page each time.\n\n####################################################################################################\n\n# Create a blank pixmap to hold the result of rendering. The pixmap bounds used here are the same as\n# the transformed page bounds, so it will contain the entire page. The page coordinate space has the\n# origin at the top left corner and the x axis extends to the right and the y axis extends down.\nbbox = cmupdf.fz_irect_s()\ncmupdf.fz_round_rect(bbox, bounds)\nwidth, height = bbox.x1 - bbox.x0, bbox.y1 - bbox.y0\nnp_array = np.zeros((height, width, 4), dtype=np.uint8)\n# pixmap = cmupdf.fz_new_pixmap_with_bbox(ctx, cmupdf.get_fz_device_rgb(), bbox)\npixmap = cmupdf.fz_new_pixmap_with_bbox_and_data(ctx, cmupdf.fz_device_rgb(ctx), bbox,\n                                                 cmupdf.numpy_to_pixmap(np_array))\ncmupdf.fz_clear_pixmap_with_value(ctx, pixmap, 0xff)\n\n# Create a draw device with the pixmap as its target.\n# Run the page with the transform.\ndevice = cmupdf.fz_new_draw_device(ctx, pixmap)\ncmupdf.fz_set_aa_level(ctx, 8)\ncmupdf.fz_run_page(doc, page, device, transform, None)\ncmupdf.fz_free_device(device)\n\nif True:\n    show_pdf(np_array)\n\nif False:\n    # Save the pixmap to a file.\n    cmupdf.fz_write_png(ctx, pixmap, \"out.png\", 0)\n\n####################################################################################################\n\ntext_sheet = cmupdf.fz_new_text_sheet(ctx)\ntext_page = cmupdf.fz_new_text_page(ctx)\n\ndevice = cmupdf.fz_new_text_device(ctx, text_sheet, text_page)\ncmupdf.fz_run_page(doc, page, device, transform, None)\ncmupdf.fz_free_device(device)\n\nif False:\n    # Dump text style and page.\n    dump_text_style(text_sheet)\n    dump_text_page_xml(text_page)\n\nif True:\n    dump_text_page(text_page)\n    show_text_page(text_page)\n\nif False:\n    file_handler = cmupdf.fz_fopen(\"out.css\", \"w+\")\n    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)\n    cmupdf.fz_print_text_sheet(ctx, output_file, text_sheet)\n    cmupdf.fz_close_output(output_file)\n    cmupdf.fz_fclose(file_handler)\n\n    output_file = cmupdf.fz_fopen(\"out.txt\", \"w+\")\n    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)\n    # cmupdf.fz_print_text_page(ctx, output_file, text_page)\n    # cmupdf.fz_print_text_page_html(ctx, output_file, text_page)\n    cmupdf.fz_print_text_page_xml(ctx, output_file, text_page)\n    cmupdf.fz_close_output(output_file)\n    cmupdf.fz_fclose(file_handler)\n\n####################################################################################################\n\n# Clean up.\ncmupdf.fz_free_text_sheet(ctx, text_sheet)\ncmupdf.fz_free_text_page(ctx, text_page)\ncmupdf.fz_drop_pixmap(ctx, pixmap)\ncmupdf.fz_free_page(doc, page)\ncmupdf.fz_close_document(doc)\ncmupdf.fz_free_context(ctx)\n\n####################################################################################################\n# \n# End\n# \n####################################################################################################\n",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 0.000856859338873603,
      "p_css": 0.0005521624651127948,
      "p_html": 0.6892396634024112,
      "p_java": 7.554646436947665e-06,
      "p_javascript": 0.0003890148721172706,
      "p_matlab": 3.456469248816081e-06,
      "p_python": 0.0019999448270416323,
      "p_sql": 0.0029253155478140306,
      "p_typescript": 0.3040260284309437
    },
    {
      "text": "#import the modules\nimport matplotlib.pyplot as plt \nimport numpy as np \n  \n#set the independent and dependent variables \nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \ny = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) \n\n#calculate the mean\nx_mean = np.mean(x) \ny_mean = np.mean(y) \n  \n# Calculate the b1 and b0 \nnumerator = 0\ndenominator = 0\nfor i in range(len(x)): \n    numerator += (x[i] - x_mean)*(y[i] - y_mean) \n    denominator += (x[i] - x_mean)**2 \nb1 = numerator / denominator \nb0 = y_mean - (b1 * x_mean) \n\n# Print the coefficients\nprint(\"b1 =\", b1) \nprint(\"b0 =\", b0)  \n  \n# Plotting Values and Regression Line \nmax_x = np.max(x) + 100\nmin_x = np.min(x) - 100\n  \n# Calculating line values x and y \nx1 = np.linspace(min_x, max_x, 1000) \ny1 = b0 + b1 * x1 \n  \n# Ploting Line \nplt.plot(x1, y1, color='#00ff00', label='Linear Regression') \n  \n# Ploting Scatter Points \nplt.scatter(x, y, color='#ff0000', label='Scatter Plot') \n  \n# Add title\nplt.title(\"Linear Regression\") \n\n# Show the plot\nplt.show()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.26646686856340907,
      "p_css": 0.01481259004310037,
      "p_html": 0.07957143645168477,
      "p_java": 0.06008260046622332,
      "p_javascript": 1.22742705046863e-06,
      "p_matlab": 0.002473879798989882,
      "p_python": 0.4183473505687553,
      "p_sql": 0.0010481434560007828,
      "p_typescript": 0.1571959032247859
    },
    {
      "text": "def remove_duplicates(lst): \n\treturn list(set(lst)) \nremove_duplicates([1,1,3,4,4,5])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004145942911381258,
      "p_css": 0.0013022891780967904,
      "p_html": 0.0007449708825902452,
      "p_java": 5.482060908239184e-05,
      "p_javascript": 0.00020627880543399425,
      "p_matlab": 3.975103143794077e-05,
      "p_python": 0.9958638579896375,
      "p_sql": 0.0009072011433507621,
      "p_typescript": 0.0004662360692320837
    },
    {
      "text": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = [[145, 285, 181], [149, 290, 184], [153, 295, 187]]\ndata = pd.DataFrame(data, columns=['IBM', 'AAPL', 'MSFT'])\n\n# Define and fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(data[['IBM', 'AAPL', 'MSFT']], data.shift(-1))\n\n# Make predictions for the future stock prices\npredictions = model.predict([[145, 285, 181], [149, 290, 184]])[0]\nprint('Predicted future stock prices: IBM: %f, AAPL: $%f, MSFT: $%f.' %\n  (predictions[0], predictions[1], predictions[2]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.08427075568678027,
      "p_css": 0.2039350694914638,
      "p_html": 0.007987079353605115,
      "p_java": 2.1679595985914995e-05,
      "p_javascript": 0.00011483595635598904,
      "p_matlab": 0.00010579165526360934,
      "p_python": 0.6218412326611767,
      "p_sql": 3.13261998520677e-05,
      "p_typescript": 0.08169222939951645
    },
    {
      "text": "def delete_checkbox_items(items):\n    new_list = [item for item in items if item != 'Checkbox']\n    return new_list\n\nitems_list = ['Apples', 'Orange', 'Bananas', 'Cherries', 'Checkbox']\nresult = delete_checkbox_items(items_list)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.614309710002705e-06,
      "p_css": 0.014047529045004935,
      "p_html": 0.0006893054164824328,
      "p_java": 4.509665869638147e-07,
      "p_javascript": 0.0014097435459555804,
      "p_matlab": 4.899119169904361e-06,
      "p_python": 0.9838198603916468,
      "p_sql": 2.3167544023442387e-05,
      "p_typescript": 4.296614200225278e-07
    },
    {
      "text": "def find_prime_numbers(start, end): \n    prime_nums = []\n    for num in range(start, end + 1): \n        if num > 1:\n            for i in range(2, num): \n                if num % i == 0: \n                    break\n            else: \n                prime_nums.append(num)\n    return prime_nums\n    \nprint(find_prime_numbers(0, 10))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.892862466032978e-12,
      "p_css": 9.065857831392167e-16,
      "p_html": 2.8076433896333804e-11,
      "p_java": 5.95198670903121e-13,
      "p_javascript": 9.259299694731554e-13,
      "p_matlab": 0.9999999777464319,
      "p_python": 2.2194349254646902e-08,
      "p_sql": 1.398595193070137e-11,
      "p_typescript": 7.74152521770252e-12
    },
    {
      "text": "def sort_list(list_of_tuples): \n    list_of_tuples.sort(key = lambda x: x[1]) \n    return list_of_tuples",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0038198715212393163,
      "p_css": 0.03494926762151304,
      "p_html": 0.008150413791516329,
      "p_java": 0.0008205230342460983,
      "p_javascript": 0.0029852560063917686,
      "p_matlab": 0.0009858592030921843,
      "p_python": 0.9422745980509135,
      "p_sql": 0.0024558031585020183,
      "p_typescript": 0.0035584076125856757
    },
    {
      "text": "def max_value(a, b):\n    # Return the maximum of two numbers\n    if a > b:\n        return a\n    else:\n        return b\n\n# Example usage\na = 6\nb = 8\nprint(max_value(a, b)) # 8",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.94369965750329e-07,
      "p_css": 4.897082332195536e-06,
      "p_html": 3.6146299474116826e-05,
      "p_java": 0.9810065112400319,
      "p_javascript": 2.3155901547938487e-05,
      "p_matlab": 4.330872603076773e-12,
      "p_python": 0.018916583078737212,
      "p_sql": 7.547121061819072e-06,
      "p_typescript": 4.464902518108123e-06
    },
    {
      "text": "import math\n\ndef sphere_surface_area(radius):\n surface_area = 4 * math.pi * radius * radius\n return surface_area \n\n# Test\nradius = 6\nprint(sphere_surface_area(radius)) # 452.38934211",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008148809187118201,
      "p_css": 0.0031980190179424295,
      "p_html": 0.001728046889037607,
      "p_java": 0.00010722836657538186,
      "p_javascript": 0.00037268025473174857,
      "p_matlab": 0.00019264121302349813,
      "p_python": 0.9920727664086968,
      "p_sql": 0.0007754858920979161,
      "p_typescript": 0.0007382510391825107
    },
    {
      "text": "from __future__ import unicode_literals\nfrom . import BaseProvider\nfrom . import date_time\nfrom datetime import datetime\nimport random\n\n\nclass Provider(BaseProvider):\n    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')\n\n    windows_platform_tokens = (\n        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',\n        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',\n        'Windows 98', 'Windows 95', 'Windows CE'\n    )\n\n    linux_processors = ('i686', 'x86_64',)\n\n    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')\n\n    langs = ('en-US', 'sl-SI', 'it-IT')\n\n    @classmethod\n    def mac_processor(cls):\n        return cls.random_element(cls.mac_processors)\n\n    @classmethod\n    def linux_processor(cls):\n        return cls.random_element(cls.linux_processors)\n\n    @classmethod\n    def user_agent(cls):\n        name = cls.random_element(cls.user_agents)\n        return getattr(cls, name)()\n\n    @classmethod\n    def chrome(cls):\n        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))\n\n        platforms = (\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def firefox(cls):\n        ver = (\n            'Gecko/{0} Firefox/{1}.0'.format(\n            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),\n            'Gecko/{0} Firefox/3.6.{1}'.format(\n                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),\n            'Gecko/{0} Firefox/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),\n        )\n\n        platforms = (\n            \"({0}; {1}; rv:1.9.{2}.20) {3}\".format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def safari(cls):\n        saf = \"{0}.{1}.{2}\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))\n        if random.randint(0, 1) == 0:\n            ver = \"{0}.{1}\".format(random.randint(4, 5), random.randint(0, 1))\n        else:\n            ver = \"{0}.0.{1}\".format(random.randint(4, 5), random.randint(1, 5))\n\n        platforms = (\n            '(Windows; U; {0}) AppleWebKit/{1} (KHTML, like Gecko) Version/{2} Safari/{3}'.format(\n                cls.windows_platform_token(), saf, ver, saf),\n            '({0} rv:{1}.0; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4} Safari/{5}'.format(\n                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),\n            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4}.0.5 Mobile/8B{5} Safari/6{6}'.format(\n                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),\n                random.randint(111, 119), saf\n            )\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def opera(cls):\n\n        platforms = (\n            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(\n                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n        )\n\n        return 'Opera/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))\n\n    @classmethod\n    def internet_explorer(cls):\n        return 'Mozilla/5.0 (compatible; MSIE {0}.0; {1}; Trident/{2}.{3})'.format(\n            random.randint(5, 9),\n            cls.windows_platform_token(),\n            random.randint(3, 5),\n            random.randint(0, 1)\n        )\n\n    @classmethod\n    def windows_platform_token(cls):\n        return cls.random_element(cls.windows_platform_tokens)\n\n    @classmethod\n    def linux_platform_token(cls):\n        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))\n\n    @classmethod\n    def mac_platform_token(cls):\n        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(\n            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))\n\n",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0063357397439007,
      "p_css": 0.029192510817655868,
      "p_html": 0.0058917082178705235,
      "p_java": 0.00023910989207687956,
      "p_javascript": 0.0010110510274101553,
      "p_matlab": 0.00024995604009425145,
      "p_python": 0.9318411035224886,
      "p_sql": 0.02218710756174211,
      "p_typescript": 0.0030517131767609116
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\nimport json\n\nurl = 'https://en.wikipedia.org/wiki/Bill_Gates'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = {\n 'name': 'Bill Gates',\n 'birth': soup.find_all('span', {'class': 'bday'})[0].text,\n 'birth_location': soup.find_all('div', {'class': 'birthplace'})[0].text,\n 'education': soup.find_all('span', {'class': 'education-degrees'})[0].text, \n 'alma_mater': soup.find_all('span', {'class': 'org'})[0].text\n}\n\nwith open('bill_gates_data.json', 'w') as outfile:\n json.dump(data, outfile)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 4.748427983765507e-06,
      "p_css": 0.42104979210004556,
      "p_html": 0.5769878073579723,
      "p_java": 0.0010053464578721814,
      "p_javascript": 1.4419207068994417e-06,
      "p_matlab": 6.515959185208625e-07,
      "p_python": 0.0006084509457059521,
      "p_sql": 6.42134892425871e-05,
      "p_typescript": 0.0002775477045523404
    },
    {
      "text": "def compare_strings(first, second):\n    return first == second\n\nresult = compare_strings('Apple', 'Orange')\nprint (result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00022437374153644625,
      "p_css": 0.006224652445020941,
      "p_html": 0.002754334145362122,
      "p_java": 5.1244912950126656e-05,
      "p_javascript": 0.00020098945027667144,
      "p_matlab": 2.7915400674780043e-05,
      "p_python": 0.987889562125606,
      "p_sql": 0.0021611008098391424,
      "p_typescript": 0.0004658269687336315
    },
    {
      "text": "from collections import Counter\n\ndef most_frequent_element(array):\n  return Counter(array).most_common(1)[0][0]\n  \n# Driver code \nprint(most_frequent_element([1, 3, 1, 4, 5, 3, 4, 3]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.07456774040148662,
      "p_css": 0.028878512853937402,
      "p_html": 0.011700995177235505,
      "p_java": 0.0020120830923193384,
      "p_javascript": 0.0019096892882795769,
      "p_matlab": 0.001252029086874839,
      "p_python": 0.8618524490502568,
      "p_sql": 0.0026343002491080276,
      "p_typescript": 0.015192200800501968
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# read in the dataset\nemails = pd.read_csv(\"emails.csv\")\n\n# split the emails into a training and testing set\nX_train, X_test, y_train, y_test = train_test_split(emails[\"message\"], emails[\"label\"], test_size=0.2, random_state=0)\n\n# extract features from the emails using a count vectorizer\nvectorizer = CountVectorizer()\nX_train_features = vectorizer.fit_transform(X_train)\n\n# create and train a logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train_features, y_train)\n\n# test the model on the testing set\nX_test_features = vectorizer.transform(X_test)\nscore = model.score(X_test_features, y_test)\n\nprint(\"Test accuracy: \", score)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.27109378443726706,
      "p_css": 0.18400406025880747,
      "p_html": 0.018760792187842226,
      "p_java": 9.31706543904372e-06,
      "p_javascript": 0.0003237636660894016,
      "p_matlab": 1.3045073434435695e-05,
      "p_python": 0.3993144650397333,
      "p_sql": 3.112028617679849e-05,
      "p_typescript": 0.12644965198521008
    },
    {
      "text": "import re\nimport collections\n\ndef words(text): \n    return re.findall('[a-z]+', text.lower()) \n\ndef train(features):\n    model = collections.defaultdict(lambda: 1)\n    for f in features:\n        model[f] += 1\n    return model\n\nNWORDS = train(words(open('big.txt').read()))\n\ndef edits1(word):\n    s = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    deletes    = [a + b[1:] for a, b in s if b]\n    transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]\n    replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]\n    inserts    = [a + c + b     for a, b in s for c in alphabet]\n    return set(deletes + transposes + replaces + inserts)\n\ndef known_edits2(word):\n    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)\n\ndef known(words): \n    return set(w for w in words if w in NWORDS)\n\ndef correct(word):\n    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]\n    return max(candidates, key=NWORDS.get)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.010165572821587296,
      "p_css": 3.3859396641785425e-05,
      "p_html": 0.0010967632637785703,
      "p_java": 4.2496671123273705e-08,
      "p_javascript": 3.5603505181305385e-06,
      "p_matlab": 0.8660762026857919,
      "p_python": 0.12251098338077829,
      "p_sql": 0.00010711187250280209,
      "p_typescript": 5.903731729999789e-06
    },
    {
      "text": "for x in range(3):\n    print('\\\\    /' * x + '\\\\  ')",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.1370891400445182e-11,
      "p_css": 8.007936004238141e-13,
      "p_html": 6.832173677190107e-10,
      "p_java": 9.813795350342565e-13,
      "p_javascript": 6.166383762648635e-13,
      "p_matlab": 0.9982171889527836,
      "p_python": 0.0017828095830992661,
      "p_sql": 7.273396179134729e-10,
      "p_typescript": 2.9790485620697413e-11
    },
    {
      "text": "import gzip\nimport os\n\n# Walk through the source directory\nfor root, dirs, files in os.walk('example_dir'):\n    # Gzip each file\n    for file in files:\n        with open(os.path.join(root, file), 'rb') as f_in:\n            with gzip.open(os.path.join(root, file + '.gz'), 'wb') as f_out:\n                f_out.writelines(f_in)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.06513355912436246,
      "p_css": 0.024029876769065806,
      "p_html": 0.001113767204425612,
      "p_java": 3.8063849182696765e-06,
      "p_javascript": 0.0011961444557054587,
      "p_matlab": 0.0018510078768239112,
      "p_python": 0.006228294985975885,
      "p_sql": 0.8477391997591016,
      "p_typescript": 0.052704343439621194
    },
    {
      "text": "def remove_duplicates(list1):\n    # Function to remove duplicates from a list\n    # convert the list into a set of unique elements\n    list_unique = set(list1)\n \n    # convert the set to a list\n    list_unique = list(list_unique)\n    return list_unique\n \n# input list\nlist1 = [1, 4, 2, 6, 4, 1, 2]\n \n# remove duplicates from the list\nlist1 = remove_duplicates(list1)\n \n# print the new list\nprint(list1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.016727469751986933,
      "p_css": 0.027251334075438914,
      "p_html": 0.008046246053329202,
      "p_java": 8.83731694467367e-05,
      "p_javascript": 0.26983888223561886,
      "p_matlab": 0.0008364521930150647,
      "p_python": 0.4545500862829406,
      "p_sql": 0.15949510483956406,
      "p_typescript": 0.06316605139865959
    },
    {
      "text": "def get_even_sum(nums):\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\nnums = [2, 3, 6, 7, 13, 14]  \neven_sum = get_even_sum(nums)\nprint(even_sum)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.341491656157446e-05,
      "p_css": 2.876619828283875e-06,
      "p_html": 0.0001734954610634449,
      "p_java": 1.510251008633655e-05,
      "p_javascript": 4.8612579453679444e-05,
      "p_matlab": 0.94151999012735,
      "p_python": 0.05795277339411943,
      "p_sql": 6.321916270912366e-05,
      "p_typescript": 0.0001305152288279065
    },
    {
      "text": "def generate_spiral_matrix(m, n):\n    matrix = []\n    r = 0\n    c = 0\n    while (r < m and c < n):\n        # list to add elements of the first row\n        for i in range(c, n): \n            matrix.append(r * n + i + 1) \n        r += 1\n  \n        # list to add elements of the last column\n        for i in range(r, m): \n            matrix.append(i * n + n - 1 + 1)\n        n = n - 1\n  \n        # if last row exist\n        if ( r < m): \n                # list to add elements of the last row\n                for i in range(n - 1, c - 1, -1): \n                    matrix.append((m - 1) * n + i + 1) \n                m -= 1\n          \n        # if first column exits\n        if (c < n): \n            # list to add elements of the first column\n            for i in range(m - 1, r - 1, -1): \n                matrix.append(i * n + c + 1) \n            c += 1\n\n    return matrix",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00037621320110863774,
      "p_css": 0.00022087615650994395,
      "p_html": 0.014565144505818417,
      "p_java": 0.026790768092804864,
      "p_javascript": 0.004990971986620638,
      "p_matlab": 0.3381008026615137,
      "p_python": 0.4398179070245272,
      "p_sql": 0.020220146379751967,
      "p_typescript": 0.15491716999134447
    },
    {
      "text": "def createSubstrings(string): \n    length = len(string) \n    subString = []\n    \n    # Loops through the string  \n    # and the length of substring to be formed \n    for i in range(length): \n        for j in range(i + 1, length + 1): \n            subString.append(string[i:j]) \n  \n    return subString",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.1881237576310007e-09,
      "p_css": 5.428968485301625e-06,
      "p_html": 1.4189540475318602e-06,
      "p_java": 0.7817237026959692,
      "p_javascript": 2.4710595033310585e-08,
      "p_matlab": 0.00039444344744361066,
      "p_python": 0.20329496019242882,
      "p_sql": 0.009910754537422429,
      "p_typescript": 0.0046692653054842635
    },
    {
      "text": "def is_palindrome(list_of_strings):\n  palindrome_list = [string for string in list_of_strings if string == string[::-1]]\n  if palindrome_list:\n    return True\n  return False",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.141378479475464e-15,
      "p_css": 1.2923353158379322e-08,
      "p_html": 2.6329196354956137e-09,
      "p_java": 0.9999901111333087,
      "p_javascript": 1.6660843759048794e-17,
      "p_matlab": 6.915176608538231e-11,
      "p_python": 9.770657753397699e-06,
      "p_sql": 1.0247323940507609e-07,
      "p_typescript": 1.1027183319672116e-10
    },
    {
      "text": "def convert_pascal_to_hyphen(string):\n    output_string = \"\"\n    for char in string:\n        if char.isupper():\n            output_string += \"-\"+char.lower()\n        else:\n            output_string += char\n    return output_string[1:]\n    \nconvert_pascal_to_hyphen(\"HelloWorld\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.5065047251507233e-05,
      "p_css": 0.010469785268353226,
      "p_html": 0.002598489945403429,
      "p_java": 0.15629515166092708,
      "p_javascript": 4.58737475687393e-06,
      "p_matlab": 0.0018914961449889496,
      "p_python": 0.8199211025242896,
      "p_sql": 0.00793478786501803,
      "p_typescript": 0.0008595341690114372
    },
    {
      "text": "class Employee:\n  def __init__(self, id, name):\n    self.id = id\n    self.name = name\n\n  def get_id(self):\n    return self.id\n\n  def get_name(self):\n    return self.name",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00030577084708806443,
      "p_css": 0.0049533294593169675,
      "p_html": 0.2559317907992925,
      "p_java": 0.04946212027846693,
      "p_javascript": 4.491266011120052e-08,
      "p_matlab": 9.00733550090927e-07,
      "p_python": 0.6662749369909715,
      "p_sql": 0.023006130281648652,
      "p_typescript": 6.497569700503802e-05
    },
    {
      "text": "def sum_of_numbers(n):\n    return int(n * (n + 1) / 2)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 7.737698596312308e-05,
      "p_css": 2.4777165594038722e-05,
      "p_html": 2.7361031227869345e-05,
      "p_java": 0.9930503217386973,
      "p_javascript": 1.1968647263402882e-05,
      "p_matlab": 9.086138401434801e-11,
      "p_python": 0.0067910394580079575,
      "p_sql": 2.738332983517633e-06,
      "p_typescript": 1.4416549401095258e-05
    },
    {
      "text": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nfeatures = [[15000, 'Ford', 'Focus', 5, 20000]]\n\nmodel = LinearRegression()\n\n# Train the model with the given data\nmodel.fit(features, [14500])\n\n# Define the predict function\ndef predict(price, make, model, age, distance):\n    inputs = [[price, make, model, age, distance]]\n    return model.predict(inputs)[0]\n    \nnet_price = predict(15000, 'Ford', 'Focus', 5, 20000)\nprint(net_price)   #14500",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7524387859657635,
      "p_css": 0.0297259365203313,
      "p_html": 0.0006626751774406963,
      "p_java": 2.2939781458691437e-06,
      "p_javascript": 0.0007922404128759473,
      "p_matlab": 5.654037934774373e-06,
      "p_python": 0.21534930734726773,
      "p_sql": 1.4893631704061678e-07,
      "p_typescript": 0.0010229576239231643
    },
    {
      "text": "def double(value): \n    return value * 2\n\ndef triple(value): \n    return value * 3\n\ndef quad(value):\n    return value * 4\n\ndef calculate_value(n): \n    if n > 10: \n        return double(n) \n    elif n > 5: \n        return triple(n) \n    else: \n        return quad(n) \n    \nprint(calculate_value(-2))\nprint(calculate_value(8)) \nprint(calculate_value(13))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.1509385892332357e-05,
      "p_css": 0.020997530318683164,
      "p_html": 0.0004167054174231718,
      "p_java": 6.730847562314212e-06,
      "p_javascript": 2.5087752165732607e-05,
      "p_matlab": 0.9782281404239245,
      "p_python": 1.6409874011060823e-05,
      "p_sql": 0.00023373409217158618,
      "p_typescript": 4.4151888166147376e-05
    },
    {
      "text": "def concatenate_string(string1, string2):\n    return string1 + string2\n\nstring1 = \"Hello \"\nstring2 = \"World!\"\n\nconcatenated_string = concatenate_string(string1, string2)\nprint(concatenated_string)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01445933418217682,
      "p_css": 0.0023891449852342208,
      "p_html": 0.0037763518140015834,
      "p_java": 7.840511543314048e-07,
      "p_javascript": 0.005981904964564206,
      "p_matlab": 0.0002003537093660226,
      "p_python": 0.970818684537798,
      "p_sql": 0.000994908539086046,
      "p_typescript": 0.0013785332166186247
    },
    {
      "text": "import string \n  \ndef rot13_encode(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if char in string.ascii_lowercase: \n            ciphertext += chr((ord(char) - key - 97) % 26 + 97)\n        elif char in string.ascii_uppercase: \n            ciphertext += chr((ord(char) - key - 65) % 26 + 65) \n        else: \n            ciphertext += char \n    return ciphertext \n  \nprint(rot13_encode(\"attack at dawn\", 13))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.12348948165018e-05,
      "p_css": 0.01932450017894058,
      "p_html": 0.001746836215485093,
      "p_java": 0.03238012686519943,
      "p_javascript": 5.401685360183819e-06,
      "p_matlab": 0.0005398059445790352,
      "p_python": 0.9329700934916006,
      "p_sql": 0.012612403164321708,
      "p_typescript": 0.00038959755969671176
    },
    {
      "text": "def isDivisible(a, b):\n  return a % b == 0\n\nprint(isDivisible(number1, number2)) #True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0037799058557693886,
      "p_css": 0.011175126517782942,
      "p_html": 0.007437875031955926,
      "p_java": 0.00028078002757957546,
      "p_javascript": 0.0011465599378722923,
      "p_matlab": 0.0003594314862239796,
      "p_python": 0.9730761865158873,
      "p_sql": 0.000667580547097928,
      "p_typescript": 0.0020765540798306213
    },
    {
      "text": "import random\n\nnumber = random.randint(10, 20)\nwhile (number == 14):\n  number = random.randint(10, 20)\n\nprint(number)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.503555763896812e-06,
      "p_css": 0.00023533125139638242,
      "p_html": 2.4231269069406603e-05,
      "p_java": 7.31647846782214e-07,
      "p_javascript": 3.404196691758712e-06,
      "p_matlab": 1.1239604420800576e-06,
      "p_python": 0.999627309415696,
      "p_sql": 9.461021585309507e-05,
      "p_typescript": 6.7544872404605265e-06
    },
    {
      "text": "import random\n\n# A standard deck of cards with 52 cards\ndeck = [2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A', \n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A',\n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A',\n        2, 3, 4, 5, 6, 7, 8, 9, 10, \n        'J', 'Q', 'K', 'A']\n\n# Shuffle the deck\nrandom.shuffle(deck)\nprint(deck)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003685378069346386,
      "p_css": 0.023152995254788252,
      "p_html": 0.009744572088186187,
      "p_java": 0.00036576860953865147,
      "p_javascript": 0.0052947057649348934,
      "p_matlab": 0.0014277862883241108,
      "p_python": 0.9409987489955043,
      "p_sql": 0.0026664187683244226,
      "p_typescript": 0.012663626161052783
    },
    {
      "text": "import requests\n\ndef main():\n    url = 'https://www.example.com'\n    \n    r = requests.get(url)\n    if r.status_code == 200:\n        content = r.content\n        print(content)\n    else:\n        print(\"Failed to fetch data.\")\n\nif __name__ == \"__main__\":\n    main()",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 7.638202851708599e-19,
      "p_css": 2.0562546318350985e-05,
      "p_html": 7.043152237617107e-07,
      "p_java": 0.9999782656453392,
      "p_javascript": 1.6422680399246928e-09,
      "p_matlab": 1.5041248974339172e-10,
      "p_python": 2.4438905223620597e-07,
      "p_sql": 2.2014475707500263e-07,
      "p_typescript": 1.1666288660323631e-09
    },
    {
      "text": "def find_longest_common_sequence(string1, string2):\n \n    m = len(string1)\n    n = len(string2)\n \n    # Create a matrix to store results of subproblems\n    dp = [[0] * (n+1) for i in range(m+1)]\n \n    max_length = 0\n \n    # Fill d[][] in bottom up manner\n    for i in range(m):\n        for j in range(n):\n            # If A[i] == B[j], include the character\n            #   and take diagonal path\n            if string1[i] == string2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n                max_length = max(max_length, dp[i+1][j+1])\n            # If not same, take max from 3 adjacent cells\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1], dp[i][j])\n \n    return max_length\n\nstring1 = \"ABAZA\"\nstring2 = \"BAZAC\"\n\nprint(\"Length of Longest Common Sequence:\", find_longest_common_sequence(string1, string2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005983347464268027,
      "p_css": 0.0005390805643735643,
      "p_html": 0.0010411368702112952,
      "p_java": 2.642932825882908e-05,
      "p_javascript": 0.0009940966559143388,
      "p_matlab": 0.034501396887506974,
      "p_python": 0.9358631241871272,
      "p_sql": 0.02262283172344368,
      "p_typescript": 0.003813569036737298
    },
    {
      "text": "# Accepting user input\nname = input(\"Please enter your name: \")\n\n# Printing out the user input\nprint(\"Hello, \",  name, \"!\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.1170702605910029,
      "p_css": 0.008001831510793225,
      "p_html": 0.024693399754499096,
      "p_java": 0.6363291431616495,
      "p_javascript": 1.3651587930428051e-05,
      "p_matlab": 1.1974370644249163e-05,
      "p_python": 0.2131409277232541,
      "p_sql": 0.00041208620163054655,
      "p_typescript": 0.0003267250985959734
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Web_crawler'\nrequest = requests.get(url)\nsoup = BeautifulSoup(request.content, 'html.parser')\nfor link in soup.find_all('a', href=True):\n  print(link['href'])",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.588634567335827e-07,
      "p_css": 0.6515971810511971,
      "p_html": 0.33807120040344285,
      "p_java": 0.0015937788807698816,
      "p_javascript": 5.808345248016029e-05,
      "p_matlab": 0.0001539447202298438,
      "p_python": 0.00793585823130529,
      "p_sql": 0.0005499505520387105,
      "p_typescript": 3.9743845079310636e-05
    },
    {
      "text": "def multiply_matrix(A, B):\n    n = len(A)\n    C = [[0] * n for _ in range(n)]\n \n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                C[i][j] += A[i][k] * B[k][j]\n    return C\n \nA = [[1, 2],\n     [3, 4]]\nB = [[1, 2],\n     [2, 3]]\n \nprint(multiply_matrix(A,B))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0167840512565642e-09,
      "p_css": 2.1582366495281963e-11,
      "p_html": 1.2931202789720673e-08,
      "p_java": 7.052855090195781e-11,
      "p_javascript": 3.291578548143269e-11,
      "p_matlab": 0.9942079305540561,
      "p_python": 0.005792040361129852,
      "p_sql": 1.371283834499325e-08,
      "p_typescript": 1.2989621970137247e-09
    },
    {
      "text": "def neighbor_product(arr):\n    # loop through array elements in reverse order\n    for i in range(len(arr)-1, 0, -1):\n        # check if element is odd\n        if arr[i] % 2 == 1:\n            # replace element with product of the previous and next neighbors\n            arr[i] = arr[i-1] * arr[i+1]\n    return arr\n\narr = [1, 3, 5, 7, 9, 11, 13]\n\nupdated_arr = neighbor_product(arr)\nprint(updated_arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.427280438600041e-08,
      "p_css": 2.4399128805051044e-07,
      "p_html": 3.834327652629523e-08,
      "p_java": 2.181275096544145e-08,
      "p_javascript": 1.0865466379851564e-07,
      "p_matlab": 0.9957126515722637,
      "p_python": 0.004286384159730126,
      "p_sql": 1.139221969791693e-09,
      "p_typescript": 5.160540006351311e-07
    },
    {
      "text": "import nltk\nfrom nltk.classify import NaiveBayesClassifier\n\n# Corpus of Train Data\ntrain_data = [(\"This is a great day for a walk.\", 'positive'), \n              (\"Today's forecast looks horrible\", 'negative'),\n              (\"The weather is so beautiful.\", 'positive')] \n\n# Tokenize words\nwords_list = [word_tokenize(sent[0]) for sent in train_data]\n\n# Build a list of words\nall_words = []\nfor word_list in words_list:\n    for word in word_list:\n        all_words.append(word.lower())\n\n# Get the Frequency Distribution of the words\nall_words_unique = nltk.FreqDist(all_words)\n\n# Move the features to the word list\nword_features = list(all_words_unique.keys())\n\n# Function to extract features\ndef extract_features(sentence):\n    tokenize_words = word_tokenize(sentence)\n    features = {}\n    for word in word_features:\n        features[word] = (word in tokens)\n    return features\n\n# Train the model\ntraining_set = nltk.classify.apply_features(extract_features, train_data)\nclassifier = NaiveBayesClassifier.train(training_set)   \n\n# Predictions\nsentence = \"This is a great day for a walk.\"\npred = classifier.classify(extract_features(sentence))\nprint (pred)",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.028064796672739274,
      "p_css": 0.11481853946181012,
      "p_html": 0.022643756662289037,
      "p_java": 8.650478977199831e-05,
      "p_javascript": 0.0989182523268682,
      "p_matlab": 0.006261219520585479,
      "p_python": 0.24975387226066895,
      "p_sql": 0.2673641929978169,
      "p_typescript": 0.21208886530744997
    },
    {
      "text": "import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\n\n# load data\ntrain_data = [{'text': 'good morning', 'sentiment': 'positive'}, {'text': 'bad news', 'sentiment': 'negative'}] \n\n# process data\nX_train = np.array([x['text'] for x in train_data]) \ny_train = np.array([x['sentiment'] for x in train_data])\n\n# tokenize words\ntokenizer = Tokenizer(num_words=1000) \ntokenizer.fit_on_texts(X_train) \nX_train = tokenizer.texts_to_sequences(X_train) \nX_train = pad_sequences(X_train, padding='post', maxlen=64) \n\n# create model\nmodel = Sequential([\n Embedding(input_dim=1000, output_dim=128, input_length=64), \n Bidirectional(LSTM(128)), \n Dense(128, activation='relu'), \n Dense(2, activation='softmax') \n]) \n\n# compile model\nmodel.compile(\n optimizer=Adam(learning_rate=0.001), \n loss='sparse_categorical_crossentropy', \n metrics=['accuracy']\n)\n\n# fit model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32)\n\n# evaluate\nloss, accuracy = model.evaluate(X_train, y_train)\nprint('Accuracy: %f' % (accuracy*100))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.44039984688329803,
      "p_css": 0.05887505411084042,
      "p_html": 0.024082018893485487,
      "p_java": 1.9107106333493577e-05,
      "p_javascript": 2.0171013301877117e-05,
      "p_matlab": 0.0023914763217225774,
      "p_python": 0.4574697600136496,
      "p_sql": 6.650189038357707e-05,
      "p_typescript": 0.016676063766984994
    },
    {
      "text": "def is_perfect_number(num):\n    divs = []\n    for i in range(1,num):\n        if num % i == 0:\n            divs.append(i)\n    if num == sum(divs):\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.460030830759977e-12,
      "p_css": 1.260944926442959e-15,
      "p_html": 3.301986936760546e-11,
      "p_java": 1.009480020998947e-12,
      "p_javascript": 6.146184147311126e-13,
      "p_matlab": 0.9999999996992794,
      "p_python": 2.547499265967207e-10,
      "p_sql": 1.7068345760455702e-12,
      "p_typescript": 2.158532484105852e-12
    },
    {
      "text": "# Load required modules\nimport pandas as pd\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n\n# Load spam emails\nspam_df = pd.read_csv(\"spam.csv\")\n\n# Split into independent and dependent features\nX = spam_df['Email']\ny = spam_df['Label']\n\n# Create a pipeline\nmodel = make_pipeline(CountVectorizer(),\n                      TfidfTransformer(),\n                      MultinomialNB())\n\n# Fit the pipeline\nmodel.fit(X, y)\n\n# Resize the dataset\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit the model\nmodel.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = model.predict(X_test)\n\n# Generate accuracy score\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9215092412416451,
      "p_css": 0.014198340228583194,
      "p_html": 0.0005968038783117316,
      "p_java": 7.370745631758486e-07,
      "p_javascript": 9.017881459228845e-06,
      "p_matlab": 1.5763255045300932e-06,
      "p_python": 0.06354511130104004,
      "p_sql": 3.000939097711175e-08,
      "p_typescript": 0.00013914205950199708
    },
    {
      "text": "def find_element(inputlist, element):\n    for i, num in enumerate(inputlist):\n        if element == num:\n            return i",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.5018068712970496e-11,
      "p_css": 6.009937726963292e-14,
      "p_html": 1.1235209431720798e-11,
      "p_java": 2.6467320039112984e-12,
      "p_javascript": 5.210482282520865e-12,
      "p_matlab": 0.9999999943956026,
      "p_python": 5.5499307231646565e-09,
      "p_sql": 6.781423339316585e-15,
      "p_typescript": 2.0289129408260962e-11
    },
    {
      "text": "def isPrime(x): \n\tif x > 1: \n\t\tfor i in range(2,x): \n\t\t\tif (x % i) == 0: \n\t\t\t\treturn False\n\t\telse: \n\t\t\treturn True\n\telse: \n\t\treturn False\n\nnum = 21\nif(isPrime(num)) : \n\tprint(num, \"is a prime number\") \nelse : \n\tprint(num, \"is a composite number\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.896176042386572e-08,
      "p_css": 4.6291238686387473e-10,
      "p_html": 1.3607454511409745e-07,
      "p_java": 1.8953313527156223e-09,
      "p_javascript": 2.925625007021131e-10,
      "p_matlab": 0.9970876897720253,
      "p_python": 0.002912102419736105,
      "p_sql": 4.236668046139624e-08,
      "p_typescript": 7.754446211201772e-09
    },
    {
      "text": "def split_into_pairs(inputString):\n    resultList = []\n    counter = 0\n    \n    while counter < len(inputString):\n        resultList.append(inputString[counter:counter + 2])\n        counter += 2\n    \n    return resultList\n\npairs = split_into_pairs(\"abcd\")\n\nprint(pairs)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003801994050330741,
      "p_css": 0.018346720151706988,
      "p_html": 0.02670658487944629,
      "p_java": 0.0010080049050811958,
      "p_javascript": 0.004138957192381923,
      "p_matlab": 0.008528803276563112,
      "p_python": 0.931345046074037,
      "p_sql": 0.0012251293968685356,
      "p_typescript": 0.00489876007358421
    },
    {
      "text": "def add(x, y):\n    return x + y",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.644166295168704e-05,
      "p_css": 3.0373726174217555e-05,
      "p_html": 0.0001836470763826539,
      "p_java": 0.7161181174906789,
      "p_javascript": 3.5323731553628805e-05,
      "p_matlab": 1.1044216229316879e-10,
      "p_python": 0.2834323043138984,
      "p_sql": 0.00013554546581326585,
      "p_typescript": 1.8246422105049435e-05
    },
    {
      "text": "def print_fibonacci_sequence(n):\n    # Initialize the first two numbers of the sequence\n    num1 = 0\n    num2 = 1\n    # Use a for loop to print the the sequence in the right order\n    for i in range(n):\n        print(num1, end=' ')\n        num3 = num1 + num2\n        num1 = num2\n        num2 = num3\n\n# Test\nprint_fibonacci_sequence(10)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00011954630633170063,
      "p_css": 0.00013985059958881844,
      "p_html": 0.0005550315426879441,
      "p_java": 0.0014515285429297516,
      "p_javascript": 0.0031858488378158655,
      "p_matlab": 1.14322803671138e-06,
      "p_python": 0.9869824165874398,
      "p_sql": 0.0011987353295146153,
      "p_typescript": 0.006365899025654776
    },
    {
      "text": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2554335264806113e-05,
      "p_css": 1.1899921506801552e-05,
      "p_html": 7.881121703314436e-05,
      "p_java": 1.2919076974392621e-06,
      "p_javascript": 3.346799416810989e-06,
      "p_matlab": 0.764963303481401,
      "p_python": 0.23484866350117375,
      "p_sql": 6.149048893541978e-05,
      "p_typescript": 1.863834757098104e-05
    },
    {
      "text": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.1254747055251987e-05,
      "p_css": 0.005409334492987365,
      "p_html": 0.01785956760234939,
      "p_java": 7.356151706369012e-07,
      "p_javascript": 0.00010449325775886203,
      "p_matlab": 2.1878940066302704e-07,
      "p_python": 0.8047933542000973,
      "p_sql": 0.17181801734174082,
      "p_typescript": 3.023953439666297e-06
    },
    {
      "text": "def factorial(num): \n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nnum = 5\nfact = factorial(num)\nprint(\"Factorial of\", num,\" is\", fact)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.892722045749194e-07,
      "p_css": 1.2399321493223745e-10,
      "p_html": 7.856742579744922e-07,
      "p_java": 1.553200519156884e-07,
      "p_javascript": 2.2201399824467453e-07,
      "p_matlab": 0.9988190132548308,
      "p_python": 0.0011766087460605107,
      "p_sql": 3.744793765791292e-07,
      "p_typescript": 2.4511152262024427e-06
    },
    {
      "text": "def levenshtein_distance(str1, str2):\n    \"\"\"\n    Write a python program to calculate the Levenshtein distance, which is a \n    measure of similarity between two strings.\n    \"\"\"\n    m = len(str1)\n    n = len(str2)\n    # Create a matrix to store edit distances\n    edit_distance = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    # Fill the matrix\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                edit_distance[i][j] = j \n            elif j == 0:\n                edit_distance[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                edit_distance[i][j] = edit_distance[i-1][j-1]\n            else:\n                edit_distance[i][j] = 1 + min(edit_distance[i-1][j], edit_distance[i][j-1], edit_distance[i-1][j-1])\n    # Return the last element of the matrix\n    return edit_distance[m][n]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.02158369571903036,
      "p_css": 0.00014831717681086103,
      "p_html": 0.00010265063210126265,
      "p_java": 4.163880886241183e-05,
      "p_javascript": 0.011441829036705627,
      "p_matlab": 0.041483672038819995,
      "p_python": 0.9152681144781077,
      "p_sql": 0.0021522109377065386,
      "p_typescript": 0.007777871171855163
    },
    {
      "text": "def sum_integers(a, b): \n    return a + b \n    \n# Driver Program \na = 4\nb = 5\n\nprint(\"Sum of {} and {} is: {}\".format(a, b, sum_integers(a, b)))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.041020255604882025,
      "p_css": 4.560712026998833e-05,
      "p_html": 3.3253617368807296e-05,
      "p_java": 0.9190625907146003,
      "p_javascript": 0.0005152989416816092,
      "p_matlab": 2.5330976019468002e-11,
      "p_python": 0.03915239701749659,
      "p_sql": 6.698821071574969e-05,
      "p_typescript": 0.00010360874765387727
    },
    {
      "text": "from datetime import datetime\n\ndef find_difference_in_days(date1, date2):\n    date1 = datetime.strptime(date1, '%Y-%m-%d')\n    date2 = datetime.strptime(date2, '%Y-%m-%d')\n    return abs((date2 - date1).days)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006328419086255633,
      "p_css": 0.01835370868925059,
      "p_html": 0.007961883311125462,
      "p_java": 0.0007801053131921688,
      "p_javascript": 0.002321395467703225,
      "p_matlab": 0.001620214998578987,
      "p_python": 0.9565885161016859,
      "p_sql": 0.0013281550098605708,
      "p_typescript": 0.004717602022347439
    },
    {
      "text": "import random\n\n#create cards list\ncards = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]*2\n\n#shuffle cards\nrandom.shuffle(cards)\n\n#create a shuffled cards instance\ncards_hand = set(cards)\n\n#while loop \nwhile len(cards_hand) > 0:\n    #my hand\n    my_hand = set(random.sample(cards_hand, 2))\n    #computer hand \n    comp_hand = set(random.sample(cards_hand, 2))\n\n    #check if my hand and computer had matched \n    if my_hand == comp_hand:\n        print(f\"congratulation!!! you matched the cards..\")\n    else:\n        #break\n        break\n\n    #remove all cards from hand \n    cards_hand -= my_hand\n    cards_hand -= comp_hand\n\n#if the loop run out\nif len(cards_hand) == 0:\n    #print the result \n    print(\"you won the game\")\nelse:\n    print(\"you lost the game\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006637785866248643,
      "p_css": 0.0398149375020453,
      "p_html": 0.011880125668082695,
      "p_java": 0.0005941833079068171,
      "p_javascript": 0.003442382815287019,
      "p_matlab": 0.002941800331806989,
      "p_python": 0.6070128350216325,
      "p_sql": 0.17031811714026834,
      "p_typescript": 0.15735783234672174
    },
    {
      "text": "command = input(\"Please enter your command: \")\n \nif command == \"Taking a break\":\n print(\"Taking a five minute break\")\n # code to execute the taking a break command\nelse:\n print(\"Invalid command\")",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.017997057771341193,
      "p_css": 0.02042548578583523,
      "p_html": 0.01598811732375864,
      "p_java": 0.000607079163401874,
      "p_javascript": 0.011658853689689507,
      "p_matlab": 0.008898068931735352,
      "p_python": 0.18747875598826844,
      "p_sql": 0.024835911853714542,
      "p_typescript": 0.7121106694922552
    },
    {
      "text": "def calculateMedian(numbers):\n    n = len(numbers)\n    if n % 2 == 0:\n        num1 = numbers[n//2]\n        num2 = numbers[n//2 - 1]\n        median = (num1 + num2)/2\n    else: \n        median = numbers[n//2]\n    return median\n        \nnumbers = [2, 4, 3, 5, 7]\nmedian = calculateMedian(numbers)\nprint(\"Median of list is:\", median)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00010792450244191513,
      "p_css": 0.0004570955554439391,
      "p_html": 0.0006207035776234196,
      "p_java": 0.18660978793431734,
      "p_javascript": 0.010089977172473865,
      "p_matlab": 1.7169842853857717e-08,
      "p_python": 0.8014222946142324,
      "p_sql": 0.00043794772710017906,
      "p_typescript": 0.00025425174652400645
    },
    {
      "text": "def compress(s): \n    # Initialize results \n    output = \"\" \n  \n    # Initialize count \n    count = 1\n  \n    # Traverse the string \n    for i in range(len(s)): \n          \n        # If the current character is same \n        # as next one, increment its count \n        if (i+1 < len(s) and s[i] == s[i+1]): \n            count += 1\n          \n        else: \n            # Append the count and character \n            outputo + = str(count) + s[i] \n          \n            # Reset the  count  \n            count = 1\n          \n    # Append the last obtained characters \n    # and their count \n    output += str(count) + s[i] \n  \n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))\n# Output: 2a6b4c",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012777361934117818,
      "p_css": 0.006612951804620827,
      "p_html": 0.0010858728648791506,
      "p_java": 9.160669008546866e-05,
      "p_javascript": 6.293053493203187e-05,
      "p_matlab": 0.0007474360231482855,
      "p_python": 0.9768454563691711,
      "p_sql": 0.002506496620212229,
      "p_typescript": 0.010769512899539218
    },
    {
      "text": "import numpy as np\n\ndef detect_outliers(data):\n q75, q25 = np.percentile(data, [75 ,25])\n iqr = q75 - q25\n \n cut_off = iqr * 1.5\n lower, upper = q25 - cut_off, q75 + cut_off\n \n outliers = [x for x in data if x < lower or x > upper]\n return outliers",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009970211040931942,
      "p_css": 0.040617640213954836,
      "p_html": 0.04189552455351211,
      "p_java": 0.00035133453008849927,
      "p_javascript": 0.0010244407680204282,
      "p_matlab": 0.013716391063355513,
      "p_python": 0.8576237048260776,
      "p_sql": 0.0015603595271463876,
      "p_typescript": 0.033240393476912655
    },
    {
      "text": "a, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.9656415838442685e-12,
      "p_css": 9.24345959966392e-13,
      "p_html": 1.3906781818842273e-10,
      "p_java": 2.382126516031233e-13,
      "p_javascript": 1.6979731962244342e-13,
      "p_matlab": 0.9998352021961047,
      "p_python": 0.00016479765204655716,
      "p_sql": 3.2524040295583e-14,
      "p_typescript": 5.450371823541461e-12
    },
    {
      "text": "num = int(input('Enter an integer: '))\nfactorial = 1\n\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1,num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\",num,\"is\",factorial)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.000598234842124226,
      "p_css": 2.1781944431174234e-06,
      "p_html": 0.0009366526453013412,
      "p_java": 0.0008022891640404109,
      "p_javascript": 0.0021235654836631573,
      "p_matlab": 0.5170768067804323,
      "p_python": 0.4737575994402147,
      "p_sql": 0.0005965061031655568,
      "p_typescript": 0.004106167346614994
    },
    {
      "text": "class NaiveBayesClassifier:\n    \"\"\"\n    A simple Naive Bayes classifier implementation\n    \"\"\"\n    def __init__(self):\n        self.classes = []\n        self.word_counts = {}\n        self.priors = {}\n\n    def fit(self, X, y):\n        \"\"\"\n        Train the classifier \n        X: List of documents\n        y: List of labels\n        \"\"\"\n        # compute class priors\n        self.classes = list(set(y))\n        for c in self.classes:\n            self.priors[c] = (y.count(c) / len(y))\n\n        # compute count of words\n        for x, c in zip(X, y):\n            words = x.split()\n            for word in words:\n                if (c, word) not in self.word_counts:\n                    self.word_counts[(c, word)] = 0\n                self.word_counts[(c, word)] += 1\n\n    def predict(self, X):\n        \"\"\"\n        Predict classes for a list of documents\n        X: List of documents\n        \"\"\"\n        pred_y = []\n        for x in X:\n            pred_classes = []\n            # compute posterior for each class\n            for c in self.classes:\n                posterior = self.priors[c]\n                for word in  x.split():\n                    if (c, word) not in self.word_counts:\n                        count = 0\n                    else:\n                        count = self.word_counts[(c, word)]\n                    posterior *= (count + 1) / (sum([self.word_counts[(c, w)] for w in self.word_counts if w[0] == c]) +  len(self.word_counts))\n                pred_classes.append((c, posterior))\n            # select the most probable class\n            p = max(pred_classes, key=lambda x: x[1])\n            pred_y.append(p[0])\n\n        return pred_y",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0001213456343178834,
      "p_css": 0.004253113760437085,
      "p_html": 0.00897961934035174,
      "p_java": 1.1681656622069251e-06,
      "p_javascript": 0.00012122937354244898,
      "p_matlab": 0.003489871225924185,
      "p_python": 0.06453179829978138,
      "p_sql": 0.918026122145859,
      "p_typescript": 0.0004757320541240358
    },
    {
      "text": "import unittest \n\nclass TestMyClassOrFunction(unittest.TestCase):\n\n    def test_something(self):\n        # Setup \n        # Code to set up a value to test \n        \n        # Exercise \n        # Code for the function to test \n        result = function_to_test(*args) \n        \n        # Verify\n        self.assertEqual(result, expected_result) \n\nif __name__ == \"__main__\":\n    unittest.main()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.004462756812284742,
      "p_css": 0.0033494356671529457,
      "p_html": 0.0021719069575045335,
      "p_java": 8.218077968408882e-05,
      "p_javascript": 0.07614176477701741,
      "p_matlab": 9.988356374367406e-05,
      "p_python": 0.0012294890616563617,
      "p_sql": 0.04289356935516644,
      "p_typescript": 0.8695690130257899
    },
    {
      "text": "def compute_sum(array):\n    sum = 0\n    for element in array:\n        sum += element\n    return sum\n    \nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(compute_sum(array))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.6550840548487892e-07,
      "p_css": 7.538440434030814e-08,
      "p_html": 7.866666473612948e-08,
      "p_java": 9.872342607086125e-08,
      "p_javascript": 1.2730271941656383e-08,
      "p_matlab": 0.9999995158637155,
      "p_python": 1.8429856882782844e-08,
      "p_sql": 4.121571737013829e-10,
      "p_typescript": 3.4281097830865195e-08
    },
    {
      "text": "import random\n\n# Create the list of possible values\ncards = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"] * 4\n\n# Shuffle the cards\nrandom.shuffle(cards)\n\n# Create a variable to store the user's score\nuser_score = 0\n\n# Initialize the game\n# The user is shown a card, and asked if they remember what it is\nwhile cards:\n    current_card = cards.pop()\n    print(f\"What is the card? {current_card}\")\n    answer = input()\n\n    # Check the user's answer\n    if answer == current_card:\n        user_score += 1\n        print(\"Correct!\")\n    else:\n        print(\"Incorrect.\")\n        break\n\nprint(f\"Game over! Your score is {user_score}\")",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00028583438549012886,
      "p_css": 0.01744633253194607,
      "p_html": 0.0005990313708738247,
      "p_java": 1.4164164584060785e-05,
      "p_javascript": 0.006661053620531078,
      "p_matlab": 7.229242200279997e-05,
      "p_python": 0.010801349144831964,
      "p_sql": 0.007078840587493763,
      "p_typescript": 0.9570411017722462
    },
    {
      "text": "import random\n\n# Create a list of 10 random numbers between 0 and 100\nrandom_list = []\nfor i in range(10):\n    random_list.append(random.randint(0,100))\n\n# Print the list\nprint(random_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003282019803220697,
      "p_css": 0.0012050692717970235,
      "p_html": 0.0011060466267567742,
      "p_java": 5.537853070294666e-05,
      "p_javascript": 0.0015951749709240725,
      "p_matlab": 0.021156057330749756,
      "p_python": 0.9661234548010983,
      "p_sql": 0.0027771667949469097,
      "p_typescript": 0.005653449692702287
    },
    {
      "text": "import os\nimport dialogflow_v2 as dialogflow\nfrom google.api_core.exceptions import InvalidArgument\n\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = 'PATH_TO_CREDENTIALS_FILE'\n\nDIALOGFLOW_PROJECT_ID = 'YOUR_PROJECT_ID'\nDIALOGFLOW_LANGUAGE_CODE = 'en-us'\nGOOGLE_APPLICATION_CREDENTIALS = 'PATH_TO_CREDENTIALS_FILE'\nSESSION_ID = 'current-user-id'\n\ndef detect_intent_from_text(text, session_id, language_code=DIALOGFLOW_LANGUAGE_CODE):\n session_client = dialogflow.SessionsClient()\n session = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id)\n text_input = dialogflow.types.TextInput(text=text, language_code=language_code)\n query_input = dialogflow.types.QueryInput(text=text_input)\n try:\n response = session_client.detect_intent(session=session, query_input=query_input)\n return response.query_result\n except InvalidArgument:\n raise\n\n# Create an intent in DialogFlow    \ndef intent_create():\n intents_client = dialogflow.IntentsClient()\n parent = intents_client.project_agent_path(DIALOGFLOW_PROJECT_ID)\n training_phrases = [\n dialogflow.types.Intent.TrainingPhrase(parts=[\n dialogflow.types.Intent.TrainingPhrase.Part(text='What is the weather like?'),\n ]),\n]\n\nmessage_text = dialogflow.types.Intent.Message.Text(text=['That\\'s a great question!'])\n\nresponse = intents_client.create_intent(\n parent,\n intent_name='[INTENT_NAME]',\n training_phrases=training_phrases,\n message=message_text\n).per_response\n\n# Retrieve a response to a user's query\nquery = 'What is the weather like in London?'\nresponse = detect_intent_from_text(query, SESSION_ID)\nprint('Query text: {}'.format(response.query_text))\nprint('Detected intent: {} (confidence: {})\\n'.format(\n response.intent.display_name, response.intent_detection_confidence))\nprint('Fulfillment text: {}'.format(response.fulfillment_text))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0015887049860682104,
      "p_css": 0.8036167764122348,
      "p_html": 0.0059905637934167325,
      "p_java": 4.537928658042747e-05,
      "p_javascript": 0.0009865033958981998,
      "p_matlab": 0.00037125954153250995,
      "p_python": 0.12004872528097069,
      "p_sql": 0.005601266126463424,
      "p_typescript": 0.061750821176835086
    },
    {
      "text": "import smtplib\n\ndef send_notification(email):\n    '''This function will send automated email notifications to customers when their orders have been delivered'''\n    sender = eamil@example.com\n    receiver = email\n    message = f\"Your order has been delivered. Thank you for choosing us. \"\n    try:\n        smtpObj = smtplib.SMTP('smtp.example.com', 587)\n        smtpObj.login('email@example.com', 'password')\n        smtpObj.sendmail(sender, receiver, message)\n        print('Notification sent successfully')\n    except Exception as e:\n        print('Could not send notification.')\n        print(e)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 8.364354147536992e-11,
      "p_css": 0.0011777054777910047,
      "p_html": 0.00048683226863123887,
      "p_java": 0.9972336577651273,
      "p_javascript": 2.6441079211774787e-05,
      "p_matlab": 6.85246190428013e-07,
      "p_python": 0.0009706402025634963,
      "p_sql": 6.838548933008225e-05,
      "p_typescript": 3.565238751099276e-05
    },
    {
      "text": "list.insert(index, item)",
      "y_true": "sql",
      "pred_label": "html",
      "p_bash": 0.02452954658066661,
      "p_css": 0.004235889170591528,
      "p_html": 0.45024822378621326,
      "p_java": 0.0005390051769351086,
      "p_javascript": 0.3024453284704353,
      "p_matlab": 0.006758316609003059,
      "p_python": 0.17139531058346502,
      "p_sql": 0.037177844942121493,
      "p_typescript": 0.0026705346805686214
    },
    {
      "text": "import random\n\ndef randomize(arr):\n  random.shuffle(arr)\n  return arr",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00014490337435534055,
      "p_css": 0.0004534344751566172,
      "p_html": 0.00010404856261012425,
      "p_java": 9.34870142859301e-06,
      "p_javascript": 3.9162549585602066e-05,
      "p_matlab": 0.0032182702966877816,
      "p_python": 0.9952592358440391,
      "p_sql": 0.0007056574006774588,
      "p_typescript": 6.593879545950213e-05
    },
    {
      "text": "class Queue(object):\n def __init__(self):\n  self.items = []\n\n def isEmpty(self):\n  return self.items == []\n\n def enqueue(self, item):\n  self.items.insert(0, item)\n\n def dequeue(self):\n  return self.items.pop()\n\n def size(self):\n  return len(self.items)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 1.0018344262296111e-05,
      "p_css": 0.0030634077270092477,
      "p_html": 0.0169452433209369,
      "p_java": 9.167122720492585e-07,
      "p_javascript": 0.00011039916967872932,
      "p_matlab": 1.0644627805918648e-07,
      "p_python": 0.5055926199936236,
      "p_sql": 0.47427219295859996,
      "p_typescript": 5.095327339236724e-06
    },
    {
      "text": "def remove(arr, index): \n  \n      # If the array is empty or index is not in array range \n      if len(arr) == 0 or index >= len(arr): \n          return arr \n  \n      # Remove the element from the array \n      tempArr = arr[:index] + arr[index+1:] \n              \n      return tempArr",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0042118785180832756,
      "p_css": 2.0581289610905656e-05,
      "p_html": 0.0001328771576611119,
      "p_java": 1.649438648157808e-06,
      "p_javascript": 0.000472177120848945,
      "p_matlab": 0.9932762962035154,
      "p_python": 0.0016332443322981704,
      "p_sql": 2.274075483896615e-07,
      "p_typescript": 0.000251068531785672
    },
    {
      "text": "# Function to find the maximum element in an array of integers\ndef findMax(arr): \n    maxEle = arr[0] \n    \n    # Iterate through the array and find the maximum element \n    for i in range(1, len(arr)): \n        if arr[i] > maxEle: \n            maxEle = arr[i] \n    \n    return maxEle \n\n# Driver code \narr = [3, 17, 5, 19, 10] \nmaxEle = findMax(arr) \n\nprint(\"The maximum element in the given array is:\", maxEle)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.971586911842819e-07,
      "p_css": 4.2324483938591075e-07,
      "p_html": 9.882937467199229e-08,
      "p_java": 2.2789026980862894e-08,
      "p_javascript": 1.8776895335060206e-05,
      "p_matlab": 0.9994328371436585,
      "p_python": 0.00046671284093930575,
      "p_sql": 1.1229466002736221e-09,
      "p_typescript": 8.072997518822193e-05
    },
    {
      "text": "def count_occurrence(string, character):\n    count = 0\n    for c in string:\n        if c == character:\n            count += 1\n    return count",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.2611449602306565e-08,
      "p_css": 0.0007481656200764659,
      "p_html": 6.716691190343234e-05,
      "p_java": 0.6139703546953383,
      "p_javascript": 2.6189571073524277e-09,
      "p_matlab": 0.00016236462869136974,
      "p_python": 0.38304496136626376,
      "p_sql": 0.00198619209491686,
      "p_typescript": 2.0749452403118474e-05
    },
    {
      "text": "import random\n\ndef generate_array_with_random_numbers(n, seed):\n random.seed(seed)\n return [random.randint(0, 100) for _ in range(n)]\n\nn = 10\nseed = 42\narray = generate_array_with_random_numbers(n, seed)\n\nprint(array)\n# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.03248397613781814,
      "p_css": 0.004285380152616963,
      "p_html": 0.004157376701004641,
      "p_java": 8.546684795727147e-05,
      "p_javascript": 0.0004996656448538892,
      "p_matlab": 0.8068804796153816,
      "p_python": 0.14926713677342318,
      "p_sql": 0.0015587790319951023,
      "p_typescript": 0.0007817390949491352
    },
    {
      "text": "dict1 = dict(zip(list1, list2)) \nprint(dict1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009033189367888882,
      "p_css": 0.4317393589368679,
      "p_html": 0.004915804637479979,
      "p_java": 0.0004601253537106058,
      "p_javascript": 0.0015753607607383502,
      "p_matlab": 0.0009325669763147253,
      "p_python": 0.5546655329610309,
      "p_sql": 0.001472813435495972,
      "p_typescript": 0.0033351180015727304
    },
    {
      "text": "if __name__ == '__main__':\n    print('Hello World')",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9962500950842663,
      "p_css": 2.18631934676316e-06,
      "p_html": 7.361330812739089e-06,
      "p_java": 2.456318576840611e-22,
      "p_javascript": 0.0004369962072408918,
      "p_matlab": 3.4494407654652157e-07,
      "p_python": 0.0033022283711080075,
      "p_sql": 7.10024410302372e-07,
      "p_typescript": 7.77187383485439e-08
    },
    {
      "text": "# Function to find the maximum and minimum of a list\ndef find_max_min(nums):\n    max = nums[0]\n    min = nums[0]\n    for num in nums:\n        if num > max:\n            max = num\n        if num < min:\n            min = num\n    return (max, min)\n\n# Test program\nnums = [3, 2, 8, 9, 5]\nmax, min = find_max_min(nums)\nprint('Maximum:', max)\nprint('Minimum:', min)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0006136728249913897,
      "p_css": 3.044364892796159e-06,
      "p_html": 0.0003517773325610808,
      "p_java": 7.117840525587166e-06,
      "p_javascript": 0.004268360958604456,
      "p_matlab": 0.6507202399072607,
      "p_python": 0.342941834247208,
      "p_sql": 0.0006855773013206486,
      "p_typescript": 0.00040837522263530043
    },
    {
      "text": "# Print pattern\nfor i in range(1, 6):\n for j in range(0, i):\n print(\"* \", end=\"\")\n print()\n\n# Output\n# * \n# * * \n# * * * \n# * * * * \n# * * * * *",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.8839782143518557e-07,
      "p_css": 1.6336540151585415e-08,
      "p_html": 3.1788574678114827e-06,
      "p_java": 1.48661634821714e-09,
      "p_javascript": 2.4527168566445905e-09,
      "p_matlab": 0.03160699911245188,
      "p_python": 0.9683890832433671,
      "p_sql": 4.2302128208998987e-07,
      "p_typescript": 7.091736261964282e-09
    },
    {
      "text": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/users', methods=['GET', 'POST'])\ndef user_data():\n if request.method == 'GET':\n # Retrieve user data from the database\n return jsonify({'users': []})\n\n if request.method == 'POST':\n # Store user data in the database\n return jsonify({'message': 'success'})\n\nif __name__ == '__main__':\n app.run(debug=True)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.024531496540267674,
      "p_css": 0.9685088351400659,
      "p_html": 0.00011353141481657838,
      "p_java": 1.5114860141901948e-05,
      "p_javascript": 0.00018820816224779317,
      "p_matlab": 6.850934218625486e-06,
      "p_python": 0.0017775645052969758,
      "p_sql": 0.004562730588897505,
      "p_typescript": 0.0002956678540471436
    },
    {
      "text": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, Dense, LSTM\n\n# For text data preprocessing\nfrom keras.preprocessing.text import Tokenizer\n\n# For splitting the data into train, test and validation sets\nfrom sklearn.model_selection import train_test_split\n\n# Initialize the tokenizer \ntokenizer = Tokenizer(num_words=None, lower=True)\n\n# Tokenize the text data\ntokenizer.fit_on_texts(tweets_data)\n\n# Generate sequence data\nsequences = tokenizer.texts_to_sequences(tweets_data)\n\n# Get the max_length of the sequences\nmax_length = max([len(seq) for seq in sequences])\n\n# Pad sequences\npadded_seq = pad_sequences(sequences, maxlen=max_length, padding='post')\n\n# Split data into train, test and validation sets\nX_train, X_test, y_train, y_test = train_test_split(padded_seq, \n                                                    target, \n                                                    test_size=0.2,\n                                                    random_state=42)\n\n# Define the model\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 64, input_length=max_length))\nmodel.add(LSTM(64))\nmodel.add(Dense(vocab_size, activation='softmax'))\n\n# Compile and fit the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, validation_data=(X_test,y_test))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.5551601336476184,
      "p_css": 0.03152442575815441,
      "p_html": 0.01252672897499837,
      "p_java": 3.1467374735136946e-05,
      "p_javascript": 9.213033266929504e-05,
      "p_matlab": 3.268094426416356e-06,
      "p_python": 0.21750487207876085,
      "p_sql": 2.9875971457988476e-05,
      "p_typescript": 0.18312709776717906
    },
    {
      "text": "def convertFahrenheitToCelsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    print(\"{}°F is {}°C\".format(fahrenheit,celsius))\n\nconvertFahrenheitToCelsius(100)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.09230633605017032,
      "p_css": 0.136345567216466,
      "p_html": 0.023342928229449365,
      "p_java": 0.0033719345668389213,
      "p_javascript": 0.03312817800845039,
      "p_matlab": 0.007854577737423318,
      "p_python": 0.6683261440117707,
      "p_sql": 0.0051195362439145535,
      "p_typescript": 0.030204797935516357
    },
    {
      "text": "from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<div>\n\t<p>This is some text.</p>\n\t<p>This is another text.</p>\n\t<div>\n\t\t<span>Some more text.</span>\n\t</div>\n</div>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc)\n\ntext = soup.get_text()\n\n# Output\n# This is some text.\n# This is another text.\n# Some more text.",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 2.1840549597113427e-06,
      "p_css": 2.3883587622297376e-07,
      "p_html": 0.999947245743569,
      "p_java": 1.2598396510933764e-06,
      "p_javascript": 2.2200012082132586e-07,
      "p_matlab": 6.107674880617278e-08,
      "p_python": 4.944609329384217e-06,
      "p_sql": 2.7367897398635767e-06,
      "p_typescript": 4.110705000511729e-05
    },
    {
      "text": "def split_equal_sum(arr):\n    n = len(arr) \n    leftsum = 0\n    rightsum = sum(arr)\n    \n    for i in range(n): \n        rightsum -= arr[i]\n        if leftsum == rightsum:\n            return True \n        leftsum += arr[i] \n    return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2582259802424898e-09,
      "p_css": 1.615075815092493e-09,
      "p_html": 4.061083732502095e-09,
      "p_java": 8.955425116987008e-10,
      "p_javascript": 7.427893221852992e-11,
      "p_matlab": 0.9992718551176172,
      "p_python": 0.0007281364422911929,
      "p_sql": 1.99167307555348e-11,
      "p_typescript": 5.159680233507203e-10
    },
    {
      "text": "class Phone:\n  def __init__(self, name):\n    self.name = name\n    self.owner = None\n\n  def assign_owner(self, owner):\n    self.owner = owner\n\n  def use(self):\n    print(f\"{self.owner.name} is using {self.name}\")\n\nclass Person:\n  def __init__(self, name):\n    self.name = name\n    self.phone = None\n\n  def assign_phone(self, phone):\n    self.phone = phone\n    self.phone.owner = self\n\n  def use_phone(self):\n    if self.phone is not None:\n      self.phone.use()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008419272153748146,
      "p_css": 0.011216519660548055,
      "p_html": 0.06310776758535382,
      "p_java": 0.035332392586895876,
      "p_javascript": 4.333319693604674e-06,
      "p_matlab": 1.840539264788153e-05,
      "p_python": 0.7643788105444161,
      "p_sql": 0.12419472816217882,
      "p_typescript": 0.0009051155328907884
    },
    {
      "text": "#!/usr/bin/env python\n# coding: utf-8\nimport os\nimport re\nimport requests\n\nfrom datetime import datetime\nfrom bs4 import BeautifulSoup\nfrom logya.core import Logya\nfrom logya.path import slugify, target_file\nfrom logya.writer import encode_content, write\n\n\nlogya = Logya()\nlogya.init_env()\n\nurl = 'https://en.wikipedia.org/wiki/Bodyweight_exercise'\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'lxml')\n\nreplacements = {\n    'bams': 'bam',\n    'bodybuilders': 'bodybuilder',\n    'boots': 'boot',\n    'chairs': 'chair',\n    'climbers': 'climber',\n    'crosses': 'cross',\n    'curls': 'curl',\n    'darlings': 'darling',\n    'dips': 'dip',\n    'dogs': 'dog',\n    'extensions': 'extension',\n    'humpers': 'humper',\n    'ins': 'in',\n    'kicks': 'kick',\n    'knives': 'knife',\n    'lifts': 'lift',\n    'little piggies': '3 little pigs',\n    'lunges': 'lunge',\n    'maybes': 'maybe',\n    'mikes': 'mike',\n    'mornings': 'morning',\n    'offs': 'off',\n    'plunges': 'plunge',\n    'push exercises': 'push',\n    'raises': 'raise',\n    'rotations': 'rotation',\n    'scissors': 'scissor',\n    'spidermans': 'spiderman',\n    'supermans': 'superman',\n    'swimmers': 'swimmer',\n    'squats': 'squat',\n    'ups': 'up'\n}\n\nresources = '## Resources\\n\\n* [Wikipedia: Bodyweight exercise]({})'.format(url)\n\n\ndef canonical_name(name):\n    name = name.strip().lower()\n    if name.startswith('full body'):\n        return ''\n\n    for source, target in replacements.items():\n        name = re.sub(r'\\b{}\\b'.format(source), target, name)\n    return name.title()\n\n\ndef clean_text(text):\n    return text.replace('[citation needed]', '').strip()\n\n\n# Only interested in TOC numbers 4 to 8.\ntocnumbers = range(4, 9)\n\ntoc1_items = soup.find(id='toc').find_all(class_='toclevel-1')\ngroups = [i for i in toc1_items if int(i.find('a').find(class_='tocnumber').text) in tocnumbers]\n\nassert len(groups) == len(tocnumbers)\n\n# Assemble exercise documents\nfor group in groups:\n    group_name = group.find('a').find(class_='toctext').text.strip()\n    for item in group.find('ul').find_all('a'):\n        href = item.attrs['href']\n        heading = soup.find(id=href.lstrip('#')).parent\n        name = canonical_name(item.find(class_='toctext').text)\n        groups = [canonical_name(group_name)]\n        body = []\n        variants = []\n        muscles = []\n\n        for sibling in heading.find_next_siblings():\n            if sibling.name == 'p':\n                body.append(clean_text(sibling.text))\n            elif sibling.name == 'dl':\n                dth = sibling.find('dt').text.strip().lower()\n                if dth == 'common variants':\n                    variants = list(filter(None, [canonical_name(i.text) for i in sibling.find_all('dd') if i.text != 'none']))\n                elif dth == 'muscle groups':\n                    muscles = list(filter(None, [canonical_name(i.text) for i in sibling.find_all('dd')]))\n            elif sibling.name == 'h3':\n                break\n\n        if body:\n            body.append(resources)\n\n        doc = {\n            'created': datetime.now(),\n            'description': body[0].split('. ')[0] + '.',\n            'groups': groups,\n            'muscles': muscles,\n            'template': 'exercise.html',\n            'title': name,\n            'variants': variants\n        }\n        # Files shall be saved as md files, so calling write_content directly\n        # is not possible as it would save as html.\n        filename = target_file(logya.dir_content, '/exercise/{}.md'.format(slugify(name)))\n        if not os.path.exists(filename):\n            write(filename, encode_content(doc, '\\n\\n'.join(body)))\n\n        # Create stub files for variants\n        for variant in variants:\n            filename = target_file(logya.dir_content, '/exercise/{}.md'.format(slugify(variant)))\n            if not os.path.exists(filename):\n                ex_variants = list(set(variants).union(set([name])).difference(set([variant])))\n                doc = {\n                    'created': datetime.now(),\n                    'description': '',\n                    'groups': groups,\n                    'muscles': muscles,\n                    'template': 'exercise.html',\n                    'title': variant,\n                    'variants': ex_variants\n                }\n                write(filename, encode_content(doc, ''))\n\n\n        # Create stub files for muscles\n        for muscle in muscles:\n            filename = target_file(logya.dir_content, '/muscle/{}.md'.format(slugify(muscle)))\n            if not os.path.exists(filename):\n                doc = {\n                    'created': datetime.now(),\n                    'description': '',\n                    'template': 'muscle.html',\n                    'title': muscle\n                }\n                write(filename, encode_content(doc, ''))",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 6.833569889516409e-07,
      "p_css": 0.0017510701353174118,
      "p_html": 0.9980150954267972,
      "p_java": 0.00018864967684297573,
      "p_javascript": 3.4927447432918907e-09,
      "p_matlab": 3.6655435593292803e-06,
      "p_python": 6.436563841383393e-06,
      "p_sql": 1.80697140161385e-05,
      "p_typescript": 1.6326089891886465e-05
    },
    {
      "text": "def getAscii(string):\n    result = []\n    for char in string:\n        result.append(ord(char))\n    return result\n\nprint(getAscii('Hello'))\n# Output: [72, 101, 108, 108, 111]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.9579345737583706e-05,
      "p_css": 0.005492985092094775,
      "p_html": 0.001502437825265456,
      "p_java": 0.0071769538167882445,
      "p_javascript": 4.074009994008229e-06,
      "p_matlab": 0.008687466691273831,
      "p_python": 0.9696215362761267,
      "p_sql": 0.00736813611519139,
      "p_typescript": 0.00010683082752828799
    },
    {
      "text": "total_age = 0\n\n# open and read the file\nwith open('student.csv', 'r') as f:\n    # read the file\n    data = f.read().splitlines()\n\n# loop through the rows\nfor row in data:\n    # get the age from each row\n    age = row.split(',')[1]\n    # add the age to the total\n    total_age = total_age + int(age)\n\n# calculate the average age of all the students\navg_age = total_age / len(data)\n\n# print the result\nprint('Average age of all students is: ', avg_age)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0019094143748259842,
      "p_css": 0.2199254957717763,
      "p_html": 0.0014408767766380802,
      "p_java": 4.535941716740945e-05,
      "p_javascript": 0.010008111961652369,
      "p_matlab": 4.6699203835325907e-07,
      "p_python": 0.1052203226574876,
      "p_sql": 0.0046209736487520334,
      "p_typescript": 0.6568289783996618
    },
    {
      "text": "from datetime import date\n\ndef format_date(date_str, start_format, end_format):\n    date_obj = date.strptime(date_str, start_format)\n    return date_obj.strftime(end_format)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011028566431659281,
      "p_css": 0.04944136734017324,
      "p_html": 0.005641904561507159,
      "p_java": 0.0005235302179548388,
      "p_javascript": 0.0018045907700653026,
      "p_matlab": 0.0009431466487186275,
      "p_python": 0.9266300776439811,
      "p_sql": 0.001409421828523696,
      "p_typescript": 0.002577394557416732
    },
    {
      "text": "def print_first_word(sentence):\n    words = sentence.split(' ')\n    print(words[0])\n\nsentence = \"Hello, World!\"\nprint_first_word(sentence)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06796978293850406,
      "p_css": 0.002269679921535004,
      "p_html": 0.008488598957643501,
      "p_java": 6.1601077837099885e-12,
      "p_javascript": 0.003943150410427541,
      "p_matlab": 4.919736666122975e-06,
      "p_python": 0.8581890100888865,
      "p_sql": 0.059128823216010484,
      "p_typescript": 6.034724166791197e-06
    },
    {
      "text": "from collections import Counter\n\ndef count_letters(string):\n    return Counter(string)\n\nprint(count_letters(\"This is a sample string\"))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.595205690960315e-10,
      "p_css": 5.179656689272516e-06,
      "p_html": 1.1184217182856426e-06,
      "p_java": 0.9984958971069311,
      "p_javascript": 1.2473877071118554e-12,
      "p_matlab": 1.4224953547344414e-09,
      "p_python": 0.0014779847309922371,
      "p_sql": 1.9660221359612824e-05,
      "p_typescript": 1.5817904624706867e-07
    },
    {
      "text": "import random \nimport string \n\nlength = 8\nrandom_str = ''.join(random.choices(string.ascii_letters + string.digits, k = length)) \nprint(random_str)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.878177262152469e-10,
      "p_css": 9.673391349280833e-07,
      "p_html": 2.5955514898825367e-07,
      "p_java": 0.009705036492466252,
      "p_javascript": 1.1173670587437645e-10,
      "p_matlab": 1.4106817929105856e-09,
      "p_python": 3.518160520175747e-05,
      "p_sql": 0.9902585157689787,
      "p_typescript": 3.7428833197699515e-08
    },
    {
      "text": "def int_to_binary(n):\n    \"\"\" Returns the binary representation of an integer. \"\"\"\n    return \"{0:b}\".format(n)",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.005292492206294874,
      "p_css": 0.0030655184078840687,
      "p_html": 0.010234025727225704,
      "p_java": 0.000297900881559367,
      "p_javascript": 0.21435203717727458,
      "p_matlab": 0.0004942727626518655,
      "p_python": 0.3167886888420554,
      "p_sql": 4.2511975321683266e-05,
      "p_typescript": 0.4494325520197323
    },
    {
      "text": "# Merge two sorted lists\ndef merge_sorted_lists(lst1, lst2):\n    i,j = 0, 0\n    merged_list = []\n    \n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n            \n    merged_list += lst1[i:]\n    merged_list += lst2[j:]\n    \n    return merged_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.012634353271971089,
      "p_css": 0.04313113635513081,
      "p_html": 0.033044819696540925,
      "p_java": 0.013268429294497107,
      "p_javascript": 0.005947147116958354,
      "p_matlab": 0.03924007526487712,
      "p_python": 0.7892425921338653,
      "p_sql": 0.005851542272759992,
      "p_typescript": 0.057639904593399176
    },
    {
      "text": "from flask import Flask, request\nimport json\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=['POST'])\ndef calc_sum_average():\n  json_data = request.get_json()\n  numbers = json_data.get('numbers')\n  sum = 0\n  for x in numbers:\n    sum += x\n\n  average = sum / float(len(numbers))\n  result = {'sum' :sum, 'average': average}\n  return json.dumps(result)\n  \nif __name__ == '__main__':\n  app.run(debug=True)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0012815551628769571,
      "p_css": 0.9593475643116948,
      "p_html": 0.0011304445756254026,
      "p_java": 0.008443824349855503,
      "p_javascript": 0.00010353039086728298,
      "p_matlab": 1.6525210997680052e-06,
      "p_python": 0.027396106816305128,
      "p_sql": 0.0022744762491819144,
      "p_typescript": 2.0845622493411202e-05
    },
    {
      "text": "class AddressBook:\n def __init__(self):\n self.people = {}\n\n def add_person(self, name):\n self.people[name] = { 'phone': None, 'email': None }\n \n def edit_person(self, name, phone=None, email=None):\n person = self.people[name]\n if phone: \n person['phone'] = phone\n if email:\n person['email'] = email",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0010392763679622,
      "p_css": 0.03397936906496706,
      "p_html": 0.019145604142923427,
      "p_java": 0.007782815586309417,
      "p_javascript": 1.3555812873849817e-05,
      "p_matlab": 0.00015192805394943917,
      "p_python": 0.9070139851055675,
      "p_sql": 0.0303461791348271,
      "p_typescript": 0.0005272867306200633
    },
    {
      "text": "def findElement(arr, element):\n    for i in range(0, len(arr)):\n        if arr[i] == element:\n            return True\n    return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.5999688972561475e-10,
      "p_css": 9.210667693301597e-11,
      "p_html": 2.0288868310798063e-10,
      "p_java": 1.8421678421922547e-11,
      "p_javascript": 9.018286705668421e-12,
      "p_matlab": 0.9999402643217602,
      "p_python": 5.973512212170753e-05,
      "p_sql": 2.8395345122963494e-14,
      "p_typescript": 7.365745460293183e-11
    },
    {
      "text": "def generate_combinations(nums): \n    result = [] \n    for x in range(0, len(nums)): \n        for y in range(x + 1, len(nums)): \n            result.append([nums[x], nums[y]]) \n    return result \n\nnums = [1, 2, 3, 4]\n\nresult = generate_combinations(nums)\n\nfor item in result:\n    print(item)\n\n# output\n[1, 2]\n[1, 3]\n[1, 4]\n[2, 3]\n[2, 4]\n[3, 4]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.8410580113748904e-07,
      "p_css": 1.213257489042723e-05,
      "p_html": 3.534158902868612e-06,
      "p_java": 1.7712563322387583e-08,
      "p_javascript": 3.597648378073266e-07,
      "p_matlab": 1.0017435403150992e-05,
      "p_python": 0.999968694798983,
      "p_sql": 4.735478652997506e-06,
      "p_typescript": 1.2396996526104742e-07
    },
    {
      "text": "class Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.150304189591136e-05,
      "p_css": 0.010900948788572892,
      "p_html": 0.01123228255946795,
      "p_java": 0.000642127108908551,
      "p_javascript": 1.9467176235536174e-08,
      "p_matlab": 2.1947892092208534e-07,
      "p_python": 0.9735446974148182,
      "p_sql": 0.0036554438722743634,
      "p_typescript": 1.2758267964944954e-05
    },
    {
      "text": "from flask import Flask, render_template\nimport pymysql\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    # Create connection to database\n    connection = pymysql.connect(host='localhost',\n                                 port=3306,\n                                 user='user',\n                                 password='P@ssw0rd',\n                                 db='db')\n    # Get all users from database\n    with connection.cursor() as cursor:\n        query = 'SELECT * FROM users'\n        cursor.execute(query)\n        result = cursor.fetchall()\n    # Close connection\n    connection.close()\n    return render_template('index.html', users=result)\n\nif __name__ == '__main__':\n    app.run(debug=True)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0003152575128511011,
      "p_css": 0.014115726751147927,
      "p_html": 0.021093077492343272,
      "p_java": 1.419349285181248e-06,
      "p_javascript": 5.583872667110543e-05,
      "p_matlab": 7.745593114779268e-06,
      "p_python": 0.003992615600067833,
      "p_sql": 0.9584044659946837,
      "p_typescript": 0.0020138529798352017
    },
    {
      "text": "import scipy.optimize\n\n# define the black box function\ndef black_box(x):\n    return x ** 2 + 40\n\n# set the initial parameters \nstart = (0, 0)\n\n# minimize the black box function\nres = scipy.optimize.minimize(black_box, start, method=\"L-BFGS-B\")\n\n# print the result\nprint(res.x) # prints [0.]",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.005560883166118528,
      "p_css": 0.053820436006243935,
      "p_html": 0.0003932425705860924,
      "p_java": 4.903492406390573e-06,
      "p_javascript": 0.9254462622944846,
      "p_matlab": 1.6809402399796974e-06,
      "p_python": 0.013226817725452884,
      "p_sql": 0.0010837646530583978,
      "p_typescript": 0.0004620091514091398
    },
    {
      "text": "def words_dict(string):\n    \"\"\"This function returns a dictionary with words as keys and their count as values.\"\"\"\n    words = string.split()\n    word_dict = {}\n    \n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else: \n            word_dict[word] = 1\n    \n    return word_dict",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00023309837400137032,
      "p_css": 0.024158286698492785,
      "p_html": 0.1280544105421897,
      "p_java": 0.009333010190143145,
      "p_javascript": 3.1635470545187248e-06,
      "p_matlab": 0.0018301579630340882,
      "p_python": 0.7323175326408845,
      "p_sql": 0.007209198354163384,
      "p_typescript": 0.09686114169003643
    },
    {
      "text": "def binary_search(arr,target):\n  low = 0\n  high = len(arr) - 1\n  while low <= high: \n    mid = (low + high) // 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1\n\narr = [2, 3, 4, 10, 40]\ntarget = 10\nindex = binary_search(arr, target)\nif index != -1: \n    print(\"Element is present at index\", index)\nelse: \n    print(\"Element is not present in the array\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00037392698657502736,
      "p_css": 0.0006268315659877374,
      "p_html": 0.00038480118274611836,
      "p_java": 3.832637765516259e-05,
      "p_javascript": 0.00028001622046522427,
      "p_matlab": 0.11288554049265312,
      "p_python": 0.885173139855298,
      "p_sql": 1.98607345087087e-05,
      "p_typescript": 0.00021755658411070093
    },
    {
      "text": "def hanoi(n, source, spare, target):\n    if n == 1:\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n    else:\n        hanoi(n-1, source, target, spare)\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n        hanoi(n-1, spare, source, target)\n\nn = 8\nsource = [(i, \"A\") for i in range(1, n+1)]\ntarget = []\nspare = []\n\nhanoi(n, source, spare, target)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.005824491522357807,
      "p_css": 0.01683622292379447,
      "p_html": 0.01206177328123781,
      "p_java": 0.0006353898461072168,
      "p_javascript": 0.0022748129970424184,
      "p_matlab": 0.022503058874187024,
      "p_python": 0.9072176951920923,
      "p_sql": 0.023450437117649946,
      "p_typescript": 0.009196118245531164
    },
    {
      "text": "# Python Function\ndef printChars(string): \n    # Iterate over the string \n    for i in range(len(string)):  \n        print(string[i]) \n  \n# Test\nstring = \"Hello World!\"\nprintChars(string)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.327750770642909e-11,
      "p_css": 5.591275045222845e-07,
      "p_html": 9.63796089563555e-07,
      "p_java": 0.9973987732320692,
      "p_javascript": 5.2244493231530744e-14,
      "p_matlab": 2.3439741312089333e-09,
      "p_python": 0.0022548399846454167,
      "p_sql": 0.0003448051012601391,
      "p_typescript": 5.638112714502154e-08
    },
    {
      "text": "def objective_function(x):\n return x**2 + 6*x - 4\n\ndef find_local_minima(func):\n x = 0\n delta = 0.01\n\nwhile True:\n x_new = x + delta\n if objective_function(x_new) < objective_function(x):\n x = x_new\n else:\n return x\n\nprint('The local minima is', find_local_minima(objective_function))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01569336074736946,
      "p_css": 0.026445714667173693,
      "p_html": 0.018125737258636088,
      "p_java": 0.0005926198819792172,
      "p_javascript": 0.0058730744973106794,
      "p_matlab": 0.0065429248941802805,
      "p_python": 0.9097455368607855,
      "p_sql": 0.00642194576294306,
      "p_typescript": 0.010559085429622117
    },
    {
      "text": "import nltk\n\ndef classify_book(title):\n    # Tokenize the words in the title\n    tokens = nltk.word_tokenize(title)\n\n    # Create the tagger\n    pos_tag = nltk.pos_tag(tokens)\n\n    # Check for words that are commonly used in fiction titles\n    fiction_words = [\"Novel\", \"Novella\", \"Mystery\", \"Fantasy\", \"Adventure\", \"Thriller\", \"Paranormal\", \"Romance\"]\n    has_fiction_word = any([word in fiction_words for word in tokens])\n\n    if has_fiction_word:\n        return 'Fiction'\n    else:\n        return 'Non-Fiction'",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.007265046380844347,
      "p_css": 0.041463626532778394,
      "p_html": 0.5293783455243297,
      "p_java": 4.644448142745657e-05,
      "p_javascript": 0.09344019997427701,
      "p_matlab": 0.022072857246428094,
      "p_python": 0.1194537386013498,
      "p_sql": 0.09138784167194958,
      "p_typescript": 0.09549189958661565
    },
    {
      "text": "a = int(input(\"Enter first value: \"))\nb = int(input(\"Enter second value: \"))\nc = int(input(\"Enter third value: \"))\n\naverage = (a + b + c) / 3\nprint(\"The average is: \" + str(average))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.002459350372335725,
      "p_css": 0.0018849477650737972,
      "p_html": 0.0017302643861181466,
      "p_java": 0.9933038403714202,
      "p_javascript": 0.000298725527080009,
      "p_matlab": 1.0370382456352363e-06,
      "p_python": 0.00020390871168548196,
      "p_sql": 7.464366733072327e-05,
      "p_typescript": 4.328216071059069e-05
    },
    {
      "text": "import re\n\ntext = \"The websites I like to visit are https://www.google.com and https://www.facebook.com\"\n\nurl_list = re.findall(r'(https?://\\S+)', text)\n\nprint(url_list)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.2171763941380504e-18,
      "p_css": 2.0186971620780595e-07,
      "p_html": 7.571527308261836e-08,
      "p_java": 0.9999975214757704,
      "p_javascript": 4.23743666756497e-09,
      "p_matlab": 3.278594670198485e-10,
      "p_python": 2.217635276137695e-07,
      "p_sql": 2.3064596051293326e-08,
      "p_typescript": 1.951545820505376e-06
    },
    {
      "text": "def max_min(lst):\n  return max(lst), min(lst)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.21314524383059e-05,
      "p_css": 0.0002123662485634755,
      "p_html": 0.0001195152922868712,
      "p_java": 7.918072606573041e-06,
      "p_javascript": 2.376667684480728e-05,
      "p_matlab": 1.3913963792472072e-06,
      "p_python": 0.9994625558220754,
      "p_sql": 7.63298948500113e-05,
      "p_typescript": 5.402514395522546e-05
    },
    {
      "text": "import json\n\ndata = '{\"type\": \"error\", \"message\": \"An error occurred\"}'\n\njson_data = json.loads(data)\nprint(json_data[\"type\"]) # prints \"error\"\nprint(json_data[\"message\"]) # prints \"An error occurred\"",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.04774105756778218,
      "p_css": 0.17120720378315243,
      "p_html": 0.1419922576121743,
      "p_java": 3.379167444025992e-05,
      "p_javascript": 0.013476958597533156,
      "p_matlab": 0.0018164793593077534,
      "p_python": 0.4892899040392613,
      "p_sql": 0.006223902657619978,
      "p_typescript": 0.1282184447087287
    },
    {
      "text": "import os\n\ndef delete_empty_dirs(path):\n    for root, directories, files in os.walk(path):\n        for directory in directories:\n            joined_path = os.path.join(root, directory)\n            try:\n                os.rmdir(joined_path)\n            except OSError:\n                # Directory not empty\n                pass",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.17476003682990565,
      "p_css": 0.03231968340462647,
      "p_html": 0.003796442107727034,
      "p_java": 4.409024387304334e-06,
      "p_javascript": 0.00081579974116536,
      "p_matlab": 0.006452282321999401,
      "p_python": 0.004928972521741703,
      "p_sql": 0.7725346336747317,
      "p_typescript": 0.004387740373715368
    },
    {
      "text": "def exclude_number(n):\n  return [i for i in range(0,n) if i < n]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.3986317687876747e-10,
      "p_css": 4.2420615375031176e-12,
      "p_html": 1.0324376671032139e-09,
      "p_java": 6.769877311465626e-12,
      "p_javascript": 3.410422369119774e-12,
      "p_matlab": 0.9992483966787893,
      "p_python": 0.0007516009500081156,
      "p_sql": 1.1111634350501675e-09,
      "p_typescript": 7.331587573058824e-11
    },
    {
      "text": "def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1161979201073238e-08,
      "p_css": 1.7421808589737333e-08,
      "p_html": 1.0987936686240079e-08,
      "p_java": 3.384447458173244e-09,
      "p_javascript": 2.512011733088468e-09,
      "p_matlab": 0.9926778070237622,
      "p_python": 0.007322133604364945,
      "p_sql": 8.128048694575268e-10,
      "p_typescript": 1.3090884290128975e-08
    },
    {
      "text": "from sklearn.datasets import load_iris\nfrom sklearn import tree\nimport pandas as pd\n\n# Import dataset\ndata = load_iris()\n\n# Split dataset into features and labels\nX = data.data\ny = data.target\n\n# Train decision tree model\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)\n\n# Make predictions\nprediction = clf.predict(X)\n\n# Print accuracy and confusion matrix\nprint(f'Accuracy: {clf.score(X, y)}')\npd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted'])",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7624410957305188,
      "p_css": 0.09947386632058489,
      "p_html": 0.0007002768203148094,
      "p_java": 1.1032122560780353e-06,
      "p_javascript": 8.26816865910762e-06,
      "p_matlab": 4.919210653866361e-06,
      "p_python": 0.13690115719364482,
      "p_sql": 1.3419940093055547e-08,
      "p_typescript": 0.00046929992342756765
    },
    {
      "text": "\"\"\"Write Python script to replace all occurrences of a given letter in a string with another.\"\"\"\n\n# Take a string as an input\nstring = \"fortnite\"\n\n# Replace the target letter with the replacement letter\nnew_string = string.replace(\"t\", \"l\")\n\n# Print the new string\nprint(new_string)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.8830772250163444e-08,
      "p_css": 8.580929045306541e-05,
      "p_html": 6.680006052801971e-05,
      "p_java": 0.9657901175083314,
      "p_javascript": 2.722606169344017e-10,
      "p_matlab": 5.497665367755802e-08,
      "p_python": 0.0023009942241320816,
      "p_sql": 0.00014230687176269488,
      "p_typescript": 0.031613877965106035
    },
    {
      "text": "def anagram_permutation(string1, string2):\n    if sorted(string1) == sorted(string2):\n        print(\"The strings are anagrams.\")\n    elif sorted(string1) == sorted(string2[::-1]):\n        print(\"The strings are permutations.\")\n    else:\n        print(\"The strings are neither anagrams nor permutations.\")\n\nanagram_permutation(\"algorithm\", \"logarithm\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003200213705644048,
      "p_css": 0.029104189454518623,
      "p_html": 0.002466842980809191,
      "p_java": 0.0001604154875226717,
      "p_javascript": 0.005801978896419248,
      "p_matlab": 0.0027987252844736896,
      "p_python": 0.8155647477687615,
      "p_sql": 0.03790850237188217,
      "p_typescript": 0.10299438404996898
    },
    {
      "text": "def fibonacci(num):\n a, b = 0, 1\n for _ in range(num):\n  a, b = b, a + b\n return a",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.1920702821112846e-12,
      "p_css": 1.5144362906874578e-17,
      "p_html": 2.0333111147279862e-11,
      "p_java": 4.4713609494602473e-13,
      "p_javascript": 3.829879188953255e-13,
      "p_matlab": 0.9999970404793459,
      "p_python": 2.9594858393878756e-06,
      "p_sql": 7.00814497755336e-12,
      "p_typescript": 3.4511842926739383e-12
    },
    {
      "text": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.154517268715791e-06,
      "p_css": 0.0054431071103042735,
      "p_html": 0.0015409692192618028,
      "p_java": 0.22540694648743687,
      "p_javascript": 1.5780847311046687e-06,
      "p_matlab": 0.00028337584757526127,
      "p_python": 0.7526962533422479,
      "p_sql": 0.013917373055249913,
      "p_typescript": 0.0007032423359242141
    },
    {
      "text": "def create_squares_list():\n    squares_list = []\n    for i in range(1, 101):\n        squares_list.append(i**2)\n    return squares_list",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0961048032832085e-16,
      "p_css": 8.026134705922529e-24,
      "p_html": 1.0085458976311037e-15,
      "p_java": 1.4475398215308306e-17,
      "p_javascript": 7.299535510645501e-18,
      "p_matlab": 0.9999999999978417,
      "p_python": 2.1570192127585165e-12,
      "p_sql": 1.8869682651803925e-16,
      "p_typescript": 5.538704520005079e-17
    },
    {
      "text": "from scipy.optimize import minimize\ndef f(x):\n    return x[0]**2 + 4*x[1]**2\n\nres = minimize(f, [3, -2], method='nelder-mead')\n\nprint(res.x)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005019652477719419,
      "p_css": 0.3455744101095859,
      "p_html": 0.003479483743223615,
      "p_java": 0.0022249605381970327,
      "p_javascript": 0.0019142145610459259,
      "p_matlab": 3.7128101549472066e-05,
      "p_python": 0.6387604067242473,
      "p_sql": 0.0024266366673621966,
      "p_typescript": 0.0005631070770691001
    },
    {
      "text": "def solution(coefficients):\n\t# get the coefficients of the equations\n\ta = coefficients[0][0] \n\tb = coefficients[0][1] \n\tc = coefficients[0][2] \n\td = coefficients[1][0] \n\te = coefficients[1][1] \n\tf = coefficients[1][2] \n\n\t# solve for x and y\n\ty = (a*f - c*d)/(a*e - b*d) \n\tx = (c*e - b*f)/(a*e - b*d) \n\n\t# return the solutions\n\treturn x, y\n\n\n# example\nsolution([[1, 2, 8], [3, -4, -2]])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.010548247603226132,
      "p_css": 0.059384922767070566,
      "p_html": 0.05276769998440853,
      "p_java": 0.012327943360188257,
      "p_javascript": 0.09016184317427545,
      "p_matlab": 0.0034427249862599104,
      "p_python": 0.5522166574611249,
      "p_sql": 0.010351502981530212,
      "p_typescript": 0.20879845768191596
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.youtube.com/watch?v=YAOm5YBT-Tk'\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nlikes = int(soup.find(\"button\", attrs={\"title\":\"I like this\"}).span.text)\ndislikes = int(soup.find(\"button\", attrs={\"title\":\"I dislike this\"}).span.text)\nviews = int(soup.find(\"span\", attrs={\"class\":\"view-count\"}).text.strip())\n\nprint('Likes: {}, Dislikes: {}, Views: {}'.format(likes, dislikes, views))",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 1.2725220241810814e-09,
      "p_css": 0.0021193836991546663,
      "p_html": 0.002213344712146643,
      "p_java": 0.9956455454568931,
      "p_javascript": 6.032729538983751e-08,
      "p_matlab": 4.190448649271534e-11,
      "p_python": 1.8210498304652034e-05,
      "p_sql": 6.49901117886304e-07,
      "p_typescript": 2.8040906608767257e-06
    },
    {
      "text": "def nthFibDivisibleBy3(n): \n    \n    prev, curr = 0, 1\n    i = 2\n  \n    while(i < n + 1):\n \n        prev, curr = curr, prev + curr\n  \n        if curr % 3 == 0:\n            nth = curr\n        i+=1\n  \n    return nth",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01553006782702465,
      "p_css": 0.022556566176714483,
      "p_html": 0.026035124693882153,
      "p_java": 0.004786103079249879,
      "p_javascript": 0.010460819918383636,
      "p_matlab": 0.03313456566757171,
      "p_python": 0.8553402248565427,
      "p_sql": 0.0078698066145741,
      "p_typescript": 0.024286721166056797
    },
    {
      "text": "def increment(x): \n    return x + 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011085565934961458,
      "p_css": 0.004012796895103006,
      "p_html": 0.00375304235318577,
      "p_java": 0.0002770406127048949,
      "p_javascript": 0.000808155263109161,
      "p_matlab": 0.00012257128158757092,
      "p_python": 0.9877545024688245,
      "p_sql": 0.000871842155178641,
      "p_typescript": 0.0012914923768103292
    },
    {
      "text": "class Student:\n    def __init__(self, firstName, lastName, age):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00048609317603302073,
      "p_css": 0.16184044985341547,
      "p_html": 0.08254187280105718,
      "p_java": 6.74487223411957e-05,
      "p_javascript": 0.0001163673813793933,
      "p_matlab": 0.00010563689594800673,
      "p_python": 0.7289850866453881,
      "p_sql": 0.022061482025117353,
      "p_typescript": 0.0037955624993202598
    },
    {
      "text": "int_list = []\n\ndef add_element_to_list(element):\n    int_list.append(element);\n\ndef remove_element_from_list(element):\n    int_list.remove(element);",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0700105096319223e-05,
      "p_css": 1.1614172360890891e-05,
      "p_html": 2.5333753728947507e-06,
      "p_java": 1.6047090822173984e-06,
      "p_javascript": 1.9358194848266755e-06,
      "p_matlab": 0.9993726640085474,
      "p_python": 0.0005882841298912037,
      "p_sql": 9.98666946698857e-09,
      "p_typescript": 1.0653693494564556e-05
    },
    {
      "text": "import requests\n\nAPI_ENDPOINT = 'https://imdb-api.com/'\n\n# Sending get request and saving the response as response object\nresp = requests.get(API_ENDPOINT + 'movie/{' + 'release_date:2020%2Creview:9:10' + '}')\n\n# Extracting data in json format\ndata = resp.json()\n\n# Printing the output\nprint(data)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 3.9540837515398175e-06,
      "p_css": 0.9767163158410368,
      "p_html": 0.0002458528050513795,
      "p_java": 5.171804749028986e-05,
      "p_javascript": 1.8260509967757047e-05,
      "p_matlab": 7.80649317771898e-06,
      "p_python": 0.009292284086128545,
      "p_sql": 4.493330537867491e-05,
      "p_typescript": 0.01361887482801727
    },
    {
      "text": "def sum_list(list):\n if not list:\n  return 0\n\n return list[0] + sum_list(list[1:])",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0045790665477455205,
      "p_css": 0.01053304753534265,
      "p_html": 0.017440537577267563,
      "p_java": 0.0008647259365954006,
      "p_javascript": 0.006378916176931076,
      "p_matlab": 0.4417208940047846,
      "p_python": 0.40456705955104144,
      "p_sql": 0.10447944996224312,
      "p_typescript": 0.009436302708048511
    },
    {
      "text": "\"\"\"\nWrite a Python program to parse a JSON data and print the values\n\"\"\"\n\nimport json\n\n# Load the input data as a json string\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\n# Parse the json string into a dictionary\nparsed_data = json.loads(data)\n\n# Print out the values\nfor key, value in parsed_data.items():\n    print(f'{key}: {value}')",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.6480864047127655e-06,
      "p_css": 0.9999832457599525,
      "p_html": 2.6255387103889954e-06,
      "p_java": 3.7904223193956113e-06,
      "p_javascript": 1.3327535569442072e-09,
      "p_matlab": 2.393166169618466e-08,
      "p_python": 9.669292725455068e-08,
      "p_sql": 5.820239406701459e-07,
      "p_typescript": 7.986211329803986e-06
    },
    {
      "text": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Create a data frame from the input data\ndf = pd.read_csv(\"emails.csv\")\n# Extract features and outputs\nX = df['content'].values\ny = df['label'].values\n# Split the dataset into train & test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n# Count vectorizer\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n# Create & fit the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n# Test the model\nscore = model.score(X_test, y_test)\nprint(score)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.38069277649343713,
      "p_css": 0.22032158138953783,
      "p_html": 0.008154150505970395,
      "p_java": 2.048332069742334e-06,
      "p_javascript": 1.927658351917778e-05,
      "p_matlab": 3.6347449315961936e-06,
      "p_python": 0.3874902371755005,
      "p_sql": 5.614841930131339e-06,
      "p_typescript": 0.003310679933103393
    },
    {
      "text": "class Sentence:\n  def __init__(self, text):\n    self.text = text\n    self.words = self.text.split()\n    \n  def get_num_words(self):\n    return len(self.words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.29355939033793e-05,
      "p_css": 0.0043473721282760195,
      "p_html": 0.004186051648949985,
      "p_java": 1.0679846333330513e-06,
      "p_javascript": 5.396321338282787e-06,
      "p_matlab": 3.8851052437296404e-07,
      "p_python": 0.5513885471577831,
      "p_sql": 0.4399697286514794,
      "p_typescript": 8.851200311216192e-05
    },
    {
      "text": "def encrypt(message): \n encrypted_message = \"\" \n for character in message: \n # increment the character number to get its encrypted form \n encrypted_message += chr(ord(character) + 2) \n return encrypted_message \n \nif __name__ == \"__main__\": \n message = \"Hello World\" \n encrypted_message = encrypt(message) \n print(encrypted_message) \n \n output:\n Jgnnq Yqtnf",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03167328043520273,
      "p_css": 0.0447362912850017,
      "p_html": 0.017313769195434977,
      "p_java": 3.428501163554176e-07,
      "p_javascript": 0.012050693662805933,
      "p_matlab": 0.0018852682271251109,
      "p_python": 0.8757241564272341,
      "p_sql": 0.013170188610980014,
      "p_typescript": 0.0034460093060991034
    },
    {
      "text": "# Define a function to find the paths from a given start point to end point\ndef maze_search(maze, start_point, end_point):\n  # Get the size of the maze\n  row_count = len(maze)\n  col_count = len(maze[0])\n\n  # Reject invalid start and end_points\n  if start_point[0] < 0 or start_point[0] >= row_count or start_point[1] < 0 or start_point[1] >= col_count:\n    return 'Invalid start point'\n  if end_point[0] < 0 or end_point[0] >= row_count or end_point[1] < 0 or end_point[1] >= col_count:\n    return 'Invalid end point'\n\n  # Setup the stack for depth first search\n  stack = [start_point]\n  visited = set()\n\n  while stack:\n    # Take the last point from the stack and check if it is the end_point\n    current_point = stack[-1]\n    if current_point == end_point:\n      break\n\n    # Check surrounding points\n    possible_points = [(current_point[0]+1, current_point[1]),\n                       (current_point[0]-1, current_point[1]),\n                       (current_point[0], current_point[1]+1),\n                       (current_point[0], current_point[1]-1)]\n    for point in possible_points:\n      x, y = point\n      # Check if the point is within the maze and is not a wall\n      if 0 <= x < row_count and 0 <= y < col_count and maze[x][y] != '1' and point not in visited:\n        stack.append(point)\n        visited.add(point)\n        break\n\n    # Remove the current_point from the stack if there are no possible points\n    else:\n      stack.pop()\n\n  # Return the path if the end_point is found\n  if stack[-1] == end_point:\n    return stack\n\n  return 'End point is unreachable'\n\n# Solve the maze\nmaze = [['0', '0', '0', '0'], \n        ['0', '0', '1', '0'], \n        ['1', '1', '1', '0'], \n        ['0', '1', '0', '0']]\n\nstart_point = (0, 0)\nend_point = (3, 2)\n\npath = maze_search(maze, start_point, end_point)\nprint(path)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.004979803225516462,
      "p_css": 0.023667423817461276,
      "p_html": 0.002167531500742477,
      "p_java": 0.0001989001060584321,
      "p_javascript": 0.029471593610758413,
      "p_matlab": 0.00117843507645605,
      "p_python": 0.10069565307542264,
      "p_sql": 0.0023532906216526387,
      "p_typescript": 0.8352873689659316
    },
    {
      "text": "import numpy as np\n\nclass L1Model:\n    def __init__(self):\n        self.coef_ = None\n        \n    def fit(self, X, y):\n        n, m = X.shape\n        w = np.random.randn(m)\n        lr = 10e-5\n        for t in range(1000):\n            p = np.dot(X, w)\n            grad = 2 * np.dot(X.T, p - y) + lr * np.sign(w)\n            w = w - lr * grad\n        self.coef_ = w",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0035852292334152425,
      "p_css": 0.006094373089272005,
      "p_html": 0.02392317954963105,
      "p_java": 3.605637121963483e-05,
      "p_javascript": 1.5189711007033505e-05,
      "p_matlab": 0.0017218295771599587,
      "p_python": 0.903880808338337,
      "p_sql": 0.05986937255041422,
      "p_typescript": 0.0008739615795438652
    },
    {
      "text": "# Fibonacci sequence generator\ndef fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 1:\n    return a\n  elif n == 2:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n    return b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.7385652114675215e-06,
      "p_css": 2.5567293194776836e-06,
      "p_html": 1.0293055510752607e-05,
      "p_java": 1.2028177275759438e-07,
      "p_javascript": 4.716044036098749e-07,
      "p_matlab": 0.00010840821048260377,
      "p_python": 0.9998666312791165,
      "p_sql": 6.526754807310615e-06,
      "p_typescript": 2.535193754354286e-07
    },
    {
      "text": "import jwt\n \n@app.route('/auth', methods=['POST'])\ndef auth():\n username = request.form.get('username')\n password = request.form.get('password')\n \n # authenticate the user here\n \n token = jwt.encode({'username': username}, app.config['SECRET_KEY'])\n \n return token",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0004652178870840652,
      "p_css": 0.8210824821156308,
      "p_html": 0.03935983380267483,
      "p_java": 0.002200951545653689,
      "p_javascript": 0.0005895862629922001,
      "p_matlab": 0.00048651897614086824,
      "p_python": 0.06605692672211855,
      "p_sql": 0.0650377179424547,
      "p_typescript": 0.004720764745250129
    },
    {
      "text": "def fibonacci(n):\n # Initialize a memoization dictionary\n memo = {\n 0: 0,\n 1: 1\n }\n \n # If n is in the memoization dictionary, return the value\n if n in memo:\n return memo[n]\n \n # Calculate the Fibonacci number\n if n > 1:\n memo[n] = fibonacci(n-1) + fibonacci(n-2)\n \n return memo[n]\n\nprint(fibonacci(10))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.003662446388246341,
      "p_css": 0.05074101171980629,
      "p_html": 0.006645269208687561,
      "p_java": 0.00038015450579539646,
      "p_javascript": 0.0075049836471644095,
      "p_matlab": 0.03483326908722452,
      "p_python": 0.8712325294112411,
      "p_sql": 0.003098847447948016,
      "p_typescript": 0.021901488583886398
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# The list of URLs\nurls = [\n    'https://www.example1.com',\n    'https://www.example2.com'\n]\n\n# Iterate through each URL\nfor url in urls:\n    # Connect to the URL\n    response = requests.get(url)\n\n    # Parse HTML and save to BeautifulSoup object¶\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract all the hyperlinks\n    links = soup.find_all('a')\n\n    # Print out the link\n    for link in links:\n        print(link['href'])",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.4610931629491526e-12,
      "p_css": 0.0012878927331881143,
      "p_html": 0.007830872011079723,
      "p_java": 0.9901174940271238,
      "p_javascript": 0.00017404041292621303,
      "p_matlab": 1.8084407908372625e-05,
      "p_python": 0.0002314649714133797,
      "p_sql": 0.00015845389561384022,
      "p_typescript": 0.0001816975392855326
    },
    {
      "text": "def reverse_dictionary(dictionary): \n result = dict() \n  \n for key, value in dictionary.items(): \n  result[value] = key \n  \n return result \n\ndictionary = { 'a': 1, 'b':  2, 'c': 3 }\nres = reverse_dictionary(dictionary) \nprint(res) # Output: {1: 'a', 2: 'b', 3: 'c'}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 4.0650406692390783e-07,
      "p_css": 0.9999529875135361,
      "p_html": 2.0537209063832487e-06,
      "p_java": 3.605921107353296e-08,
      "p_javascript": 6.433549963728472e-07,
      "p_matlab": 2.5822280282273083e-05,
      "p_python": 1.2931569476218742e-05,
      "p_sql": 4.749548880670669e-06,
      "p_typescript": 3.6944864380384275e-07
    },
    {
      "text": "def factors_list(n): \n\n    # Create an empty list for factors \n    factors = [] \n  \n    # Loop over all factors \n    for i in range(1, n + 1): \n        if n % i == 0: \n            factors.append(i) \n\n    return factors",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007340908292142484,
      "p_css": 0.0012047859755967168,
      "p_html": 0.00393890704572405,
      "p_java": 0.0001097947974874706,
      "p_javascript": 0.000506121691790825,
      "p_matlab": 0.488920123495746,
      "p_python": 0.4998854530458439,
      "p_sql": 0.003102869585892715,
      "p_typescript": 0.0015978535327039706
    },
    {
      "text": "class Movie: \n \n    def __init__(self, title, year, rating): \n        self.title = title \n        self.year = year\n        self.rating = rating \n  \n    def print_data(self):\n        print('The movie %s released in %d had a rating of %.1f.' \n        % (self.title, self.year, self.rating))",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 3.119487052613552e-06,
      "p_css": 0.001951338261123905,
      "p_html": 0.9843638160173064,
      "p_java": 2.097348327748022e-06,
      "p_javascript": 1.8514814387146914e-05,
      "p_matlab": 9.904846383642115e-07,
      "p_python": 0.011980063677497677,
      "p_sql": 0.0016135976390586697,
      "p_typescript": 6.646227060758437e-05
    },
    {
      "text": "def calc_avg_temperature(temperatures):\n  total = 0\n  for temp in temperatures:\n    total += temp\n  avg = total / len(temperatures)\n  return avg\n\nprint(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))\n\n# Output: 71.17142857142857",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.014399351259224903,
      "p_css": 0.06660862320090352,
      "p_html": 0.05431628784422915,
      "p_java": 0.0012987930423501374,
      "p_javascript": 0.0073537504029041354,
      "p_matlab": 0.1533880181743724,
      "p_python": 0.694857570831934,
      "p_sql": 0.004046260059018557,
      "p_typescript": 0.0037313451850632786
    },
    {
      "text": "while True:\n    s = input(\"Enter a string: \")\n    count = 0\n    for i in s:\n        if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):\n            count+=1\n    print(\"The number of vowels in the string:\", count)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.51816434582094e-05,
      "p_css": 0.002119430317918085,
      "p_html": 0.002549044874652834,
      "p_java": 0.022289677117793897,
      "p_javascript": 1.6583464896465956e-05,
      "p_matlab": 0.0009464490118005542,
      "p_python": 0.9593125692728179,
      "p_sql": 0.00017639117747034948,
      "p_typescript": 0.012524673119191513
    },
    {
      "text": "def remove_whitespace(s):\n    return s.replace(\" \", \"\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0026055780581492336,
      "p_css": 0.010499601834421193,
      "p_html": 0.0061803079393218845,
      "p_java": 0.0006649979564683207,
      "p_javascript": 0.0019938124959845266,
      "p_matlab": 0.000693160502708369,
      "p_python": 0.9712065212895278,
      "p_sql": 0.0022387627399413313,
      "p_typescript": 0.0039172571834772355
    },
    {
      "text": "from Crypto.Cipher import AES\n\nkey = b'0123456789ABCDEF'\n\ndef encryptAES(message):\n cipher = AES.new(key, AES.MODE_ECB)\n ciphertext = cipher.encrypt(message)\n return ciphertext\n \nmessage = b'Encrypt this message'\nencrypted_message = encryptAES(message)\nprint(encrypted_message)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009243877295035185,
      "p_css": 0.0867485779566574,
      "p_html": 0.012992212510499323,
      "p_java": 0.0014468906330379694,
      "p_javascript": 0.0010240094877574893,
      "p_matlab": 0.0010286342825905133,
      "p_python": 0.8772243073994788,
      "p_sql": 0.0067578805104249115,
      "p_typescript": 0.003533609924518409
    },
    {
      "text": "def min_max(array):\n    min = array[0]\n    max = array[0]\n\n    for value in array:\n        if value < min:\n            min = value\n        elif value > max:\n            max = value\n    \n    return min, max\n\narray=[4, 6, 3, 2, 8, 10]\n\nmin, max = min_max(array)\n\nprint(\"Minimum: \", min)\nprint(\"Maximum: \", max)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.537049611403558e-08,
      "p_css": 5.783215180879247e-07,
      "p_html": 8.90163018095546e-08,
      "p_java": 2.6229051401353452e-09,
      "p_javascript": 9.493675215574432e-09,
      "p_matlab": 0.9999992121701523,
      "p_python": 2.5001523102584477e-12,
      "p_sql": 2.3232519238515772e-08,
      "p_typescript": 1.976993186075214e-08
    },
    {
      "text": "num1 = float(input(\"Please enter the first number: \"))\nnum2 = float(input(\"Please enter the second number: \"))\n\nprint(\"The sum of the two numbers is: \" + str(num1 + num2))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 8.502786236248251e-05,
      "p_css": 1.102339378139137e-05,
      "p_html": 0.0001918080966849632,
      "p_java": 0.9117496659428038,
      "p_javascript": 0.00029732340351979505,
      "p_matlab": 1.1298840839352017e-12,
      "p_python": 0.08734765797683001,
      "p_sql": 6.634709039646255e-05,
      "p_typescript": 0.0002511462324912287
    },
    {
      "text": "import json\n\ndef detect_errors(json_string):\n try:\n     data = json.loads(json_string)\n     return None\n except Exception as e:\n     return e",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0006242791250516104,
      "p_css": 0.7386732240403533,
      "p_html": 0.003301295232551917,
      "p_java": 5.103933097228997e-05,
      "p_javascript": 0.00010111128515902655,
      "p_matlab": 9.826872069865573e-05,
      "p_python": 0.242006122491969,
      "p_sql": 0.0006763064472958271,
      "p_typescript": 0.01446835332594829
    },
    {
      "text": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# create data\nwine_data = pd.read_csv('wine.csv')\n# set features\nfeatures = ['alcohol', 'type', 'sulphates', 'pH', 'quality']\nx_train = wine_data[features]\ny_train = wine_data['type']\n\n# create model\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(x_train, y_train)\n\n# save model\n# model.save('wine_random_forest.h5')",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.4608272093651359,
      "p_css": 0.09888624792783861,
      "p_html": 0.021076594183269324,
      "p_java": 0.00015973752932129127,
      "p_javascript": 0.0002284714716417217,
      "p_matlab": 0.0002654103589294265,
      "p_python": 0.4119559519761932,
      "p_sql": 3.5423648897123384e-06,
      "p_typescript": 0.006596834822780841
    },
    {
      "text": "def selection_sort(arr): \n    n = len(arr) \n  \n    # One by one move boundary of unsorted subarray \n    for i in range(n): \n        # Find the minimum element in unsorted array \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n  \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n    return arr",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.23182707610539e-06,
      "p_css": 3.393631186892097e-07,
      "p_html": 6.500320097946958e-07,
      "p_java": 4.5006372086868747e-08,
      "p_javascript": 1.0473431760008212e-06,
      "p_matlab": 0.9972600839889189,
      "p_python": 0.0027318190003258786,
      "p_sql": 1.1961466674265172e-08,
      "p_typescript": 4.77147753596159e-06
    },
    {
      "text": "# define a function for computing the mean\ndef compute_mean(numbers):\n    # initialize a variable to store the sum\n    total = 0\n    # loop through all the elements in the array\n    for num in numbers:\n        # add the element to the total\n        total += num\n    # compute the mean by dividing the total by the number of elements\n    mean = total / len(numbers)\n    # return the mean\n    return mean\n\n# test the function\nnums = [1, 4, 5, 6, 7]\naverage = compute_mean(nums)\nprint(average)\n# prints 5",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 3.2100024976102994e-05,
      "p_css": 5.706830606686342e-06,
      "p_html": 1.8340213199868486e-05,
      "p_java": 2.6829120840099365e-06,
      "p_javascript": 0.9979424387102482,
      "p_matlab": 8.180425348910522e-07,
      "p_python": 0.0012237181915656415,
      "p_sql": 1.150801015071985e-05,
      "p_typescript": 0.0007626870646336277
    },
    {
      "text": "import random\n\ndef generate_random():\n    return random.random()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002865703181961532,
      "p_css": 0.0004904851012644776,
      "p_html": 0.0002882138158767676,
      "p_java": 5.676463937601136e-06,
      "p_javascript": 7.15059590020618e-05,
      "p_matlab": 2.816848632785221e-06,
      "p_python": 0.8876268422389014,
      "p_sql": 0.11114750871773617,
      "p_typescript": 8.038053645240318e-05
    },
    {
      "text": "def palindrome_checker(string1, string2): \n    m = len(string1) \n    n = len(string2) \n  \n    if m != n: \n        return False    \n  \n    string1 = string1.lower() \n    string2 = string2.lower() \n      \n    # create empty 2-D matrix \n    C = [[0] * (n + 1) for i in range(m + 1)] \n  \n    # palindromic substring of length 0 \n    for i in range(m + 1): \n        C[i][0] = 0\n  \n    # palindromic substring of length 1 \n    for j in range(n + 1): \n        C[0][j] = 0\n  \n    # fill the matrix in bottom-up manner \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if string1[i - 1] == string2[j - 1]: \n                C[i][j] = C[i - 1][j - 1] + 1\n    return m == n == C[m][n]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.199422244403285e-06,
      "p_css": 7.508774990452857e-07,
      "p_html": 3.2052934926001584e-05,
      "p_java": 7.187696057230278e-07,
      "p_javascript": 1.5484341424460603e-05,
      "p_matlab": 0.45520571017855593,
      "p_python": 0.5445956693735329,
      "p_sql": 0.00011375799398775361,
      "p_typescript": 2.6656108223862946e-05
    },
    {
      "text": "def sum_array(arr):\n    s = 0\n    for i in arr:\n        s += i\n    return s",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.047679870838814e-07,
      "p_css": 1.85489719613071e-06,
      "p_html": 4.2108217638545247e-07,
      "p_java": 8.438677126979559e-08,
      "p_javascript": 1.6754095992300115e-07,
      "p_matlab": 0.9997023051856122,
      "p_python": 0.00029425644894702643,
      "p_sql": 2.0804785681801474e-08,
      "p_typescript": 5.848855644376316e-07
    },
    {
      "text": "def mean_value(numbers):\n    sum = 0\n    for n in numbers:\n        sum += n\n    return sum / len(numbers)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.1962968840330312e-05,
      "p_css": 4.117268332586875e-05,
      "p_html": 0.0002123812780894597,
      "p_java": 0.990093315696395,
      "p_javascript": 0.0001586984763547402,
      "p_matlab": 5.759160186571493e-07,
      "p_python": 0.00938566850751581,
      "p_sql": 7.184869863366289e-05,
      "p_typescript": 2.4375774826430823e-05
    },
    {
      "text": "def sort_ascending(arr):\n    arr.sort()\n    return arr\n\nresult = sort_ascending([5, 8, 2, 6])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.938377768415627e-06,
      "p_css": 0.00045428525226037764,
      "p_html": 1.1116408221933292e-05,
      "p_java": 2.0691898470851714e-06,
      "p_javascript": 9.670741396355274e-06,
      "p_matlab": 0.00014763641508574045,
      "p_python": 0.9993494413270709,
      "p_sql": 9.18625271358575e-06,
      "p_typescript": 1.0656035635702484e-05
    },
    {
      "text": "def median(numbers):\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        mid = int(len(numbers) / 2)\n        return (numbers[mid] + numbers[mid - 1]) / 2\n    else:\n        mid = int(len(numbers) / 2)\n        return numbers[mid]\n\nnumber_list = [-2.3, 5.6, 7.6, 4.5, 9.8]\nprint('Median of the list is', median(number_list))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.3806272440701658e-05,
      "p_css": 1.4994074909234015e-05,
      "p_html": 3.9426115125560233e-05,
      "p_java": 0.9463647479764534,
      "p_javascript": 0.00016178817836205088,
      "p_matlab": 1.4891353973708694e-11,
      "p_python": 0.053368896629058124,
      "p_sql": 1.2501941306724696e-05,
      "p_typescript": 2.3838797452935965e-05
    },
    {
      "text": "import requests \nfrom bs4 import BeautifulSoup \n  \ndef crawl_headlines(url): \n    \n    code = requests.get(url)  \n    plain = code.text  \n    soup = BeautifulSoup(plain, \"html.parser\")  \n  \n    headlines = [] \n    for headline in soup.find_all('a', {'class': 'story-link'}): \n        headlines.append(headline.string) \n          \n    return headlines \n  \n\nURL = \"https://www.example.com/news\"\nheadlines =  crawl_headlines(URL) \nprint(\"Headlines:\\n\") \n\nfor headline in headlines: \n    print(headline)",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 1.4714968960682254e-14,
      "p_css": 0.000333357338400329,
      "p_html": 3.1290902529113924e-05,
      "p_java": 0.9996019764264858,
      "p_javascript": 4.207639239735985e-08,
      "p_matlab": 1.9685470756660675e-07,
      "p_python": 3.0425268560127263e-05,
      "p_sql": 2.176386272650135e-06,
      "p_typescript": 5.347466373461307e-07
    },
    {
      "text": "# models.py\n\nimport pickle\n\nclass ClassificationModel(models.Model):\n clf = pickle.load(open(\"classifier.pkl\", \"rb\"))\n\n# views.py\n\n@app.route('/classify', methods=['POST'])\ndef classify_text():\n classification_model = ClassificationModel.objects.get(id=1)\n prediction = classification_model.clf.predict(request.data['text'])\n return {'prediction': prediction}",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.999981528131007,
      "p_css": 1.4846718661617629e-05,
      "p_html": 4.736634177403766e-08,
      "p_java": 7.728342272664189e-08,
      "p_javascript": 5.8166730842965807e-08,
      "p_matlab": 1.731458125906095e-08,
      "p_python": 3.275294728344284e-06,
      "p_sql": 7.505760783949286e-09,
      "p_typescript": 1.4221876562002391e-07
    },
    {
      "text": "def median(numbers):\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2] + numbers[(len(numbers)//2)-1]) / 2.0\n    else:\n        return numbers[len(numbers)//2]",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.5398479835781744e-05,
      "p_css": 6.176740928238747e-05,
      "p_html": 0.00011817814866820811,
      "p_java": 0.5017654695401543,
      "p_javascript": 0.00032420029507293437,
      "p_matlab": 4.706475960937421e-11,
      "p_python": 0.49763842766870797,
      "p_sql": 4.818869911901593e-05,
      "p_typescript": 1.8369712094576745e-05
    },
    {
      "text": "def modify_solution(solution, requirements):\n code_lines = solution.splitlines()\n code_lines.pop()\n code_lines.append(\"item_index = item_list.index(new_item)\")\n code_lines.append(\"return item_index\")\n return \"\\n\".join(code_lines)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.012167380079603902,
      "p_css": 0.04026413286377991,
      "p_html": 0.04472973098064218,
      "p_java": 0.001200867880513839,
      "p_javascript": 0.00933279558299093,
      "p_matlab": 0.11142261957572744,
      "p_python": 0.058952627498390676,
      "p_sql": 0.712617141538159,
      "p_typescript": 0.009312704000192087
    },
    {
      "text": "def answer_question(question):\n    if question == 'What is the capital of China?':\n        return 'Beijing'\n    else:\n        return 'I don\\'t know'",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009096198568037424,
      "p_css": 0.08149407076223815,
      "p_html": 0.019824062864579217,
      "p_java": 0.0018255414835775237,
      "p_javascript": 0.03864266745993776,
      "p_matlab": 0.004933475041896822,
      "p_python": 0.7829152553325657,
      "p_sql": 0.008749668577122177,
      "p_typescript": 0.052519059910045136
    },
    {
      "text": "class MyClass:\n    def __init__(self, param1, param2):\n        self.param1 = param1\n        self.param2 = param2\n\n    def print_parameters(self):\n        print(str(self.param1) + \", \" + str(self.param2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006141426619295576,
      "p_css": 0.01689768032858325,
      "p_html": 0.05506094891793624,
      "p_java": 5.370253307320086e-05,
      "p_javascript": 0.0034422075770125025,
      "p_matlab": 6.467070464861111e-05,
      "p_python": 0.8947328608218067,
      "p_sql": 0.028952704505500318,
      "p_typescript": 0.00018108194950964662
    },
    {
      "text": "import numpy as np\nimport scipy.special\nfrom scipy.integrate import ode\n\ndef pde_solve(u0, t0, t1, dt):\n    # Define the right-hand side\n    def f(t, u, args):\n        dudt = args*u\n        return dudt\n    \n    # Create the solver\n    solver = ode(f).set_integrator('dopri5', method='adams')\n    solver.set_initial_value(u0, t0).set_f_params(args)\n    \n    # Solve the equation\n    t = t0\n    u = u0\n    while solver.successful() and solver.t < t1:\n        u = solver.integrate(solver.t + dt)\n        t = solver.t\n    \n    return u",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.08317632746434851,
      "p_css": 0.0587122623764828,
      "p_html": 0.007488746256845225,
      "p_java": 0.008374934141204186,
      "p_javascript": 0.0052608916712916535,
      "p_matlab": 4.1210526384952845e-05,
      "p_python": 0.4088781017242897,
      "p_sql": 0.0027407417867814934,
      "p_typescript": 0.42532678405237145
    },
    {
      "text": "def combinations(s): \n  \n    # Get the length of the string \n    n = len(s) \n  \n    # A loop to pick starting point of substring \n    for i in range(n): \n          \n        # Pick ending point of substring \n        for j in range(i,n): \n              \n            # Print the substring \n            for k in range(i,j+1): \n                print(s[k], end=\"\") \n            print() \n\ncombinations(\"ABC\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.7776403091833386e-06,
      "p_css": 1.924362690297427e-05,
      "p_html": 6.131220162980835e-05,
      "p_java": 2.5318290449137815e-05,
      "p_javascript": 2.2639557909006348e-05,
      "p_matlab": 0.004516859880779315,
      "p_python": 0.9939666614702102,
      "p_sql": 0.0006549910673524631,
      "p_typescript": 0.0007291962644578483
    },
    {
      "text": "def sort(list):\n  for i in range(len(list)):\n    min_idx = i\n    for j in range(i+1, len(list)):\n      if list[min_idx] > list[j]:\n        min_idx = j\n  list[i], list[min_idx] = list[min_idx], list[i]\n\n  return list\n\nlist = [3,7,1,4,9,5]\nsorted_list = sort(list)\n\nprint(sorted_list)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.000254318602859597,
      "p_css": 0.0003101294981040929,
      "p_html": 0.0012732541783381367,
      "p_java": 5.8962325234794604e-05,
      "p_javascript": 0.0002925464610847476,
      "p_matlab": 0.5070390925799557,
      "p_python": 0.4794523641809383,
      "p_sql": 0.010810310126261252,
      "p_typescript": 0.0005090220472232761
    },
    {
      "text": "#!/usr/bin/env python2\n#\n# This file is part of Archivematica.\n#\n# Copyright 2010-2012 Artefactual Systems Inc. <http://artefactual.com>\n#\n# Archivematica is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Archivematica is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Archivematica.    If not, see <http://www.gnu.org/licenses/>.\n\n# @package Archivematica\n# @subpackage archivematicaClientScript\n# @author Joseph Perry <joseph@artefactual.com>\n# @version svn: $Id$\n\n#/src/dashboard/src/main/models.py\n\nimport collections\nimport csv\nimport os\nimport sys\nimport traceback\n# archivematicaCommon\nimport archivematicaFunctions\nfrom custom_handlers import get_script_logger\nfrom sharedVariablesAcrossModules import sharedVariablesAcrossModules\n\n\ndef parseMetadata(SIPPath):\n    \"\"\"\n    Parse all metadata.csv files in SIPPath.\n\n    Looking for metadata.csvs in metadata/ and\n    objects/metadata/transfers/<transfer name>/metadata/\n\n    See parseMetadataCSV for details on parsing.\n\n    :param SIPPath: Path to the SIP\n    :return: {<filename>: OrderedDict(key: [values]) }\n    \"\"\"\n    all_metadata = {}\n    metadata_csvs = archivematicaFunctions.find_metadata_files(SIPPath, 'metadata.csv')\n\n    for metadataCSVFilePath in metadata_csvs:\n        try:\n            csv_metadata = parseMetadataCSV(metadataCSVFilePath)\n        except Exception:\n            print >>sys.stderr, \"error parsing: \", metadataCSVFilePath\n            traceback.print_exc(file=sys.stderr)\n            sharedVariablesAcrossModules.globalErrorCount += 1\n            continue\n        # Provide warning if this file already has differing metadata\n        # Not using all_metadata.update(csv_metadata) because of that\n        for entry, values in csv_metadata.iteritems():\n            if entry in all_metadata and all_metadata[entry] != values:\n                print >> sys.stderr, 'Metadata for', entry, 'being updated. Old:', all_metadata[entry], 'New:', values\n            existing = all_metadata.get(entry, collections.OrderedDict())\n            existing.update(values)\n            all_metadata[entry] = existing\n\n    return all_metadata\n\n\ndef parseMetadataCSV(metadataCSVFilePath):\n    \"\"\"\n    Parses the metadata.csv into a dict with entries for each file.\n\n    Each file's entry is an OrderedDict containing the column header and a list of values for each column.\n\n    Example CSV:\n    Filename,dc.title,dc.type,dc.type,Other metadata\n    objects/foo.jpg,Foo,Photograph,Still Image,Taken on a sunny day\n    objects/bar/,Bar,Photograph,Still Image,All taken on a rainy day\n\n    Produces:\n    {\n        'objects/foo.jpg': OrderedDict(dc.title=[Foo], dc.type=[Photograph, Still Image], Other metadata=[Taken on a sunny day])\n        'objects/bar': OrderedDict(dc.title=[Bar], dc.date=[Photograph, Still Image], Other metadata=[All taken on a rainy day])\n    }\n\n    :param metadataCSVFilePath: Path to the metadata CSV to parse\n    :return: {<filename>: OrderedDict(<metadata name>: [<metadata value>]) }\n    \"\"\"\n    metadata = {}\n    # use universal newline mode to support unusual newlines, like \\r\n    with open(metadataCSVFilePath, 'rbU') as f:\n        reader = csv.reader(f)\n        # Parse first row as header\n        header = reader.next()\n        # Strip filename column, strip whitespace from header values\n        header = [h.strip() for h in header[1:]]\n        # Parse data\n        for row in reader:\n            if not row:\n                continue\n            entry_name = row[0]\n            if entry_name.endswith(\"/\"):\n                entry_name = entry_name[:-1]\n            # Strip file/dir name from values\n            row = row[1:]\n            values = archivematicaFunctions.OrderedListsDict(zip(header, row))\n            if entry_name in metadata and metadata[entry_name] != values:\n                print >> sys.stderr, 'Metadata for', entry_name, 'being overwritten. Old:', metadata[entry_name], 'New:', values\n            metadata[entry_name] = values\n\n    return collections.OrderedDict(metadata)  # Return a normal OrderedDict\n\n\nif __name__ == '__main__':\n    logger = get_script_logger(\"archivematica.mcp.client.createMETSMetadataCSV\")\n\n    parseMetadata(sys.argv[1])\n",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.008964088129733637,
      "p_css": 0.3678591237244742,
      "p_html": 0.004980171534564735,
      "p_java": 0.004246575236256719,
      "p_javascript": 0.000295356739129089,
      "p_matlab": 8.263656818640851e-05,
      "p_python": 0.002391337397947988,
      "p_sql": 0.028933250457014198,
      "p_typescript": 0.5822474602126931
    },
    {
      "text": "import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = sent_tokenize(\"The movie was so amazing!\")\n\n# Setup VADER sentiment intensity analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n# Use VADER to get sentiment scores for each sentence\nfor sentence in sentences:\n scores = analyzer.polarity_scores(sentence)\n score = scores['compound']\n if score >= 0.1:\n  sentiment = 'positive'\n elif score <= -0.1:\n  sentiment = 'negative'\n else:\n  sentiment = 'neutral'\n\n print(sentence + ': ' + sentiment)\n\n# Output: The movie was so amazing!: positive",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01183279693608237,
      "p_css": 0.18689088370395598,
      "p_html": 0.005592761498161356,
      "p_java": 0.00018097617477792074,
      "p_javascript": 0.0025550888257322314,
      "p_matlab": 0.0035627622927544528,
      "p_python": 0.7339922227996034,
      "p_sql": 0.04493444268659363,
      "p_typescript": 0.010458065082338808
    },
    {
      "text": "def append_list(list_to_append, list_to_add):\n    return list_to_append + list_to_add",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0458681726310896e-12,
      "p_css": 2.5489143973834694e-10,
      "p_html": 2.7598246867965498e-11,
      "p_java": 8.025231839209999e-13,
      "p_javascript": 3.049889349032867e-12,
      "p_matlab": 3.595677408560778e-18,
      "p_python": 0.9999999972484059,
      "p_sql": 2.461794976084354e-09,
      "p_typescript": 4.1123042603913176e-13
    },
    {
      "text": "def latin_encode(string): \n    encoded_string = \"\" \n    for word in string.split(): \n  \n        if word[0] not in \"aeiou\": \n            word = word[1:]+word[0] \n        word+=\"ay\" \n  \n        encoded_string += word+\" \"\n    return encoded_string",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007244120340411147,
      "p_css": 0.0034974459266935527,
      "p_html": 0.014326438873162024,
      "p_java": 0.024739936295740245,
      "p_javascript": 2.0215731789068137e-06,
      "p_matlab": 0.0012262871632549967,
      "p_python": 0.9282954525040418,
      "p_sql": 0.020038631929705515,
      "p_typescript": 0.0006296653938117188
    },
    {
      "text": "import requests\n\nurl = 'http://localhost:4000'\n\nquery = \"\"\"\nquery {\n user(id: 2) {\n  name\n  age\n  address {\n   street\n   city\n  }\n }\n}\n\"\"\"\n\nresponse = requests.post(url, json={'query': query})\ndata = response.json()\n\nprint(data)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.2090509691307612e-07,
      "p_css": 0.9966337985332411,
      "p_html": 0.0004951911807626676,
      "p_java": 3.8850705389612995e-05,
      "p_javascript": 3.2235021116656106e-06,
      "p_matlab": 2.0536221820492896e-06,
      "p_python": 0.0024926248304903958,
      "p_sql": 1.2456897223816016e-05,
      "p_typescript": 0.00032167982350191955
    },
    {
      "text": "import requests\nimport bs4\n\ndef webscraper(url):\n    page = requests.get(url)\n    soup = bs4.BeautifulSoup(page.text, \"html.parser\")\n    return soup",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.6015855854324927e-07,
      "p_css": 0.6895423581331237,
      "p_html": 0.261998537008165,
      "p_java": 0.0003691392154960698,
      "p_javascript": 5.991030966202842e-05,
      "p_matlab": 4.274228659549907e-06,
      "p_python": 0.044570220559040426,
      "p_sql": 0.0033808713858280923,
      "p_typescript": 7.442900146659964e-05
    },
    {
      "text": "# Create the project\ndjango-admin startproject blog\n\n# Create the application\ncd blog\npython manage.py startapp posts\n\n# Add the application to the project\n# Edit the settings.py file\nINSTALLED_APPS = [\n 'posts',\n # ...\n]\n\n# Create the database\npython manage.py makemigrations\npython manage.py migrate\n\n# Create the models\n# Edit the models.py file\nfrom django.db import models\nclass Post(models.Model):\n title = models.CharField(max_length=200)\n body = models.TextField()\n\n# Create the Admin page\npython manage.py createsuperuser\n# Follow the prompts to create the superuser\n\n# Create the URLs\n# Edit the urls.py file\nfrom django.urls import path\nfrom django.contrib import admin\nfrom posts.views import HomePageView, CreatePost\n\nurlpatterns = [\n path('admin/', admin.site.urls),\n path('', HomePageView.as_view(), name=\"home\"),\n path('post/new/', CreatePost.as_view(), name=\"create_post\")\n]\n\n# Create Views\n# Edit the views.py file\nfrom django.views.generic.base import TemplateView\nfrom django.views.generic.edit import CreateView\nfrom posts.models import Post\n\nclass HomePageView(TemplateView):\n template_name = \"index.html\"\n\nclass CreatePost(CreateView):\n model = Post\n fields = ['title', 'body']\n template_name = \"create_post.html\"\n \n success_url = '/'\n\n# Create Templates\n# Create the templates directory\n# Create the index.html file\n<html>\n <head>\n <title>Blog</title>\n </head>\n <body>\n {% for post in posts %}\n <h1>{{ post.title }}</h1>\n <p>{{ post.body }}</p>\n {% endfor %}\n <a href=\"/post/new/\">Create a new post</a>\n </body>\n</html>\n\n# Create the create_post.html file\n<html>\n <head>\n <title>Create Post</title>\n </head>\n <body>\n <h1>Create a New Post</h1>\n <form method=\"post\">\n {% csrf-token %}\n {{ form.as_p }}\n <button type=submit>Create Post</button>\n </form>\n </body>\n</html>",
      "y_true": "html",
      "pred_label": "bash",
      "p_bash": 0.9896456092263489,
      "p_css": 3.1828883284566825e-10,
      "p_html": 0.010354386551488636,
      "p_java": 7.357531599152103e-14,
      "p_javascript": 2.140449098934621e-11,
      "p_matlab": 1.4789514397040372e-14,
      "p_python": 2.4935633587508005e-15,
      "p_sql": 1.1544056859723914e-14,
      "p_typescript": 3.882366630670518e-09
    },
    {
      "text": "import string \n  \ndef remove_punctuations(sentence):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    sentence_no_punctuations = \"\"\n    for char in sentence:\n        if char not in punctuations:\n            sentence_no_punctuations = sentence_no_punctuations + char \n  \n    return sentence_no_punctuations \n  \nsentence = \"This is, a sentence with punctuations!\"\nprint(remove_punctuations(sentence))\n # prints This is a sentence with punctuations",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007668852835768943,
      "p_css": 0.009162785594609387,
      "p_html": 0.006439133306748736,
      "p_java": 0.001248368128032318,
      "p_javascript": 4.326678052481529e-05,
      "p_matlab": 0.0006526516747303181,
      "p_python": 0.8980955627819653,
      "p_sql": 0.08227511893614892,
      "p_typescript": 0.0013162275136631948
    },
    {
      "text": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\ntotal = 0\n\nfor num in nums:\n    if (num % 3 == 0) or (num % 7 == 0):\n        total += num\n\nprint(total)   # Output: 42",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2207016287935018e-07,
      "p_css": 1.2508259727130116e-11,
      "p_html": 1.0228417236978623e-07,
      "p_java": 1.1790765567347831e-09,
      "p_javascript": 7.817850335208964e-09,
      "p_matlab": 0.9999323070579099,
      "p_python": 6.744877292909488e-05,
      "p_sql": 1.1474753559090543e-09,
      "p_typescript": 9.657915194886213e-09
    },
    {
      "text": "def list_to_dict(string_list):\n  result = {}\n  for string in string_list:\n    if string not in result:\n      result[string] = 1\n    else:\n      result[string] += 1\n  return result\n\nlist_dict = list_to_dict(['red','blue','red','green','blue','blue'])\nprint(list_dict) # {'red': 2, 'blue': 3, 'green': 1}",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 1.263323637394356e-07,
      "p_css": 0.027426300308281443,
      "p_html": 0.0003011395083879615,
      "p_java": 0.6193863225529963,
      "p_javascript": 2.4808309143806205e-08,
      "p_matlab": 1.6459499057150276e-05,
      "p_python": 0.34173501142739876,
      "p_sql": 0.01107068318131822,
      "p_typescript": 6.393238188731582e-05
    },
    {
      "text": "class IteratorExample:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n    \n    def __iter__(self):\n        self.num = self.start\n        return self\n    \n    def __next__(self):\n        if self.num > self.end:\n            raise StopIteration\n        else:\n            current_num = self.num\n            self.num += 1\n            return current_num\n\niterator = IteratorExample(1, 10)\nfor num in iterator:\n    print(num)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.7379468365277066e-05,
      "p_css": 3.595442539889704e-05,
      "p_html": 0.018172579749992986,
      "p_java": 1.8190039399815971e-06,
      "p_javascript": 2.0990057399460802e-05,
      "p_matlab": 0.032954784951150444,
      "p_python": 0.8956374157860607,
      "p_sql": 0.05307864147983176,
      "p_typescript": 6.0435077860515784e-05
    },
    {
      "text": "def replace_by_length(list_of_strings):\n    final_list = []\n    for string in list_of_strings:\n        final_list.append(len(string))\n    return final_list\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"hello\", \"world\", \"coding\"]\n    print(replace_by_length(list_of_strings))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007346677153883068,
      "p_css": 0.017356019965113042,
      "p_html": 0.004268225579654397,
      "p_java": 3.501558931625702e-05,
      "p_javascript": 3.1489560997487433e-05,
      "p_matlab": 0.0010356247567850651,
      "p_python": 0.9698162595620041,
      "p_sql": 0.006164835317753637,
      "p_typescript": 0.0005578619529875971
    },
    {
      "text": "def last_occurrence(x, lst):\n  last_index = -1\n  for i in range(len(lst)):\n    if lst[i] == x:\n      last_index = i\n  return last_index",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.9222890777611326e-05,
      "p_css": 3.065174409006338e-05,
      "p_html": 0.00011439394074033719,
      "p_java": 4.665514044370503e-06,
      "p_javascript": 7.0168413127972e-06,
      "p_matlab": 0.005647515990040062,
      "p_python": 0.9940434933603004,
      "p_sql": 7.075799106807887e-05,
      "p_typescript": 4.228172762618295e-05
    },
    {
      "text": "\"\"\"\nEnumerate several simple programming solutions to compute the factorial of a number in Python\n\"\"\" \n\n# Solution 1: Using a loop \ndef factorial_1(n):\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact\n\n# Solution 2: Using recursion \ndef factorial_2(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_2(n-1)\n\n# Solution 3: Using math library\nimport math \ndef factorial_3(n):\n    return math.factorial(n)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.001674027746176392,
      "p_css": 0.0001942313538294147,
      "p_html": 6.540342419951045e-05,
      "p_java": 3.4345723333288512e-06,
      "p_javascript": 0.011356438244336626,
      "p_matlab": 0.0005014111939669394,
      "p_python": 0.002629340485840563,
      "p_sql": 2.4602860547471582e-05,
      "p_typescript": 0.9835511101187697
    },
    {
      "text": "# Import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Set the URL to scrape\nURL = 'https://www.example.com/'\n\n# Make the request\nr = requests.get(URL)\n\n# Parse the HTML response\nhtml_doc = r.text\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# Extract the desired information\nfor link in soup.find_all('a'):\n print(link.get('href'))",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.680297947123543e-12,
      "p_css": 0.031095544187552945,
      "p_html": 0.4961818104362189,
      "p_java": 0.4719303415901615,
      "p_javascript": 2.4559890676937935e-05,
      "p_matlab": 2.7867468290555523e-07,
      "p_python": 5.9886444442681567e-05,
      "p_sql": 0.00020535081629848728,
      "p_typescript": 0.0005022279582854515
    },
    {
      "text": "def reverse_array(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        temp = arr[left]\n        arr[left] = arr[right]\n        arr[right] = temp\n        left += 1\n        right -= 1\n\narr = [1, 2, 3, 4]\n\nreverse_array(arr)\n\nprint(arr)  # [4, 3, 2, 1]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0001254279526720043,
      "p_css": 0.0005337160152685572,
      "p_html": 0.00015438014406364052,
      "p_java": 5.7216732353369994e-05,
      "p_javascript": 8.175701342224542e-05,
      "p_matlab": 0.9443730641715065,
      "p_python": 0.05446405842025381,
      "p_sql": 3.5513399761079115e-05,
      "p_typescript": 0.00017486615069885634
    },
    {
      "text": "def format_text(string):\n    \"\"\"Format the given string with the correct indentation levels.\"\"\"\n    lines = string.splitlines()\n    level = 0\n    formated = \"\"\n    for line in lines:\n        if line.isspace():\n            continue\n        formated += \"  \" * level + line + \"\\n\"\n        if line.endswith(\":\"):\n            level += 1\n        elif line.startswith(\"return\") or line.startswith(\"break\"):\n            level -= 1\n    return formated\n\n# Usage Example\nstring = \"\"\"This is \na string\nwith different lines.\"\"\"\nformated = format_text(string)\nprint(formated) \n\n# This is\n#   a string\n#   with different lines.",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.145487329639663e-08,
      "p_css": 3.3812922656133784e-06,
      "p_html": 7.42508972471517e-07,
      "p_java": 0.9999632315585024,
      "p_javascript": 2.4947188725052187e-12,
      "p_matlab": 1.2607765968702147e-08,
      "p_python": 2.4544193993563683e-05,
      "p_sql": 8.565891322778041e-07,
      "p_typescript": 7.169791999407138e-06
    },
    {
      "text": "def generate_primes(max): \n    primes_list = [2] \n    for i in range(3, max + 1): \n        curr = True \n        for p in primes_list: \n            if i % p == 0: \n                curr = False \n        if curr: \n            primes_list.append(i) \n    return primes_list",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1907905240218336e-05,
      "p_css": 5.424110676966573e-06,
      "p_html": 4.7109000468947566e-05,
      "p_java": 6.32729146052384e-07,
      "p_javascript": 1.8228542006477947e-06,
      "p_matlab": 0.9952410806126221,
      "p_python": 0.004676868606413581,
      "p_sql": 8.868777710629757e-06,
      "p_typescript": 6.285403520798506e-06
    },
    {
      "text": "{'name': 'John', 'age': 25, 'address': 'London'}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0001872682879788649,
      "p_css": 0.997109000718626,
      "p_html": 0.00048746507515608125,
      "p_java": 0.001998671165988872,
      "p_javascript": 3.0880525226743303e-07,
      "p_matlab": 1.1099101123854504e-05,
      "p_python": 0.00017810361968500184,
      "p_sql": 7.171321846338736e-06,
      "p_typescript": 2.0911904342832377e-05
    },
    {
      "text": "def FibonacciSeries(num):\n    a = 0\n    b = 1\n    print(\"Fibonacci Series: \")\n    for i in range(0, num):\n        print(a, end=\" \")\n        temp = a\n        a = b\n        b = temp + b\n\nnum = int(input(\"Enter a number: \"))\nFibonacciSeries(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.5806899365047375e-07,
      "p_css": 3.064667309554955e-10,
      "p_html": 5.376202258558869e-07,
      "p_java": 9.785587365041407e-07,
      "p_javascript": 2.2884027621905702e-08,
      "p_matlab": 0.9997942860283912,
      "p_python": 0.00020389017393356276,
      "p_sql": 8.554743098642182e-08,
      "p_typescript": 4.0811793954887736e-08
    },
    {
      "text": "def calculator(num1, num2, op):\n    if op == \"+\":\n        return num1 + num2\n    elif op == \"-\":\n        return num1 - num2\n    elif op == \"*\":\n        return num1 * num2\n    elif op == \"/\":\n        return num1 / num2\n    else:\n        raise Exception(\"Invalid operator\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.010449338789273187,
      "p_css": 0.005097360516151578,
      "p_html": 0.00016161043267391755,
      "p_java": 4.439107700793749e-05,
      "p_javascript": 0.0004490196365991891,
      "p_matlab": 0.0004215349591684416,
      "p_python": 0.9822631194507532,
      "p_sql": 0.0006040226426369764,
      "p_typescript": 0.0005096024957357772
    },
    {
      "text": "import json\nimport requests\n\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/get_latest_stock_prices')\ndef get_latest_stock_prices():\n stock_info = requests.get('http://finance.yahoo.com/d/quotes.csv?s=MSFT+AAPL+GOOGL+AMZN&f=nsl1op')\n stock_list = stock_info.text.splitlines()\n\n stock_prices = {}\n for stock in stock_list:\n  stock_data = stock.split(',')\n  stock_prices[stock_data[0]] = {\n  'name': stock_data[1],\n  'price': stock_data[2],\n  'open': stock_data[3],\n  'percent_change': stock_data[4]\n  }\n\n return json.dumps(stock_prices)\n \nif name == 'main':\n app.run(debug=True)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.005403018334050344,
      "p_css": 0.9636878918663204,
      "p_html": 0.0014857738642094279,
      "p_java": 0.0023701681263045603,
      "p_javascript": 1.123269456422062e-05,
      "p_matlab": 8.51350354248273e-05,
      "p_python": 0.02565807922174682,
      "p_sql": 0.0011943015138814086,
      "p_typescript": 0.0001043993434976832
    },
    {
      "text": "def max_val(arr):\n    max_val = 0\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.4700275373621767e-09,
      "p_css": 7.961434283120538e-12,
      "p_html": 3.2373357293379438e-09,
      "p_java": 5.746278318972969e-10,
      "p_javascript": 9.647452195103375e-08,
      "p_matlab": 0.9999998879097803,
      "p_python": 5.578800565845795e-09,
      "p_sql": 1.5465482941828248e-10,
      "p_typescript": 3.5922899366512597e-09
    },
    {
      "text": "def _encode(char, offset):\n char_code = ord(char)\n new_char_code = char_code + offset\n return chr(new_char_code)\n\ndef encode_string(string, offset):\n encoded_string = \"\"\n \n for char in string:\n encoded_string += _encode(char, offset)\n \n return encoded_string",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.0461365444652224e-05,
      "p_css": 0.0058893795921967345,
      "p_html": 0.0015011279569182693,
      "p_java": 0.06582131643586674,
      "p_javascript": 5.9881553969618196e-06,
      "p_matlab": 0.00018903878230732034,
      "p_python": 0.923234910287277,
      "p_sql": 0.0027207775257019106,
      "p_typescript": 0.0006169998988904352
    },
    {
      "text": "#Define item list\nitems = [('apple', 1.59),('banana', 0.99),('bread', 3.02),('soup', 1.79)]\n\n#Initialize total amount\ntotal_amount = 0\n\n#Loop through each item and add its price to the total\nfor item in items:\n    total_amount += item[1]\n    print(item[0] + ' added to total amount.')\n\n#Add tax to the total\ntax_rate = 0.055\ntotal_amount += (tax_rate * total_amount)\n\n#Print the final total\nprint('Total amount due: $' + str(total_amount))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008949360323851068,
      "p_css": 0.1347333917146633,
      "p_html": 0.005179938699711375,
      "p_java": 0.0004500484434025984,
      "p_javascript": 0.11124312456070683,
      "p_matlab": 5.316494809314596e-06,
      "p_python": 0.744092621382406,
      "p_sql": 0.000820232202200997,
      "p_typescript": 0.0025803904697144107
    },
    {
      "text": "def quick_sort(array):\n    if len(array) == 0 or len(array) == 1:\n        return array\n    \n    pivot = array[0]\n    left = []\n    right = []\n    \n    for i in range(1, len(array)):\n        if array[i] <= pivot:\n            left.append(array[i])\n        else:\n            right.append(array[i])\n    \n    left = quick_sort(left)\n    right = quick_sort(right)\n    \n    return left + [pivot] + right",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00041099818694654005,
      "p_css": 2.675215383223924e-05,
      "p_html": 5.1817177064595145e-05,
      "p_java": 2.9094360553453888e-06,
      "p_javascript": 4.154342227906879e-06,
      "p_matlab": 0.9994200492044535,
      "p_python": 4.167637172309757e-05,
      "p_sql": 2.605362673566704e-05,
      "p_typescript": 1.558950096126896e-05
    },
    {
      "text": "def find_index(item, array):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.5808748587443376e-07,
      "p_css": 2.991492009273416e-08,
      "p_html": 6.536194449689112e-07,
      "p_java": 1.708010286610194e-09,
      "p_javascript": 4.416091912760637e-08,
      "p_matlab": 0.9999981624579869,
      "p_python": 7.337881737811464e-07,
      "p_sql": 1.0531862060497972e-08,
      "p_typescript": 5.73119688224734e-09
    },
    {
      "text": "def join_list_items(my_list, delimiter):\n    joined_list = delimiter.join(my_list)\n    return joined_list\n\nlist_string = join_list_items([\"apple\", \"orange\", \"mango\"], \", \")\nprint(list_string)\n# Output: apple, orange, mango",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.014499825163015113,
      "p_css": 0.08216908107629294,
      "p_html": 0.0291064112123841,
      "p_java": 0.0006884704265575941,
      "p_javascript": 0.001956935189932036,
      "p_matlab": 0.0007568217635674293,
      "p_python": 0.7805884768374797,
      "p_sql": 0.08799824180224623,
      "p_typescript": 0.002235736528525069
    },
    {
      "text": "class StoreItem:\n    def __init__(self, item_id, name, price, description):\n        self.item_id = item_id\n        self.name = name\n        self.price = price\n        self.description = description\n\n    def __str__(self):\n        return f'{self.name}, ${self.price}'\n\n    def to_dict(self):\n        return {\n            'item_id': self.item_id,\n            'name': self.name,\n            'price': self.price,\n            'description': self.description\n        }",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0006534981738663402,
      "p_css": 0.25332846949855886,
      "p_html": 0.026449786536998643,
      "p_java": 0.023050895049629556,
      "p_javascript": 7.728061503359875e-07,
      "p_matlab": 9.396958694732412e-06,
      "p_python": 0.6596159383373125,
      "p_sql": 0.03654856703411506,
      "p_typescript": 0.00034267560467397975
    },
    {
      "text": "import sys\n\ndef find_primes(n): \n    primes = [True] * n\n\n    for p in range(2, n):\n        if primes[p] == True:\n            for i in range(2*p, n, p):\n                primes[i] = False\n\n    return [p for p in range(2, n) if primes[p]]\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print('Usage: python3 prime_numbers.py <number>')\n        sys.exit(1)\n    num = int(sys.argv[1]) \n    print(find_primes(num))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0014621447253748512,
      "p_css": 6.6841127700562765e-06,
      "p_html": 0.00016007178073828893,
      "p_java": 1.2872120098155802e-05,
      "p_javascript": 2.0504974238439186e-06,
      "p_matlab": 0.7328128964599808,
      "p_python": 0.26548149704070945,
      "p_sql": 5.8824431109041455e-05,
      "p_typescript": 2.958831795574328e-06
    },
    {
      "text": "import math\n\ndef quadratic_x_intercept(a, b, c):\n  discriminant = b**2 - 4*a*c\n  if discriminant >= 0:\n    x1_intercept = (-b+math.sqrt(discriminant))/(2*a)\n    x2_intercept = (-b-math.sqrt(discriminant))/(2*a)\n    return x1_intercept, x2_intercept\n  else:\n    return 'No real solutions exist!'\n\na = 1\nb = 4\nc = -5\n\nintercepts = quadratic_x_intercept(a, b, c)\nprint(intercepts)\n# Output (2.0, -2.5)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01302425062276317,
      "p_css": 0.02000725139558388,
      "p_html": 0.006761457412215859,
      "p_java": 0.00026899992283915217,
      "p_javascript": 0.0017666165224905653,
      "p_matlab": 0.0016390458516933818,
      "p_python": 0.9546100858825507,
      "p_sql": 0.0011967205774102568,
      "p_typescript": 0.0007255718124531348
    },
    {
      "text": "import numpy as np\n\n# define the 3 layers #\ninput_layer = np.array([2, 3])\nhidden_layer = np.array([[0.1, 0.4],\n                         [0.8, 0.6],\n                         [0.3, 0.9]])\noutput_layer = np.array([0.3, 0.7])\n\n# compute the output of the 3-layer network #\nhidden_layer_output = np.dot(input_layer, hidden_layer)\noutput = np.dot(hidden_layer_output, output_layer)\n\nprint(output)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9963579402913432,
      "p_css": 0.0005888972228227122,
      "p_html": 0.00022943681428135547,
      "p_java": 3.240841004077388e-06,
      "p_javascript": 4.14276920051361e-05,
      "p_matlab": 6.282236956711218e-06,
      "p_python": 0.002320935568827311,
      "p_sql": 2.73870268115588e-07,
      "p_typescript": 0.00045156546249136586
    },
    {
      "text": "import random\n\narray = [1,2,3,4,5]\n\nrandom.shuffle(array)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.20461026601699636,
      "p_css": 0.024821752078222355,
      "p_html": 0.02361027949427368,
      "p_java": 0.0006126059183125358,
      "p_javascript": 0.003950830482341938,
      "p_matlab": 0.06820927049981294,
      "p_python": 0.3953696951493137,
      "p_sql": 0.2717500751490331,
      "p_typescript": 0.007065225211693344
    },
    {
      "text": "def intersection(A,B):\n    result = [] \n    for element in A: \n        if element in B: \n            result.append(element)\n    return result",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.5308571872323126e-10,
      "p_css": 4.764457633365142e-09,
      "p_html": 1.401264011431198e-10,
      "p_java": 2.600132554998032e-11,
      "p_javascript": 1.860727002686983e-10,
      "p_matlab": 0.9999947105842197,
      "p_python": 5.28367587984724e-06,
      "p_sql": 2.8571669691870805e-14,
      "p_typescript": 4.701280870747407e-10
    },
    {
      "text": "def find_missing_number(list_of_numbers):\n    max_number = max(list_of_numbers)\n    total_sum = (max_number * (max_number + 1)) // 2\n    actual_sum = 0\n    \n    for number in list_of_numbers:\n        actual_sum += number\n    return total_sum - actual_sum\n\nlist_of_numbers = [2, 3, 1, 5]\nmissing_number = find_missing_number(list_of_numbers)\nprint(\"Missing number: \", missing_number)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002185541845305995,
      "p_css": 0.013814917608365371,
      "p_html": 0.006467381007162968,
      "p_java": 0.0005459569543620956,
      "p_javascript": 0.0016216973600266726,
      "p_matlab": 0.01675769654611402,
      "p_python": 0.9521485271037552,
      "p_sql": 0.0019847036984478555,
      "p_typescript": 0.0044735778764597
    },
    {
      "text": "for i in range(10):\n  print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.9656415838442685e-12,
      "p_css": 9.24345959966392e-13,
      "p_html": 1.3906781818842273e-10,
      "p_java": 2.382126516031233e-13,
      "p_javascript": 1.6979731962244342e-13,
      "p_matlab": 0.9998352021961047,
      "p_python": 0.00016479765204655716,
      "p_sql": 3.2524040295583e-14,
      "p_typescript": 5.450371823541461e-12
    },
    {
      "text": "def longest_consecutive_subarray(array): \n    longest_length = 0\n    current_length = 0\n   Hash = {} \n    \n    for val in array: \n        if val not in Hash: \n            Hash[val] = 1\n            current_length += 1\n            \n            if current_length > longest_length: \n                longest_length = current_length \n                \n        else: \n            current_length = 0\n    \n    return longest_length",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0006693106322480561,
      "p_css": 0.001764759685357181,
      "p_html": 0.0006161624878869529,
      "p_java": 7.513998450024076e-05,
      "p_javascript": 0.09791794709841337,
      "p_matlab": 0.8980411548564821,
      "p_python": 0.00031686776271374326,
      "p_sql": 2.4278814930438617e-06,
      "p_typescript": 0.0005962296109053247
    },
    {
      "text": "def sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.483490012020427e-05,
      "p_css": 5.66864971874197e-07,
      "p_html": 0.00013014811788628964,
      "p_java": 3.370467703258502e-06,
      "p_javascript": 1.4885836105926299e-05,
      "p_matlab": 0.37261525835077447,
      "p_python": 0.6271506633220899,
      "p_sql": 1.889984694218221e-05,
      "p_typescript": 4.137229340591823e-05
    },
    {
      "text": "mse_loss = ((1-2)**2 + (2-3)**2 + (3-4)**2 + (4-5)**2 + (5-6)**2)/5\nprint(mse_loss)\n# Output: 1.2",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8026236146074905,
      "p_css": 0.0008397749900409352,
      "p_html": 0.0005062829531843107,
      "p_java": 1.291344181867039e-08,
      "p_javascript": 1.1834082335103283e-06,
      "p_matlab": 8.397797041716557e-10,
      "p_python": 0.19602821362538622,
      "p_sql": 9.166516547547818e-07,
      "p_typescript": 1.078817363680664e-11
    },
    {
      "text": "rectangles = [[3, 4], [6, 6], [1, 8]]\n\n# calculate the total area\ndef calculateTotalArea(rectangles):\n total_area = 0\n for x, y in rectangles:\n total_area += x * y\n return total_area\n\ntotal_area = calculateTotalArea(rectangles)\nprint(total_area) # 81",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.010857677238249586,
      "p_css": 0.021734440165336624,
      "p_html": 0.012227830161902487,
      "p_java": 0.0006699504013947443,
      "p_javascript": 0.005046505372204086,
      "p_matlab": 0.016300779443784986,
      "p_python": 0.9138982976640156,
      "p_sql": 0.0036211624737306236,
      "p_typescript": 0.015643357079381404
    },
    {
      "text": "words = [\"hello\", \"world\", \"hello\", \"I\", \"am\", \"here\", \"hello\", \"world\"]\n\n# create an empty dictionary to store word and its frequency\nfreq = {}\n\n# count frequency of each word\nfor word in words:\n    if word in freq:\n        freq[word] += 1\n    else:\n        freq[word] = 1\n\n# print the frequency\nfor k, v in freq.items():\n    print(k, \":\", v)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.791451985840866,
      "p_css": 0.007929580518828193,
      "p_html": 0.008993435318471316,
      "p_java": 1.6526916966247124e-12,
      "p_javascript": 0.041736311225257915,
      "p_matlab": 0.0005244207658686958,
      "p_python": 0.14719051305699477,
      "p_sql": 0.0013643792690816456,
      "p_typescript": 0.00080937400297886
    },
    {
      "text": "import random\n\ndef generate_random_list(n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.randint(0, 100))\n    return random_list\n\nn = 8\nrandom_list = generate_random_list(n)\nprint(random_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002251745631753379,
      "p_css": 0.0027545096188152356,
      "p_html": 0.003774587394663169,
      "p_java": 0.00013815635769070755,
      "p_javascript": 0.0007418040796390702,
      "p_matlab": 0.03609107528067127,
      "p_python": 0.9466088675619324,
      "p_sql": 0.006368415329651737,
      "p_typescript": 0.0012708387451829401
    },
    {
      "text": "def predict(features):\n    # Use the features to make a prediction\n    prediction = 0\n    \n    # Iterate through each feature to calculate the prediction\n    for feature in features:\n        prediction += calculate_feature(feature)\n    \n    return prediction\n\ndef calculate_feature(feature):\n    # Use a suitable algorithm to calculate the prediction\n    # Value of the feature\n    return value",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.07506047904905999,
      "p_css": 0.0631510670635246,
      "p_html": 0.00498387591366621,
      "p_java": 0.00021643567206521076,
      "p_javascript": 0.12038558260178821,
      "p_matlab": 0.009605146522638325,
      "p_python": 0.02199154794479333,
      "p_sql": 0.0005317503419095387,
      "p_typescript": 0.7040741148905546
    },
    {
      "text": "from Crypto.Cipher import AES\n\n# the block size for the cipher object; must be 16, 24, or 32 for AES\nBLOCK_SIZE = 16\n\n# the character used for padding--with a block cipher such as AES, the value\n# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is\n# used to ensure that your value is always a multiple of BLOCK_SIZE\nPADDING = '{'\n\n# one-liner to sufficiently pad the text to be encrypted\npad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING\n\n# one-liners to encrypt/encode and decrypt/decode a string\n# encrypt with AES, encode with base64\nEncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))\nDecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)\n\n# generate a random secret key\nsecret = os.urandom(BLOCK_SIZE)\n\n# create a cipher object using the random secret\ncipher = AES.new(secret)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 1.8736591705623195e-08,
      "p_css": 8.742511813230172e-08,
      "p_html": 3.382527167508255e-07,
      "p_java": 8.062543269311302e-07,
      "p_javascript": 1.2774865494722908e-05,
      "p_matlab": 1.0923858012184659e-06,
      "p_python": 8.149402481752468e-07,
      "p_sql": 5.352733006629684e-07,
      "p_typescript": 0.9999835318664015
    },
    {
      "text": "def binary_search(arr, item):\n first = 0\n last = len(arr) - 1\n found = False\n \n while(first <= last and not found):\n mid = (first + last) // 2\n if arr[mid] == item:\n found = True\n else:\n if item < arr[mid]:\n last = mid - 1\n else:\n first = mid + 1\n \n return found\n \narray = [1, 3, 5, 7, 9, 11, 13, 15, 17]\nitem = 9\n\nresult = binary_search(array, item)\nif result:\n print('Element present in the array') \nelse:\n print('No such element')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00018965902238010025,
      "p_css": 0.0012556778496401867,
      "p_html": 0.0015837144152527057,
      "p_java": 9.582915441893631e-06,
      "p_javascript": 0.0002978585972971944,
      "p_matlab": 0.3698051735416815,
      "p_python": 0.6257359975317514,
      "p_sql": 4.527887474564427e-06,
      "p_typescript": 0.0011178082390804291
    },
    {
      "text": "Function Name: hello_world\n\nVariable Name: None",
      "y_true": "javascript",
      "pred_label": "java",
      "p_bash": 0.00011992315966624456,
      "p_css": 9.699115803885324e-05,
      "p_html": 7.26762627381451e-05,
      "p_java": 0.9990034512117948,
      "p_javascript": 0.000678325166442945,
      "p_matlab": 1.1628034484352471e-05,
      "p_python": 1.1223647704928348e-05,
      "p_sql": 4.122159504671249e-06,
      "p_typescript": 1.6591996249210806e-06
    },
    {
      "text": "# Function to convert English sentence to Pig Latin \ndef pig_latin(sentence): \n      \n    # Separate the sentence into words \n    words = sentence.split(' ') \n      \n    # Convert each word into Pig Latin \n    pig_latin_words = [] \n    for word in words: \n        pig_latin_words.append(convert(word)) \n      \n    # Return the sentence with words converted to Pig Latin \n    return ' '.join(pig_latin_words) \n  \n# Function to convert English word to Pig Latin \ndef convert(word): \n      \n    # IF the word contains just one letter then return the same \n    if len(word) == 1: \n        return word \n     \n    # If word is a vocal then just add \"way\" at the end \n    elif word[0] in 'aeiou': \n        return word + \"way\"\n      \n    # If word begins with a consonant then move the consonant to the end and add \"ay\" \n    else: \n        return word[1:] + word[0] + \"ay\"",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.09255617837790218,
      "p_css": 0.004857971043100647,
      "p_html": 0.018615127621583582,
      "p_java": 3.302533357000138e-05,
      "p_javascript": 0.15127536969933036,
      "p_matlab": 0.0001661598669730582,
      "p_python": 0.19439107331762015,
      "p_sql": 0.4968684466111002,
      "p_typescript": 0.04123664812881984
    },
    {
      "text": "class Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n\n def describe(self):\n return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001685257832890063,
      "p_css": 0.006472969589452211,
      "p_html": 0.12020681519736184,
      "p_java": 0.00733970053087903,
      "p_javascript": 4.790977017535098e-06,
      "p_matlab": 5.040704816638395e-06,
      "p_python": 0.7941682537759538,
      "p_sql": 0.07124665862074862,
      "p_typescript": 0.00038724482048133876
    },
    {
      "text": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.328126146163023e-07,
      "p_css": 1.6894899992733176e-07,
      "p_html": 6.12955260144911e-07,
      "p_java": 6.771453434054134e-07,
      "p_javascript": 7.1378494737392125e-09,
      "p_matlab": 7.378565109733285e-09,
      "p_python": 0.9999976787526365,
      "p_sql": 2.1222087316896464e-07,
      "p_typescript": 2.6478577256330216e-09
    },
    {
      "text": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"I love programming\"\n\nsid = SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(text)\n\nif scores['compound'] > 0.0:\n print(\"Positive sentiment\")\nelif scores['compound'] == 0.0:\n print(\"Neutral sentiment\")\nelse:\n print(\"Negative sentiment\")\n\n# Output: Positive sentiment",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0036134932879497883,
      "p_css": 0.04228154282775816,
      "p_html": 0.0008350809141565631,
      "p_java": 0.00013338788375120853,
      "p_javascript": 0.00016984774001397836,
      "p_matlab": 0.0009481106162585401,
      "p_python": 0.9145031847135086,
      "p_sql": 0.007316849403414019,
      "p_typescript": 0.030198502613189297
    },
    {
      "text": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \nnum = 5\nprint(Fibonacci(num))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.0971320782000725e-06,
      "p_css": 8.258823227914781e-07,
      "p_html": 1.0517471272390769e-05,
      "p_java": 2.437954296264411e-07,
      "p_javascript": 9.998663705151082e-07,
      "p_matlab": 4.980001732456923e-05,
      "p_python": 0.9999259440174184,
      "p_sql": 3.9887778316991295e-06,
      "p_typescript": 5.83039951923074e-07
    },
    {
      "text": "def callback(a, b): \n    # perform calculation \n    return c \n  \n# define a function to use for the callback \ndef my_function(x): \n    return x*x \n\nresult = callback(5, my_function) \nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006329916576764725,
      "p_css": 0.015871852972335856,
      "p_html": 0.0005515119502849943,
      "p_java": 4.474321771479513e-05,
      "p_javascript": 0.24782234793221408,
      "p_matlab": 6.970659640382753e-05,
      "p_python": 0.7258403299936176,
      "p_sql": 0.004696719249256099,
      "p_typescript": 0.004469796430496304
    },
    {
      "text": "import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sample training and testing data\nX_train = np.array([\"This is a sample sentence.\",\n                    \"Another sample sentence.\",\n                    \"Yet another sentence for classification.\"])\ny_train = np.array([0, 0, 1])\nX_test = np.array([\"Classify this sentence.\",\n                   \"Two sentences in one.\"])\n\n# Create a vectorizer and fit it to the training data\nvectorizer = CountVectorizer()\nvectorizer.fit(X_train)\n\n# Transform the training data and test data into a vector\nX_train_vec = vectorizer.transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# Create a MultinomialNB model and fit it to the vectorized data\nmodel = MultinomialNB()\nmodel.fit(X_train_vec, y_train)\n\n# Make predictions with the model\npredictions = model.predict(X_test_vec)\nprint(predictions)  # Output: [1 0]",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.08931013812537966,
      "p_css": 0.019709020099402532,
      "p_html": 0.0011531983697977593,
      "p_java": 2.0404148208611006e-05,
      "p_javascript": 2.7614057150049975e-05,
      "p_matlab": 1.7738796699949897e-05,
      "p_python": 0.151665246777054,
      "p_sql": 9.916066652301216e-06,
      "p_typescript": 0.7380867235596551
    },
    {
      "text": "The main advantages of using a set data structure in Python are that it is unordered, meaning that the elements in a set are not stored in a particular order, and that it is unindexed, meaning that each element must be referenced based on its value. Additionally, because sets do not contain duplicate elements, they are useful for performing various operations on a dataset such as searching, filtering, and removing duplicate elements. Finally, using sets can improve the speed of the overall code since different operations may have O(1) time complexity.",
      "y_true": "typescript",
      "pred_label": "typescript",
      "p_bash": 8.926501573151229e-13,
      "p_css": 2.489664623023882e-12,
      "p_html": 1.2278350636067854e-13,
      "p_java": 2.121352904219268e-13,
      "p_javascript": 4.797571759159501e-10,
      "p_matlab": 5.416842682479055e-11,
      "p_python": 1.4191094787160854e-12,
      "p_sql": 6.107597071063626e-13,
      "p_typescript": 0.9999999994603272
    },
    {
      "text": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Generate data points\nX = []\ny = []\nfor i in range(1, 11):\n for j in range(1, 101):\n  X.append([i, j])\n  if j % 2 == 0:\n   y.append(1)\n  else:\n   y.append(0)\n\n# Train the model\nX_data = np.array(X)\ny_data = np.array(y)\nmodel = LogisticRegression()\nmodel.fit(X_data, y_data)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.721458084075525e-06,
      "p_css": 8.986550400745849e-12,
      "p_html": 3.0880125241365946e-09,
      "p_java": 1.1638581372864474e-11,
      "p_javascript": 1.1497157555831247e-11,
      "p_matlab": 0.9999942723037989,
      "p_python": 2.622497176907459e-09,
      "p_sql": 5.3564170938406404e-14,
      "p_typescript": 4.954315239630169e-10
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read the dataset\ndata = pd.read_csv('restaurant_reviews.csv')\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(data['review'], data['category'], test_size=0.2, random_state=42)\n\n# Initialize the CountVectorizer\nvect = CountVectorizer().fit(X_train)\n\n# Transform the training and testing sets\nX_train_vectorized = vect.transform(X_train)\nX_test_vectorized = vect.transform(X_test)\n\n# Initialize and train the model\nmodel = MultinomialNB().fit(X_train_vectorized, y_train)\n\n# Make predictions\npreds = model.predict(X_test_vectorized)\n\n# Generate the classification report\nprint(classification_report(y_test, preds))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.5796234669315335,
      "p_css": 0.0878208424588668,
      "p_html": 0.004620524645968955,
      "p_java": 9.875238125268875e-06,
      "p_javascript": 9.336243118567678e-05,
      "p_matlab": 2.121461613064311e-05,
      "p_python": 0.2684720963312663,
      "p_sql": 1.6333011670306415e-05,
      "p_typescript": 0.05932228433525262
    },
    {
      "text": "my_dict = {\n 'key1' : 'value1',\n 'key2': 'value2'\n \n}\n\ntry:\n value2 = my_dict['key3']\nexcept KeyError:\n print(f\"The key 'key3' does not exist in the dictionary.\")",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0031843722438558457,
      "p_css": 0.6237886192621224,
      "p_html": 0.004605865931209964,
      "p_java": 6.975420672694623e-05,
      "p_javascript": 0.003024117319805187,
      "p_matlab": 0.000834944225791266,
      "p_python": 0.020780613733397763,
      "p_sql": 0.0011520604810541573,
      "p_typescript": 0.34255965259603655
    },
    {
      "text": "def calculate_area(n):\n    \"\"\"\n    Calculates the area of an n-sided regular polygon\n    \"\"\"\n    # Calculate the area of the n-sided regular polygon\n    side_length = 1\n    area = (n * side_length**2) / (4 * math.tan(math.pi / n))\n    return round(area, 2)\n\n# Get the number of sides as an input\nn = int(input(\"Enter the number of sides\"))\n\n# Calculate the area and print it\narea = calculate_area(n)\nprint(\"The area of the regular polygon is\", area)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0004776129665179638,
      "p_css": 0.0021478500184651268,
      "p_html": 0.0006970494245009375,
      "p_java": 0.00019793390860598075,
      "p_javascript": 0.011618780576794777,
      "p_matlab": 4.878419325381289e-07,
      "p_python": 0.11725501681624338,
      "p_sql": 6.189709210925822e-05,
      "p_typescript": 0.86754337135483
    },
    {
      "text": "class Animal:\n    def __init__(self, name):\n        self.name = name\n    \n    def move(self):\n        print(f\"{self.name} is moving\")\n    \n    def eat(self):\n        print(f\"{self.name} is eating\")\n    \n    def sleep(self):\n        print(f\"{self.name} is sleeping\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00048506618165651723,
      "p_css": 0.000325278605775205,
      "p_html": 0.014756075488835459,
      "p_java": 0.3051697370785983,
      "p_javascript": 7.790265473220315e-07,
      "p_matlab": 1.2483960713951998e-06,
      "p_python": 0.6596172473047074,
      "p_sql": 0.019555284953456174,
      "p_typescript": 8.928296435221765e-05
    },
    {
      "text": "def filterList(nums, filter):\n \n # Initialize a filtered list \n filtered_list = [] \n \n # Iterate over the list \n for num in nums: \n  \n  # Check if filter is true \n  if eval(str(num)+filter): \n   filtered_list.append(num) \n \n # Return the filtered list\n return filtered_list\n\nresult = filterList([1,2,5,6,-4,7,8], '> 0')\nprint(result)\n# Output: [1,2,5,6,7,8]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00015045047518941592,
      "p_css": 1.2933963533540828e-05,
      "p_html": 0.0004971534528764725,
      "p_java": 7.3817710605436815e-06,
      "p_javascript": 0.0002163092619009987,
      "p_matlab": 0.8307632301448509,
      "p_python": 0.16734824900989215,
      "p_sql": 0.0009370328294101896,
      "p_typescript": 6.725909128570053e-05
    },
    {
      "text": "def mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total / len(lst)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.623525194989476e-05,
      "p_css": 0.00016412460595447968,
      "p_html": 0.00010127680366892855,
      "p_java": 2.093633921780026e-06,
      "p_javascript": 7.74667668997556e-06,
      "p_matlab": 2.1116677229656413e-05,
      "p_python": 0.9996403154838693,
      "p_sql": 2.226937825616247e-05,
      "p_typescript": 2.4821488459802982e-05
    },
    {
      "text": "# function to sort the array\ndef sort_nums(arr):\n  # Use Selection Sort Algorithm\n  for i in range(len(arr)):\n    min_index = i\n    for j in range(i+1, len(arr)):\n      if arr[min_index] > arr[j]:\n        min_index = j\n    arr[i], arr[min_index] = arr[min_index], arr[i]\n  \n  return arr\n\n# driver code\narr = [125, 33, 52, 45, 24]\nresult = sort_nums(arr)\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.036986677628982e-06,
      "p_css": 2.1625312474041237e-05,
      "p_html": 5.994907803610188e-06,
      "p_java": 2.0815917307530703e-06,
      "p_javascript": 2.5745670484119907e-05,
      "p_matlab": 0.9427319708570432,
      "p_python": 0.0571806290943625,
      "p_sql": 1.8560713217726069e-06,
      "p_typescript": 2.4059508102458028e-05
    },
    {
      "text": "SELECT\n    TweetID,\n    TweetText, \n    sentimentScore\nFROM\n    TweetTable\nWHERE\n    sentimentScore = FN_SentimentAnalysis(TweetText);\n\nFN_SentimentAnalysis(input VARCHAR)\nAS \nBEGIN\n    DECLARE @Result int;\n\n    EXEC sp_execute_external_script  \n        @language = N'python',  \n        @script = N'import nltk\n                    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n                    nltk.download(\"vader_lexicon\")\n                    sid = SentimentIntensityAnalyzer()\n                    output_data_1 = sid.polarity_scores(InputDataSet.inputvalue)[\"compound\"]', \n        @input_data_1 = N'SELECT @Input as inputvalue',\n        @params = N'@Result INT OUTPUT',\n        @Result = @Result OUTPUT;  \n\n    RETURN @Result;\nEND;",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.8502453992832408,
      "p_css": 0.034564978094712706,
      "p_html": 0.007364378663879803,
      "p_java": 0.000991445866870402,
      "p_javascript": 0.00025525495646279797,
      "p_matlab": 5.753705391101219e-08,
      "p_python": 0.10355384000487444,
      "p_sql": 0.0012817733268222383,
      "p_typescript": 0.0017428722660827204
    },
    {
      "text": "class Fibonacci:\n def __init__(self, n):\n  self.n = n\n  self.a = 0\n  self.b = 1\n \n def __iter__(self): \n  return self\n \n def __next__(self): \n  if self.a <= self.n:\n   temp = self.a\n   self.a, self.b = self.b, self.a + self.b \n   return temp \n  else:\n  raise StopIteration",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 3.736172700264227e-05,
      "p_css": 0.00792074501523647,
      "p_html": 0.3035668616372083,
      "p_java": 1.6449054308409361e-06,
      "p_javascript": 2.3689788896016854e-05,
      "p_matlab": 2.1928927262348398e-05,
      "p_python": 0.12688136511868067,
      "p_sql": 0.561430606043405,
      "p_typescript": 0.00011579683687772596
    },
    {
      "text": "import smtplib\n\ndef send_email(sender, recipient, subject, message):\n    # set up the audience and message\n    message = \"\"\"\\\n\nFrom: %s\nTo: %s\nSubject: %s\n\n%s\n\"\"\" % (sender, recipient, subject, message)\n\n    # set up the SMTP connection and send the message\n    session = smtplib.SMTP('smtp.example.com', 25)\n    session.login(\"sender_username\", \"sender_password\")\n    session.sendmail(sender, recipient, message)\n    session.quit()",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0024238600828549784,
      "p_css": 0.5591226170505579,
      "p_html": 0.05703860726483038,
      "p_java": 0.10204659932115243,
      "p_javascript": 0.01824190618694072,
      "p_matlab": 0.0012065655626735457,
      "p_python": 0.05395229882258709,
      "p_sql": 0.024842753603491054,
      "p_typescript": 0.1811247921049118
    },
    {
      "text": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\n# plotting the histogram \nplt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') \n  \n# x-axis label \nplt.xlabel('Range of values') \n# y-axis label \nplt.ylabel('Number of Occurrences') \n# plot title \nplt.title('Histogram of data') \n  \n# function to show the plot \nplt.show()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.0007461615391099051,
      "p_css": 0.02182259615123335,
      "p_html": 0.8372696290528664,
      "p_java": 0.00020035856527992138,
      "p_javascript": 0.0466996503121887,
      "p_matlab": 0.0017449297252104066,
      "p_python": 0.05511942108803599,
      "p_sql": 0.006227622112409214,
      "p_typescript": 0.030169631453665937
    },
    {
      "text": "def classifyIntegersByOddEven(arr):\n    evens = []\n    odds = []\n    \n    for num in arr:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    \n    return evens, odds\n\nevens, odds = classifyIntegersByOddEven([1, 8, 4, 120])\nprint('Evens: ', evens)\nprint('Odds: ', odds)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.1472789578170634e-06,
      "p_css": 3.195870471365036e-07,
      "p_html": 4.896484846493892e-06,
      "p_java": 5.784585028130897e-07,
      "p_javascript": 1.4173027001712226e-06,
      "p_matlab": 0.9999268867794602,
      "p_python": 5.823262433188835e-05,
      "p_sql": 5.469490182491252e-07,
      "p_typescript": 3.974535135073373e-06
    },
    {
      "text": "# import the necessary libraries \nimport numpy as np \nimport tensorflow as tf \n\n# define the input matrix\ninput_matrix = np.array([[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]])\n\n# create a 3x3 weight matrix\nweights = tf.Variable(tf.truncated_normal(shape=[3, 3], mean=0, stddev=0.1, dtype=tf.float32))\n# define the biases\nbiases = tf.Variable(tf.constant(0.1, shape=[3]))\n\n# define the output\nout = tf.matmul(input_matrix, weights) + biases\n\n# initialize the weights and biases\ninit = tf.initialize_all_variables()\n\n# define the sesssion\nsess = tf.Session()\n# run the session\nsess.run(init)\n\n# print the result\nprint(sess.run(out))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.13379041303675432,
      "p_css": 0.2879489549188755,
      "p_html": 0.0026801995094749946,
      "p_java": 0.0008468619104909605,
      "p_javascript": 0.0024291866961861633,
      "p_matlab": 3.202480907847126e-05,
      "p_python": 0.05619326201694335,
      "p_sql": 0.00048164761251175413,
      "p_typescript": 0.5155974494896844
    },
    {
      "text": "def print_object_table(obj): \n    print(\"Name\\t Age\\t Gender\\t City\")\n    print(\"----\\t----\\t-------\\t-------\")\n    print(obj['name'], \"\\t\", obj['age'], \"\\t\", obj['gender'], \"\\t\", obj['city'])\n\nprint_object_table({\n  'name': 'John', \n  'age': 32, \n  'gender': 'Male',\n  'city': 'New York'\n})",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0005678556074139172,
      "p_css": 0.9682401281444235,
      "p_html": 0.0009543664097284425,
      "p_java": 0.006039345190563744,
      "p_javascript": 5.745478862478729e-06,
      "p_matlab": 5.968389849744392e-05,
      "p_python": 0.023955832643253943,
      "p_sql": 0.00011502613237744115,
      "p_typescript": 6.201649487902202e-05
    },
    {
      "text": "# Python \ndef most_frequent_words(str):\n  # split string into an array of words\n  words = str.split()\n\n  # create a dictionary and store words and their frequency as key-value pairs \n  frequency_dict = {}\n  for word in words:\n    if word not in frequency_dict:\n      frequency_dict[word] = 1\n    else:\n      frequency_dict[word] += 1\n\n  # create array with words and their frequencies \n  frequency_list = []\n  for key in frequency_dict:\n    frequency_list.append([key, frequency_dict[key]])\n\n  # sort list by frequency in descending order\n  frequency_list.sort(key=lambda x: x[1], reverse=True)\n\n  # return the first 5 items \n  return frequency_list[:5]\n  \n# JavaScript\nfunction mostFrequentWords(str) {\n  // split string into an array of words\n  const words = str.split(' ');\n\n  // create a dictionary and store words and their frequency as key-value pairs\n  const frequencyDict = {};\n  words.forEach(word => {\n    if (!(word in frequencyDict)) {\n      frequencyDict[word] = 1;\n    } else {\n      frequencyDict[word] += 1;\n    }\n  });\n\n  // create array with words and their frequencies\n  const frequencyList = [];\n  for (let key in frequencyDict) {\n    frequencyList.push([key, frequencyDict[key]]);\n  }\n\n  // sort list by frequency in descending order\n  frequencyList.sort((a, b) => b[1] - a[1]);\n\n  // return the first 5 items\n  return frequencyList.slice(0, 5);\n}",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.00010345355953157537,
      "p_css": 0.009948237380632611,
      "p_html": 0.00444127413430224,
      "p_java": 7.093431447365304e-06,
      "p_javascript": 0.9790679675972267,
      "p_matlab": 0.0011067691889261727,
      "p_python": 0.0022111512567001552,
      "p_sql": 0.001957967230277119,
      "p_typescript": 0.0011560862209562682
    },
    {
      "text": "# Copyright (c) 2015 Xilinx Inc.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n\nimport os\nimport urlparse\nimport shutil\nimport datetime\n\nfrom hopper.utils.logger import *\nimport hopper.utils.git.tasks\nimport hopper.utils.git.repo\nimport hopper.source.meta\nimport threading\n\nclass Watcher:\n\tclass GroupState:\n\t\tdef __init__(self, layers):\n\t\t\tself.layers = layers\n\t\t\tself.refstate = {}\n\n\t\tdef getRefPairs(self):\n\t\t\tpairs = []\n\t\t\tfor i in self.layers:\n\t\t\t\tif i.source and isinstance(i.source, hopper.source.meta.GitSource):\n\t\t\t\t\tif i.source.canFetch():\n\t\t\t\t\t\t# TODO: handle ref/tag/commit properly below\n\t\t\t\t\t\tpairs.append((i.source.remote, \"refs/heads/\" + i.source.ref))\n\t\t\treturn pairs\n\n\t\tdef filterPairs(self, remoterefs):\n\t\t\tfilteredrefs = {}\n\t\t\tfor p in self.getRefPairs():\n\t\t\t\tif p[0] in remoterefs:\n\t\t\t\t\tfor i in remoterefs[p[0]].iteritems():\n\t\t\t\t\t\tif i[0] == p[1]:\n\t\t\t\t\t\t\tif p[0] not in filteredrefs:\n\t\t\t\t\t\t\t\tfilteredrefs[p[0]] = {}\n\t\t\t\t\t\t\tfilteredrefs[p[0]][i[0]] = i[1]\n\t\t\treturn filteredrefs\n\n\t\tdef update(self, remoterefs, trigger = False):\n\t\t\trrefs = self.filterPairs(remoterefs)\n\t\t\tpairs = self.getRefPairs()\n\n\t\t\tchanged = False\n\t\t\toldrefstate = self.refstate\n\t\t\tnewrefstate = {}\n\t\t\tfor i in pairs:\n\t\t\t\tif i[0] in rrefs:\n\t\t\t\t\tif i[1] in rrefs[i[0]]:\n\t\t\t\t\t\tnewcommit = rrefs[i[0]][i[1]]\n\t\t\t\t\t\tif i[0] not in newrefstate:\n\t\t\t\t\t\t\tnewrefstate[i[0]] = {}\n\t\t\t\t\t\tnewrefstate[i[0]][i[1]] = newcommit\n\t\t\t\t\t\tlog(\"remote: %s, ref: %s, value = %s\" % (i[0], i[1], newcommit))\n\n\t\t\t\t\t\tif trigger:\n\t\t\t\t\t\t\tchanged = True\n\t\t\t\t\t\tif oldrefstate != None:\n\t\t\t\t\t\t\tif i[0] in oldrefstate and i[1] in oldrefstate[i[0]]:\n\t\t\t\t\t\t\t\tif newrefstate[i[0]][i[1]] != oldrefstate[i[0]][i[1]]:\n\t\t\t\t\t\t\t\t\tchanged = True\n\n\t\t\tself.refstate = newrefstate\n\t\t\treturn changed\n\n\t\tdef cloneRefPin(self, remoterefs):\n\t\t\tfiltered = self.filterPairs(remoterefs)\n\n\t\t\t# create layers that match the layers object, fill in pinned refs\n\t\t\tpinnedlayers = hopper.source.meta.LayerCollection(self.layers.defaultversion)\n\t\t\tfor i in self.layers:\n\t\t\t\tif isinstance(i.source, hopper.source.meta.GitSource):\n\t\t\t\t\t# TODO: fixup pciking of ref name\n\t\t\t\t\trefname = \"refs/heads/\" + i.source.ref\n\t\t\t\t\trefpin = None\n\t\t\t\t\tif i.source.remote in filtered:\n\t\t\t\t\t\trefs = filtered[i.source.remote]\n\t\t\t\t\t\tif refname in refs:\n\t\t\t\t\t\t\trefpin = refs[refname]\n\t\t\t\t\tnewsource = hopper.source.meta.GitSource(i.source.remote, refpin)\n\t\t\t\telse:\n\t\t\t\t\tnewsource = i.source\n\t\t\t\tpinnedlayers.add(i.getFullName(), newsource)\n\t\t\treturn pinnedlayers\n\n\tdef __init__(self, environment):\n\t\tself.environment = environment\n\t\tself.stop = threading.Event()\n\t\tself.thread = None\n\t\tself.interval = 0\n\n\t\tself.lock = threading.RLock()\n\t\tself.groups = []\n\n\t\tself.changeevent = threading.Condition()\n\t\tself.changequeue = []\n\n\tdef addLayers(self, layers):\n\t\tgroup = Watcher.GroupState(layers)\n\t\tself.groups.append(group)\n\n\tdef start(self, interval = 30):\n\t\tif self.thread and self.thread.isAlive():\n\t\t\treturn\n\n\t\tself.interval = interval\n\t\tself.thread = threading.Thread(target = self.__worker__)\n\t\tself.daemon = True\n\t\tself.thread.start()\n\n\tdef stop(self):\n\t\tif self.thread and self.thread.isAlive():\n\t\t\tself.stop.set()\n\t\t\tself.thread.join()\n\n\tdef alive(self):\n\t\tif self.thread and self.thread.isAlive():\n\t\t\treturn True\n\t\treturn False\n\n\tdef trigger(self):\n\t\tself.__check__(True)\n\n\tdef __check__(self, trigger = False):\n\t\twith self.lock:\n\t\t\thaschanges = False\n\n\t\t\tremotes = []\n\t\t\tfor i in self.groups:\n\t\t\t\tfor p in i.getRefPairs():\n\t\t\t\t\tif p[0] not in remotes:\n\t\t\t\t\t\tremotes.append(p[0])\n\n\t\t\tself.environment.debug(\"need to update for the following remotes -> %s\" % remotes)\n\n\t\t\trefstate = {}\n\t\t\tfor i in remotes:\n\t\t\t\tself.environment.log(\"Grabbing refs from remote for %s\" % i)\n\t\t\t\tresult = hopper.utils.git.tasks.GitTask.run([\"ls-remote\", i], environment = self.environment)\n\t\t\t\tif result[0] == 0:\n\t\t\t\t\trefstate[i] = {}\n\t\t\t\t\tfor r in result[1].splitlines():\n\t\t\t\t\t\tparts = r.split()\n\t\t\t\t\t\trefstate[i][parts[1]] = parts[0]\n\t\t\t\t\tself.environment.debug(\"got refs -> %s\" % repr(refstate[i]))\n\t\t\t\telse:\n\t\t\t\t\tself.environment.error(\"Failed to get remote state for '%s' error message = %s\" % (i, result[1]))\n\t\t\t\t\treturn\n\n\t\t\thaschanges = False\n\t\t\tfor i in self.groups:\n\t\t\t\tif i.update(refstate, trigger):\n\t\t\t\t\tself.environment.log(\"Changes have happened since last check, pinning\")\n\t\t\t\t\tchanges = i.cloneRefPin(refstate)\n\t\t\t\t\tself.changequeue.append((i.layers, changes, datetime.datetime.utcnow()))\n\t\t\t\t\thaschanges = True\n\n\t\tif haschanges:\n\t\t\twith self.changeevent:\n\t\t\t\tself.changeevent.notifyAll()\n\n\tdef __worker__(self):\n\t\twhile not self.stop.wait(self.interval):\n\t\t\tself.__check__()\n\n\tdef wait(self):\n\t\tif self.alive():\n\t\t\tif self.hasnext():\n\t\t\t\treturn\n\n\t\t\twith self.changeevent:\n\t\t\t\tself.changeevent.wait()\n\n\tdef hasnext(self):\n\t\twith self.lock:\n\t\t\tif len(self.changequeue) != 0:\n\t\t\t\treturn True\n\t\treturn False\n\n\tdef getnext(self):\n\t\twith self.lock:\n\t\t\tif len(self.changequeue) != 0:\n\t\t\t\treturn self.changequeue.pop()\n\t\treturn None\n\n",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 8.104149278109807e-05,
      "p_css": 0.021995657571129045,
      "p_html": 0.035860501877756856,
      "p_java": 1.1835998162909001e-07,
      "p_javascript": 0.00012798235961865344,
      "p_matlab": 0.0002378758230477134,
      "p_python": 0.0030210465209119775,
      "p_sql": 0.9277796088061276,
      "p_typescript": 0.0108961671886451
    },
    {
      "text": "import nltk\nimport pandas as pd\nimport numpy as np\n\n# Input text\ntext = \"This is a sample text for Keyword extraction.\"\n\n# Tokenize words\nwords = nltk.word_tokenize(text)\n\n# Initialize corpus\ncorpus = []\n\n# Convert tokens to lowercase\nfor word in words:\n     corpus.append([word.lower()])\n\n# Get unigrams\nwordsFreq = pd.DataFrame(corpus, columns=['Word'])\n\n# Calculate document frequency\ndf = wordsFreq.groupby('Word').size().reset_index(name='Doc Frequency')\n\n# Calculate term frequency\ntf = wordsFreq['Word'].value_counts().reset_index(name='Term Frequency')\n\n# Merge both frequencies for computing TF - IDF\ntfidf = pd.merge(df, tf, on='Word', how='inner')\n\n# Calculate Inverse Document Frequency\ntfidf['Inverse Document Frequency'] = np.log(len(text)/(tfidf['Doc Frequency'] + 1))\n\n# Calculate TF - IDF\ntfidf['TF - IDF'] = tfidf['Term Frequency'] * tfidf['Inverse Document Frequency']\n\n# Sort words by TF - IDF in descending order\ntfidf.sort_values('TF - IDF', ascending=False, inplace=True)\n\n# Print the most important words\nprint(tfidf[:5]['Word'])\n# Output:\n# 0      sample\n# 1   keyword\n# 2    extract\n# 3        for\n# 4        this",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007110100309638533,
      "p_css": 0.09486507221408866,
      "p_html": 0.08379300144195838,
      "p_java": 0.0006642680371592467,
      "p_javascript": 0.0013903208283756836,
      "p_matlab": 0.0014988827627464279,
      "p_python": 0.7256171081675106,
      "p_sql": 0.08127026014179076,
      "p_typescript": 0.00379098609673184
    },
    {
      "text": "def add_key_value_pair(dict, key, value): \n    dict[key] = value\n    return dict\n\nmy_dict = {}\nmy_dict = add_key_value_pair(my_dict, 'age', 23)\nprint(my_dict)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 9.710603005856984e-06,
      "p_css": 0.9997569594394488,
      "p_html": 3.0322140703540164e-05,
      "p_java": 2.3922058512937814e-06,
      "p_javascript": 1.5605728363119367e-05,
      "p_matlab": 0.0001057574336860875,
      "p_python": 5.6520811156822444e-05,
      "p_sql": 7.186268549926723e-06,
      "p_typescript": 1.5545369234590844e-05
    },
    {
      "text": "import tkinter as tk\n\nroot = tk.Tk()\nroot.title('My App')\n\n# Create a label\nlabel = tk.Label(root, text=\"Hello, World!\")\nlabel.pack()\n\n# Create a button\nbutton = tk.Button(root, text = \"Click Me!\")\nbutton.pack()\n\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04944854064761959,
      "p_css": 0.035863183010213164,
      "p_html": 0.2300945381041856,
      "p_java": 4.096375611947554e-06,
      "p_javascript": 0.013913739622311874,
      "p_matlab": 0.0025065558207693368,
      "p_python": 0.5015156268286893,
      "p_sql": 0.06893233399752186,
      "p_typescript": 0.09772138559307726
    },
    {
      "text": "def has_even_product(numbers):\n for i in range(len(numbers)):\n for j in range(i+1, len(numbers)):\n if numbers[i] * numbers[j] % 2 == 0:\n return True\n return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.89557942179488e-08,
      "p_css": 1.7862330712049662e-08,
      "p_html": 2.1182570759064243e-06,
      "p_java": 0.00042230948892163066,
      "p_javascript": 1.7332838652415283e-07,
      "p_matlab": 4.8987308877183035e-09,
      "p_python": 0.9995746892598342,
      "p_sql": 5.654717279692408e-07,
      "p_typescript": 4.24771981228293e-08
    },
    {
      "text": "# Using Python\n\ndef reverseNumber(number):\n    reversed = 0\n    while(number > 0):\n        digit = number%10\n        reversed = reversed*10 + digit\n        number = number//10\n    \n    return reversed\n\nnumber = 12345\nreverse = reverseNumber(number)\nprint(reverse) \n# Output: 54321",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016987947569125984,
      "p_css": 0.0021054044432124762,
      "p_html": 0.0007894024352415425,
      "p_java": 4.068247830082229e-06,
      "p_javascript": 6.281575898899302e-05,
      "p_matlab": 4.57349970841496e-05,
      "p_python": 0.9949034717425391,
      "p_sql": 1.8655694970863833e-05,
      "p_typescript": 0.000371651923220332
    },
    {
      "text": "def reverse_words(string):\n    words = string.split(\" \")\n    output_string = \"\"\n    for word in words:\n        output_string += word[::-1] + \" \"\n    return output_string.strip()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.87862148205281e-06,
      "p_css": 0.003269193276931313,
      "p_html": 0.0035434608964756992,
      "p_java": 0.2732364471027333,
      "p_javascript": 1.2448305231137783e-07,
      "p_matlab": 6.978732894936796e-05,
      "p_python": 0.5666860399254173,
      "p_sql": 0.1531166460391152,
      "p_typescript": 7.142232584337822e-05
    },
    {
      "text": "import numpy as np\n\ndef linear_interpolation(x, y):\n    '''Linear interpolation on given dataset.'''\n    points = list(zip(x, y))\n    x_new, y_new = zip(*[(x_i, np.interp(x_i, x, y)) for x_i in np.arange(1,max(x))])\n    points_new = list(zip(x_new, y_new))\n    return points + points_new\n\nx=[1,2,3]\ny=[2,4,6]\n\nprint(linear_interpolation(x, y))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003467343576419303,
      "p_css": 0.009598953508397429,
      "p_html": 0.0017798259820432122,
      "p_java": 7.265330583626596e-05,
      "p_javascript": 7.621834580381784e-05,
      "p_matlab": 0.0011502277237160645,
      "p_python": 0.9722490258047694,
      "p_sql": 0.0025573167426361978,
      "p_typescript": 0.009048435010378414
    },
    {
      "text": "#!/usr/bin/env python\nimport urllib\nimport urllib2\nimport time\nimport getopt\nimport sys\nimport os\nimport timeit\nimport platform\nimport subprocess\nimport re\n\nREFERENCE_URL = 'http://stash.osgconnect.net/+sthapa/100MB_ref'\nWSGI_URL = 'http://web-dev.ci-connect.net/~sthapa/record_network_test.wsgi'\n\ndef download_file():\n    \"\"\"\n    Download file and then remove it\n    \"\"\"  \n    webref = urllib2.urlopen(REFERENCE_URL)\n    foo = webref.read()\n\ndef get_host_info():\n    \"\"\"\n    GET host information\n    \"\"\"\n    host_info = {}\n    if 'OSG_SITE_NAME' in os.environ:\n        host_info['site'] = os.environ['OSG_SITE_NAME']\n    elif 'GLIDEIN_RESOURCE_NAME' in os.env:\n        host_info['site'] = os.envron['GLIDEIN_RESOURCE_NAME']\n    host_info['hostname']  =  platform.node()    \n    return host_info\n\ndef send_record(test_record = None):\n    \"\"\"\n    Send record to wsgi \n    \"\"\"\n    if test_record is None:\n        return\n    try:\n        temp = test_record.copy()\n        if 'latency' in temp:\n            del temp['latency']\n        bandwidth_req = WSGI_URL + '?' + urllib.urlencode(temp)\n        req = urllib2.urlopen(bandwidth_req)\n        temp = test_record.copy()\n        if 'bandwidth' in temp:\n            del temp['bandwidth']\n        latency_req = WSGI_URL + '?' + urllib.urlencode(temp)\n        req = urllib2.urlopen(latency_req)\n    except Exception, e:\n        pass\n\ndef get_latency():\n    \"\"\"\n    Test ping time latency to stash\n    \"\"\"\n    try:\n        ping_output = subprocess.check_output(['/bin/ping', '-c', '10', 'stash.osgconnect.net'])\n    except AttributeError:\n        process = subprocess.Popen(['/bin/ping', '-c', '10', 'stash.osgconnect.net'], stdout=subprocess.PIPE)\n        ping_output = process.communicate()[0]\n    ping_regex = re.compile(r'rtt.*=\\s+[\\d.]+/([\\d.]+)')\n    match = ping_regex.search(ping_output)\n    if match:\n        return float(match.group(1))\n    return 0.0\n\ndef main():\n    test_record = get_host_info()\n    test_record['date'] = time.time()\n    download_times = timeit.Timer('download_file()', \"from __main__ import download_file\").repeat(repeat = 5, number = 1)\n    avg_time = 0.0\n    records = 0\n    for x in download_times:\n        if x < 0.005:\n            continue\n        avg_time += x\n        records += 1\n    test_record['bandwidth']  = float(100 * 2**20) / (avg_time / float(records))\n    test_record['latency'] = get_latency()\n    send_record(test_record)\n\nif __name__ == \"__main__\":\n    main()\n",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9791825685133921,
      "p_css": 0.0024656709158045473,
      "p_html": 0.0018346212398620697,
      "p_java": 1.478167330291163e-07,
      "p_javascript": 3.951748570435957e-05,
      "p_matlab": 0.016177100185854366,
      "p_python": 8.557471712901507e-05,
      "p_sql": 0.00018043259627663114,
      "p_typescript": 3.4366529243911705e-05
    },
    {
      "text": "def mean(list):\n    \"\"\"Calculate the mean of the given list.\"\"\"\n    total = 0\n    for i in list:\n        total += i\n    return total / len(list)\n\n# Usage Example\nlist = [1, 2, 3, 4, 5]\nmean = mean(list)\nprint(mean)  # 3.0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015236734359544015,
      "p_css": 0.0043783355982741435,
      "p_html": 0.004250740698096017,
      "p_java": 0.0006712725983320373,
      "p_javascript": 0.00337646451667111,
      "p_matlab": 0.0035012734027296184,
      "p_python": 0.9577918462957002,
      "p_sql": 0.018529874387304385,
      "p_typescript": 0.007347825159297012
    },
    {
      "text": "vat_number = \"DE1905303456\"\n\nvat_number_without_check_digit = vat_number[:-1]\n\nsum = 0\nfor c in vat_number_without_check_digit:\n if c.isdigit():\n sum += int(c)\n\nprint(f'Sum of digits: {sum}')",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.316893625463696e-06,
      "p_css": 1.4314084654684567e-06,
      "p_html": 2.0975788446139925e-05,
      "p_java": 0.9999465890107846,
      "p_javascript": 5.67881823316234e-06,
      "p_matlab": 5.606225557405058e-06,
      "p_python": 6.287275290566129e-06,
      "p_sql": 5.140181326193362e-06,
      "p_typescript": 4.974398271003394e-06
    },
    {
      "text": "#!/usr/bin/env python\n\n# Input list of strings\ninput_strings = [\"This\",\"is\",\"a\",\"list\",\"of\",\"strings\",\"this\",\"list\",\"contains\",\"duplicate\",\"words\"]\n\n# Create empty list for unique words\noutput_words = []\n\n# Loop through each string\nfor current_string in input_strings:\n    # Split strings into separate words\n    current_words = current_string.split(\" \")\n\n    # Loop through each word\n    for current_word in current_words:\n        # If word is not already in the output list, add it\n        if current_word not in output_words:\n            output_words.append(current_word)\n\n# Print out list of unique words\nprint(output_words)",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.02100183410994594,
      "p_css": 0.001452965290137971,
      "p_html": 0.01566885080622481,
      "p_java": 0.012534024722595708,
      "p_javascript": 0.0061767639549370435,
      "p_matlab": 0.007305456099829164,
      "p_python": 0.07316130782852001,
      "p_sql": 0.8621591834831918,
      "p_typescript": 0.0005396137046176213
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# make an HTTP request to the given URL\nr = requests.get(url)\n\n# parse the response\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# find all the links on the page\nlinks = soup.find_all('a')\nexternal_links = []\n\n# loop through the links and extract the external ones\nfor link in links:\n    href = link.get('href')\n    # check if the link is valid and external (not on the same page)\n    if href and href.startswith('http'):\n        external_links.append(href)\n\n# print the list of external links\nprint(external_links)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 4.193678772406233e-05,
      "p_css": 0.00041505443997693286,
      "p_html": 0.006216595041549915,
      "p_java": 3.769229424287983e-07,
      "p_javascript": 0.002981358420814812,
      "p_matlab": 0.011344875545345896,
      "p_python": 0.00891153310373924,
      "p_sql": 0.0020936317264945614,
      "p_typescript": 0.9679946380114123
    },
    {
      "text": "for num in range (0, 1000):\n    order = len(str(num))\n    s = 0\n    x = num\n    while x > 0:\n        d = x % 10\n        x = x // 10\n        s += d ** order\n    if num == s:\n        print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.601451964234002e-13,
      "p_css": 2.8140478127066624e-17,
      "p_html": 7.062026702827626e-12,
      "p_java": 1.6448027817416853e-13,
      "p_javascript": 1.6774528048831536e-12,
      "p_matlab": 0.9999999988970525,
      "p_python": 1.0926992567726913e-09,
      "p_sql": 4.995844722270928e-13,
      "p_typescript": 1.8461371433897717e-13
    },
    {
      "text": "list1 = [2, 3, 5, 8]\nlist2 = [1, 4, 5, 9]\n\ncommon_elements =  [element for element in list1 if element in list2]\n\nprint(common_elements)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.953996939374776e-09,
      "p_css": 5.53833002656851e-09,
      "p_html": 1.5175136480265309e-09,
      "p_java": 5.126337877345979e-10,
      "p_javascript": 1.2659081182279818e-09,
      "p_matlab": 0.9999931715641823,
      "p_python": 6.812600436360409e-06,
      "p_sql": 3.672326354317773e-14,
      "p_typescript": 5.046962049820054e-09
    },
    {
      "text": "def counter(text):\n    \"\"\"\n    Function to count the occurrence of each word in the text using \n    a dictionary data structure.\n    \n    Parameters: \n    text (str): The given text to count.\n    \n    Returns: \n    dict: A dictionary of words with their counts.\n    \"\"\"\n    result = {}  # Create empty dictionary\n    for word in text.split():\n        if word in result: \n            result[word] += 1\n        else: \n            result[word] = 1\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002125197636876094,
      "p_css": 0.2498225227985787,
      "p_html": 0.0005180067685960181,
      "p_java": 3.059962598898381e-07,
      "p_javascript": 0.008538892913489624,
      "p_matlab": 2.0693233280076673e-05,
      "p_python": 0.46832355526966835,
      "p_sql": 0.03965386109834701,
      "p_typescript": 0.2329096421580927
    },
    {
      "text": "def sort_list(nums):\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.09162154949058e-06,
      "p_css": 1.1083998538707705e-05,
      "p_html": 1.5468016954198585e-05,
      "p_java": 1.1942723894452692e-06,
      "p_javascript": 1.5450978498032227e-06,
      "p_matlab": 0.00018623011763130797,
      "p_python": 0.999744117904337,
      "p_sql": 2.0534261350924284e-05,
      "p_typescript": 1.1734709399110674e-05
    },
    {
      "text": "import numpy as np\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier \n\n# Define the hyperparameters to optimize\nparam_grid={\n 'n_estimators': np.arange(2, 30, 2),  \n 'max_depth': np.arange(2, 12, 2),  \n 'min_samples_leaf': np.arange(1, 10, 2)\n}\n\n# Create GridSearchCV model object with the hyperparameters\nmodel = GridSearchCV(RandomForestClassifier(), param_grid, verbose=2, cv=3) \n\n# Fit the model to the data\nmodel.fit(X, y) \n\n# Print out the best estimator\nprint(model.best_estimator_)",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9501505789062725,
      "p_css": 0.020891719926414917,
      "p_html": 0.000990165323592636,
      "p_java": 5.407174901087843e-05,
      "p_javascript": 0.0009408454138543004,
      "p_matlab": 3.2861083513951515e-06,
      "p_python": 0.012280567308162562,
      "p_sql": 5.709024348604519e-08,
      "p_typescript": 0.01468870817409727
    },
    {
      "text": "\"\"\"\nWrite a Python script to iteratively apply a function to all the elements in a list.\n\"\"\"\n\ndef applyFunc(list_data, func):\n    result = []\n    for item in list_data:\n        result.append(func(item))\n    return result\n\nlist_data = [1, 2, 3, 4]\n\ndef square(x):\n    return x**2\n\nsquares = applyFunc(list_data, square)\nprint(squares)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.003601000464005232,
      "p_css": 0.0042451402657204245,
      "p_html": 0.002660979758143962,
      "p_java": 3.7841298032504436e-07,
      "p_javascript": 0.9852029746008774,
      "p_matlab": 0.00023185340323005684,
      "p_python": 0.0034494936261628066,
      "p_sql": 0.00014867073551130022,
      "p_typescript": 0.0004595087333683702
    },
    {
      "text": "import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# Load the MNIST dataset\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\n# Inputs and Outputs\nx = tf.placeholder(tf.float32, [None, 784])\ny_ = tf.placeholder(tf.float32, [None, 10])\n\n# Neural Network Model\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\n\n# Softmax Output\ny = tf.nn.softmax(tf.matmul(x, W) + b)\n\n# Cost Function\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n\n# Training\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\ninit = tf.initialize_all_variables()\n\nsess = tf.Session()\nsess.run(init)\n\n# Train\nfor i in range(10000):\n  batch_xs, batch_ys = mnist.train.next_batch(100)\n  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.01142336105779736,
      "p_css": 0.3807125467817135,
      "p_html": 0.017694826882810533,
      "p_java": 0.0004852029703051541,
      "p_javascript": 0.007995334018611818,
      "p_matlab": 0.008502790091320092,
      "p_python": 0.5321711957964231,
      "p_sql": 0.0018605986146741354,
      "p_typescript": 0.039154143786344235
    },
    {
      "text": "def subtract_timestamps(time1, time2):\n    time1_minutes = int(time1[0:2]) * 60 + int(time1[3:5])\n    if \"PM\" in time1:\n        time1_minutes += 12 * 60    \n    time2_minutes = int(time2[0:2]) * 60 + int(time2[3:5])\n    if \"PM\" in time2:\n        time2_minutes += 12 * 60\n\n    diff_minutes = time1_minutes - time2_minutes\n    diff_hours = int(diff_minutes / 60)\n    diff_minutes = diff_minutes - diff_hours * 60\n\n    print(str(diff_hours) + \":\" + str(diff_minutes))\n\nsubtract_timestamps(\"4:00:00 AM\", \"3:00:00 PM\")\n# Output: 12:00",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0006855011135003303,
      "p_css": 0.00010033448456590202,
      "p_html": 0.00031779381077102077,
      "p_java": 0.9962746374109508,
      "p_javascript": 6.724043948671078e-05,
      "p_matlab": 1.2636278683163744e-08,
      "p_python": 0.0025288458095458475,
      "p_sql": 3.917600079556511e-06,
      "p_typescript": 2.171669482119386e-05
    },
    {
      "text": "def calculate_sum(my_list):\n    \"\"\" Calculate the sum of all the elements in the list. \"\"\"\n    sum = 0\n    for elem in my_list:\n        sum += elem\n    return sum\n\nmy_list = [1,2,3,4,5,6]\ntotal_sum = calculate_sum(my_list)\nprint(\"The sum of all elements in the list is: %d\" %total_sum)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0037293060681345028,
      "p_css": 0.007309254256042613,
      "p_html": 0.01191570310874067,
      "p_java": 0.05059053426496304,
      "p_javascript": 0.3450099335523272,
      "p_matlab": 0.0015891792252907353,
      "p_python": 0.4464009988726523,
      "p_sql": 0.0329695369085293,
      "p_typescript": 0.10048555374331977
    },
    {
      "text": "def remove_key_by_value(dictionary, value):\n    keys_to_remove = []\n    for key, val in dictionary.items():\n        if val == value:\n            keys_to_remove.append(key)\n\n    for key in keys_to_remove:\n        del dictionary[key]\n    return dictionary",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.72563291200826e-06,
      "p_css": 0.9713696851472421,
      "p_html": 1.2798172552560963e-05,
      "p_java": 3.6974466920937174e-07,
      "p_javascript": 5.545584085905289e-06,
      "p_matlab": 0.028585471905419244,
      "p_python": 5.549923187914621e-06,
      "p_sql": 1.3247920272603865e-05,
      "p_typescript": 5.605969658567512e-06
    },
    {
      "text": "def insert(arr, x):\n    i = len(arr)-1\n    while (i >= 0 and x < arr[i]):\n        arr[i+1] = arr[i]\n        i = i-1\n    arr[i+1] = x\n    return arr\n  \n# Input array and element \narr = [1, 2, 3, 5] \nx = 4\n  \n# Calling Insert Function \narr = insert(arr, x) \n  \n# Print the modified array \nprint(arr)",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 2.2899197002386798e-05,
      "p_css": 9.861095432666677e-05,
      "p_html": 5.461456935679306e-06,
      "p_java": 2.9763283657624902e-06,
      "p_javascript": 0.00010741733764202812,
      "p_matlab": 0.9690510442176283,
      "p_python": 0.030635311993922408,
      "p_sql": 1.205831107501523e-06,
      "p_typescript": 7.50726830691407e-05
    },
    {
      "text": "import json\n\nclass Person:\n    def __init__(self, json_object):\n        self.first_name = json_object[\"first_name\"]\n        self.last_name = json_object[\"last_name\"] \n\n    def __str__(self):\n        return self.first_name + ' ' + self.last_name\n\njson_object = json.loads('{\"first_name\": \"John\", \"last_name\": \"Smith\"}')\n\nperson = Person(json_object)\nprint(person)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0017012184760082862,
      "p_css": 0.04047582740222101,
      "p_html": 0.030917991666530757,
      "p_java": 8.123451699038541e-05,
      "p_javascript": 0.004586088422480045,
      "p_matlab": 0.0001094926138518885,
      "p_python": 0.904456963373325,
      "p_sql": 0.016468779209131673,
      "p_typescript": 0.0012024043194609083
    },
    {
      "text": "def generateEvenNumber(start, end):\n  for num in range(start, end+ 1):\n    if num % 2 == 0:\n      yield num\n \nevens = []\nstart = 1\nend = 10\nfor even in generateEvenNumber(start, end):\n  evens.append(even)\n \nprint(evens)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4870312216380403e-06,
      "p_css": 5.665492739102626e-08,
      "p_html": 4.064140579893095e-06,
      "p_java": 1.3330159270487423e-07,
      "p_javascript": 3.7323325645677847e-07,
      "p_matlab": 0.9969296384306684,
      "p_python": 0.003058592092561585,
      "p_sql": 2.6071110749690825e-06,
      "p_typescript": 3.048004117009102e-06
    },
    {
      "text": "def string_to_int(string):\n    num = 0 \n    for char in string:\n        num = num * 10 + (ord(char) - ord('0')) \n    return num",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.653622558002175e-09,
      "p_css": 3.4688631182224755e-09,
      "p_html": 3.3507162551903344e-06,
      "p_java": 0.006289743027318274,
      "p_javascript": 4.023483617573007e-10,
      "p_matlab": 0.9871621924174434,
      "p_python": 0.006534298174950142,
      "p_sql": 9.662862240083472e-06,
      "p_typescript": 7.452769588184209e-07
    },
    {
      "text": "#!/usr/bin/env python\n# skeleton.py\n\ndef functionA():\n    pass\n\ndef functionB():\n    pass\n\ndef main():\n    functionA()\n    functionB()\n\nif __name__ == \"__main__\":\n    main()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999999798558186,
      "p_css": 1.1488760101022065e-09,
      "p_html": 2.7814587594629376e-09,
      "p_java": 1.8608779882186165e-12,
      "p_javascript": 7.337700082420354e-10,
      "p_matlab": 2.1067558567653636e-11,
      "p_python": 1.1045913899180477e-08,
      "p_sql": 4.400733233279065e-09,
      "p_typescript": 1.0500883732483419e-11
    },
    {
      "text": "def calculate_total_cost(base_price, additional_cost):\n return base_price + additional_cost",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016329463235998734,
      "p_css": 0.006225001399708222,
      "p_html": 0.003551321288522702,
      "p_java": 0.00039618687130780523,
      "p_javascript": 0.0011067410950131658,
      "p_matlab": 0.00020597094506602488,
      "p_python": 0.9838068484886983,
      "p_sql": 0.0011958465925075014,
      "p_typescript": 0.001879136995576472
    },
    {
      "text": "def sum_divisors(num): \n    r = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            r += i\n    return r\n\nnum = int(input(\"Input a number: \"))\nprint(\"Sum of all divisors of input is\", sum_divisors(num))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2131323611096692e-05,
      "p_css": 8.39903995367021e-11,
      "p_html": 9.317639379850897e-06,
      "p_java": 0.00021373425566879414,
      "p_javascript": 1.717984492176321e-06,
      "p_matlab": 0.9912441140329626,
      "p_python": 0.008517394444210258,
      "p_sql": 1.3724635750793368e-06,
      "p_typescript": 2.177721095509472e-07
    },
    {
      "text": "def removeRepeats(arr):\n    result = []\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n     return result\n\nres = removeRepeats([2, 3, 3, 4, 5, 4])\nprint(res)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.3629692487945537e-09,
      "p_css": 5.061495800286899e-11,
      "p_html": 3.3066504354943268e-09,
      "p_java": 2.379800292401243e-09,
      "p_javascript": 6.396337990828139e-10,
      "p_matlab": 0.9999939309976296,
      "p_python": 6.056071089743143e-06,
      "p_sql": 2.820755071585805e-09,
      "p_typescript": 2.3708568651434846e-09
    },
    {
      "text": "def is_armstrong_number(num): \n    n = len(str(num)) \n      \n    # initialize sum \n    sum = 0 \n  \n    # find the sum of the cube of each digit \n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** n \n        temp //= 10\n  \n    # if num is equal to the sum,  \n    # then the number is an Armstrong number \n    if num == sum: \n        return True \n    else: \n        return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.4642692241699236e-08,
      "p_css": 1.181622518590327e-09,
      "p_html": 2.1965526265073056e-06,
      "p_java": 1.976710615229817e-06,
      "p_javascript": 5.3770237771030175e-06,
      "p_matlab": 0.9999886731251073,
      "p_python": 2.663065854354315e-07,
      "p_sql": 2.4118092814518043e-08,
      "p_typescript": 1.4403388808153253e-06
    },
    {
      "text": "import re\n\ndef check_lowercase(text):\n    pattern = r\"^[a-z]*$\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002906433285156409,
      "p_css": 0.0005596301775329972,
      "p_html": 0.030804574471907625,
      "p_java": 1.413438644126954e-06,
      "p_javascript": 2.1862546406974932e-05,
      "p_matlab": 6.676315173728683e-06,
      "p_python": 0.9680794331925571,
      "p_sql": 0.0001496912743630438,
      "p_typescript": 8.607525489890635e-05
    },
    {
      "text": "def create_dictionary(n):\n  # Create an empty dictionary\n  dictionary = {}\n  \n  # Loop through each number\n  for i in range(1, n + 1):\n    # For each number, add an entry to the dictionary\n    dictionary[i] = i + 1\n    \n  # Return the dictionary\n  return dictionary",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00020164961237464622,
      "p_css": 0.15228079443919557,
      "p_html": 0.0022558291404492273,
      "p_java": 0.0002015534843556444,
      "p_javascript": 0.0012996097864782733,
      "p_matlab": 0.0003221876412489575,
      "p_python": 0.8242946565769286,
      "p_sql": 0.003688940433974733,
      "p_typescript": 0.015454778884994209
    },
    {
      "text": "def sortAlphabetically(strings): \n    strings.sort() \n    return strings \n\n#Test \nstrings = [\"hello\", \"world\", \"good\", \"morning\", \"programming\"]\nsorted_strings = sortAlphabetically(strings) \nprint(*sorted_strings)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.05506249190996321,
      "p_css": 0.014668333747772409,
      "p_html": 0.0028509706094929236,
      "p_java": 1.2353721201266355e-08,
      "p_javascript": 0.012331257136691132,
      "p_matlab": 0.00012222062868070217,
      "p_python": 0.9041661139640796,
      "p_sql": 0.001994366540741799,
      "p_typescript": 0.008804233108857279
    },
    {
      "text": "arr = [1, 3, 5, 3, 7, 3, 6]\ntarget = 3\n\ndef findIndex(arr, target): \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i \n  \n    return -1\n  \n# Driver Code \nindex = findIndex(arr, target) \nprint(\"Index of\", target, \"is\", index) \n\n// Output: Index of 3 is 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000764786293770031,
      "p_css": 7.104520138698811e-05,
      "p_html": 0.0008071570758499555,
      "p_java": 0.001265827429611625,
      "p_javascript": 0.00184511255004192,
      "p_matlab": 0.014251928939615589,
      "p_python": 0.9804060488773243,
      "p_sql": 3.43106120743812e-05,
      "p_typescript": 0.0005537830203253163
    },
    {
      "text": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\nX = data.iloc[:, [0,1]]\ny = data.iloc[:, 2] \n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Create an instance of Logistic Regression model\nclassifier = LogisticRegression()\n\n# Fit the model on the training data\nclassifier.fit(X_train, y_train)\n\n# Make predictions using the test data\ny_pred = classifier.predict(X_test)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.03281191337857012,
      "p_css": 0.16292060335142244,
      "p_html": 0.011574971920919557,
      "p_java": 1.6852034591859808e-06,
      "p_javascript": 0.00022779812680334208,
      "p_matlab": 6.8554390495360034e-06,
      "p_python": 0.11194701193522537,
      "p_sql": 7.33844589841148e-05,
      "p_typescript": 0.6804357761855663
    },
    {
      "text": "def maxSubArraySum(arr, length):  \n    max_so_far = 0\n    max_ending_here = 0 \n    for i in range(0, length):  \n        max_ending_here = max_ending_here + arr[i]  \n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here: \n            max_so_far = max_ending_here  \n    return max_so_far",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0036226454566405017,
      "p_css": 0.003588965202417476,
      "p_html": 0.0038544017384012177,
      "p_java": 0.0006880720759989911,
      "p_javascript": 0.007604750527072257,
      "p_matlab": 0.38153895533646154,
      "p_python": 0.5942534559633921,
      "p_sql": 0.0014084746271838355,
      "p_typescript": 0.003440279072432115
    },
    {
      "text": "def compare_list(list1, list2): \n \n    # store comparison in results  \n    results = [] \n  \n    # iterate through lists \n    for x in list1: \n        for y in list2: \n            if x == y:  \n                results.append(x) \n  \n    # return result \n    return results \n\n# Driver code  \nlist1 = [1, 2, 3, 4, 5] \nlist2 = [2, 3, 8, 9, 10] \n\nprint(compare_list(list1, list2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.290702470789223e-05,
      "p_css": 0.00262611389136658,
      "p_html": 0.0002818264326440308,
      "p_java": 2.0027638571179902e-05,
      "p_javascript": 0.004079286774273321,
      "p_matlab": 0.006485335391422348,
      "p_python": 0.9853896692444863,
      "p_sql": 0.0008388674795923695,
      "p_typescript": 0.00021596612293580146
    },
    {
      "text": "import random\nimport numpy as np\n\ndef differential_evolution(f, bounds, mut=0.8, crossp=0.7, popsize=20, its=1000):\n\n # Initialization\n dim = len(bounds)\n population = np.random.rand(popsize, dim)\n min_b, max_b = np.asarray(bounds).T\n diff = np.fabs(min_b - max_b)\n population_denorm = min_b + population * diff\n\n fitness = np.asarray([f(ind) for ind in population_denorm])\n\n best_idx = np.argmin(fitness)\n best = population_denorm[best_idx]\n\n for i in range(its):\n for j in range(popsize):\n\n # Mutation\n  idxs = [idx for idx in range(popsize) if idx != j]\n a, b, c = population[np.random.choice(idxs, 3, replace = False)]\n mutation = a + mut * (b - c)\n mutation = np.clip(mutation, 0, 1)\n\n # Crossover\n cross_points = np.random.rand(dim) < crossp\n if not np.any(cross_points):\n   cross_points[np.random.randint(0, dim)] = True\n trial = np.where(cross_points, mutation, population[j])\n trial_denorm = min_b + trial * diff\n\n # Selection\n f = f(trial_denorm)\n if f < fitness[j]:\n   fitness[j] = f\n   population[j] = trial\n   if f < fitness[best_idx]:\n     best_idx = j\n     best = trial_denorm\n\n # Printing\n print(\"Iteration: {}, Best Value: {:.4f}\".format(i, f))\n\n return best\n\n# Function to optimize\ndef function(x):\n return x**2 - 0.5 * x - 2\n\n# Search Space\nbounds = [(-10, 10)]\n\n# Run the optimization\nresult = differential_evolution(function, bounds)\nprint(\"Optimized Value: {:.4f}\".format(function(result)))",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 0.0324930499558198,
      "p_css": 0.03447264348465239,
      "p_html": 0.013216862018872753,
      "p_java": 0.00011196137118157622,
      "p_javascript": 0.19319731769007556,
      "p_matlab": 0.4313084392512227,
      "p_python": 0.1280353975811679,
      "p_sql": 0.16496816728217062,
      "p_typescript": 0.0021961613648367457
    },
    {
      "text": "import json\n\ndata = {\n    'name': 'root',\n    'children': [\n        {\n            'name': 'a',\n            'children': [\n                {\n                    'name': 'b',\n                    'children': []\n                }\n            ]\n        }\n    ]\n}\n\njson_string = json.dumps(data, indent=4)\nprint(json_string)\n\n# output\n{\n    \"name\": \"root\",\n    \"children\": [\n        {\n            \"name\": \"a\",\n            \"children\": [\n                {\n                    \"name\": \"b\",\n                    \"children\": []\n                }\n            ]\n        }\n    ]\n}",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 0.0012056715851835368,
      "p_css": 0.027983126968618894,
      "p_html": 0.0004657591849868882,
      "p_java": 0.96831090754082,
      "p_javascript": 3.5869194629001066e-08,
      "p_matlab": 1.2462397382108604e-05,
      "p_python": 0.0019549434508068907,
      "p_sql": 3.150763778682266e-05,
      "p_typescript": 3.5585365220303584e-05
    },
    {
      "text": "# import the module\nimport calendar\n\n# print the calendar \nprint(calendar.month(2021, 5))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.019523177531533688,
      "p_css": 0.06394283605031717,
      "p_html": 0.02343645421834409,
      "p_java": 0.00017721869318662706,
      "p_javascript": 0.011878813261926956,
      "p_matlab": 0.001384171331115415,
      "p_python": 0.7077003863051134,
      "p_sql": 0.005073328694378821,
      "p_typescript": 0.16688361391408385
    },
    {
      "text": "def fibonacci(n): \n if n == 0: \n return 0\n elif n == 1: \n return 1\n else:\n return fibonacci(n - 1) + fibonacci(n - 2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.3785920079166204e-06,
      "p_css": 7.931814103901814e-06,
      "p_html": 5.072867569979797e-06,
      "p_java": 4.034051151118403e-07,
      "p_javascript": 1.4727500908182625e-06,
      "p_matlab": 3.319625913221078e-07,
      "p_python": 0.9999787480362066,
      "p_sql": 2.5764372327806895e-06,
      "p_typescript": 1.0841350817234062e-06
    },
    {
      "text": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx = np.array([[5, 6], [3, 4], [7, 9], [4, 5]])\ny = np.array([7, 5, 11, 7])\n\nmodel = LinearRegression().fit(x, y)\n\nprint(model.coef_)\nprint(model.intercept_)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9908402359849419,
      "p_css": 7.698940833842953e-05,
      "p_html": 3.159851047721039e-05,
      "p_java": 4.775555238724806e-07,
      "p_javascript": 2.8446602266492793e-07,
      "p_matlab": 1.3627914617546515e-05,
      "p_python": 0.009032361433111763,
      "p_sql": 2.0560314125558107e-10,
      "p_typescript": 4.424521363520309e-06
    },
    {
      "text": "my_list = []\n\nwhile True:\n    user_input = input('Type something: ')\n    if user_input == 'stop':\n        break\n    my_list.append(user_input)\n\nprint(my_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008275021762729788,
      "p_css": 0.07077772661605962,
      "p_html": 0.13985856548054118,
      "p_java": 0.0013871969246883648,
      "p_javascript": 0.00289182399395612,
      "p_matlab": 0.07762059477083175,
      "p_python": 0.6947356155201615,
      "p_sql": 0.003390281821551599,
      "p_typescript": 0.0010631731094801343
    },
    {
      "text": "import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\ndata_dim = 30\nnum_classes = 2\n\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_dim=data_dim))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(x_train, y_train,\n          epochs=10,\n          batch_size=32)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7099336277536087,
      "p_css": 0.0026304300522201904,
      "p_html": 0.08145428358099734,
      "p_java": 0.0005184730362456832,
      "p_javascript": 4.553798380454457e-05,
      "p_matlab": 9.22370843802385e-06,
      "p_python": 0.20424718786272344,
      "p_sql": 2.759439507841931e-06,
      "p_typescript": 0.0011584765824542832
    },
    {
      "text": "def factorial(x):\n    result = 1\n    for i in range(1,x+1):\n        result = result*i\n    return result\n    \nprint(factorial(5))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.524552703566471e-08,
      "p_css": 4.618972685056599e-06,
      "p_html": 2.4201015033984904e-07,
      "p_java": 3.896708696129185e-09,
      "p_javascript": 4.595386244384804e-08,
      "p_matlab": 1.9532346742079915e-06,
      "p_python": 0.9999907985797964,
      "p_sql": 2.200648901452107e-06,
      "p_typescript": 1.0145769435546967e-07
    },
    {
      "text": "import matplotlib.pyplot as plt\n\ndef create_histogram(data):\n    plt.hist(data, bins=20)\n    plt.title('Histogram of Input Data')\n    plt.show()\n\n# Example data\ndata = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1]\n\ncreate_histogram(data)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 2.4796710553268152e-05,
      "p_css": 0.026906853016564657,
      "p_html": 0.917904614305301,
      "p_java": 0.00020072466920538688,
      "p_javascript": 0.00010050652014698198,
      "p_matlab": 1.087575731565656e-05,
      "p_python": 0.048502247989949926,
      "p_sql": 0.0035342131557926583,
      "p_typescript": 0.0028151678751704642
    },
    {
      "text": "import requests \nimport json \nimport pandas as pd\n\ndef predict_tree(geojson, tree_type):\n    # Make a request to the API \n    url = \"http://api.example.com\"\n    response = requests.post(url, data=geojson)\n    \n    # Parse the json of the response\n    data = json.loads(response.text)\n    \n    # Check for errors\n    if data[\"error\"]:\n        print(data[\"error\"])\n        return\n    \n    # Create a pandas DataFrame from the response\n    df = pd.DataFrame(data[\"tree_data\"])\n    \n    # Calculate the probability of the tree_type\n    risk = df[tree_type].sum() / df[\"total_trees\"].sum()\n    \n    return risk",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.0154556559635713e-09,
      "p_css": 0.9893979616817649,
      "p_html": 0.00040095613568320745,
      "p_java": 0.0004951960620506945,
      "p_javascript": 2.8226958992668764e-05,
      "p_matlab": 3.473822479829407e-08,
      "p_python": 0.0013444520376556168,
      "p_sql": 0.000832733611091661,
      "p_typescript": 0.007500436759080613
    },
    {
      "text": "def to_int(string):\n    '''This function takes a string and converts it to an integer.'''\n    return int(string)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.478377236359701e-15,
      "p_css": 3.450930865062796e-10,
      "p_html": 1.6703262406737782e-10,
      "p_java": 0.999999947701549,
      "p_javascript": 3.822541102508147e-13,
      "p_matlab": 9.106049862772382e-15,
      "p_python": 4.061073324846319e-08,
      "p_sql": 1.9732059433950637e-09,
      "p_typescript": 9.20198837672207e-09
    },
    {
      "text": "from flask import Flask, jsonify, request\n\n# Initialize the Flask application\napp = Flask(__name__)\n\n# Define a list to hold the resource\n<Resource Name> = []\n\n# Define the route for the resource\n@app.route('/<Resource Name>', methods=['GET', 'POST', 'DELETE'])\ndef <Resource Name>_route():\n if request.method == 'GET':\n # Return the list of <Resource Name>\n return jsonify(<Resource Name>)\n\n elif request.method == 'POST':\n # Create a <Resource Name>\n <Resource Name>.append(request.get_json())\n # Return the added <Resource Name>\n return jsonify(<Resource Name>[-1])\n\n elif request.method == 'DELETE':\n # Delete a <Resource Name>\n <Resource Name>.remove(request.get_json())\n # Return an empty list\n return jsonify([])\n\nif __name__ == '__main__':\n app.run(debug=True)",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 0.10606485386628238,
      "p_css": 0.05824406945760415,
      "p_html": 0.0007615885575558498,
      "p_java": 0.8284485946432844,
      "p_javascript": 1.1982965438035199e-05,
      "p_matlab": 1.9859684378882593e-05,
      "p_python": 0.0030507828872259266,
      "p_sql": 0.0022010850828632546,
      "p_typescript": 0.0011971828553671254
    },
    {
      "text": "def fibonacci(n):\n    # store the already calculated values in the dictionary\n    memo = {0:0, 1:1}\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = fibonacci(n-1) + fibonacci(n-2)\n        return memo[n]",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.009101929525962392,
      "p_css": 0.04715075069491287,
      "p_html": 0.012539437362372336,
      "p_java": 0.0005608207801007873,
      "p_javascript": 0.01875657904645604,
      "p_matlab": 0.009775707475739777,
      "p_python": 0.8547879645248968,
      "p_sql": 0.0032621069283932888,
      "p_typescript": 0.04406470366116582
    },
    {
      "text": "import numpy as np\n\nclass Perceptron:\n    def __init__(self, num_inputs, learning_rate=0.01):\n        self.learning_rate = learning_rate\n        # Initiailizing the weights to random values\n        self.weights = np.random.rand(num_inputs)\n    \n    def predict(self, inputs):\n        # Compute the dot product between inputs and weights\n        weighted_sum = np.dot(inputs, self.weights)\n        # The output is either 0 or 1 depending on the weighted sum\n        result = int(weighted_sum > 0)\n        return result\n    \n    def train(self, inputs, desired_output):\n        # Calculate the prediction error\n        prediction = self.predict(inputs)\n        error = desired_output - prediction\n        # Update the weights\n        self.weights += self.learning_rate * error * inputs",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0062894719470580895,
      "p_css": 0.048231783270725366,
      "p_html": 0.024156870525276233,
      "p_java": 0.0001575518680300788,
      "p_javascript": 0.00101752584146202,
      "p_matlab": 1.068621694883994e-06,
      "p_python": 0.6929761245730502,
      "p_sql": 0.11006375576706715,
      "p_typescript": 0.11710584758563593
    },
    {
      "text": "# Import the necessary libraries \nfrom sklearn.datasets import fetch_openml\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n#Load the dataset\nmnist = fetch_openml('mnist_784')\n\n# Split into features and labels\nX = mnist.data\ny = mnist.target\n\n# Reshape data to be valid\nX = X.reshape((X.shape[0], -1))\nprint(X.shape, y.shape)\n\n# Create a Logistic Regression classifier \nclf = LogisticRegression()\n\n# Fit the model to the data \nclf.fit(X, y)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.03435785111210541,
      "p_css": 0.01793465664251475,
      "p_html": 0.0003259173701114049,
      "p_java": 4.0972440031765823e-07,
      "p_javascript": 1.7558353916253143e-05,
      "p_matlab": 1.92947135947035e-06,
      "p_python": 0.024846362843915764,
      "p_sql": 5.206501556573438e-07,
      "p_typescript": 0.922514793831521
    },
    {
      "text": "def string_length(string):\n    print(len(string))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.638282432846289e-13,
      "p_css": 5.732664485885707e-07,
      "p_html": 3.32774049556031e-08,
      "p_java": 0.9996466973013028,
      "p_javascript": 6.232490002730072e-15,
      "p_matlab": 3.316660213532314e-11,
      "p_python": 0.00034692688318335913,
      "p_sql": 5.762220426110911e-06,
      "p_typescript": 7.017697533947957e-09
    },
    {
      "text": "def find_length(string):\n  return len(string)\n\nprint(find_length(\"Hello World!\")) # Output: 12",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007172649189745534,
      "p_css": 0.001757711668502142,
      "p_html": 0.0008653136174587391,
      "p_java": 1.7309381885111211e-06,
      "p_javascript": 4.980689546279558e-07,
      "p_matlab": 1.8608557093710653e-07,
      "p_python": 0.996088602373352,
      "p_sql": 0.0005613560003556999,
      "p_typescript": 7.336328642704387e-06
    },
    {
      "text": "class ShoppingCart:\n    def __init__(self):\n        self.cart_items = []\n            \n    def add_item(self, item):\n        self.cart_items.append(item)\n\n    def remove_item(self, item):\n        self.cart_items.remove(item)\n\n    def calculate_cost(self):\n        total_cost = 0\n        for item in self.cart_items:\n            total_cost += item.price\n        return total_cost",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.566168239806369e-05,
      "p_css": 0.027388265767592877,
      "p_html": 0.25842018498583536,
      "p_java": 3.274767056821304e-06,
      "p_javascript": 0.0008505380780586875,
      "p_matlab": 1.1828915743514846e-05,
      "p_python": 0.6927816074079897,
      "p_sql": 0.02040926734487075,
      "p_typescript": 3.937105045416032e-05
    },
    {
      "text": "for num in [1, 2, 3, 4, 5]:\n    print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.8239301719389027e-13,
      "p_css": 1.5483460190802324e-18,
      "p_html": 8.285850405044161e-13,
      "p_java": 1.644079699610327e-14,
      "p_javascript": 1.2321298422108543e-13,
      "p_matlab": 0.9999999999717633,
      "p_python": 2.6468481890463105e-11,
      "p_sql": 3.3781691915304376e-13,
      "p_typescript": 2.798519615087935e-13
    },
    {
      "text": "import random\n\ndef generate_random_string():\n    char_list = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    random_string = \"\"\n    for _ in range(5):\n        random_string += random.choice(char_list)\n    return random_string",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009053524504261096,
      "p_css": 0.00022604002416585248,
      "p_html": 0.0016824180643445319,
      "p_java": 2.3894718377990312e-05,
      "p_javascript": 0.00017329452028761228,
      "p_matlab": 0.013260608332379277,
      "p_python": 0.799264717755023,
      "p_sql": 0.18395503657594084,
      "p_typescript": 0.0005086375590547797
    },
    {
      "text": "def sum_elements(arr):\n    return sum(arr) # return sum of elements of arr with one line of code.",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.000897270119650933,
      "p_css": 0.00012529736850958677,
      "p_html": 0.0003011401494499286,
      "p_java": 0.01457051785388386,
      "p_javascript": 0.0024116957810977,
      "p_matlab": 0.0015652760805092815,
      "p_python": 0.0976452727179082,
      "p_sql": 8.682303312801093e-05,
      "p_typescript": 0.8823967068958625
    },
    {
      "text": "from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport pandas as pd\n\n# Initialize Webdriver\ndriver = webdriver.Firefox()\n\n# Open the IMDB website\ndriver.get('https://www.imdb.com/chart/top?ref_=ft_250')\n\n# Wait until the elements on the web page are loaded\nWebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, \"chart\")))\n\n# Parse and store the information to a pandas dataframe\ntitles = driver.find_elements_by_class_name('titleColumn')\nratings = driver.find_elements_by_class_name('ratingColumn')\ndf = pd.DataFrame(columns = ['title', 'rating'])\n\nfor title, rating in zip(titles, ratings):\n    df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True)\n\n# Close the browser\ndriver.close()",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.00017168864330892837,
      "p_css": 0.24882695244135317,
      "p_html": 0.28408560807457833,
      "p_java": 0.014677003160422347,
      "p_javascript": 0.0028724784236957932,
      "p_matlab": 3.981677792333616e-05,
      "p_python": 0.024774736583911716,
      "p_sql": 0.0018613526004703437,
      "p_typescript": 0.422690363294336
    },
    {
      "text": "from tkinter import *\n\nroot = Tk()\nroot.title(\"Login Page\")\n\n# Create window\n\nwindow_width = 400\nwindow_height = 350\nscreen_width = root.winfo_screenwidth()\nscreen_height = root.winfo_screenheight()\nx_cord = int((screen_width/2) - (window_width/2))\ny_cord = int((screen_height/2) - (window_height/2))\n\n# Set window geometry\n\nroot.geometry(\"{}x{}+{}+{}\".format(window_width, window_height, x_cord, y_cord))\n\n# Create widgets\n\nuser_label = Label(root, text=\"Username:\")\nuser_label.place(x=50, y=150)\n\nusername_input = Entry(root, width=30)\nusername_input.place(x=130, y=150)\n\npassword_label = Label(root, text=\"Password:\")\npassword_label.place(x=50, y=200)\n\npassword_input = Entry(root, width=30, show=\"*\")\npassword_input.place(x=130, y=200)\n\ndef login():\n   #Verify input and authenticate user\n   print(\"Username: {}\\nPassword: {}\".format(username_input.get(),password_input.get()))\n\nlogin_button = Button(root, text=\"Login\", command=login)\nlogin_button.place(x=180, y=230)\n\n# Create event loop\n\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.015585929789333567,
      "p_css": 0.2736575204541848,
      "p_html": 0.07250050916722142,
      "p_java": 0.017175397818246455,
      "p_javascript": 0.0014051385601210743,
      "p_matlab": 5.091450907857683e-05,
      "p_python": 0.476393782792109,
      "p_sql": 0.11114976800274776,
      "p_typescript": 0.032081038906957494
    },
    {
      "text": "def findMaxIndex(arr):\n    \"\"\"This function finds the maximum index of an array's sub-array.\"\"\"\n    maxIndex = 0\n    currentMax = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[currentMax]:\n            maxIndex = i\n            currentMax = i\n    return maxIndex\n\narr = [2, 3, 4, 5, 7, 9, 11]\nmaxIndex = findMaxIndex(arr)\nprint(maxIndex) # Output: 5",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4718268072651014e-06,
      "p_css": 3.470674968860323e-08,
      "p_html": 3.795406680287963e-07,
      "p_java": 3.799942285195284e-08,
      "p_javascript": 1.6674463681450223e-05,
      "p_matlab": 0.9991550936993031,
      "p_python": 0.0008262281659777856,
      "p_sql": 2.1933246374532003e-09,
      "p_typescript": 7.740406511262663e-08
    },
    {
      "text": "def menu():\n    \n    menu_items = {\n        '1': 'Apple',\n        '2': 'Orange',\n        '3': 'Banana',\n        '4': 'Exit'\n    }\n    \n    print(\"Menu Items:\")\n    print(\"1. Apple\")\n    print(\"2. Orange\")\n    print(\"3. Banana\")\n    print(\"4. Exit\")\n    while True:\n        selection = input(\"Enter your selection: \")\n        if selection in menu_items:\n            if selection == '4':\n                break\n            else:\n                print(\"Selected item:\", menu_items[selection])\n                break\n        else:\n            print(\"Invalid selection!\")\n\nmenu()",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0034560586794440853,
      "p_css": 0.30624285749826136,
      "p_html": 0.01705087335490165,
      "p_java": 0.0001252408042921241,
      "p_javascript": 0.001132210930075163,
      "p_matlab": 0.005479445611710777,
      "p_python": 0.653694248561268,
      "p_sql": 0.011648673375778833,
      "p_typescript": 0.0011703911842681483
    },
    {
      "text": "def find_smallest(arr):\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return smallest",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.005314045223812e-06,
      "p_css": 1.2207981763533825e-05,
      "p_html": 1.0815830557202258e-05,
      "p_java": 2.241641333221404e-06,
      "p_javascript": 1.8513246618747336e-06,
      "p_matlab": 0.9553027485855492,
      "p_python": 0.0446482436141163,
      "p_sql": 1.1809015518593713e-06,
      "p_typescript": 1.1704806421616385e-05
    },
    {
      "text": "import tkinter as tk\n \nroot = tk.Tk()\n\n# Create greeting label\ngreeting = tk.Label(text='Hello World!')\ngreeting.pack()\n\ntk.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.22534609349845022,
      "p_css": 0.023573105097343953,
      "p_html": 0.025072209322621376,
      "p_java": 2.3058185210956372e-07,
      "p_javascript": 0.00987301290773365,
      "p_matlab": 0.0018087478469865478,
      "p_python": 0.6112115910115307,
      "p_sql": 0.005522955118941049,
      "p_typescript": 0.09759205461454039
    },
    {
      "text": "# import the necessary packages\nimport pygame\nimport requests\nfrom gtts import gTTS\n\n# define an API call to scrape website text\nurl = 'example.com'\ncontent = requests.get(url).text\n\n# initialize the pygame module\npygame.mixer.init()\n\n# generate the text-to-speech audio\ntts = gTTS(content)\n\n# save the text-to-speech audio\ntts.save('text.mp3')\n\n# play the audio\npygame.mixer.music.load('text.mp3')\npygame.mixer.music.play()\n\n# wait for the audio to finish\nwhile pygame.mixer.music.get_busy(): \n    pygame.time.Clock().tick(10)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 5.257853850769572e-05,
      "p_css": 0.17405590266278154,
      "p_html": 0.009221281265223407,
      "p_java": 0.025700830294629384,
      "p_javascript": 0.012849255297110269,
      "p_matlab": 0.00022665350182995853,
      "p_python": 0.06876099207315019,
      "p_sql": 0.17294089982246147,
      "p_typescript": 0.5361916065443062
    },
    {
      "text": "def string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append( (len(string), string) ) \n    return lengths",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.7774832815942944e-10,
      "p_css": 5.2110196621166106e-05,
      "p_html": 1.8277687664648175e-06,
      "p_java": 0.9987492573893644,
      "p_javascript": 8.664482021087578e-12,
      "p_matlab": 5.232501590910637e-07,
      "p_python": 0.0011274518096861825,
      "p_sql": 6.805924326079163e-05,
      "p_typescript": 7.701557290526671e-07
    },
    {
      "text": "def add_item_to_beginning(arr, new_item):\n    return [new_item] + arr",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0014726580988326183,
      "p_css": 0.006692837744462335,
      "p_html": 0.0018150144034208254,
      "p_java": 0.0005152334123217019,
      "p_javascript": 0.0009827646571746531,
      "p_matlab": 0.08829052804786787,
      "p_python": 0.8979161488898869,
      "p_sql": 0.00018765519035332347,
      "p_typescript": 0.002127159555679916
    },
    {
      "text": "from django.db import models\n\n# Create your models here.\nclass Post(models.Model):\n title = models.CharField(max_length=255)\n text = models.TextField()\n\nclass Comment(models.Model):\n post = models.ForeignKey(Post, on_delete=models.CASCADE)\n text = models.TextField()\n\n# In your migrations file:\n\nfrom django.db import migrations, models\n\ndef create_posts_and_comments(apps, schema_editor):\n Post = apps.get_model('app', 'Post')\n Comment = apps.get_model('app', 'Comment')\n\n post = Post.objects.create(\n title='My first post',\n text='Hello world!'\n )\n\n Comment.objects.create(\n post=post,\n text='Nice post!'\n )\n\nclass Migration(migrations.Migration):\n dependencies = [\n # other dependencies\n ]\n\n operations = [\n migrations.CreateModel(\n name='Post',\n fields=[\n ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n ('title', models.CharField(max_length=255)),\n ('text', models.TextField()),\n ],\n ),\n migrations.CreateModel(\n name='Comment',\n fields=[\n ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n ('post', models.ForeignKey(on_delete=models.CASCADE, to='app.Post')),\n ('text', models.TextField()),\n ],\n ),\n migrations.RunPython(create_posts_and_comments)\n ]",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9989510735255154,
      "p_css": 0.0010230203775205113,
      "p_html": 2.620472619690428e-07,
      "p_java": 8.697460291067718e-08,
      "p_javascript": 6.410073251802796e-07,
      "p_matlab": 2.7284665290542876e-07,
      "p_python": 3.6076401845219477e-06,
      "p_sql": 8.317464375071646e-08,
      "p_typescript": 2.0952406292768023e-05
    },
    {
      "text": "def get_string_lengths(list_strings):\n    res = {}\n    for string in list_strings:\n        res[string] = len(string)\n    return res\n\ntest_strings = ['help', 'me', 'please']\nresult = get_string_lengths(test_strings)\nprint(result)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.008036952949856e-09,
      "p_css": 0.0019262115282602753,
      "p_html": 1.1584943307593387e-05,
      "p_java": 0.789548250043735,
      "p_javascript": 2.347033982461814e-10,
      "p_matlab": 7.120086766336764e-08,
      "p_python": 0.20672533058959824,
      "p_sql": 0.001786247860484799,
      "p_typescript": 2.302591005908125e-06
    },
    {
      "text": "import subprocess\n\ndef deploy_application(app_name, manifest_file):\n # Run 'kubectl' command to deploy the application\n result = subprocess.run(\n  ['kubectl', 'apply', '-f', manifest_file],\n  stdout=subprocess.PIPE\n )\n\n# Check the return code\nif result.returncode == 0:\n print(f'Application {app_name} deployed successfully')\nelse:\n print(f'Error deploying application {app_name}: {result.stderr}')",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.18731566904706365,
      "p_css": 0.0005369489829175184,
      "p_html": 0.00015746214606289548,
      "p_java": 7.850083119347996e-07,
      "p_javascript": 0.0003672401154060693,
      "p_matlab": 2.5014547492289255e-05,
      "p_python": 0.0075053725377458155,
      "p_sql": 3.2593046852877212e-06,
      "p_typescript": 0.8040882483103146
    },
    {
      "text": "def reverse(word):\n    return word[::-1]\n\nprint(reverse('Hello World'))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9461397459837052,
      "p_css": 7.76338556461461e-05,
      "p_html": 0.00026618234409879065,
      "p_java": 2.0087545933724535e-14,
      "p_javascript": 0.0008886080715068506,
      "p_matlab": 3.007289035513906e-07,
      "p_python": 0.05261060003951054,
      "p_sql": 1.1184479569472011e-05,
      "p_typescript": 5.744497039326996e-06
    },
    {
      "text": "list = [15, 28, 12, 7, 9] # List of numbers\nk = 4 # kth smallest element\n\nsorted_list = sorted(list) # sorting the list of numbers\n\nprint(\"The {}th smallest element is {}\".format(k, sorted_list[k-1])) # print the kth smallest element in the sorted_list using the index (k-1)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0008113155696462962,
      "p_css": 9.62055642580807e-05,
      "p_html": 0.0002162732129190216,
      "p_java": 4.061296401836201e-05,
      "p_javascript": 0.9856855133291306,
      "p_matlab": 0.007150240393673407,
      "p_python": 0.0003631307112271297,
      "p_sql": 3.5503580010249247e-06,
      "p_typescript": 0.005633157897126038
    },
    {
      "text": "def multiplication_table(number): \n    for i in range(1, 11): \n        print(number, 'x', i, '=', number*i) \n\nmultiplication_table(number)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.190628816687671e-07,
      "p_css": 3.0482711012710254e-07,
      "p_html": 3.851626971833818e-06,
      "p_java": 8.528770321835753e-08,
      "p_javascript": 1.2602506376307584e-07,
      "p_matlab": 0.014137174447030434,
      "p_python": 0.9858564990295261,
      "p_sql": 8.199510740767113e-07,
      "p_typescript": 7.197426387026703e-07
    },
    {
      "text": "# import libraries\nimport os\nimport dialogflow\n\n# instantiate dialogflow\nimport dialogflow_v2 as dialogflow\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"path/to/credentials.json\"\n\n# define the session\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path('test-project', \"unique-session-id\")\n\n# define the request and response\nrequest = dialogflow.types.TextInput(text=\"What is your return policy?\", language_code=\"en\")\nresponse = session_client.detect_intent(session=session, query_input=request)\n\n# print results\nprint('Query text: {}'.format(response.query_result.query_text))\nprint('Detected intent: {} (confidence: {})\\n'.format(\n response.query_result.intent.display_name,\n response.query_result.intent_detection_confidence))\nprint('Fulfillment text: {}\\n'.format(response.query_result.fulfillment_text))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.017435241886454976,
      "p_css": 0.9128108135368926,
      "p_html": 0.001995524934415025,
      "p_java": 2.92281379972658e-05,
      "p_javascript": 0.0004515775853363749,
      "p_matlab": 0.00013372145246069372,
      "p_python": 0.040294517907914995,
      "p_sql": 0.002972146213550466,
      "p_typescript": 0.023877228344977516
    },
    {
      "text": "\"\"\"\nFind the longest contiguous increasing subsequence \n\"\"\"\n\ndef long_increasing_subsequence(arr): \n    n = len(arr) \n    dp = [1 for x in range(n)] \n   \n    for i in range (1 , n): \n        for j in range(0 , i): \n            print (i,j) \n            if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): \n                dp[i] = dp[j]+1\n   \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum, dp[i])  \n\n    return maximum \n\narr =[3,6,9,1,2,3,4,5] \nlongest_subsequence_length = long_increasing_subsequence(arr)\nprint(longest_subsequence_length) # prints 5",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.329746580566928e-06,
      "p_css": 1.0728242028227913e-06,
      "p_html": 4.01945151535318e-06,
      "p_java": 5.643300894607727e-08,
      "p_javascript": 2.1197993245750022e-07,
      "p_matlab": 0.7435769417005392,
      "p_python": 0.25639315340585106,
      "p_sql": 1.1712543651409188e-05,
      "p_typescript": 8.501914718301133e-06
    },
    {
      "text": "import time\n\ndef func():\n    start=time.time()\n    # Optimized code using range instead of while loop\n    lst = range(100000000)\n    end=time.time()\n    print(end-start)\n\nfunc()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007682988895181124,
      "p_css": 0.0013073421058583921,
      "p_html": 0.000603670607936577,
      "p_java": 1.9930230611286402e-05,
      "p_javascript": 0.0003724805953397603,
      "p_matlab": 0.00018932555808461407,
      "p_python": 0.9875604873089714,
      "p_sql": 0.0011748778653996922,
      "p_typescript": 0.008003586838280115
    },
    {
      "text": "# Defining a function to keep track of the total number of times each word in an input string has been encountered\ndef count_words(input_string):\n    words_dict = dict()\n\n    for word in input_string.split():\n        if word not in words_dict:\n            words_dict[word] = 1\n        else:\n            words_dict[word] += 1\n\n    return words_dict\n\n# Testing the count_words() function\ninput_string = \"This is a test string and this is a test string again\"\nprint(count_words(input_string)) # {'This': 2, 'is': 2, 'a': 2, 'test': 2, 'string': 2, 'and': 1, 'again': 1}",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 0.00010565918621120599,
      "p_css": 0.01163009557095915,
      "p_html": 0.007954239315411848,
      "p_java": 0.7382361433520628,
      "p_javascript": 0.00018682754750324536,
      "p_matlab": 9.814417461656578e-05,
      "p_python": 0.17802880081521166,
      "p_sql": 0.00837923685090421,
      "p_typescript": 0.05538085318711936
    },
    {
      "text": "def bubble_sort(list):\n for x in range(len(list)-1, 0, -1):\n  for y in range(x):\n   if list[y] > list[y+1]:\n    list[y], list[y+1] = list[y+1], list[y]\n \n return list\n\nlist = [4,7,2,9,1]\nprint(bubble_sort(list))\n##\n12. Instruction: Generate a Rust program to calculate the mean of relevant values in a list. \n12. Input:\nA given list of integers, for example, [2,4,6,8,10].\n12. Output:\nfn main() {\n let nums = vec![2, 4, 6, 8, 10]; // given list\n    \n let mut sum = 0;\n for num in &nums {\n  sum += num;\n }\n let mean = sum / nums.len() as f32;\n \n println!(\"The mean of the list is {}\", mean);\n}",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 1.9251178123035838e-10,
      "p_css": 3.017277040202737e-10,
      "p_html": 2.7803177827740784e-08,
      "p_java": 2.64368801599208e-07,
      "p_javascript": 0.999958693992866,
      "p_matlab": 3.963332714580517e-05,
      "p_python": 1.360322474666896e-06,
      "p_sql": 4.137619051514993e-09,
      "p_typescript": 1.5553675586933588e-08
    },
    {
      "text": "def fahrenheit_to_celsius(fahrenheit):\n return (fahrenheit - 32) * 5/9",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0371829670603864,
      "p_css": 0.07310627566187133,
      "p_html": 0.03133011638654647,
      "p_java": 0.0029191972951620577,
      "p_javascript": 0.007928143329202745,
      "p_matlab": 0.004273580298237634,
      "p_python": 0.8189729473949273,
      "p_sql": 0.005409714633036969,
      "p_typescript": 0.01887705794062913
    },
    {
      "text": "def quicksort(array):\n if len(array) < 2:\n return array\n else:\n pivot = array[0]\n less = [i for i in array[1:] if i <= pivot]\n greater = [i for i in array[1:] if i > pivot]\n return quicksort(less) + [pivot] + quicksort(greater)\n\narray = [1, 4, 5, 2, 8, 6]\nresult = quicksort(array)\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.754324968836559e-07,
      "p_css": 9.314362616463884e-08,
      "p_html": 4.881654328944144e-08,
      "p_java": 2.8348413228535037e-09,
      "p_javascript": 3.5786621824513046e-09,
      "p_matlab": 0.9999995956894352,
      "p_python": 2.3732758774261714e-10,
      "p_sql": 3.3048849640561065e-08,
      "p_typescript": 4.7218217886454634e-08
    },
    {
      "text": "def bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n    return arr\n\nresult = bubble_sort([12, 3, 10, 7, 5, 11])\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.6471596359995437e-09,
      "p_css": 1.4218606167440535e-08,
      "p_html": 5.910862115011382e-09,
      "p_java": 1.1120378626815723e-09,
      "p_javascript": 2.2927871377048137e-09,
      "p_matlab": 0.9984194580819169,
      "p_python": 0.0015805095533279454,
      "p_sql": 4.800814514926228e-10,
      "p_typescript": 4.7032208878241836e-09
    },
    {
      "text": "keys = [\"a\", \"b\", \"c\"]\nvalues = [1, 2, 3]\n\nd = dict(zip(keys, values))\nprint(d) # output: {'a': 1, 'b': 2, 'c': 3}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00907577711369133,
      "p_css": 0.8058574278829798,
      "p_html": 0.0245971090903703,
      "p_java": 0.00036823777066029333,
      "p_javascript": 0.00035073263900324076,
      "p_matlab": 0.0003022198868225925,
      "p_python": 0.15526888849216416,
      "p_sql": 0.0015662586481865453,
      "p_typescript": 0.002613348476121725
    },
    {
      "text": "def find_max(nums):\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nnums = [3, 4, 6, 5, 9, 1, 2]\nmax_val = find_max(nums)\nprint(max_val)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0005779466081569599,
      "p_css": 2.192552630991775e-05,
      "p_html": 0.0010075126348832583,
      "p_java": 0.00010257351127041898,
      "p_javascript": 0.011031275721689146,
      "p_matlab": 0.9303008147050182,
      "p_python": 0.055795302255773546,
      "p_sql": 0.0003401919643527346,
      "p_typescript": 0.0008224570725455864
    },
    {
      "text": "import uuid\nfrom datetime import datetime, timedelta\n\ndef authenticate(username, password):\n  # Validate user credentials\n  # Generate an access token\n  access_token = uuid.uuid4().hex\n  expires = datetime.utcnow() + timedelta(minutes=60)\n  return access_token, expires\n\n# Usage\naccess_token, expires = authenticate('username', 'password')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.010478558323096916,
      "p_css": 0.10453670926345358,
      "p_html": 0.011219852705603791,
      "p_java": 0.0005346437068191489,
      "p_javascript": 0.0027563279085602165,
      "p_matlab": 0.0016836708758541528,
      "p_python": 0.8525189728601495,
      "p_sql": 0.010973051745382814,
      "p_typescript": 0.005298212611080031
    },
    {
      "text": "\"\"\"\n\nWe need two special hostnames to connect to: \n\nStationA\n\nand \n\nStationB\n\n\"\"\"\n\n\nfrom __future__ import with_statement, print_function\nfrom fabric.api import local, settings, abort, run, sudo, cd, hosts, env, execute\nfrom fabric.contrib.console import confirm\nfrom fabric.operations import put, get\nfrom fabric.contrib.project import rsync_project\n\nimport re\nimport subprocess as sp \nimport os.path \nfrom   StringIO import StringIO\n\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\n\nVNC_LICENSE = [\n    \"xxxxx-xxxxx-xxxxx-xxxxx-xxxxx\"\n]\n\n\n# TODO: Put a proper deployment mechanism here.\nenv.key_filename = '/home/alcides/.ssh/zunzun_ec2_keypair_0.pem'\n\nStationA_H = 'ubuntu@54.149.116.230'\nStationB_H = 'ubuntu@54.149.116.233'\nBeefy_H    = 'ubuntu@52.11.217.155'\n# TODO: Make the IP number below deployment-specific...\nBeefy_InternalIP = '192.168.112.131'\nStationA_InternalIP = '192.168.112.129'\nStationB_InternalIP = '192.168.112.130'\nHomeDir_Name = \"ubuntu\"\n\n\n@hosts(StationA_H)\ndef StationA():\n    \"\"\"\n    Copies code to StationA \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts/StationA\",\n        remote_dir = (\"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf /home/{HomeDir_Name}/StationA/onstartup.py /home/{HomeDir_Name}/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef setup_dns_masq():\n    sudo(\"apt-get install -y dnsmasq\")\n    put(\n        local_path  = StringIO(\"addn-hosts=/home/{HomeDir_Name}/dnsmasq_more.conf\\n\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"/etc/dnsmasq.conf\",\n        use_sudo=True)\n\n\n\n@hosts(StationB_H)\ndef StationB():\n    \"\"\"\n    Copies both the chrome plugin and the DNSMasq watcher \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts/StationB\",\n        remote_dir = (\"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    rsync_project(\n        local_dir = \"scripts/StationA/chrome_captures_hars\",\n        remote_dir = ((\"/home/{HomeDir_Name}/StationB/\".format(HomeDir_Name=HomeDir_Name)).format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf /home/{HomeDir_Name}/StationB/onstartup.py /home/{HomeDir_Name}/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef install_updatednsmasq_service():\n    with settings(warn_only=True):\n        sudo(\"service updatednsmasq stop\")\n    put(\n        local_path = \"scripts/StationB/configure_dnsmasq.py\",\n        remote_path = \"/home/{HomeDir_Name}/StationB/configure_dnsmasq.py\".format(HomeDir_Name=HomeDir_Name) ,\n        use_sudo = True\n        )\n    put(\n        local_path = StringIO(\"\"\"\ndescription \"Update dnsmasq\"\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\numask 022\n\nconsole log\n\nenv PATH=/opt/openssl-1.0.2/bin/:/usr/bin:/usr/local/bin:/usr/sbin:/bin \nexport PATH\nenv LD_LIBRARY_PATH=/opt/openssl-1.0.2/lib\nexport LD_LIBRARY_PATH\nenv USER={HomeDir_Name}\nexport USER\n\nscript \n    exec /usr/bin/python /home/{HomeDir_Name}/StationB/configure_dnsmasq.py\nend script\n\n\"\"\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"/etc/init/updatednsmasq.conf\",\n        use_sudo=True )\n    sudo(\"service updatednsmasq start\")\n\n\n@hosts(Beefy_H)\ndef Beefy():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get -y install libgmp-dev\")\n\n\n@hosts(Beefy_H)\ndef BeefyRehMimic():\n    with settings(warn_only=True):\n        sudo(\"service mimic stop\")\n    put(\n        local_path  = \"dist/build/reh-mimic/reh-mimic\",\n        remote_path = \"/home/{HomeDir_Name}/reh-mimic\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/reh-mimic\".format(HomeDir_Name=HomeDir_Name))\n    sudo(\"rm /home/{HomeDir_Name}/mimic -rf\".format(HomeDir_Name=HomeDir_Name) )\n    rsync_project(\n        local_dir  = \"mimic\",\n        remote_dir = \"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name),\n        )\n    put(\n        local_path  = \"scripts/mimic.conf\",\n        remote_path = \"/etc/init/mimic.conf\",\n        use_sudo    = True\n        )\n    sudo(\"touch /root/.rnd\")\n    sudo(\"service mimic start\")\n\n\n\n@hosts(Beefy_H, StationA_H, StationB_H )\ndef configure_logging():\n    if env.host_string == StationA_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"199fb2e1-8227-4f73-9150-70a34a5d5e0c %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n    elif env.host_string == StationB_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"3d2fd756-407a-4764-b130-1dd6f22a1b62 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n    else:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"7551d4e0-fa76-466f-8547-8c9a347a9363 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n        \n    sudo(\"service rsyslog restart\")\n    # Check logging works...\n    sudo(\"logger -t test Hello there Logentries\")\n\n\n@hosts (StationA_H, StationB_H)\ndef deploy_specific():\n    if env.host_string == StationA_H:\n        print(\"StationA deploy\")\n        StationA()\n    elif env.host_string == StationB_H:\n        print(\"StationB deploy\")\n        StationB()\n    else: \n        print(\"Beefy station deploy\")\n        Beefy()\n\n\n@hosts(StationA_H, StationB_H)\ndef apt_stations():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get install -y xutils xbase-clients xfonts-base xfonts-75dpi xfonts-100dpi\")\n    sudo(\"apt-get install -y python-pip\")\n    sudo(\"apt-get install -y xdotool\")\n    sudo(\"apt-get install -y xfwm4\") \n\n\n@hosts(StationA_H, StationB_H)\ndef pythonlibs():\n    sudo(\"pip install python-daemon>=2.0\")\n    sudo(\"pip install raven\")\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ssl():\n    \"\"\"\n    Copies Openssl and curl to the target hosts...\n    \"\"\"\n    sudo(\"mkdir -p /opt/openssl-1.0.2/\")\n    sudo((\"chown {HomeDir_Name} /opt/openssl-1.0.2/\".format(HomeDir_Name=HomeDir_Name)))\n    rsync_project(\n        local_dir = \"/opt/openssl-1.0.2\",\n        remote_dir = \"/opt/\",\n        extra_opts=\"-avz\"\n        )\n    put(\n        local_path = \"scripts/ca-certificates.crt\",\n        remote_path = \"/etc/ssl/certs/ca-certificates.crt\",\n        use_sudo = True\n        )\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ca():\n    \"\"\"\n    Copies the ca certificate to the home...\n    \"\"\"\n    put(\n        local_path = \"mimic-here/config/ca/cacert.pem\",\n        remote_path = (\"/home/{HomeDir_Name}/cacert.pem\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc():\n    \"\"\"\n    \n    \"\"\"\n    # run(\"curl -L -o VNC.tar.gz https://www.realvnc.com/download/binary/1720/\")\n    # run(\"tar xvf VNC-5.2.3-Linux-x64-ANY.tar.gz\")\n\n\n    put(\n        local_path = \"scripts/VNC-5.2.3-Linux-x64-ANY.tar.gz\",\n        remote_path = (\"/home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    run((\"tar -xzf /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)))\n    # Get a handier name.... \n    run(\"rm -rf vnc\")\n    run((\"mv /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64 /home/{HomeDir_Name}/vnc\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"/home/{HomeDir_Name}/vnc/vnclicense -add {VncLicense}\".format(\n        HomeDir_Name= HomeDir_Name,\n        VncLicense = VNC_LICENSE[0]\n    )))\n    # Will demand some for of interactive input...\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/config.d/\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"/home/{HomeDir_Name}/vnc/vncpasswd /home/{HomeDir_Name}/.vnc/config.d/Xvnc\".format(HomeDir_Name=HomeDir_Name)))\n    vnc_fix_permissions()\n\n@hosts(StationA_H, StationB_H)\ndef vnc_fix_permissions():\n    sudo((\"chown {HomeDir_Name} /home/{HomeDir_Name}/.vnc -R\").format(HomeDir_Name=HomeDir_Name))\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc_xstartup():\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/config.d/\".format(HomeDir_Name=HomeDir_Name)))\n    put(\n        local_path = \"scripts/vnc-xstartup\",\n        remote_path = (\"/home/{HomeDir_Name}/.vnc/xstartup\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/.vnc/xstartup\".format(HomeDir_Name=HomeDir_Name))\n    put(\n        local_path = \"scripts/xvncfontpath\",\n        remote_path = (\"/home/{HomeDir_Name}/.vnc/config.d/xvncfontpath\".format(HomeDir_Name=HomeDir_Name))\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_google_chrome():\n    put(\n        local_path = \"scripts/google-chrome-stable_current_amd64.deb\",\n        remote_path = (\"/home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    really_setup_google_chrome()\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ensure_local_hosts():\n    # Get the contents of /etc/hosts\n    local_file = StringIO()\n    get(\n        local_path = local_file,\n        remote_path = \"/etc/hosts\",\n        use_sudo = True \n        )\n    hosts_file = local_file.getvalue()\n    snippet =  \"\"\"# DO NOT EDIT BELOW BY HAND\n{Beefy_InternalIP} instr.httpdos.com\n192.168.112.129 ip-192-168-112-129\n192.168.112.130 ip-192-168-112-130\n192.168.112.131 ip-192-168-112-131\n# END DO NOT EDIT BELOW\"\"\".format(\n    StationA_InternalIP = StationA_InternalIP,\n    Beefy_InternalIP    = Beefy_InternalIP\n    )\n    mo = re.search(r\"# DO NOT EDIT BELOW BY HAND\\n(.*?)\\n# END DO NOT EDIT BELOW\", hosts_file, re.MULTILINE)\n    if mo:\n        part_before = hosts_file[:mo.start(0)]\n        part_after = hosts_file[mo.end(0):]\n        hosts_file = part_before + snippet + part_after\n    else:\n        hosts_file += \"\\n\" + snippet\n\n    put(\n        local_path = StringIO(hosts_file),\n        remote_path = \"/etc/hosts\",\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef really_setup_google_chrome():\n    sudo(\"apt-get update\")\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n    sudo(\"apt-get install -y --fix-missing xdg-utils\")\n    sudo((\"dpkg -i --force-depends /home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_vnc_service():\n    put(\n        local_path = \"scripts/vncserv-{HomeDir_Name}.conf\".format(HomeDir_Name=HomeDir_Name),\n        remote_path = \"/etc/init/vncserv.conf\",\n        use_sudo = True\n        )\n    put(\n        local_path = \"scripts/undaemon.py\",\n        remote_path = \"/home/{HomeDir_Name}/undaemon.py\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/undaemon.py\".format(HomeDir_Name=HomeDir_Name))\n    with settings(warn_only=True):\n        sudo(\n            \"service vncserv start\"\n            )\n\n\n@hosts(StationA_H, StationB_H)\ndef  disable_lightdm():\n    contents = StringIO(\"manual\")\n    put(\n        local_path = contents, \n        remote_path = \"/etc/init/lightdm.override\",\n        use_sudo=True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef touch_xauthority():\n    run(\"touch $HOME/.Xauthority\")\n\n\n@hosts(StationA_H, StationB_H)\ndef deploy():\n    execute(apt_stations)\n    execute(setup_dns_masq)\n    execute(setup_google_chrome)\n    execute(deploy_specific)\n    execute(touch_xauthority)\n    execute(disable_lightdm)\n    execute(StationA)\n    execute(StationB)\n    execute(Beefy)\n    execute(ca)\n    execute(ssl)\n    execute(install_vnc)\n    execute(install_vnc_xstartup)\n    execute(ensure_local_hosts)\n    execute(setup_vnc_service)\n    execute(pythonlibs)\n    execute(BeefyRehMimic)\n    execute(install_updatednsmasq_service)    \n",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.999343886940718,
      "p_css": 5.657598796255711e-07,
      "p_html": 0.0006527689522809148,
      "p_java": 6.82985203397669e-10,
      "p_javascript": 1.157291619953514e-06,
      "p_matlab": 4.029208567839118e-08,
      "p_python": 3.051079615728933e-07,
      "p_sql": 2.716766815017721e-07,
      "p_typescript": 1.0032957875831374e-06
    },
    {
      "text": "import time\n\ndef timed(func):\n    def get_runtime(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        total_time = end_time - start_time\n        return result, total_time\n    return get_runtime",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002316979531115928,
      "p_css": 0.056764856464027756,
      "p_html": 0.001869297573023253,
      "p_java": 0.0005855522901445663,
      "p_javascript": 0.001056455364916886,
      "p_matlab": 2.1588583045750207e-05,
      "p_python": 0.9283004064771574,
      "p_sql": 0.00847876699149372,
      "p_typescript": 0.0006060967250746455
    },
    {
      "text": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    n = 10\n    if is_prime(n):\n        print(\"{} is a prime number\".format(n))\n    else:\n        print(\"{} is not a prime number\".format(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.866167836201146e-06,
      "p_css": 1.7447876912287604e-05,
      "p_html": 3.275371677281064e-05,
      "p_java": 3.030689825825995e-07,
      "p_javascript": 2.0144237273765137e-06,
      "p_matlab": 0.0026811280577802524,
      "p_python": 0.9972574685114919,
      "p_sql": 1.7861378804955671e-06,
      "p_typescript": 2.2320386159183387e-06
    },
    {
      "text": "def remove_duplicate(inlist):\n    outlist = []\n    for item in inlist:\n        if item not in outlist:\n            outlist.append(item)\n    return outlist\n\nresult = remove_duplicate([1, 2, 3, 4, 3, 2, 4])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.1768675696664334e-05,
      "p_css": 0.015625175735331665,
      "p_html": 0.005635408012817604,
      "p_java": 2.5781185306157443e-06,
      "p_javascript": 0.002543823979468647,
      "p_matlab": 0.005143065930079986,
      "p_python": 0.9707284241102848,
      "p_sql": 0.0002472421566513211,
      "p_typescript": 2.2513281138680535e-05
    },
    {
      "text": "# Importing the libraries\nimport numpy as np\nimport pandas as pd\n\n# Import the dataset\ndataset = pd.read_csv ('spam.csv')\n   \n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, dataset.shape[0]):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Message'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    all_stopwords = stopwords.words('english')\n    all_stopwords.remove('not')\n    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n    review = ' '.join(review)\n    corpus.append(review)\n    \n# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, -1].values\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n\n# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n#Fitting the model\n classifier.fit(X_train, y_train)",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.7309191239538155,
      "p_css": 0.04717509199584024,
      "p_html": 0.005586329158920886,
      "p_java": 2.246959968643937e-06,
      "p_javascript": 0.000593012210839414,
      "p_matlab": 0.00020113840673332927,
      "p_python": 0.18461070988036596,
      "p_sql": 0.010353707099545188,
      "p_typescript": 0.020558640333970854
    },
    {
      "text": "from flask import Flask, request \nfrom requests import get \n\napp = Flask(__name__) \n\n@app.route('/', methods=['GET']) \ndef home():\n    api_key = # API key for open weather API\n    url = f'http://api.openweathermap.org/data/2.5/weather?q=current&units=imperial&APPID={api_key}'\n    output = request.get(url).json()\n    temp = output['main']['temp']\n    return f\"The current temperature in Fahrenheit is {temp} F\"\nif __name__ == '__main__': \n    app.run(debug=True, host='0.0.0.0', port=8989)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0013451051043494875,
      "p_css": 0.9566136807969616,
      "p_html": 0.033257211294482385,
      "p_java": 5.296577401125654e-05,
      "p_javascript": 0.00023364417801462602,
      "p_matlab": 0.0008696744392818875,
      "p_python": 0.0034111751836773314,
      "p_sql": 0.004171260010689963,
      "p_typescript": 4.528321853147962e-05
    },
    {
      "text": "import re\n\ndef validate_email(email):\n    regex = r\"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"\n    if re.search(regex, email):\n        print(\"Valid Email\")\n    else:\n        print(\"Invalid Email\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00030665207527462196,
      "p_css": 0.0186771000774687,
      "p_html": 0.04737242817614928,
      "p_java": 0.00025556782917593023,
      "p_javascript": 0.0005499642753442677,
      "p_matlab": 0.0008547957691450853,
      "p_python": 0.9297367185477695,
      "p_sql": 0.0011038939104479639,
      "p_typescript": 0.001142879339224772
    },
    {
      "text": "def insertion_sort(arr): \n for i in range(1, len(arr)): \n key = arr[i] \n j = i-1\n while j>=0 and key < arr[j] : \n arr[j+1] = arr[j] \n j -= 1\n arr[j+1] = key \nreturn arr \n  \narr = [9, 3, 4, 2, 6, 7]\nanswer = insertion_sort(arr)\nprint(answer) # [2, 3, 4, 6, 7, 9]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.905042798065544e-06,
      "p_css": 0.000256316359057483,
      "p_html": 8.867479342058164e-06,
      "p_java": 3.703237505902948e-06,
      "p_javascript": 6.3702544374997685e-06,
      "p_matlab": 0.3848667364463264,
      "p_python": 0.6148132816250113,
      "p_sql": 1.351359987615425e-06,
      "p_typescript": 3.546819553382757e-05
    },
    {
      "text": "def rank(nums): \n    sortedNums = sorted(nums, reverse = True) \n    for i in range(len(sortedNums)): \n        if sortedNums[i] == nums[i]: \n            print (i + 1, end = \" \") \n  \n# Driver code \nnums = [3, 8, 2, 9, 5] \nrank(nums)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.3450338131288575e-05,
      "p_css": 1.317348549934882e-05,
      "p_html": 1.8131046801255135e-05,
      "p_java": 2.798920997699244e-06,
      "p_javascript": 1.9114695559016573e-06,
      "p_matlab": 1.8990642981724958e-05,
      "p_python": 0.999869019412116,
      "p_sql": 1.6016912298455754e-05,
      "p_typescript": 4.6507771618243984e-05
    },
    {
      "text": "from http.server import BaseHTTPRequestHandler, HTTPServer\n \n# HTTPRequestHandler class\nclass HTTPServer_RequestHandler(BaseHTTPRequestHandler):\n \n  # GET\n  def do_GET(self):\n    # Send response status code\n    self.send_response(200)\n \n    # Send headers\n    self.send_header('Content-type','text/html')\n    self.end_headers()\n \n    # Send message back to client\n    message = \"Hello world!\"\n    # Write content as utf-8 data\n    self.wfile.write(bytes(message, \"utf8\"))\n    return\n \ndef run():\n  print('starting server...')\n \n  # Server settings\n  # Choose port 8080, for port 80\n  server_address = ('127.0.0.1', 8080)\n  httpd = HTTPServer(server_address, HTTPServer_RequestHandler)\n  print('running server...')\n  httpd.serve_forever()\n \n \nrun()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.6563280153595702e-06,
      "p_css": 4.9240583013521286e-05,
      "p_html": 0.9998591211985517,
      "p_java": 6.617832462182339e-10,
      "p_javascript": 2.5595309066091307e-07,
      "p_matlab": 2.780466070727961e-11,
      "p_python": 7.063798752974356e-05,
      "p_sql": 4.387622610944841e-06,
      "p_typescript": 1.4699637600222875e-05
    },
    {
      "text": "print(''.join([i.upper() for i in \"hello World\"])) # HELLO WORLD",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.9968804118171205,
      "p_css": 3.7488893842305357e-07,
      "p_html": 5.886664475973716e-06,
      "p_java": 4.533911913284514e-24,
      "p_javascript": 0.003087473851314722,
      "p_matlab": 5.423383614693518e-07,
      "p_python": 2.1089675614233952e-05,
      "p_sql": 4.160012799168687e-06,
      "p_typescript": 6.075137548480931e-08
    },
    {
      "text": "def findLongestSubstring(inputString):\n longest = 0\n longestSubstring = ''\n \n for i in range(len(inputString)):\n current = inputString[i]\n count = 1\n currentSubstring = current\n \n for j in range(i + 1, len(inputString)):\n if current == inputString[j]:\n count += 1\n currentSubstring += inputString[j]\n else:\n break\n \n if count > longest:\n longest = count\n longestSubstring = currentSubstring\n \n return longestSubstring\n\nlongestSubstring = findLongestSubstring('abcdabca')\nprint(longestSubstring) # Output: 'abca'",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001366930035480358,
      "p_css": 0.0008979570417191723,
      "p_html": 0.0014700505365707434,
      "p_java": 5.815867040417096e-05,
      "p_javascript": 0.00014911926974251353,
      "p_matlab": 0.03192023058381619,
      "p_python": 0.9626318923364049,
      "p_sql": 0.0011728635738852582,
      "p_typescript": 0.0003327979519766017
    },
    {
      "text": "list_1_dict =dict() \nfor i in range(len(list_1)): \n    list_1_dict[i] = list_1[i] \nprint(list_1_dict)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.0596685226291436e-13,
      "p_css": 1.647714202766002e-12,
      "p_html": 2.917767289427717e-12,
      "p_java": 6.078151782433818e-14,
      "p_javascript": 1.0003389988443762e-13,
      "p_matlab": 0.999999995553084,
      "p_python": 4.441045131818943e-09,
      "p_sql": 1.6637726355951907e-21,
      "p_typescript": 7.384619548031272e-13
    },
    {
      "text": "def find_duplicates(numbers):\n    seen = set()\n    duplicates = set()\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n    \n    return duplicates",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00013327591131217863,
      "p_css": 0.000642390177224195,
      "p_html": 0.00042690358752874854,
      "p_java": 0.025738933542403565,
      "p_javascript": 0.00012949170927470806,
      "p_matlab": 7.852712159163224e-07,
      "p_python": 0.9725146658401593,
      "p_sql": 0.00027212749722307537,
      "p_typescript": 0.00014142646365814077
    },
    {
      "text": "import datetime\n \ndef get_day_name(date):\n    day_name = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%A')\n    return day_name\n  \nif __name__ == '__main__':\n    date = '2021-04-19'\n    print(get_day_name(date))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009075250232390845,
      "p_css": 0.03652521556571222,
      "p_html": 0.0015185339048075224,
      "p_java": 0.0001366239204089434,
      "p_javascript": 0.00043531840770128866,
      "p_matlab": 0.0008676807574276449,
      "p_python": 0.9574306566028865,
      "p_sql": 0.0014699322557977165,
      "p_typescript": 0.0007085135620191402
    },
    {
      "text": "#!/usr/bin/env python\n\nimport sys\nimport csv\nimport math\n\ndef parseSlice(s):\n    if \"-\" in s:\n        parts = s.split(\"-\")\n        return slice(int(parts[0]) - 1, int(parts[1]))\n    else:\n        p = int(s)\n        return slice(p-1, p)\n\nclass SimpleDiff():\n    filename = None\n    outfile = \"/dev/stdout\"\n    labels = None\n    colname1 = \"avg1\"\n    colname2 = \"avg2\"\n    alpha = 1.0\n    slice1 = None\n    slice2 = None\n\n    def process(self, f, out, header=True):\n        nin = 0\n        nout = 0\n        na = self.slice1.stop - self.slice1.start\n        nb = self.slice2.stop - self.slice2.start\n        if header:\n            f.readline()\n        c = csv.reader(f, delimiter='\\t')\n        for line in c:\n            nin += 1\n            data1 = line[self.slice1]\n            data2 = line[self.slice2]\n            data1 = [ float(v) for v in data1 ]\n            data2 = [ float(v) for v in data2 ]\n            amin = min(data1)\n            amax = max(data1)\n            bmin = min(data2)\n            bmax = max(data2)\n            if amin > bmax:\n                # A over B\n                r1 = amax - amin\n                r2 = bmax - bmin\n                d = self.alpha * max(r1, r2)\n                if (amin - bmax) > d:\n                    avg1 = sum(data1) / na\n                    avg2 = sum(data2) / nb\n                    if avg1 > 0 and avg2 > 0:\n                        out.write(\"{}\\t{}\\t{}\\t{}\\n\".format(line[0], avg1, avg2, math.log(avg1/avg2, 2.0)))\n                        nout += 1\n            elif bmin > amax:\n                # B over A\n                r1 = amax - amin\n                r2 = bmax - bmin\n                d = self.alpha * max(r1, r2)\n                if (bmin - amax) > d:\n                    avg1 = sum(data1) / na\n                    avg2 = sum(data2) / nb\n                    if avg1 > 0 and avg2 > 0:\n                        out.write(\"{}\\t{}\\t{}\\t{}\\n\".format(line[0], avg1, avg2, math.log(avg1/avg2, 2.0)))\n                        nout += 1\n        return (nin, nout)\n\n    def parseArgs(self, args):\n        prev = \"\"\n        if \"-h\" in args or \"--help\" in args:\n            return self.usage()\n        for a in args:\n            if prev == \"-a\":\n                self.alpha = float(a)\n                prev = \"\"\n            elif prev == \"-o\":\n                self.outfile = a\n                prev = \"\"\n            elif prev == \"-l\":\n                self.labels = parseSlice(a)\n                prev = \"\"\n            elif prev == \"-c1\":\n                self.colname1 = a\n                prev = \"\"\n            elif prev == \"-c2\":\n                self.colname2 = a\n                prev = \"\"\n            elif a in [\"-a\", \"-o\", \"-l\", \"-c1\", \"-c2\"]:\n                prev = a\n            elif self.filename is None:\n                self.filename = a\n            elif self.slice1 is None:\n                self.slice1 = parseSlice(a)\n            elif self.slice2 is None:\n                self.slice2 = parseSlice(a)\n\n        if (self.filename and self.slice1 and self.slice2):\n            return True\n        else:\n            return self.usage()\n\n    def usage(self):\n        sys.stdout.write(\"\"\"Usage: simplediff.py [options] exprfile slice1 slice2\n\nThis program performs \"simple\" differential analysis on gene expression data. `exprfile'\nshould be a file containing gene expression values with genes on the rows and samples\nin the columns. `slice1' and `slice2' should be expressions of the form P-Q indicating\nwhich columns contain the data for the two conditions being compared (e.g., if the first\ncondition is represented by three columns starting at column 5, use 5-7).\n\nOptions:\n\n  -a A  | Set the alpha parameter to A (see below). Default: {}.\n  -o O  | Write output to file O.\n  -c1 C | Set label for average of condition 1 values to C. Default: {}.\n  -c1 C | Set label for average of condition 2 values to C. Default: {}.\n\nA gene is considered to be differentially expressed between two groups of samples (A and B)\nif the two following conditions hold:\n\n  * The two sets of expression values are totally separated, ie:\n  \n      the minimum expression values for the samples in A is larger than the maximum in B\n      -OR-\n      the minimum expression values for the samples in B is larger than the maximum in A\n\n  * The distance between the two sets of values (the difference between the maximum of \n    the \"lower\" one and the minimum of the \"upper\" one) is larger than the largest of the\n    two ranges of values in A and B, multiplied by the alpha parameter.\n\nExample: A = {{10, 12, 16}}\n         B = {{20, 21, 22}}\n\nThe two sets are separated, because min(B) > max(A). The distance between the two sets is\n4 (20-16), range(A) = 6, range(B) = 2. If alpha is set to 1.0 (the default) then this\ngene would NOT be considered significantly different, because the largest range is 6, \nand 6 * alpha > 4. If alpha was set to 0.5, the gene would be called as different.\n\n\"\"\".format(self.alpha, self.colname1, self.colname2))\n\n\n    def run(self):\n        with open(self.outfile, \"w\") as out:\n            with open(self.filename, \"r\") as f:\n                (nin, nout) = self.process(f, out)\n                sys.stderr.write(\"{} in, {} out\\n\".format(nin, nout))\n\nif __name__ == \"__main__\":\n    SD = SimpleDiff()\n    if SD.parseArgs(sys.argv[1:]):\n        SD.run()\n",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 2.3608596497093376e-05,
      "p_css": 4.85512845176222e-05,
      "p_html": 0.00023314768005263143,
      "p_java": 0.0003543286570162592,
      "p_javascript": 2.156508673195759e-05,
      "p_matlab": 3.822417792399998e-10,
      "p_python": 0.00012316579025732657,
      "p_sql": 0.0008306559497284713,
      "p_typescript": 0.998364976572957
    },
    {
      "text": "def int_to_bin(int_num):\n bin_str = bin(int_num)\n return bin_str[2:]\n\nint_num = 30\nbin_num = int_to_bin(int_num)\nprint(bin_num) # 11110",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.5184240955491617,
      "p_css": 0.02991482398693473,
      "p_html": 0.016244468748686434,
      "p_java": 0.0005143659824851128,
      "p_javascript": 0.0042436470861662865,
      "p_matlab": 0.001553354492655518,
      "p_python": 0.42408212637410947,
      "p_sql": 0.003087657055399782,
      "p_typescript": 0.0019354607244010049
    },
    {
      "text": "import random\nimport string\n\ndef generate_password():\n password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\n return password\n\nprint(generate_password())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.7427243489726067e-12,
      "p_css": 2.918776737314463e-08,
      "p_html": 1.0382477483932405e-08,
      "p_java": 0.00020445433973281202,
      "p_javascript": 3.726134191661364e-14,
      "p_matlab": 7.132450723921406e-12,
      "p_python": 1.284033574245997e-06,
      "p_sql": 0.9997942211338906,
      "p_typescript": 9.136451843866597e-10
    },
    {
      "text": "import sys\n\nname = sys.argv[1]\n\nprint(\"Greetings, \"+name+\"!\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.007522485158602522,
      "p_css": 0.015280761151812736,
      "p_html": 0.00202401364475784,
      "p_java": 0.9366969045482796,
      "p_javascript": 4.815746546623716e-07,
      "p_matlab": 9.057001909332129e-05,
      "p_python": 0.03760933253233233,
      "p_sql": 0.0005692813735464469,
      "p_typescript": 0.00020616999692032445
    },
    {
      "text": "\"\"\"\nReverse given sentence\n\"\"\"\n\ndef reverse_sentence(sentence):\n    words = sentence.split(\" \")\n    reverse_words = words[::-1]\n    reverse_sentence = \" \".join(reverse_words)\n    return reverse_sentence\n\nif __name__==\"__main__\":\n    sentence = \"hello world\"\n    reverse_sentence = reverse_sentence(sentence)\n    print(\"Reverse of sentence '\"+sentence+\"' is '\"+reverse_sentence+\"'\")",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.008604995813260585,
      "p_css": 0.009974754997457383,
      "p_html": 0.015874776268371336,
      "p_java": 5.918168027417029e-07,
      "p_javascript": 0.00798073746460041,
      "p_matlab": 0.0003396841344907326,
      "p_python": 0.4055933366445697,
      "p_sql": 0.5509127716123186,
      "p_typescript": 0.0007183512481284813
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read the data\ndata = pd.read_csv('cars.csv')\n\n# Split the data in features (X) and labels (y)\nX = data.drop('price', axis=1)\ny = data['price']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n\n# Train the model\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\n# Predict the price of the cars in the test set\ny_pred = model.predict(X_test)\n\n# Compare the predictions with the actual values\nfor prediction, actual in zip(y_pred, y_test):\n print(prediction, actual)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.013926265846840993,
      "p_css": 0.21094362903606126,
      "p_html": 0.006342975157608449,
      "p_java": 2.0456595683272216e-06,
      "p_javascript": 0.0018844791000299478,
      "p_matlab": 1.1748398766302237e-05,
      "p_python": 0.10852459986875908,
      "p_sql": 4.8022752010505024e-05,
      "p_typescript": 0.6583162341803552
    },
    {
      "text": "def is_present(arr, number):\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.9247961689055987e-07,
      "p_css": 1.022324123278562e-06,
      "p_html": 1.5684858045731314e-06,
      "p_java": 3.828487916049116e-08,
      "p_javascript": 2.4743021696766462e-08,
      "p_matlab": 0.1924100966027338,
      "p_python": 0.8075867353244467,
      "p_sql": 5.682811680256652e-08,
      "p_typescript": 1.649272570288092e-07
    },
    {
      "text": "def second_largest_elem(lst):\n    lst.sort()\n    return lst[-2]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.387074126394499e-05,
      "p_css": 0.00021825905952902095,
      "p_html": 8.229198278705192e-05,
      "p_java": 6.534751778522834e-06,
      "p_javascript": 1.8178256900450275e-05,
      "p_matlab": 1.1468992761880336e-06,
      "p_python": 0.9995416912122574,
      "p_sql": 6.245303106353843e-05,
      "p_typescript": 3.557406514379006e-05
    },
    {
      "text": "import random\n\noptions = [\"Rock\", \"Paper\", \"Scissors\"]\n\ndef rock_paper_scissors(n):\n    # get computer's move\n    computer_move = random.choice(options)\n    \n    # get user's move\n    print(\"Choose one: Rock, Paper, or Scissors\")\n    user_move = input()\n    user_move = user_move.capitalize()\n    \n    # check for a tie\n    if computer_move == user_move:\n        print(f\"It's a tie! You both chose {computer_move}\")\n    \n    # check for user win\n    elif (user_move == \"Rock\" and computer_move == \"Scissors\") or (user_move == \"Paper\" and computer_move == \"Rock\") or (user_move == \"Scissors\" and computer_move == \"Paper\"):\n        print(f\"You win! {user_move} beats {computer_move}\")\n    \n    # if none of the above, user loses\n    else:\n        print(f\"You lose! {computer_move} beats {user_move}\")\n\nrock_paper_scissors(3)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01212706612810017,
      "p_css": 0.1111786528339184,
      "p_html": 0.01901301220509525,
      "p_java": 0.00020484899302843025,
      "p_javascript": 0.0017128385029515122,
      "p_matlab": 0.005048829806675652,
      "p_python": 0.5492207514607026,
      "p_sql": 0.0113149591218427,
      "p_typescript": 0.29017904094768543
    },
    {
      "text": "import re\nimport json\n\n# Load the data from the JSON\nwith open('email_data.json') as f:\n data = json.load(f)\n\n# Create a template for the email\nemail_template = \"\"\"\nDear {{ recipient }},\n\n{{ greeting }},\n\n{{ message }}\n\n{{ signature }}\n\"\"\"\n\n# Compile the regex\npattern = re.compile(r'{{\\s*(.*?)\\s*}}')\n\n# Function to format the template\ndef format_template(template, data):\n # Find all the placeholders\n placeholders = pattern.findall(template)\n\n # Replace the placeholders in the template with the actual values\n for placeholder in placeholders:\n value = data.get(placeholder)\n template = template.replace('{{ %s }}' % placeholder, value)\n\n return template\n\n# Format the email template\nformatted_email = format_template(email_template, data)\n\n# Print the formatted email\nprint(formatted_email)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0018694017136522145,
      "p_css": 0.13670747309310485,
      "p_html": 0.0025465079256469657,
      "p_java": 4.3928492960135336e-07,
      "p_javascript": 0.008914674695987711,
      "p_matlab": 0.00018018436096700808,
      "p_python": 0.0009158778033941103,
      "p_sql": 0.00034730669437748983,
      "p_typescript": 0.84851813442794
    },
    {
      "text": "import pygame\nimport time\n \n# defines the size of the window\nWINDOW_SIZE = (400, 400)\n \n# initializes pygame\npygame.init()\nscreen = pygame.display.set_mode(WINDOW_SIZE)\n \n# game parameters\ndone = False\nclock = pygame.time.Clock()\n\n# game loop\nwhile not done:\n # gets all events\n for event in pygame.event.get():\n  if event.type == pygame.QUIT:\n   done = True\n  \n  if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n   done = True \n\n # draw something\n pygame.draw.rect(screen, (255, 20, 147), pygame.Rect(30, 30, 60, 60))\n \n # updates the display\n pygame.display.flip()\n \n # delays the loop iteration\n time.sleep(1/30)\n \n# terminate pygame\npygame.quit()",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.020517382761838412,
      "p_css": 0.31374608157555667,
      "p_html": 0.05754718056641033,
      "p_java": 0.0021136778458860166,
      "p_javascript": 0.01871330374267405,
      "p_matlab": 0.005907126152699635,
      "p_python": 0.19159466337390735,
      "p_sql": 0.36634890198104186,
      "p_typescript": 0.023511681999985736
    },
    {
      "text": "def check_triplet_sum(a, b, c):\n    \n    if a + b == c or b + c == a or a + c == b:\n        return True\n    else:\n        return False\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the third number: \"))\n\nif check_triplet_sum(a, b, c):\n    print(\"Numbers can form a triplet.\")\nelse:\n    print(\"Numbers cannot form a triplet.\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006852856429140738,
      "p_css": 0.00021538994206477585,
      "p_html": 0.004521525103631869,
      "p_java": 0.15488975965179785,
      "p_javascript": 0.0001719490343285007,
      "p_matlab": 4.740330902903417e-11,
      "p_python": 0.8393208867645591,
      "p_sql": 9.910391918207496e-06,
      "p_typescript": 0.0001852934213825239
    },
    {
      "text": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n \nprint(factorial(5))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.704220058499777e-05,
      "p_css": 0.00013850142234869418,
      "p_html": 5.7377080750846436e-05,
      "p_java": 1.8517739045025923e-06,
      "p_javascript": 4.2793858624243125e-05,
      "p_matlab": 1.9397179390146344e-05,
      "p_python": 0.9996406371752123,
      "p_sql": 3.3428417872665736e-05,
      "p_typescript": 1.897089131172332e-05
    },
    {
      "text": "import sqlite3\n\nfrom flask import Flask, g, render_template\n\n# create the application\napp = Flask(__name__)\n\n# define the database connection\ndef get_db():\n if not hasattr(g, 'db'):\n g.db = sqlite3.connect('users.db')\n return g.db\n\n# close the connection at the end of a request\n@app.teardown_appcontext\ndef close_db(error):\n if hasattr(g, 'db'):\n g.db.close()\n\n# define a route to display all users\n@app.route('/')\ndef index_page():\n db = get_db()\n cur = db.execute(SELECT * FROM users)\n return render_template('index.html', users=cur.fetchall())\n\n# run the application\nif __name__ == '__main__':\n app.run()\n\n# template file: index.html\n<html>\n <body>\n {% for user in users %}\n <h3>{{ user.name }} | {{ user.address }}</h3>\n {% endfor %}\n </body>\n</html>",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 1.0197870520510708e-05,
      "p_css": 1.0752766994949012e-06,
      "p_html": 0.9999378278382127,
      "p_java": 1.674587325646116e-09,
      "p_javascript": 2.137427263314107e-07,
      "p_matlab": 6.1191444048575385e-09,
      "p_python": 9.393785207996606e-08,
      "p_sql": 3.3479073302462545e-05,
      "p_typescript": 1.7104466954823398e-05
    },
    {
      "text": "import numpy as np\n\nrandom_vector = np.random.random(10)\nprint(\"Random Vector of size 10: \\n\", random_vector)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008632275546345424,
      "p_css": 0.0010917429514636198,
      "p_html": 0.0008470479074640044,
      "p_java": 6.501548139019523e-06,
      "p_javascript": 2.3588416689714277e-05,
      "p_matlab": 5.707819683712896e-06,
      "p_python": 0.9948250814770503,
      "p_sql": 0.0010039380453522517,
      "p_typescript": 0.0013331642795228167
    },
    {
      "text": "def decimalToBinary(n):\n    binary = 0\n    power = 1\n    \n    while (n != 0):\n        last_bit = n % 2\n        binary = binary + last_bit * power\n        n = n // 2\n        power = power * 10\n \n    return binary\n\nn = 17\nprint('Binary Representation of', n, 'is', decimalToBinary(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0018070966702821347,
      "p_css": 0.015569181499159075,
      "p_html": 0.007467591413061061,
      "p_java": 0.0015791701603513767,
      "p_javascript": 0.007803274886957104,
      "p_matlab": 0.0010685297927812017,
      "p_python": 0.8882395849328079,
      "p_sql": 0.0003763234120754581,
      "p_typescript": 0.07608924723252469
    },
    {
      "text": "def split_string(string):\n    result = []\n    for i in range(0, len(string), int(len(string) / 2)):\n        result.append(string[i: i + int(len(string) / 2)])\n    return result",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.567259324020986e-19,
      "p_css": 1.6575284116861377e-12,
      "p_html": 1.1848757731739631e-13,
      "p_java": 0.9999999402171864,
      "p_javascript": 2.316326200150657e-21,
      "p_matlab": 6.709635439595143e-18,
      "p_python": 5.973573807690537e-08,
      "p_sql": 4.5279873254398953e-11,
      "p_typescript": 1.9515068360526864e-14
    },
    {
      "text": "class DataStorage:\n    def __init__(self, data):\n        self.data = data\n        self._validate_data()\n    \n    def _validate_data(self):\n        \"\"\"Validates the data stored in the DataStorage object.\"\"\"\n        for key, value in self.data.items():\n            if not isinstance(value, str):\n                raise TypeError('All data must be strings')",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.3297841042541603e-05,
      "p_css": 0.710404496418884,
      "p_html": 0.06898942581345234,
      "p_java": 1.3325417966087007e-06,
      "p_javascript": 0.0005676831932618416,
      "p_matlab": 0.0034694996638645493,
      "p_python": 0.002234118892128145,
      "p_sql": 0.11496477849563429,
      "p_typescript": 0.09935536713993563
    },
    {
      "text": "def word_count(words):\n    counter = {}\n    for word in words:\n        if word not in counter:\n            counter[word] = 0\n        counter[word] += 1\n    return counter\n    \nwords = [\"apple\", \"orange\", \"apple\", \"orange\", \"pear\"]\nword_count(words)\n\"\"\"\n{'apple': 2, 'orange': 2, 'pear': 1}\n\"\"\"",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0058420934881046995,
      "p_css": 0.01940819812169059,
      "p_html": 0.03570912406153338,
      "p_java": 4.491548414590501e-05,
      "p_javascript": 0.0002659014123019682,
      "p_matlab": 0.0024266415080852976,
      "p_python": 0.9232799918304139,
      "p_sql": 0.01263757770549852,
      "p_typescript": 0.00038555638822550844
    },
    {
      "text": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom deskctl import app\nfrom flask import g, render_template, make_response, session, request\nimport traceback\n\n################################################################################\n\n## standard error (uses render_template and thus standard page layout)\ndef stderr(title,message,code=200,template=\"error.html\"):\n\t\"\"\"This function is called by other error functions to show the error to the\n\tend user. It takes an error title and an error message.\n\t\"\"\"\n\n\t# Should we show a traceback?\t\n\tif app.debug:\n\t\tdebug = traceback.format_exc()\n\telse:\n\t\tdebug = \"\"\n\n\treturn render_template(template,title=title,message=message,debug=debug), code\n\n################################################################################\n\n## fatal error (returns HTML from python code - which is more likely to work)\ndef fatalerr(title=u\"fatal error ☹\",message=\"Whilst processing your request an unexpected error occured which the application could not recover from\",debug=None):\n\n\t# Should we show a traceback?\t\n\tif debug is None:\n\t\tif app.debug:\n\t\t\tdebug = traceback.format_exc()\n\t\telse:\n\t\t\tdebug = \"Please ask your administrator to consult the error log for more information.\"\n\n\t# Build the response. Not using a template here to prevent any Jinja \n\t# issues from causing this to fail.\n\thtml = u\"\"\"\n<!doctype html>\n<html>\n<head>\n\t<title>Fatal Error</title>\n\t<meta charset=\"utf-8\" />\n\t<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t<style type=\"text/css\">\n\tbody {\n\t\tbackground-color: #8B1820;\n\t\tcolor: #FFFFFF;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\t}\n\th1 {\n\t\tfont-size: 4em;\n\t\tfont-weight: normal;\n\t\tmargin: 0px;\n\t}\n\tdiv {\n\t\twidth: 80%%;\n\t\tmargin: 5em auto;\n\t\tpadding: 50px;\n\t\tborder-radius: 0.5em;\n    }\n    @media (max-width: 900px) {\n        div {\n            width: auto;\n            margin: 0 auto;\n            border-radius: 0;\n            padding: 1em;\n        }\n    }\n    </style>    \n</head>\n<body>\n<div>\n\t<h1>%s</h1>\n\t<p>%s</p>\n\t<pre>%s</pre>\n</div>\n</body>\n</html>\n\"\"\" % (title,message,debug)\n\n\treturn make_response(html, 500)\n\n################################################################################\n\n## log a full error to the python logger\ndef logerr():\n\n\t# Get the username\n\tif 'username' in session:\n\t\tusername = session['username']\n\telse:\n\t\tusername = 'Not logged in'\n\n\t## Log the critical error (so that it goes to e-mail)\n\tapp.logger.error(\"\"\"Request details:\nHTTP Path:            %s\nHTTP Method:          %s\nClient IP Address:    %s\nUser Agent:           %s\nUser Platform:        %s\nUser Browser:         %s\nUser Browser Version: %s\nUsername:             %s\n\nTraceback:\n\n%s\n\"\"\" % (\n\n\t\t\trequest.path,\n\t\t\trequest.method,\n\t\t\trequest.remote_addr,\n\t\t\trequest.user_agent.string,\n\t\t\trequest.user_agent.platform,\n\t\t\trequest.user_agent.browser,\n\t\t\trequest.user_agent.version,\n\t\t\tusername,\n\t\t\ttraceback.format_exc(),\t\n\t\t))\n",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 7.212035160447912e-11,
      "p_css": 2.276565953648163e-10,
      "p_html": 0.9999999887808139,
      "p_java": 1.5198604077853394e-10,
      "p_javascript": 8.703512974546005e-10,
      "p_matlab": 3.0666998245486377e-13,
      "p_python": 5.198555139528397e-13,
      "p_sql": 2.8027113510693022e-11,
      "p_typescript": 9.868218447068682e-09
    },
    {
      "text": "from spellchecker import SpellChecker\n\nspell = SpellChecker() \n\n# Find all the possible words that are misspelled\nmisspelled = spell.unknown(text.split())\n\n# Print out each misspelled word and its correction\nfor word in misspelled:\n    print(f'Incorrect word: {word}\\tCorrection: {spell.correction(word)}')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.022571893109345292,
      "p_css": 0.04063376628336104,
      "p_html": 0.0025786756681425243,
      "p_java": 0.0008947993058191903,
      "p_javascript": 0.00886408986113136,
      "p_matlab": 0.0001704041267364594,
      "p_python": 0.8892431109558163,
      "p_sql": 0.02847136971776469,
      "p_typescript": 0.006571890971883073
    },
    {
      "text": "import aiohttp\nimport asyncio\n\nasync def fetch_data(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            data = await response.json()\n            return data\n\nasync def main():\n    data = await fetch_data('http://example.com/data.json')\n    print(data)\n\nasyncio.run(main())",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 4.987656557692388e-07,
      "p_css": 0.6358935415525125,
      "p_html": 0.0539391534750737,
      "p_java": 0.10662508669733711,
      "p_javascript": 8.5253158866535e-05,
      "p_matlab": 7.259634835222179e-06,
      "p_python": 0.18954403439241232,
      "p_sql": 0.00325601222154345,
      "p_typescript": 0.010649160101763302
    },
    {
      "text": "def fibonacci(length):\n # Initialize the first two numbers \n a, b = 0, 1 \n\n # We generate the Fibonacci series \n # up to a given length \n res = [] \n while (len(res) < length): \n res.append(b)\n \n # Calculate the next Fibonacci number \n a, b = b, a + b \n\n # Return the generated Fibonacci series \n return res\n\nprint(fibonacci(5))\n# Output -> [1, 1, 2, 3, 5]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009693764221581999,
      "p_css": 0.0005261091864240524,
      "p_html": 0.0002672022095740417,
      "p_java": 0.008259208290360408,
      "p_javascript": 0.003368023515519233,
      "p_matlab": 1.0919144908283258e-08,
      "p_python": 0.978494762321532,
      "p_sql": 0.0020681263935329614,
      "p_typescript": 0.006047180741754084
    },
    {
      "text": "# Python program to implement a binary tree\n\n# A class that represents an individual node in a Binary Tree\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n# A class to represent the Binary Tree\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        if self.root is None:\n            self.root = Node(key)\n        else:\n            self._insert(self.root, key)\n\n    def _insert(self, curr_node, key):\n        if key < curr_node.val:\n            if curr_node.left is None:\n                curr_node.left = Node(key)\n            else:\n                self._insert(curr_node.left, key)\n        elif key > curr_node.val:\n            if curr_node.right is None:\n                curr_node.right = Node(key)\n            else:\n                self._insert(curr_node.right, key)\n\n    def inOrder(self):\n        res = []\n        self._inOrder(self.root, res)\n        return res\n\n    def _inOrder(self, curr_node, res):\n        if curr_node:\n            self._inOrder(curr_node.left, res)\n            res.append(curr_node.val)\n            self._inOrder(curr_node.right, res)\n\n    def preOrder(self):\n        res = []\n        self._preOrder(self.root, res)\n        return res\n\n    def _preOrder(self, curr_node, res):\n        if curr_node:\n            res.append(curr_node.val)\n            self._preOrder(curr_node.left, res)\n            self._preOrder(curr_node.right, res)\n\n    def postOrder(self):\n        res = []\n        self._postOrder(self.root, res)\n        return res\n\n    def _postOrder(self, curr_node, res):\n        if curr_node:\n            self._preOrder(curr_node.left, res)\n            self._preOrder(curr_node.right, res)\n            res.append(curr_node.val)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.002284975602538531,
      "p_css": 0.10291589337681666,
      "p_html": 0.028040658311148003,
      "p_java": 3.0839310063080985e-05,
      "p_javascript": 0.00047329704391890423,
      "p_matlab": 9.965966155014386e-05,
      "p_python": 0.3962789853706755,
      "p_sql": 0.46917654915302387,
      "p_typescript": 0.0006991421702653934
    },
    {
      "text": "import tkinter as tk\n\nwindow = tk.Tk()\nwindow.title('Calculator')\nwindow.geometry('300x150')\n\n# Create the input field\ninput_field = tk.Entry(\n window,\n font=('Courier', 20),\n width=15,\n borderwidth=5\n)\ninput_field.grid(row=0, column=0, columnspan=4, padx=10, pady=10)\n\n# Function to return the value of the button clicked\ndef button_pressed(value):\n current = input_field.get()\n input_field.delete(0, tk.END)\n input_field.insert(0, str(current) + str(value))\n\n# Create button object\nbutton_0 = tk.Button(window, text='0', padx=40, pady=20, command=lambda: button_pressed(0))\nbutton_1 = tk.Button(window, text='1', padx=40, pady=20, command=lambda: button_pressed(1))\nbutton_2 = tk.Button(window, text='2', padx=40, pady=20, command=lambda: button_pressed(2))\nbutton_3 = tk.Button(window, text='3', padx=40, pady=20, command=lambda: button_pressed(3))\nbutton_4 = tk.Button(window, text='4', padx=40, pady=20, command=lambda: button_pressed(4))\nbutton_5 = tk.Button(window, text='5', padx=40, pady=20, command=lambda: button_pressed(5))\nbutton_6 = tk.Button(window, text='6', padx=40, pady=20, command=lambda: button_pressed(6))\nbutton_7 = tk.Button(window, text='7', padx=40, pady=20, command=lambda: button_pressed(7))\nbutton_8 = tk.Button(window, text='8', padx=40, pady=20, command=lambda: button_pressed(8))\nbutton_9 = tk.Button(window, text='9', padx=40, pady=20, command=lambda: button_pressed(9))\nbutton_add = tk.Button(window, text='+', padx=39, pady=20, command=lambda: button_pressed('+'))\nbutton_sub = tk.Button(window, text='-', padx=41, pady=20, command=lambda: button_pressed('-'))\nbutton_mul = tk.Button(window, text='*', padx=40, pady=20, command=lambda: button_pressed('*'))\nbutton_div = tk.Button(window, text='/', padx=41, pady=20, command=lambda: button_pressed('/'))\n\n# Place all the buttons\nbutton_0.grid(row=4, column=0)\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)\nbutton_9.grid(row=1, column=2)\nbutton_add.grid(row=4, column=3)\nbutton_sub.grid(row=3, column=3)\nbutton_mul.grid(row=2, column=3)\nbutton_div.grid(row=1, column=3)\n\n# Run the mainloop\nwindow.mainloop()",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.02071077834229499,
      "p_css": 0.1928653614804252,
      "p_html": 0.1651014076566669,
      "p_java": 0.0030011363084619385,
      "p_javascript": 0.01805018456996558,
      "p_matlab": 0.009315094933599088,
      "p_python": 0.25811109881547584,
      "p_sql": 0.2354922589688597,
      "p_typescript": 0.09735267892425085
    },
    {
      "text": "import string\nimport random\n\ndef generateRandomString():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for _ in range(10))\n    \nif __name__ == '__main__':\n    print(generateRandomString())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.3329057102581283e-07,
      "p_css": 3.6467314146523324e-05,
      "p_html": 5.942151645242072e-05,
      "p_java": 0.002169185832680666,
      "p_javascript": 2.342712811443407e-09,
      "p_matlab": 0.0030093518493008284,
      "p_python": 0.04601811107008696,
      "p_sql": 0.9487046707695347,
      "p_typescript": 2.6560145139071622e-06
    },
    {
      "text": "import random\nimport time\n \ndef get_player_name():\n \n    return input(\"What is your name? \")\ndef get_player_choice():\n \n    choice = input(\"\\nRock, Paper or Scissors (R/P/S)? \").upper()\n    \n    if choice not in [\"R\", \"P\", \"S\"]:\n        print(\"\\nNot an valid answer. try again\")\n        get_player_choice()\n    return choice\n \n \ndef main():\n    # get player info\n    player_1_name = get_player_name()\n    player_2_name = get_player_name()\n    print(f\"\\nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!\")\n    time.sleep(3)\n \n    # get player options\n    player_1_choice = get_player_choice()\n    player_2_choice = get_player_choice()\n \n    # operation\n    print(f\"\\n{player_1_name} puts {player_1_choice}.\")\n    print(f\"\\n{player_2_name} puts {player_2_choice}\")\n    time.sleep(3)\n    print(\"\\nShoot!\")\n    time.sleep(2)\n    print(\"\\nNow let's see!\")\n    time.sleep(3)\n    if player_1_choice == player_2_choice:\n        print(\"\\nIt's a tie!\")\n    elif player_1_choice == 'R' and player_2_choice == 'S':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'S' and player_2_choice == 'R':\n        print(f\"\\n{player_2_name} wins!\")\n    elif player_1_choice == 'P' and player_2_choice == 'R':\n        print(f\"\\n{player_1_name} wins!\")\n    elif player_1_choice == 'R' and player_2_choice == 'P':\n        print(f\"\\n{player_2_name} wins!\")\n    else:\n        print(f\"\\n{player_2_name} wins!\")\n \nif __name__ == \"__main__\":\n    main()",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 3.606205171589137e-05,
      "p_css": 0.003946948261420862,
      "p_html": 0.00034320560252243414,
      "p_java": 4.804016651350169e-06,
      "p_javascript": 0.5641091488763323,
      "p_matlab": 3.7310179695943772e-06,
      "p_python": 0.4308676690045968,
      "p_sql": 0.0004150502806727757,
      "p_typescript": 0.0002733808881179008
    },
    {
      "text": "def operation(op):\n    result = eval(op)\n    print(result)\n\noperation('2*2') # prints 4",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0029064891130536467,
      "p_css": 0.01815778147623672,
      "p_html": 0.0004396853083148432,
      "p_java": 1.3814606026801055e-06,
      "p_javascript": 0.0001794139397496544,
      "p_matlab": 3.6821475286718353e-05,
      "p_python": 0.9770508263354399,
      "p_sql": 0.0009609410735358303,
      "p_typescript": 0.0002666598177800587
    },
    {
      "text": "import tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Input sentences\nsentences = [\n\"Snow was steadily falling, blanketing the ground in white.\",\n\"A gentle wind was blowing in from the nearby mountains.\",\n\"The sky was a foggy grey, with no sign of the sun.\"\n]\n\n# Tokenize the sentences \ntokenizer = Tokenizer(filters='!\"#$%&()*+.,-/:;<=>?@[\\\\]^_`{|}~\\t\\n')\ntokenizer.fit_on_texts(sentences)\n\n# Generate token sequences\ninput_seq = tokenizer.texts_to_sequences(sentences)\n\n# Set the maxlen so the generated token sequences are equal in size\nmaxlen = max([len(x) for x in input_seq])\ninput_seq = pad_sequences(input_seq, maxlen=maxlen, padding='post')\n\n# Set the batch size to be as big as the input sequences\nbatch_size = len(input_seq)\n\n# Create a tensor input\ninputs = tf.keras.Input(shape=(maxlen,))\n\n# Create the RNN model\nx = tf.keras.layers.Embedding(\ninput_dim=len(tokenizer.word_index) + 1,\noutput_dim=128,\n)(inputs)\nx = tf.keras.layers.LSTM(128)(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\nx = tf.keras.layers.Dense(len(tokenizer.word_index) + 1, activation='softmax')(x)\n\n# Create the Model\nmodel = tf.keras.Model(inputs=inputs, outputs=x)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(input_seq, epochs=30, batch_size=batch_size)\n\n# Generate a novel\nseed_text = \"The\"\nnext_words = 100\n  \nfor _ in range(next_words):\n  token_list = tokenizer.texts_to_sequences([seed_text])[0]\n  token_list = pad_sequences([token_list], maxlen=maxlen, padding='post')\n  predicted = np.argmax(model.predict(token_list), axis=-1)\n  output_word = \"\"\n  for word, index in tokenizer.word_index.items():\n    if index == predicted:\n      output_word = word\n      break\n  seed_text += \" \" + output_word\nprint(seed_text)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.11180081533608599,
      "p_css": 0.012097149968557385,
      "p_html": 0.005554074679822842,
      "p_java": 4.249721002277812e-06,
      "p_javascript": 9.114733018255411e-05,
      "p_matlab": 0.0002380091089765045,
      "p_python": 0.24622294457306088,
      "p_sql": 6.236879576167714e-05,
      "p_typescript": 0.62392924048655
    },
    {
      "text": "x = 1\nprint(\"x is\", (\"0\" if x == 0 else \"1\" if x == 1 else \"not 0 or 1\"))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.009985983780345407,
      "p_css": 0.011174597774086255,
      "p_html": 0.00844147764584636,
      "p_java": 0.00034436513097751086,
      "p_javascript": 0.006964864062367201,
      "p_matlab": 0.9203695907811167,
      "p_python": 0.03039512674213408,
      "p_sql": 0.001373737965623893,
      "p_typescript": 0.010950256117502468
    },
    {
      "text": "def fibonacci(n):\n  fib = [0, 1]\n  for i in range(2,n):\n    fib.append(fib[i-2] + fib[i-1])\n  return fib[:n]\n\nfibonacciSequence = fibonacci(10)\nprint(fibonacciSequence)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0014183951456572033,
      "p_css": 0.001535012129792372,
      "p_html": 0.002775795939315068,
      "p_java": 0.00016620516394641758,
      "p_javascript": 0.00036308572695735875,
      "p_matlab": 0.03590810586793305,
      "p_python": 0.9562607948531675,
      "p_sql": 0.0003492143342531097,
      "p_typescript": 0.0012233908389778405
    },
    {
      "text": "import re\n\ntext = \"The quick brown fox jumped over the lazy dog\"\n\n# Extract words from the document\nwords = re.findall(r'\\w+', text)\n\n# Get the frequency of each word\nword_freq = {} \nfor word in words: \n    if word not in word_freq: \n        word_freq[word] = 0\n    word_freq[word] += 1\n\n# Sort words in descending order by frequency\nsorted_word_freq = sorted(word_freq.items(), key = lambda x: x[1], reverse = True) \n  \n# Print the top 10 most frequent words\nprint(\"Top 10 most frequent words:\") \nfor word, freq in sorted_word_freq[:10]: \n    print(word, ' :', freq)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.004371906189865308,
      "p_css": 0.0058719981128838635,
      "p_html": 0.09706884781146319,
      "p_java": 8.206598572652857e-07,
      "p_javascript": 0.0017803101958783762,
      "p_matlab": 0.00021346226925100624,
      "p_python": 0.871240817090804,
      "p_sql": 0.019236866069917563,
      "p_typescript": 0.00021497160007941855
    },
    {
      "text": "for i in range(10,20):\n    if i == 19:\n        print(i, end = '')\n    else:\n        print(i, end = ', ')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.220229066936246e-06,
      "p_css": 2.864264985533754e-05,
      "p_html": 3.618846438110696e-05,
      "p_java": 3.5474166367613453e-07,
      "p_javascript": 7.815792743408463e-07,
      "p_matlab": 0.30658260383818264,
      "p_python": 0.693335225954225,
      "p_sql": 1.3589284717876406e-06,
      "p_typescript": 5.623614879079433e-06
    },
    {
      "text": "for num in range(1,11):\n    if num % 2 != 0:\n        print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4894035211680711e-24,
      "p_css": 9.410394037796519e-37,
      "p_html": 4.6685749682307406e-24,
      "p_java": 6.171338873645088e-26,
      "p_javascript": 1.4893586790788214e-25,
      "p_matlab": 1.0,
      "p_python": 2.0241527573284863e-21,
      "p_sql": 4.113898389020325e-26,
      "p_typescript": 5.48380695217311e-25
    },
    {
      "text": "# Sort the array using Merge sort\ndef mergeSort(arr): \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n  \n        # Sort the left and right side\n        mergeSort(L) \n        mergeSort(R) \n  \n        # Merge the parts recursively \n        i = j = k = 0\n        \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n  \n# Print the sorted array\nmergeSort(arr) \nprint(\"Sorted array is:\",arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0001625516954564143,
      "p_css": 0.0003291628342099487,
      "p_html": 4.5137192081565624e-05,
      "p_java": 8.324952924327776e-06,
      "p_javascript": 9.780004637237423e-05,
      "p_matlab": 0.8488941783365577,
      "p_python": 0.14833565478194766,
      "p_sql": 4.301853141901853e-06,
      "p_typescript": 0.002122888307308197
    },
    {
      "text": "def swap_items(lst, item1, item2):\n    idx1 = lst.index(item1)\n    idx2 = lst.index(item2)\n    lst[idx1], lst[idx2] = lst[idx2], lst[idx1]\n    \n    return lst",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001970447937040195,
      "p_css": 0.0028972965202587533,
      "p_html": 0.003434216516830759,
      "p_java": 0.00016971532056505638,
      "p_javascript": 0.0007543636608521621,
      "p_matlab": 0.0001300115025843046,
      "p_python": 0.9889109075735938,
      "p_sql": 0.0003189764023232165,
      "p_typescript": 0.0014140645659518546
    },
    {
      "text": "def reverse_string(string): \n    return string[::-1] \n    \n# Time Complexity: O(n)\n# Space Complexity: O(1)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.9084431336905587e-09,
      "p_css": 4.088564115557854e-05,
      "p_html": 7.666893415705842e-06,
      "p_java": 0.9860328100730014,
      "p_javascript": 1.7557163747033611e-10,
      "p_matlab": 9.371579909787833e-08,
      "p_python": 0.013715228128604444,
      "p_sql": 0.00020138545843496493,
      "p_typescript": 1.928005574175773e-06
    },
    {
      "text": "def detect_plagiarism(txt1, txt2):\n txt1_words = txt1.split(' ')\n txt2_words = txt2.split(' ')\n\n num_common_words = len(set(txt1_words) & set(txt2_words))\n total_words = len(txt1_words) + len(txt2_words)\n score = 2 * num_common_words / total_words\n\n return score\n\ntxt1 = 'This is an example of text I just made up.'\ntxt2 = 'This is an example of text I wrote.'\n\nprint(detect_plagiarism(txt1, txt2))  # Output: 0.5",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.004018185905077818,
      "p_css": 0.023009144606000845,
      "p_html": 0.30520035668558443,
      "p_java": 0.3217398085397642,
      "p_javascript": 0.04249425156451791,
      "p_matlab": 3.96660577392929e-05,
      "p_python": 0.2375586919545791,
      "p_sql": 0.06128624472790488,
      "p_typescript": 0.0046536499588315326
    },
    {
      "text": "def find_smallest(arr):\n    smallest = None\n    for n in arr:\n        if smallest is None or n < smallest:\n            smallest = n\n    return smallest\n    \narr = [8, 3, 9, 5, 1]\nsmallest = find_smallest(arr)\nprint(smallest)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0005165096310380218,
      "p_css": 0.0020905937084360815,
      "p_html": 0.0005985785597455755,
      "p_java": 0.0001104372655253856,
      "p_javascript": 0.0004187489630810769,
      "p_matlab": 0.9239263133659368,
      "p_python": 0.07120959744417339,
      "p_sql": 5.8512810504860463e-05,
      "p_typescript": 0.0010707082515588845
    },
    {
      "text": "\"\"\"\nA function to return the squares of an array in Python \n\"\"\"\n\ndef square_array(input_array): \n  squared_array = []\n  for i in input_array: \n    squared_array.append(i*i)\n  return squared_array",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 2.879384366055549e-07,
      "p_css": 4.773192962153076e-09,
      "p_html": 1.584658446786992e-08,
      "p_java": 5.0059586099075215e-11,
      "p_javascript": 0.999999137846132,
      "p_matlab": 5.423485738942652e-07,
      "p_python": 1.3842285883699062e-10,
      "p_sql": 2.9399173896550587e-09,
      "p_typescript": 8.11868028792454e-09
    },
    {
      "text": "def is_leap_year(year):\n    # If a year is divisible by 4 and not divisible by 100, \n    #  it is a leap year.\n    # If a year is divisible by 4, 100 and 400, \n    #  it is also a leap year\n    \n    if year % 4 == 0 and year % 100 != 0:\n        return True\n    elif year % 4 == 0 and year % 100 == 0 and year % 400 == 0:\n        return True\n    else:\n        return False\n    \n    \n# Testing\nprint(is_leap_year(2020))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0002978137610037226,
      "p_css": 0.056213435228364826,
      "p_html": 0.016481276879034553,
      "p_java": 0.006685094980004938,
      "p_javascript": 0.14669672506589818,
      "p_matlab": 0.011421131064791885,
      "p_python": 0.2763023741782178,
      "p_sql": 0.0026098960760962036,
      "p_typescript": 0.48329225276658777
    },
    {
      "text": "def calculate_trade():\n coal = 50\n barley = 50\n while coal > 0 and barley > 0:\n  coal -= 1\n  barley -= 2\n return coal + barley",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00021890663762502493,
      "p_css": 0.019596854204381942,
      "p_html": 0.006003822066686744,
      "p_java": 0.0004918843260767545,
      "p_javascript": 0.0002206154986658939,
      "p_matlab": 0.00016131222428182625,
      "p_python": 0.8918224793584713,
      "p_sql": 0.00024087645469360623,
      "p_typescript": 0.08124324922911688
    },
    {
      "text": "def add_numbers(a,b):\n    return a + b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012301944068195585,
      "p_css": 0.003987747991535325,
      "p_html": 0.002902158679459525,
      "p_java": 0.00031218867602005957,
      "p_javascript": 0.000913777784127995,
      "p_matlab": 0.00021648270223205662,
      "p_python": 0.9879523945636358,
      "p_sql": 0.000831341461703893,
      "p_typescript": 0.0016537137344656732
    },
    {
      "text": "class DatabaseConnection:\n    def __init__(self):\n        self.conn = psycopg2.connect(host=\"localhost\", database=\"mydb\")\n\n    def __del__(self):\n        self.conn.close()",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.00012286921678256903,
      "p_css": 0.002762812891188156,
      "p_html": 0.01706325848516508,
      "p_java": 2.1351261794792743e-05,
      "p_javascript": 4.797543054202299e-05,
      "p_matlab": 8.783011718726125e-06,
      "p_python": 0.0841139896043747,
      "p_sql": 0.8953316303542995,
      "p_typescript": 0.0005273297441344368
    },
    {
      "text": "\"\"\"\nWrite a Python program to remove the duplicate items from a list\n\"\"\"\n\n# Function to remove duplicates \ndef remove_duplicates(list_with_duplicates): \n  \n    list_without_duplicates = [] \n    for item in list_with_duplicates:\n        if item not in list_without_duplicates: \n            list_without_duplicates.append(item)\n  \n    return list_without_duplicates \n\n# main \nif __name__==\"__main__\": \n    # Given List \n    list1 = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40] \n    print(\"Original List\", list1) \n  \n    list2 = remove_duplicates(list1) \n    print(\"List without duplicates\", list2)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.4745884554751167,
      "p_css": 0.025652397185681148,
      "p_html": 0.007584835774490234,
      "p_java": 2.4030116993104574e-06,
      "p_javascript": 0.06762055130446115,
      "p_matlab": 0.0013157043266316308,
      "p_python": 0.42047433777409493,
      "p_sql": 0.002685518930977473,
      "p_typescript": 7.579621684752559e-05
    },
    {
      "text": "for i in range(number):\n    print(\"Hello\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000119741718847481,
      "p_css": 4.7556069419727296e-08,
      "p_html": 2.999646557700462e-06,
      "p_java": 4.0016253493339514e-14,
      "p_javascript": 1.0042785523003604e-06,
      "p_matlab": 0.09261963929589559,
      "p_python": 0.9072558848595829,
      "p_sql": 5.375024513409231e-07,
      "p_typescript": 1.4514200329604196e-07
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n#  Get the HTML from the webpage\npage = requests.get('https://example.com')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Isolate the product information\nproduct_list = soup.find_all('div', class_='product')\n\n# Extract the product information\nproducts = []\nfor product in product_list:\n   name = product.find('div', class_='name').text.strip()\n   price = product.find('div', class_='price').text.strip()\n   description = product.find('div', class_='description').text.strip()\n   products.append({\n      'name': name,\n      'price': price,\n      'description': description\n   })\n\n# Print the product list\nprint(products)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 1.7317002372735196e-06,
      "p_css": 0.030238741891688473,
      "p_html": 0.9694401366289491,
      "p_java": 0.00027427458249969916,
      "p_javascript": 3.996907831148234e-07,
      "p_matlab": 2.1341234880205608e-07,
      "p_python": 1.8261426240004267e-05,
      "p_sql": 6.377410629424878e-06,
      "p_typescript": 1.9863256624066323e-05
    },
    {
      "text": "import re\n\nstring = 'The quick brown fox jumps over the lazy dog'\n\n# Prints matches\nmatches = re.findall('the', string, re.IGNORECASE)\nprint(matches)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005383267153543409,
      "p_css": 0.0044332000303775355,
      "p_html": 0.26606425997528116,
      "p_java": 0.026485227508119963,
      "p_javascript": 1.5168540151516615e-05,
      "p_matlab": 3.9946336196399374e-05,
      "p_python": 0.6849388453403473,
      "p_sql": 0.00872791542319255,
      "p_typescript": 0.00875711013097903
    },
    {
      "text": "def prime_factors(n):\n    prime_factors = []\n    while n % 2 == 0: \n        prime_factors.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            prime_factors.append(int(i))\n            n = n / i\n    if n > 2: \n        prime_factors.append(int(n))\n    return prime_factors",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0002942108623512214,
      "p_css": 7.292153966438977e-05,
      "p_html": 0.00029540451981265015,
      "p_java": 0.9965710464910725,
      "p_javascript": 5.566344579943973e-05,
      "p_matlab": 4.7354038532320144e-05,
      "p_python": 0.0024642821693099015,
      "p_sql": 1.4793945739299898e-05,
      "p_typescript": 0.00018432298771831033
    },
    {
      "text": "\"\"\"\nCreate a python program that takes in a list of URLs and returns a list \nof the top 5 URLs that are visited most often.\n\"\"\"\n\nfrom collections import Counter\n\ndef most_visited_urls(urls):\n    counts = Counter(urls)\n    top_5 = counts.most_common(5)\n\n    print(\"Top 5 URLs:\")\n    for url, count in top_5:\n        print(\"%s: %d\" % (url, count))\n\n\nif __name__ == '__main__':\n    urls = ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']\n    most_visited_urls(urls)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.901450225868787e-06,
      "p_css": 0.0035483140008647834,
      "p_html": 0.00044488766100460005,
      "p_java": 0.9522701507656296,
      "p_javascript": 0.026336254273065723,
      "p_matlab": 0.0030642140175576576,
      "p_python": 0.012394233545786738,
      "p_sql": 0.0010895021427216936,
      "p_typescript": 0.000848542143143447
    },
    {
      "text": "def detect_palindrome(sentence):\n words = sentence.split()\n palindromes = []\n for word in words:\n  if word == word[::-1]:\n   palindromes.append(word)\n return palindromes\n\nprint(detect_palindrome(\"Was it a car or a cat I saw?\"))\n# Output: ['Was', 'a', 'or', 'a', 'I']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.063365665255774,
      "p_css": 0.017680569778611363,
      "p_html": 0.03471482391829948,
      "p_java": 0.0002775953167724314,
      "p_javascript": 9.995888123023525e-05,
      "p_matlab": 0.005778963300648538,
      "p_python": 0.859222346901321,
      "p_sql": 0.01808670989121036,
      "p_typescript": 0.0007733667561324634
    },
    {
      "text": "def is_alpha(word): \n    if word.isalpha(): \n        return True \n    else: \n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00856344470515005,
      "p_css": 0.00046730120172989005,
      "p_html": 0.004690078156228168,
      "p_java": 2.532375514595603e-06,
      "p_javascript": 3.1503639074857636e-05,
      "p_matlab": 2.2678717212896e-05,
      "p_python": 0.9861411949033048,
      "p_sql": 5.078846579028881e-05,
      "p_typescript": 3.0477835994546954e-05
    },
    {
      "text": "def linear_search(list, item):\n    # Traverse through all elements in the list\n    for i in range(len(list)):\n        if list[i] == item:\n            return i  # Return the index of the element\n    return -1 # Return -1 if the item is not found",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00020209353084976598,
      "p_css": 0.00016172428453746233,
      "p_html": 0.0025607219204749963,
      "p_java": 8.781258740353158e-06,
      "p_javascript": 0.2502958441367709,
      "p_matlab": 0.034179155199623196,
      "p_python": 0.7102235002795718,
      "p_sql": 0.00019170956005358188,
      "p_typescript": 0.0021764698293779807
    },
    {
      "text": "def generate_html(text):\n    html = \"<html>\\n\"\n    html += \"<body>\\n\"\n    html += \"<p>\" + text + \"</p>\\n\"\n    html += \"</body>\\n\"\n    html += \"</html>\\n\"\n    \n    return html\n\nif __name__ == \"__main__\":\n    text = \"Hello World!\"\n    html = generate_html(text)\n    print(html)",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 2.2071991658940932e-17,
      "p_css": 3.0112293792908497e-17,
      "p_html": 0.9999999999999998,
      "p_java": 4.826004986598157e-21,
      "p_javascript": 2.6925925567377275e-16,
      "p_matlab": 4.563500210831802e-20,
      "p_python": 7.732037577764572e-18,
      "p_sql": 2.557722297677044e-18,
      "p_typescript": 8.019379667943531e-17
    },
    {
      "text": "def sort_array(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n    return arr",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.45555316362238e-10,
      "p_css": 1.1262141645330731e-09,
      "p_html": 8.927059641938213e-10,
      "p_java": 2.984384611171648e-10,
      "p_javascript": 4.539395658616128e-10,
      "p_matlab": 0.9999722392138404,
      "p_python": 2.7756228150901952e-05,
      "p_sql": 6.046671861843881e-11,
      "p_typescript": 1.080688663622227e-09
    },
    {
      "text": "def remove_duplicates(arr):\n    new_list = []\n    for item in arr:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.204350309146962e-05,
      "p_css": 0.00059754298230337,
      "p_html": 0.0007216963485875103,
      "p_java": 4.444872451155482e-06,
      "p_javascript": 0.0003074919775920506,
      "p_matlab": 0.949866803217985,
      "p_python": 0.048435872262891276,
      "p_sql": 2.491583718262358e-06,
      "p_typescript": 2.161325137985428e-05
    },
    {
      "text": "print(\"Hello, world!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999734119020168,
      "p_css": 9.96764694856539e-10,
      "p_html": 8.203989019786867e-09,
      "p_java": 1.3871331484896268e-31,
      "p_javascript": 2.3140070270935628e-05,
      "p_matlab": 1.5029167266270406e-12,
      "p_python": 3.438768591603071e-06,
      "p_sql": 1.5910552505341453e-11,
      "p_typescript": 4.0953400341391626e-11
    },
    {
      "text": "def isDivisible(num): \n    if num % 5 == 0 and num % 11 == 0:\n        print(\"Number is divisible by 5 and 11\") \n    else:\n        print(\"Number is not divisible by 5 and 11\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0182812120095362e-06,
      "p_css": 5.043668801636147e-08,
      "p_html": 2.4944282486449683e-06,
      "p_java": 5.998319199622018e-07,
      "p_javascript": 1.3670478323912518e-05,
      "p_matlab": 0.9965104122728735,
      "p_python": 0.0032864938190814586,
      "p_sql": 2.4573716064116505e-06,
      "p_typescript": 0.00018280308004590897
    },
    {
      "text": "#!/bin/bash\n# Script to run Python program\n\ninput_string=\"Hello, world\"\n\npython <<END\n\ninput_string=\"$input_string\"\n\nprint(\"Input string:\", input_string)\nprint(\"Size of string:\", len(input_string))\nprint(\"Sorted string:\", ''.join(sorted(input_string)))\n\nEND",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.9999999890978416,
      "p_css": 2.4428456463816026e-10,
      "p_html": 3.4192745432766753e-09,
      "p_java": 1.849599131398334e-13,
      "p_javascript": 1.3130612470215605e-11,
      "p_matlab": 1.0746252586911198e-12,
      "p_python": 1.6011723446423173e-09,
      "p_sql": 5.621892274929582e-09,
      "p_typescript": 1.1444849642537736e-12
    },
    {
      "text": "list = [1,2,3,4]\nsum = 0\n\nfor item in list:\n    sum += item\n\nprint(sum)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00032461378297926217,
      "p_css": 0.006218487923207985,
      "p_html": 0.03446482948468086,
      "p_java": 0.004180949719057078,
      "p_javascript": 0.013200425998504791,
      "p_matlab": 0.9377740840372556,
      "p_python": 0.0020626440434262264,
      "p_sql": 0.0015221569502640463,
      "p_typescript": 0.0002518080606242642
    },
    {
      "text": "import random\n\n# Generate a random sequence of 0s and 1s\nn = 10\nrandom_sequence = \"\".join([str(random.randint(0, 1)) for x in range(n)])\nprint (random_sequence)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 3.405430215972913e-05,
      "p_css": 3.898045792383176e-05,
      "p_html": 0.00015326279468622013,
      "p_java": 1.2099437767550907e-06,
      "p_javascript": 0.0001171315014087871,
      "p_matlab": 0.000713659707727169,
      "p_python": 0.7518631215743661,
      "p_sql": 0.24675157377808402,
      "p_typescript": 0.00032700593986736135
    },
    {
      "text": "import nltk\nfrom nltk.tokenize import sent_tokenize\n\ndef split_into_sentences(text):\n    sentences = sent_tokenize(text)\n    return sentences",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.016314034592336372,
      "p_css": 0.1337795921520463,
      "p_html": 0.004240077273215088,
      "p_java": 0.00029882771839279056,
      "p_javascript": 0.0014767046078412935,
      "p_matlab": 0.0005583445279067689,
      "p_python": 0.8070348630655758,
      "p_sql": 0.029706689559012074,
      "p_typescript": 0.006590866503673424
    },
    {
      "text": "import imaplib, email\n\n#Connect to the mail server\nmail = imaplib.IMAP4_SSL('imap.example.com')\n\n#Login\nmail.login('username', 'password')\n\n#Select the mailbox\nmail.select('INBOX')\n\n#Search for emails\n_, data = mail.search(None, 'ALL')\n\n#Fetch the emails\nfor num in data[0].split():\n  _, data = mail.fetch(num, '(RFC822)')\n  email_message = email.message_from_bytes(data[0][1])\n  #Process the email",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 8.65779503008611e-06,
      "p_css": 0.014114468828620868,
      "p_html": 0.16707858733812628,
      "p_java": 0.19565546902355585,
      "p_javascript": 0.012914391911340466,
      "p_matlab": 0.03816788038568408,
      "p_python": 0.11038028761634995,
      "p_sql": 0.21221133408440918,
      "p_typescript": 0.24946892301688328
    },
    {
      "text": "The GPT model could be used to convert between programming languages, such as from Python to C#. The model would be trained on pairs of programs written in two different languages with the same functionality. The model would then be used to automatically convert a Python program into the equivalent in C#.",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 1.1108120284131169e-10,
      "p_css": 2.130499975826149e-15,
      "p_html": 9.867941886278988e-15,
      "p_java": 2.804616290554045e-16,
      "p_javascript": 2.478285270278136e-11,
      "p_matlab": 2.9730530835685073e-15,
      "p_python": 3.487480001049683e-13,
      "p_sql": 7.700999243231585e-17,
      "p_typescript": 0.9999999998637719
    },
    {
      "text": "def find_divisible_numbers(start, end):\n for i in range(start, end + 1):\n  if i % 5 == 0:\n   print(i)\n\nfind_divisible_numbers(0, 15)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.903448852987782e-06,
      "p_css": 1.749692274933475e-05,
      "p_html": 4.092588028288496e-05,
      "p_java": 4.4027885476163646e-07,
      "p_javascript": 7.674824734428125e-07,
      "p_matlab": 0.25531582036327716,
      "p_python": 0.7445100914903336,
      "p_sql": 8.930296198546274e-05,
      "p_typescript": 1.5251171190440337e-05
    },
    {
      "text": "for item1, item2 in zip(list1, list2):\n    print(f\"{item1}: {item2}\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004419913959046899,
      "p_css": 0.06274115726628463,
      "p_html": 0.01527748388421793,
      "p_java": 0.0011055261494219103,
      "p_javascript": 0.004474044880962483,
      "p_matlab": 0.03229717125463145,
      "p_python": 0.8650372379529241,
      "p_sql": 0.00358230569186359,
      "p_typescript": 0.011065158960647263
    },
    {
      "text": "#!/usr/bin/python\n\n#  Copyright © 2015-2019 Cask Data, Inc.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\nimport argparse\nimport os\nimport json\nfrom youtube import API\n\nMAX_RESULTS = 50\nCHANNEL_ID='UCfkRcekMTa5GA2DdNKba7Jg'\n\napi = None\n\ndef search_videos(page_token):\n  return api.get('search', part='id,snippet', channelId=CHANNEL_ID, maxResults=MAX_RESULTS, pageToken=page_token, type='video')\n\ndef video_preview(video):\n  preview_size = ['maxres', 'high', 'medium', 'standard', 'default']\n  thumbnails = video['snippet']['thumbnails']\n  preview = ''\n  for size in preview_size:\n    if size in thumbnails:\n      preview = thumbnails[size]['url']\n      break\n  return preview\n\ndef extract_video_data(video):\n  preview = ''\n  video_data = {}\n  video_data['videoId'] = video['id']['videoId']\n  video_data['title'] = video['snippet']['title']\n  video_data['description'] = video['snippet']['description']\n  video_data['preview'] = video_preview(video)\n  return video_data\n\ndef fetch_videos():\n  all_videos = []\n  total_items = MAX_RESULTS\n  page_token = ''\n  while page_token is not None:\n    response = search_videos(page_token)\n    if 'nextPageToken' in response:\n      all_videos = all_videos + list(map(extract_video_data, response['items']))\n      page_token = response['nextPageToken']\n    else:\n      page_token = None\n\n  return all_videos\n\ndef get_original_videos(path):\n  try:\n    with open(path) as video_file:\n      return json.load(video_file)\n  except:\n    print('File not found: %s. Will create new one.' % path)\n    return {\n      'videos': []\n    }\n\ndef merge_videos(original_videos, youtube_videos, visible, update, update_props):\n  props = update_props.split(',')\n  marked = []\n  for video in youtube_videos:\n    matched_video = next((v for v in original_videos['videos'] if v['videoId'] == video['videoId']), None)\n    if matched_video is None:\n      marked = [video['videoId']] + marked\n      video['visible'] = visible\n      original_videos['videos'] = [video] + original_videos['videos']\n      print('Added new video:\\n Link: https://www.youtube.com/watch?v=%s \\n Title: %s \\n' % (video['videoId'], video['title']) )\n    else:\n      marked = [video['videoId']] + marked\n      if update is not False:\n        for prop in props:\n          matched_video[prop] = video[prop]\n  original_videos['videos'] = list(filter(lambda v: v['videoId'] in marked, original_videos['videos']))\n  return original_videos\n\ndef save_videos(data, file_path):\n  with open(file_path, 'w') as outfile:\n    json.dump(data, outfile, indent=2)\n\ndef main():\n  parser = argparse.ArgumentParser()\n  parser.add_argument('-o', '--output', help='Absolute path to output file. Output file can exist.', required=True)\n  parser.add_argument('-k', '--api-key', help='Youtube API key.', required=True)\n  parser.add_argument('-v', '--visible', help='Append new videos as visible.', default=False)\n  parser.add_argument('-u', '--update', help='Update video in output file if it exists.', default=False)\n  parser.add_argument('--update-attributes', '--update-attributes', help='Comma separated list of attributes allowed to update. Works only when --update flag is true', default='description,title,preview')\n  args = parser.parse_args()\n\n  global api\n  api = API(api_key=args.api_key, client_secret='', client_id='')\n\n  original_videos = get_original_videos(args.output)\n  youtube_videos = fetch_videos()\n  merged_videos = merge_videos(original_videos, youtube_videos, args.visible, args.update, args.update_attributes)\n  save_videos(merged_videos, args.output)\n\nif __name__ == '__main__':\n  main()\n",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0014911856333765655,
      "p_css": 0.833015338995018,
      "p_html": 0.07086902183187796,
      "p_java": 0.00012102180564498228,
      "p_javascript": 0.004378050725696067,
      "p_matlab": 0.00013787788078117194,
      "p_python": 0.006889734417951049,
      "p_sql": 0.07473060949311978,
      "p_typescript": 0.008367159216534421
    },
    {
      "text": "import random\n\nrandom_numbers = []\n\nwhile len(random_numbers) < 20:\n    n = random.randint(1, 100)\n    if n not in random_numbers:\n        random_numbers.append(n)\n\nprint(random_numbers)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007514323077181979,
      "p_css": 0.019413019765796655,
      "p_html": 0.012382889022593246,
      "p_java": 0.00034661649772489835,
      "p_javascript": 0.002204381339629394,
      "p_matlab": 0.020586815365637917,
      "p_python": 0.9131889471786317,
      "p_sql": 0.02080489910005439,
      "p_typescript": 0.0035581086527497747
    },
    {
      "text": "n = int(input())\n \nfor i in range(1, n + 1):\n for j in range(1, i + 1):\n  print(j, end=\"\")\n print(\"\")\n \nfor i in range(n - 1, 0, -1):\n for j in range(1, i + 1):\n  print(j, end=\"\")\n print(\"\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.7012125769443502e-08,
      "p_css": 3.5958057022141885e-10,
      "p_html": 1.2377817790547337e-07,
      "p_java": 4.9315064541837635e-08,
      "p_javascript": 1.2786678076175266e-10,
      "p_matlab": 0.006895091875856696,
      "p_python": 0.9931046458765063,
      "p_sql": 5.921312378925916e-08,
      "p_typescript": 2.4416975073871646e-09
    },
    {
      "text": "def distinct_items_in_list(input_list):\n    distinct_items = set(input_list)\n    return len(distinct_items)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005650055863037213,
      "p_css": 0.0017382355915399872,
      "p_html": 0.0005716762516768816,
      "p_java": 4.496829011557855e-05,
      "p_javascript": 0.0001224281619013018,
      "p_matlab": 8.87123989040706e-06,
      "p_python": 0.9952508232709955,
      "p_sql": 0.0013577500375246288,
      "p_typescript": 0.0003402415700519267
    },
    {
      "text": "import sqlite3\n\ndatabase = sqlite3.connect('people-data.db')\n\n# Create the table \ncursor = database.cursor()\n\nsql_command = \"\"\"\n CREATE TABLE People ( \n first_name VARCHAR(20), \n last_name VARCHAR(30), \n email VARCHAR(50));\"\"\"\n\ncursor.execute(sql_command)\n\n# Save and close\ndatabase.commit()\ndatabase.close()",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.00237266770162151,
      "p_css": 0.016545453010546492,
      "p_html": 0.0027585524984142856,
      "p_java": 0.00012200955492199618,
      "p_javascript": 0.0022247764857692472,
      "p_matlab": 0.00026799701403787505,
      "p_python": 0.021723456775456996,
      "p_sql": 0.4050949349657147,
      "p_typescript": 0.5488901519935169
    },
    {
      "text": "import numba\n\n@numba.jit\ndef calculate_pi():\n    c = 0.0\n    for k in range(1000):\n        for j in range(1000):\n            c += k ** -2 + j ** -3\n    return c",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.006107940019035e-09,
      "p_css": 9.640211961397072e-10,
      "p_html": 2.7397032618730437e-08,
      "p_java": 2.782331812397471e-10,
      "p_javascript": 2.5173679907643756e-10,
      "p_matlab": 0.9999962359403363,
      "p_python": 3.7107153049125153e-06,
      "p_sql": 1.2274427236064838e-08,
      "p_typescript": 3.1727999184175796e-09
    },
    {
      "text": "\"\"\"\nModule for sending emails with Python\n\"\"\"\n\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n\ndef send_email(sender, recipients, subject, body):\n    message = MIMEMultipart()\n    message['From'] = sender\n    message['To'] = ', '.join(recipients)\n    message['Subject'] = subject\n    message.attach(MIMEText(body, 'plain'))\n\n    smtp_server = smtplib.SMTP('smtp.example.com')\n    smtp_server.starttls()\n    smtp_server.login('username', 'password')\n    smtp_server.send_message(message)\n    smtp_server.quit()",
      "y_true": "sql",
      "pred_label": "html",
      "p_bash": 0.0003052236410900433,
      "p_css": 0.373705145019411,
      "p_html": 0.4635657493358646,
      "p_java": 0.011893534201306812,
      "p_javascript": 0.0026813323759586356,
      "p_matlab": 0.00041840298174032175,
      "p_python": 0.08193694394956097,
      "p_sql": 0.05212067119021979,
      "p_typescript": 0.013372997304847867
    },
    {
      "text": "# print all prime numbers between 1 and 50\nfor num in range(1,51): \n      \n   # prime numbers are greater than 1 \n   if num > 1: \n       for i in range(2,num): \n           if (num % i) == 0: \n               break\n       else: \n           print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.465925501559344e-13,
      "p_css": 1.453458638438639e-17,
      "p_html": 3.082679346148072e-12,
      "p_java": 2.8850253730252768e-12,
      "p_javascript": 3.5668374057175044e-13,
      "p_matlab": 0.9999999991467419,
      "p_python": 8.278420344333539e-10,
      "p_sql": 7.226190163638401e-12,
      "p_typescript": 1.1318840506899097e-11
    },
    {
      "text": "def find_divisors(num):\n    divisors = []\n    for i in range(2,num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\nnum = 48\ndivisors = find_divisors(num)\nprint(\"The divisors of {} are: {}\".format(num, divisors))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0747719298002045e-06,
      "p_css": 4.548262591937377e-09,
      "p_html": 1.4669009498490333e-06,
      "p_java": 1.031887202502903e-07,
      "p_javascript": 4.945972718051724e-07,
      "p_matlab": 0.9998588563035173,
      "p_python": 0.00013262148398547442,
      "p_sql": 3.8073987610751647e-07,
      "p_typescript": 4.997465487000424e-06
    },
    {
      "text": "import mysql.connector\nimport matplotlib.pyplot as plt\n\n# Connect to the database\nmydb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    passwd=\"password\",\n    database=\"dbname\"\n)\n\n# Create a cursor\nmycursor = mydb.cursor()\n\n# Execute a query\nmycursor.execute(\"SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id\")\n\n# Fetch results\nresults = mycursor.fetchall()\n\n# Generate Chart\nordercounts = [result[1] for result in results]\ncustomers = []\nfor result in results:\n    mycursor.execute(\"SELECT name FROM customers WHERE id = %s\" % (result[0],))\n    name_result = mycursor.fetchone()\n    customers.append(name_result[0])\n\nplt.bar(customers, ordercounts)\nplt.xticks(customers, rotation=90)\nplt.ylabel('Order Count')\nplt.xlabel('Customer')\nplt.show()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0002482262686161454,
      "p_css": 0.0028527689356690044,
      "p_html": 0.00364037947881746,
      "p_java": 2.21435245373939e-05,
      "p_javascript": 0.0003255420626822964,
      "p_matlab": 0.0004011972415116386,
      "p_python": 0.006339251388134377,
      "p_sql": 0.9840922868041015,
      "p_typescript": 0.002078204295930068
    },
    {
      "text": "def remove_overlap(string1, string2): \n    #split string1 into a list of words\n    words1 = string1.split()\n    #split string2 into a list of words\n    words2 = string2.split()\n    #initialize an empty list\n    result = []\n    #compare between the two words list \n    for word in words1:\n        if word not in words2:\n            result.append(word)\n    #join string2 into the result list\n    result = result + words2\n    # join the result list into a single string\n    new_string = ' '.join(result)\n  \n    return new_string\n\n#call the remove_overlap()function\nresult = remove_overlap(string1, string2)\nprint(result)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.1666690552058368e-05,
      "p_css": 0.00020594753341209908,
      "p_html": 9.43995118436582e-05,
      "p_java": 2.3991418151867523e-06,
      "p_javascript": 0.00012347468304202666,
      "p_matlab": 7.282186313648439e-07,
      "p_python": 0.04968911176347131,
      "p_sql": 0.9498138368136627,
      "p_typescript": 4.8435643569385114e-05
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nbitcoin_price = soup.find('span', {'class': 'btc-price'}).text\n\nprint(f'The current Bitcoin price is {bitcoin_price}')",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 1.249119238085506e-14,
      "p_css": 0.03665706890729252,
      "p_html": 0.0013266641328894488,
      "p_java": 0.961994936356183,
      "p_javascript": 2.621953534949332e-07,
      "p_matlab": 1.0292079964024426e-09,
      "p_python": 1.6082874942743473e-05,
      "p_sql": 4.883767955191679e-06,
      "p_typescript": 1.0073616301842295e-07
    },
    {
      "text": "for num in range(5):\n   print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.048389561040472e-16,
      "p_css": 9.068379596659836e-23,
      "p_html": 3.4356800136923915e-15,
      "p_java": 3.63252423693314e-17,
      "p_javascript": 4.843258739220993e-17,
      "p_matlab": 0.9999999999778757,
      "p_python": 2.211888144049972e-11,
      "p_sql": 1.1992841966255525e-15,
      "p_typescript": 4.967794322402082e-16
    },
    {
      "text": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Favorite Programming Language</title>\n    </head>\n    <body>\n        <h1>My favorite programming language is Python!</h1>\n    </body>\n</html>",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 1.9042409898138645e-21,
      "p_css": 2.8536525806692383e-19,
      "p_html": 1.0,
      "p_java": 3.428194695498173e-20,
      "p_javascript": 7.973815343586315e-18,
      "p_matlab": 1.5527324890225637e-21,
      "p_python": 7.075893851583911e-23,
      "p_sql": 1.5180026795988423e-21,
      "p_typescript": 3.61762710156227e-18
    },
    {
      "text": "import numpy as np\nimport gym\n\nenv = gym.make('GridWorld-v0')\n\n# Initialize Q-Table\nQ = np.zeros([env.observation_space.n, env.action_space.n])\n\n# Define learning parameters\nlr = .8\ny = .95\nnum_episodes = 2000\n\n# Create lists to contain total rewards and steps per episode\nrList = []\nfor i in range(num_episodes):\n    # Reset environment and get first new observation\n    s = env.reset()\n    rAll = 0\n    done = False\n    # The Q-Table learning algorithm\n    while not done:\n        # Choose an action by greedily (with noise) picking from Q table\n        a = np.argmax(Q[s,:] + np.random.randn(1,env.action_space.n)*(1./(i+1)))\n        # Get new state and reward from environment\n        s1,r,done,_ = env.step(a)\n        # Update Q-Table with new knowledge\n        Q[s,a] = Q[s,a] + lr*(r + y*np.max(Q[s1,:]) - Q[s,a])\n        rAll += r\n        s = s1\n    rList.append(rAll)",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.18812381128936204,
      "p_css": 0.10641663729991112,
      "p_html": 0.018042474956571693,
      "p_java": 0.0002959072202493532,
      "p_javascript": 0.005407013732198078,
      "p_matlab": 0.02101179082324165,
      "p_python": 0.09954005292252247,
      "p_sql": 0.1122543460839,
      "p_typescript": 0.4489079656720436
    },
    {
      "text": "def reverse_string(string): \n    return string[::-1]",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.7366216442831176e-15,
      "p_css": 8.51669447569561e-09,
      "p_html": 8.516402071572627e-10,
      "p_java": 0.9999719696032902,
      "p_javascript": 2.7477559558206786e-17,
      "p_matlab": 8.620794651730033e-13,
      "p_python": 2.7859431338781684e-05,
      "p_sql": 1.6140886888371015e-07,
      "p_typescript": 1.873035263424416e-10
    },
    {
      "text": "def convertSeconds(seconds):\n    day = seconds//(24*3600)\n    seconds = seconds%(24*3600)\n    hour = seconds//3600\n    seconds %= 3600\n    minutes = seconds // 60\n    seconds %= 60\n    return day, hour, minutes, seconds\n\nday, hour, minute, second = convertSeconds(3600)\n\nprint(\"Day: {}, Hour: {}, Minute: {}, Second: {}\".format(day, hour, minute, second))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.022278261390292493,
      "p_css": 0.008825820098269125,
      "p_html": 0.38922664300776394,
      "p_java": 0.003713860049499524,
      "p_javascript": 0.011001057009184164,
      "p_matlab": 0.034964085878303304,
      "p_python": 0.49490120914355196,
      "p_sql": 0.00594174457097893,
      "p_typescript": 0.02914731885215664
    },
    {
      "text": "import re\npattern = re.compile(r'[6-9]|[2-4][0-9]')",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.012930726049185293,
      "p_css": 0.00044025244213385733,
      "p_html": 0.8999257348222444,
      "p_java": 2.060922393701817e-06,
      "p_javascript": 0.00013354965371993802,
      "p_matlab": 5.238865146223854e-05,
      "p_python": 0.08602850663367095,
      "p_sql": 0.00016106892781152671,
      "p_typescript": 0.00032571189737833273
    },
    {
      "text": "def isPalindrome(num):\n  numStr = str(num)\n  for i in range(0, len(numStr)//2):\n    if numStr[i] != numStr[len(numStr)-i-1]:\n      return False\n  return True\n\nprint(isPalindrome(1991)) # Output: True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.532538047269777e-05,
      "p_css": 5.812222312471964e-09,
      "p_html": 5.738187599317583e-05,
      "p_java": 5.3003037749637496e-08,
      "p_javascript": 3.519272718692827e-07,
      "p_matlab": 0.4849102729992527,
      "p_python": 0.5150141060927546,
      "p_sql": 2.4381538681013375e-06,
      "p_typescript": 6.475512688671033e-08
    },
    {
      "text": "def absolute_value(num):\n    if num < 0:\n        return -num\n    else:\n        return num",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.28725751521489e-10,
      "p_css": 1.1607269626240264e-14,
      "p_html": 9.916919834984068e-10,
      "p_java": 5.457449124295274e-11,
      "p_javascript": 1.1201853394103933e-10,
      "p_matlab": 0.9999984790096786,
      "p_python": 1.5184618220871033e-06,
      "p_sql": 3.775092843943277e-10,
      "p_typescript": 2.6396766303699175e-10
    },
    {
      "text": "#import packages\nimport pandas as pd \nfrom sklearn.linear_model import LogisticRegression \n\n#load student profile data\nstudent_profile_list = [{'GPA': 3.4, 'Major': 'Computer Science', 'Interests': ['Web Development', 'Data Science']}, \n{'GPA': 3.7, 'Major': 'Business', 'Interests': ['Marketing', 'Entrepreneurship']}, \n{'GPA': 2.9, 'Major': 'Biology', 'Interests': ['Genetics', 'Neuroscience']}]\n\n#create dataframes for student profile\ndata = pd.DataFrame(student_profile_list)\n\n#preprocess the data to use in logistic regression\ndummies = pd.get_dummies(data['Major']) \ndata = data.drop(['Major'], axis = 1) \ndata = pd.concat([data, dummies], axis = 1) \n\n#instantiate the logistic regression\nlogreg = LogisticRegression(random_state = 0)   \n\n#fit the model\nlogreg.fit(data[['GPA', 'Computer Science', 'Business', 'Biology']], data['Interests']) \n\n#predict whether a student will take a course\n#Input student profile\nstudent_profile = {'GPA': 3.0, 'Major': 'Biology'}\nstudent_profile = pd.DataFrame([student_profile]) \ndummies = pd.get_dummies(student_profile['Major']) \nstudent_profile = student_profile.drop(['Major'], axis = 1) \nstudent_profile = pd.concat([student_profile, dummies], axis = 1) \nprediction = logreg.predict(student_profile[['GPA', 'Computer Science', 'Business', 'Biology']])\n\n#Print the prediction\nprint(f'The student is likely to take a course related to {prediction[0]}')",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.002307533090073836,
      "p_css": 0.16998797294114562,
      "p_html": 0.021741072790175356,
      "p_java": 7.053593338990115e-05,
      "p_javascript": 0.00045877177403961676,
      "p_matlab": 0.00045801032884315167,
      "p_python": 0.12671139715498533,
      "p_sql": 0.0010476144292276305,
      "p_typescript": 0.6772170915581195
    },
    {
      "text": "# Import necessary libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Construct feature and label data\n# Feature (independent variable): days of the week\nfeatures = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]\n# Label (dependent vaiable): number of riders\nlabels = [[10, 15, 20, 25, 35, 50], [12, 18, 15, 24, 40, 57]]\n# Reformat data as arrays\nX = np.array(features)\ny = np.array(labels)\n# Split train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create model\nmodel = LinearRegression()\n# Train model\nmodel.fit(X_train, y_train)\n# Make predictions\ny_pred = model.predict(X_test)\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint(f'Model score: {score}')",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.4549442480017607,
      "p_css": 0.3792752706929102,
      "p_html": 0.014044819100919802,
      "p_java": 2.2562826798403913e-05,
      "p_javascript": 3.289797987237986e-05,
      "p_matlab": 0.00012159289505370332,
      "p_python": 0.13620592759050903,
      "p_sql": 6.040313885609146e-07,
      "p_typescript": 0.015352076880787123
    },
    {
      "text": "def containsSubstring(str, sub):\n    for i in range(len(str)-len(sub)+1):\n        j = 0\n        while j < len(sub) and sub[j] == str[i+j]:\n            j += 1\n        if j == len(sub):\n            return True\n    return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.0024223636273184e-06,
      "p_css": 2.9368832610936113e-05,
      "p_html": 0.00023572717679606835,
      "p_java": 3.1672517051070647e-06,
      "p_javascript": 5.9647909501650154e-05,
      "p_matlab": 0.00015630139365905768,
      "p_python": 0.9992551052660423,
      "p_sql": 6.812670581376592e-05,
      "p_typescript": 0.00018855304150759402
    },
    {
      "text": "def find_subsets(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                count += 1\n    return count",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.5578003305361743e-08,
      "p_css": 9.12604373634288e-09,
      "p_html": 5.2950304970972276e-08,
      "p_java": 1.6581286436676836e-09,
      "p_javascript": 5.156354393284243e-10,
      "p_matlab": 0.462433633885506,
      "p_python": 0.5375662199846091,
      "p_sql": 4.8887297990983727e-08,
      "p_typescript": 1.74144706791167e-08
    },
    {
      "text": "def string_similarity(string1, string2):\n    # Create dictionary for storing character frequencies\n    char_freq_dict = dict()\n\n    for char in string1:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n\n    # Count number of matching characters\n    matches = 0\n    for char in string2:\n        if char in char_freq_dict and char_freq_dict[char] > 0:\n            matches += 1\n            char_freq_dict[char] -= 1\n\n    # Calculate similarity\n    similarity = (matches/len(string1)) * 100\n\n    return similarity",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00024264758553540054,
      "p_css": 0.03546378472604724,
      "p_html": 0.00110057801006246,
      "p_java": 1.84564282916797e-05,
      "p_javascript": 0.0003441430311317232,
      "p_matlab": 0.010629257206837212,
      "p_python": 0.9474995033110624,
      "p_sql": 0.0020644829543367445,
      "p_typescript": 0.0026371467466951414
    },
    {
      "text": "input_list = [1,2,3]\n\nnum_elements = len(input_list)\n\ndef create_symmetric_matrix(input_list):\n    matrix = [[0 for x in range(num_elements)] for y in range(num_elements)]\n    \n    for i in range(num_elements):\n        for j in range(num_elements):\n            if i == j:\n                matrix[i][j] = input_list[i]\n            else:\n                matrix[i][j] = input_list[j]\n                \n    return matrix\n\nres = create_symmetric_matrix(input_list)\nprint(res)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.81862205525878e-07,
      "p_css": 1.970911089741606e-07,
      "p_html": 3.977302755048645e-06,
      "p_java": 6.354377083828654e-08,
      "p_javascript": 5.564195902116028e-08,
      "p_matlab": 0.8019350420159178,
      "p_python": 0.1980536527788932,
      "p_sql": 5.468269481818395e-06,
      "p_typescript": 8.614939078021025e-07
    },
    {
      "text": "import sys\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtGui import *\n\nclass Editor(QDialog):\n    def __init__(self, parent=None):\n        super(Editor, self).__init__(parent)\n        self.text = QTextEdit()\n        self.initUI()\n\n    def initUI(self):\n        layout = QVBoxLayout()\n        layout.addWidget(self.text)\n        self.setLayout(layout)\n        self.setWindowTitle(\"Text Editor\")\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = Editor()\n    window.resize(350, 250)\n    window.show()\n    sys.exit(app.exec_())",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.001445711698832249,
      "p_css": 0.17477208786276346,
      "p_html": 0.16509075114947486,
      "p_java": 9.848670857901216e-06,
      "p_javascript": 8.277215232008733e-05,
      "p_matlab": 2.9811949999169564e-05,
      "p_python": 0.19483097933999644,
      "p_sql": 0.4630659269212879,
      "p_typescript": 0.0006721102544677706
    },
    {
      "text": "def sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.8787336763116252e-05,
      "p_css": 2.2617702263570103e-07,
      "p_html": 1.3024260292561844e-06,
      "p_java": 8.245647982838937e-08,
      "p_javascript": 6.036340511669612e-08,
      "p_matlab": 0.9999701381240058,
      "p_python": 8.806721415560619e-06,
      "p_sql": 1.9117366224617293e-07,
      "p_typescript": 4.0522121626734376e-07
    },
    {
      "text": "def reverse_list(numbers):\n return numbers[::-1]\n\ndef flip_array_order(numbers):\n new_list = []\n for i in range(0, len(numbers)):\n  new_list.append(numbers[len(numbers) - i - 1])\n return new_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.1654229992408335e-05,
      "p_css": 1.7437858798167867e-05,
      "p_html": 8.88749980839963e-05,
      "p_java": 0.03562122036958172,
      "p_javascript": 5.844741856752125e-05,
      "p_matlab": 1.3376883253015664e-08,
      "p_python": 0.9641395368855692,
      "p_sql": 4.787234717953765e-05,
      "p_typescript": 1.4942515344328977e-05
    },
    {
      "text": "import requests\nimport bs4\n \n# Get the source code for the websites\nurls = ['https://www.indeed.com/', 'https://www.monster.com/']\nsources = [requests.get(url).text for url in urls]\n\n# Parse the source code for job listings\njobs = []\nfor source in sources:\n  soup = bs4.BeautifulSoup(source, 'html.parser')\n  jobs_tags = soup.find_all('div', {'class': 'job'})\n  for job_tag in jobs_tags:\n    job = {}\n    job['title'] = job_tag.find('h2').text.strip()\n    job['location'] = job_tag.find('dd', {'class': 'location ft_location'}).text.strip()\n    job['description'] = job_tag.find('p').text.strip()\n    jobs.append(job)\n\nprint(jobs)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 3.266154437368856e-08,
      "p_css": 0.5205591837420297,
      "p_html": 0.32576822182864906,
      "p_java": 0.143755882462651,
      "p_javascript": 0.0003409178526308152,
      "p_matlab": 0.000533544557133819,
      "p_python": 0.001027898058058783,
      "p_sql": 0.0013082790991176885,
      "p_typescript": 0.006706039738184765
    },
    {
      "text": "import hashlib \n  \ndef encrypt_string(string, password):\n    md5_string = hashlib.md5(string.encode()).hexdigest()\n    password_string = hashlib.md5(password.encode()).hexdigest()\n    result = \"\"\n\n    for i in range(32):\n        result += md5_string[i] + password_string[i]\n    return result\n\nstring = \"Hello World!\"\npassword = \"password\"\n\nresult = encrypt_string(string, password)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.601094825146081e-08,
      "p_css": 0.0038194043024693865,
      "p_html": 0.0003472033784622704,
      "p_java": 0.053277734995430016,
      "p_javascript": 1.6011210208462627e-07,
      "p_matlab": 2.0373652332899964e-05,
      "p_python": 0.761558893666603,
      "p_sql": 0.1809168383083931,
      "p_typescript": 5.929557325888057e-05
    },
    {
      "text": "import sys\nimport signal\nimport time\nimport random\nimport speech_recognition as sr\n\ndef signal_handler(signal, frame):\nsys.exit(0)\n\nsignal.signal(signal.SIGINT, signal_handler)\n\n# Setup the recognizer\nrec = sr.Recognizer()\nmic = sr.Microphone()\n\n# Some useful commands\ncommands = {\n 'time': lambda : print(time.strftime('%H:%M:%S')),\n 'date': lambda : print(time.strftime('%d/%m/%Y')),\n 'greeting': lambda : print(\"Hello, how can I help you?\"),\n 'random': lambda : print(random.randint(1, 100))\n}\n\ndef listen():\n while True:\n with mic as source:\n audio = rec.listen(source)\n try:\n text = rec.recognize_google(audio)\n # Call the corresponding command\n commands[text]()\n except:\n print(\"Sorry, I didn't understand that\")\n\nlisten()",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.004607622517290822,
      "p_css": 0.054446592868757734,
      "p_html": 0.0038334798615710917,
      "p_java": 7.960421505834114e-06,
      "p_javascript": 0.0016466699551494245,
      "p_matlab": 0.00010377091345522108,
      "p_python": 0.8931600708704225,
      "p_sql": 0.01814837355201389,
      "p_typescript": 0.024045459039833534
    },
    {
      "text": "def findPattern(text, pattern):\n    i=0\n    count=0\n    while i < len(text):\n        j = 0\n        if text[i] == pattern[j]:\n            k = i\n            while j < len(pattern) and k < len(text) and  text[k] == pattern[j]:\n                j+=1\n                k+=1\n            if j == len(pattern):\n                count+=1\n            i+=1\n        else:\n            i+=1\n    return count",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.08838100238627e-05,
      "p_css": 0.0038741457001132532,
      "p_html": 0.00028953244018163957,
      "p_java": 3.0275489959974652e-05,
      "p_javascript": 5.510794389964113e-05,
      "p_matlab": 0.00034370084189684,
      "p_python": 0.9580895235173505,
      "p_sql": 0.0014435487168960098,
      "p_typescript": 0.03579328153967815
    },
    {
      "text": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\n# Features\nX=df.iloc[:,:-1]\n\n# Labels\ny=df.iloc[:,-1]\n\n# Split dataset\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)\n\n# Fit the model\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Get input values\ninput_data = [2, 50, 'New York']\n\n# Prediction\nprediction = model.predict([input_data])\n\nprint('Predicted price for a apartment with 2 bedrooms, 50sqm located in New York:', prediction[0])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.17802298624686339,
      "p_css": 0.2601493522516907,
      "p_html": 0.0038926079023148892,
      "p_java": 2.3385838736572464e-05,
      "p_javascript": 7.839673584048863e-05,
      "p_matlab": 0.00010173455502406546,
      "p_python": 0.5575028388494571,
      "p_sql": 1.7671149202288942e-05,
      "p_typescript": 0.00021102647087064977
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\nimport json\n \nurl = '<Your URL>'\n \n# Get the page\npage = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(page.content, 'html.parser')\n \n# Scrape the content\ndata = {\n 'title': soup.find(id='firstHeading').text,\n 'content': soup.find(id='mw-content-text').text\n}\n \n# Save as JSON\nwith open('data.json', 'w') as outfile:\n   json.dump(data, outfile)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.9444261308629631e-07,
      "p_css": 0.7651779378010607,
      "p_html": 0.23422987153015576,
      "p_java": 4.055885501989064e-07,
      "p_javascript": 8.767647370785517e-07,
      "p_matlab": 4.135856705553013e-08,
      "p_python": 1.0641036877015773e-05,
      "p_sql": 1.8678857454495485e-05,
      "p_typescript": 0.000561352619984644
    },
    {
      "text": "import traceback\n\ntry:\n    # some code that might generate exceptions\n    pass\nexcept Exception as e:\n    print(traceback.format_exc())",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0016794759780073098,
      "p_css": 0.0019992464064866374,
      "p_html": 0.0021353071113267568,
      "p_java": 0.00017116043216393892,
      "p_javascript": 0.0015983560125666946,
      "p_matlab": 0.0013913184998029582,
      "p_python": 0.021811632421954313,
      "p_sql": 0.0005367349932281231,
      "p_typescript": 0.9686767681444632
    },
    {
      "text": "# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.021392457623087932,
      "p_css": 0.12176985534899976,
      "p_html": 0.007706486996376673,
      "p_java": 0.00026118521027338295,
      "p_javascript": 0.008538595573547128,
      "p_matlab": 0.0008144369883289953,
      "p_python": 0.8135896023673012,
      "p_sql": 0.004802001226101288,
      "p_typescript": 0.021125378665983786
    },
    {
      "text": "def longest_prefix_palindrome(s):\n  if len(s) <= 1: \n    return s\n  \n  max_length = 0\n  for i in range(1,len(s)): \n    if s[:i] == s[i-1::-1]:\n       max_length = i \n  \n  return s[:max_length] \n\nprint(longest_prefix_palindrome(\"abca\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.885207215385215e-05,
      "p_css": 7.730168463683385e-05,
      "p_html": 0.00031489657804062893,
      "p_java": 5.57409209964588e-06,
      "p_javascript": 1.0079381581885184e-05,
      "p_matlab": 0.05049652003014627,
      "p_python": 0.9486718167278835,
      "p_sql": 0.000320664872020499,
      "p_typescript": 4.4294561436941656e-05
    },
    {
      "text": "list1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.0542272017637027e-06,
      "p_css": 0.00044452063881417664,
      "p_html": 2.396669213764493e-05,
      "p_java": 3.651748502009077e-07,
      "p_javascript": 3.8181504941497354e-06,
      "p_matlab": 5.024083311099883e-05,
      "p_python": 0.9994461944487631,
      "p_sql": 2.3062775318198247e-05,
      "p_typescript": 5.777059309844991e-06
    },
    {
      "text": "# -*- coding: utf-8 -*-\n# Copyright 2020 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nimport warnings\nfrom typing import Callable, Dict, Optional, Sequence, Tuple\n\nfrom google.api_core import gapic_v1  # type: ignore\nfrom google.api_core import exceptions as core_exceptions  # type: ignore\nfrom google.auth import credentials as ga_credentials  # type: ignore\nfrom google.auth.transport.grpc import SslCredentials  # type: ignore\n\nimport grpc  # type: ignore\n\nfrom google.auth.transport.requests import AuthorizedSession\n\nfrom google.cloud.compute_v1.types import compute\n\nfrom .base import AddressesTransport, DEFAULT_CLIENT_INFO\n\n\nclass AddressesRestTransport(AddressesTransport):\n    \"\"\"REST backend transport for Addresses.\n\n    The Addresses API.\n\n    This class defines the same methods as the primary client, so the\n    primary client can load the underlying transport implementation\n    and call it.\n\n    It sends JSON representations of protocol buffers over HTTP/1.1\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        host: str = \"compute.googleapis.com\",\n        credentials: ga_credentials.Credentials = None,\n        credentials_file: str = None,\n        scopes: Sequence[str] = None,\n        client_cert_source_for_mtls: Callable[[], Tuple[bytes, bytes]] = None,\n        quota_project_id: Optional[str] = None,\n        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,\n    ) -> None:\n        \"\"\"Instantiate the transport.\n\n        Args:\n            host (Optional[str]):\n                 The hostname to connect to.\n            credentials (Optional[google.auth.credentials.Credentials]): The\n                authorization credentials to attach to requests. These\n                credentials identify the application to the service; if none\n                are specified, the client will attempt to ascertain the\n                credentials from the environment.\n\n            credentials_file (Optional[str]): A file with credentials that can\n                be loaded with :func:`google.auth.load_credentials_from_file`.\n                This argument is ignored if ``channel`` is provided.\n            scopes (Optional(Sequence[str])): A list of scopes. This argument is\n                ignored if ``channel`` is provided.\n            client_cert_source_for_mtls (Callable[[], Tuple[bytes, bytes]]): Client\n                certificate to configure mutual TLS HTTP channel. It is ignored\n                if ``channel`` is provided.\n            quota_project_id (Optional[str]): An optional project to use for billing\n                and quota.\n            client_info (google.api_core.gapic_v1.client_info.ClientInfo):\n                The client info used to send a user-agent string along with\n                API requests. If ``None``, then default info will be used.\n                Generally, you only need to set this if you're developing\n                your own client library.\n        \"\"\"\n        # Run the base constructor\n        # TODO(yon-mg): resolve other ctor params i.e. scopes, quota, etc.\n        # TODO: When custom host (api_endpoint) is set, `scopes` must *also* be set on the\n        # credentials object\n        super().__init__(\n            host=host, credentials=credentials, client_info=client_info,\n        )\n        self._session = AuthorizedSession(\n            self._credentials, default_host=self.DEFAULT_HOST\n        )\n        if client_cert_source_for_mtls:\n            self._session.configure_mtls_channel(client_cert_source_for_mtls)\n        self._prep_wrapped_messages(client_info)\n\n    def aggregated_list(\n        self,\n        request: compute.AggregatedListAddressesRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.AddressAggregatedList:\n        r\"\"\"Call the aggregated list method over HTTP.\n\n        Args:\n            request (~.compute.AggregatedListAddressesRequest):\n                The request object. A request message for\n                Addresses.AggregatedList. See the method\n                description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.AddressAggregatedList:\n\n        \"\"\"\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/aggregated/addresses\".format(\n            host=self._host, project=request.project,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n        if compute.AggregatedListAddressesRequest.filter in request:\n            query_params[\"filter\"] = request.filter\n        if compute.AggregatedListAddressesRequest.include_all_scopes in request:\n            query_params[\"includeAllScopes\"] = request.include_all_scopes\n        if compute.AggregatedListAddressesRequest.max_results in request:\n            query_params[\"maxResults\"] = request.max_results\n        if compute.AggregatedListAddressesRequest.order_by in request:\n            query_params[\"orderBy\"] = request.order_by\n        if compute.AggregatedListAddressesRequest.page_token in request:\n            query_params[\"pageToken\"] = request.page_token\n        if compute.AggregatedListAddressesRequest.return_partial_success in request:\n            query_params[\"returnPartialSuccess\"] = request.return_partial_success\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.get(url, headers=headers,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.AddressAggregatedList.from_json(\n            response.content, ignore_unknown_fields=True\n        )\n\n    def delete(\n        self,\n        request: compute.DeleteAddressRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.Operation:\n        r\"\"\"Call the delete method over HTTP.\n\n        Args:\n            request (~.compute.DeleteAddressRequest):\n                The request object. A request message for\n                Addresses.Delete. See the method\n                description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.Operation:\n                Represents an Operation resource.\n\n                Google Compute Engine has three Operation resources:\n\n                -  `Global </compute/docs/reference/rest/{$api_version}/globalOperations>`__\n                   \\*\n                   `Regional </compute/docs/reference/rest/{$api_version}/regionOperations>`__\n                   \\*\n                   `Zonal </compute/docs/reference/rest/{$api_version}/zoneOperations>`__\n\n                You can use an operation resource to manage asynchronous\n                API requests. For more information, read Handling API\n                responses.\n\n                Operations can be global, regional or zonal.\n\n                -  For global operations, use the ``globalOperations``\n                   resource.\n                -  For regional operations, use the ``regionOperations``\n                   resource.\n                -  For zonal operations, use the ``zonalOperations``\n                   resource.\n\n                For more information, read Global, Regional, and Zonal\n                Resources. (== resource_for\n                {$api_version}.globalOperations ==) (== resource_for\n                {$api_version}.regionOperations ==) (== resource_for\n                {$api_version}.zoneOperations ==)\n\n        \"\"\"\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses/{address}\".format(\n            host=self._host,\n            project=request.project,\n            region=request.region,\n            address=request.address,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n        if compute.DeleteAddressRequest.request_id in request:\n            query_params[\"requestId\"] = request.request_id\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.delete(url, headers=headers,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.Operation.from_json(response.content, ignore_unknown_fields=True)\n\n    def get(\n        self,\n        request: compute.GetAddressRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.Address:\n        r\"\"\"Call the get method over HTTP.\n\n        Args:\n            request (~.compute.GetAddressRequest):\n                The request object. A request message for Addresses.Get.\n                See the method description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.Address:\n                Use global external addresses for GFE-based external\n                HTTP(S) load balancers in Premium Tier.\n\n                Use global internal addresses for reserved peering\n                network range.\n\n                Use regional external addresses for the following\n                resources:\n\n                -  External IP addresses for VM instances - Regional\n                   external forwarding rules - Cloud NAT external IP\n                   addresses - GFE based LBs in Standard Tier - Network\n                   LBs in Premium or Standard Tier - Cloud VPN gateways\n                   (both Classic and HA)\n\n                Use regional internal IP addresses for subnet IP ranges\n                (primary and secondary). This includes:\n\n                -  Internal IP addresses for VM instances - Alias IP\n                   ranges of VM instances (/32 only) - Regional internal\n                   forwarding rules - Internal TCP/UDP load balancer\n                   addresses - Internal HTTP(S) load balancer addresses\n                   - Cloud DNS inbound forwarding IP addresses\n\n                For more information, read reserved IP address.\n\n                (== resource_for {$api_version}.addresses ==) (==\n                resource_for {$api_version}.globalAddresses ==)\n\n        \"\"\"\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses/{address}\".format(\n            host=self._host,\n            project=request.project,\n            region=request.region,\n            address=request.address,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.get(url, headers=headers,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.Address.from_json(response.content, ignore_unknown_fields=True)\n\n    def insert(\n        self,\n        request: compute.InsertAddressRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.Operation:\n        r\"\"\"Call the insert method over HTTP.\n\n        Args:\n            request (~.compute.InsertAddressRequest):\n                The request object. A request message for\n                Addresses.Insert. See the method\n                description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.Operation:\n                Represents an Operation resource.\n\n                Google Compute Engine has three Operation resources:\n\n                -  `Global </compute/docs/reference/rest/{$api_version}/globalOperations>`__\n                   \\*\n                   `Regional </compute/docs/reference/rest/{$api_version}/regionOperations>`__\n                   \\*\n                   `Zonal </compute/docs/reference/rest/{$api_version}/zoneOperations>`__\n\n                You can use an operation resource to manage asynchronous\n                API requests. For more information, read Handling API\n                responses.\n\n                Operations can be global, regional or zonal.\n\n                -  For global operations, use the ``globalOperations``\n                   resource.\n                -  For regional operations, use the ``regionOperations``\n                   resource.\n                -  For zonal operations, use the ``zonalOperations``\n                   resource.\n\n                For more information, read Global, Regional, and Zonal\n                Resources. (== resource_for\n                {$api_version}.globalOperations ==) (== resource_for\n                {$api_version}.regionOperations ==) (== resource_for\n                {$api_version}.zoneOperations ==)\n\n        \"\"\"\n\n        # Jsonify the request body\n        body = compute.Address.to_json(\n            request.address_resource,\n            including_default_value_fields=False,\n            use_integers_for_enums=False,\n        )\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses\".format(\n            host=self._host, project=request.project, region=request.region,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n        if compute.InsertAddressRequest.request_id in request:\n            query_params[\"requestId\"] = request.request_id\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.post(url, headers=headers, data=body,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.Operation.from_json(response.content, ignore_unknown_fields=True)\n\n    def list(\n        self,\n        request: compute.ListAddressesRequest,\n        *,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> compute.AddressList:\n        r\"\"\"Call the list method over HTTP.\n\n        Args:\n            request (~.compute.ListAddressesRequest):\n                The request object. A request message for Addresses.List.\n                See the method description for details.\n\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n\n        Returns:\n            ~.compute.AddressList:\n                Contains a list of addresses.\n        \"\"\"\n\n        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly\n        #               current impl assumes basic case of grpc transcoding\n        url = \"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses\".format(\n            host=self._host, project=request.project, region=request.region,\n        )\n\n        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields\n        #               not required for GCE\n        query_params = {}\n        if compute.ListAddressesRequest.filter in request:\n            query_params[\"filter\"] = request.filter\n        if compute.ListAddressesRequest.max_results in request:\n            query_params[\"maxResults\"] = request.max_results\n        if compute.ListAddressesRequest.order_by in request:\n            query_params[\"orderBy\"] = request.order_by\n        if compute.ListAddressesRequest.page_token in request:\n            query_params[\"pageToken\"] = request.page_token\n        if compute.ListAddressesRequest.return_partial_success in request:\n            query_params[\"returnPartialSuccess\"] = request.return_partial_success\n\n        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here\n        #               discards default values\n        # TODO(yon-mg): add test for proper url encoded strings\n        query_params = [\"{k}={v}\".format(k=k, v=v) for k, v in query_params.items()]\n        url += \"?{}\".format(\"&\".join(query_params)).replace(\" \", \"+\")\n\n        # Send the request\n        headers = dict(metadata)\n        headers[\"Content-Type\"] = \"application/json\"\n        response = self._session.get(url, headers=headers,)\n\n        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception\n        # subclass.\n        if response.status_code >= 400:\n            raise core_exceptions.from_http_response(response)\n\n        # Return the response\n        return compute.AddressList.from_json(\n            response.content, ignore_unknown_fields=True\n        )\n\n\n__all__ = (\"AddressesRestTransport\",)\n",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 8.297769618329881e-06,
      "p_css": 0.09380673657242299,
      "p_html": 0.0015437017220625393,
      "p_java": 0.00015270310985012234,
      "p_javascript": 0.0044205071976992655,
      "p_matlab": 5.174862446319929e-06,
      "p_python": 3.8291811224376895e-05,
      "p_sql": 0.0011359491483231025,
      "p_typescript": 0.898888637806353
    },
    {
      "text": "def matrix_multiply(matrix1, matrix2):\n    row1 = len(matrix1)\n    col1 = len(matrix1[0])\n    row2 = len(matrix2)\n    col2 = len(matrix2[0])\n    \n    # Check matrix dimensions\n    if col1 != row2:\n        return -1\n    \n    # Create output matrix\n    result = [[0 for i in range(col2)] for j in range(row1)]\n        \n    # Multiply the two matrices\n    for i in range(row1):\n        for j in range(col2):\n            for k in range(row2):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n                \n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.216678238192298e-05,
      "p_css": 8.881746302615613e-06,
      "p_html": 0.00013335192446438686,
      "p_java": 1.8999718416817886e-05,
      "p_javascript": 3.4994894822605332e-06,
      "p_matlab": 0.05017622706883553,
      "p_python": 0.9494483359778023,
      "p_sql": 9.821819340702179e-05,
      "p_typescript": 7.031909890743021e-05
    },
    {
      "text": "def dot_product(x, y):\n    result = 0\n    for i in range(len(x)):\n        result += x[i] * y[i]\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.1458982410096293e-08,
      "p_css": 1.1192583055824894e-06,
      "p_html": 1.6783641342344335e-07,
      "p_java": 2.59356359523462e-09,
      "p_javascript": 1.067943541876858e-08,
      "p_matlab": 4.8296667410327955e-06,
      "p_python": 0.9999914723161667,
      "p_sql": 2.318745364907741e-06,
      "p_typescript": 5.74450268649173e-08
    },
    {
      "text": "import sqlite3\n\nclass DataAccess(object):\n \n def __init__(self, db_name):\n self.conn = sqlite3.connect(db_name)\n self.cur = self.conn.cursor()\n \n def save_data(self, table, id, name):\n self.cur.execute(f\"INSERT INTO {table} VALUES (?, ?)\", (id, name))\n self.conn.commit()\n \n def read_data(self, table, id):\n self.cur.execute(f\"SELECT * FROM {table} WHERE id = ?\", (id,))\n return self.cur.fetchone()\n \n def close_connection(self):\n self.conn.close()\n\nUserDAO = DataAccess('my_db.db')",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 4.1579344027989466e-06,
      "p_css": 0.0002011364503956492,
      "p_html": 0.001236498900556537,
      "p_java": 6.650312531490295e-07,
      "p_javascript": 6.680417470581501e-07,
      "p_matlab": 6.50069899484919e-08,
      "p_python": 0.0005150525617597036,
      "p_sql": 0.9980396882711413,
      "p_typescript": 2.0678017538215727e-06
    },
    {
      "text": "def sortList(nums): \n \n    # sort the list in descending order \n    nums.sort(reverse = True) \n   \n    # return the sorted list \n    return nums \n   \n# driver code \nlist = [5, 4, 3, 2, 1] \nprint(sortList(list))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00042924908805404966,
      "p_css": 0.0011262335252668113,
      "p_html": 0.0007504849843106463,
      "p_java": 5.515006160769774e-05,
      "p_javascript": 0.02026459361460051,
      "p_matlab": 2.0877917182363526e-05,
      "p_python": 0.9720719996927333,
      "p_sql": 0.004914749896986869,
      "p_typescript": 0.00036666121925756713
    },
    {
      "text": "\"\"\"\nDesign an efficient algorithm in Python for calculating the Fibonacci sequence \n\"\"\"\n\n\ndef fib(n):\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        f1 = 0\n        f2 = 1\n        for x in range(2, n+1):\n            f = f1+f2\n            f1 = f2\n            f2 = f\n        return f\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of terms:\"))\n    print(\"Fibonacci sequence:\")\n    for i in range(n):\n        print(fib(i))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0034308843745227808,
      "p_css": 0.00033529411504276864,
      "p_html": 0.002099486309831697,
      "p_java": 0.00019391753795317717,
      "p_javascript": 0.002583890641005827,
      "p_matlab": 0.011229631038467537,
      "p_python": 0.9758240669404369,
      "p_sql": 0.0014977785162364667,
      "p_typescript": 0.0028050505265028065
    },
    {
      "text": "from collections import Counter\n\ndef most_frequent(arr):\n    cnt = Counter(arr)\n    return cnt.most_common(1)[0][0]\n\narr = [1, 1, 2, 3, 2, 4, 4]\nmost_frequent_elem = most_frequent(arr)\nprint(most_frequent_elem)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009650415298218536,
      "p_css": 0.005021554009216503,
      "p_html": 0.0006138966076381021,
      "p_java": 5.985583160710566e-05,
      "p_javascript": 0.00012727696268992854,
      "p_matlab": 0.01429679828431581,
      "p_python": 0.9786366425479129,
      "p_sql": 5.446740844695777e-05,
      "p_typescript": 0.0002244668183508091
    },
    {
      "text": "def calculate_sum(nested_list):\n    sum = 0\n    for item in nested_list:\n        for num in item:\n            sum += num\n    return sum\n\nnested_list = [[1,2], [3,4], [6,7]]\nprint(calculate_sum(nested_list))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1117928751309961e-05,
      "p_css": 2.057683710088628e-06,
      "p_html": 0.0002113656669727533,
      "p_java": 1.9325533567403705e-05,
      "p_javascript": 5.3409123915151967e-05,
      "p_matlab": 0.999429840686849,
      "p_python": 0.000256110683185208,
      "p_sql": 7.550202908712237e-06,
      "p_typescript": 9.22249014056025e-06
    },
    {
      "text": "class MyIterator:\n  def __init__(self, data):\n    self.data = data\n    self.index = 0\n  \n  def __iter__(self):\n    return self\n  \n  def __next__(self):\n    if self.index >= len(self.data):\n      raise StopIteration\n    item = self.data[self.index]\n    self.index += 1\n    return item\n\n  def __len__(self):\n    return len(self.data)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.1186250327320603e-05,
      "p_css": 0.004640561606535845,
      "p_html": 0.1975777861121071,
      "p_java": 4.587671404053126e-07,
      "p_javascript": 2.2521294454306397e-05,
      "p_matlab": 2.556797995321429e-07,
      "p_python": 0.5995928491781926,
      "p_sql": 0.19804559215950943,
      "p_typescript": 9.878895193334205e-05
    },
    {
      "text": "def knapsack(items, weight_limit):\n # Initialize an empty list to hold the items to include in the knapsack\n knapsack_items = []\n # Iterate over each item in the list\n for item in items:\n # Calculate the weight of the items already in the knapsack\n knapsack_weight = sum([i['weight'] for i in knapsack_items])\n # If the item can fit in the knapsack, add it\n if item['weight'] + knapsack_weight <= weight_limit:\n knapsack_items.append(item)\n \n # Return the items to include in the knapsack\n return knapsack_items\n\n\nlist = [{'name': 'item1', 'weight': 5, 'value': 10}, \n        {'name': 'item2', 'weight': 6, 'value': 15}, \n        {'name': 'item3', 'weight': 3, 'value': 5}]\nweight_limit = 9\n\n# Call the knapsack function\noptimal_items = knapsack(list, weight_limit)\n \n# Print the items to include in the knapsack\nprint(optimal_items)  # [{'name': 'item1', 'weight': 5, 'value': 10}, {'name': 'item3', 'weight': 3, 'value': 5}]",
      "y_true": "css",
      "pred_label": "javascript",
      "p_bash": 0.0025475183878859733,
      "p_css": 0.05119139712606862,
      "p_html": 0.020763350356548176,
      "p_java": 0.002265371814146976,
      "p_javascript": 0.8521639605449899,
      "p_matlab": 0.05723350776614725,
      "p_python": 0.0008968290241217925,
      "p_sql": 0.002580182101179566,
      "p_typescript": 0.010357882878911854
    },
    {
      "text": "def linear_search(sorted_ary, n, target):\n\tfor i in range(0,n):\n\t\tif sorted_ary[i] == target:\n\t\t\treturn i\n\treturn -1\n\nresult = linear_search(sorted_ary, n, target)\n\nif result == -1:\n   print(\"Element is not present in array\")\nelse:\n   print(\"Element is present at index\", result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.0080962106960536e-06,
      "p_css": 1.0386531115187083e-05,
      "p_html": 1.0725601649155704e-05,
      "p_java": 4.523650695724701e-07,
      "p_javascript": 2.827724999004271e-06,
      "p_matlab": 0.9896678858174888,
      "p_python": 0.01029806417806388,
      "p_sql": 4.2621519968894485e-06,
      "p_typescript": 2.3875334067088694e-06
    },
    {
      "text": "def toBinary(num):\n   result = \"\"\n   while num > 0:\n      result = str(num % 2) + result\n      num = num // 2\n   return result\n\nprint(toBinary(245))  # output: 11110101",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0484270303770569e-05,
      "p_css": 1.684735784721042e-07,
      "p_html": 2.6520507463824905e-05,
      "p_java": 7.434386164483345e-07,
      "p_javascript": 9.398519251092994e-06,
      "p_matlab": 0.3033312825172162,
      "p_python": 0.6965906236757254,
      "p_sql": 2.8612880417791012e-05,
      "p_typescript": 2.1657174269009222e-06
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"   \nresp = requests.get(url) \nsoup = BeautifulSoup(resp.text, 'html.parser') \nlinks = soup.find_all('a', href=True) \n\nfor link in links:\n print(link['href'])",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.02677717849836e-16,
      "p_css": 3.039154401930848e-05,
      "p_html": 0.0006337169162178443,
      "p_java": 0.9992853744837551,
      "p_javascript": 1.1007345632709986e-07,
      "p_matlab": 1.7264814554938332e-06,
      "p_python": 4.777452479129282e-05,
      "p_sql": 8.782188104626824e-07,
      "p_typescript": 2.775749388708221e-08
    },
    {
      "text": "arr = [[1,2,3], [4,5,6], [7,8,9]]\n\nsum = 0\n\nfor row in arr:\n for col in row:\n  sum = sum + col\n\nprint(\"Sum:\", sum)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.551779510610261e-05,
      "p_css": 0.00018035732534925605,
      "p_html": 9.821616327967493e-05,
      "p_java": 0.001182872442130432,
      "p_javascript": 3.049149786676254e-05,
      "p_matlab": 0.9980369017951968,
      "p_python": 0.00038306067429840147,
      "p_sql": 2.4347364325978127e-05,
      "p_typescript": 4.823494244655221e-05
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/product/123'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nprice_block = soup.find('div', class_='price')\nprices = [float(price.text) for price in price_block.find_all('span')]\n\nprint(f\"Prices for {url} are {prices}\")",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 3.035169062824733e-13,
      "p_css": 0.4366568074957101,
      "p_html": 0.1368286937592444,
      "p_java": 0.42627607074710755,
      "p_javascript": 1.7002386475892604e-06,
      "p_matlab": 3.9807071315584915e-07,
      "p_python": 0.0001977589153206265,
      "p_sql": 3.7457386567276315e-05,
      "p_typescript": 1.1133863858549413e-06
    },
    {
      "text": "import random\n\nsample_dataset = [\n    [1,1,1],\n    [2,2,2],\n    [3,3,3],\n    [4,4,4]\n]\n\ndef data_augmentation(dataset):\n augmented_dataset = []\n for data in dataset:\n augmented_row = list(data)\n augmented_row.append(random.randint(-1,1))\n augmented_dataset.append(augmented_row)\n return augmented_dataset\n\naugmented_dataset = data_augmentation(sample_dataset)\n\nprint('Sample dataset:')\nprint(sample_dataset)\nprint('Augmented dataset:')\nprint(augmented_dataset)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0022570149678537337,
      "p_css": 0.15985780986305106,
      "p_html": 0.020919833116278534,
      "p_java": 2.2401380060156033e-05,
      "p_javascript": 0.00033135598685778107,
      "p_matlab": 0.01175230728399953,
      "p_python": 0.734001399388349,
      "p_sql": 0.06938911768449636,
      "p_typescript": 0.0014687603290538945
    },
    {
      "text": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.458264017441571e-06,
      "p_css": 1.2489973633791652e-05,
      "p_html": 0.00020513313210141518,
      "p_java": 9.598045757131525e-07,
      "p_javascript": 1.998599373186863e-06,
      "p_matlab": 5.879932256393923e-06,
      "p_python": 0.9997524634770388,
      "p_sql": 6.080126282072695e-07,
      "p_typescript": 1.5008804375245655e-05
    },
    {
      "text": "sample_data = \"Name: John Doe; Age: 23; Course: Data Science\"\n\n# Split the string by the \";\" character\ndata_items = sample_data.split(';')\n\n# Strip any extra whitespace and split by the \":\" character\ndata_dict = {}\nfor item in data_items:\n    key, value = item.strip().split(': ')\n    data_dict[key] = value\n    \nprint(data_dict)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0004826828679430517,
      "p_css": 0.9843206583338674,
      "p_html": 0.008125116947291332,
      "p_java": 0.0006760329064197791,
      "p_javascript": 0.00018740610587642572,
      "p_matlab": 0.0010896501489249678,
      "p_python": 0.00010552413836306703,
      "p_sql": 0.0011143694512211818,
      "p_typescript": 0.003898559100092846
    },
    {
      "text": "class MyClass:\n def __init__(self, x, y):\n  self.x = x\n  self.y = y",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015863887961224535,
      "p_css": 0.004239341223947782,
      "p_html": 0.12438549001843598,
      "p_java": 3.068392590835109e-05,
      "p_javascript": 2.351191499665373e-05,
      "p_matlab": 2.091736942118918e-06,
      "p_python": 0.7355195850849388,
      "p_sql": 0.13513436353110617,
      "p_typescript": 0.0005062936841118482
    },
    {
      "text": "import numpy as np\n\ndef fillWithMedian(data):\n    data = np.array(data)\n    median_val = np.nanmedian(data)\n    data[np.isnan(data)] = median_val \n    return data\n\ndata = [1, None, 4, 5, None, 10]\nprint(fillWithMedian(data))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0004716695678622742,
      "p_css": 0.5072521045887034,
      "p_html": 0.03638566377109408,
      "p_java": 6.578270010081882e-06,
      "p_javascript": 7.6151583861522304e-06,
      "p_matlab": 1.8437357475679236e-05,
      "p_python": 0.4390427723819409,
      "p_sql": 0.0006819355470384721,
      "p_typescript": 0.016133223357488898
    },
    {
      "text": "import random\n\ndef arr_of_random_numbers(size):\n    arr = []\n    for i in range(size):\n        arr.append(random.randint(1, 100))\n    return arr\n\nsize = 10\narr = arr_of_random_numbers(size)\nprint(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.2906247057674713e-05,
      "p_css": 7.519750385412869e-05,
      "p_html": 0.00013037650210642165,
      "p_java": 2.2765825017423997e-06,
      "p_javascript": 8.317621173352158e-06,
      "p_matlab": 0.905024104574493,
      "p_python": 0.09467607307874937,
      "p_sql": 4.7987314034923574e-05,
      "p_typescript": 1.2760576029351232e-05
    },
    {
      "text": "def toBinary(n): \n    if (n > 1): \n        toBinary(n//2) \n    print(n%2,end = '') \n \n# Driver Code \nnum = 8\ntoBinary(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.5108133934440356e-05,
      "p_css": 3.976857972611786e-08,
      "p_html": 5.22872308925213e-05,
      "p_java": 5.6231023019891234e-05,
      "p_javascript": 1.3796689642987855e-05,
      "p_matlab": 0.9213927968192618,
      "p_python": 0.07616381187811327,
      "p_sql": 5.81696027605161e-05,
      "p_typescript": 0.0022077588537949204
    },
    {
      "text": "def get_full_name(first, last):\n  full_name = f\"{first} {last}\"\n  return full_name\n\nname = get_full_name(\"John\", \"Smith\")\nprint(name)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.022803212370687977,
      "p_css": 0.04915106881035899,
      "p_html": 0.04645105527459194,
      "p_java": 0.2594749955156763,
      "p_javascript": 0.00011948637888878898,
      "p_matlab": 0.0018317044313475635,
      "p_python": 0.6123065265179295,
      "p_sql": 0.0032336857362856722,
      "p_typescript": 0.004628264964233365
    },
    {
      "text": "import numpy as np\nfrom sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\nfruits = datasets.load_iris()\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(fruits.data, fruits.target, test_size=0.3, random_state=1)\n\n# Train the model with the Decision Tree Algorithm \nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions with the model\npredicted_fruits = model.predict([[1, 0, 0.5, 1]])\n\nif predicted_fruits == [1]:\n    print('The fruit is likely to be an apple')\nelif predicted_fruits == [2]:\n    print('The fruit is likely to be an orange')\nelse:\n    print('The fruit is likely to be a banana')",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.84716611847176,
      "p_css": 0.0005090840513552726,
      "p_html": 2.9988623648664173e-05,
      "p_java": 5.9237210597427614e-08,
      "p_javascript": 4.787742885975222e-05,
      "p_matlab": 4.262992647983522e-07,
      "p_python": 0.0012602960109730683,
      "p_sql": 1.1457849352207229e-10,
      "p_typescript": 0.15098614976234934
    },
    {
      "text": "The highest value is 8.\n\nlist_ints = [2, 5, 3, 4, 8]\n\nhighest_value = max(list_ints)\n\nprint('The highest value is ' + str(highest_value) + '.')",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0059390114073149675,
      "p_css": 0.05653720092194888,
      "p_html": 0.01707402041070474,
      "p_java": 0.0008239583526561575,
      "p_javascript": 0.22049698477818522,
      "p_matlab": 0.6033332596172749,
      "p_python": 0.0009484110578965441,
      "p_sql": 0.011408480157752221,
      "p_typescript": 0.08343867329626634
    },
    {
      "text": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nX = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny = np.array([1, 4, 9, 16, 25])\n\n# Build the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Plot the results\nplt.scatter(X, y)\nplt.plot(X, model.predict(X))\nplt.title(\"Linear Regression Model\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.show()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8964101387146208,
      "p_css": 0.0015219043620624578,
      "p_html": 0.011793845025714737,
      "p_java": 8.905895650674617e-06,
      "p_javascript": 2.7916676570011748e-05,
      "p_matlab": 2.3346945564076466e-05,
      "p_python": 0.0899434071260821,
      "p_sql": 1.8215609502767286e-07,
      "p_typescript": 0.000270353097639984
    },
    {
      "text": "def find_max(a, b, c):\n    max_num = a\n    if b > max_num:\n        max_num = b\n    if c > max_num:\n        max_num = c\n    return max_num",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004203581929284369,
      "p_css": 0.007282498049962872,
      "p_html": 0.33141085965449774,
      "p_java": 0.0007274821766278979,
      "p_javascript": 0.0015798711544087226,
      "p_matlab": 0.0025668565108546045,
      "p_python": 0.6469896534317161,
      "p_sql": 0.0001336769134462701,
      "p_typescript": 0.005105520179201422
    },
    {
      "text": "import PyPDF2\n\n# Load file\nfile= open(your_pdf_filename, 'rb')\nreader= PyPDF2.PdfFileReader(file)\n\n# Read text\ntext = ''\nfor page in reader.pages:\n text += page.extractText()\n\n# Close file\nfile.close()\n\n# Print result\nprint(text)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.052234709550184596,
      "p_css": 0.09927830615729503,
      "p_html": 0.005593699075512276,
      "p_java": 1.163694590746446e-05,
      "p_javascript": 0.004726271237790141,
      "p_matlab": 0.0018508382221983975,
      "p_python": 0.7381594451882769,
      "p_sql": 0.09134325882200504,
      "p_typescript": 0.006801834800830236
    },
    {
      "text": "def triangleArea(a, b, c): \n\n    # calculate the semi-perimeter \n    s = (a + b + c) / 2\n\n    # calculate the area \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return area",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.018720471904083404,
      "p_css": 0.03587498466341817,
      "p_html": 0.0035683430530237276,
      "p_java": 0.00039315064087733605,
      "p_javascript": 0.008725197261207069,
      "p_matlab": 0.0004728880679967179,
      "p_python": 0.8905985459044673,
      "p_sql": 0.0030761131299392834,
      "p_typescript": 0.03857030537498699
    },
    {
      "text": "mylist = [10, 20, 30, 40, 10]\nvalue_to_remove = 10\n\n# new list after value is removed\nnew_list = [item for item in mylist if item != value_to_remove] \n\nprint(new_list)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.898937224723972e-10,
      "p_css": 2.5546023446358414e-08,
      "p_html": 5.6706441924602296e-09,
      "p_java": 2.0161114305726252e-10,
      "p_javascript": 2.8190487178375424e-08,
      "p_matlab": 0.9999999387414991,
      "p_python": 2.517112732522049e-10,
      "p_sql": 1.3613874327328505e-11,
      "p_typescript": 4.945161546621239e-10
    },
    {
      "text": "my_dict = {\n    'list1': {\n        'list1_1': 25,\n        'list1_2': 25\n    },\n    'list2': {\n        'list2_1': {\n            'list2_1_1': 25\n        }\n        'list2_2': 25\n    }\n}\n\ndef update_values(dictionary, value):\n for key, value in dictionary.items():\n if isinstance(value, dict):\n update_values(value, value)\n else:\n dictionary[key] = value\n\nupdate_values(my_dict, value)",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 3.876250322589837e-09,
      "p_css": 0.01388917652973784,
      "p_html": 5.2792240826079904e-08,
      "p_java": 1.128815632787219e-09,
      "p_javascript": 7.063515926179705e-09,
      "p_matlab": 0.9861107216657545,
      "p_python": 1.0350105079407497e-13,
      "p_sql": 2.1455619038326055e-08,
      "p_typescript": 1.548796244286923e-08
    },
    {
      "text": "def binary_search(lst, x):\n # initializing low and high index values\n lowIdx = 0\n highIdx = len(lst)-1\n \n # loop until low index is not greater than high index \n while lowIdx <= highIdx: \n # calculate mid index \n midIdx = (lowIdx + highIdx)//2\n\n# compare midIdx value with x \n if lst[midIdx] == x: \n return midIdx \n \n # if x is less than midIdx value \n elif lst[midIdx] > x: \n highIdx = midIdx - 1\n \n # if x is greater than midIdx value \n else: \n lowIdx = midIdx + 1\n\n# if x is not present then return -1\nreturn -1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00141694875735858,
      "p_css": 0.021751762696500924,
      "p_html": 0.011305169231355702,
      "p_java": 0.0007301752231292817,
      "p_javascript": 0.008077514360311082,
      "p_matlab": 0.8516280902015937,
      "p_python": 0.01798300255008812,
      "p_sql": 0.007661479840566147,
      "p_typescript": 0.07944585713909644
    },
    {
      "text": "def word_and_character_count(string):\n    num_words = len(string.split())\n    num_characters = len(string)\n    print(\"Number of words:\", num_words)\n    print(\"Number of characters:\", num_characters)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.5807922836288683e-09,
      "p_css": 0.00022915705702549857,
      "p_html": 2.8344926025291016e-05,
      "p_java": 0.5382529924073177,
      "p_javascript": 7.658471443688889e-10,
      "p_matlab": 2.6506258914618582e-08,
      "p_python": 0.45843693243685496,
      "p_sql": 0.0030442987928765985,
      "p_typescript": 8.245527001793062e-06
    },
    {
      "text": "# Import libraries\nimport flask\nfrom flask import request, jsonify\nimport tensorflow as tf\n\n# Load the model\nmodel = tf.keras.models.load_model('handwritten_recognition_model.h5')\n\n# Create the API \napp = flask.Flask(__name__)\n\n@app.route('/api', methods=['POST'])\ndef predict():\n\n    # Get the data from the POST request\n    data = request.get_json(force=True)\n\n    # Make prediction \n    prediction = model.predict(data)\n\n    # Return the result mapped to the labels \n    labels = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', \n    5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n\n    output = labels[np.argmax(prediction)]\n\n    # Return the result in json format \n    return jsonify(output)\n\nif __name__ == '__main__':\n    app.run(debug=True)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.09314403214295311,
      "p_css": 0.8969766931098675,
      "p_html": 0.0001032768645689266,
      "p_java": 1.2593984322652233e-07,
      "p_javascript": 5.967932256542679e-06,
      "p_matlab": 3.0798986369538147e-08,
      "p_python": 0.005613403953787997,
      "p_sql": 3.92492397893762e-06,
      "p_typescript": 0.004152544333757298
    },
    {
      "text": "class Point:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n\n  def move(self, dx, dy):\n    self.x += dx\n    self.y += dy\n\n  def distance(self, other_point):\n    return ((self.x - other_point.x)**2 + (self.y - other_point.y)**2)**0.5\n\n#example \np1 = Point(2,3)\np2 = Point(5,7)\n\nprint(p1.distance(p2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.090505294313322e-05,
      "p_css": 0.013926204706939593,
      "p_html": 0.10394099902170127,
      "p_java": 1.7903028393773333e-05,
      "p_javascript": 5.010242361694008e-05,
      "p_matlab": 1.8118409735939743e-06,
      "p_python": 0.6700238688998933,
      "p_sql": 0.21187150881625547,
      "p_typescript": 8.66962092830117e-05
    },
    {
      "text": "import random\n\ndef create_random_structure(n):\n    structure = []\n    for i in range(n):\n        structure.append(random.randint(0, n))\n    return structure",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.4442498024866095e-05,
      "p_css": 0.000199901156586645,
      "p_html": 0.0017171912091624886,
      "p_java": 8.109851432131457e-06,
      "p_javascript": 9.755089756057536e-07,
      "p_matlab": 0.1706057346070109,
      "p_python": 0.7851796455734473,
      "p_sql": 0.014605078069753445,
      "p_typescript": 0.027658921525606693
    },
    {
      "text": "# -*- coding: utf-8 -*-\n# Copyright (C) 2006 Frederic Back (fredericback@gmail.com)\n# Copyright (C) 2007 Kristoffer Lundén (kristoffer.lunden@gmail.com)\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, \n# Boston, MA 02111-1307, USA.\n\nimport gtk\nimport gobject\nimport pango\nimport os\nimport re\nimport options\nfrom parserinterface import ClassParserInterface\nimport imagelibrary\n\n#===============================================================================\n\ndef tokenFromString(string):\n    \"\"\" Parse a string containing a function or class definition and return\n        a tuple containing information about the function, or None if the\n        parsing failed.\n\n        Example: \n            \"#def foo(bar):\" would return :\n            {'comment':True,'type':\"def\",'name':\"foo\",'params':\"bar\" } \"\"\"\n\n    try:\n        e = r\"([# ]*?)([a-zA-Z0-9_]+)( +)([a-zA-Z0-9_\\?\\!<>\\+=\\.]+)(.*)\"\n        r = re.match(e,string).groups()\n        token = Token()\n        token.comment = '#' in r[0]\n        token.type = r[1]\n        token.name = r[3]\n        token.params = r[4]\n        token.original = string\n        return token\n    except: return None # return None to skip if unable to parse\n    \n    def test():\n        pass\n\n#===============================================================================\n\nclass Token:\n    def __init__(self):\n        self.type = None\n        self.original = None # the line in the file, unparsed\n\n        self.indent = 0\n        self.name = None\n        self.comment = False # if true, the token is commented, ie. inactive\n        self.params = None   # string containing additional info\n        self.expanded = False\n\n        self.access = \"public\"\n\n        # start and end points\n        self.start = 0\n        self.end = 0\n\n        self.rubyfile = None\n        self.path = None # save the position in the browser\n\n        self.parent = None\n        self.children = []\n\n    def get_endline(self):\n        \"\"\" Get the line number where this token's declaration, including all\n            its children, finishes. Use it for copy operations.\"\"\"\n        if len(self.children) > 0:\n            return self.children[-1].get_endline()\n        return self.end\n\n        def test_nested():\n            pass\n            \n    def get_toplevel_class(self):\n        \"\"\" Try to get the class a token is in. \"\"\"\n            \n        if self.type == \"class\":\n            return self    \n\n        if self.parent is not None:\n            tc = self.parent.get_toplevel_class()\n            if tc is None or tc.type == \"file\": return self #hack\n            else: return tc\n                \n        return None\n\n    def printout(self):\n        for r in range(self.indent): print \"\",\n        print self.name,\n        if self.parent: print \" (parent: \",self.parent.name       \n        else: print\n        for tok in self.children: tok.printout()\n\n#===============================================================================\n\nclass RubyFile(Token):\n    \"\"\" A class that represents a ruby file.\n        Manages \"tokens\", ie. classes and functions.\"\"\"\n\n    def __init__(self, doc):\n        Token.__init__(self)\n        self.doc = doc\n        self.uri = doc.get_uri()\n        self.linestotal = 0 # total line count\n        self.type = \"file\"\n        self.name = os.path.basename(self.uri)\n        self.tokens = []\n\n\n    def getTokenAtLine(self, line):\n        \"\"\" get the token at the specified line number \"\"\"\n        for token in self.tokens:\n            if token.start <= line and token.end > line:\n                return self.__findInnermostTokenAtLine(token, line)\n        return None\n\n    def __findInnermostTokenAtLine(self, token, line):\n        \"\"\"\" ruby is parsed as nested, unlike python \"\"\"\n        for child in token.children:\n            if child.start <= line and child.end > line:\n                return self.__findInnermostTokenAtLine(child, line)\n        return token\n\n\n    def parse(self, verbose=True):\n\n        #if verbose: print \"parse ----------------------------------------------\"\n        newtokenlist = []\n\n        self.children = []\n\n        currentParent = self\n\n        self.linestotal = self.doc.get_line_count()\n\n        text = self.doc.get_text(*self.doc.get_bounds())\n        linecount = -1\n        ends_to_skip = 0\n        \n        access = \"public\"\n        \n        for line in text.splitlines():\n            linecount += 1\n            lstrip = line.lstrip()\n            ln = lstrip.split()\n            if len(ln) == 0: continue\n            if ln[0] == '#': continue\n            \n            if ln[0] in (\"class\",\"module\",\"def\"):\n                token = tokenFromString(lstrip)\n                if token is None: continue\n                token.rubyfile = self\n                token.start = linecount\n                if token.type == \"def\":\n                    token.access = access\n                    \n                #print \"line\",linecount\n                #print \"name\", token.name\n                #print \"type\",token.type\n                #print \"access\",token.access\n                #print \"to\",currentParent.name\n                \n                currentParent.children.append(token)\n                token.parent = currentParent\n                currentParent = token\n                newtokenlist.append(token)\n                \n                \n                idx = len(newtokenlist) - 1\n                if idx < len(self.tokens):\n                    if newtokenlist[idx].original == self.tokens[idx].original:\n                        newtokenlist[idx].expanded = self.tokens[idx].expanded\n                \n            elif ln[0] in(\"begin\",\"while\",\"until\",\"case\",\"if\",\"unless\",\"for\"):\n                    ends_to_skip += 1\n                    \n            elif ln[0] in (\"attr_reader\",\"attr_writer\",\"attr_accessor\"):\n                for attr in ln:\n                    m = re.match(r\":(\\w+)\",attr)\n                    if m:\n                        token = Token()\n                        token.rubyfile = self\n                        token.type = 'def'\n                        token.name = m.group(1)\n                        token.start = linecount\n                        token.end = linecount\n                        token.original = lstrip\n                        currentParent.children.append(token)\n                        token.parent = currentParent\n                        newtokenlist.append(token)\n            \n            elif re.search(r\"\\sdo(\\s+\\|.*?\\|)?\\s*(#|$)\", line):\n                #print \"do\",line\n\n                # Support for new style RSpec\n                if re.match(r\"^(describe|it|before|after)\\b\", ln[0]):\n                    token = Token()\n                    token.rubyfile = self\n                    token.start = linecount\n                    \n                    if currentParent.type == \"describe\":                    \n                        if ln[0] == \"it\":\n                            token.name = \" \".join(ln[1:-1])\n                        else:\n                            token.name = ln[0]\n                        token.type = \"def\"\n                    elif ln[0] == \"describe\":\n                        token.type = \"describe\"\n                        token.name = \" \".join(ln[1:-1])\n                    else:\n                        continue\n                    currentParent.children.append(token)\n                    token.parent = currentParent\n                    currentParent = token\n                    newtokenlist.append(token)\n\n                # Deprectated support for old style RSpec, will be removed later\n                elif ln[0] in (\"context\",\"specify\",\"setup\",\"teardown\",\"context_setup\",\"context_teardown\"):\n                    token = Token()\n                    token.rubyfile = self\n                    token.start = linecount\n                    \n                    if currentParent.type == \"context\":                    \n                        if ln[0] == \"specify\":\n                            token.name = \" \".join(ln[1:-1])\n                        else:\n                            token.name = ln[0]\n                        token.type = \"def\"\n                    elif ln[0] == \"context\":\n                        token.type = \"context\"\n                        token.name = \" \".join(ln[1:-1])\n                    else:\n                        continue\n                    currentParent.children.append(token)\n                    token.parent = currentParent\n                    currentParent = token\n                    newtokenlist.append(token)\n                else:\n                    ends_to_skip += 1\n                \n            elif ln[0] in (\"public\",\"private\",\"protected\"):\n                if len(ln) == 1:\n                    access = ln[0]\n                    \n            if re.search(r\";?\\s*end(?:\\s*$|\\s+(?:while|until))\", line):\n                if ends_to_skip > 0:\n                    ends_to_skip -= 1\n                else:\n                  token = currentParent\n                  #print \"end\",currentParent.name\n                  token.end = linecount\n                  currentParent = token.parent\n                \n\n        # set new token list\n        self.tokens = newtokenlist\n        return True\n\n\n#===============================================================================\n\nclass RubyParser( ClassParserInterface ):\n    \n    def __init__(self):\n        self.rubyfile = None\n\n\n    def appendTokenToBrowser(self, token, parentit ):\n        it = self.__browsermodel.append(parentit,(token,))\n        token.path = self.__browsermodel.get_path(it)\n        #print token.path\n        #if token.parent:\n        #    if token.parent.expanded:\n        #        self.browser.expand_row(token.parent.path,False)\n        #        pass\n        for child in token.children:\n            self.appendTokenToBrowser(child, it)\n\n\n    def parse(self, doc):\n        \"\"\" \n        Create a gtk.TreeModel with the class elements of the document\n        \n        The parser uses the ctags command from the shell to create a ctags file,\n        then parses the file, and finally populates a treemodel.\n        \"\"\"\n    \n        self.rubyfile = RubyFile(doc)\n        self.rubyfile.parse(options.singleton().verbose)\n        self.__browsermodel = gtk.TreeStore(gobject.TYPE_PYOBJECT)\n        for child in self.rubyfile.children:\n            self.appendTokenToBrowser(child,None)\n        return self.__browsermodel\n\n        \n    def __private_test_method(self):\n        pass\n\n\n    def get_tag_position(self, model, path):\n        tok = model.get_value( model.get_iter(path), 0 )\n        try: return tok.rubyfile.uri, tok.start+1\n        except: return None\n\n\n    def current_line_changed(self, model, doc, line):\n\n        # parse again if line count changed\n        if abs(self.rubyfile.linestotal - doc.get_line_count()) > 0:\n            if abs(self.rubyfile.linestotal - doc.get_line_count()) > 5:\n                if options.singleton().verbose:\n                    print \"RubyParser: refresh because line dif > 5\"\n                self.rubyfile.parse()\n            else:\n                it = doc.get_iter_at_line(line)\n                a = it.copy(); b = it.copy()\n                a.backward_line(); a.backward_line()\n                b.forward_line(); b.forward_line()\n\n                t = doc.get_text(a,b)\n                if t.find(\"class\") >= 0 or t.find(\"def\") >= 0:\n                    if options.singleton().verbose:\n                        print \"RubyParser: refresh because line cound changed near keyword\"\n                    self.rubyfile.parse()\n \n\n    def get_tag_at_line(self, model, doc, linenumber):\n        t = self.rubyfile.getTokenAtLine(linenumber)\n        #print linenumber,t\n        if t: return t.path\n\n\n    def cellrenderer(self, column, ctr, model, it):\n\n        \"\"\" Render the browser cell according to the token it represents. \"\"\"\n        tok = model.get_value(it,0)\n\n        weight = 400\n        style = pango.STYLE_NORMAL\n        name = tok.name#+tok.params\n        colour = options.singleton().colours[ \"function\" ]\n\n        # set label and colour\n        if tok.type == \"class\":\n            name = \"class \"+name\n            colour = options.singleton().colours[ \"class\" ]\n            weight = 600\n            \n        elif tok.type == \"module\":\n            name = \"module \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n            \n        # new style RSpec\n        elif tok.type == \"describe\":\n            name = \"describe \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n        \n        # Old style RSpec, deprecated    \n        elif tok.type == \"context\":\n            name = \"context \"+name\n            colour = options.singleton().colours[ \"namespace\" ]\n            weight = 600\n            \n        elif tok.type == \"def\":\n            colour = options.singleton().colours[ \"member\" ]\n            \n        if tok.comment: name = \"#\"+name\n\n        # assing properties\n        ctr.set_property(\"text\", name)\n        ctr.set_property(\"style\", style)\n        ctr.set_property(\"foreground-gdk\", colour)\n\n\n    def pixbufrenderer(self, column, crp, model, it):\n        tok = model.get_value(it,0)\n\n        icon = \"default\"\n\n        if tok.type == \"class\":\n            icon = \"class\"\n        elif tok.type == \"module\":\n            icon = \"namespace\"\n        elif tok.type == \"describe\":\n            icon = \"namespace\"\n        elif tok.type == \"context\":\n            icon = \"namespace\"\n        elif tok.type == \"def\":\n            if tok.access == \"public\":\n                icon = \"method\"\n            elif tok.access == \"protected\":\n                icon = \"method_prot\"\n            elif tok.access == \"private\":\n                icon = \"method_priv\"\n                \n        crp.set_property(\"pixbuf\",imagelibrary.pixbufs[icon])\n\n        \n",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0043039628061556775,
      "p_css": 0.35202876321439147,
      "p_html": 0.28533002319534573,
      "p_java": 0.05419948531826193,
      "p_javascript": 1.0154355977814249e-06,
      "p_matlab": 2.9236774022119744e-05,
      "p_python": 0.043141310323620535,
      "p_sql": 0.25500727805570017,
      "p_typescript": 0.005958924876904736
    },
    {
      "text": "class Vector:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z\n\n  def __add__(self, other): \n    x = self.x + other.x \n    y = self.y + other.y \n    z = self.z + other.z \n    return Vector(x, y, z) \n \n  def __sub__(self, other): \n    x = self.x - other.x \n    y = self.y - other.y \n    z = self.z - other.z \n    return Vector(x, y, z) \n  \n  def __mul__(self, other): \n    x = self.x * other.x \n    y = self.y * other.y \n    z = self.z * other.z \n    return Vector(x, y, z) \n  \n  def __div__(self, other): \n    x = self.x / other.x \n    y = self.y / other.y \n    z = self.z / other.z \n    return Vector(x, y, z) \n  \n  def __str__(self): \n    return \"Vector({}, {}, {})\".format(self.x, self.y, self.z)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001016796136553174,
      "p_css": 0.026551187336300547,
      "p_html": 0.04134496993289716,
      "p_java": 4.421228647671455e-05,
      "p_javascript": 0.003858048371829027,
      "p_matlab": 7.216152542364294e-05,
      "p_python": 0.8616119451082501,
      "p_sql": 0.065006125947638,
      "p_typescript": 0.0004945533546315948
    },
    {
      "text": "# Matrix multiplication in Python\n\nmatrix_A = [[2, 3], [4, 7]] \nmatrix_B = [[6, 5], [1, 4]] \n  \n# result matrix\nresult = [[0, 0], [0, 0]] \n  \n# iterating by row of Matrix A \nfor i in range(len(matrix_A)): \n  \n    # iterating by coloum of Matrix B  \n    for j in range(len(matrix_B[0])): \n  \n        # iterating by rows of Matrix B \n        for k in range(len(matrix_B)): \n            result[i][j] += matrix_A[i][k] * matrix_B[k][j] \n  \nfor r in result: \n    print(r)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.788728346118842e-05,
      "p_css": 3.251218577558694e-05,
      "p_html": 6.83381035271289e-05,
      "p_java": 6.374242810435803e-07,
      "p_javascript": 0.0003456732947069832,
      "p_matlab": 0.09637645287536335,
      "p_python": 0.9024775243812952,
      "p_sql": 0.0005314384945989517,
      "p_typescript": 9.953595699051399e-05
    },
    {
      "text": "import numpy as np\n\n# Define the data points\npoints = np.array([[1, 5], [2, 3], [3, 4]])\n\n# Define the labels\nlabels = np.array([1, -1, -1])\n\n# Define the parameters of the algorithm\nb = 0\nw0 = 0\nw1 = 0\nlearning_rate = 0.001\n\n# Define the training loop\nfor i in range(100):\n pred = w0 + w1 * points[:, 0] > b\n loss = np.mean((labels - pred) ** 2)\n dloss_dw0 = 2 * np.mean(points[:, 0] * (labels - pred))\n dloss_dw1 = 2 * np.mean(points[:, 1] * (labels - pred))\n dloss_db = 2 * np.mean(labels - pred)\n \n # update parameters\n w0 = w0 + learning_rate * dloss_dw0\n w1 = w1 + learning_rate * dloss_dw1\n b = b + learning_rate * dloss_db\n\n# Define the prediction function\ndef predict(x):\n pred = w0 + w1 * x > b\n \n if pred:\n return \"Positive\"\n else:\n return \"Negative\"",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.44486753793691053,
      "p_css": 0.05628134053522039,
      "p_html": 0.002579288043028584,
      "p_java": 0.0003243468467596727,
      "p_javascript": 0.017742862955314045,
      "p_matlab": 0.005418131617711659,
      "p_python": 0.4007514811881465,
      "p_sql": 0.0023229728413655163,
      "p_typescript": 0.06971203803554307
    },
    {
      "text": "# function to check if  \n# given number is perfect square \ndef isPerfectSquare(n): \n  \n    if n < 0: \n        return False\n    \n    # Base case \n    if n == 1: \n        return True\n  \n    i = 1\n    x = n // 2\n      \n    while x >= i: \n        if (x == i) and (n % x == 0): \n            return True\n        x -= 1\n    return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.328496385555778e-05,
      "p_css": 0.00020956659694655857,
      "p_html": 0.0006764645245979968,
      "p_java": 1.0421955445201936e-05,
      "p_javascript": 0.005354092971133225,
      "p_matlab": 9.571717894421985e-05,
      "p_python": 0.9929463609100704,
      "p_sql": 4.275032026100857e-05,
      "p_typescript": 0.0006513405787460074
    },
    {
      "text": "def repeatString(string, num):\n    return string * num\n\nresult = repeatString(\"xyz\", 3)\nprint(result)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.212752368711487e-12,
      "p_css": 7.659661502505931e-08,
      "p_html": 1.5675686305395847e-07,
      "p_java": 0.8265878759013809,
      "p_javascript": 1.5914131785322925e-13,
      "p_matlab": 1.4345605522272082e-06,
      "p_python": 0.17336524358812264,
      "p_sql": 4.51734294056473e-05,
      "p_typescript": 3.916368850095953e-08
    },
    {
      "text": "def integer_to_binary(num):\n    if num == 0:\n        return 0\n    elif num < 0:\n        num += 2**32\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num //= 2\n    return binary",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.97122702683721e-08,
      "p_css": 2.2265343271036947e-12,
      "p_html": 7.699458473858578e-08,
      "p_java": 4.999979188056412e-09,
      "p_javascript": 1.3603485768808753e-08,
      "p_matlab": 0.9999653964008727,
      "p_python": 3.4438297802133476e-05,
      "p_sql": 2.199149594655833e-08,
      "p_typescript": 1.7997282763898754e-08
    },
    {
      "text": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, data):\n        self.items.append(data)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.105969213495246e-06,
      "p_css": 0.006433056735310552,
      "p_html": 0.015248907447690342,
      "p_java": 7.001722850231077e-07,
      "p_javascript": 4.361910774413297e-05,
      "p_matlab": 2.180284766940039e-07,
      "p_python": 0.6316121064045693,
      "p_sql": 0.3466472351393736,
      "p_typescript": 6.050995336738247e-06
    },
    {
      "text": "def remove_duplicates(arr):\n    seen = set()\n    seen_add = seen.add\n    return [x for x in arr if not (x in seen or seen_add(x))]\n\narr = [1, 3, 2, 1, 5, 4, 8, 6, 7, 5]\nresult = remove_duplicates(arr)\n\nprint(result)\n# Output: [1, 3, 2, 5, 4, 8, 6, 7]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003061013181135989,
      "p_css": 0.0010720264117211906,
      "p_html": 0.00015277789199186112,
      "p_java": 6.898685890521908e-05,
      "p_javascript": 2.906066041398551e-05,
      "p_matlab": 0.20440986994509994,
      "p_python": 0.793898768802685,
      "p_sql": 7.539969697478041e-06,
      "p_typescript": 5.486814137188749e-05
    },
    {
      "text": "import numpy as np\n\ndef predict_match_score(probabilities):\n    p_serve_win = probabilities[0]\n    p_opp_serve_win = probabilities[1]\n    p_serve_game_win = probabilities[2]\n    p_opp_serve_game_win = probabilities[3]\n\n    expected_score_serve = p_serve_game_win * (4*p_serve_win + 3*p_opp_serve_win)\n    expected_score_opp_serve = p_opp_serve_game_win*(4*p_opp_serve_win + 3*p_serve_win)\n\n    total_expected_score = expected_score_serve + expected_score_opp_serve\n    return total_expected_score\n\nprobabilities = np.random.random(4)\nprint(predict_match_score(probabilities))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01269581296284521,
      "p_css": 0.014273115206630533,
      "p_html": 0.009774502049888108,
      "p_java": 0.0006026898023791681,
      "p_javascript": 0.0011478195211989317,
      "p_matlab": 0.001224379691732178,
      "p_python": 0.9443581126012998,
      "p_sql": 0.003813655298627346,
      "p_typescript": 0.012109912865398961
    },
    {
      "text": "# Importing necessary modules\nimport requests\nfrom bs4 import BeautifulSoup\n\n# The URL to get data from\nurl = \"https://www.example.com\"\n\n# Making a request to the website and getting the response\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extracting the required data\ndata = soup.find_all('p')\n\n# Looping through the data and printing it out\nfor item in data:\n print(item.text)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 8.677513559610607e-16,
      "p_css": 0.28168677516524443,
      "p_html": 0.0028110463715057825,
      "p_java": 0.7129782223581332,
      "p_javascript": 1.4987286914401282e-05,
      "p_matlab": 1.462929222290424e-09,
      "p_python": 1.7934549884836044e-05,
      "p_sql": 1.697655297085603e-05,
      "p_typescript": 0.002474056252416378
    },
    {
      "text": "def search(string, search): \n\t# Create a Trie type datastructure \n\tt = {}\n\n\t# Put each character of the string in a lexicographic tree \n\tfor char in string: \n\t\tif char in t: \n\t\t\tt = t[char] \n\t\telse: \n\t\t\tt[char] = {}\n\t\t\tt = t[char] \n\n\t# Now search for the search string in the trie structure \n\tcursor = t \n\tfor char in search: \n\t\tif char in cursor: \n\t\t\tcursor = cursor[char] \n\t\telse: \n\t\t\treturn False\n\treturn True",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.86897628175946e-11,
      "p_css": 0.00013437894971722394,
      "p_html": 1.960814888129978e-05,
      "p_java": 0.9951303168466171,
      "p_javascript": 8.609200600262007e-09,
      "p_matlab": 5.2326252500656616e-06,
      "p_python": 0.004512612180785641,
      "p_sql": 0.0001342296709260008,
      "p_typescript": 6.36129199321641e-05
    },
    {
      "text": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport domoticz as d\nimport sys\nimport time\nsys.path.insert(0, '/opt/python-verisure/')\nimport verisure\nimport pickle\nimport pytz\nimport urllib3\nimport certifi\nfrom datetime import datetime\nfrom tzlocal import get_localzone\n\ndebug = False\n\ntry:\n    execfile(\"/etc/domoticz/scripts.conf\")\nexcept:\n    exec(open(\"/etc/domoticz/scripts.conf\").read())\n\nd.log(\"Getting status from Verisure...\")\n\nif int(time.time()) % frequency < 60 :\n\n\t#Login\n\ttry:\n\t\tf = open(mypagesSession, 'rb')\n\t\tmyPages = pickle.load(f)\n\t\tf.close()\n\texcept:\n\t\tmyPages = verisure.Session(email, verisurepass)\n\t\tmyPages.login()\n\t\tf = open(mypagesSession, 'wb')\n\t\tpickle.dump(myPages, f)\n\t\tf.close()\n\t\tif debug:\n\t\t\td.log(\"Loading file failed.\")\n\n\t#Get overview\n\ttry:\n\t\toverview = myPages.get_overview()\n\texcept:\n\t\tmyPages = verisure.Session(email, verisurepass)\n\t\tmyPages.login()\n\t\tf = open(mypagesSession, 'wb')\n\t\tpickle.dump(myPages, f)\n\t\tf.close()\n\t\toverview = myPages.get_overview()\n\t\tif debug:\n\t\t\td.log(\"Session was timed out\")\n\n\t#Alarm\n\tstatus = overview['armState']['statusType']\n\tif debug:\n\t\td.log(\"Verisure Alarm status: \", status )\n\tdevice = d.devices[atHome]\n\tif status == \"DISARMED\" or status == \"ARMED_HOME\":\n\t\tdevice.on()\n\telse:\n\t\tdevice.off()\n\n\t#Smartplugs\n\tfor i in overview['controlPlugs']:\n\t\tif debug:\n\t\t\td.log(\"Verisure Smartplug status for \" + i['area'].encode(\"utf-8\",\"ignore\") + \": \", i['currentState'] )\n\t\tdevice = d.devices[i['area'].encode(\"utf-8\",\"ignore\")]\n\t\tif i['currentState'] == \"ON\":\n\t\t\tdevice.on()\n\t\telse:\n\t\t\tdevice.off()\n\n\t#Climate\n\tfor i in overview['climateValues']:\n\t\tdevice = d.devices[i['deviceArea'].encode(\"utf-8\",\"ignore\")]\n\t\tdomlastupdate = datetime.strptime(device.last_update_string, '%Y-%m-%d %H:%M:%S')\n\t\tverilastupdate = datetime.strptime(i['time'][:-5], '%Y-%m-%dT%H:%M:%S')\n\t\tverilastupdate = verilastupdate.replace(tzinfo=pytz.UTC)\n\t\tverilastupdate = verilastupdate.astimezone(get_localzone())\n\t\tverilastupdate = verilastupdate.replace(tzinfo=None)\n\t\tif debug:\n\t\t\td.log(\"Domoticz last update of \" + device.name + \": \" + str(domlastupdate))\n\t\t\td.log(\"Verisure last update of \" + device.name + \": \" + str(verilastupdate))\n\n\t\tif verilastupdate > domlastupdate:\n\t\t\tif debug:\n\t\t\t\td.log(\"update domoticz climate device \" + device.name)\n\t\t\tif debug:\n\t\t\t\td.log(\"time: \" + i['time'] )\n\t\t\t\td.log(\"location: \" + i['deviceArea'].encode(\"utf-8\",\"ignore\") )\n\t\t\t\td.log(\"serial: \" + i['deviceLabel'] )\n\t\t\t\td.log(\"temperature: \" + str(i['temperature']))\n\t\t\tif 'humidity' in i:\n\t\t\t\tif debug:\n\t\t\t\t\td.log(\"humidity: \" + str(i['humidity']))\n\t\t\t\tif i['humidity'] < 20:\n\t\t\t\t\tcomf = 2\n\t\t\t\tif i['humidity'] >= 20 and i['humidity'] <= 35:\n\t\t\t\t\tcomf = 0\n\t\t\t\tif i['humidity'] > 35 and i['humidity'] <= 75:\n\t\t\t\t\tcomf = 1\n\t\t\t\tif i['humidity'] > 75:\n\t\t\t\t\tcomf = 3\n\t\t\t\turl = baseurl + \"type=command&param=udevice&idx=\" + climate[i['deviceArea'].encode(\"utf-8\",\"ignore\")] + \"&nvalue=0&svalue=\" + str(i['temperature']) + \";\" + str(i['humidity']) + \";\" + str(comf)\n\t\t\telse:\n\t\t\t\turl = baseurl + \"type=command&param=udevice&idx=\" + climate[i['deviceArea'].encode(\"utf-8\",\"ignore\")] + \"&nvalue=0&svalue=\" + str(i['temperature'])\n\n\t\t\tif debug:\n\t\t\t\td.log('URL: ' + url)\n\n\t\t\thttp = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())\n\t\t\tr = http.request('GET', url, timeout=2.5)\n\t\t\tif debug:\n\t\t\t\td.log(\"Status code: \" + str(r.status) + \"\\n\" + r.data)\n\t\t\tif r.status != 200:\n\t\t\t\td.log(\"Error updating temp in Domoticz. HTTP code: \" + str(r.status) + \" \" + r.data)\n\nelse:\n\tif debug:\n\t\td.log(\"Only runs every \" + str(frequency/60) + \" min.\")\n\nd.log(\"done getting status from Verisure\")\n",
      "y_true": "sql",
      "pred_label": "javascript",
      "p_bash": 6.3826994579435305e-09,
      "p_css": 0.00032530955076473555,
      "p_html": 0.0002312523507981507,
      "p_java": 0.0054296457112961004,
      "p_javascript": 0.9920688488410586,
      "p_matlab": 0.0012595692328663587,
      "p_python": 0.0005405428728556321,
      "p_sql": 0.00013046405334300151,
      "p_typescript": 1.4361004317798345e-05
    },
    {
      "text": "def search_word(word, dictionary):\n    if word in dictionary.keys():\n        return dictionary[word]\n    else:\n        return None\n\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\n\nword = 'hello'\n\nresult = search_word(word, dictionary)\n\nif result:\n    print('Word found in dictionary: ' + result)\n\nelse:\n    print('Word not found in dictionary.')",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0034262164440284145,
      "p_css": 0.49293887278568316,
      "p_html": 0.0012442587113089102,
      "p_java": 8.234638319173894e-07,
      "p_javascript": 1.1443776889364814e-05,
      "p_matlab": 0.00010139351752235011,
      "p_python": 0.5005572215511,
      "p_sql": 0.00148204996376542,
      "p_typescript": 0.0002377197858705078
    },
    {
      "text": "import random\n\ndef play_game(player1, player2):\n choices = ['rock', 'paper', 'scissors']\n player1_choice = random.choice(choices)\n player2_choice = random.choice(choices)\n\n # If player 1 chooses rock\n if player1_choice == 'rock':\n # and player 2 chooses scissors, player 1 wins\n if player2_choice == 'scissors':\n print('Player 1 wins!')\n # and player 2 chooses paper, player 2 wins\n elif player2_choice == 'paper':\n print('Player 2 wins!')\n # otherwise it's a tie\n else:\n print('It\\'s a tie!')\n\n # If player 1 chooses paper\n elif player1_choice == 'paper':\n # and player 2 chooses rock, player 1 wins\n if player2_choice == 'rock':\n print('Player 1 wins!')\n # and player 2 chooses scissors, player 2 wins\n elif player2_choice == 'scissors':\n print('Player 2 wins!')\n # otherwise it's a tie\n else:\n print('It\\'s a tie!')\n\n # If player 1 chooses scissors\n elif player1_choice == 'scissors':\n # and player 2 chooses rock, player 2 wins\n if player2_choice == 'rock':\n print('Player 2 wins!')\n # and player 2 chooses paper, player 1 wins\n elif player2_choice == 'paper':\n print('Player 1 wins!')\n # otherwise it's a tie\n else:\n print('It\\'s a tie!')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005114277621327074,
      "p_css": 0.13947169887888577,
      "p_html": 0.015055415802037534,
      "p_java": 0.001489229533773802,
      "p_javascript": 0.005393897798460776,
      "p_matlab": 0.025645469061898424,
      "p_python": 0.5706263205216342,
      "p_sql": 0.02296550154936555,
      "p_typescript": 0.21423818923261673
    },
    {
      "text": "def determine_grade(marks):\n    # Determine the average mark\n    avg = (marks['math'] + marks['history'] + marks['english'])/3\n    \n    # If the average mark is greater than or equal to 90, the student's grade is A \n    if avg >= 90:\n        return 'A'\n    # If the average mark is greater than or equal to 80, the student's grade is B \n    elif avg >= 80:\n        return 'B'\n    # If the average mark is greater than or equal to 70, the student's grade is C \n    elif avg >= 70:\n        return 'C'\n    # If the average mark is greater than or equal to 60, the student's grade is D \n    elif avg >= 60:\n        return 'D'\n    # Anything less than 60 is an F \n    else:\n        return 'F'",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 7.49160899444053e-05,
      "p_css": 0.0007172756535975488,
      "p_html": 0.00016410666110088805,
      "p_java": 1.2826893366785183e-05,
      "p_javascript": 0.0005458091142394769,
      "p_matlab": 0.000138498138362424,
      "p_python": 0.002431211017885404,
      "p_sql": 9.2056273532626e-05,
      "p_typescript": 0.9958233001579704
    },
    {
      "text": "class Student:\n\n    def __init__(self, student_id, name):\n        self.student_id = student_id\n        self.name = name\n        \n    def get_details(self):\n        return self.student_id, self.name",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016854147190424004,
      "p_css": 0.005747851152891102,
      "p_html": 0.04276751642766558,
      "p_java": 0.28234324474976175,
      "p_javascript": 4.947046545228041e-07,
      "p_matlab": 2.886320684938214e-05,
      "p_python": 0.6518795280505653,
      "p_sql": 0.014317648400184044,
      "p_typescript": 0.0012294385883860682
    },
    {
      "text": "FROM python:3.7\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nEXPOSE 8080\nCOPY . /usr/src/app\nRUN pip install -r requirements.txt\nENTRYPOINT [\"python\", \"scrape.py\"]",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999679213632648,
      "p_css": 2.579664660375741e-06,
      "p_html": 2.6728527693535802e-05,
      "p_java": 1.0340551552824662e-10,
      "p_javascript": 9.807565750332824e-07,
      "p_matlab": 2.3654790858319065e-07,
      "p_python": 6.898289484950309e-07,
      "p_sql": 6.827765019205908e-07,
      "p_typescript": 1.8043104184412336e-07
    },
    {
      "text": "num1 = int(input())\nnum2 = int(input())\nsum_of_nums\nprint(sum_of_nums)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0012988293762158313,
      "p_css": 4.94467987954812e-05,
      "p_html": 9.381354305575956e-05,
      "p_java": 0.9899659957327004,
      "p_javascript": 9.923945291456583e-06,
      "p_matlab": 8.115893290957563e-11,
      "p_python": 0.00857662549827921,
      "p_sql": 3.043418136159672e-06,
      "p_typescript": 2.3216063668076573e-06
    },
    {
      "text": "unsortedDict = {\"Red\":120,\"Blue\":90,\"Yellow\":50,\"Purple\":75}\n\nsortedList = sorted(unsortedDict.items(), key=lambda x: x[1])\nprint(sortedList)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0059636061757598145,
      "p_css": 0.6641311934456855,
      "p_html": 0.09635254145039235,
      "p_java": 0.001204439274779597,
      "p_javascript": 0.015790152835170955,
      "p_matlab": 0.015100125689797277,
      "p_python": 0.19595092910054043,
      "p_sql": 0.00423730198540394,
      "p_typescript": 0.0012697100424700842
    },
    {
      "text": "# Import necessary libraries\nimport flask\nfrom flask import request, jsonify\nfrom flask_pymongo import PyMongo\n\n# Create the Flask app\napp = Flask(__name__)\n\n# Connect to the MongoDB instance\nmongo = PyMongo(app)\n\n# Create the route for accessing the NoSQL database\n@app.route('/getData', methods=['GET'])\ndef get_data():\n # Query the database\n data = mongo.db.yourDatabase.find({})\n\n # Create an empty list and store the results in a list\n output = []\n for q in data:\n  output.append({\n   'id': q['id'],\n   'name': q['name'],\n   'age': q['age']\n  })\n\n# Return the results as a JSON Object\nreturn jsonify({'result': output})",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.001662567122779322,
      "p_css": 0.9344063101400032,
      "p_html": 0.001777967499628711,
      "p_java": 3.5423974346302073e-06,
      "p_javascript": 3.087887956253414e-05,
      "p_matlab": 1.052343191652904e-05,
      "p_python": 0.0007409760915887371,
      "p_sql": 0.0016091010043743185,
      "p_typescript": 0.05975813343271205
    },
    {
      "text": "import json\n\ndata = {\n 'name': 'Alice',\n 'age': 22,\n 'hobbies': ['coding', 'guitar']\n}\n\njson_data = json.dumps(data)\n\nprint(json_data)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 3.598843049143255e-05,
      "p_css": 0.998553704645927,
      "p_html": 0.00022772108605218993,
      "p_java": 3.460918524137807e-05,
      "p_javascript": 1.4456614947582788e-06,
      "p_matlab": 7.831055046431989e-06,
      "p_python": 0.0010895495130408357,
      "p_sql": 1.6510040535742673e-05,
      "p_typescript": 3.2640382170234206e-05
    },
    {
      "text": "for start in range(10):\n  print(start)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.968777136034235e-05,
      "p_css": 2.9705440225851088e-05,
      "p_html": 0.00011683728284327358,
      "p_java": 1.993419884138394e-06,
      "p_javascript": 3.9954098028420826e-06,
      "p_matlab": 0.25250394159885986,
      "p_python": 0.7472911033381026,
      "p_sql": 2.6916387585345066e-06,
      "p_typescript": 3.0044100162758417e-05
    },
    {
      "text": "import random\n\n# Create a 3x3x3 cube\ncube = [[[0] * 3 for _ in range(3)] for _ in range(3)]\n\n# Fill the cube with random colors\ncolors = [1, 2, 3, 4, 5, 6]\nfor plane in cube:\n for row in plane:\n for i in range(3):\n row[i] = random.choice(colors)\n\n# Print out the cube configuation\nfor plane in cube:\n print(plane)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.013064044112031e-05,
      "p_css": 0.00016296638876082132,
      "p_html": 0.001957473169511138,
      "p_java": 8.802178689253243e-05,
      "p_javascript": 0.0001644763166361329,
      "p_matlab": 0.6335231669811705,
      "p_python": 0.358472391444664,
      "p_sql": 0.004330842180933929,
      "p_typescript": 0.0012105310909899
    },
    {
      "text": "def to_dict(lst): \n    # Initialize a new dictionary \n    new_dict = {}\n      \n    # Iterate over the list and assign the square root of each element as value  \n    for item in lst:\n        new_dict[item] = item**0.5\n      \n    # Return the dictionary  \n    return new_dict",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0008141889191282085,
      "p_css": 0.7441263253390805,
      "p_html": 0.029213945683241198,
      "p_java": 0.00012801612893989425,
      "p_javascript": 0.01246017628304923,
      "p_matlab": 0.037062864130729685,
      "p_python": 0.04214810893873968,
      "p_sql": 0.0015885421790754579,
      "p_typescript": 0.13245783239801615
    },
    {
      "text": "def print_list(list1):\n    for element in list1:\n        print(element)\n\nlist1 = [1,2,3,4,5]\n\nprint_list(list1)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.577818474600954e-05,
      "p_css": 0.0002922695313066834,
      "p_html": 0.00010520892600583871,
      "p_java": 1.695227717706285e-05,
      "p_javascript": 5.145291195549972e-05,
      "p_matlab": 0.861692117252315,
      "p_python": 0.13760619997982435,
      "p_sql": 3.939584523353739e-07,
      "p_typescript": 0.0001696269782172525
    },
    {
      "text": "import random \nimport math\n\ndef random_mixture(mean1, mean2, stddev1, stddev2, N):\n    data = []\n    for _ in range(N):\n        if random.random() < 0.5:\n            data.append(random.normalvariate(mean1, stddev1))\n        else:\n            data.append(random.normalvariate(mean2, stddev2))\n    return data",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.00012982359564108379,
      "p_css": 0.008675756885274152,
      "p_html": 0.004420150110234278,
      "p_java": 2.8100802577172796e-06,
      "p_javascript": 2.7664086580857722e-05,
      "p_matlab": 0.1771251230831263,
      "p_python": 0.34317671859335913,
      "p_sql": 0.46586830071806534,
      "p_typescript": 0.0005736528474611415
    },
    {
      "text": "def factorial(num):\n    result = 1\n    for i in range(1, num+1):\n        result *= i\n    return result\n\nn = int(input(\"Enter an Integer: \"))\nprint(factorial(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.635972812872214e-06,
      "p_css": 2.0287290995083107e-07,
      "p_html": 6.8584764070098105e-06,
      "p_java": 9.898794833724379e-06,
      "p_javascript": 7.339513831676549e-07,
      "p_matlab": 3.678863078192246e-05,
      "p_python": 0.9999387780182825,
      "p_sql": 3.620051495261764e-06,
      "p_typescript": 4.832310938157618e-07
    },
    {
      "text": "def create_html_table(list_of_tuples):\n    html_string = \"<html>\\n<body>\\n<table>\\n\"\n    # Generate HTML table header\n    html_string += \"<tr>\\n\"\n    for key in list_of_tuples[0].keys():\n        html_string += \"<th>{}</th>\\n\".format(key)\n    html_string += \"</tr>\\n\"\n    # Generate HTML table content\n    for tuple_ in list_of_tuples:\n        html_string += \"<tr>\\n\"\n        for data in tuple_:\n            html_string += \"<td>{}</td>\\n\".format(data)\n        html_string += \"</tr>\\n\"\n    # Close the table\n    html_string += \"</table>\\n</body>\\n</html>\"\n\n    return html_string\n\nif __name__ == \"__main__\":\n    list_of_tuples = [('First', 'John'), ('Last', 'Doe'), ('Age', 20)]\n    html_string = create_html_table(list_of_tuples)\n    print(html_string)",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 2.0563879724255425e-06,
      "p_css": 9.178228694499065e-05,
      "p_html": 0.9998815579154933,
      "p_java": 2.250075242090641e-07,
      "p_javascript": 8.170610899277069e-06,
      "p_matlab": 1.3984276327701555e-06,
      "p_python": 1.348074804089761e-05,
      "p_sql": 9.684891744732204e-07,
      "p_typescript": 3.6012631775802155e-07
    },
    {
      "text": "def sort_strings_by_length(strings):\n    # Sort strings by length in ascending order\n    strings.sort(key=len)\n    return strings",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001241439123446917,
      "p_css": 0.024223317804924212,
      "p_html": 0.001743720421215069,
      "p_java": 0.00015327900281969552,
      "p_javascript": 0.02631505323402874,
      "p_matlab": 0.00041794382945624093,
      "p_python": 0.936399450045926,
      "p_sql": 0.009151772002176324,
      "p_typescript": 0.0003540245360069421
    },
    {
      "text": "import random\nfrom textgenrnn import textgenrnn\n\ntextgen = textgenrnn()\n\nseed_phrase = 'The quick brown '\nseed_words = seed_phrase.split() # split seed phrase into list\n\n# Generate text consisting of 20 words\ngenerated_text = textgen.generate(20, return_as_list=True, temperature=0.5, prefix=seed_words)[0].strip()\n\n# Print the generated text\nprint(generated_text)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1023805684951226,
      "p_css": 0.10131766950931569,
      "p_html": 0.004332500746053223,
      "p_java": 9.755321795624372e-06,
      "p_javascript": 0.002888898220456452,
      "p_matlab": 9.463556738474354e-05,
      "p_python": 0.6983332028694406,
      "p_sql": 0.0764044101892758,
      "p_typescript": 0.014238359081155252
    },
    {
      "text": "import json\n\ndictionary = {\n   \"name\": \"John\",\n   \"age\": 30,\n   \"car\": [\"Ford\", \"BMW\", \"Fiat\"]\n}\n\njson_data = json.dumps(dictionary)\nprint(json_data) // Output: {\"name\": \"John\", \"age\": 30, \"car\": [\"Ford\", \"BMW\", \"Fiat\"]}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.8463837143531212e-05,
      "p_css": 0.9975116758129661,
      "p_html": 1.4620060463395027e-05,
      "p_java": 0.0024074948951633055,
      "p_javascript": 5.491641973000654e-10,
      "p_matlab": 4.3211936947830137e-07,
      "p_python": 4.620188641176251e-05,
      "p_sql": 4.784898999029593e-07,
      "p_typescript": 6.32349418425313e-07
    },
    {
      "text": "import numpy as np\n\nrandom_matrix = np.random.randint(1, 100, size=(5, 5))\nprint(random_matrix)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.025839884125177414,
      "p_css": 0.013551940237340056,
      "p_html": 0.007548444232344965,
      "p_java": 0.00012007576132130911,
      "p_javascript": 0.0002288874554844843,
      "p_matlab": 0.00014370952688095036,
      "p_python": 0.9411875424132419,
      "p_sql": 0.0013366132037966388,
      "p_typescript": 0.010042903044412391
    },
    {
      "text": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data\ndata = pd.read_csv('housing.csv')\n# Split into X and y\nX = data.drop('price', axis=1)\ny = data['price']\n# Initialize the model\nmodel = LinearRegression()\n# Fit the model to the training data\nmodel.fit(X, y)\n# Estimate future prices using the model\npredictions = model.predict(X)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.6504267594955206,
      "p_css": 0.03507206722927271,
      "p_html": 0.0011234694463121658,
      "p_java": 1.4914829758934019e-06,
      "p_javascript": 9.283057941969433e-05,
      "p_matlab": 1.8748826466082922e-06,
      "p_python": 0.02985889395978343,
      "p_sql": 5.06105790415026e-08,
      "p_typescript": 0.2834225623134897
    },
    {
      "text": "import time\ndef measure_performance(fn, data):\n start = time.perf_counter()\n result = fn(*data)\n elapsed = 1000 * (time.perf_counter() - start) \n return result, elapsed\n\ndef add(x, y):\n return x + y\n\ndata = (3, 5)\nresult, elapsed = measure_performance(add, data)\nprint('Result:', result)\nprint('Elapsed time (ms):', elapsed)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.559527242273029e-05,
      "p_css": 0.018937674972523647,
      "p_html": 0.0005427885544448231,
      "p_java": 0.00016558715810587662,
      "p_javascript": 3.677827295689969e-05,
      "p_matlab": 1.0913705488513142e-07,
      "p_python": 0.9774991835488965,
      "p_sql": 0.002692841619549062,
      "p_typescript": 0.00010944146404540244
    },
    {
      "text": "my_dict = {\n    \"word\": \"hello\"\n}",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9713188497027877,
      "p_css": 0.0036357789335793016,
      "p_html": 0.0009185824504558021,
      "p_java": 3.8205224291772176e-10,
      "p_javascript": 0.007987557078117727,
      "p_matlab": 2.850659821672407e-05,
      "p_python": 0.015905611899935397,
      "p_sql": 3.293905767656202e-05,
      "p_typescript": 0.00017217389717854453
    },
    {
      "text": "class CalcListSum:\n  def __init__(self, numbers):\n    self.numbers = numbers\n\n  def get_sum(self):\n    sum = 0\n    for num in self.numbers:\n      sum += num\n    return sum \n\nnums = [2, 3, 5, 7]\ncalc_sum = CalcListSum(nums)\nsum_of_nums = calc_sum.get_sum()\nprint(sum_of_nums)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004943150746724861,
      "p_css": 0.00030269098221264324,
      "p_html": 0.039758156731356534,
      "p_java": 0.17143267636734255,
      "p_javascript": 0.0012373443640846134,
      "p_matlab": 0.0015577033229660772,
      "p_python": 0.7588631881824588,
      "p_sql": 0.0251762990897627,
      "p_typescript": 0.0011776258851434827
    },
    {
      "text": "<html>\n    <head>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n                <th>City</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>20</td>\n                <td>New York</td>\n            </tr>\n            <tr>\n                <td>Jane</td>\n                <td>25</td>\n                <td>San Francisco</td>\n            </tr>\n        </table>\n    </body>\n</html>",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 6.155469192887103e-11,
      "p_css": 1.327622833241635e-09,
      "p_html": 0.9999999981351553,
      "p_java": 5.4768362369116966e-11,
      "p_javascript": 4.872010933210693e-11,
      "p_matlab": 2.073414431256488e-11,
      "p_python": 3.1257430840413653e-10,
      "p_sql": 3.8870131440257054e-11,
      "p_typescript": 3.117326338214284e-16
    },
    {
      "text": "class Student:\n def __init__(self, assignments, tests, projects):\n self.assignments = assignments\n self.tests = tests\n self.projects = projects\n\ndef calculate_grade(self):\n total = (self.assignments * 0.3) + (self.tests * 0.4) + (self.projects * 0.3)\n return total",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00021781495509200333,
      "p_css": 0.019123212424933818,
      "p_html": 0.17270500833775845,
      "p_java": 2.0640931246302787e-05,
      "p_javascript": 4.980148586633626e-05,
      "p_matlab": 1.024178576741928e-05,
      "p_python": 0.7047245414520452,
      "p_sql": 0.10197765427934866,
      "p_typescript": 0.0011710843479416943
    },
    {
      "text": "class MeanMedianCalculator:\n    def __init__(self, data):\n        self.data = data\n    \n    def mean(self):\n        return sum(self.data) / len(self.data)\n    \n    def median(self):\n        self.data.sort()\n        return self.data[(len(self.data)-1) // 2]\n\ncalculator = MeanMedianCalculator([2, 4, 6, 8, 10])\nprint(\"Mean is {}, Median is {}\".format(calculator.mean(), calculator.median()))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04883310867992874,
      "p_css": 0.005910566908884221,
      "p_html": 4.8227186976621554e-05,
      "p_java": 2.3018525243484783e-06,
      "p_javascript": 1.205606564480554e-05,
      "p_matlab": 2.2825054593131128e-07,
      "p_python": 0.9295910406529652,
      "p_sql": 0.015257361844520046,
      "p_typescript": 0.00034510855801019415
    },
    {
      "text": "def searchWord(text, word):\n  return word in text\n\ntext = \"the quick brown fox jumps over the lazy dog\"\nword = \"fox\"\n\nif searchWord(text, word):\n  print(\"The word is found in the text string.\")\nelse:\n  print(\"The word is not found in the text string.\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016489972555582925,
      "p_css": 0.046702952260844324,
      "p_html": 0.0011377223050294029,
      "p_java": 0.0016161550928290795,
      "p_javascript": 0.0002562627060901068,
      "p_matlab": 0.00014521403328205795,
      "p_python": 0.6074070860624309,
      "p_sql": 0.1333102272526439,
      "p_typescript": 0.20777538303129206
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup \n\nurl = \"https://www.imdb.com/chart/top\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nmovies = soup.find_all('td', class_='titleColumn')\n\n# Create a list of top 100 movies\ntop_movies = []\n\nfor movie in movies:\n  # get movie title\n  title = movie.a.text\n  # get movie release date\n  release_date = movie.span.text\n  # get movie description\n  movie_page = requests.get(f'https://www.imdb.com{movie.a[\"href\"]}')\n  movie_soup = BeautifulSoup(movie_page.content, 'html.parser')\n  description = movie_soup.find('p', class_='text-muted').text.strip()\n\n  top_movies.append({\n    'title': title,\n    'release_date': release_date,\n    'description': description\n    })",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 7.162341303374324e-11,
      "p_css": 0.14418906211678165,
      "p_html": 0.8538025408087477,
      "p_java": 0.0019424358174158422,
      "p_javascript": 4.5990030320037595e-06,
      "p_matlab": 1.1253392119455813e-06,
      "p_python": 1.8362879799312377e-05,
      "p_sql": 3.6348589773506757e-05,
      "p_typescript": 5.525373614625472e-06
    },
    {
      "text": "def get_nth_prime(n): \n    prime_nums = [2] \n    check_num = 3 \n    while len(prime_nums) < n: \n        is_prime = True \n        for i in prime_nums: \n            if check_num % i == 0: \n                is_prime = False \n                break \n        if is_prime: \n            prime_nums.append(check_num) \n        check_num += 2 \n    return prime_nums[-1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0052117882154914365,
      "p_css": 0.009990233062953106,
      "p_html": 0.015572642500354303,
      "p_java": 0.000761079936547191,
      "p_javascript": 0.0023256637750221237,
      "p_matlab": 0.2601623902993067,
      "p_python": 0.6991942961558176,
      "p_sql": 0.0016378268383728163,
      "p_typescript": 0.005144079216134559
    },
    {
      "text": "def sort_arr(arr):\n    n = len(arr)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]  \n    return arr\n\nresult = sort_arr([9, 4, 6, 1, 3, 7])\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.456039542687504e-07,
      "p_css": 6.800026932375491e-07,
      "p_html": 2.320264336028102e-07,
      "p_java": 4.085180115512619e-08,
      "p_javascript": 7.134746144826052e-08,
      "p_matlab": 0.6628548663354571,
      "p_python": 0.337143685672918,
      "p_sql": 4.8983837633060746e-08,
      "p_typescript": 2.2917544361926473e-07
    },
    {
      "text": "def calculate_tax(price):\n tax_rate = 0.135\n return price * tax_rate",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004883030948914011,
      "p_css": 0.10172357848452808,
      "p_html": 0.005997355937632142,
      "p_java": 0.0010995225229637226,
      "p_javascript": 0.0029997893960900697,
      "p_matlab": 0.0017575226369581805,
      "p_python": 0.8721350700164389,
      "p_sql": 0.0023242676474109427,
      "p_typescript": 0.007079862409063799
    },
    {
      "text": "def search(query):\n    results = []\n    for document in documents:\n        if query in document:\n            results.append(document)\n    return results",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 2.68076338804413e-05,
      "p_css": 0.004754213565801883,
      "p_html": 0.7690761471430647,
      "p_java": 0.00037760592157566494,
      "p_javascript": 0.07105450633744737,
      "p_matlab": 0.08877574121072389,
      "p_python": 0.05960144857348216,
      "p_sql": 0.00013290484787161215,
      "p_typescript": 0.006200624766152157
    },
    {
      "text": "import random\n\n#list of possible answers \nanswers = [\"That's a great question!\", \n    \"I'm not sure, but I'll try to find out!\", \n    \"That sounds interesting, tell me more!\", \n    \"I have no idea, sorry!\"]\n\ndef chatbot_response(user_input): \n    # get a random response from answers\n    response = random.choice(answers)\n    return response\n\n# simple loop to keep the conversation going\nwhile True:\n    user_input = input('You: ')\n    if user_input == 'Goodbye':\n        print('Chatbot: Goodbye!')\n        break\n    else:\n        print('Chatbot: ', chatbot_response(user_input))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012825670796030079,
      "p_css": 0.19064943376080293,
      "p_html": 0.0077779038071878635,
      "p_java": 0.002013098045349716,
      "p_javascript": 0.016684818883762657,
      "p_matlab": 0.001219425752090007,
      "p_python": 0.6461735844899311,
      "p_sql": 0.11985722030866024,
      "p_typescript": 0.014341947872612207
    },
    {
      "text": "def generate_web_page(html, css):\n    html = html.encode('utf-8')\n    css = css.encode('utf-8')\n    html = html.replace(\"<style>\", f\"<style>{css}\")\n    page = f\"\"\"<!DOCTYPE html>\n    <html>\n    <head>\n    <title>Generated web page</title>\n    </head>\n    <body>\n    {html}\n    </body>\n    </html>\"\"\"\n    return page",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 5.050729336620118e-27,
      "p_css": 2.252587576094104e-22,
      "p_html": 1.0,
      "p_java": 7.713123405079395e-20,
      "p_javascript": 7.292471035061215e-22,
      "p_matlab": 4.4239842754952485e-25,
      "p_python": 6.417463224788913e-25,
      "p_sql": 1.3018119662738334e-25,
      "p_typescript": 3.2893404711135526e-21
    },
    {
      "text": "def remove_spaces(s): \n   return s.replace(' ', '') \n\ns = input(\"Enter a string: \")\nprint(remove_spaces(s))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.7079408475180472e-05,
      "p_css": 0.003830318280094907,
      "p_html": 0.001194990690332409,
      "p_java": 0.019445612649547684,
      "p_javascript": 1.0106705288060759e-06,
      "p_matlab": 8.467648727740682e-06,
      "p_python": 0.971921451628778,
      "p_sql": 0.0035132671143328483,
      "p_typescript": 6.780190918231041e-05
    },
    {
      "text": "def findSum(n): \n    sum = 0\n    for num in range(0, n+1):\n        sum += num \n    return sum\n\nn = 10\nsum_of_natural_num = findSum(n)\nprint(sum_of_natural_num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.83020889643709e-09,
      "p_css": 1.1110952615910546e-11,
      "p_html": 3.330602290333211e-08,
      "p_java": 2.8639377821411237e-08,
      "p_javascript": 1.2563245427891019e-09,
      "p_matlab": 0.9999996949792438,
      "p_python": 2.324844731517847e-07,
      "p_sql": 3.0452992643553746e-09,
      "p_typescript": 3.4479387351481334e-09
    },
    {
      "text": "import json\nimport os\nimport random\nimport sys\nfrom subprocess import Popen, PIPE\nfrom urllib.parse import urlencode\n\nfrom OpenSSL import SSL\nfrom twisted.web.server import Site, NOT_DONE_YET\nfrom twisted.web.resource import Resource\nfrom twisted.web.static import File\nfrom twisted.web.test.test_webclient import PayloadResource\nfrom twisted.web.server import GzipEncoderFactory\nfrom twisted.web.resource import EncodingResourceWrapper\nfrom twisted.web.util import redirectTo\nfrom twisted.internet import reactor, ssl\nfrom twisted.internet.task import deferLater\n\nfrom scrapy.utils.python import to_bytes, to_unicode\nfrom scrapy.utils.ssl import SSL_OP_NO_TLSv1_3\n\n\ndef getarg(request, name, default=None, type=None):\n    if name in request.args:\n        value = request.args[name][0]\n        if type is not None:\n            value = type(value)\n        return value\n    else:\n        return default\n\n\nclass LeafResource(Resource):\n\n    isLeaf = True\n\n    def deferRequest(self, request, delay, f, *a, **kw):\n        def _cancelrequest(_):\n            # silence CancelledError\n            d.addErrback(lambda _: None)\n            d.cancel()\n\n        d = deferLater(reactor, delay, f, *a, **kw)\n        request.notifyFinish().addErrback(_cancelrequest)\n        return d\n\n\nclass Follow(LeafResource):\n\n    def render(self, request):\n        total = getarg(request, b\"total\", 100, type=int)\n        show = getarg(request, b\"show\", 1, type=int)\n        order = getarg(request, b\"order\", b\"desc\")\n        maxlatency = getarg(request, b\"maxlatency\", 0, type=float)\n        n = getarg(request, b\"n\", total, type=int)\n        if order == b\"rand\":\n            nlist = [random.randint(1, total) for _ in range(show)]\n        else:  # order == \"desc\"\n            nlist = range(n, max(n - show, 0), -1)\n\n        lag = random.random() * maxlatency\n        self.deferRequest(request, lag, self.renderRequest, request, nlist)\n        return NOT_DONE_YET\n\n    def renderRequest(self, request, nlist):\n        s = \"\"\"<html> <head></head> <body>\"\"\"\n        args = request.args.copy()\n        for nl in nlist:\n            args[b\"n\"] = [to_bytes(str(nl))]\n            argstr = urlencode(args, doseq=True)\n            s += \"<a href='/follow?%s'>follow %d</a><br>\" % (argstr, nl)\n        s += \"\"\"</body>\"\"\"\n        request.write(to_bytes(s))\n        request.finish()\n\n\nclass Delay(LeafResource):\n\n    def render_GET(self, request):\n        n = getarg(request, b\"n\", 1, type=float)\n        b = getarg(request, b\"b\", 1, type=int)\n        if b:\n            # send headers now and delay body\n            request.write('')\n        self.deferRequest(request, n, self._delayedRender, request, n)\n        return NOT_DONE_YET\n\n    def _delayedRender(self, request, n):\n        request.write(to_bytes(\"Response delayed for %0.3f seconds\\n\" % n))\n        request.finish()\n\n\nclass Status(LeafResource):\n\n    def render_GET(self, request):\n        n = getarg(request, b\"n\", 200, type=int)\n        request.setResponseCode(n)\n        return b\"\"\n\n\nclass Raw(LeafResource):\n\n    def render_GET(self, request):\n        request.startedWriting = 1\n        self.deferRequest(request, 0, self._delayedRender, request)\n        return NOT_DONE_YET\n    render_POST = render_GET\n\n    def _delayedRender(self, request):\n        raw = getarg(request, b'raw', b'HTTP 1.1 200 OK\\n')\n        request.startedWriting = 1\n        request.write(raw)\n        request.channel.transport.loseConnection()\n        request.finish()\n\n\nclass Echo(LeafResource):\n\n    def render_GET(self, request):\n        output = {\n            'headers': dict(\n                (to_unicode(k), [to_unicode(v) for v in vs])\n                for k, vs in request.requestHeaders.getAllRawHeaders()),\n            'body': to_unicode(request.content.read()),\n        }\n        return to_bytes(json.dumps(output))\n    render_POST = render_GET\n\n\nclass RedirectTo(LeafResource):\n\n    def render(self, request):\n        goto = getarg(request, b'goto', b'/')\n        # we force the body content, otherwise Twisted redirectTo()\n        # returns HTML with <meta http-equiv=\"refresh\"\n        redirectTo(goto, request)\n        return b'redirecting...'\n\n\nclass Partial(LeafResource):\n\n    def render_GET(self, request):\n        request.setHeader(b\"Content-Length\", b\"1024\")\n        self.deferRequest(request, 0, self._delayedRender, request)\n        return NOT_DONE_YET\n\n    def _delayedRender(self, request):\n        request.write(b\"partial content\\n\")\n        request.finish()\n\n\nclass Drop(Partial):\n\n    def _delayedRender(self, request):\n        abort = getarg(request, b\"abort\", 0, type=int)\n        request.write(b\"this connection will be dropped\\n\")\n        tr = request.channel.transport\n        try:\n            if abort and hasattr(tr, 'abortConnection'):\n                tr.abortConnection()\n            else:\n                tr.loseConnection()\n        finally:\n            request.finish()\n\n\nclass ArbitraryLengthPayloadResource(LeafResource):\n\n    def render(self, request):\n        return request.content.read()\n\n\nclass Root(Resource):\n\n    def __init__(self):\n        Resource.__init__(self)\n        self.putChild(b\"status\", Status())\n        self.putChild(b\"follow\", Follow())\n        self.putChild(b\"delay\", Delay())\n        self.putChild(b\"partial\", Partial())\n        self.putChild(b\"drop\", Drop())\n        self.putChild(b\"raw\", Raw())\n        self.putChild(b\"echo\", Echo())\n        self.putChild(b\"payload\", PayloadResource())\n        self.putChild(b\"xpayload\", EncodingResourceWrapper(PayloadResource(), [GzipEncoderFactory()]))\n        self.putChild(b\"alpayload\", ArbitraryLengthPayloadResource())\n        try:\n            from tests import tests_datadir\n            self.putChild(b\"files\", File(os.path.join(tests_datadir, 'test_site/files/')))\n        except Exception:\n            pass\n        self.putChild(b\"redirect-to\", RedirectTo())\n\n    def getChild(self, name, request):\n        return self\n\n    def render(self, request):\n        return b'Scrapy mock HTTP server\\n'\n\n\nclass MockServer():\n\n    def __enter__(self):\n        from scrapy.utils.test import get_testenv\n\n        self.proc = Popen([sys.executable, '-u', '-m', 'tests.mockserver'],\n                          stdout=PIPE, env=get_testenv())\n        http_address = self.proc.stdout.readline().strip().decode('ascii')\n        https_address = self.proc.stdout.readline().strip().decode('ascii')\n\n        self.http_address = http_address\n        self.https_address = https_address\n\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.proc.kill()\n        self.proc.communicate()\n\n    def url(self, path, is_secure=False):\n        host = self.http_address.replace('0.0.0.0', '127.0.0.1')\n        if is_secure:\n            host = self.https_address\n        return host + path\n\n\ndef ssl_context_factory(keyfile='keys/localhost.key', certfile='keys/localhost.crt', cipher_string=None):\n    factory = ssl.DefaultOpenSSLContextFactory(\n         os.path.join(os.path.dirname(__file__), keyfile),\n         os.path.join(os.path.dirname(__file__), certfile),\n         )\n    if cipher_string:\n        ctx = factory.getContext()\n        # disabling TLS1.2+ because it unconditionally enables some strong ciphers\n        ctx.set_options(SSL.OP_CIPHER_SERVER_PREFERENCE | SSL.OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_3)\n        ctx.set_cipher_list(to_bytes(cipher_string))\n    return factory\n\n\nif __name__ == \"__main__\":\n    root = Root()\n    factory = Site(root)\n    httpPort = reactor.listenTCP(0, factory)\n    contextFactory = ssl_context_factory()\n    httpsPort = reactor.listenSSL(0, factory, contextFactory)\n\n    def print_listening():\n        httpHost = httpPort.getHost()\n        httpsHost = httpsPort.getHost()\n        httpAddress = 'http://%s:%d' % (httpHost.host, httpHost.port)\n        httpsAddress = 'https://%s:%d' % (httpsHost.host, httpsHost.port)\n        print(httpAddress)\n        print(httpsAddress)\n\n    reactor.callWhenRunning(print_listening)\n    reactor.run()\n",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 0.0612875232714236,
      "p_css": 0.08351914569133209,
      "p_html": 0.845743863346274,
      "p_java": 2.8409507930294055e-05,
      "p_javascript": 2.9350074936368123e-06,
      "p_matlab": 2.3282195238692785e-08,
      "p_python": 0.0007394745016632157,
      "p_sql": 0.008673227760594834,
      "p_typescript": 5.3976310930720815e-06
    },
    {
      "text": "import curses\n\ndef main(screen):\n clock = curses.newwin(5, 40, 0, 0)\n clock.box()\n\n while True:\n     clock.addstr(1, 1, time.ctime())\n     clock.refresh()\n     time.sleep(1)\n\ncurses.wrapper(main)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.25214444421586757,
      "p_css": 0.0800943520449712,
      "p_html": 0.06371913243301638,
      "p_java": 0.002557854342620426,
      "p_javascript": 0.005898960718942992,
      "p_matlab": 0.0007374342564414372,
      "p_python": 0.5704822275062458,
      "p_sql": 0.01538830833710533,
      "p_typescript": 0.00897728614478893
    },
    {
      "text": "def closest_pair(points):\n\n    min_distance = float(\"inf\")\n    min_pair = None\n\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            distance = get_euclidean_distance(points[i], points[j])\n            if distance < min_distance:\n                min_distance = distance\n                min_pair = (points[i], points[j])\n    return min_pair\n\ndef get_euclidean_distance(p1, p2):\n    return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) ** 0.5\n\n\npoints = [[1,2],[-1,2],[2,-2],[-2,-2]]\nclosest_pair = closest_pair(points)\n\nprint(closest_pair)\n\n# Output: ((1, 2), (-1, 2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011431976844322592,
      "p_css": 0.002416375247128552,
      "p_html": 0.002030081698875415,
      "p_java": 0.00013442275270935715,
      "p_javascript": 0.00021635945231621414,
      "p_matlab": 0.010915071031229899,
      "p_python": 0.9806774091768871,
      "p_sql": 0.0019263146345240858,
      "p_typescript": 0.0005407683218971556
    },
    {
      "text": "def search_substring(string, substring):\n  \"\"\"Function to search substring within a string\"\"\"\n  \n  matches = []\n  \n  # Iterate over the search string\n  for i in range(len(string)):\n    temp = \"\"\n    \n    # Iterate over the substring\n    for j in range(len(substring)):\n      if substring[j] == string[i + j]:\n        temp += substring[j]\n      else:\n        break\n        \n    if temp == substring:\n      matches.append(i)\n      \n  # Return the list of matches\n  return matches\n\nstring = 'This is a test string'\nsubstring = 'test'\nresult = search_substring(string, substring)\n\n# Print the result\nprint(result)\n# Output\n# [10]",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.3949385286414251e-11,
      "p_css": 1.7139793203334936e-06,
      "p_html": 1.1998744172413692e-06,
      "p_java": 0.9991237271766193,
      "p_javascript": 1.0098801011058602e-10,
      "p_matlab": 9.067464804264147e-06,
      "p_python": 0.0007934773501619037,
      "p_sql": 6.966243853966647e-05,
      "p_typescript": 1.1516011998849727e-06
    },
    {
      "text": "def countSubstrings(str, subStr):\n    lengthSubStr = len(subStr)\n    count = 0\n   \n    for i in range(len(str)):\n        if str[i:i+lengthSubStr] == subStr:\n            count += 1\n         \n    return count\n\nstr = \"The quick brown fox jumps over the lazy dog.\"\nsubstr = \"the\"\nprint(countSubstrings(str, substr))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.993612969659358e-05,
      "p_css": 0.0001524283813498401,
      "p_html": 0.0006408274573940538,
      "p_java": 3.817412999538418e-06,
      "p_javascript": 0.00326095503795792,
      "p_matlab": 0.00020304964796796651,
      "p_python": 0.9951640719612789,
      "p_sql": 0.0003581060368790128,
      "p_typescript": 0.00011680793447611469
    },
    {
      "text": "import os\n\ndef get_last_commit_message():\n \"\"\"\n Retrieves the commit message of the last commit.\n \"\"\"\n # Get the list of all commits\n output = os.popen('git log').read()\n\n # Split the output into a list of commits\n commits = output.split('commit ')[1:]\n\n # Get the message of the last commit\n last_commit_message = commits[0].split('\\n')[1]\n\n return last_commit_message\n\nif __name__ == '__main__':\n print(get_last_commit_message())",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.023935592180946434,
      "p_css": 0.004986725122952461,
      "p_html": 0.0028875677022508124,
      "p_java": 3.2431851841887716e-06,
      "p_javascript": 0.9449162031746756,
      "p_matlab": 6.872464412679933e-06,
      "p_python": 0.00791871422157937,
      "p_sql": 0.010750582582606383,
      "p_typescript": 0.004594499365392076
    },
    {
      "text": "class SortList:\n    def __init__(self, lst):\n        self.lst = lst\n        \n    def sort_list(self):\n        self.lst.sort()\n        return self.lst",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.627802047120305e-05,
      "p_css": 0.0014253585241457455,
      "p_html": 0.004476917537269204,
      "p_java": 7.1471751283565165e-06,
      "p_javascript": 1.850549857262291e-05,
      "p_matlab": 1.2922433971007913e-06,
      "p_python": 0.9888177953702745,
      "p_sql": 0.005080206091015427,
      "p_typescript": 0.00011649953972612756
    },
    {
      "text": "input_sentence = \"This is an example sentence\"\nwords = input_sentence.split()\nwords.sort()\n\nprint(words) # ['an', 'example', 'is', 'sentence', 'This']",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.5584623817363334e-05,
      "p_css": 0.0005277349390702523,
      "p_html": 0.3809586724005781,
      "p_java": 0.4099565145687738,
      "p_javascript": 0.0029130796581256246,
      "p_matlab": 3.3759319506525336e-05,
      "p_python": 0.08459568376048016,
      "p_sql": 0.12091456240886532,
      "p_typescript": 4.440832078297585e-05
    },
    {
      "text": "import pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in data\ndata = pd.read_csv('product_data.csv')\n\n# Create an item-based collaborative filter\ncf = NearestNeighbors(metric='cosine', algorithm='brute')\ncf.fit(data)\n\n# Make recommendations\ndistances, indices = cf.kneighbors(data, n_neighbors=3)\n\n# Print results \nfor i in range(len(data)):\n print('Recommendations for item {}:'.format(i), indices[i])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007014674972296556,
      "p_css": 0.029725153279137384,
      "p_html": 0.014113313004846403,
      "p_java": 5.6326830462397e-06,
      "p_javascript": 0.0003414318893781467,
      "p_matlab": 0.0014432462316408044,
      "p_python": 0.9494504802203418,
      "p_sql": 0.0007902934701753914,
      "p_typescript": 0.003428981724204388
    },
    {
      "text": "import string\n\ndef removePunctuation(input_string):\n    punctuations = string.punctuation\n    output_string = \"\"\n    for char in input_string:\n        if char not in punctuations:\n            output_string += char\n    return output_string\n\nprint(removePunctuation(\"Hello, World!!!\"))  # Output: Hello World",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04053205925947233,
      "p_css": 0.0024434887674647785,
      "p_html": 0.0029621511994924947,
      "p_java": 8.185735370224971e-10,
      "p_javascript": 8.563084921371267e-05,
      "p_matlab": 4.5639367077339785e-05,
      "p_python": 0.9512158857709121,
      "p_sql": 0.0026757092158774835,
      "p_typescript": 3.943475191626741e-05
    },
    {
      "text": "import re\n\n# Define the regular expression for finding spam comments\nspam_regex = re.compile(r'(free|discount)', re.IGNORECASE)\n\n# Read in the comments\nwith open('comments.txt', 'r') as f:\n comments = f.readlines()\n\n# Check each comment for spam\nfor comment in comments:\n if re.search(spam_regex, comment):\n print('SPAM comment removed: ', comment)\nelse:\n print('Valid comment: ', comment)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.02447304174707074,
      "p_css": 0.0915254599816032,
      "p_html": 0.18610610119693502,
      "p_java": 0.0009342258506947836,
      "p_javascript": 0.012173291807930031,
      "p_matlab": 0.05767607105769205,
      "p_python": 0.4541179829870413,
      "p_sql": 0.009224979100734436,
      "p_typescript": 0.16376884627029833
    },
    {
      "text": "# formA.py\nfrom django.forms import ModelForm\nfrom .models import TableA\n\nclass formA(ModelForm):\n    class Meta:\n        model = TableA\n        fields = ['field1','field2','field3','field4']\n\n# formB.py\nfrom django.forms import ModelForm\nfrom .models import TableB\n\nclass formB(ModelForm):\n    class Meta:\n        model = TableB\n        fields = ['field1','field2','field3','field4']\n\n# views.py\nfrom django.shortcuts import render\nfrom .forms import formA, formB\n\ndef form_view(request):\n    formA_data = formA(request.POST or None)\n    formB_data = formB(request.POST or None)\n    if formA_data.is_valid() and formB_data.is_valid():\n        formA_data.save()\n        formB_data.save()\n        return render(request, 'thankyoupage.html')\n    return render(request, 'formpage.html', {'formA':formA_data, 'formB':formB_data})",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9999999994942932,
      "p_css": 4.78190090380355e-10,
      "p_html": 1.777921105207257e-12,
      "p_java": 9.747724955864194e-12,
      "p_javascript": 1.2660251329589836e-12,
      "p_matlab": 6.544169351105098e-13,
      "p_python": 1.1335393744085407e-11,
      "p_sql": 1.216908122543051e-14,
      "p_typescript": 2.723008907450076e-12
    },
    {
      "text": "def preorder(tree): \n    if tree: \n        print(tree.val) \n        preorder(tree.left) \n        preorder(tree.right) \n  \n# Driver code  \ntree = Node(1) \ntree.left = Node(2) \ntree.right = Node(3) \ntree.left.left = Node(4) \ntree.left.right = Node(5) \n  \npreorder(tree)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8938050462592145,
      "p_css": 0.008171352763195349,
      "p_html": 0.0019195434938909755,
      "p_java": 0.00026913517392206473,
      "p_javascript": 0.00045611356184175716,
      "p_matlab": 0.00044519111801114345,
      "p_python": 0.09112753054797473,
      "p_sql": 1.0676652909014851e-06,
      "p_typescript": 0.0038050194166585624
    },
    {
      "text": "def avg(numbers):\n sum = 0\n for n in numbers:\n sum = sum + n\n return sum / len(numbers)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.0052685435858368e-05,
      "p_css": 6.17160811521671e-05,
      "p_html": 0.00034346393549705337,
      "p_java": 0.9910470677596206,
      "p_javascript": 0.0001887531964105813,
      "p_matlab": 2.057258415600028e-06,
      "p_python": 0.00820177885386942,
      "p_sql": 9.402437300066487e-05,
      "p_typescript": 4.108585659815418e-05
    },
    {
      "text": "def sort_lexicographically(arr):\n    n = len(arr) \n    for i in range(n):\n        min_index = i\n        for j in range(i + 1, n):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n \nprint(sort_lexicographically(arr)) # Output: ['C', 'C++', 'Java', 'JavaScript', 'Python']",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.1526663027324714e-06,
      "p_css": 8.428107532354178e-09,
      "p_html": 4.1011491433616863e-07,
      "p_java": 1.1702108485751287e-08,
      "p_javascript": 2.815293530162398e-07,
      "p_matlab": 0.9987161099328294,
      "p_python": 0.0012806881676211074,
      "p_sql": 1.1239501215695327e-08,
      "p_typescript": 3.262192623060861e-07
    },
    {
      "text": "def parse_query_string(url): \n    components = url.split('?')\n    if len(components) == 2: \n        query_string = components[1]\n        params = query_string.split('&')\n        output = {}\n        for param in params: \n            key_value = param.split('=')\n            output[key_value[0]] = key_value[1]\n        return output",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003526952313001379,
      "p_css": 0.19570808150570873,
      "p_html": 0.08969348091718173,
      "p_java": 0.023516388046760033,
      "p_javascript": 0.0034570805559342517,
      "p_matlab": 0.009558021035766627,
      "p_python": 0.6686015036507553,
      "p_sql": 0.0056342097626630155,
      "p_typescript": 0.00030428221222903075
    },
    {
      "text": "def functionA(x):\n    answer = 0\n    for i in range(x):\n        answer += x-i\n    return answer",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00023449885439939973,
      "p_css": 0.00021685501897114164,
      "p_html": 0.0008566928722391404,
      "p_java": 3.8492634042894424e-05,
      "p_javascript": 5.336882415285801e-05,
      "p_matlab": 0.3054955337050716,
      "p_python": 0.6926610904525717,
      "p_sql": 0.0001803554806360521,
      "p_typescript": 0.0002631121579153134
    },
    {
      "text": "def merge_sort(input): \n  \n    if len(input) > 1: \n        mid = len(input)//2 #Finding the mid of the array \n        L = input[:mid] # Dividing the array elements  \n        R = input[mid:] # into 2 halves \n  \n        merge_sort(L) # Sorting the first half \n        merge_sort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                input[k] = L[i] \n                i+=1\n            else: \n                input[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            input[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            input[k] = R[j] \n            j+=1\n            k+=1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.23250536028769436,
      "p_css": 0.007135458428820882,
      "p_html": 0.03935468926556714,
      "p_java": 0.00021162124377325007,
      "p_javascript": 0.004073781968745797,
      "p_matlab": 0.009511366499270806,
      "p_python": 0.6680292878420513,
      "p_sql": 0.0019473513887998777,
      "p_typescript": 0.037231083075276714
    },
    {
      "text": "#objects to test for membership\nobject1 = [1, 2, 3]\nobject2 = 4\n\n#test if an object is a member of a given class\ndef is_member_of_class(obj, the_class):\n    return isinstance(obj, the_class)\n\n#test the objects\nprint(is_member_of_class(object1, list))\nprint(is_member_of_class(object2, int))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0008483123927877069,
      "p_css": 0.0017538809502107,
      "p_html": 0.0004160848183189321,
      "p_java": 0.031470429188064156,
      "p_javascript": 0.05186107494439761,
      "p_matlab": 3.626497882025723e-05,
      "p_python": 0.23862895103876258,
      "p_sql": 0.008437452287277552,
      "p_typescript": 0.6665475494013605
    },
    {
      "text": "def print_spiral_matrix(n):\n    matrix = [[0] * n for i in range(n)]\n \n    i = 0\n    j = 0\n \n    top = 0\n    left = 0\n    right = n - 1\n    bottom = n - 1\n \n    direction = 0\n \n    while top <= bottom and left <= right:\n        if direction == 0:\n            for j in range(left, right + 1):\n                matrix[top][j] = i\n                i += 1\n            top += 1\n            direction = 1\n        elif direction == 1:\n            for i in range(top, bottom + 1):\n                matrix[i][right] = i\n                i += 1\n            right -= 1\n            direction = 2\n        elif direction == 2:\n            for j in range(right, left - 1, -1):\n                matrix[bottom][j] = i\n                i += 1\n            bottom -= 1\n            direction = 3\n        elif direction == 3:\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = i\n                i += 1\n            left += 1\n            direction = 0\n \n    for i in range(n):\n        print(matrix[i])",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.027936831683552e-05,
      "p_css": 1.9110337656748853e-05,
      "p_html": 0.0006611295539728552,
      "p_java": 1.1611849683674553e-05,
      "p_javascript": 1.1202083521070728e-05,
      "p_matlab": 0.6366415298781553,
      "p_python": 0.3621607602088809,
      "p_sql": 0.0002775758345312215,
      "p_typescript": 0.00015680088528124546
    },
    {
      "text": "from sklearn.svm import SVC\n\nmodel = SVC(kernel = 'linear', probability=True) \nmodel.fit(X, y)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8082243639921085,
      "p_css": 0.0121613601862909,
      "p_html": 0.003058322186727879,
      "p_java": 9.532432469280706e-05,
      "p_javascript": 0.00021029011941377641,
      "p_matlab": 0.00019684256459903937,
      "p_python": 0.1758149865879004,
      "p_sql": 1.9925456958248263e-07,
      "p_typescript": 0.00023831078369715875
    },
    {
      "text": "def print_level_order(root):\n    if root is None:\n        return\n\n    queue = []\n\n    queue.append(root)\n    while(len(queue) > 0):\n        print(queue[0].data, end=\" \")\n        node = queue.pop(0)\n\n        if node.left is not None:\n            queue.append(node.left)\n\n        if node.right is not None:\n            queue.append(node.right)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003039380055698404,
      "p_css": 0.051877080083484274,
      "p_html": 0.011564523830698047,
      "p_java": 0.0017584787277746333,
      "p_javascript": 0.005509315870654202,
      "p_matlab": 0.1056365810242418,
      "p_python": 0.6053787276884016,
      "p_sql": 0.19596786228946225,
      "p_typescript": 0.01926805042958472
    },
    {
      "text": "import tkinter\n\nroot = tkinter.Tk()\nframe = tkinter.Frame(root)\nframe.pack()\n\nbutton1 = tkinter.Button(frame, text = \"Button 1\", fg = \"red\")\nbutton2 = tkinter.Button(frame, text = \"Button 2\", fg = \"blue\")\nbutton3 = tkinter.Button(frame, text = \"Button 3\", fg = \"green\")\nbutton4 = tkinter.Button(frame, text = \"Button 4\", fg = \"yellow\")\n\nbutton1.pack(side = tkinter.LEFT)\nbutton2.pack(side = tkinter.LEFT)\nbutton3.pack(side = tkinter.LEFT)\nbutton4.pack(side = tkinter.LEFT)\n\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009216023495248337,
      "p_css": 0.03437846301779358,
      "p_html": 0.02407876987885801,
      "p_java": 0.002973927902949828,
      "p_javascript": 0.006892363255814936,
      "p_matlab": 0.009591000028534701,
      "p_python": 0.8028190981234323,
      "p_sql": 0.02633279861461089,
      "p_typescript": 0.08371755568275754
    },
    {
      "text": "nums = [1, 2, 3, 4, 5]\n\n# Function to calculate the standard deviation \ndef standardDeviation(nums): \n \n # Compute mean (average of elements) \n mean = sum(nums) / len(nums) \n \n # Compute sum squared distances to the mean \n sum_sq_dist = 0\n for num in nums: \n sum_sq_dist += (num - mean) ** 2 \n \n # Compute standard deviation and return result \n return (sum_sq_dist / len(nums) - - - 1)** 0.5\n\n# Print the standard deviation \nprint(standardDeviation(nums))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00019368564677640189,
      "p_css": 0.0005771732657702804,
      "p_html": 0.00048715730000159783,
      "p_java": 5.944441698374213e-05,
      "p_javascript": 0.02629680974417241,
      "p_matlab": 0.001595922935373115,
      "p_python": 0.9565651584689618,
      "p_sql": 0.0014798334108491826,
      "p_typescript": 0.012744814811111376
    },
    {
      "text": "def is_even(number): \n    if(number % 2 == 0): \n        return True \n    else: \n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0796011878279012e-05,
      "p_css": 0.0001032278224500861,
      "p_html": 8.862149147235476e-05,
      "p_java": 5.221292155516557e-07,
      "p_javascript": 2.1243907403540198e-06,
      "p_matlab": 1.9111633758987255e-06,
      "p_python": 0.9997871030330951,
      "p_sql": 2.978125839734169e-06,
      "p_typescript": 2.7158319328804722e-06
    },
    {
      "text": "function calculateArea(width, height) {\n    return width * height;\n}",
      "y_true": "javascript",
      "pred_label": "javascript",
      "p_bash": 0.001476981489116085,
      "p_css": 0.003811150905868811,
      "p_html": 0.0037956699192159,
      "p_java": 0.00041885870277374055,
      "p_javascript": 0.9458026393751705,
      "p_matlab": 0.0007859878340846889,
      "p_python": 0.042172881228127644,
      "p_sql": 0.0013919758358169802,
      "p_typescript": 0.00034385470982544315
    },
    {
      "text": "def find_max(nums):\n    \"\"\"This function takes a series of numbers as input and returns the highest number.\n    \n    Args:\n        nums (list): A list of numbers.\n    \n    Returns:\n        int: The highest number.\n    \"\"\"\n    return max(nums)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0003803593615795746,
      "p_css": 0.00012534722230423903,
      "p_html": 0.0004618769914987514,
      "p_java": 0.0996232390244835,
      "p_javascript": 0.6872962297117725,
      "p_matlab": 2.3574433138639943e-08,
      "p_python": 0.20290079730154106,
      "p_sql": 8.316200440755074e-05,
      "p_typescript": 0.009128964807979726
    },
    {
      "text": "# Read the file\nwith open('text.txt') as f:\n    # Get all the words from the file\n    words = f.read().split()\n\n# Count the frequency of each word\nword_frequencies = {}\nfor word in words:\n    if word not in word_frequencies:\n        word_frequencies[word] = 1\n    else:\n        word_frequencies[word] += 1\n\n# Sort the words based on their frequencies\nsorted_words = sorted(word_frequencies.items(), key = lambda wf: wf[1], reverse=True)\n\n# Print the 10 most frequently used words\nprint('10 most frequent words: ', end = '')\nfor i in range(10):\n    print(sorted_words[i][0] + (\",\" if i != 9 else \".\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.012095324502262736,
      "p_css": 0.007976724140692094,
      "p_html": 0.01137492570399751,
      "p_java": 1.7478757443172692e-06,
      "p_javascript": 0.003916635597030409,
      "p_matlab": 0.005254439127895095,
      "p_python": 0.9154554351736869,
      "p_sql": 0.037896915565462125,
      "p_typescript": 0.006027852313228996
    },
    {
      "text": "def sum_of_squares(numbers):\n    total = 0\n    for num in range(1,numbers+1):\n        total += num**2\n    print(total)\n\nsum_of_squares(10)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9662685122078962e-05,
      "p_css": 3.173001334076243e-07,
      "p_html": 0.00019976441470147217,
      "p_java": 0.0002220956742217084,
      "p_javascript": 2.1048254040248353e-05,
      "p_matlab": 0.08113975011256659,
      "p_python": 0.9183591442344701,
      "p_sql": 1.1943206379207647e-05,
      "p_typescript": 2.6274118365158054e-05
    },
    {
      "text": "import random\n\nHTML = '<html>\\n<head>\\n<title>Random Table</title>\\n</head>\\n<body>\\n<table>\\n'\n\nfor row_num in range(0,3):\n    HTML += ' <tr>\\n'\n    for column_num in range(0,2):\n        HTML += '  <td>{}</td>\\n'.format(random.randint(0, 10))\n    HTML += ' </tr>\\n'\n\nHTML += '</table>\\n</body>\\n</html>'\n\nprint(HTML)",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 6.903772464531343e-22,
      "p_css": 1.0730652717440243e-20,
      "p_html": 1.0,
      "p_java": 9.975055645299609e-22,
      "p_javascript": 4.980988821505116e-20,
      "p_matlab": 1.879548628599922e-21,
      "p_python": 6.779080194149367e-21,
      "p_sql": 8.392063332447673e-22,
      "p_typescript": 5.863368242376103e-23
    },
    {
      "text": "import pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\nclass Ensembler(object):\n\n    def __init__(self):\n        self.ensemble_model = None\n\n    def build_model(self, X, y):\n        # Ensembler consists of Naive Bayes, Logistic Regression and Voting classifier\n        nb_classifier = BernoulliNB()\n        log_classifier = LogisticRegression()\n        vectorizer = DictVectorizer()\n\n        X_vectorized = vectorizer.fit_transform(X).toarray()\n\n        voting_model = VotingClassifier(\n            estimators=[\n                ('nb', nb_classifier), \n                ('log', log_classifier)\n            ], \n            voting='soft', \n            n_jobs=-1\n            )\n\n        self.ensemble_model = voting_model.fit(X_vectorized, y)\n\n    def predict(self, X):\n        X_vectorized = self.vectorizer.transform(X).toarray()\n        return self.ensemble_model.predict(X_vectorized)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011773153580624182,
      "p_css": 0.01996568801813163,
      "p_html": 0.004797061740495607,
      "p_java": 1.1651473168040263e-06,
      "p_javascript": 3.0094948037341502e-05,
      "p_matlab": 6.977116635602448e-07,
      "p_python": 0.9629764421076151,
      "p_sql": 0.0001520774553817999,
      "p_typescript": 0.00030361929073395414
    },
    {
      "text": "# Python program\ndef main():\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    \n    # use max and min functions to output the numbers in ascending order\n    print(min(num1, num2))\n    print(max(num1, num2))\n\nif __name__ == \"__main__\":\n    main()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.806399486661157,
      "p_css": 6.121847525543231e-05,
      "p_html": 7.623006998646302e-05,
      "p_java": 3.131050965857842e-05,
      "p_javascript": 0.00018225864185150928,
      "p_matlab": 4.1696175155615066e-10,
      "p_python": 0.19310856820411548,
      "p_sql": 0.00013584036501292028,
      "p_typescript": 5.086656000683908e-06
    },
    {
      "text": "def deleteNode(head, key): \n  \n    # Store head node \n    temp = head \n  \n    # If head node itself holds the key to be deleted \n    if (temp is not None): \n        if (temp.data == key): \n            head = temp.next\n            temp = None\n            return head \n  \n    # Search for the key to be deleted, keep track of the \n    # previous node as we need to change 'prev.next' \n    while(temp is not None): \n        if temp.data == key: \n            break \n        prev = temp \n        temp = temp.next\n  \n    # if key was not present in linked list \n    if (temp == None): \n        return head \n  \n    # Unlink the node from linked list \n    prev.next = temp.next\n  \n    temp = None\n  \n    return head",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.489317238897541e-07,
      "p_css": 9.487446899930559e-05,
      "p_html": 0.015333852201226458,
      "p_java": 7.5567432980217604e-06,
      "p_javascript": 0.00021529764476067983,
      "p_matlab": 0.9824954643945519,
      "p_python": 5.246326800962334e-07,
      "p_sql": 7.153932850410476e-05,
      "p_typescript": 0.0017799416542556114
    },
    {
      "text": "def sudoku(board): \n \n    # Check if the board is full \n    if not any(None in sublist for sublist in board): \n        return True\n  \n    # Find empty cells \n    for i in range(len(board)): \n        for j in range(len(board[0])): \n            if board[i][j]==None: \n                for k in range(1,10): \n                    board[i][j]=k \n                    # Try to solve the board \n                    if sudoku(board): \n                        return True\n                    # Backtrack and try with different  \n                    # values \n                    board[i][j]=None \n    return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00023544091532773132,
      "p_css": 0.0003200600697409183,
      "p_html": 0.000847602109726984,
      "p_java": 1.1641324358837933e-05,
      "p_javascript": 0.00013443106191370972,
      "p_matlab": 0.4118762560516174,
      "p_python": 0.5773086118413687,
      "p_sql": 0.005672025705752008,
      "p_typescript": 0.003593930920193774
    },
    {
      "text": "def extract_last_digits(n):\n  return int(str(n)[-2:])\n\nresult = extract_last_digits(12345)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.6698884733482824e-05,
      "p_css": 0.0003896589341092747,
      "p_html": 3.668644967467002e-05,
      "p_java": 0.014914601205404526,
      "p_javascript": 5.000730848361802e-05,
      "p_matlab": 8.571195764271698e-11,
      "p_python": 0.984531166026381,
      "p_sql": 5.664730865417317e-05,
      "p_typescript": 4.533796847313231e-06
    },
    {
      "text": "import random\nimport math\n \ndef get_random_points_in_circle(center, radius):\n points = []\n x_center, y_center = center\n \n while True:\n  x = random.uniform(x_center - radius, x_center + radius)\n  y = random.uniform(y_center - radius, y_center + radius)\n \n  dist = math.sqrt((x - x_center) ** 2 + (y - y_center) ** 2)\n \n  if dist <= radius:\n   points.append((x, y))\n \n  if len(points) >= 10:\n   break\n \n return points\n \nif __name__ == \"__main__\":\n points = get_random_points_in_circle((4, 4), 3)\n print(points)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001056398546072329,
      "p_css": 0.006941012017817806,
      "p_html": 0.002031692930993615,
      "p_java": 7.180348283714416e-05,
      "p_javascript": 0.00032055513480315403,
      "p_matlab": 0.0028886720645104765,
      "p_python": 0.9748167703375386,
      "p_sql": 0.011444603610963878,
      "p_typescript": 0.00042849187446311837
    },
    {
      "text": "array = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.14528588677462198,
      "p_css": 0.12301669080818446,
      "p_html": 0.024243128081274976,
      "p_java": 0.0003607998521571819,
      "p_javascript": 0.0037079317532284144,
      "p_matlab": 0.1274200044148805,
      "p_python": 0.5737829517430187,
      "p_sql": 0.00019635014959454614,
      "p_typescript": 0.0019862564230392144
    },
    {
      "text": "john_grade = 85\ngeorge_grade = 90\nsarah_grade = 75\nemily_grade = 95\n\ndef average_grade(john_grade, george_grade, sarah_grade, emily_grade):\n    return (john_grade + george_grade + sarah_grade + emily_grade) / 4\n\navg_grade = average_grade(john_grade, george_grade, sarah_grade, emily_grade)\nprint('The average grade of 4 students is', avg_grade)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005973940761493214,
      "p_css": 0.29244594202878604,
      "p_html": 0.027079785600798434,
      "p_java": 0.0017800443084896105,
      "p_javascript": 0.21439164516146533,
      "p_matlab": 0.010632398086040856,
      "p_python": 0.3448319967598373,
      "p_sql": 0.00800802158879658,
      "p_typescript": 0.09485622570429256
    },
    {
      "text": "import tkinter as tk\nfrom tkinter import filedialog, Text, Menu\n\n# root window configuration\nroot = tk.Tk()\nroot.title(\"Code Editor\")\n\n# text area where code is written\ntextArea = Text(root, relief=\"sunken\")\ntextArea.grid(row=0, column = 0, columnspan=3, padx = 5, pady = 5, sticky = \"nsew\")\n\n# sets the scrollbar x y\nscrollbar = tk.Scrollbar(textArea)\ntextArea.configure(xscrollcommand=scrollbar.set)\nscrollbar.config(command=textArea.yview)\nscrollbar.grid(row=0, column=3, sticky='nsew')\n\n# open file\ndef open_file():\n    global filename\n    filename = filedialog.askopenfilename(defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"), (\"Text Files\", \"*.txt\")])\n    if filename == \"\":\n        filename = None\n    else:\n        root.title(f\"Code Editor - {filename}\")\n        textArea.delete(1.0, tk.END)\n        f = open(filename, \"r\")\n        textArea.insert(1.0, f.read())\n        f.close()\n\n# save file\ndef save_file():\n    if filename == None:\n        save_as()\n    else:\n        f = open(filename, \"w\")\n        f.write(textArea.get(1.0, tk.END))\n        f.close()\n\n# save as file\ndef save_as():\n    global filename\n    filename = filedialog.asksaveasfilename(initialfile=\"Untitled.txt\", defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"), (\"Text Files\", \"*.txt\")])\n    f = open(filename, \"w\")\n    f.write(textArea.get(1.0, tk.END))\n    f.close()\n\n# creating the statusbar\nstatusBar = tk.Label(root, text=\"Status Bar\")\nstatusBar.grid(row=1, column=0, columnspan=3, sticky=\"ew\")\n\n# creating the menubar\nmenubar = Menu(root)\nroot.config(menu=menubar)\n\n# creating the options for the file menu\nfileMenu = Menu(menubar)\nmenubar.add_cascade(label=\"File\", menu=fileMenu)\nfileMenu.add_command(label=\"Open\", command=open_file)\nfileMenu.add_command(label=\"Save\", command=save_file)\nfileMenu.add_command(label=\"Save As\", command=save_as)\n\n# coding syntax highlighting\ntextArea.configure(bg=\"grey\", fg=\"white\")\n\n# loop to run application\nroot.mainloop()",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.06603719835070286,
      "p_css": 0.0330233603239071,
      "p_html": 0.005338641151976068,
      "p_java": 1.9928926950516446e-05,
      "p_javascript": 0.0016624864337290881,
      "p_matlab": 0.0007182344522188785,
      "p_python": 0.04309534873452286,
      "p_sql": 0.13085562564604883,
      "p_typescript": 0.7192491759799436
    },
    {
      "text": "list_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]\n\ndef find_unique_items(input_list):\n    result = []\n    for elem in input_list:\n        if elem not in result:\n            result.append(elem)\n    return result\n\nprint(find_unique_items(list_items))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.9380586590259036e-05,
      "p_css": 0.010329106630177408,
      "p_html": 0.0002464376731135199,
      "p_java": 6.522626608711026e-06,
      "p_javascript": 7.486397615028493e-05,
      "p_matlab": 0.0011646938594979364,
      "p_python": 0.9871566379729017,
      "p_sql": 0.0007717428494496824,
      "p_typescript": 0.00019061382551062984
    },
    {
      "text": "def even_sum(low, high):\n    sum = 0\n    for i in range(low, high+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\nresult = even_sum(10, 20)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00017476361074669246,
      "p_css": 0.002205053832702738,
      "p_html": 0.0011505463799851062,
      "p_java": 0.0006868538958587245,
      "p_javascript": 0.00010376626066368163,
      "p_matlab": 0.17306718146673133,
      "p_python": 0.8213386015822126,
      "p_sql": 0.0010021107063120584,
      "p_typescript": 0.00027112226478713585
    },
    {
      "text": "def predict_price(company):\n    # Call an appropriate API\n    company_data = request_api(company)\n    # Use an appropriate ML algorithm\n    model = build_model(company_data)\n    # Get the prediction\n    prediction = model.predict()\n    return prediction",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.5263136049213871,
      "p_css": 0.012607151271642612,
      "p_html": 0.02188004024531782,
      "p_java": 0.0003901907053165841,
      "p_javascript": 0.025821317236053184,
      "p_matlab": 0.0005861361415590352,
      "p_python": 0.4036170286592326,
      "p_sql": 1.1496630832710635e-05,
      "p_typescript": 0.00877303418865811
    },
    {
      "text": "\"\"\"\nCreate a list of prime numbers ranging from 2 to n.\n\"\"\"\n\ndef prime_list(n):\n    prime_list = []\n    for num in range(2, n + 1):\n        for prime in prime_list:\n            if num % prime == 0: \n                break\n        else: \n            prime_list.append(num)\n    return prime_list\n\nif __name__ == '__main__':\n    n = 15\n    print(prime_list(n))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.301493519084047e-06,
      "p_css": 3.407033795921075e-07,
      "p_html": 2.3231150805014826e-05,
      "p_java": 2.877602194323769e-06,
      "p_javascript": 1.1614699634970615e-05,
      "p_matlab": 0.9983017505954913,
      "p_python": 0.0015584666480835088,
      "p_sql": 5.634089637228131e-05,
      "p_typescript": 3.80762105201699e-05
    },
    {
      "text": "def multiplication_table():\n    for i in range(1, 13):\n        for j in range(1, 13):\n            print(\"{:>2}\".format(str(i*j)), end=' ')\n        print()\n\nmultiplication_table()",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 6.284474188695136e-05,
      "p_css": 8.112821912745133e-05,
      "p_html": 0.0003095180966600789,
      "p_java": 3.87890625794661e-06,
      "p_javascript": 1.4798620074808065e-05,
      "p_matlab": 0.09121260096634337,
      "p_python": 0.908178870956366,
      "p_sql": 7.798692948000854e-05,
      "p_typescript": 5.83725638032722e-05
    },
    {
      "text": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/posts/<title>/<action>\")\ndef process_url(title: str, action: str):\n\tprint(f'URL endpoint mapping for title: {title} and action: {action}')\n\nif __name__ == '__main__':\n\tapp.run()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 2.9064217047723104e-06,
      "p_css": 0.06276237708224564,
      "p_html": 0.9349159887931585,
      "p_java": 6.6958537749585405e-06,
      "p_javascript": 6.199799523297712e-05,
      "p_matlab": 9.552566472790182e-06,
      "p_python": 0.0011427195016840504,
      "p_sql": 0.0010695820907318748,
      "p_typescript": 2.817969499446983e-05
    },
    {
      "text": "def print_dict(dict):\n for key in dict:\n   print(key,\":\", dict[key])",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.00038814066605853464,
      "p_css": 0.8661297392036661,
      "p_html": 0.0013378014920242484,
      "p_java": 4.188738393246605e-05,
      "p_javascript": 0.0010370327354584225,
      "p_matlab": 0.0005824645758989481,
      "p_python": 0.12955941201715931,
      "p_sql": 0.0005263416916327787,
      "p_typescript": 0.00039718023416939716
    },
    {
      "text": "# Define a list of routes\nroutes = [\n    ('/', 'homepage'), \n    ('/about', 'aboutpage'), \n    ('/contact', 'contactpage')\n]\n\n# Define a function to match the route and \n# get the name of the page\ndef match_route(route):\n    for url, page in routes:\n        if url == route:\n            return page\n\n# Test the function\nresult = match_route('/')\nprint(result)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 4.218672965327945e-06,
      "p_css": 0.008818404084830537,
      "p_html": 0.007134792260616628,
      "p_java": 0.0017774542910645049,
      "p_javascript": 0.9576474327198431,
      "p_matlab": 2.980091391863414e-05,
      "p_python": 0.0037620111387946078,
      "p_sql": 0.0025090816716805274,
      "p_typescript": 0.018316804246286057
    },
    {
      "text": "def find_missing_num(lst):\n expected_num = sum(range(lst[0],lst[-1]+1))\n actual_sum = sum(lst)\n return expected_num - actual_sum\n\nlst = [1,2,4,5,6,7,8]\nmissing_num = find_missing_num(lst)\nprint(\"The missing number is\", missing_num)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.604849712883619e-05,
      "p_css": 0.00017779055049864335,
      "p_html": 0.00013344341827376232,
      "p_java": 4.816608897758144e-05,
      "p_javascript": 6.535661028391593e-05,
      "p_matlab": 6.293861928869572e-06,
      "p_python": 0.9992894938628528,
      "p_sql": 0.00011482221132159476,
      "p_typescript": 0.00012858489873391
    },
    {
      "text": "import pandas as pd\nimport pyodbc\n\n# Connect to database\nserver = '<yourserver>'\ndatabase = '<yourdatabase>'\nusername = '<yourusername>'\npassword = '<yourpassword>'\nconn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = conn.cursor()\n\n# Read Excel file\ndf = pd.read_excel('<yourfilename>')\n\n# Insert values into database\nfor index, row in df.iterrows():\n item_id = row['item_id']\n item_name = row['item_name']\n price = row['price']\n cursor.execute(f\"INSERT INTO table (item_id, item_name, price) VALUES ({item_id}, '{item_name}', {price})\")\nconn.commit()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.000520190248189556,
      "p_css": 0.007150001177668051,
      "p_html": 0.0023536738561486374,
      "p_java": 7.089348347069085e-05,
      "p_javascript": 0.0002079043583232237,
      "p_matlab": 2.4340808898866015e-05,
      "p_python": 0.014586877560709078,
      "p_sql": 0.9625979185899893,
      "p_typescript": 0.01248819991660252
    },
    {
      "text": "class Friend:\n \n  def __init__(self, name, age, hobbies):\n    self.name = name\n    self.age = age\n    self.hobbies = hobbies\n    \n  def getName(self):\n    return self.name\n    \n  def getAge(self):\n    return self.age\n    \n  def getHobbies(self):\n    return self.hobbies",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.9245042963415776e-05,
      "p_css": 0.007112854679718543,
      "p_html": 0.02107732060731843,
      "p_java": 0.005547754953387208,
      "p_javascript": 1.0274830774187923e-08,
      "p_matlab": 2.4314112052908566e-07,
      "p_python": 0.9515072992811122,
      "p_sql": 0.01470394666029615,
      "p_typescript": 2.1325359252726488e-05
    },
    {
      "text": "#import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\n\n# convert the data into dataframe\ndf = pd.DataFrame({'X': [1,2,3,4,5,6], 'y': [13, 23, 32, 43, 51,64]})\n\n# train and test split\nx_train = df[['X']][:-1]\ny_train = df['y'][:-1]\nx_test = df[['X']][-1:]\ny_test = df['y'][-1:]\n\n# define linear model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\n# score\nr2_score(y_test, model.predict(x_test))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.12694065037415372,
      "p_css": 0.26589886496753384,
      "p_html": 0.006431670373247883,
      "p_java": 1.2094421851965498e-05,
      "p_javascript": 8.565506427152303e-06,
      "p_matlab": 3.0522835578177244e-05,
      "p_python": 0.5859114547200703,
      "p_sql": 2.9189576035500852e-05,
      "p_typescript": 0.014736987225101318
    },
    {
      "text": "def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False \n    str1 = sorted(str1.lower()) \n    str2 = sorted(str2.lower()) \n    return str1 == str2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003015724100830793,
      "p_css": 0.00048557916547266734,
      "p_html": 8.615444910319866e-07,
      "p_java": 5.52356895765373e-05,
      "p_javascript": 0.38307346914922863,
      "p_matlab": 6.43803906178863e-05,
      "p_python": 0.6087436053276435,
      "p_sql": 0.007011092881892517,
      "p_typescript": 0.00026420344099419214
    },
    {
      "text": "def find_longest_increasing_subsequence(array):\n    n = len(array)\n    Length = [1] * n\n    SequenceArray = [None] * n\n    for index1 in range(n):\n        for index2 in range(index1):\n            if array[index2] < array[index1] and Length[index2] >= Length[index1]:\n                Length[index1] = Length[index2] + 1\n                SequenceArray[index1] = index2\n\n    maxIndex = Length.index(max(Length))\n    SubsequenceArray = [array[maxIndex]]\n    while SequenceArray[maxIndex] is not None:\n        maxIndex = SequenceArray[maxIndex]\n        SubsequenceArray.append(array[maxIndex])\n    SubsequenceArray.reverse()\n    return SubsequenceArray",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.006691635918776256,
      "p_css": 0.000937396650149327,
      "p_html": 0.0008878900565362268,
      "p_java": 0.0002180694226814515,
      "p_javascript": 0.04993769081066702,
      "p_matlab": 0.7743360044945913,
      "p_python": 0.1618754794000502,
      "p_sql": 0.003989709502577405,
      "p_typescript": 0.0011261237439707905
    },
    {
      "text": "#! /usr/bin/env python\n\"\"\"\nPython API for KB SRU\n\"\"\"\n\nimport sys\nimport urllib\nimport requests\nfrom lxml import etree\n\nSRU_BASEURL = 'http://jsru.kb.nl/sru/sru'\nSRU_BASEURL += '?version=1.2&maximumRecords=%i'\nSRU_BASEURL += '&operation=searchRetrieve'\nSRU_BASEURL += '&startRecord=%i'\nSRU_BASEURL += '&recordSchema=%s'\nSRU_BASEURL += '&x-collection=%s&query=%s'\n\nSETS = {'ANP': {'collection': 'ANP',\n                'description_en': 'Radio Bulletins ANP Press Agency',\n                'description_nl': 'ANP Radiobulletins Digitaal',\n                'metadataPrefix': 'didl',\n                'recordschema': 'dcx',\n                'setname': 'anp',\n                'time_period': [1937, 1989]},\n        'DPO': {'collection': 'DPO_boekdeel',\n                'description_en': 'Early Dutch Books Online',\n                'description_nl': 'Early Dutch Books Online',\n                'metadataPrefix': 'didl',\n                'recordschema': 'ddd',\n                'setname': 'DPO',\n                'time_period': [1781, 1800]},\n        'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts',\n                    'description_nl': 'Middeleeuwse Verluchte Handschriften',\n                    'metadataPrefix': 'dcx',\n                    'setname': 'BYVANCK',\n                    'time_period': [500, 1500]},\n        'SGD': {'description_en': 'States General Digital',\n                'description_nl': 'Staten-Generaal Digitaal',\n                'metadataPrefix': 'dcx',\n                'setname': 'sgd:register',\n                'time_period': [1962, 1994]},\n        'GGC': {'collection': 'GGC',\n                'description_en': 'General Catalogue KB',\n                'description_nl': 'Algemene Catalogus KB',\n                'metadataPrefix': 'dcx',\n                'recordschema': 'dcx',\n                'setname': 'ggc',\n                'time_period': [1937, 2021]}}  # No idea what to use here?\n\n# Name spaces in GGC records\n\nsrw_ns = 'http://www.loc.gov/zing/srw/'\ntel_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'\nxsi_ns = 'http://www.w3.org/2001/XMLSchema-instance'\ndc_ns = 'http://purl.org/dc/elements/1.1/'\ndcterms_ns = 'http://purl.org/dc/terms/'\ndcx_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'\n\nNSMAPGGC = {\"srw\": srw_ns,\n            \"tel\": tel_ns,\n            \"xsi\": xsi_ns,\n            \"dc\":  dc_ns,\n            \"dcterms\": dcterms_ns,\n            \"dcx\": dcx_ns}\n\n\nclass response():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def getElementText(self, tagName, attributeName, attributeValue):\n        # Returns text content of all elements for which tag matches tagName,\n        # and attribute value equals attributeValue. Set attributeName to empty\n        # string to get all tagName matches.\n        textFields = []\n        for r in self.record_data.iter():\n            if r.tag == tagName:\n                if attributeName != '':\n                    try:\n                        if r.attrib[attributeName] == attributeValue:\n                            textFields.append(r.text)\n                    except KeyError:\n                        pass\n                else:\n                    textFields.append(r.text)\n        return textFields\n\n    @property\n    def records(self):\n        if self.sru.nr_of_records == 0:\n            record_data = \"<xml></xml>\"\n        else:\n            ns = {'zs': 'http://www.loc.gov/zing/srw/'}\n            record_data = self.record_data.xpath(\"zs:records/zs:record\",\n                                                 namespaces=ns)[0]\n        return record(record_data, self.sru)\n\n    # Below property functions all return a list with all instances that satisfy\n    # criteria\n\n    @property\n    def typesDutch(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}type',\n                                   '{http://www.w3.org/XML/1998/namespace}lang',\n                                   'nl'))\n\n    @property\n    def typesDCMI(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}type',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'DCMIType'))\n\n    @property\n    def identifiersISBN(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcterms:ISBN'))\n\n    @property\n    def identifiersBrinkman(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:Brinkman'))\n\n    @property\n    def identifiersURI(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcterms:URI'))\n\n    @property\n    def identifiersOCLC(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'OCLC'))\n\n    @property\n    def languagesDutch(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',\n                                   '{http://www.w3.org/XML/1998/namespace}lang',\n                                   'nl'))\n\n    @property\n    def languagesEnglish(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',\n                                   '{http://www.w3.org/XML/1998/namespace}lang',\n                                   'en'))\n\n    @property\n    def languagesFrench(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',\n                                   '{http://www.w3.org/XML/1998/namespace}lang',\n                                   'fr'))\n\n    @property\n    def languagesISO639(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcterms:ISO639-2'))\n\n    @property\n    def dates(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}date',\n                                   '',\n                                   ''))\n\n    @property\n    def extents(self):\n        return(self.getElementText('{http://purl.org/dc/terms/}extent',\n                                   '',\n                                   ''))\n\n    @property\n    def creators(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}creator',\n                                   '',\n                                   ''))\n\n    @property\n    def contributors(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}contributor',\n                                   '',\n                                   ''))\n\n    @property\n    def titles(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',\n                                   '',\n                                   ''))\n\n    @property\n    def titlesMain(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:maintitle'))\n\n    @property\n    def titlesIntermediate(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:intermediatetitle'))\n\n    @property\n    def publishers(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}publisher',\n                                   '',\n                                   ''))\n\n    @property\n    def countries(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}country',\n                                   '',\n                                   ''))\n\n    @property\n    def subjectsBrinkman(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:Brinkman'))\n\n    @property\n    def subjectsISO9707(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'ISO_9707_[Brinkman]'))\n\n    @property\n    def subjectsUNESCO(self):\n        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'UNESCO'))\n\n    @property\n    def collectionIdentifiers(self):\n        return(self.getElementText('{http://purl.org/dc/terms/}isPartOf',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcx:collectionIdentifier'))\n\n    @property\n    def recordIdentifiersURI(self):\n        return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}recordIdentifier',\n                                   '{http://www.w3.org/2001/XMLSchema-instance}type',\n                                   'dcterms:URI'))\n\n    @property\n    def annotations(self):\n        # Note that annotations sometimes contain language or itenID attibutes;\n        # ignored for now (collect everything).\n        return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}annotation',\n                                   '',\n                                   ''))\n\n\nclass record():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def __iter__(self):\n        return self\n\n    # This works under Python 2.7\n    def next(self):\n        if self.sru.nr_of_records == 0:\n            raise StopIteration\n        if self.sru.startrecord < self.sru.nr_of_records + 1:\n            record_data = self.sru.run_query()\n            self.sru.startrecord += 1\n            return response(record_data, self.sru)\n        else:\n            raise StopIteration\n\n    # This works under Python 3\n    def __next__(self):\n        if self.sru.nr_of_records == 0:\n            raise StopIteration\n        if self.sru.startrecord < self.sru.nr_of_records + 1:\n            record_data = self.sru.run_query()\n            self.sru.startrecord += 1\n            return response(record_data, self.sru)\n        else:\n            raise StopIteration\n\n\nclass sru():\n    DEBUG = False\n\n    collection = False\n    maximumrecords = 50\n    nr_of_records = 0\n    query = \"\"\n    recordschema = False\n    sru_collections = SETS\n    startrecord = 0\n\n    def search(self, query, collection=False,\n               startrecord=1, maximumrecords=1, recordschema=False):\n\n        self.maximumrecords = maximumrecords\n        if sys.version.startswith('3'):\n            self.query = urllib.parse.quote_plus(query)\n        elif sys.version.startswith('2'):\n            self.query = urllib.quote_plus(query)\n        self.startrecord = startrecord\n\n        if collection not in self.sru_collections:\n            raise Exception('Unknown collection')\n\n        self.collection = self.sru_collections[collection]['collection']\n\n        if not self.collection:\n            raise Exception('Error, no collection specified')\n\n        if not recordschema:\n            self.recordschema = self.sru_collections[collection]['recordschema']\n        else:\n            self.recordschema = recordschema\n\n        record_data = self.run_query()\n\n        nr_of_records = [i.text for i in record_data.iter() if\n                         i.tag.endswith('numberOfRecords')][0]\n\n        self.nr_of_records = int(nr_of_records)\n\n        if self.nr_of_records > 0:\n            return response(record_data, self)\n\n        return False\n\n    def run_query(self):\n        url = SRU_BASEURL % (self.maximumrecords, self.startrecord,\n                             self.recordschema, self.collection, self.query)\n        if self.DEBUG:\n            sys.stdout.write(url)\n\n        r = requests.get(url)\n\n        if not r.status_code == 200:\n            raise Exception('Error while getting data from %s' % url)\n\n        record_data = etree.fromstring(r.content)\n\n        return record_data\n",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 6.051475333356692e-05,
      "p_css": 0.038379928648679715,
      "p_html": 0.7705478350946039,
      "p_java": 1.1703640815297116e-06,
      "p_javascript": 1.4896581492245385e-05,
      "p_matlab": 1.8016091479345087e-06,
      "p_python": 0.14318085394042993,
      "p_sql": 0.04774602610464475,
      "p_typescript": 6.697290358652287e-05
    },
    {
      "text": "def split_list(input_list):\n    # Create two empty lists to hold the even and odd length strings \n    even_list = []\n    odd_list = []\n\n    # Iterate through the given list \n    for element in input_list:\n        # If the current length of element is even append it to even_list\n        if len(element) % 2 == 0:\n            even_list.append(element)\n        # Else append it to odd_list \n        else:\n            odd_list.append(element)\n    return even_list, odd_list",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.8940703216521737e-05,
      "p_css": 0.0003781930678173583,
      "p_html": 3.175040763055128e-05,
      "p_java": 2.7546390628557052e-05,
      "p_javascript": 0.0014280419951430716,
      "p_matlab": 0.9226451551872619,
      "p_python": 0.0028381416024911405,
      "p_sql": 1.364293976062183e-05,
      "p_typescript": 0.07260858770605026
    },
    {
      "text": "def preorder_traversal(root):\n    if root is None: \n        return\n    \n    print (root.data, end = ' ')\n    \n    preorder_traversal(root.left) \n    preorder_traversal(root.right)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00027568079171119236,
      "p_css": 0.0037936604901185555,
      "p_html": 0.002380943256928067,
      "p_java": 0.00017795521146148172,
      "p_javascript": 0.0009478928610012584,
      "p_matlab": 0.00037939845040387124,
      "p_python": 0.9278959474490621,
      "p_sql": 0.06324438875279201,
      "p_typescript": 0.0009041327365215555
    },
    {
      "text": "def permutations(words):\n \n  if len(words) == 0:\n    return []\n  elif len(words) == 1: \n    return [words]\n  else:\n    perms = []\n    for word in words: \n      remaining_words = words[:] \n      remaining_words.remove(word)\n      z = permutations(remaining_words)   \n      for perm in z: \n        perms.append([word] + perm)\n    return perms\n \n# Test \nwords = ['cat', 'dog', 'bird']\nprint(permutations(words))\n\n# Output \n[['cat', 'dog', 'bird'], ['cat', 'bird', 'dog'], ['dog', 'cat', 'bird'], ['dog', 'bird', 'cat'], ['bird', 'cat', 'dog'], ['bird', 'dog', 'cat']]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0026051020066936545,
      "p_css": 0.021940250372085583,
      "p_html": 0.01466253487126445,
      "p_java": 0.00011493082592166901,
      "p_javascript": 0.0006357033146262656,
      "p_matlab": 0.0029195010614544723,
      "p_python": 0.9220500215524305,
      "p_sql": 0.034827616019241586,
      "p_typescript": 0.00024433997628183217
    },
    {
      "text": "# Python 3 program to find sum over a range\n# A recursive function to find the sum of given range\ndef rangeSum(start, end):\n  \n    # If range consists of only one number\n    if (start == end):\n        return start\n    return start + rangeSum(start + 1 , end)\n  \n# Driver code\nstart = 1\nend = 5\nprint(rangeSum(start, end))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.021435098687853545,
      "p_css": 9.94963027420117e-05,
      "p_html": 0.00019048385188674043,
      "p_java": 2.4056178988289574e-05,
      "p_javascript": 0.003955856257851553,
      "p_matlab": 1.2891244517277805e-05,
      "p_python": 0.9724670657973038,
      "p_sql": 0.0012911343835869758,
      "p_typescript": 0.0005239172952697994
    },
    {
      "text": "def print_combinations(symbols):\n    for idx in range(1 << len(symbols)):\n        combination = [symbol for symbol, flag in zip(symbols, bin(idx)[2:]) if flag == \"1\"]\n        print(combination)\n\nsymbols = ['A', 'B', 'C']\nprint_combinations(symbols)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.059982824287705606,
      "p_css": 0.018844960449991337,
      "p_html": 0.012227041666970468,
      "p_java": 0.00031168131493483376,
      "p_javascript": 0.0017228651368727086,
      "p_matlab": 0.21040521292763587,
      "p_python": 0.6879713636550258,
      "p_sql": 0.006314789072847045,
      "p_typescript": 0.0022192614880163094
    },
    {
      "text": "\n# coding: utf-8\n\n# # Publications markdown generator for academicpages\n# \n# Takes a TSV of publications with metadata and converts them for use with [academicpages.github.io](academicpages.github.io). This is an interactive Jupyter notebook, with the core python code in publications.py. Run either from the `markdown_generator` folder after replacing `publications.tsv` with one that fits your format.\n# \n# TODO: Make this work with BibTex and other databases of citations, rather than Stuart's non-standard TSV format and citation style.\n# \n\n# ## Data format\n# \n# The TSV needs to have the following columns: pub_date, title, venue, excerpt, citation, site_url, and paper_url, with a header at the top. \n# \n# - `excerpt` and `paper_url` can be blank, but the others must have values. \n# - `pub_date` must be formatted as YYYY-MM-DD.\n# - `url_slug` will be the descriptive part of the .md file and the permalink URL for the page about the paper. The .md file will be `YYYY-MM-DD-[url_slug].md` and the permalink will be `https://[yourdomain]/publications/YYYY-MM-DD-[url_slug]`\n\n\n# ## Import pandas\n# \n# We are using the very handy pandas library for dataframes.\n\n# In[2]:\n\nimport pandas as pd\n\n\n# ## Import TSV\n# \n# Pandas makes this easy with the read_csv function. We are using a TSV, so we specify the separator as a tab, or `\\t`.\n# \n# I found it important to put this data in a tab-separated values format, because there are a lot of commas in this kind of data and comma-separated values can get messed up. However, you can modify the import statement, as pandas also has read_excel(), read_json(), and others.\n\n# In[3]:\n\nprofessional = pd.read_csv(\"professional.tsv\", sep=\"\\t\", header=0)\nprofessional\n\n\n# ## Escape special characters\n# \n# YAML is very picky about how it takes a valid string, so we are replacing single and double quotes (and ampersands) with their HTML encoded equivilents. This makes them look not so readable in raw format, but they are parsed and rendered nicely.\n\n# In[4]:\n\nhtml_escape_table = {\n    \"&\": \"&amp;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\"\n    }\n\ndef html_escape(text):\n    \"\"\"Produce entities within text.\"\"\"\n    return \"\".join(html_escape_table.get(c,c) for c in text)\n\n\n# ## Creating the markdown files\n# \n# This is where the heavy lifting is done. This loops through all the rows in the TSV dataframe, then starts to concatentate a big string (```md```) that contains the markdown for each type. It does the YAML metadata first, then does the description for the individual page. If you don't want something to appear (like the \"Recommended citation\")\n\n# In[5]:\n\nimport os\n\nSPACE = ' '\nSTAR = '*'\nTAB = SPACE + SPACE\nTAB_BULLET = SPACE + STAR + SPACE\nENDL = '\\n'\nWIP = '*[ WIP ]*'\nTODO = '*[TODO]*'\n\ndef is_not_NaN(num):\n    return num == num\n\ndef is_not_empty(s):\n    return is_not_NaN(s) and len(str(s)) > 0\n\ndef bold(s):\n    return STAR + STAR + str(s) + STAR + STAR\n\ndef italicize(s):\n    return STAR + str(s) + STAR\n\ndef coursera_icon_link(s):\n    return '<a href=\"' + str(s) + '\" target=\"_blank\"><i class=\"ai ai-courser\"></i></a>'\n\ndef github_icon_link(s):\n    return '<a href=\"' + str(s) + '\" target=\"_blank\"><i class=\"fa fa-github\" aria-hidden=\"true\"></i> </a>'\n\ndef certificate_icon_link(s):\n    return '<a href=\"' + str(s) + '\" target=\"_blank\"><i class=\"fa fa-certificate\" aria-hidden=\"true\"></i> </a>'\n\nwith open(\"../_pages/professional.md\", 'w') as f:\n    for row, item in professional.iterrows():\n        md = ''\n        md += TAB_BULLET\n        md += str(item.course_name)\n        md += SPACE\n        md += \"by \"\n        md += '[' + str(item.provider) + '](' + str(item.provider_url) + ')'\n        md += SPACE\n        if is_not_empty(item.certificate_link):\n            md += certificate_icon_link(item.certificate_link)\n        md += ENDL\n        \n        f.write(md)\n",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 6.941935943851912e-09,
      "p_css": 7.34801257253342e-08,
      "p_html": 1.3814982385060501e-07,
      "p_java": 5.338382267678913e-09,
      "p_javascript": 5.005194907665532e-07,
      "p_matlab": 1.873785567516519e-09,
      "p_python": 2.374510063291313e-07,
      "p_sql": 2.748118552752864e-07,
      "p_typescript": 0.9999987614335942
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nlink = 'https://store.apple.com/us/buy-iphone/iphone-11'\n\npage = requests.get(link)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nprice = soup.find('span', id='pricing-product-price-value').text\nprint(price)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.6503028172615765e-06,
      "p_css": 0.7368587707303904,
      "p_html": 0.2624469714410242,
      "p_java": 2.460125221208047e-05,
      "p_javascript": 2.0279441955717994e-05,
      "p_matlab": 0.00012475319957557584,
      "p_python": 0.000285490603355743,
      "p_sql": 0.0002168159353070885,
      "p_typescript": 2.0667093362063642e-05
    },
    {
      "text": "def add_arrays(arr1, arr2):\n  return [x + y for x, y in zip(arr1, arr2)]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0018229940465729357,
      "p_css": 0.006172137188362057,
      "p_html": 0.00439136345771976,
      "p_java": 0.0003840838448591737,
      "p_javascript": 0.0014493678194141657,
      "p_matlab": 0.017753713669442985,
      "p_python": 0.9619737555706309,
      "p_sql": 0.0027564931645041838,
      "p_typescript": 0.003296091238493832
    },
    {
      "text": "while True:\n    num = int(input(\"Please input a number between 1 and 10: \"))\n    if num in range(1, 11):\n        print(num + 1)\n    else:\n        print(\"Invalid number!\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.7959331930405802e-07,
      "p_css": 9.47968294490802e-12,
      "p_html": 1.770455647341696e-07,
      "p_java": 2.2128289920824158e-07,
      "p_javascript": 1.4697916137710696e-09,
      "p_matlab": 0.9988697241948412,
      "p_python": 0.001129686997118831,
      "p_sql": 1.7436161248130324e-10,
      "p_typescript": 9.23262396498045e-09
    },
    {
      "text": "def min_max(data):\n    min_val = min(data)\n    max_val = max(data)\n    return min_val, max_val\n \nmin_val, max_val = min_max([-2, 15, 4, 8, 11])\n \nprint('Minimum Value: ', min_val)\nprint('Maximum Value: ', max_val)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.007096368242507507,
      "p_css": 0.33370194578193635,
      "p_html": 0.14779963871853133,
      "p_java": 0.00248457315071088,
      "p_javascript": 0.12536556638267105,
      "p_matlab": 0.24206099784240095,
      "p_python": 0.053917989670362404,
      "p_sql": 0.03220137856936369,
      "p_typescript": 0.05537154164151581
    },
    {
      "text": "def removeVowels(str):\n    vowels = ('a', 'e', 'i', 'o', 'u') \n    res = \"\"\n    for char in str:\n        if char.lower() not in vowels:\n            res += char\n    return res\n\nprint(removeVowels(\"Hello World\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004651783467315476,
      "p_css": 0.0014045803634348485,
      "p_html": 0.0008594491555636885,
      "p_java": 1.8952421533909434e-10,
      "p_javascript": 0.004571597106364363,
      "p_matlab": 9.646261930785527e-05,
      "p_python": 0.9876734474253895,
      "p_sql": 0.0007227760762257689,
      "p_typescript": 1.9903596874290274e-05
    },
    {
      "text": "import hashlib\n \ndef secure_hash(string):\n return hashlib.sha256(string.encode()).hexdigest()",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.339202494777504e-12,
      "p_css": 1.9269324036912484e-06,
      "p_html": 3.28774995479556e-07,
      "p_java": 0.999921769667227,
      "p_javascript": 1.187640768944797e-11,
      "p_matlab": 4.324412015536095e-09,
      "p_python": 6.140971709052393e-05,
      "p_sql": 1.4486368354556142e-05,
      "p_typescript": 7.419930097760305e-08
    },
    {
      "text": "def fibonacci(n):\n if n < 0:\n raise ValueError(\"Negative number\")\n if n == 0 or n == 1:\n return n\n return fibonacci(n-1) + fibonacci(n-2)\n \n# calculate 9th Fibonacci number\nprint(fibonacci(9))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.273393995769494e-05,
      "p_css": 4.406401366178444e-05,
      "p_html": 2.434207996826493e-05,
      "p_java": 1.5297545740825604e-06,
      "p_javascript": 6.998992445874667e-06,
      "p_matlab": 9.17096052161422e-06,
      "p_python": 0.9998819423328065,
      "p_sql": 4.644430964339188e-06,
      "p_typescript": 1.4573495099852565e-05
    },
    {
      "text": "def binary_search(lst, target):\n    left = 0\n    right  = len(lst) - 1\n\n    while left <= right:\n        mid = (right + left) // 2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00022612797661770976,
      "p_css": 0.0005036149051194733,
      "p_html": 0.0004937412916495129,
      "p_java": 5.4521983726725454e-05,
      "p_javascript": 8.775091996242822e-05,
      "p_matlab": 8.279749717184242e-05,
      "p_python": 0.9974594620132629,
      "p_sql": 0.0008743905084543403,
      "p_typescript": 0.00021759290403489955
    },
    {
      "text": "def check_type(num):\n    if num % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4105037638512491e-05,
      "p_css": 6.287136060360937e-08,
      "p_html": 1.9484913756408478e-05,
      "p_java": 1.2579241144718254e-06,
      "p_javascript": 3.4609801642832957e-06,
      "p_matlab": 0.9833585794081873,
      "p_python": 0.016590216125796645,
      "p_sql": 6.603699679976384e-06,
      "p_typescript": 6.229039302032842e-06
    },
    {
      "text": "def print_product_names():\n    unscanned_barcodes = [barcodes] #list of unscanned barcodes\n\n    while len(unscanned_barcodes) > 0:\n        barcode = unscanned_barcodes.pop(0)\n        product_name = scan_barcode(barcode) #function that returns product name\n        print(product_name)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.00018538604166034965,
      "p_css": 0.0002034079025052008,
      "p_html": 0.00032660347808893624,
      "p_java": 0.003211981103186985,
      "p_javascript": 0.9831498319944193,
      "p_matlab": 0.0012824783473918834,
      "p_python": 0.010762499313007148,
      "p_sql": 0.0007560941605414743,
      "p_typescript": 0.00012171765919876811
    },
    {
      "text": "class Rectangle:\n   def __init__(self, length, width):\n      self.length = length\n      self.width  = width",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005922986010174729,
      "p_css": 0.0027431920756565017,
      "p_html": 0.006247832146651012,
      "p_java": 9.892063533847649e-05,
      "p_javascript": 0.01174277376449647,
      "p_matlab": 3.533440353229972e-05,
      "p_python": 0.8680651888531502,
      "p_sql": 0.11019240638109432,
      "p_typescript": 0.00028205313906320734
    },
    {
      "text": "def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n+1): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n\nprint(Fibonacci(10))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.1940439496250764e-07,
      "p_css": 3.7642039259542406e-07,
      "p_html": 1.1913982973382088e-06,
      "p_java": 6.665480649818584e-09,
      "p_javascript": 1.944693004041676e-08,
      "p_matlab": 9.588017044480214e-06,
      "p_python": 0.9999881131227605,
      "p_sql": 3.708331101390764e-07,
      "p_typescript": 1.469158929047562e-08
    },
    {
      "text": "def find_target(nums, target):\n  for i in range(len(nums)):\n    if nums[i] == target:\n      return i\n  return -1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.6053790790019898e-06,
      "p_css": 2.2197986306919275e-06,
      "p_html": 5.29803340231318e-06,
      "p_java": 3.8446616919680014e-07,
      "p_javascript": 3.250420908245144e-07,
      "p_matlab": 0.00014925435605882346,
      "p_python": 0.9998266643507232,
      "p_sql": 1.2490452680680593e-05,
      "p_typescript": 1.7581211654182885e-06
    },
    {
      "text": "public class OddNumber {\n    public static boolean isOdd(int x) {\n        return (x % 2 == 1);\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {2, 5, 6, 9};\n\n        for (int n : nums) {\n            if (isOdd(n)) {\n                System.out.println(n + \" is odd\");\n            }\n        }\n    }\n}",
      "y_true": "java",
      "pred_label": "java",
      "p_bash": 9.746719430065252e-54,
      "p_css": 2.924560162257348e-56,
      "p_html": 1.388633481749836e-53,
      "p_java": 1.0,
      "p_javascript": 9.074913553069055e-65,
      "p_matlab": 1.160408118658038e-83,
      "p_python": 7.421495350192891e-53,
      "p_sql": 3.7174912628592075e-56,
      "p_typescript": 1.8289655851306062e-53
    },
    {
      "text": "class Timer:\n  def __init__(self):\n    self.start_time = 0\n    self.end_time = 0\n    \n  def start(self):\n    self.start_time = time.time()\n    \n  def end(self):\n    self.end_time = time.time()\n\n  def elapsed(self):\n    return self.end_time - self.start_time",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.7097103451852385e-05,
      "p_css": 0.01231426087843384,
      "p_html": 0.045723700988802095,
      "p_java": 2.7523301584248622e-06,
      "p_javascript": 1.7080504537094496e-05,
      "p_matlab": 9.099632194664807e-07,
      "p_python": 0.6960120052292385,
      "p_sql": 0.24582848287365808,
      "p_typescript": 7.371012850073665e-05
    },
    {
      "text": "import pandas as pd\n\n#Variable to indicate presence of Header\nhas_header = False\n\n#Read CSV\ndata = pd.read_csv('mydata.csv',header=None) \n\n#Check for presence of Header\nif data.iloc[0,0] != 'Column1':\n  has_header = True\n\n#Read again with header\nif has_header:\n  data = pd.read_csv('mydata.csv')",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.000839616406454808,
      "p_css": 0.1805984168593693,
      "p_html": 0.09645606537203398,
      "p_java": 0.0006678047013072155,
      "p_javascript": 0.014403692996193212,
      "p_matlab": 0.016803809440060966,
      "p_python": 0.2163068009206171,
      "p_sql": 0.27611951213128916,
      "p_typescript": 0.19780428117267418
    },
    {
      "text": "# Calculate distance between two points\ndef findDistance(x1, x2):\n return abs(x2 - x1)\n\nx1 = -3\nx2 = 4\ndistance = findDistance(x1, x2)\n\nprint(\"Distance:\", distance)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0027685441739277923,
      "p_css": 0.012180917918414004,
      "p_html": 0.007382353258303308,
      "p_java": 0.0055297970450234515,
      "p_javascript": 0.0012698335505304731,
      "p_matlab": 0.00024962130410043814,
      "p_python": 0.9448381467177923,
      "p_sql": 0.020286539448274236,
      "p_typescript": 0.005494246583634057
    },
    {
      "text": "def print_dict_alphabetically(d):\n sorted_dict = {k: d[k] for k in sorted(d)}\n for key, value in sorted_dict.items():\n  print(key, value)\n\nprint_dict_alphabetically({'a': 1, 'b': 2, 'c': 3})",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 8.438563084221431e-07,
      "p_css": 0.03291107266561503,
      "p_html": 6.815437127470888e-06,
      "p_java": 7.759282045939261e-08,
      "p_javascript": 5.194403742271347e-06,
      "p_matlab": 0.9670704594029766,
      "p_python": 1.1370090640271391e-07,
      "p_sql": 4.418050654281792e-06,
      "p_typescript": 1.004889849210185e-06
    },
    {
      "text": "# Sort the dataset according to age\nsorted_dataset = sorted(dataset, key=lambda x: x['age'])\n\n# Output the sorted dataset\nfor record in sorted_dataset:\n print(record)\n\n# Output:\n{'name': 'Benjamin', 'age': 17}\n{'name': 'Adam', 'age': 20}\n{'name': 'Olivia', 'age': 20}\n{'name': 'Sophia', 'age': 19}\n{'name': 'Adam', 'age': 23}\n{'name': 'Noah', 'age': 22}\n{'name': 'Ethan', 'age': 24}\n{'name': 'Mia', 'age': 25}\n{'name': 'Ava', 'age': 26}\n{'name': 'Isabella', 'age': 27}\n{'name': 'John', 'age': 30}\n{'name': 'Jasper', 'age': 30}\n{'name': 'Daniel', 'age': 33}\n{'name': 'Liam', 'age': 35}\n{'name': 'Emma', 'age': 35}\n{'name': 'Charlotte', 'age': 38}\n{'name': 'Eva', 'age': 45}\n{'name': 'Amelia', 'age': 44}\n{'name': 'Eric', 'age': 40}\n{'name': 'Levi', 'age': 40}",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 5.252533018513214e-05,
      "p_css": 0.03084933655143504,
      "p_html": 0.00010234368555476479,
      "p_java": 0.9688797214557885,
      "p_javascript": 3.9176011376206393e-10,
      "p_matlab": 1.0630855465748994e-06,
      "p_python": 0.00011362287492146643,
      "p_sql": 5.350721770391646e-07,
      "p_typescript": 8.515526314959073e-07
    },
    {
      "text": "import math\n\ndef closest_pair(points):\n closest_pair = None\n closest_distance = float('inf')\n for i in range(len(points)):\n for j in range(i + 1, len(points)):\n distance = calc_distance(points[i], points[j])\n if distance < closest_distance:\n closest_distance = distance\n closest_pair = (points[i], points[j])\n\n return closest_pair, closest_distance\n\ndef calc_distance(p1, p2):\n return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)\n\npoints = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\nclosest_pair, closest_distance = closest_pair(points)\n\nprint(closest_pair) # prints ([2, 3], [3, 4])\nprint(closest_distance) # prints 1.0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00403577023458202,
      "p_css": 0.005129104662176365,
      "p_html": 0.0023169041678777376,
      "p_java": 3.923150003977384e-05,
      "p_javascript": 0.00025210922375005357,
      "p_matlab": 0.006534789331645297,
      "p_python": 0.9796890467569327,
      "p_sql": 0.001283742352494655,
      "p_typescript": 0.0007193017705013631
    },
    {
      "text": "{\n \"name\": \"John Doe\",\n \"age\": 34,\n \"skills\": [\n  \"JavaScript\",\n  \"Python\"\n ]\n}",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9967205442148348,
      "p_css": 3.2964159150199683e-05,
      "p_html": 0.000442941334187982,
      "p_java": 9.38400248682638e-06,
      "p_javascript": 0.00020926296636794637,
      "p_matlab": 0.0025277477206941206,
      "p_python": 1.6826883167091417e-06,
      "p_sql": 1.5483061934724258e-06,
      "p_typescript": 5.392460776789505e-05
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_url_links(url):\n    # query the website and return the html to the variable\n    page = requests.get(url)\n    \n    # parse the html using beautiful soup and store in variable `soup`\n    soup = BeautifulSoup(page.content, 'html.parser')\n    \n    # Take out the <div> of name and get its value\n    links = soup.find_all('a')\n    for link in links:\n        print(link.get('href'))\n\nget_url_links('https://www.example.com/')",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 2.1875702591377295e-13,
      "p_css": 7.048452824606725e-05,
      "p_html": 0.9523220291474765,
      "p_java": 0.04673343027820503,
      "p_javascript": 9.34558488081612e-06,
      "p_matlab": 2.4696830167059193e-07,
      "p_python": 4.504713912174291e-07,
      "p_sql": 1.138170817801448e-06,
      "p_typescript": 0.0008628748504620751
    },
    {
      "text": "import re\n\ndef categorize_text(text):\n    \"\"\"Categorizes the given text into positive, negative or neutral.\"\"\"\n    text = text.lower()\n    if re.search(r\"\\b(happy|glad|fun)\\b\", text):\n        return \"positive\"\n    elif re.search(r\"\\b(sad|angry|fearful)\\b\", text):\n        return \"negative\"\n    else:\n        return \"neutral\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.955438086456593e-05,
      "p_css": 0.004052879906020183,
      "p_html": 0.0036007326459548037,
      "p_java": 0.0002735078331479874,
      "p_javascript": 0.0009970940372958912,
      "p_matlab": 3.9739327385796966e-05,
      "p_python": 0.9583070442427581,
      "p_sql": 0.0005243360719849964,
      "p_typescript": 0.032185111554587656
    },
    {
      "text": "import random\nrand_nums = [None] * 10\nfor i in range(10):\n rand_nums[i] = random.random()\nprint(rand_nums)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00014040956497826668,
      "p_css": 0.0002862511153379346,
      "p_html": 0.00040208178014581404,
      "p_java": 6.6288372332625495e-06,
      "p_javascript": 2.6022705902103175e-05,
      "p_matlab": 0.03145205300910365,
      "p_python": 0.9672293219843558,
      "p_sql": 0.00037096015752429763,
      "p_typescript": 8.627084541875739e-05
    },
    {
      "text": "import requests\nimport bs4\n\ndef download_news(url):\n    r = requests.get(url)\n    soup = bs4.BeautifulSoup(r.content, 'lxml')\n    links = [link.get('href') for link in soup.find_all('a')]\n    \n    for link in links:\n        r = requests.get(link)\n        download_name = link.split('/')[-1]\n        with open(download_name, 'w') as f:\n            f.write(r.text)\n            print(\"Downloaded article:\", download_name)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.7153979688782118e-05,
      "p_css": 0.01087470599396846,
      "p_html": 0.018300453952984998,
      "p_java": 6.485213922470313e-05,
      "p_javascript": 0.00013702676193565498,
      "p_matlab": 0.4127047755226733,
      "p_python": 0.5463219024067604,
      "p_sql": 0.006066782468910604,
      "p_typescript": 0.005502346773853105
    },
    {
      "text": "def counting(nums):\n    result={}\n    for num in nums:\n        if num in result:\n            result[num]+=1\n        else:\n            result[num]=1\n    return result\n\nnums=[1, 3, 5, 6, 1, 2, 5, 3]\nresult=counting(nums)\nprint(result)\n# Output: {1: 2, 3: 2, 5: 2, 6: 1, 2: 1}",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 3.5362393726021026e-06,
      "p_css": 5.800240714521224e-07,
      "p_html": 5.48903609625468e-06,
      "p_java": 1.3317605283772427e-07,
      "p_javascript": 2.2231282588962864e-06,
      "p_matlab": 0.5993049509691768,
      "p_python": 0.4006421331200131,
      "p_sql": 3.9444388263761864e-05,
      "p_typescript": 1.509918694234513e-06
    },
    {
      "text": "for a in range(1, 26):\n    for b in range(1, 26):\n        for c in range(1, 26):\n            if (a*a + b*b == c*c and a+b+c == 25):\n                print(\"Pythagorean triplet: \" + str(a) + \", \" + str(b) + \", \" + str(c))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.455050274826338e-07,
      "p_css": 2.3694757427120674e-07,
      "p_html": 1.994986824336174e-05,
      "p_java": 1.4776768416800617e-07,
      "p_javascript": 1.0746758461413231e-06,
      "p_matlab": 0.985233175590836,
      "p_python": 0.014736970824360153,
      "p_sql": 4.054847646045161e-06,
      "p_typescript": 3.4439727823581015e-06
    },
    {
      "text": "class CRUD:\n    def __init__(self):\n        self.records = []\n    \n    def create(self,data):\n        record = data\n        self.records.append(record)\n    \n    def read(self):\n        return self.records\n \n    def update(self,index,data):\n        self.records[index] = data\n \n    def delete(self,index):\n        self.records.pop(index)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0001496011721108088,
      "p_css": 0.02421697660009562,
      "p_html": 0.27742041941591133,
      "p_java": 2.891667070777629e-06,
      "p_javascript": 4.31869052666335e-05,
      "p_matlab": 4.293842621005607e-06,
      "p_python": 0.18755486940886718,
      "p_sql": 0.5101342869093748,
      "p_typescript": 0.0004734740786819311
    },
    {
      "text": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef find_prime_numbers(a, b):\n    result = []\n    for num in range(a, b + 1):\n        if is_prime(num):\n            result.append(num)\n    return result\n\n\nstart = 2\nend = 20\nprint(find_prime_numbers(start, end))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.398205303425225e-08,
      "p_css": 1.366077731670807e-09,
      "p_html": 4.2830737810634633e-07,
      "p_java": 2.161072085963471e-09,
      "p_javascript": 7.547287148423904e-09,
      "p_matlab": 0.10323929517653029,
      "p_python": 0.8967598374612142,
      "p_sql": 3.54323826704554e-07,
      "p_typescript": 2.967456060797235e-08
    },
    {
      "text": "def is_prime(n):\n    '''\n    Function to check if the given number is a prime\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.7093860137647525e-07,
      "p_css": 5.292680180968633e-07,
      "p_html": 6.864852894857207e-06,
      "p_java": 5.0830955861626547e-08,
      "p_javascript": 0.0005174738306152767,
      "p_matlab": 9.743926849763426e-05,
      "p_python": 0.9993595703160035,
      "p_sql": 9.751033214951684e-06,
      "p_typescript": 8.049661198467656e-06
    },
    {
      "text": "import torch.nn as nn\n\nclass ANN(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # Input layer\n        self.fc1 = nn.Linear(50, 64) # 50 input units, 64 neurons in the hidden layer\n        self.relu1 = nn.ReLU()\n        # Hidden layer 1\n        self.fc2 = nn.Linear(64, 32)\n        self.relu2 = nn.ReLU()\n        # Hidden layer 2\n        self.fc3 = nn.Linear(32, 16)\n        self.relu3 = nn.ReLU()\n        # Output layer\n        self.fc4 = nn.Linear(16, 3)\n        self.sigmoid = nn.Sigmoid()\n \n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu1(x)\n        x = self.fc2(x)\n        x = self.relu2(x)\n        x = self.fc3(x)\n        x = self.relu3(x)\n        x = self.fc4(x)\n        x = self.sigmoid(x)\n        return x",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0017024974005102477,
      "p_css": 0.03316318356616533,
      "p_html": 0.229223672093803,
      "p_java": 3.937707740794358e-05,
      "p_javascript": 0.0006075225914010552,
      "p_matlab": 7.198042813886275e-05,
      "p_python": 0.5826061751513213,
      "p_sql": 0.1515181260976374,
      "p_typescript": 0.0010674655936147835
    },
    {
      "text": "while True:\n    # Show game board\n    print(\"Welcome to your game!\")\n\t\n    # Get user input\n    user_action = input('What would you like to do? ')\n\t\n    # Process user input\n    if user_action == 'quit':\n        break\n\t\t\n    # Do something with user input\n    elif user_action == 'play':\n        print('Playing...')\n    else:\n        print('Invalid input.')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.048217706924895215,
      "p_css": 0.15378822393903013,
      "p_html": 0.03394622245300706,
      "p_java": 0.00015053718572308504,
      "p_javascript": 0.0008039653203849156,
      "p_matlab": 0.0008218167805745133,
      "p_python": 0.7228254660014404,
      "p_sql": 0.03703047492169368,
      "p_typescript": 0.0024155864732511648
    },
    {
      "text": "def classify(data, categories):\n    \"\"\"Classify the given data into their respective category\"\"\"\n    classified_data = {}\n    for category, values in categories.items():\n        classified_data[category] = []\n        for value in data:\n            if value in values:\n                classified_data[category].append(value)\n    return classified_data",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.497830574042875e-07,
      "p_css": 0.0011360410617943437,
      "p_html": 3.611249264653359e-06,
      "p_java": 1.250272243103168e-07,
      "p_javascript": 1.2309362996550775e-06,
      "p_matlab": 0.9986961621727615,
      "p_python": 6.544357421992528e-09,
      "p_sql": 5.9062220991330495e-06,
      "p_typescript": 0.00015636700314174332
    },
    {
      "text": "def permute(s, l, r):\n if l == r:\n  print(''.join(s))\n else:\n  for i in range(l, r+1):\n   s[l], s[i] = s[i], s[l]\n   permute(s, l + 1, r)\n   s[l], s[i] = s[i], s[l] \n\ndef generate_all_permutations(s):\n n = len(s)\n permute(list(s), 0, n-1)\n\ns = 'ABC'\ngenerate_all_permutations(s)",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 0.00036795833740276576,
      "p_css": 0.0004335624362083664,
      "p_html": 0.0017380798619533295,
      "p_java": 2.6496224070131287e-05,
      "p_javascript": 0.00010847761025957746,
      "p_matlab": 0.5507382526100268,
      "p_python": 0.3621313183411719,
      "p_sql": 0.08398739891887233,
      "p_typescript": 0.00046845566003477374
    },
    {
      "text": "def gcd(a, b):\n if b == 0:\n  return a\n return gcd(b, a % b)\n\nresult = gcd(100, 12)\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0016774935893732125,
      "p_css": 0.03592565785517639,
      "p_html": 0.005214932913233753,
      "p_java": 0.00039069140489445,
      "p_javascript": 0.0024087109458904746,
      "p_matlab": 0.4821543557060589,
      "p_python": 0.46956668962193315,
      "p_sql": 0.0013728287452051291,
      "p_typescript": 0.0012886392182345672
    },
    {
      "text": "import random\n \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\nlength = 8\n \nrandstring = ''.join(random.choice(characters) for i in range(length))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.6816805680995953e-06,
      "p_css": 2.7343572815563215e-07,
      "p_html": 1.8949907274975603e-06,
      "p_java": 1.8227473751811747e-08,
      "p_javascript": 2.0222128471773727e-05,
      "p_matlab": 0.00024745685550495356,
      "p_python": 0.002299444012010901,
      "p_sql": 0.9974276236019461,
      "p_typescript": 3.850675684555885e-07
    },
    {
      "text": "import random\n\nplayer_choice = ''\nwhile player_choice.lower() not in ['rock','paper','scissors']:\n player_choice = input('Enter your choice (Rock, Paper, Scissors): ')\n\ncomputer_choice = random.choice(['rock', 'paper', 'scissors'])\n\nif (player_choice.lower() == 'rock' and computer_choice.lower() == 'scissors') or \\\n (player_choice.lower() == 'paper' and computer_choice.lower() == 'rock') or \\\n (player_choice.lower() == 'scissors' and computer_choice.lower() == 'paper'):\n print('You Win!')\nelif (player_choice.lower() == 'rock' and computer_choice.lower() == 'paper') or \\\n (player_choice.lower() == 'paper' and computer_choice.lower() == 'scissors') or \\\n (player_choice.lower() == 'scissors' and computer_choice.lower() == 'rock'):\n print('You Lose!')\nelse:\n print('It\\'s a tie!')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005752114281042532,
      "p_css": 0.044502398891915346,
      "p_html": 0.012803411727395835,
      "p_java": 0.0005337566017541185,
      "p_javascript": 0.002320328069969035,
      "p_matlab": 0.004172546887614687,
      "p_python": 0.7218450634058441,
      "p_sql": 0.0027393084559783195,
      "p_typescript": 0.20533107167848588
    },
    {
      "text": "def replace_digit(str, num):\n    new_str = \"\"\n    for char in str:\n        if char.isnumeric():\n            new_str += str(num)\n        else:\n            new_str += char\n    \n    return new_str\n\nnew_str = replace_digit(str, num)\nprint(new_str)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007260094422748594,
      "p_css": 0.00018796059455705098,
      "p_html": 0.004275854799874549,
      "p_java": 8.65362202205993e-05,
      "p_javascript": 0.003912195383260246,
      "p_matlab": 0.22564996140955743,
      "p_python": 0.7638370401946666,
      "p_sql": 0.0010471732313810738,
      "p_typescript": 0.0002772687242075895
    },
    {
      "text": "def sum_list(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.518586474146057e-06,
      "p_css": 0.00012459431213256026,
      "p_html": 5.064114142381672e-05,
      "p_java": 0.00013883965746699475,
      "p_javascript": 1.794086657141545e-05,
      "p_matlab": 4.380627133929943e-08,
      "p_python": 0.9996418755689815,
      "p_sql": 9.462542265481296e-06,
      "p_typescript": 1.2083518412813744e-05
    },
    {
      "text": "#import necessary libraries\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n#read dataset containing emails\ndataset = pd.read_csv('emails.csv')\n\n#split data into features and labels\nX = dataset['message']\ny = dataset['label']\n\n#transform text into numerical values\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(X)\n\n#split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n#build Logistic Regression model\nlog_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\n\n#evaluate model\nscore = log_reg.score(X_test, y_test)\nprint('Model accuracy: ', score)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.017174411788791942,
      "p_css": 0.4456144113568411,
      "p_html": 0.007699399664830112,
      "p_java": 7.669325819525482e-06,
      "p_javascript": 1.7766716009316225e-05,
      "p_matlab": 2.4823196475154264e-05,
      "p_python": 0.5253343092764475,
      "p_sql": 0.0001819552797984184,
      "p_typescript": 0.003945253394986965
    },
    {
      "text": "import sqlite3\nimport xml.etree.ElementTree\n\nxml_str = '''\n<root> \n  <person> \n    <name>John Doe</name> \n    <age>32</age> \n  </person> \n  <person> \n    <name>Jane Doe</name> \n    <age>30</age> \n  </person> \n</root>\n'''\n\nconn = sqlite3.connect('test.db')\ncur = conn.cursor()\n\nsql_command = '''\nCREATE TABLE IF NOT EXISTS people ( \nname VARCHAR(20), \nage INTEGER\n);'''\ncur.execute(sql_command)\n\nroot = xml.etree.ElementTree.fromstring(xml_str)\npeople = root.findall('person')\nfor person in people:\n name = person.find('name').text\n age = person.find('age').text\n cur.execute(\"INSERT INTO people VALUES (?, ?)\", (name, age))\n\nconn.commit()\nconn.close()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.007975667868870022,
      "p_css": 0.020985946418622742,
      "p_html": 0.006836013415954384,
      "p_java": 0.10899079387946073,
      "p_javascript": 3.924170744290826e-05,
      "p_matlab": 0.0007492806659721644,
      "p_python": 0.011342790723884603,
      "p_sql": 0.8421775087531883,
      "p_typescript": 0.0009027565666041948
    },
    {
      "text": "def reverse_string(string):\n    return string[::-1]",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.7366216442831176e-15,
      "p_css": 8.51669447569561e-09,
      "p_html": 8.516402071572627e-10,
      "p_java": 0.9999719696032902,
      "p_javascript": 2.7477559558206786e-17,
      "p_matlab": 8.620794651730033e-13,
      "p_python": 2.7859431338781684e-05,
      "p_sql": 1.6140886888371015e-07,
      "p_typescript": 1.873035263424416e-10
    },
    {
      "text": "def shortest_path(matrix, start, end):\n  queue = []\n  min_len = math.inf\n  queue.append([start])\n  while queue:\n    path = queue.pop(0)\n    x, y = path[-1]\n    if (x, y) == end:\n      if len(path) < min_len:\n        min_len = len(path)\n    for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]:\n      new_x, new_y = x + dx, y + dy\n      if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]):\n        if matrix[new_x][new_y] == 0:\n          queue.append(path + [(new_x, new_y)])\n  return min_len",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005237419578245269,
      "p_css": 0.03273019132704493,
      "p_html": 0.004366133956870109,
      "p_java": 0.0004528190471754758,
      "p_javascript": 0.0009932851600924478,
      "p_matlab": 0.10994452544733982,
      "p_python": 0.8166964719071834,
      "p_sql": 0.02065174950284938,
      "p_typescript": 0.008927404073198968
    },
    {
      "text": "def mergeSortedLists(list1, list2):\n    list3 = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            list3.append(list1[i])\n            i += 1\n        else:\n            list3.append(list2[j])\n            j += 1\n\n    while i < len(list1):\n        list3.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        list3.append(list2[j])\n        j += 1\n    return list3\n\nlist3 = mergeSortedLists(list1, list2);\nconsole.log(list3);",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0002989210983685119,
      "p_css": 0.005096238755836769,
      "p_html": 0.005188139878572922,
      "p_java": 0.00048514320242670116,
      "p_javascript": 0.5295944848208144,
      "p_matlab": 0.050584207058140936,
      "p_python": 0.4009614043251961,
      "p_sql": 0.0016022729426400926,
      "p_typescript": 0.006189187918003565
    },
    {
      "text": "def filter_strings(lst, substring):\n    filtered_lst = []\n    for string in lst:\n        if substring in string:\n            filtered_lst.append(string)\n    return filtered_lst\n\nprint(filter_strings([\"Hello\", \"World\", \"Hey\"], \"or\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.3617690272218494e-05,
      "p_css": 0.003352269842989086,
      "p_html": 0.0008598039257732532,
      "p_java": 0.000337647053523954,
      "p_javascript": 9.456581503646943e-08,
      "p_matlab": 0.00023332996391072164,
      "p_python": 0.9928696976651662,
      "p_sql": 0.002222830953718529,
      "p_typescript": 0.0001107083388311183
    },
    {
      "text": "#!/usr/bin/python3\n'''Run Scalability-1.\nSee README.md for details.\n'''\n\nimport sys, subprocess, os.path\nfrom Util import intersperse\n\ndef main():\n    skip = {\n        'Measure' : False,\n    }\n        \n    basedir = ''\n\n    dirs = {\n        'Instances' : os.path.join(basedir, 'Data', 'Instances'),\n        'Statistics' : os.path.join(basedir, 'Data', 'Statistics', 'Scalability-1'),\n        'Bin' : '../../Build',\n    }\n    \n    files = {\n        'Instances' : [\n            os.path.join(dirs['Instances'], 'instances500.csv'),\n            os.path.join(dirs['Instances'], 'instances1000.csv'),\n            os.path.join(dirs['Instances'], 'instances2500.csv'),\n            os.path.join(dirs['Instances'], 'instances5000.csv'),\n            os.path.join(dirs['Instances'], 'instances7500.csv'),\n            os.path.join(dirs['Instances'], 'instances10000.csv')\n        ],\n    }\n    \n    progs = {\n        'Scalability' : os.path.join(dirs['Bin'],'Experiments/02-ScalabilityOfClusteringAlgorithm/Scalability'),\n    }\n    \n    params = {\n        'clusters' : [4, 8, 16, 32, 64],\n        'histograms' : 7*8, # 7 scales * 8 features\n        'burnin' : 10,\n        'iterations' : 100,\n        'branching' : 1,\n    }\n       \n    if skip['Measure']:\n        print( 'Skipping: Measure' )\n    else:\n        print( 'Measuring' )\n        for instanceMatrix in files['Instances']:\n            args = [\n                progs['Scalability'],\n                '--input', instanceMatrix,\n                '--nHistograms', \"%d\" % params['histograms'],\n                '--output', os.path.join(dirs['Statistics'], 'stats_' + os.path.basename(instanceMatrix)),\n                '--burnin', \"%d\" % params['burnin'],\n                '--iterations', \"%d\" % params['iterations'],\n                '--branching', \"%d\" % params['branching']\n            ] + list(intersperse('--clusters', (\"%d\" % k for k in params['clusters'])))\n        \n            print(' '.join(args))        \n            if subprocess.call( args ) != 0:\n                print( 'Error measuring', instanceMatrix )\n                return 1\n    return 0\n\nif __name__ == '__main__':\n    sys.exit( main() )\n",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.01692676319510385,
      "p_css": 0.016310519591813843,
      "p_html": 0.00017484026216604452,
      "p_java": 4.024836022038416e-06,
      "p_javascript": 4.8861420446586664e-05,
      "p_matlab": 4.9476434527562144e-05,
      "p_python": 0.00020728334302625256,
      "p_sql": 0.9661754274913116,
      "p_typescript": 0.00010280342558210654
    },
    {
      "text": "def count_words(given_sentence):\n    return(len(given_sentence.split()))\n\ngiven_sentence = \"This is a given sentence\"\nword_count = count_words(given_sentence)\nprint(\"Number of words in given sentence is: \", word_count)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.9438585962946806e-05,
      "p_css": 0.0007654876729160442,
      "p_html": 0.00065178752774154,
      "p_java": 8.478602472859113e-05,
      "p_javascript": 8.168509262366234e-05,
      "p_matlab": 9.138345765702561e-06,
      "p_python": 0.9913783384955943,
      "p_sql": 0.006249434126972336,
      "p_typescript": 0.0007499041276948396
    },
    {
      "text": "def fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)\n    \nfor i in range(0, n + 1):\n    print(fibonacci(i))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.4725293612655057e-07,
      "p_css": 1.6627898236049748e-07,
      "p_html": 6.749787729175388e-07,
      "p_java": 1.891752572929026e-08,
      "p_javascript": 4.67048661368373e-08,
      "p_matlab": 1.0916275342392073e-05,
      "p_python": 0.9999874971055149,
      "p_sql": 4.484924630851903e-07,
      "p_typescript": 8.399359624951562e-08
    },
    {
      "text": "words = [\"correct\", \"tango\", \"apple\", \"banana\"] \n\n# Sort words in reverse alphabetical order \nwords.sort(reverse=True) \n\n# Print list in descending order \nprint(words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002638563111703196,
      "p_css": 0.014670369257345023,
      "p_html": 0.009844665270539982,
      "p_java": 3.0352216285882203e-05,
      "p_javascript": 0.0019422892329363072,
      "p_matlab": 0.0007438708259928523,
      "p_python": 0.92830285741176,
      "p_sql": 0.04419330351281971,
      "p_typescript": 8.435961149969533e-06
    },
    {
      "text": "def filter_within_length(strings, length):\n    result = []\n    for string in strings:\n        if len(string) >= length:\n            result.append(string)\n    return result\n\nstrings = [\"Java\", \"C++\", \"Swift\", \"Python\", \"Kotlin\"]\nresult = filter_within_length(strings, 4)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.708527613790358e-07,
      "p_css": 0.003476184063727596,
      "p_html": 2.096803924013136e-05,
      "p_java": 0.01588383862659968,
      "p_javascript": 8.199213849668766e-08,
      "p_matlab": 1.0772414086499254e-05,
      "p_python": 0.9516218709259958,
      "p_sql": 0.028931352950943227,
      "p_typescript": 5.396013450716945e-05
    },
    {
      "text": "import pandas as pd\n\n# Create a dataframe from the input data\ndf = pd.DataFrame([\n    {\"customer_id\": 1, \"month\": 1, \"amount\": 40000},\n    {\"customer_id\": 2, \"month\": 1, \"amount\": 10000},\n    {\"customer_id\": 3, \"month\": 1, \"amount\": 20000},\n    {\"customer_id\": 1, \"month\": 2, \"amount\": 30000},\n    {\"customer_id\": 2, \"month\": 2, \"amount\": 15000},\n    {\"customer_id\": 3, \"month\": 2, \"amount\": 50000},\n])\n\n# Group by customer and get the average purchase amount in each month\nresult = df.groupby('customer_id')['amount'].mean().sort_values(ascending=False).head(5)\n\n# Print the result\nprint(result)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.027763001806389825,
      "p_css": 0.6690891365716313,
      "p_html": 0.0052782043987078696,
      "p_java": 0.00018017476554197406,
      "p_javascript": 0.006451934233742141,
      "p_matlab": 0.0005763736332209672,
      "p_python": 0.27259261460247175,
      "p_sql": 0.00470450366368909,
      "p_typescript": 0.013364056324605056
    },
    {
      "text": "def dfs(root):\n stack = [root]\n while stack:\n    node = stack.pop(-1) \n    print(node.data) \n       \n    if node.right:\n        stack.append(node.right) \n    if node.left:\n        stack.append(node.left)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0037119628704935445,
      "p_css": 0.07905560072382427,
      "p_html": 0.013328995996119301,
      "p_java": 0.0011365556118454437,
      "p_javascript": 0.0015407428954938688,
      "p_matlab": 0.1438923377867926,
      "p_python": 0.7031250885809488,
      "p_sql": 0.025964357024466846,
      "p_typescript": 0.02824435851001524
    },
    {
      "text": "def reverseString(s): \n    return s[::-1] \n  \nstring = \"hello world\"\n\nprint(\"Original String:\", string) \nprint(\"Reversed String:\", reverseString(string))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.685903727430112e-09,
      "p_css": 0.0003064482786147094,
      "p_html": 3.890586386128913e-05,
      "p_java": 0.8314357588759569,
      "p_javascript": 3.5882702712257475e-12,
      "p_matlab": 6.775729624242276e-09,
      "p_python": 0.1635572367475106,
      "p_sql": 0.0046594738927940626,
      "p_typescript": 2.163876040725487e-06
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Load the data\nwine_data = pd.read_csv(\"wine.csv\")\n\n# Split the data into training and test sets\nX = wine_data.drop(\"quality\", axis=1)\ny = np.array(wine_data[\"quality\"])\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Scale the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(128, input_shape=(len(X_train[0]),), activation=\"relu\"))\nmodel.add(Dense(64, activation=\"relu\"))\nmodel.add(Dense(32, activation=\"relu\"))\nmodel.add(Dense(16, activation=\"relu\"))\nmodel.add(Dense(1, activation=\"sigmoid\"))\n\n# Compile the model\nmodel.compile(optimizer=\"adam\", loss=\"mean_squared_error\", metrics=[\"accuracy\"])\n\n# Fit the model\nmodel.fit(\n X_train,\n y_train,\n validation_data=(X_test, y_test),\n epochs=500,\n batch_size=32\n)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7559521086404642,
      "p_css": 0.001723954505688748,
      "p_html": 0.029317371182456652,
      "p_java": 8.367894807984576e-05,
      "p_javascript": 1.456732430781577e-05,
      "p_matlab": 2.2885583538981976e-07,
      "p_python": 0.19834548178225184,
      "p_sql": 1.7450229359309002e-07,
      "p_typescript": 0.014562434258621915
    },
    {
      "text": "# Python program to find shortest path\n# using Dijkstra's Algorithm \n  \nimport math \n  \n#function to find the shortest path \ndef dijkstra(graph, src, dest, V): \n    # dist[i] will hold the shortest distance from src to i \n    dist = [math.inf] * V \n\n    # sptSet[i] will true if vertex i is \n    # included / in shortest path tree or \n    # shortest distance from src to i is finalized \n    sptSet = [False] * V \n\n    # Initialize all distances as INFINITE and \n    # stpSet[] as false \n    dist[src] = 0\n\n    # Find shortest path for all vertices \n    for _ in range(V): \n        u = minDistance(dist, sptSet) \n        sptSet[u] = True\n\n        # update dist value of adjacent vertices \n        # of the picked vertex. \n        for v in range(V): \n            if graph[u][v] and sptSet[v] == False and \\\n            dist[v] > dist[u] + graph[u][v]: \n                    dist[v] = dist[u] + graph[u][v] \n\n    # print the constructed distance array \n    print(\"Vertex distance from Source\")\n    for node in range(V): \n        print(node, '\\t', dist[node]) \n\n    # Get the shortest path from src to dest\n    path = getPath(dist, dest, src)\n    return path\n\ndef getPath(dist, dest, src):\n    path = [dest]\n    while dest != src:\n        for i in range(V):\n            if dist[dest] - dist[i] == graph[i][dest]:\n                path.append(i)\n                dest = i\n    path.reverse()\n    return path\n \ndef minDistance(dist, sptSet): \n    min = math.inf\n    for v in range(V): \n        if dist[v] < min and sptSet[v] == False: \n            min = dist[v] \n            min_index = v \n    return min_index\n\nV = 7\n# Print the shortest path\nprint(\"Shortest Path: {}\".format(dijkstra(Graph, 0, 6, V)))",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.2856689796975569,
      "p_css": 0.13029488775641768,
      "p_html": 0.01812701291745999,
      "p_java": 0.00010712202020185257,
      "p_javascript": 0.004625453924681961,
      "p_matlab": 0.09269795491424876,
      "p_python": 0.2984800685579937,
      "p_sql": 0.003367257467797184,
      "p_typescript": 0.16663126274364196
    },
    {
      "text": "import re\nfrom collections import Counter\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/frequent_words', methods=['POST'])\ndef frequent_words():\n    text = request.json['text']\n    words = re.findall(r'\\w+', text.lower())\n    count = Counter(words).most_common(10)\n    return jsonify(count)\n\nif __name__ == '__main__':\n    app.run()",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.004700644448652052,
      "p_css": 0.5920832631614044,
      "p_html": 0.027659578348679364,
      "p_java": 2.3439318448222187e-06,
      "p_javascript": 2.639914849642736e-05,
      "p_matlab": 1.5281586594067453e-05,
      "p_python": 0.34764364886528615,
      "p_sql": 0.02782894821372416,
      "p_typescript": 3.989229531858004e-05
    },
    {
      "text": "def common_in_two_lists(list1, list2):\n    common_elements = []\n    for number in list1:\n        if number in list2:\n            common_elements.append(number)\n    return common_elements",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00012880772919715423,
      "p_css": 0.0024094929869079625,
      "p_html": 0.0005584874559526937,
      "p_java": 3.8711709490523e-05,
      "p_javascript": 0.0001120317104903711,
      "p_matlab": 0.020552058522148576,
      "p_python": 0.9755804788992053,
      "p_sql": 0.00021288960383260372,
      "p_typescript": 0.0004070413827747482
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML from the URL\nurl = \"https://www.reddit.com/r/ProgrammerHumor/comments/hfpmoo/people_ask_me_why_i_learn_so_many_programming/\"\nresponse = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all the comments from the page\ncomments = []\nfor comment in soup.find_all(\"div\", class_=\"md\"):\n    comments.append(comment.text)\n\n# Print all the comments\nfor comment in comments:\n    print(comment)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 3.6274684369885793e-09,
      "p_css": 0.02146545738403603,
      "p_html": 0.9780054939627874,
      "p_java": 0.0003392683071447306,
      "p_javascript": 3.745157133683843e-05,
      "p_matlab": 1.884897801365881e-06,
      "p_python": 2.9642749625103018e-05,
      "p_sql": 4.1984005596671716e-05,
      "p_typescript": 7.881349420309839e-05
    },
    {
      "text": "for i in range(10):\n    print(\"Hello World!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.41476515019669813,
      "p_css": 1.0529973609951147e-08,
      "p_html": 3.109759994156008e-06,
      "p_java": 8.394556204681047e-24,
      "p_javascript": 1.9917773121338337e-05,
      "p_matlab": 0.2051608511185328,
      "p_python": 0.38005094706949527,
      "p_sql": 1.2513784162409056e-10,
      "p_typescript": 1.3427046902942278e-08
    },
    {
      "text": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005384551986428998,
      "p_css": 0.0023107855488017,
      "p_html": 0.005485601166149542,
      "p_java": 1.940726966797524e-05,
      "p_javascript": 0.00017941015412125237,
      "p_matlab": 0.0007114089596384586,
      "p_python": 0.9744047778617465,
      "p_sql": 0.011355729846675865,
      "p_typescript": 0.00014832720676976216
    },
    {
      "text": "def find_longest_string(arr):\n    longest_string = \"\"\n    for s in arr:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string\n\nstring_array = [\"Hello\", \"world\", \"Hi\", \"there\"]\nprint(find_longest_string(string_array))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.03241546247839719,
      "p_css": 0.0026413658971155547,
      "p_html": 0.0015644310200356882,
      "p_java": 1.610475695003946e-08,
      "p_javascript": 0.002756683698926445,
      "p_matlab": 0.6890972212093032,
      "p_python": 0.27090399823198485,
      "p_sql": 6.723367133937686e-05,
      "p_typescript": 0.0005535876881408792
    },
    {
      "text": "def find_gcd(num1, num2):\n    gcd = 1\n    while num2 != 0:\n        temp = num2\n        num2 = num1 % num2\n        num1 = temp\n        gcd = num1\n    return gcd",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0003027761147233752,
      "p_css": 0.0021278353265754284,
      "p_html": 0.001332321602666545,
      "p_java": 7.974041252235745e-05,
      "p_javascript": 0.0007429313122161737,
      "p_matlab": 0.9709307455447478,
      "p_python": 0.023168275193031117,
      "p_sql": 0.00036108187703104427,
      "p_typescript": 0.0009542926164862122
    },
    {
      "text": "import re\n\ndef chatbot_response(user_input):\n    user_input = user_input.lower()\n    \n    # Check for Greeting\n    if re.search(\"hello|hi|sup\", user_input):\n        return \"Hey there!\"\n    elif re.search(\"bye\", user_input):\n        return \"Goodbye\"\n    elif re.search(\"what's your name\", user_input):\n        return \"My name is ChatBot\"\n    else:\n        return \"I don't understand\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000305133497414506,
      "p_css": 0.003740399746979218,
      "p_html": 0.12722808988798032,
      "p_java": 0.04736883268624127,
      "p_javascript": 0.0024463564191455184,
      "p_matlab": 0.0007216910486016126,
      "p_python": 0.8137227314582751,
      "p_sql": 0.0017394487356900323,
      "p_typescript": 0.0027273165196723087
    },
    {
      "text": "def sort_strings_case_insensitive(input_list):\n  return sorted([string.strip().lower() for string in input_list])",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 9.79929827831795e-09,
      "p_css": 0.000408894573670866,
      "p_html": 4.367799242541762e-05,
      "p_java": 0.9675070756705307,
      "p_javascript": 1.8314433926919533e-09,
      "p_matlab": 2.7533092720816766e-06,
      "p_python": 0.031359140392995984,
      "p_sql": 0.0006692611465140121,
      "p_typescript": 9.185283849223591e-06
    },
    {
      "text": "import json\nimport sqlite3\n\ndata = {'name': 'John', 'age': 30, 'job': 'Software Engineer'}\n\nwith sqlite3.connect(\"database.db\") as con:\n cur = con.cursor()\n cur.execute(\"CREATE TABLE IF NOT EXISTS people(name TEXT, age INTEGER, job TEXT)\")\n cur.execute(\"INSERT INTO people (name, age, job) VALUES (?, ?, ?)\", (data['name'], data['age'], data['job']))\n con.commit()",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0003379860874896603,
      "p_css": 0.883386733745793,
      "p_html": 0.003222758423989187,
      "p_java": 0.0019633739350546965,
      "p_javascript": 1.0515205144411067e-06,
      "p_matlab": 5.265552135922126e-05,
      "p_python": 0.0019006029344323593,
      "p_sql": 0.10537961121683372,
      "p_typescript": 0.003755226614533733
    },
    {
      "text": "import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\n\ndata = pd.DataFrame(input)\n\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(data.text)\ny = data.label\n\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# Predictions\npredictions = model.predict(X)\nprint(predictions)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.05977399736940009,
      "p_css": 0.10783585510828356,
      "p_html": 0.0034764241676754994,
      "p_java": 1.552561353554285e-05,
      "p_javascript": 2.444831337449644e-05,
      "p_matlab": 2.2447113331540635e-05,
      "p_python": 0.8282256691568556,
      "p_sql": 1.4145680181728447e-05,
      "p_typescript": 0.0006114874773618644
    },
    {
      "text": "class Car(object):\n    \"\"\"A car object with attributes like model, colour and year\"\"\"\n\n    def __init__(self, model, colour, year):\n        self.model = model\n        self.colour = colour\n        self.year = year\n\n# Example\nmy_car = Car(\"Ford Mustang\", \"Red\", 2016)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.84274543218973e-05,
      "p_css": 0.003240326740362349,
      "p_html": 0.008688992089567162,
      "p_java": 0.8258488883333699,
      "p_javascript": 1.269306449078397e-07,
      "p_matlab": 1.6566762472474837e-05,
      "p_python": 0.16150848822484348,
      "p_sql": 5.8254243477239755e-05,
      "p_typescript": 0.0005699292209405382
    },
    {
      "text": "import matplotlib.pyplot as plt\nimport numpy as np\n\n#Create array with stock prices\nprices = [5, 10, 20, 25, 10, 8, 22]\n\n#Calculate EWMA\nweight = 0.9\nalpha = 1 - weight\n\newma = np.zeros_like(prices)\newma[0] = prices[0]\n\nfor i in range(1, len(prices)):\n    ewma[i] = weight*ewma[i-1] + alpha*prices[i]\n\n#Plot the EWMA\nplt.plot(ewma)\nplt.title('Exponentially Weighted Moving Average')\nplt.ylabel('Price')\nplt.xlabel('Time (days)')\nplt.show()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0027062909969673235,
      "p_css": 0.011898069820517942,
      "p_html": 0.07065025828317831,
      "p_java": 0.00010254975715850721,
      "p_javascript": 0.00011416754830286961,
      "p_matlab": 0.004335002557141159,
      "p_python": 0.8972591345580591,
      "p_sql": 0.0034518576660362453,
      "p_typescript": 0.009482668812638618
    },
    {
      "text": "import datetime\n \ndatetime_object = datetime.datetime.now()\nprint(datetime_object.strftime(\"%A, %B %d, %Y\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0019388596584170921,
      "p_css": 0.03469873096530323,
      "p_html": 0.004282665758650877,
      "p_java": 0.00018723013514902533,
      "p_javascript": 0.0008308448246338484,
      "p_matlab": 0.000550094522045299,
      "p_python": 0.9552292831140745,
      "p_sql": 0.0009859125605319612,
      "p_typescript": 0.0012963784611942479
    },
    {
      "text": "import pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\n\nquery = 'SELECT SUM(NUM1 + NUM2) AS SUM_NUM FROM df'\n\nsum_num = pd.read_sql_query(query, con=df.to_sql('df'))\nprint(sum_num)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0008700476789936784,
      "p_css": 0.18553731178613664,
      "p_html": 0.010077083277073882,
      "p_java": 0.00037707255546151207,
      "p_javascript": 0.0005856044962933322,
      "p_matlab": 0.001736629014337593,
      "p_python": 0.5727446068050356,
      "p_sql": 0.03880251994031948,
      "p_typescript": 0.1892691244463483
    },
    {
      "text": "def calculator():\n    while True:\n    print(\"Options:\")\n    print(\"Enter 'add' to add two numbers\")\n    print(\"Enter 'subtract' to subtract two numbers\")\n    print(\"Enter 'multiply' to multiply two numbers\")\n    print(\"Enter 'divide' to divide two numbers\")\n    print(\"Enter 'quit' to end the program\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.544256849974141e-08,
      "p_css": 1.2409517379807773e-09,
      "p_html": 1.997251728597051e-09,
      "p_java": 0.9999948195341567,
      "p_javascript": 1.0948599292915025e-08,
      "p_matlab": 2.2311464595216815e-19,
      "p_python": 5.0147503521742806e-06,
      "p_sql": 1.0024299628247926e-08,
      "p_typescript": 7.606182005092401e-08
    },
    {
      "text": "arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005544352544327129,
      "p_css": 0.03130576468176675,
      "p_html": 0.006645444839309368,
      "p_java": 0.00043893573468838635,
      "p_javascript": 0.0009853840650924566,
      "p_matlab": 0.031526596088828934,
      "p_python": 0.9228284339200793,
      "p_sql": 0.0002537201045370487,
      "p_typescript": 0.00047136802137069753
    },
    {
      "text": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ntotal = 0\n\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        total += matrix[i][j]\n\nprint(total)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.546338293708832e-07,
      "p_css": 4.94501298621836e-07,
      "p_html": 5.788149007902088e-06,
      "p_java": 6.57091038580242e-08,
      "p_javascript": 5.3209101125129636e-08,
      "p_matlab": 0.0015893255215519192,
      "p_python": 0.9983995037463379,
      "p_sql": 3.3263450181121928e-06,
      "p_typescript": 7.881847510118305e-07
    },
    {
      "text": "\"\"\"\nDesign an algorithm in Python to detect if a given tree is a binary search tree\n\"\"\"\n\n#Define the Node class\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\n# Define the isBST function \ndef isBST(root): \n    # Base condition\n    if root is None: \n        return True\n  \n    # Check if the value is within range\n    if root.val < getMaxValue(root.left) or root.val > getMinValue(root.right): \n        return False\n  \n    # Check the subtrees\n    if (not isBST(root.left)) or (not isBST(root.right)): \n        return False\n  \n    # Pass all test cases\n    return True\n  \n# Find the minimum value in a tree\ndef getMinValue(root): \n    if root is None: \n        return float(\"inf\") \n    minv = root.val \n    minv = min(minv, getMinValue(root.left)) \n    minv = min(minv, getMinValue(root.right)) \n    return minv\n  \n  \n# Find the maximum value in a tree\ndef getMaxValue(root): \n    if root is None: \n        return -float(\"inf\") \n    maxv = root.val \n    maxv = max(maxv, getMaxValue(root.left)) \n    maxv = max(maxv, getMaxValue(root.right)) \n    return maxv",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.057249716104170775,
      "p_css": 0.06282933619676893,
      "p_html": 0.021200865198871113,
      "p_java": 0.0004760177716869579,
      "p_javascript": 0.06752907712389833,
      "p_matlab": 0.012710968695515494,
      "p_python": 0.572724745092156,
      "p_sql": 0.1584454255270932,
      "p_typescript": 0.046833848289839275
    },
    {
      "text": "def get_larger_number_divisible_by_smaller(num1, num2):\n  max_num = max(num1, num2)\n  min_num = min(num1, num2)\n\n  return max_num if max_num % min_num == 0 else None\n\nresult = get_larger_number_divisible_by_smaller(10, 20)\nprint(result) # 20",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.368695022353477e-05,
      "p_css": 0.0014385570142549354,
      "p_html": 0.0005154691348323093,
      "p_java": 1.4838229770493002e-06,
      "p_javascript": 1.7629865788099366e-05,
      "p_matlab": 7.471501549478007e-06,
      "p_python": 0.9979167135988348,
      "p_sql": 4.320809925269528e-05,
      "p_typescript": 2.5780012287075936e-05
    },
    {
      "text": "#import necessary libraries\nimport nltk\nimport numpy as np\nfrom nltk.corpus import brown\nfrom nltk.tokenize import word_tokenize\n\n#initialize HMM \ndef hmm():\n    # load corpus\n    corpus = brown.tagged_sents(categories=['adventure','fiction','romance',\n                                            'humor','mystery','science_fiction'])\n\n    # split corpus and generate tags\n    train_data,test_data = corpus[:1000], corpus[1000:]\n    tags = set([tag for sent in train_data for (word,tag) in sent])\n\n    # initialize hmm\n    hmm = {tag:{tag:{0:0 for tag in tags} for tag in tags} }\n    hmm['start'] = {tag:0 for tag in tags}\n    hmm['end'] = {tag:0 for tag in tags}\n\n    # calculate initial probabilities\n    for sent in train_data:\n        for i in range(len(sent)):\n            word,tag = sent[i]\n            if i == 0:\n                hmm['start'][tag] += 1\n            else:\n                previous_tag = sent[i-1][1]\n                hmm[previous_tag][tag][0] += 1\n            hmm[tag][tag][word] = hmm[tag][tag].get(word, 0) + 1\n\n    # calculate transition probabilities\n    for previous_tag in hmm:\n        if previous_tag != 'start' and previous_tag != 'end':\n            total = sum(hmm[previous_tag][tag][0] for tag in hmm[previous_tag])\n            for tag in hmm[previous_tag]:\n                hmm[previous_tag][tag][0] /= total\n    return hmm\n\ndef predict(sentence, hmm):\n    sentence = sentence.lower()\n    tokenized_sentence = word_tokenize(sentence)\n    # assign default tag to each word\n    tagged_sentence = []\n    for word in tokenized_sentence:\n        tagged_sentence.append((word,'M'))\n\n    # calculate likelihood of each tag for each word\n    for i in range(len(tagged_sentence)):\n        word,tag = tagged_sentence[i]\n        if i == 0:\n            probs = {tag:hmm['start'][tag] for tag in hmm['start']}\n        else:\n            previous_tag = tagged_sentence[i-1][1]\n            probs = {tag:hmm[previous_tag][tag][0] * hmm[tag][tag].get(word, 0) \n                     for tag in hmm[previous_tag]}\n        max_prob, tag_chosen = max(probs.items(), key=lambda x:x[1])\n        tagged_sentence[i] = (word, tag_chosen)\n    return tagged_sentence",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 0.04013644127090412,
      "p_css": 0.04620616711320333,
      "p_html": 0.42146269717832113,
      "p_java": 0.00017170647581492775,
      "p_javascript": 0.0015142485264668809,
      "p_matlab": 0.3977369721271947,
      "p_python": 0.046669876033723356,
      "p_sql": 0.03674900289285259,
      "p_typescript": 0.009352888381518931
    },
    {
      "text": "def findMax(list): \n    max = list[0] \n    for i in range(1, len(list)): \n        if list[i] > max: \n            max = list[i] \n    return max\n\nlist = [1, 2, 3, 9, 8, 4] \nprint(\"The maximum element in the list is:\", findMax(list))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.6696127737586074e-05,
      "p_css": 4.070950927520853e-05,
      "p_html": 0.0001662184476784663,
      "p_java": 4.0743928174233555e-06,
      "p_javascript": 0.000390451373894084,
      "p_matlab": 0.8894673669785942,
      "p_python": 0.10829980283473924,
      "p_sql": 0.0012527689385089897,
      "p_typescript": 0.0003319113967544795
    },
    {
      "text": "str = \"apple, banana, orange\"\n\n# split the string\nstring_list = str.split(', ')\n\n# print result\nprint(string_list)  # ['apple', 'banana', 'orange']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00010571340442937112,
      "p_css": 0.12746259546093813,
      "p_html": 0.006664985492290431,
      "p_java": 0.004231978288999795,
      "p_javascript": 0.00014760839149061654,
      "p_matlab": 3.768927178615979e-05,
      "p_python": 0.8203773356513822,
      "p_sql": 0.040120099619738496,
      "p_typescript": 0.0008519944189449106
    },
    {
      "text": "class Node(): \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\ndef reverse(head):\n    if head is None:\n        return \n    \n    prev = None\n    curr = head\n    while curr != None: \n        # Store the next node\n        next = curr.next\n        \n        # Reverse the current node\n        curr.next = prev \n        \n        # Move to previous node\n        prev = curr \n        \n        #Move the current node\n        curr = next\n    \n    #Assign the reversed list to head\n    head = prev \n    return head",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00031764388187458133,
      "p_css": 0.005115827238244696,
      "p_html": 0.9061448083666044,
      "p_java": 5.5031680398643835e-05,
      "p_javascript": 0.0007228412520192856,
      "p_matlab": 2.2288292420161504e-05,
      "p_python": 0.023169652921355526,
      "p_sql": 0.038413354276063724,
      "p_typescript": 0.026038552091018886
    },
    {
      "text": "import random\n\nfor _ in range(10):\n print(random.randint(1, 5))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0391748703094457e-06,
      "p_css": 3.245551230787971e-07,
      "p_html": 3.0572093668526175e-06,
      "p_java": 7.2783942238338385e-09,
      "p_javascript": 4.3755594762359703e-08,
      "p_matlab": 0.014552671596954937,
      "p_python": 0.9854361629048412,
      "p_sql": 6.48353978555198e-06,
      "p_typescript": 2.0998506902922634e-07
    },
    {
      "text": "import random\n\ndef get_rand():\n    return random.randint(0, 50)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.8100846227130866e-05,
      "p_css": 0.00012974635037377283,
      "p_html": 6.629274531474287e-05,
      "p_java": 3.3614907502072264e-07,
      "p_javascript": 6.137378933740248e-06,
      "p_matlab": 4.23307037628204e-08,
      "p_python": 0.9715296259181364,
      "p_sql": 0.02821761652820592,
      "p_typescript": 2.10175302952793e-06
    },
    {
      "text": "def maximizeSum(arr): \n    if (len(arr) < 2): \n        print(\"Invalid Input\") \n        return \n  \n    first = second = -1000\n    for i in range(0, len(arr)): \n  \n        if (arr[i] > first): \n            second = first \n            first = arr[i] \n  \n        elif (arr[i] > second and  \n              arr[i] != first): \n            second = arr[i] \n  \n    return (first + second) \n  \n# Driver code \narr = [1, 2, 4, 5, 3, 7] \nprint(maximizeSum(arr))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.469355048358892e-05,
      "p_css": 5.223440071275568e-05,
      "p_html": 0.00017225046976671618,
      "p_java": 1.3194490357989884e-05,
      "p_javascript": 5.83614313671415e-06,
      "p_matlab": 0.7287919762901666,
      "p_python": 0.27077566508115414,
      "p_sql": 9.065159550430793e-06,
      "p_typescript": 0.0001350844146712832
    },
    {
      "text": "def factorial(n):\n result = 1\n for i in range(1, n+1):\n result *= i\n return result\n \nprint(factorial(3))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.3934145694864817e-08,
      "p_css": 2.305497940014855e-06,
      "p_html": 3.628043362687318e-07,
      "p_java": 5.1169483403654805e-09,
      "p_javascript": 4.94413884194339e-08,
      "p_matlab": 6.461601862237861e-06,
      "p_python": 0.99998853527564,
      "p_sql": 2.1000393769435404e-06,
      "p_typescript": 1.2628836215910438e-07
    },
    {
      "text": "def array_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nprint(array_sum([10, 20, 30, 40]))\n\n# Output: 100",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.5692646979216548e-07,
      "p_css": 1.4585266596375607e-08,
      "p_html": 2.2688813160361808e-07,
      "p_java": 1.8181932288541476e-07,
      "p_javascript": 4.898698167163091e-08,
      "p_matlab": 0.9999987044789708,
      "p_python": 6.42639157138215e-07,
      "p_sql": 5.338161634568834e-09,
      "p_typescript": 1.8337538036680524e-08
    },
    {
      "text": "def is_perfect_square(num):\n    if num < 0:\n        return False\n\n    x = num // 2\n    seen = {x}\n    while x * x != num:\n        x = (x + (num // x)) // 2\n        if x in seen:\n            return False\n        seen.add(x)\n    return True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.847190462075538e-06,
      "p_css": 1.46019877448848e-09,
      "p_html": 3.738249072006314e-05,
      "p_java": 9.980303330796962e-06,
      "p_javascript": 1.4444439308822354e-06,
      "p_matlab": 0.9274055462086898,
      "p_python": 0.07253782610924142,
      "p_sql": 1.6240096555627962e-06,
      "p_typescript": 2.3477837705247297e-06
    },
    {
      "text": "list = [3, 4, 7, 1, 6, 9, 2] \nlist.sort() \nprint(\"Ascending :\",list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011500848272189925,
      "p_css": 0.008469639492909022,
      "p_html": 0.006868937765799317,
      "p_java": 0.0003235601412012078,
      "p_javascript": 0.014867065299632259,
      "p_matlab": 0.029248810866862245,
      "p_python": 0.8230267914315905,
      "p_sql": 0.11524870032464346,
      "p_typescript": 0.0007964098501429663
    },
    {
      "text": "from cryptography.fernet import Fernet\n\n# Generate a new fernet key\nkey = Fernet.generate_key()\nf = Fernet(key)\n\n# Encrypt the message\nencrypted_message = f.encrypt(b\"This is a secret message\")\n\n# Decrypt the encrypted message\ndecrypted_message = f.decrypt(encrypted_message)\n\nprint(encrypted_message)\nprint(decrypted_message)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04124960249562826,
      "p_css": 0.12282908220002735,
      "p_html": 0.035825381885929417,
      "p_java": 0.0025446479812565722,
      "p_javascript": 0.013079555659081945,
      "p_matlab": 0.0023914227993345172,
      "p_python": 0.7200547952891179,
      "p_sql": 0.021995372007427298,
      "p_typescript": 0.04003013968219673
    },
    {
      "text": "def toPigLatin(s):\n   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   if s[0] in vowels:\n      return s + 'way'\n   else:\n      return s[1:] + s[0] + 'ay'\n      \nprint(toPigLatin(\"Hello World\"))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.4651773946908267,
      "p_css": 0.006829117337875521,
      "p_html": 0.00616480483965826,
      "p_java": 2.7840753181171097e-10,
      "p_javascript": 0.11293114197812197,
      "p_matlab": 0.001988165147353507,
      "p_python": 0.4046510113853216,
      "p_sql": 0.0016684091712247423,
      "p_typescript": 0.0005899551712101977
    },
    {
      "text": "import random\n\nnumber = random.randint(1, 10)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.6080734409901794e-05,
      "p_css": 0.0003365941891866954,
      "p_html": 6.497542792934996e-05,
      "p_java": 1.2593606632600136e-06,
      "p_javascript": 1.5848840695500636e-05,
      "p_matlab": 2.5804579601992447e-06,
      "p_python": 0.9980192614038352,
      "p_sql": 0.0014798999697786456,
      "p_typescript": 2.3499615541380233e-05
    },
    {
      "text": "import re\nfrom nltk import tokenize\n\ninput_text = 'string with several words'\n\ntokens = tokenize.word_tokenize(input_text)\nfor token in tokens:\n  if re.search('\\w+', token):\n      print(token)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00019548140027442643,
      "p_css": 0.14695614430901033,
      "p_html": 0.11466760896223524,
      "p_java": 0.052912318851989215,
      "p_javascript": 0.0001229027466115441,
      "p_matlab": 0.005319019693446691,
      "p_python": 0.5970478788076957,
      "p_sql": 0.08147333889370932,
      "p_typescript": 0.0013053063350274591
    },
    {
      "text": "def get_max_min(arr):\n    max_num = None\n    min_num = None\n\n    for n in arr:\n        if max_num is None or n > max_num:\n            max_num = n\n\n        if min_num is None or n < min_num:\n            min_num = n\n\n    return max_num, min_num\n\nmax_num, min_num = get_max_min([-5, 7, 2, 11, -9])\nprint(f\"max = {max_num}, min = {min_num}\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0037523275303917142,
      "p_css": 0.010836053262214856,
      "p_html": 0.07294802864394888,
      "p_java": 0.000627394155694198,
      "p_javascript": 0.003597810383081601,
      "p_matlab": 0.11017694386024195,
      "p_python": 0.7904978461147755,
      "p_sql": 0.00010923052949168282,
      "p_typescript": 0.007454365520159755
    },
    {
      "text": "def sortList(lst): \n    lst.sort() \n    return lst\n  \nar_list = [5, 4, 1, 8, 9, 2]\nresult = sortList(ar_list) \n  \nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.043887926787176e-06,
      "p_css": 0.00026163636419435316,
      "p_html": 1.4901370145984743e-05,
      "p_java": 7.975227940971366e-07,
      "p_javascript": 4.5127705117409705e-06,
      "p_matlab": 1.3179837287296184e-07,
      "p_python": 0.9996665628229924,
      "p_sql": 4.0150237262902386e-05,
      "p_typescript": 7.263225798651969e-06
    },
    {
      "text": "def generate_fibonacci_sequence(n):\n a, b = 0, 1\n fibonacci_sequence = []\n while a <= n:\n  fibonacci_sequence.append(a)\n  a, b = b, a + b\n return fibonacci_sequence\n\n\nprint(generate_fibonacci_sequence(12))  # Output: [0, 1, 1, 2, 3, 5, 8, 13]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.033021783844053264,
      "p_css": 0.037015439930285526,
      "p_html": 0.027217360077491603,
      "p_java": 0.0019324004702253254,
      "p_javascript": 0.004852242721272554,
      "p_matlab": 0.011754469525286467,
      "p_python": 0.8780352642474738,
      "p_sql": 0.002044268021019855,
      "p_typescript": 0.0041267711628915765
    },
    {
      "text": "def fix_string(s): \n    s = s.replace(\" \", \"\") \n    s = s.lower() \n    s = \"\".join(reversed(s)) \n    return s",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0007334262671831828,
      "p_css": 0.003466562231546179,
      "p_html": 0.003480003774118527,
      "p_java": 0.00012492428903525897,
      "p_javascript": 0.0007580616144297531,
      "p_matlab": 0.00014181143532185649,
      "p_python": 0.11448763198085174,
      "p_sql": 0.8756530816623197,
      "p_typescript": 0.0011544967451936903
    },
    {
      "text": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n \n    # An array to store increasing subsequences\n    dp = [1]*n\n \n    # Compute optimal values in bottom up manner\n    for i in range (1 , n):\n        for j in range(0 , i):\n            if arr[i] > arr[j] and dp[i]< dp[j] + 1 :\n                dp[i] = dp[j]+1\n \n    # Pick maximum of dp[i]\n    # Initialize result\n    maximum = 0\n \n    # Pick maximum of all dp[i]\n    for i in range(n):\n        maximum = max(maximum , dp[i])\n \n    return maximum",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00018669918435236104,
      "p_css": 0.00033594278033180925,
      "p_html": 0.0005370009580485314,
      "p_java": 6.328189406561655e-05,
      "p_javascript": 0.0002707332082750827,
      "p_matlab": 0.3276174776143517,
      "p_python": 0.666574756712443,
      "p_sql": 0.002464232231278507,
      "p_typescript": 0.0019498754168534326
    },
    {
      "text": "def is_rotation(s1, s2):\n  # edge case check\n  if len(s1) != len(s2):\n    return False\n\n  # concatenate s2 to itself\n  concat_s2 = s2 + s2\n\n  #search s1 in concat_s2\n  return s1 in concat_s2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.08941289078289e-05,
      "p_css": 0.003599270764130591,
      "p_html": 0.0022911670309565704,
      "p_java": 0.0005869702218739493,
      "p_javascript": 0.0009525002387925398,
      "p_matlab": 0.00042028002078479536,
      "p_python": 0.9867325322737435,
      "p_sql": 0.0023991298415036036,
      "p_typescript": 0.002947255479306688
    },
    {
      "text": "import tkinter as tk\n\nroot = tk.Tk()\n\nlength_label = tk.Label(text=\"Length:\")\nlength_label.grid(row=0, column=0)\nlength_entry = tk.Entry()\nlength_entry.grid(row=0, column=1)\n\nwidth_label = tk.Label(text=\"Width:\")\nwidth_label.grid(row=1, column=0)\nwidth_entry = tk.Entry()\nwidth_entry.grid(row=1, column=1)\n\ndef area():\n area = float(length_entry.get()) * float(width_entry.get())\n area_label = tk.Label(root, text=\"Area: \" + str(area))\n area_label.grid(row=2, column=0, columnspan=2)\n\ncalc_button = tk.Button(text=\"Calculate\", command=area)\ncalc_button.grid(row=2, column=1)\n\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00452555799751854,
      "p_css": 0.034743791504527506,
      "p_html": 0.00762055766766402,
      "p_java": 0.000731055858519668,
      "p_javascript": 0.0027147266224749806,
      "p_matlab": 0.001118169097223941,
      "p_python": 0.7811298843283371,
      "p_sql": 0.1551589274253446,
      "p_typescript": 0.01225732949838967
    },
    {
      "text": "product = num1 * num2\nprint(product)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007549274318230767,
      "p_css": 0.0371831946960332,
      "p_html": 0.0014253098200390985,
      "p_java": 3.495539436929988e-05,
      "p_javascript": 0.00029779207370582075,
      "p_matlab": 0.00015023813117710544,
      "p_python": 0.9588871654444321,
      "p_sql": 0.0005629801468324123,
      "p_typescript": 0.0007034368615880562
    },
    {
      "text": "for num in range(1, 11): \n    if num % 2 != 0: \n        print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4894035211680711e-24,
      "p_css": 9.410394037796519e-37,
      "p_html": 4.6685749682307406e-24,
      "p_java": 6.171338873645088e-26,
      "p_javascript": 1.4893586790788214e-25,
      "p_matlab": 1.0,
      "p_python": 2.0241527573284863e-21,
      "p_sql": 4.113898389020325e-26,
      "p_typescript": 5.48380695217311e-25
    },
    {
      "text": "This tutorial will teach you how to use a for-loop to print the elements of a given list in Python.\n\nStep 1: Initialize your loop\nStart by initializing a loop to loop through the elements of the list. This can be done by using the for-loop keyword in Python followed by the name of the variable you will use to represent the element of the list followed by the keyword in and the name of the list you want to loop through.\n\nFor example, if you want to loop through the elements of the list called ‘mylist’, you would write:\n\nfor element in mylist:\n\nStep 2: Print the element\nInside the loop, use the print() function to print the current element. The print() function takes as argument the element of the list, which you can refer to with the variable you defined in Step 1.\n\nFor example, if the name of the variable you defined in Step 1 was ‘element’, you would write:\n\nprint(element)\n\nStep 3: Terminate the loop\nAfter you’ve printed all the elements, you should terminate the loop. To do this, you can use the keyword break. By using break, you can tell the loop to stop looping once it has reached the last element of the list.\n\nFor example, you can write:\n\nbreak\n\nThat’s it! This is how you use a for-loop to print the elements of a given list in Python.",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 3.8969395289045156e-08,
      "p_css": 8.526254293740638e-08,
      "p_html": 1.4676414611380648e-07,
      "p_java": 2.2788687975102502e-08,
      "p_javascript": 0.0021108278383767626,
      "p_matlab": 1.3603587426480698e-06,
      "p_python": 3.2041570733683636e-09,
      "p_sql": 5.727558029935819e-08,
      "p_typescript": 0.9978874575383709
    },
    {
      "text": "my_list = [1, 2, 3, 4, 5, 6, 7, 8]\n\ncount = 0\nfor i in my_list:\n    if i % 2 == 0:\n        count += 1\n\nprint(count)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001405571171171413,
      "p_css": 0.0019659029588187694,
      "p_html": 0.0004312812265347647,
      "p_java": 1.051519521113567e-05,
      "p_javascript": 4.809620260678591e-05,
      "p_matlab": 0.030210009207230246,
      "p_python": 0.9666386009830172,
      "p_sql": 0.00034396265381143344,
      "p_typescript": 0.00021107445565273023
    },
    {
      "text": "def prime_range(lower, upper):\n    prime_list = []\n    for num in range(lower, upper +1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_list.append(num)\n\n    return prime_list\n\nlower = 1\nupper = 20\nprint(prime_range(lower, upper))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.800131327563378e-10,
      "p_css": 3.617550499638485e-13,
      "p_html": 3.3614231682876816e-09,
      "p_java": 8.54083207616404e-11,
      "p_javascript": 1.7403929886577169e-10,
      "p_matlab": 0.9999994194256421,
      "p_python": 5.742637980371149e-07,
      "p_sql": 1.1335175368083675e-09,
      "p_typescript": 6.757968623078263e-10
    },
    {
      "text": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading dataset\ndf = pd.read_csv(\"spam_classification.csv\")\n\n# splitting dataset\nX = df[\"Message\"]\ny = df[\"Label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# creating a model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluating the model\nscore = model.score(X_test, y_test)\nprint(\"Model score: {}\".format(score))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.3058801003987906,
      "p_css": 0.12533566706433233,
      "p_html": 0.0026533285381092524,
      "p_java": 1.6832790701719693e-05,
      "p_javascript": 2.3743247778422945e-05,
      "p_matlab": 2.1719402151327237e-05,
      "p_python": 0.5657243160732994,
      "p_sql": 1.1019069729921169e-06,
      "p_typescript": 0.00034319057786395666
    },
    {
      "text": "\"\"\"\nDesign a Python script to check if a given value is an alphabet or not \n\"\"\"\n\n# function to check if the given value is an alphabet or not\ndef is_alphabet(value):\n    # check if the value is empty\n    if value == '':\n        return False\n\n    # check if the given value is an alphabet\n    if value.isalpha():\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    value = input('Enter a value: ')\n    print(is_alphabet(value))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4398689396018007e-06,
      "p_css": 5.616384507536024e-06,
      "p_html": 6.2511497892202475e-06,
      "p_java": 3.6311853674053776e-09,
      "p_javascript": 5.782139919344985e-06,
      "p_matlab": 0.9995581051591318,
      "p_python": 3.271831718243023e-11,
      "p_sql": 9.214502161143136e-07,
      "p_typescript": 0.00042188018359261476
    },
    {
      "text": "def knapsack_brute_force(capacity, items):\n max_value = 0\n\n # the number of items\n num_items = len(items)\n\n # Iterate through the items.\n for i in range(2**num_items):\n\n # Create a subset.\n subset = [items[item] for item in range(num_items) if i & (1 << item)]\n\n # Calculate the total weight of the subset.\n subset_weight = sum([item['weight'] for item in subset])\n\n # Skip the subset if it exceeds the capacity.\n if subset_weight > capacity:\n continue\n\n # Otherwise, add the subset's total value to the max value.\n subset_value = sum([item['value'] for item in subset])\n max_value = max(subset_value, max_value)\n\nreturn max_value\n\n# Execute the function.\nmax_value = knapsack_brute_force(capacity, items)\nprint(max_value) # 120",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0008556872878245206,
      "p_css": 0.016839400336014988,
      "p_html": 0.015251010684157388,
      "p_java": 6.785391092304747e-05,
      "p_javascript": 0.90657001356468,
      "p_matlab": 0.04093652402886858,
      "p_python": 0.013481052655926196,
      "p_sql": 0.0014485005749346315,
      "p_typescript": 0.004549956956670562
    },
    {
      "text": "def sort_numbers(numbers):\n    numbers.sort(reverse=True)\n    return numbers\n\nnumbers = [28, 5, 17, 10, 43]\n\nsorted_numbers = sort_numbers(numbers)\nprint(sorted_numbers)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002788858980579167,
      "p_css": 0.0018311637273434637,
      "p_html": 0.0018746668559840734,
      "p_java": 0.39434516192928154,
      "p_javascript": 0.0022836093546111254,
      "p_matlab": 2.6493205996025543e-08,
      "p_python": 0.5990455012610006,
      "p_sql": 0.00011448838304751891,
      "p_typescript": 0.00022649609746784886
    },
    {
      "text": "import pandas as pd\n\n# create a dataframe\ndf = pd.DataFrame({\n 'Name': ['John', 'Mary', 'Chris'],\n 'Score': [90, 80, 95],\n})\n\n# function to calculate the grade\ndef calculate_grade(score):\n if score >= 90:\n return 'A'\n elif score >= 80:\n return 'B'\n else:\n return 'C'\n\n# apply the function to the dataframe\ndf['Grade'] = df['Score'].apply(calculate_grade)\n\nprint(df)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00028964578742013826,
      "p_css": 0.9237281200393115,
      "p_html": 0.0014990757173604682,
      "p_java": 0.00014468221944136903,
      "p_javascript": 0.04695921653498026,
      "p_matlab": 0.0005809558328496833,
      "p_python": 0.01768932523639185,
      "p_sql": 0.004398841229189406,
      "p_typescript": 0.004710137403055408
    },
    {
      "text": "from collections import Counter \n  \ndef is_anagram(str1, str2): \n    # Convert both strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n  \n    # Remove all whitespaces\n    str1 = str1.replace(\" \", \"\") \n    str2 = str2.replace(\" \", \"\") \n \n    # remove all special characters\n    for char in \"!'_,@#$%^&*():;\":\n        str1 = str1.replace(char, '')\n        str2 = str2.replace(char, '')\n\n    # sort the character of both strings \n    sorted_str1 = sorted(str1) \n    sorted_str2 = sorted(str2) \n  \n    # Check if both strings are equal or not \n    if(sorted_str1 == sorted_str2):  \n        return True \n    else: \n        return False \n  \n# Driver program \nstr1 = \"listen\"\nstr2 = \"silent\"\n\nif is_anagram(str1, str2): \n    print(\"The strings are anagrams.\") \nelse: \n    print(\"The strings are not anagrams.\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005317240891192994,
      "p_css": 0.0030273856066809334,
      "p_html": 4.607097484121235e-06,
      "p_java": 3.07040921292551e-05,
      "p_javascript": 0.3718284088886042,
      "p_matlab": 0.000288204491336039,
      "p_python": 0.5660381715134795,
      "p_sql": 0.04880426661539357,
      "p_typescript": 0.0046610108036995645
    },
    {
      "text": "def word_count(sentence):\n    words = sentence.split()\n    return len(words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.5051417123953866e-05,
      "p_css": 0.0007999957163569127,
      "p_html": 0.0015897245578674263,
      "p_java": 5.74182926716977e-06,
      "p_javascript": 3.0068498029049093e-05,
      "p_matlab": 3.4200928299339625e-06,
      "p_python": 0.9631938213563292,
      "p_sql": 0.03431749072079939,
      "p_typescript": 4.68581139703197e-06
    },
    {
      "text": "# imports\nimport tkinter as tk\n\n# create root app window\nroot = tk.Tk()\n\n# setting window's size\nroot.geometry(\"200x200\")\n\n# main loop\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03583378045990986,
      "p_css": 0.035878635777147325,
      "p_html": 0.18239597732875443,
      "p_java": 0.002333810381109865,
      "p_javascript": 0.0026218427216393517,
      "p_matlab": 0.0028537251908490966,
      "p_python": 0.46196178266037313,
      "p_sql": 0.08858978517528651,
      "p_typescript": 0.1875306603049304
    },
    {
      "text": "import datetime\n\nprint(f'Current Date and Time: {datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0014653813693294667,
      "p_css": 0.08093924009462967,
      "p_html": 0.00284510738507894,
      "p_java": 0.00027991490113235486,
      "p_javascript": 0.0008118848046458461,
      "p_matlab": 0.0007104785299649486,
      "p_python": 0.8991388964878451,
      "p_sql": 0.0017203968205021295,
      "p_typescript": 0.012088699606871794
    },
    {
      "text": "def greater_of_two_numbers(int1, int2):\n    if int1 > int2:\n        return int1\n    else:\n        return int2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009796836486540636,
      "p_css": 0.01747940789328505,
      "p_html": 0.013821447165009644,
      "p_java": 0.0015274720956399022,
      "p_javascript": 0.004429468712275619,
      "p_matlab": 0.01567462407187202,
      "p_python": 0.925899842782089,
      "p_sql": 0.0028859756442810983,
      "p_typescript": 0.008484925149007175
    },
    {
      "text": "def firstPrimeNumbers(number): \n    primeNumbers = [] \n  \n    for num in range(1, number + 1): \n \n        if (num > 1): \n            for i in range(2, num): \n                if (num % i == 0): \n                    break\n            else: \n                primeNumbers.append(num)\n    return primeNumbers\n  \n# Test code \nprime = firstPrimeNumbers(5) \nprint(prime)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.415373490197933e-17,
      "p_css": 5.1368504860253016e-24,
      "p_html": 5.879499810212021e-17,
      "p_java": 1.1581736555095005e-18,
      "p_javascript": 1.4643256664428471e-18,
      "p_matlab": 0.9999999999998688,
      "p_python": 1.3116246902027567e-13,
      "p_sql": 1.0240117978557572e-16,
      "p_typescript": 9.714693491512376e-17
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nquery = 'Machine learning'\n\npages = 5\nfor i in range(1, pages+1):\n  url = f'https://en.wikipedia.org/wiki/{query}'\n  headers = {'User-Agent': 'Mozilla/5.0'}\n  page = requests.get(url, headers=headers)\n  soup = BeautifulSoup(page.content, 'html.parser')\n  \n  print(soup.title.string)\n  print(soup.find(id='mw-content-text'))",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 6.910864527889942e-09,
      "p_css": 0.7414102199827974,
      "p_html": 0.25689397987883866,
      "p_java": 0.0007057284722674446,
      "p_javascript": 2.8594168382406993e-07,
      "p_matlab": 1.3051269866077445e-05,
      "p_python": 0.0005891734580375867,
      "p_sql": 0.00026419448614383893,
      "p_typescript": 0.00012335959950058665
    },
    {
      "text": "import nltk\n\ndef get_synonyms(sentence):\n    output = []\n    words = nltk.word_tokenize(sentence)\n    for word in words:\n        synonyms = []\n        for syn in wordnet.synsets(word):\n            for l in syn.lemmas():\n                synonyms.append(l.name())\n        output.append(list(set(synonyms)))\n  return output",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.15750055461673626,
      "p_css": 0.03943558055891688,
      "p_html": 0.05586834890837806,
      "p_java": 0.0006160774940605847,
      "p_javascript": 0.0005080375474163354,
      "p_matlab": 0.3804430562995132,
      "p_python": 0.15741435201658235,
      "p_sql": 0.20813441218590967,
      "p_typescript": 7.958037248676308e-05
    },
    {
      "text": "def sort_by_length(d):\n    sorted_d = {}\n    keys_list = list(d.keys())\n    keys_list.sort(key=len)\n \n    for key in keys_list:\n        sorted_d[key] = d[key]\n \n    return sorted_d",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0021227080549185624,
      "p_css": 0.4112069156543099,
      "p_html": 0.004917550376249198,
      "p_java": 0.0002534878517289055,
      "p_javascript": 0.0033834823599398997,
      "p_matlab": 0.001796444031421475,
      "p_python": 0.5643630581440974,
      "p_sql": 0.009656588378372653,
      "p_typescript": 0.0022997651489620337
    },
    {
      "text": "def translate(word):\n vowels = ('a', 'e', 'i', 'o', 'u')\n consonants = ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\n 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n\nif word[0] in vowels:\n new_word = word + 'ay'\n\nelif word[0] in consonants:\n new_word = word[1:] + word[0] + 'ay'\n\nelse:\n new_word = word\n\nreturn new_word\n\n# Test\nsentence = 'My name is John'\n\nwords = sentence.split(' ')\npig_latin = [translate(word) for word in words]\npig_latin_sentence = ' '.join(pig_latin)\n\nprint(pig_latin_sentence)\n\n# Output: yMay amenay isay ohnJay",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.26676752367659473,
      "p_css": 0.0032546898233018233,
      "p_html": 0.04868507517576119,
      "p_java": 0.0001334849587788686,
      "p_javascript": 0.0023711637473911424,
      "p_matlab": 0.0030353737075430793,
      "p_python": 0.4533125819234143,
      "p_sql": 0.22205141248991161,
      "p_typescript": 0.0003886944973032365
    },
    {
      "text": "def is_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        dict_str1 = {}\n        dict_str2 = {}\n        for i in range(len(str1)):\n            if str1[i] not in dict_str1:\n                dict_str1[str1[i]] = 1\n            else:\n                dict_str1[str1[i]] += 1\n            if str2[i] not in dict_str2:\n                dict_str2[str2[i]] = 1\n            else:\n                dict_str2[str2[i]] += 1\n        return dict_str1 == dict_str2\n\nprint(is_permutation(str1, str2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003172103410411326,
      "p_css": 0.0002384353795541411,
      "p_html": 7.532324759906639e-07,
      "p_java": 2.0218486688894073e-05,
      "p_javascript": 0.10963010589347182,
      "p_matlab": 0.019898181835496583,
      "p_python": 0.8537431953516127,
      "p_sql": 0.015914275223509775,
      "p_typescript": 0.00023762425614880722
    },
    {
      "text": "def int_to_string(num):\n   return str(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.662697609545902e-06,
      "p_css": 2.420753652404552e-09,
      "p_html": 3.771408343312369e-05,
      "p_java": 9.680100891600985e-07,
      "p_javascript": 2.179400153527748e-05,
      "p_matlab": 0.748534471782283,
      "p_python": 0.2513864673507984,
      "p_sql": 1.205596117807272e-05,
      "p_typescript": 1.8636923197182384e-06
    },
    {
      "text": "def word_frequency(string): \n    freq = {} \n    for word in string.split(): \n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n  \n    for key, value in freq.items(): \n        print(\"% s : % d\"%(key, value)) \n  \n# Driver program \nif __name__ == \"__main__\": \n    string = \"hello world, this is a test string\"\n    word_frequency(string)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0023162933025974324,
      "p_css": 0.6846419762227861,
      "p_html": 0.0307464621048273,
      "p_java": 0.05812798745085885,
      "p_javascript": 5.576964338869956e-07,
      "p_matlab": 0.022444647266212692,
      "p_python": 0.05887004183385576,
      "p_sql": 0.14264080658797268,
      "p_typescript": 0.0002112275344551
    },
    {
      "text": "def sort_descending(lst):\n    return sorted(lst, reverse=True)\n  \n# Example \nlist_sample = [7, 4, 3, 10, 2, 1]\nresult = sort_descending(list_sample)  \nprint(result) \n# Output: [10, 7, 4, 3, 2, 1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9221216509262346e-05,
      "p_css": 0.0020265306453009064,
      "p_html": 0.0003211916794866637,
      "p_java": 4.3804818748342774e-05,
      "p_javascript": 3.070586839393138e-05,
      "p_matlab": 3.0385696849877263e-07,
      "p_python": 0.9975453394522208,
      "p_sql": 1.202854008104558e-05,
      "p_typescript": 8.739222904483749e-07
    },
    {
      "text": "import flask\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/books/author/<author_name>', methods=['GET'])\ndef get_books_by_author(author_name):\n books = [\n {'name': 'Harry Potter and the Philosopher\\'s Stone', 'author': 'J.K. Rowling'}, \n {'name': 'Harry Potter and the Chamber of Secrets', 'author': 'J.K. Rowling'},\n {'name': 'Harry Potter and the Prisoner of Azkaban', 'author': 'J.K. Rowling'},\n {'name': 'Harry Potter and the Goblet of Fire', 'author': 'J.K. Rowling'}\n]\n\nbooks_by_author = [book for book in books if book['author'] == author_name]\nreturn jsonify({'books': books_by_author})\n\nif __name__ == '__main__':\n app.run()",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.005160806379046301,
      "p_css": 0.6241039948244927,
      "p_html": 0.0038063127496255063,
      "p_java": 0.009970332346502707,
      "p_javascript": 0.00029712532952758276,
      "p_matlab": 0.0015269258998088274,
      "p_python": 0.08329256933128319,
      "p_sql": 0.012242469523795912,
      "p_typescript": 0.2595994636159172
    },
    {
      "text": "def printPascalTriangle(n): \n\n\tfor line in range(1, n + 1): \n\t\tC = 1; # used to represent C(line, i) \n\t\tfor i in range(1, line + 1): \n\t\t\t# The first value in a line is always 1 \n\t\t\tprint(C, end = \" \"); \n\t\t\tC = int(C * (line - i) / i); # Calculating \n\t\t\t\t\t\t\t\t\t\t# the next value  \n\t\tprint(\"\"); # entered to move to the next line \n\n# Driver Code \nn = 5; \nprintPascalTriangle(n); \n\nOutput:\n1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9564939032160497,
      "p_css": 5.797457522302293e-05,
      "p_html": 0.0005205283587704277,
      "p_java": 5.549901084081507e-05,
      "p_javascript": 0.0018176882111856358,
      "p_matlab": 0.010079274833036203,
      "p_python": 0.00017428666328428316,
      "p_sql": 1.364483734688953e-05,
      "p_typescript": 0.030787200294263004
    },
    {
      "text": "n = 4\n\n# Function to create numeric pyramid \ndef numeric_pyramid(n):\n    # Outer loop to handle the number of rows (n in this case) \n    for i in range(0, n): \n      \n        # Inner loop to handle the columns \n        # numbers change according to outer loop (i) \n        for j in range(i+1, n): \n            print(j, end=\"  \") \n        # decrement in the same inner loop \n        for j in range(n-i, 0, -1): \n            print(j, end=\"  \") \n      \n        # new line for each row\n        print()\n      \n# Driver Code \nnumeric_pyramid(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.548842331701849e-05,
      "p_css": 5.984877760671487e-05,
      "p_html": 0.000301894419875286,
      "p_java": 2.412104310877149e-05,
      "p_javascript": 0.001759742500265661,
      "p_matlab": 0.006873754576880668,
      "p_python": 0.9295679607899647,
      "p_sql": 0.0019335630683123503,
      "p_typescript": 0.05938362640066876
    },
    {
      "text": "sentence = \"The quick brown fox\"\nwords = sentence.split(\" \")\n\nfor word in words:\n print(word)\n\n# Output\n# The\n# quick\n# brown\n# fox",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.019720974882927605,
      "p_css": 0.02413756764171046,
      "p_html": 0.018163675637070116,
      "p_java": 9.995443114144471e-06,
      "p_javascript": 0.0016666413086210057,
      "p_matlab": 0.00035397244561663233,
      "p_python": 0.8830433001111837,
      "p_sql": 0.05250255114739928,
      "p_typescript": 0.0004013213823573177
    },
    {
      "text": "def find_even_numbers(numbers):\n    even_numbers = filter(lambda num: num % 2 == 0, numbers)\n    return list(even_numbers)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.5930838588463334e-06,
      "p_css": 3.5727877384137e-07,
      "p_html": 3.0374915472065418e-05,
      "p_java": 0.0003038812878329325,
      "p_javascript": 1.9913095935276937e-08,
      "p_matlab": 0.9979752839730801,
      "p_python": 0.0016680700223142388,
      "p_sql": 9.095347062804292e-06,
      "p_typescript": 6.324178509216548e-06
    },
    {
      "text": "Class_scores = {\n    \"Alan\": [45, 55, 60],\n    \"Beth\" :[75, 84, 91],\n    \"Carla\": [87, 91, 97],\n    \"Dave\": [67, 86, 82]\n}\n\ndef highest_lowest_averages(scores):\n    highest_avg = 0\n    lowest_avg = float(\"inf\")\n    highest_student = None\n    lowest_student = None\n\n    for student, scores in scores.items():\n        avg = sum(scores)/len(scores)\n        if avg > highest_avg:\n            highest_avg = avg\n            highest_student = student\n        if avg < lowest_avg:\n            lowest_avg = avg\n            lowest_student = student\n\n    return highest_student, highest_avg, lowest_student, lowest_avg\n\nhighest_student, highest_avg, lowest_student, lowest_avg = highest_lowest_averages(Class_scores)\n\nprint(\"The highest average score in the class is held by {} with a score of {}.\".format(highest_student, highest_avg))\nprint(\"The lowest average score in the class is held by {} with a score of {}.\".format(lowest_student, lowest_avg))",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.007241513985522456,
      "p_css": 0.2070550516267396,
      "p_html": 0.01819893522841064,
      "p_java": 0.0011623947425793933,
      "p_javascript": 0.008297767861771565,
      "p_matlab": 0.00498524403324577,
      "p_python": 0.2980610740818874,
      "p_sql": 0.007219243034715346,
      "p_typescript": 0.4477787754051278
    },
    {
      "text": "import pandas as pd\n\n#Read the sales data\ndata = pd.read_csv('sales_data.csv')\n\n# Generate a report for the sales data\ndef generate_report (data):\n  #Group data by Region and Month\n  region_month = data.groupby(['Region','Month'])\n  \n  #Calculate total sales\n  total_sales = region_month.sum()['Sales']\n  \n  #Calculate total profit\n  total_profit = region_month.sum()['Profit']\n  \n  #Calculate max sales\n  max_sales = region_month.max()['Sales']\n  \n  #Create a report for the data\n  report = pd.DataFrame({'Total Sales': total_sales,\n                'Total Profit': total_profit,\n                'Max Sales': max_sales})\n  \n  #Return the report\n  return report\n\n#Run the report\nprint(generate_report(data))",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.18689856530603258,
      "p_css": 0.09647503364781289,
      "p_html": 0.0471850708229192,
      "p_java": 0.000102312252759836,
      "p_javascript": 0.003108001916955314,
      "p_matlab": 0.00052948920581933,
      "p_python": 0.23659704098235346,
      "p_sql": 0.002209015699315966,
      "p_typescript": 0.42689547016603135
    },
    {
      "text": "from datetime import datetime\nimport pytz\n\ndef print_time(tz):\n  timezone = pytz.timezone(tz)\n  print(datetime.now(timezone).strftime(\"%H:%M:%S\"))\n\nprint_time(\"UTC+11:00\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008299407772097514,
      "p_css": 0.01741103764355748,
      "p_html": 0.00808411503834327,
      "p_java": 0.00030429357938835166,
      "p_javascript": 0.0013932697625299141,
      "p_matlab": 0.002813392009117713,
      "p_python": 0.9584765390743482,
      "p_sql": 0.0011176129646986882,
      "p_typescript": 0.0021003321559190055
    },
    {
      "text": "class LinearRegression:\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n    \n    def fit(self):\n        x_mean = self.X.mean()\n        y_mean = self.y.mean()\n        n = len(self.X)\n        \n        m = ( ( ( self.X * self.y).sum() - n*x_mean*y_mean ) ) /( ( ( self.X*self.X ).sum() - n*x_mean*x_mean ))\n        c = y_mean - m*x_mean\n        \n        return m, c\n      \n    def predict(self, m, c, X):\n        y_pred = m*X + c\n        return y_pred",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00023070079545177468,
      "p_css": 0.014501040669440484,
      "p_html": 0.16187237810811173,
      "p_java": 4.4889536436131264e-05,
      "p_javascript": 0.0001067376603161291,
      "p_matlab": 1.1614282156729946e-05,
      "p_python": 0.6488511743756976,
      "p_sql": 0.1739028974823531,
      "p_typescript": 0.0004785670900363578
    },
    {
      "text": "The function is correct but the parameter names could be more descriptive.\nFor example, 'item_cost' could be 'price' and 'tax_rate' could be 'tax_percentage'.\n\nAnother bug is that the function does not round the result to the nearest hundredth. This could cause the result to be slightly inaccurate. To fix this, add a call to the 'round()' function.\n\ndef calculate_tax(price, tax_percentage):\n    return round(price * (1 + tax_percentage), 2)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 2.4634388061228993e-08,
      "p_css": 1.3620913290557503e-06,
      "p_html": 8.89902118920049e-08,
      "p_java": 4.337161205579216e-07,
      "p_javascript": 0.0014280806078999684,
      "p_matlab": 4.008966890094931e-09,
      "p_python": 8.89421257118329e-07,
      "p_sql": 8.153516738586638e-07,
      "p_typescript": 0.9985683011781527
    },
    {
      "text": "import gym\nimport numpy as np\n\nfrom stable_baselines.common.policies import MlpPolicy\nfrom stable_baselines.common.vec_env import DummyVecEnv\nfrom stable_baselines import PPO2\n\n# Training hyperparameters\nn_timesteps = 500000\n\n# Create the environment\nenv = gym.make('Tetris-v0')\nenv = DummyVecEnv([lambda: env])\n\n# Create the agent\nmodel = PPO2(MlpPolicy, env, n_timesteps=n_timesteps)\n\n# Train the agent\nmodel.learn(total_timesteps=n_timesteps)\n\n# Test the agent\nenv.reset()\nstate, done = env.reset(), False\ntotal_reward = 0\n\nwhile not done:\n    action, _states = model.predict(state)\n    state, reward, done, info = env.step(action)\n    total_reward += reward # accumulate the reward\n\nprint('Total Reward: ', total_reward)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7421280333650997,
      "p_css": 0.07152945229049527,
      "p_html": 0.013183754757823934,
      "p_java": 7.813383782211462e-05,
      "p_javascript": 0.002388695028313147,
      "p_matlab": 0.00025503894341620103,
      "p_python": 0.06763303274562256,
      "p_sql": 0.0016930450503090662,
      "p_typescript": 0.10111081398109799
    },
    {
      "text": "def compare_strings(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                return False\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.6249551283389902e-05,
      "p_css": 1.30782815117382e-05,
      "p_html": 2.7096928990885345e-07,
      "p_java": 1.670247184845249e-06,
      "p_javascript": 0.0031226036716722966,
      "p_matlab": 0.00022467117655594049,
      "p_python": 0.9960973973482697,
      "p_sql": 0.0005039198036281426,
      "p_typescript": 1.0138950603918192e-05
    },
    {
      "text": "def print_numbers():\n for i in range(1, 6):\n  print(i)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.341770487468386e-05,
      "p_css": 5.884151549855792e-06,
      "p_html": 8.115692750165333e-05,
      "p_java": 1.2103044043487137e-06,
      "p_javascript": 1.8762235532761388e-06,
      "p_matlab": 0.2582795233841843,
      "p_python": 0.7415561935055422,
      "p_sql": 4.2332977554575876e-05,
      "p_typescript": 1.8404820834972277e-05
    },
    {
      "text": "# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2014-2021 Bitergia\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# Authors:\n#     Santiago Dueñas <sduenas@bitergia.com>\n#     Quan Zhou <quan@bitergia.com>\n#\n\nimport dateutil.parser\nimport logging\nimport re\n\n\nfrom ..db.model import MIN_PERIOD_DATE, MAX_PERIOD_DATE, UniqueIdentity,\\\n    Identity, Enrollment, Organization, Domain\nfrom ..exceptions import InvalidFormatError\n\nlogger = logging.getLogger(__name__)\n\n\nclass GitdmParser(object):\n    \"\"\"Parse identities and organizations using Gitdm files.\n\n    Gitdm provides several files that include information about\n    identities, organizations and affiliations. This parser is able\n    to parse anyone of these file formats, together or separate.\n\n    The unique identities are stored in an object named 'uidentities'.\n    The keys of this object are the UUID of the unique identities.\n    Each unique identity object stores a list of identities and\n    enrollments. Email addresses will not be validated when `email_validation`\n    is set to `False`.\n\n    Organizations are stored in 'organizations' object. Its keys\n    are the name of the organizations and each organization object is\n    related to a list of domains.\n\n    :param aliases: aliases stream\n    :param email_to_employer: enrollments stream\n    :param domain_to_employer: organizations stream\n    :param source: source of the data\n    :param email_validation: validate email addresses; set to True by default\n\n    :raises InvalidFormatError: raised when the format of any of the\n        given streams is not valid.\n    \"\"\"\n\n    # Common Gitdm patterns\n    VALID_LINE_REGEX = r\"^(\\S+)[ \\t]+([^#\\n\\r\\f\\v]+[^#\\s]*)(?:([ \\t]+#.*)?|\\s*)$\"\n    LINES_TO_IGNORE_REGEX = r\"^\\s*(?:#.*)?\\s*$\"\n    EMAIL_ADDRESS_REGEX = r\"^(?P<email>[^\\s@]+@[^\\s@.]+\\.[^\\s@]+)$\"\n    ORGANIZATION_REGEX = r\"^(?P<organization>[^#<\\t\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])?$\"\n    DOMAIN_REGEX = r\"^(?P<domain>\\w\\S+)$\"\n    ENROLLMENT_REGEX = r\"^(?P<organization>[^#<\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])(?:[ \\t]+<[ \\t]+(?P<date>\\d{4}\\-\\d{2}\\-\\d{2}))?$\"\n\n    def __init__(self, aliases=None, email_to_employer=None,\n                 domain_to_employer=None, source='gitdm', email_validation=True):\n        self._identities = {}\n        self._organizations = {}\n        self.source = source\n        self.email_validation = email_validation\n\n        # Raw data\n        self.__raw_identities = {}\n        self.__raw_aliases = {}\n        self.__raw_orgs = {}\n\n        self.__parse(aliases, email_to_employer,\n                     domain_to_employer)\n\n    @property\n    def identities(self):\n        uids = [u for u in self._identities.values()]\n        uids.sort(key=lambda u: u.uuid)\n        return uids\n\n    @property\n    def organizations(self):\n        orgs = [o for o in self._organizations.values()]\n        orgs.sort(key=lambda o: o.name)\n        return orgs\n\n    def __parse(self, aliases, email_to_employer, domain_to_employer):\n        \"\"\"Parse Gitdm streams\"\"\"\n\n        self.__parse_organizations(domain_to_employer)\n        self.__parse_identities(aliases, email_to_employer)\n\n    def __parse_identities(self, aliases, email_to_employer):\n        \"\"\"Parse Gitdm identities\"\"\"\n\n        # Parse streams\n        self.__parse_aliases_stream(aliases)\n        self.__parse_email_to_employer_stream(email_to_employer)\n\n        # Create unique identities from aliases list\n        for alias, email in self.__raw_aliases.items():\n            uid = self._identities.get(email, None)\n\n            if not uid:\n                uid = UniqueIdentity(uuid=email)\n\n                e = re.match(self.EMAIL_ADDRESS_REGEX, email, re.UNICODE)\n                if e:\n                    identity = Identity(email=email, source=self.source)\n                else:\n                    identity = Identity(username=email, source=self.source)\n\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            e = re.match(self.EMAIL_ADDRESS_REGEX, alias, re.UNICODE)\n            if e:\n                identity = Identity(email=alias, source=self.source)\n            else:\n                identity = Identity(username=alias, source=self.source)\n\n            uid.identities.append(identity)\n\n        # Create unique identities from enrollments list\n        for email in self.__raw_identities:\n\n            # Do we have it from aliases?\n            if email in self._identities:\n                uid = self._identities[email]\n            elif email in self.__raw_aliases:\n                canonical = self.__raw_aliases[email]\n                uid = self._identities[canonical]\n            else:\n                uid = UniqueIdentity(uuid=email)\n\n                identity = Identity(email=email, source=self.source)\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            # Assign enrollments\n            enrs = self.__raw_identities[email]\n            enrs.sort(key=lambda r: r[1])\n\n            start_date = MIN_PERIOD_DATE\n\n            for rol in enrs:\n                name = rol[0]\n                org = self._organizations.get(name, None)\n\n                if not org:\n                    org = Organization(name=name)\n                    self._organizations[name] = org\n\n                end_date = rol[1]\n\n                enrollment = Enrollment(start=start_date, end=end_date,\n                                        organization=org)\n                uid.enrollments.append(enrollment)\n\n                if end_date != MAX_PERIOD_DATE:\n                    start_date = end_date\n\n    def __parse_organizations(self, domain_to_employer):\n        \"\"\"Parse Gitdm organizations\"\"\"\n\n        # Parse streams\n        self.__parse_domain_to_employer_stream(domain_to_employer)\n\n        for org in self.__raw_orgs:\n            o = Organization(name=org)\n\n            for dom in self.__raw_orgs[org]:\n                d = Domain(domain=dom, is_top_domain=False)\n                o.domains.append(d)\n\n            self._organizations[org] = o\n\n    def __parse_aliases_stream(self, stream):\n        \"\"\"Parse aliases stream.\n\n        The stream contains a list of usernames (they can be email addresses\n        their username aliases. Each line has a username and an alias separated\n        by tabs. Comment lines start with the hash character (#).\n\n        Example:\n\n        # List of email aliases\n        jsmith@example.com    jsmith@example.net\n        jsmith@example.net    johnsmith@example.com\n        jdoe@example.com      john_doe@example.com\n        jdoe@example          john_doe@example.com\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_aliases_line\n\n        for alias_entries in self.__parse_stream(stream, f):\n            alias = alias_entries[0]\n            username = alias_entries[1]\n\n            self.__raw_aliases[alias] = username\n\n    def __parse_email_to_employer_stream(self, stream):\n        \"\"\"Parse email to employer stream.\n\n        The stream contains a list of email addresses and their employers.\n        Each line has an email address and a organization name separated by\n        tabs. Optionally, the date when the identity withdrew from the\n        organization can be included followed by a '<' character. Comment\n        lines start with the hash character (#).\n\n        Example:\n\n        # List of enrollments\n        jsmith@example.com    Example Company # John Smith\n        jdoe@example.com    Example Company   # John Doe\n        jsmith@example.com    Bitergia < 2015-01-01  # John Smith - Bitergia\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_email_to_employer_line\n\n        for rol in self.__parse_stream(stream, f):\n            email = rol[0]\n            org = rol[1]\n            rol_date = rol[2]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            if email not in self.__raw_identities:\n                self.__raw_identities[email] = [(org, rol_date)]\n            else:\n                self.__raw_identities[email].append((org, rol_date))\n\n    def __parse_domain_to_employer_stream(self, stream):\n        \"\"\"Parse domain to employer stream.\n\n        Each line of the stream has to contain a domain and a organization,\n        or employer, separated by tabs. Comment lines start with the hash\n        character (#)\n\n        Example:\n\n        # Domains from domains.txt\n        example.org        Example\n        example.com        Example\n        bitergia.com       Bitergia\n        libresoft.es       LibreSoft\n        example.org        LibreSoft\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_domain_to_employer_line\n\n        for o in self.__parse_stream(stream, f):\n            org = o[0]\n            dom = o[1]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            self.__raw_orgs[org].append(dom)\n\n    def __parse_stream(self, stream, parse_line):\n        \"\"\"Generic method to parse gitdm streams\"\"\"\n\n        if not stream:\n            raise InvalidFormatError(cause='stream cannot be empty or None')\n\n        nline = 0\n        lines = stream.split('\\n')\n\n        for line in lines:\n            nline += 1\n\n            # Ignore blank lines and comments\n            m = re.match(self.LINES_TO_IGNORE_REGEX, line, re.UNICODE)\n            if m:\n                continue\n\n            m = re.match(self.VALID_LINE_REGEX, line, re.UNICODE)\n            if not m:\n                cause = \"line %s: invalid format\" % str(nline)\n                raise InvalidFormatError(cause=cause)\n\n            try:\n                result = parse_line(m.group(1), m.group(2))\n                yield result\n            except InvalidFormatError as e:\n                cause = \"Skip: '%s' -> line %s: %s\" % (line, str(nline), e)\n                logger.warning(cause)\n                continue\n\n    def __parse_aliases_line(self, raw_alias, raw_username):\n        \"\"\"Parse aliases lines\"\"\"\n\n        alias = self.__encode(raw_alias)\n        username = self.__encode(raw_username)\n\n        return alias, username\n\n    def __parse_email_to_employer_line(self, raw_email, raw_enrollment):\n        \"\"\"Parse email to employer lines\"\"\"\n\n        e = re.match(self.EMAIL_ADDRESS_REGEX, raw_email, re.UNICODE)\n        if not e and self.email_validation:\n            cause = \"invalid email format: '%s'\" % raw_email\n            raise InvalidFormatError(cause=cause)\n\n        if self.email_validation:\n            email = e.group('email').strip()\n        else:\n            email = raw_email\n\n        raw_enrollment = raw_enrollment.strip() if raw_enrollment != ' ' else raw_enrollment\n        r = re.match(self.ENROLLMENT_REGEX, raw_enrollment, re.UNICODE)\n        if not r:\n            cause = \"invalid enrollment format: '%s'\" % raw_enrollment\n            raise InvalidFormatError(cause=cause)\n\n        org = r.group('organization').strip()\n        date = r.group('date')\n\n        if date:\n            try:\n                dt = dateutil.parser.parse(r.group('date'))\n            except Exception as e:\n                cause = \"invalid date: '%s'\" % date\n        else:\n            dt = MAX_PERIOD_DATE\n\n        email = self.__encode(email)\n        org = self.__encode(org)\n\n        return email, org, dt\n\n    def __parse_domain_to_employer_line(self, raw_domain, raw_org):\n        \"\"\"Parse domain to employer lines\"\"\"\n\n        d = re.match(self.DOMAIN_REGEX, raw_domain, re.UNICODE)\n        if not d:\n            cause = \"invalid domain format: '%s'\" % raw_domain\n            raise InvalidFormatError(cause=cause)\n\n        dom = d.group('domain').strip()\n\n        raw_org = raw_org.strip() if raw_org != ' ' else raw_org\n        o = re.match(self.ORGANIZATION_REGEX, raw_org, re.UNICODE)\n        if not o:\n            cause = \"invalid organization format: '%s'\" % raw_org\n            raise InvalidFormatError(cause=cause)\n\n        org = o.group('organization').strip()\n\n        org = self.__encode(org)\n        dom = self.__encode(dom)\n\n        return org, dom\n\n    def __encode(self, s):\n        return s if s else None\n",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.4828141822324491e-05,
      "p_css": 0.29376548830105903,
      "p_html": 0.5348664114180691,
      "p_java": 0.0029431569881648604,
      "p_javascript": 0.00014495565773585005,
      "p_matlab": 5.847631470148304e-06,
      "p_python": 0.009968883320110214,
      "p_sql": 0.09796859339792886,
      "p_typescript": 0.060321835143639806
    },
    {
      "text": "def char_in_string(char, string):\n    for c in string:\n        if c == char:\n            return True\n    return False",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.7425734244636018e-10,
      "p_css": 3.4349288399020024e-05,
      "p_html": 1.4352378066132336e-05,
      "p_java": 0.8561931745660064,
      "p_javascript": 3.070750723071309e-12,
      "p_matlab": 1.1795016848876523e-06,
      "p_python": 0.14368764710598195,
      "p_sql": 6.91188568124087e-05,
      "p_typescript": 1.7812572124106114e-07
    },
    {
      "text": "import tkinter\n \ndef mbutton():\n    t = tkinter.Toplevel()\n    t.geometry('400x400')\n    t.title('New Window')\n    tkinter.Button(t, text='Click me').pack()\n \nroot = tkinter.Tk()\nroot.geometry('200x200')\nb1 = tkinter.Button(root, text='Open new window', command=mbutton)\nb2 = tkinter.Button(root, text='Close', command=root.destroy)\nb1.pack()\nb2.pack() \nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00961855415919316,
      "p_css": 0.016903009742825856,
      "p_html": 0.10467013303831207,
      "p_java": 0.0015382143056834666,
      "p_javascript": 0.0065063531689368926,
      "p_matlab": 0.020520770180365945,
      "p_python": 0.5671489902653685,
      "p_sql": 0.24951752072225158,
      "p_typescript": 0.023576454417062336
    },
    {
      "text": "import requests\n\n# Fill in your OpenWeatherMap API Key\napi_key = \"xxxxxxxxxxxxxxxxxxxxx\"\n\n# Base URL for OpenWeatherMap API\nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n\n# City for which we want to retrieve weather data\ncity = \"Tokyo\"\n\n# Complete URL used to retrieve weather data\nurl = base_url + \"appid=\" + api_key + \"&q=\" + city \n\n# Retrieve response in json format \nresponse = requests.get(url) \n\n# Parse the response and retrieve data\n# Store the weather data in a variable\nweather_data = response.json()",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 5.395843516526498e-07,
      "p_css": 0.9603308007848567,
      "p_html": 0.0036693767025065397,
      "p_java": 0.0003437472512690927,
      "p_javascript": 0.003921741416162816,
      "p_matlab": 0.0002735013004662024,
      "p_python": 0.009596060304504448,
      "p_sql": 0.00044901281247149464,
      "p_typescript": 0.021415219843411163
    },
    {
      "text": "# Import the required libraries\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndata_file_path = \"<insert_file_path_here>\"\ndata = pd.read_csv(data_file_path)\n\n# Create X and y variables\nX = data.drop(['heart_disease'], axis=1)\ny = data['heart_disease']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the given input\nX_pred = [[35, 1, 200, 71]]  # Age, Gender, Cholesterol Level, Height\nprediction = model.predict_proba(X_pred)[0]\nprint('Probability of having heart disease: ', prediction[1])",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.11269989438722569,
      "p_css": 0.10284967790584881,
      "p_html": 0.0032529874545967436,
      "p_java": 4.291687879120656e-07,
      "p_javascript": 1.9857308109841737e-05,
      "p_matlab": 2.178811743011663e-06,
      "p_python": 0.051473356710059474,
      "p_sql": 2.316494063138592e-06,
      "p_typescript": 0.7296993017595654
    },
    {
      "text": "def sort_list(list):\n for _ in range(len(list)):\n for j in range(len(list)-1):\n if list[j] > list[j+1]:\n list[j], list[j+1] = list[j+1], list[j]\n return list\n\n# Testing the function\nexample_list = [3, 1, 8, 5, 7]\nsorted_list = sort_list(example_list)\n\nprint(sorted_list)\n# Output: [1, 3, 5, 7, 8]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00010308177659883626,
      "p_css": 4.214117065971642e-05,
      "p_html": 0.00037153017214601675,
      "p_java": 4.9641979643605265e-06,
      "p_javascript": 0.0013092623091139031,
      "p_matlab": 0.7299662017031121,
      "p_python": 0.26189722026186374,
      "p_sql": 0.006270409007872419,
      "p_typescript": 3.5189400668872664e-05
    },
    {
      "text": "def optimize_code(code):\n    optimized_code = \"\"\n    lines = code.splitlines()\n    indentation_level = 0\n\n    for line in lines:\n        # Remove redundant white space and apply proper indentation\n        optimized_code += \" \" * indentation_level + line.strip() + \"\\n\"\n\n        # Increment/Decrement indentation level \n        if line.endswith(\":\"):\n            indentation_level += 4\n        else:\n            if line[0] not in [\"#\", \"\"]:\n                indentation_level -= 4\n        indentation_level = max(indentation_level, 0) # prevent it going below 0\n\n    return optimized_code",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.3532827381459187,
      "p_css": 0.002874157796505094,
      "p_html": 0.0032367994315459603,
      "p_java": 7.475702909312158e-05,
      "p_javascript": 0.0001544104360222538,
      "p_matlab": 0.022471188184230932,
      "p_python": 0.006836263084229002,
      "p_sql": 0.00010343849248819081,
      "p_typescript": 0.6109662473999667
    },
    {
      "text": "def calculate_total_cost(prices, quantities):\n total = 0\n for price, quantity in zip(prices, quantities):\n total += price * quantity\n return total",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001088082444733101,
      "p_css": 0.040478098189592845,
      "p_html": 0.0037995988758741718,
      "p_java": 0.0002192681393184549,
      "p_javascript": 0.0009690494092639419,
      "p_matlab": 0.0017506374909152754,
      "p_python": 0.9486824596129377,
      "p_sql": 0.0007894254315041454,
      "p_typescript": 0.0022233804058603224
    },
    {
      "text": "def permutations(string):\n  if len(string) == 1:\n    return [string]\n  \n  result = []\n  for i in range(0, len(string)):\n    subString = string[0:i] + string[i+1: len(string)]\n    subPermutations = permutations(subString)\n    for j in range(0, len(subPermutations)):\n      result.append(string[i] + subPermutations[j])\n  \n  return result",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.2380514904691522e-19,
      "p_css": 2.8873396695149657e-11,
      "p_html": 3.086217675445042e-12,
      "p_java": 0.9999760058445891,
      "p_javascript": 1.8100032493233892e-22,
      "p_matlab": 3.1129141823791974e-12,
      "p_python": 2.3953978008945465e-05,
      "p_sql": 4.014204774392437e-08,
      "p_typescript": 2.8175686578675406e-13
    },
    {
      "text": "for i in range(1, 5):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.1370891400445182e-11,
      "p_css": 8.007936004238141e-13,
      "p_html": 6.832173677190107e-10,
      "p_java": 9.813795350342565e-13,
      "p_javascript": 6.166383762648635e-13,
      "p_matlab": 0.9982171889527836,
      "p_python": 0.0017828095830992661,
      "p_sql": 7.273396179134729e-10,
      "p_typescript": 2.9790485620697413e-11
    },
    {
      "text": "class Student:\n  def __init__(self, name, roll_number, courses):\n    self.name = name \n    self.roll_number = roll_number \n    self.courses = courses",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0007874673836534847,
      "p_css": 0.0013082819859774623,
      "p_html": 0.01639877108807548,
      "p_java": 0.6932348600021169,
      "p_javascript": 3.6317025714259075e-08,
      "p_matlab": 1.0960575613565188e-05,
      "p_python": 0.28295238609616835,
      "p_sql": 0.004631867032536825,
      "p_typescript": 0.0006753695188323377
    },
    {
      "text": "\"\"\"\nCreating an AI Chatbot in Python\n\"\"\"\n\nimport re\nimport random\n\nbot_greetings = [\"Hi!\", \"Hey there!\", \"Good morning!\", \"Good afternoon!\"]\n\n# Define a function that responds to a user's message\ndef respond_to_message(message):\n    # If the message is a greeting, then return a random greeting response\n    if re.search('(hey|hi|hello|morning|afternoon)', message):\n        return random.choice(bot_greetings)\n    # For other messages, you can provide a response that contains the appropriate task instructions\n    elif re.search('(ticket|booking|reservation)', message):\n        return \"To book a ticket, you can enter your travel details here .\"\n    elif re.search('(hotel|accomodation)', message):\n        return \"To book a hotel room, you can enter your dates and other details here .\"\n    else:\n        return \"I don't understand your query. Please enter a valid input!\"\n  \nif __name__ == '__main__':\n    user_message = input(\"User: \")\n    bot_response = respond_to_message(user_message)\n    print(\"Bot:\", bot_response)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.000651871589259582,
      "p_css": 0.07153216631017222,
      "p_html": 0.03805883818410138,
      "p_java": 8.00582656691742e-05,
      "p_javascript": 0.07039184828853531,
      "p_matlab": 0.00045249538857539297,
      "p_python": 0.1602787398247837,
      "p_sql": 0.04713356010636533,
      "p_typescript": 0.6114204220425379
    },
    {
      "text": "def Fahrenheit_to_Celsius(Fahrenheit_Temps): \n    Celsius_Temps = [] \n    for temp in Fahrenheit_Temps: \n        Celsius = (temp - 32) * 5 / 9\n        Celsius_Temps.append(Celsius) \n    return Celsius_Temps \n\nFahrenheit_Temps = [150, 160, 170, 180, 190] \nCelsius_Temps = Fahrenheit_to_Celsius(Fahrenheit_Temps) \nprint(\"Celsius Temperatures =\", Celsius_Temps)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0006200431577317732,
      "p_css": 0.0033412539953849413,
      "p_html": 0.0016993759244304121,
      "p_java": 0.00010800640939745339,
      "p_javascript": 0.0006365880220756959,
      "p_matlab": 0.9911220926718481,
      "p_python": 0.0014396111924663904,
      "p_sql": 0.0003824052209517333,
      "p_typescript": 0.0006506234057135829
    },
    {
      "text": "def word_frequency(sentence):\n    words = sentence.split()\n    freq = {word: words.count(word) for word in words}\n    return freq\n\nsentence = 'This is a sample sentence.'\nresult = word_frequency(sentence)\nprint(result)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.000278915266272115,
      "p_css": 0.0031459996466343984,
      "p_html": 0.003084562119644914,
      "p_java": 3.3447078705871034e-06,
      "p_javascript": 2.614226387085825e-05,
      "p_matlab": 1.0883425865239427e-05,
      "p_python": 0.9137869723291306,
      "p_sql": 0.07964700103919832,
      "p_typescript": 1.6179201512935074e-05
    },
    {
      "text": "def calculate_sum(numbers):\n    return sum(numbers)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00013914892310363822,
      "p_css": 0.0004096711141866784,
      "p_html": 0.0009749955716413681,
      "p_java": 0.6270610180631482,
      "p_javascript": 0.001163707635314576,
      "p_matlab": 1.9311945654403216e-08,
      "p_python": 0.3698384870224505,
      "p_sql": 0.0001984753506543955,
      "p_typescript": 0.00021447700755500325
    },
    {
      "text": "def power(num, pow):\n return num**pow",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00016017924824180543,
      "p_css": 1.7530544210446547e-06,
      "p_html": 0.00031898076812772263,
      "p_java": 3.38675808107637e-05,
      "p_javascript": 7.137467951788715e-05,
      "p_matlab": 0.9273700379812074,
      "p_python": 0.07176294207786332,
      "p_sql": 9.455704056252878e-05,
      "p_typescript": 0.00018630756924747764
    },
    {
      "text": "presidents = {\n \"George Washington\": 1, \n \"John Adams\": 1, \n \"Thomas Jefferson\": 2,\n \"James Madison\": 2, \n \"James Monroe\": 2, \n \"John Quincy Adams\": 1, \n \"Andrew Jackson\": 2, \n \"Martin Van Buren\": 1, \n \"William Henry Harrison\": 1, \n \"John Tyler\": 1, \n \"James K. Polk\": 1,\n \"Zachary Taylor\": 1, \n \"Millard Fillmore\": 1, \n \"Franklin Pierce\": 1, \n \"James Buchanan\": 1, \n \"Abraham Lincoln\": 2, \n \"Andrew Johnson\": 1, \n \"Ulysses S. Grant\": 2, \n \"Rutherford B. Hayes\": 1, \n \"James A. Garfield\": 1, \n \"Chester A. Arthur\": 1, \n \"Grover Cleveland\": 2, \n \"Benjamin Harrison\": 1, \n \"William McKinley\": 2,\n \"Theodore Roosevelt\": 2,\n \"William Howard Taft\": 1, \n \"Woodrow Wilson\": 2, \n \"Warren G. Harding\": 1, \n \"Calvin Coolidge\": 2,\n \"Herbert Hoover\": 1, \n \"Franklin D. Roosevelt\": 4, \n \"Harry S. Truman\": 2, \n \"Dwight D. Eisenhower\": 2, \n \"John F. Kennedy\": 1, \n \"Lyndon B. Johnson\": 1, \n \"Richard Nixon\": 2, \n \"Gerald Ford\": 1, \n \"Jimmy Carter\": 1, \n \"Ronald Reagan\": 2, \n \"George H. W. Bush\": 1, \n \"Bill Clinton\": 2, \n \"George W. Bush\": 2, \n \"Barack Obama\": 2, \n \"Donald Trump\": 1\n}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.07851596526352085,
      "p_css": 0.6788775416588001,
      "p_html": 0.07177821235292518,
      "p_java": 0.0035795129983552895,
      "p_javascript": 0.011909175060420043,
      "p_matlab": 0.011722450083115175,
      "p_python": 0.10779131996685466,
      "p_sql": 0.004631006240873948,
      "p_typescript": 0.03119481637513483
    },
    {
      "text": "def is_power_of_two(num):\n    if num == 0:\n        return False\n    while num % 2 == 0:\n        num /= 2\n    return num == 1\n\nprint(is_power_of_two(32))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.5633372969705397e-09,
      "p_css": 4.721973621183827e-14,
      "p_html": 1.3832861663574712e-08,
      "p_java": 3.9294441522615553e-10,
      "p_javascript": 6.361653240283727e-10,
      "p_matlab": 0.9999518928918508,
      "p_python": 4.8084376941423694e-05,
      "p_sql": 2.2974862700553316e-09,
      "p_typescript": 2.0083656842254354e-09
    },
    {
      "text": "def merge_sorted_lists(listA, listB): \n    merged_list = []\n    ptrA = 0\n    ptrB = 0\n    while ptrA < len(listA) and ptrB < len(listB): \n        if listA[ptrA] <= listB[ptrB]: \n            merged_list.append(listA[ptrA]) \n            ptrA += 1\n        else: \n            merged_list.append(listB[ptrB]) \n            ptrB += 1\n    while ptrA < len(listA): \n        merged_list.append(listA[ptrA]) \n        ptrA += 1\n    while ptrB < len(listB):\n        merged_list.append(listB[ptrB])\n        ptrB += 1\n    return merged_list",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.011875644230263787,
      "p_css": 0.0487082766867886,
      "p_html": 0.028082841368764166,
      "p_java": 0.004969428377247762,
      "p_javascript": 0.006741324599667865,
      "p_matlab": 0.4726707245735318,
      "p_python": 0.3742177768832962,
      "p_sql": 0.005097667644051107,
      "p_typescript": 0.047636315636388434
    },
    {
      "text": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001502218168582148,
      "p_css": 0.002130483404044354,
      "p_html": 0.009809312402539131,
      "p_java": 3.119099764220558e-05,
      "p_javascript": 5.520871087657402e-05,
      "p_matlab": 1.1438392552900259e-05,
      "p_python": 0.9794474878833115,
      "p_sql": 0.008056324292945269,
      "p_typescript": 0.00030833209922987635
    },
    {
      "text": "def insert_element(arr, element):\n    # Find insertion index\n    i = 0\n    while i < len(arr) and element > arr[i]:\n        i += 1\n \n    # Shift array elements\n    j = len(arr) - 1\n    while j >= i:\n        arr[j + 1] = arr[j]\n        j -= 1\n\n    # Insert element\n    arr[i] = element\n\n    return arr\n\narr = [1, 2, 6, 8]\nelement = 3\n\ninsert_element(arr, element)\n\n# Output: [1, 2, 3, 6, 8]",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 8.497598166341649e-07,
      "p_css": 1.2842346487177887e-06,
      "p_html": 2.7250246681348984e-07,
      "p_java": 2.2031150724734996e-07,
      "p_javascript": 1.4262008142736406e-07,
      "p_matlab": 0.9986767206273812,
      "p_python": 0.0013194706781420055,
      "p_sql": 2.950185669162388e-10,
      "p_typescript": 1.038970937427245e-06
    },
    {
      "text": "def fizz_buzz(arr):\n    new_arr = []\n    for element in arr:\n        if element % 3 == 0 and element % 5 == 0:\n            new_arr.append(\"FizzBuzz\")\n        elif element % 3 == 0:\n            new_arr.append(\"Fizz\")\n        elif element % 5 == 0:\n            new_arr.append(\"Buzz\")\n        else:\n            new_arr.append(element)\n    return new_arr\n\nprint(fizz_buzz([2, 3, 4, 5, 6, 15]))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.652013793467779e-13,
      "p_css": 4.76198333080634e-12,
      "p_html": 1.4550388448727824e-13,
      "p_java": 3.1232854782096207e-13,
      "p_javascript": 3.484154903507263e-13,
      "p_matlab": 0.9999999999764062,
      "p_python": 1.342855956238616e-11,
      "p_sql": 1.1127329448353819e-18,
      "p_typescript": 3.931636973732946e-12
    },
    {
      "text": "def odd_numbers(num):\n for n in range(num+1):\n if n % 2 != 0:\n print(n)\n\nodd_numbers(user_number)\n# Output: 1, 3, 5, 7, 9",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1618107181877443e-16,
      "p_css": 2.1136189679334074e-26,
      "p_html": 1.4498361722651736e-16,
      "p_java": 7.9825347805325675e-19,
      "p_javascript": 2.4267916406203042e-18,
      "p_matlab": 0.9999999999998539,
      "p_python": 1.459263138864654e-13,
      "p_sql": 7.173480495221839e-19,
      "p_typescript": 3.418273197239462e-18
    },
    {
      "text": "def contains_substring(haystack, needle): \n return needle in haystack\n\n# Usage example\ncontains_substring(\"This is a string\", \"is\") # returns True \ncontains_substring(\"This is a string\", \"xyz\") # returns False",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.1418168022537256e-08,
      "p_css": 2.4278821405066656e-06,
      "p_html": 2.5385172331364607e-05,
      "p_java": 0.9993126412491032,
      "p_javascript": 1.4465978001005815e-08,
      "p_matlab": 3.1176442415591197e-07,
      "p_python": 0.0006303032919789001,
      "p_sql": 2.7151496100791813e-05,
      "p_typescript": 1.753259774795422e-06
    },
    {
      "text": "def verify_input(user_input):\n    # Define the accepted characters\n    allowed_chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0987654321_\"\n    for char in user_input:\n        if char not in allowed_chars:\n            return False\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009471774920057808,
      "p_css": 0.0024439367770517115,
      "p_html": 0.0004891204187476194,
      "p_java": 1.7636111672385091e-06,
      "p_javascript": 9.37462269672865e-05,
      "p_matlab": 0.0003002346249454158,
      "p_python": 0.9949365524721089,
      "p_sql": 0.0005196134802121449,
      "p_typescript": 0.0002678548967939185
    },
    {
      "text": "import string\n\ndef removePunctuations(sentence):\n    return sentence.translate(str.maketrans('', '', string.punctuation))\n\nprint(removePunctuations(\"This, is a?! test* sentence.\"))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.8421515074973184e-07,
      "p_css": 0.00035159357852783814,
      "p_html": 0.00047676619589644826,
      "p_java": 0.7871290494703403,
      "p_javascript": 1.640158266546284e-08,
      "p_matlab": 3.0017840898114487e-07,
      "p_python": 0.17033188583161743,
      "p_sql": 0.041694052420307395,
      "p_typescript": 1.6151708168080185e-05
    },
    {
      "text": "def is_valid_spectrum(spectrum):\n    m = spectrum[0]\n    for n in spectrum[1:]:\n        if n - m not in [1, 2]:\n            return False\n        m = n\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.9260848409070433e-05,
      "p_css": 6.678854193048696e-05,
      "p_html": 0.0009942821772118509,
      "p_java": 1.4888350895478617e-07,
      "p_javascript": 2.4993102854512414e-06,
      "p_matlab": 0.01966007623036863,
      "p_python": 0.979181648288528,
      "p_sql": 5.945197668661324e-05,
      "p_typescript": 5.843743070886946e-06
    },
    {
      "text": "class Vector2D:\n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n\n    # Adds two vectors\n    def __add__(self, other):\n        x = self.x + other.x\n        y = self.y + other.y\n        return Vector2D(x, y)\n\n    # Subtracts two vectors\n    def __sub__(self, other):\n        x = self.x - other.x\n        y = self.y - other.y\n        return Vector2D(x, y)\n\n    # Multiplies a vector by a scalar\n    def __mul__(self, other):\n        x = self.x * other\n        y = self.y * other\n        return Vector2D(x, y)  \n\n    # Divides a vector by a scalar\n    def __truediv__(self, other):\n        x = self.x / other\n        y = self.y / other\n        return Vector2D(x, y)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00155408931413018,
      "p_css": 0.025681479455556776,
      "p_html": 0.037164904333540034,
      "p_java": 0.00043063493962572466,
      "p_javascript": 0.009270634275475446,
      "p_matlab": 5.375176982719059e-05,
      "p_python": 0.8773394066805349,
      "p_sql": 0.04748781230885546,
      "p_typescript": 0.0010172869224542357
    },
    {
      "text": "This function accepts a parameter n which denotes the length of the random string to generate. It creates a string containing all the alphabets, numbers, and special characters. It initializes a result string to store the random string generated and then uses the Python random() method to generate a random index in the range of the length of the alphabets string. It then assigns the character at the random index to the result string and then loops until it generates a string of the given length. Finally, it returns the randomly generated string.",
      "y_true": "javascript",
      "pred_label": "typescript",
      "p_bash": 3.962177262816498e-10,
      "p_css": 1.951294872534319e-07,
      "p_html": 5.4988680926410384e-08,
      "p_java": 0.09787969767740151,
      "p_javascript": 5.698528656899261e-07,
      "p_matlab": 9.816015144068516e-12,
      "p_python": 2.7422767702719564e-05,
      "p_sql": 0.00022090077090408252,
      "p_typescript": 0.901871158406924
    },
    {
      "text": "def add_two_nums(a, b):\n return a * b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0458681726310896e-12,
      "p_css": 2.5489143973834694e-10,
      "p_html": 2.7598246867965498e-11,
      "p_java": 8.025231839209999e-13,
      "p_javascript": 3.049889349032867e-12,
      "p_matlab": 3.595677408560778e-18,
      "p_python": 0.9999999972484059,
      "p_sql": 2.461794976084354e-09,
      "p_typescript": 4.1123042603913176e-13
    },
    {
      "text": "def generate_even_number():\n# Generate a random number between 10 and 200\n num = random.randint(10, 200)\n# Check if the number is even\n if num % 2 == 0:\n# Check if the number is divisible by 5\n  if num % 5 == 0:\n   return num\n# If number not divisible by 5, increment number\n  else:\n   return generate_even_number(num+1)\n# If number not even, increment number\n else:\n   return generate_even_number(num+1)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.66187715175867e-07,
      "p_css": 1.4523808121052278e-08,
      "p_html": 9.654596223841402e-07,
      "p_java": 2.7080567829510814e-08,
      "p_javascript": 1.056777371493259e-06,
      "p_matlab": 0.9930073188988363,
      "p_python": 0.006985192556617275,
      "p_sql": 3.2270697879327897e-06,
      "p_typescript": 1.8314456734246775e-06
    },
    {
      "text": "def find_division_by_5(lst):\n    \"\"\"Search through a list and return all elements which are divisible by 5\"\"\"\n    result = []\n    for item in lst:\n        if item % 5 == 0:\n            result.append(item)\n    \n    return result\n    \nif __name__ == '__main__':\n    lst = [4, 9, 5, 20, 21, 33]\n    print(find_division_by_5(lst))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.600351564604921e-07,
      "p_css": 0.0038162395707741427,
      "p_html": 4.529267068406079e-05,
      "p_java": 5.845315185474833e-06,
      "p_javascript": 9.023297768361754e-05,
      "p_matlab": 0.0003917985243235554,
      "p_python": 0.9953761933036311,
      "p_sql": 9.265220279220449e-05,
      "p_typescript": 0.0001810853997692312
    },
    {
      "text": "def count_frequencies(strings):\n    frequencies = {}\n    for string in strings:\n        if string in frequencies:\n            frequencies[string] += 1\n        else:\n            frequencies[string] = 1\n    return [(string, frequency) for string, frequency in frequencies.items()]",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.377420722948812e-12,
      "p_css": 2.681314504808997e-06,
      "p_html": 2.1629289530413627e-07,
      "p_java": 0.99989041840518,
      "p_javascript": 3.431427049777302e-13,
      "p_matlab": 7.479911050765097e-08,
      "p_python": 9.901764277614308e-05,
      "p_sql": 7.550292766058465e-06,
      "p_typescript": 4.124704656737085e-08
    },
    {
      "text": "def farthest_from_begining_index(arr):\n    index = -1\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            index = i\n            if index > max_index:\n                max_index = index\n    return max_index",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00037683447205343366,
      "p_css": 2.3221189825409057e-05,
      "p_html": 0.0003605373218651768,
      "p_java": 6.196055589527334e-06,
      "p_javascript": 3.41990372303347e-05,
      "p_matlab": 0.9522422457399247,
      "p_python": 0.04690692910940373,
      "p_sql": 2.8392590839988776e-06,
      "p_typescript": 4.699781502375447e-05
    },
    {
      "text": "def valid_phone_number(phone):\n    phone = str(phone)\n    return len(phone) == 10 and phone.isdigit()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008087613102923443,
      "p_css": 0.034736441123031196,
      "p_html": 0.0022048458629970046,
      "p_java": 0.00020526371052190085,
      "p_javascript": 0.0018536661103113314,
      "p_matlab": 0.0006313741100190098,
      "p_python": 0.950142884742802,
      "p_sql": 0.0009627595602903381,
      "p_typescript": 0.008454003469734916
    },
    {
      "text": "import numpy as np \nimport matplotlib.pyplot as plt \n\ndef optimal_k(X): \n \n distortions = [] \n inertias = [] \n mapping1 = {} \n mapping2 = {} \n K = range(1,10) \n\n for k in K: \n #Building and fitting the model \n kmeanModel = KMeans(n_clusters=k).fit(X) \n kmeanModel.fit(X) \n \n distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, \n 'euclidean'),axis=1)) / X.shape[0]) \n inertias.append(kmeanModel.inertia_) \n\n #Visualize \n plt.plot(K, distortions, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Distortion') \n plt.title('The Elbow Method using Distortion') \n plt.show() \n \n plt.plot(K, inertias, 'bx-') \n plt.xlabel('Values of K') \n plt.ylabel('Inertia') \n plt.title('The Elbow Method using Inertia') \n plt.show() \n\noptimal_k(X)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.02650140373812587,
      "p_css": 0.016583327302832396,
      "p_html": 0.47816437653233923,
      "p_java": 0.002017757390948635,
      "p_javascript": 0.005399712676665545,
      "p_matlab": 0.004281101245559579,
      "p_python": 0.23491072574265492,
      "p_sql": 0.0004991958787947171,
      "p_typescript": 0.231642399492079
    },
    {
      "text": "def is_permutation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    c1 = [0] * 256\n    c2 = [0] * 256\n\n    for i in range(len(s1)):\n        c1[ord(s1[i])] += 1\n        c2[ord(s2[i])] += 1\n\n    if c1 == c2:\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001396169648464872,
      "p_css": 0.0003732300531469885,
      "p_html": 0.0006166889782920201,
      "p_java": 1.040936185940817e-05,
      "p_javascript": 2.419617177871503e-05,
      "p_matlab": 0.0004852732601315827,
      "p_python": 0.9981077296516788,
      "p_sql": 0.00016359687587531518,
      "p_typescript": 7.9258682390893e-05
    },
    {
      "text": "def to_ascii(arr):\n    res = []\n    for c in arr:\n        res.append(ord(c))\n    return res\n\nprint(to_ascii(['a', 'b', 'c', 'd']))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.3224111207237415e-05,
      "p_css": 0.002282668258179388,
      "p_html": 7.679908984788047e-05,
      "p_java": 1.021916535127541e-05,
      "p_javascript": 2.1751641328575765e-05,
      "p_matlab": 0.9768728934824884,
      "p_python": 0.020612476390170883,
      "p_sql": 2.727349522504871e-05,
      "p_typescript": 6.269436620115945e-05
    },
    {
      "text": "def is_prime(num):\n    if num > 1:\n        for i in range(2,int(num**0.5)+1):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True\n\nnum = 47\nif (is_prime(num)):\n    print(num,\"is a prime number\")\nelse:\n    print(num,\"is not a prime number\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.877834037597654e-09,
      "p_css": 1.7377764220273289e-13,
      "p_html": 4.142204957531136e-08,
      "p_java": 1.942442841484623e-08,
      "p_javascript": 2.6013712794532485e-09,
      "p_matlab": 0.9985868926552012,
      "p_python": 0.001413018883250884,
      "p_sql": 1.246894319272886e-08,
      "p_typescript": 2.66674781391051e-09
    },
    {
      "text": "import matplotlib.pyplot as plt\n\ndef generate_bar_chart(data):\n    plt.bar(list(range(len(data))), data)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('Bar Chart')\n    plt.show()\n\nif __name__ == '__main__':\n    generate_bar_chart(data)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.7136789879253964e-05,
      "p_css": 0.0016719240304524298,
      "p_html": 0.9783845477313625,
      "p_java": 7.328517964869512e-06,
      "p_javascript": 8.587943393648107e-06,
      "p_matlab": 8.467878167083227e-05,
      "p_python": 0.01716129069252604,
      "p_sql": 0.0015186995660614617,
      "p_typescript": 0.0011458059466890485
    },
    {
      "text": "def HammingDistance(str1,str2): \n    # find out the length of the longest string \n    l1 = len(str1) \n    l2 = len(str2) \n  \n    # create a matrix of size l1 x l2 \n    m = [[None]*(l2+1) for i in range(l1+1)] \n  \n    # initialize the first row of the matrix \n    for i in range(l2+1): \n        m[0][i] = i \n  \n    # initialize the first column \n    for i in range(l1+1): \n        m[i][0] = i \n  \n    # traverse the matrix row by row \n    for i in range(1,l1+1): \n        for j in range(1, l2+1):\n            if str1[i-1] == str2[j-1]: \n                m[i][j] = m[i-1][j-1] \n            else:\n                m[i][j] = 1 + min(m[i][j-1], m[i-1][j], m[i-1][j-1]) \n  \n    return m[l1][l2] \n  \n# Driver code \nstr1,str2 = \"Random String1\", \"This is a random string\"\nprint(HammingDistance(str1,str2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.2390488819616274e-05,
      "p_css": 3.90461261354451e-05,
      "p_html": 2.2120494284548097e-05,
      "p_java": 0.009683333064773434,
      "p_javascript": 0.0014192802067389465,
      "p_matlab": 0.006488514783086007,
      "p_python": 0.9510722957934543,
      "p_sql": 0.024083391733579717,
      "p_typescript": 0.007179627309127783
    },
    {
      "text": "def has_sublist_with_sum(list, n):\n    for i in range(len(list) - 1):\n        sum = 0\n        for j in range(i + 1, len(list)):\n            sum += list[j]\n            if sum == n:\n                return True\n    \n    return False\n\nlist = [2, 3, 4]\nn = 8\n\nprint(has_sublist_with_sum(list, n)) # prints True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2343694622898863e-05,
      "p_css": 8.986830102127536e-07,
      "p_html": 4.6997826479015804e-05,
      "p_java": 3.6294777526879874e-07,
      "p_javascript": 7.507953710221206e-07,
      "p_matlab": 0.9754740326875065,
      "p_python": 0.024306961077356463,
      "p_sql": 0.00015638077734435833,
      "p_typescript": 1.2715105342243264e-06
    },
    {
      "text": "import tweepy\n\n# authentication\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Tweeting\ntext = 'Hello, world!'\napi.update_status(text)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.15310953459975568,
      "p_css": 0.04779580065814822,
      "p_html": 0.010315207882585232,
      "p_java": 1.4958521393456448e-06,
      "p_javascript": 0.023700645089081356,
      "p_matlab": 0.0029730212055229287,
      "p_python": 0.7466734073389614,
      "p_sql": 0.002764622525352659,
      "p_typescript": 0.012666264848453462
    },
    {
      "text": "def add_integers(num1, num2):\n return num1 + num2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.908334337623566e-05,
      "p_css": 0.0003986252727830932,
      "p_html": 8.518028745315872e-05,
      "p_java": 1.941854745673087e-06,
      "p_javascript": 3.908872925889848e-05,
      "p_matlab": 1.1795296664171664e-05,
      "p_python": 0.9991929327205743,
      "p_sql": 0.00017430472775613795,
      "p_typescript": 4.704776738830317e-05
    },
    {
      "text": "def search(list, target):\n  \n for i in range(len(list)):\n  if list[i] == target:\n   return i\n return -1\n\nlist = [10,20,30,40,50]\ntarget = 40\n\n# linear search in list\n\nindex = search(list, target)\n\nif index != -1:\n print(\"Element found at index :\", index)\nelse:\n print(\"Element not found\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4222610636863089e-06,
      "p_css": 9.042459632248897e-05,
      "p_html": 0.0005589207474891926,
      "p_java": 0.00045526338399858035,
      "p_javascript": 3.864622034085283e-05,
      "p_matlab": 0.9117379619920121,
      "p_python": 0.08695962536593842,
      "p_sql": 5.534102473465029e-05,
      "p_typescript": 0.000102394408100007
    },
    {
      "text": "import random \n\nrandom_num = random.randint(1, 10)  \nprint(random_num)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007331088151602608,
      "p_css": 0.0021131553862971256,
      "p_html": 0.0010040741206562855,
      "p_java": 2.406798011458409e-05,
      "p_javascript": 0.0001957075836896429,
      "p_matlab": 4.090223367365941e-05,
      "p_python": 0.9916832638220786,
      "p_sql": 0.003912907817930289,
      "p_typescript": 0.00029281224039966604
    },
    {
      "text": "class ProductTableRetriever:\n\n    def __init__(self, database_connection):\n        self.connection = database_connection\n\n    def get_prices(self):\n        cursor = self.connection.execute(\"SELECT name, price FROM products\")\n        return {product[0]: product[1] for product in cursor}",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.000736429793019011,
      "p_css": 0.05044672192642225,
      "p_html": 0.008013447835582058,
      "p_java": 0.0003518519120463749,
      "p_javascript": 1.330564267930726e-05,
      "p_matlab": 3.062730695212973e-05,
      "p_python": 0.18387454683390383,
      "p_sql": 0.7560521340628527,
      "p_typescript": 0.00048093468654238303
    },
    {
      "text": "def even_number_generator():\n    num = 0\n    while True:\n        if num % 2 == 0:\n            yield num\n        num += 1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.292716088344991e-10,
      "p_css": 1.7039914345393646e-14,
      "p_html": 9.980794598410961e-10,
      "p_java": 6.283552924255466e-11,
      "p_javascript": 6.70294192896799e-11,
      "p_matlab": 0.9999999749323116,
      "p_python": 2.2992721175727533e-08,
      "p_sql": 4.8482572276326445e-11,
      "p_typescript": 3.6925151319083153e-10
    },
    {
      "text": "def is_substring(s, t):\n    if t in s:\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002852616344291664,
      "p_css": 0.0009911226922419648,
      "p_html": 0.001980071492701356,
      "p_java": 5.265657346529458e-06,
      "p_javascript": 5.2955854870673427e-05,
      "p_matlab": 0.0002305347390902551,
      "p_python": 0.9963836182243269,
      "p_sql": 3.577590137360462e-05,
      "p_typescript": 3.539380361959073e-05
    },
    {
      "text": "from flask import Flask, jsonify, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/user', methods=['POST', 'GET'])\ndef user():\n # Connect to the database\n conn = sqlite3.connect('example.db')\n # Create a cursor object\n c = conn.cursor()\n\n if request.method == 'POST':\n # Get the data from the request\n data = request.json.get('data')\n # Insert the data into the database\n c.execute(\"INSERT INTO users (data) VALUES (?)\", [data])\n # Commit the changes to the database\n conn.commit()\n\n # Get the user data from the database\n c.execute(\"SELECT * FROM users WHERE id=last_insert_rowid()\")\n # Fetch the first row\n row = c.fetchone()\n # Close the connection\n conn.close()\n # Return the user data as JSON\n return jsonify({'data': row[0]})\n\n if request.method == 'GET':\n # Get the user data from the database\n c.execute(\"SELECT * FROM users\")\n # Fetch all the rows\n rows = c.fetchall()\n # Close the connection\n conn.close()\n # Return the user data as JSON\n return jsonify([{'data': row[0]} for row in rows])\n\nif __name__ == '__main__':\n app.run()",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.00030949223222745046,
      "p_css": 0.01729935288981387,
      "p_html": 8.156320176028657e-06,
      "p_java": 2.7952586125968744e-08,
      "p_javascript": 4.739633011311308e-06,
      "p_matlab": 1.6279260375154366e-08,
      "p_python": 1.74960823578211e-05,
      "p_sql": 0.9663506403651793,
      "p_typescript": 0.016010078245387818
    },
    {
      "text": "import numpy as np\n\nboard = np.array([[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]])\n\ndef is_valid(x, y):\n return 0 <= x < 3 and 0 <= y < 3\n\ndef make_move(player, x, y):\n if is_valid(x, y):\n board[x, y] = player\n else:\n raise ValueError(\"Invalid move\")\n\ndef check_victory():\n xs, ys = np.where(board == 0)\n # Check vertically\n vertical = board == board.T\n # Check diagonally\n diagonal = np.diag(board).all() or np.diag(np.flipud(board)).all()\n \n if any(vertical) or diagonal:\n return True\n \n return False\n\ndef ai_make_move(player):\n xs, ys = np.where(board == 0)\n for x, y in zip(xs, ys):\n board[x, y] = player\n if check_victory():\n return\n board[x, y] = 0 # Reset\n\nif __name__ == \"__main__\":\n # Set the board state\n board = np.array([[1, 0, -1],\n [-1, 1, 0],\n [0, 0, 1]])\n\n # AI player\n ai_make_move(-1)\n print(board)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.16664223725551053,
      "p_css": 0.02281947351104087,
      "p_html": 0.015876724901383428,
      "p_java": 0.00023787554749702194,
      "p_javascript": 0.0012231374771460456,
      "p_matlab": 0.01108699406300455,
      "p_python": 0.7428246609012968,
      "p_sql": 0.0258867645455849,
      "p_typescript": 0.013402131797535717
    },
    {
      "text": "def isAnagram(str1, str2): \n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n    \n    # edge case\n    if len(str1) != len(str2):\n        return False\n    \n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    for char in str2:\n        if char in count:\n            count[char] -= 1\n        else:\n            count[char] = 1\n    \n    for val in count.values():\n        if val != 0:\n            return False\n    return True\n\nstr1 = \"silent\"\nstr2 = \"listen\" \nif isAnagram(str1, str2): \n    print(\"The two strings are anagrams\")\nelse:\n    print(\"The two strings are not anagrams\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00013675657814520028,
      "p_css": 0.0018115100999469005,
      "p_html": 5.7226601282845654e-06,
      "p_java": 0.00013027447256777378,
      "p_javascript": 0.00731086824927617,
      "p_matlab": 5.503177753362095e-05,
      "p_python": 0.9826256369607307,
      "p_sql": 0.007259795522560048,
      "p_typescript": 0.0006644036791114323
    },
    {
      "text": "text = \"The cat was running in the park\"\n\nwords = text.split(' ')\nunique_words = []\n\nfor word in words:\n if word not in unique_words: \n  unique_words.append(word)\n\nprint(' '.join(unique_words))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.014805609208878225,
      "p_css": 0.022830605366489273,
      "p_html": 0.010109812345526069,
      "p_java": 2.809988831583875e-05,
      "p_javascript": 0.004089997682737551,
      "p_matlab": 0.04867200573241096,
      "p_python": 0.16769132041717832,
      "p_sql": 0.7176957349131152,
      "p_typescript": 0.014076814445348374
    },
    {
      "text": "def unique_list(input_list):\n    uniques = []\n    for i in input_list:\n        if i not in uniques:\n            uniques.append(i)\n\n    return uniques",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.2958069077562725e-05,
      "p_css": 0.00015903158703851856,
      "p_html": 0.00018595743992869877,
      "p_java": 1.8660085217415194e-06,
      "p_javascript": 1.1491745576870302e-05,
      "p_matlab": 0.9909229996670506,
      "p_python": 0.00843361577925745,
      "p_sql": 0.00018718179727899662,
      "p_typescript": 5.4897906269797956e-05
    },
    {
      "text": "def reverseString(s1, s2):\n s = s1 + s2\n return s[::-1]\n\nreverseString(string1, string2)\n# Result: dlroW olleH",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008250354243670667,
      "p_css": 0.007337976359359476,
      "p_html": 0.0021231244110796795,
      "p_java": 0.00018863770603736726,
      "p_javascript": 0.0007680799647797215,
      "p_matlab": 0.00016197286048036803,
      "p_python": 0.984913313517807,
      "p_sql": 0.001990991676549928,
      "p_typescript": 0.0016908680795392843
    },
    {
      "text": "def print_all_primes(n):\n    for i in range(2, n+1):\n        if is_prime(i):\n            print(i)\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    if num < 9:\n        return True\n    if num % 3 == 0:\n        return False\n    r = int(num**0.5)\n    f = 5\n    while f <= r:\n        if num % f == 0:\n            return False\n        if num % (f+2) == 0:\n            return False\n        f += 6\n    return True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.498658830252253e-09,
      "p_css": 1.2385711309843473e-14,
      "p_html": 1.4693965836828933e-08,
      "p_java": 7.850504786268908e-10,
      "p_javascript": 2.388824578015665e-10,
      "p_matlab": 0.9999516231596609,
      "p_python": 4.835685627446258e-05,
      "p_sql": 8.254542537823569e-11,
      "p_typescript": 6.84949300447658e-10
    },
    {
      "text": "class Student:\n    def __init__(self, name, age, course):\n        self.name = name\n        self.age = age\n        self.course = course\n    \n    def getCourse(self):\n        return self.course",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001929826670511827,
      "p_css": 0.012851109993263467,
      "p_html": 0.031648145515403577,
      "p_java": 0.014392640376404597,
      "p_javascript": 1.4172938850134429e-07,
      "p_matlab": 4.62161374061465e-06,
      "p_python": 0.9272183286297234,
      "p_sql": 0.013432217453483275,
      "p_typescript": 0.00025981202154157934
    },
    {
      "text": "def find_all(arr, number): \n    if len(arr) < number: \n        return False\n\n    temp = [False for i in range(number + 1)] \n  \n    # mark each position present in the given list. \n    for i in range(len(arr)): \n        if arr[i] <= number: \n            temp[arr[i]] = True\n    # check if all numbers are marked.  \n    for i in range(1, number + 1): \n        if temp[i] == False: \n            return False\n\n    return True\n\narr = [1, 3, 5, 2] \nnumber = 5\nprint(find_all(arr, number)) # True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.217574420721513e-08,
      "p_css": 6.732752077886867e-07,
      "p_html": 8.172706346716333e-07,
      "p_java": 2.749267779312281e-08,
      "p_javascript": 9.116549088451934e-08,
      "p_matlab": 0.9661054353169011,
      "p_python": 0.033892509013109945,
      "p_sql": 1.244429917400675e-07,
      "p_typescript": 2.498472417760013e-07
    },
    {
      "text": "unsorted_list = [44, 23, 11, 33, 5]\nsorted_list = sorted(unsorted_list, reverse=True)\n\nprint(sorted_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004472449551509725,
      "p_css": 0.00734001012944496,
      "p_html": 0.009097700080376874,
      "p_java": 0.00040458246253595025,
      "p_javascript": 0.0018537753005047773,
      "p_matlab": 0.004772322798692397,
      "p_python": 0.96954595826525,
      "p_sql": 0.000613423846459287,
      "p_typescript": 0.0018997775652260435
    },
    {
      "text": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"This article is bad\"]\n\nsid = SentimentIntensityAnalyzer()\nfor sentence in sentences:\n  print(sentence)\n  ss = sid.polarity_scores(sentence)\n  print(ss)\n  if ss['compound'] >= 0.05:\n    print(\"Positive\")\n  elif -0.05 < ss['compound'] < 0.05:\n    print(\"Neutral\")\n  else:\n    print(\"Negative\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004037087285717031,
      "p_css": 0.03432104671340371,
      "p_html": 0.009065297426649058,
      "p_java": 0.00033309348552635227,
      "p_javascript": 0.0006850274686521747,
      "p_matlab": 0.0026869608682177455,
      "p_python": 0.9359426066476989,
      "p_sql": 0.011592981279643795,
      "p_typescript": 0.0013358988244912176
    },
    {
      "text": "def categorize(items):\n    groups = {\n        'numbers': [],\n        'strings': []\n    }\n    for item in items:\n        if type(item) == int or type(item) == float:\n            groups['numbers'].append(item)\n        else:\n            groups['strings'].append(item)\n    return groups",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.003207805929416214,
      "p_css": 0.21093300477882662,
      "p_html": 0.21419565381920586,
      "p_java": 0.0543138533031676,
      "p_javascript": 0.19941574036818174,
      "p_matlab": 7.27220180568739e-05,
      "p_python": 0.3174841661191551,
      "p_sql": 0.0003154181061048722,
      "p_typescript": 6.163555788510853e-05
    },
    {
      "text": "import re\n\ntext = 'The quick brown fox jumped over the lazy dog'\nsearch = 'fox'\n\nresult = re.findall(search, text)\n\nif result:\n    print('Found!');\nelse:\n    print('Not Found!')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.978750627374957e-06,
      "p_css": 0.008241936842161655,
      "p_html": 0.011076081808381386,
      "p_java": 0.00040772569514012434,
      "p_javascript": 0.0003062093033580243,
      "p_matlab": 8.618160942046354e-05,
      "p_python": 0.965955035152722,
      "p_sql": 0.001694982432294915,
      "p_typescript": 0.012225868405894137
    },
    {
      "text": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n   def get_name(self):\n        return self.name\n\n   def get_age(self):\n        return self.age\n\n   def get_salary(self):\n        return self.salary",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0316785344400023e-05,
      "p_css": 0.0023760377261851868,
      "p_html": 0.007125879870200083,
      "p_java": 0.00045836228790300935,
      "p_javascript": 1.1398442876745398e-08,
      "p_matlab": 9.979513359878688e-08,
      "p_python": 0.9838405504911938,
      "p_sql": 0.00617981128486102,
      "p_typescript": 8.930360736229056e-06
    },
    {
      "text": "import nltk\nimport re\nimport heapq\nfrom sumy.parsers.plaintext import PlaintextParser\nfrom sumy.nlp.tokenizers import Tokenizer\nfrom sumy.summarizers.lex_rank import LexRankSummarizer\n\n# Read the article\narticle_text = open('article.txt').read()\n\n# Tokenize the text\ntokenizer = Tokenizer('english')\ntokenized_article = tokenizer.to_sentences(article_text)\n\n# Create a PlaintextParser object\nparser = PlaintextParser.from_string(article_text, tokenizer)\n\n# Create LexRank object\nsummarizer = LexRankSummarizer()\n\n# Summarize the article\nsummary = summarizer(parser.document, 3)\n\n# Output the summary\nfor sentence in summary:\n print(sentence)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.3387807925811098,
      "p_css": 0.19397093190873158,
      "p_html": 0.3038715755044269,
      "p_java": 1.9572673657241655e-05,
      "p_javascript": 0.0034729702581477147,
      "p_matlab": 0.0002681993083134618,
      "p_python": 0.1189399530739659,
      "p_sql": 0.010771908357025406,
      "p_typescript": 0.029904096334621946
    },
    {
      "text": "def answer_question(question, company):\n if company == 'Apple':\n if question == 'What is Apple's mission statement?':\n return \"Apple's mission statement is 'to make the world's best products that enrich people's lives and empower them to do more.\"\n elif question == 'How many stores does Apple have?':\n return 'Apple currently has 511 stores in 25 countries across the globe.'",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0036322997288841083,
      "p_css": 0.14223581926421072,
      "p_html": 0.0027299541511891247,
      "p_java": 2.4852423975894545e-05,
      "p_javascript": 0.21966152167535777,
      "p_matlab": 0.0031867638309310766,
      "p_python": 0.03257988365982151,
      "p_sql": 0.00589232000851999,
      "p_typescript": 0.5900565852571099
    },
    {
      "text": "def is_odd(n):\n  if(n % 2 == 0):\n    return \"Even\"\n  else:\n    return \"Odd\"\n \nprint(is_odd(21)) # Outputs: \"Odd\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00047007207547660677,
      "p_css": 0.003374985566393376,
      "p_html": 0.0007702290745796874,
      "p_java": 4.8574496763050616e-05,
      "p_javascript": 1.4043065674843355e-05,
      "p_matlab": 0.008304505398245017,
      "p_python": 0.9864252684466691,
      "p_sql": 0.00037479456031363237,
      "p_typescript": 0.0002175273158847458
    },
    {
      "text": "from sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Read the data into a dataframe\ndf = pd.read_csv('spam.csv', header=None)\n\n#Split data into features and target\nX = df[df.columns[:-1]]\ny = df[df.columns[-1]]\n\n# Create a multinomial naive bayes classifier\nmodel = MultinomialNB()\n\n#Train the model\nmodel.fit(X,y)\n\n# Use the trained model to predict the class for the new data\npredicted_classes = model.predict(X)\n\n# Calculate the accuracy of the model\nprint(\"Accuracy:\", model.score(X,y))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.15740162648844294,
      "p_css": 0.11749736933576024,
      "p_html": 0.007574666746461036,
      "p_java": 2.6707006284927375e-05,
      "p_javascript": 0.0008805956275951867,
      "p_matlab": 1.3861979289326996e-05,
      "p_python": 0.22757667443874735,
      "p_sql": 4.3154849222752585e-05,
      "p_typescript": 0.48898534352819617
    },
    {
      "text": "def sort_dict_values(d):\n    # create a list of values from the dictionary\n    values = list(d.values())\n    # sort the list \n    values.sort()\n    return values\n\nresult = sort_dict_values(mydict)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005789008719283231,
      "p_css": 0.2117814443098476,
      "p_html": 0.006039090078434491,
      "p_java": 3.8836756556411817e-05,
      "p_javascript": 0.0026147332408906344,
      "p_matlab": 6.18879590354011e-05,
      "p_python": 0.7104372797746593,
      "p_sql": 0.04476002612234955,
      "p_typescript": 0.023687800886298335
    },
    {
      "text": "s= \"This is, MY string!?\"\n \noutput=\"\"\n \nfor i in s:\n if i.isalnum():\n  output+=i.lower()\n \noutput = ' '.join(w for w in output.split() if len(w)>3)\n \nprint(\"Cleaned String: \"+output)",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 0.0028331550259939886,
      "p_css": 0.0009573474434791252,
      "p_html": 0.036275731365036305,
      "p_java": 0.7514595782648656,
      "p_javascript": 3.207184338316066e-07,
      "p_matlab": 0.015468746120252924,
      "p_python": 0.07011778924653496,
      "p_sql": 0.12288638109711596,
      "p_typescript": 9.507182872138578e-07
    },
    {
      "text": "class WordCounter:\n    def __init__(self):\n        self.count = 0\n    \n    def countWords(self, text):\n        words = text.split() # Splits the sentence into a list of words\n        self.count = len(words) # Counts the number of words\n        return self.count\n\n# Creating an instance of the WordCounter class\nwordCounter = WordCounter()\n\n# Counting the words in the text\nwordCount = wordCounter.countWords(\"Hello world, this is a test\")\n\nprint(wordCount) # Outputs 4",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00043503626570296194,
      "p_css": 0.0006395285809915229,
      "p_html": 0.005504116820287389,
      "p_java": 2.4914624288021054e-09,
      "p_javascript": 0.00136434822568,
      "p_matlab": 4.4708338094410545e-08,
      "p_python": 0.6131125513101756,
      "p_sql": 0.3757956778871555,
      "p_typescript": 0.003148693710206625
    },
    {
      "text": "def search(value, list):\n    for i in range(len(list)):\n        if list[i] == value:\n            return i\n    return -1\n\nvalue= 'apple'\nlist = ['bannanas', 'oranges', 'apple']\nprint(search(value, list))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.711858802258085e-10,
      "p_css": 2.4878991916496913e-06,
      "p_html": 5.427049403558383e-07,
      "p_java": 1.0272084348078058e-06,
      "p_javascript": 4.633339399250466e-08,
      "p_matlab": 0.9999940165016759,
      "p_python": 2.034386869485621e-08,
      "p_sql": 1.4997767695687614e-06,
      "p_typescript": 3.586605395770185e-07
    },
    {
      "text": "def calculatePowerDemand(util, time, power):\n    return util * time * power\n\nPowerDemand = calculatePowerDemand(0.1, 10, 100)\nprint(PowerDemand)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011640151586552545,
      "p_css": 0.05282440385709546,
      "p_html": 0.0042718694203430635,
      "p_java": 0.0003154473273278583,
      "p_javascript": 0.00229889579256347,
      "p_matlab": 0.00036748197717692067,
      "p_python": 0.9359178197360858,
      "p_sql": 0.0019710937479590347,
      "p_typescript": 0.0008689729827932514
    },
    {
      "text": "import itertools \n  \n# list of strings \nlist_of_strings = [\"Hello\", \"World\", \"Foo\", \"Bar\"] \n  \n# using itertools \n# to get the permutations \npermutations = itertools.permutations(list_of_strings) \n  \n# printing permutations \nfor i in list(permutations): \n    print(i)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.25485091669818877,
      "p_css": 0.017753569595870412,
      "p_html": 0.028710389827170214,
      "p_java": 1.299187138408973e-07,
      "p_javascript": 0.38279977890373124,
      "p_matlab": 0.027670378836173296,
      "p_python": 0.09378382553880807,
      "p_sql": 0.053821703368409704,
      "p_typescript": 0.14060930731293453
    },
    {
      "text": "import numpy as np\n\narr = np.array([[ 10, 11, 17, 16, 14],\n                [ 2, 6, 3, 5, 0],\n                [ 17, 20, 9, 18, 21]])\n\narr_mean = np.mean(arr, axis=1)\narr_normalized = arr - arr_mean[:,np.newaxis]\n\nprint(arr_normalized)\n\n# Output:\n# [[ 3.4 3.4 9.8 9.8 7.8]\n#  [-1.6 0.4 -3.6 -2.6 -4.6]\n#  [ 5.4 8.4 -1.6 6.4 9.4]]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06974680238560653,
      "p_css": 0.006194549949003954,
      "p_html": 0.0008584207880024602,
      "p_java": 4.0629930517257357e-05,
      "p_javascript": 6.106001525442624e-06,
      "p_matlab": 0.16373251217838158,
      "p_python": 0.7591580015529392,
      "p_sql": 2.449189942070189e-06,
      "p_typescript": 0.0002605280240812613
    },
    {
      "text": "import tkinter \n\n# create the UI\nroot = tkinter.Tk() \nroot.title(\"Matrix Multiplication\") \n\n# define the input fields\nmatrix_1_entry = tkinter.Label(root, text=\"Matrix 1\")\nmatrix_1_entry.grid(row=0, column=0)\nmatrix_1_input = tkinter.Entry(root)\nmatrix_1_input.grid(row=0, column=1)\n\nmatrix_2_entry = tkinter.Label(root, text=\"Matrix 2\")\nmatrix_2_entry.grid(row=1, column=0)\nmatrix_2_input = tkinter.Entry(root)\nmatrix_2_input.grid(row=1, column=1)\n\n# set up the button for multiplication\nmultiply_button = tkinter.Button(root, text=\"Multiply\") \nmultiply_button.grid(row=2, column=0)\n\n# display the output\nresult_label = tkinter.Label(root, text=\"Result:\")\nresult_label.grid(row=3, column=0)\nresult_display = tkinter.Entry(root)\nresult_display.grid(row=3, column=1)\n\n# define the function for matrix multiplication\ndef multiply_matrices():\n    matrix_1 = eval(matrix_1_input.get())\n    matrix_2 = eval(matrix_2_input.get())\n    result = [[sum(a*b for a,b in zip(x_row,y_column)) for y_column in zip(*matrix_2)] for x_row in matrix_1] \n    result_display.delete(0, tkinter.END)\n    result_display.insert(0, str(result))\n\nmultiply_button.configure(command=multiply_matrices) \n\nroot.mainloop()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.039052212335117145,
      "p_css": 0.04839128099892048,
      "p_html": 0.016318375596888385,
      "p_java": 0.000302794513450113,
      "p_javascript": 0.01885292998956971,
      "p_matlab": 0.003343198116956495,
      "p_python": 0.2435361956716323,
      "p_sql": 0.6065130628013002,
      "p_typescript": 0.023689949976165067
    },
    {
      "text": "def find_common_elements(set1, set2):\n    result = []\n    for element in set1:\n        if element in set2:\n            result.append(element)\n    \n    return result",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.046431020520027e-07,
      "p_css": 3.962015652139446e-06,
      "p_html": 4.021752941467874e-07,
      "p_java": 7.825103977721575e-08,
      "p_javascript": 3.638501025162313e-07,
      "p_matlab": 0.9985813856477439,
      "p_python": 0.0014124738522641345,
      "p_sql": 6.28073909208708e-10,
      "p_typescript": 9.289367273786935e-07
    },
    {
      "text": "print('Python'[:2])",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999636573934552,
      "p_css": 1.0374071532038101e-06,
      "p_html": 2.9590217883901288e-06,
      "p_java": 1.7281824076946346e-10,
      "p_javascript": 8.534641193835436e-06,
      "p_matlab": 5.876940544797842e-07,
      "p_python": 8.952313513211987e-06,
      "p_sql": 3.802732198985816e-07,
      "p_typescript": 1.3891082803517852e-05
    },
    {
      "text": "students = [\n    {\n        \"name\": \"Alice\",\n        \"grade\": 85\n    },\n    {\n        \"name\": \"Bob\",\n        \"grade\": 95\n    },\n    {\n        \"name\": \"Carol\",\n        \"grade\": 73\n    }\n]\n\ndef sortGrades(students):\n    # sort list of dictionaries by grade in reverse order\n    sortedStudents = sorted(students, reverse=True, key = lambda i: int(i['grade'])) \n    return sortedStudents\n\nsortedStudents = sortGrades(students)\n\nfor student in sortedStudents:\n    print(student)",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 0.005754172137376779,
      "p_css": 0.10294690948838439,
      "p_html": 0.0057775534680207475,
      "p_java": 0.806308446650695,
      "p_javascript": 0.00017223629771529234,
      "p_matlab": 0.0003122947579711136,
      "p_python": 0.07481923557381825,
      "p_sql": 0.0009124213160697702,
      "p_typescript": 0.002996730309948608
    },
    {
      "text": "def fibonacci(n):\n a, b = 0, 1\n for i in range(n):\n  a, b = b, a + b\n return a\n \nfor i in range(10):\n print(fibonacci(i))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.82291247489692e-09,
      "p_css": 1.1190061924092471e-09,
      "p_html": 1.03756044291419e-07,
      "p_java": 6.132349413325876e-10,
      "p_javascript": 5.022452906485443e-10,
      "p_matlab": 0.5561057062937605,
      "p_python": 0.443894171324511,
      "p_sql": 2.1134062479845754e-09,
      "p_typescript": 7.454879077961863e-09
    },
    {
      "text": "import nltk\nimport re\n\n# define a function to tokenize words\ndef tokenize_words(words):\n tokens = nltk.word_tokenize(words)\n return tokens\n\n# define a function to remove special characters\ndef remove_special_characters(text):\n tokens = tokenize_words(text)\n pattern = re.compile('[{}]'.format(re.escape(',.!?@#$%^&*()')))\n filtered_tokens = filter(None, [pattern.sub('', token) for token in tokens])\n return ' '.join(filtered_tokens)\n\n# define a function to create a chat response\ndef generate_response(user_input):\n response = ''\n # preprocess the user input\n user_input = remove_special_characters(user_input.lower())\n \n # code for your bot goes here\n \n return response",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0013594438671383174,
      "p_css": 0.08606524503006183,
      "p_html": 0.020076476081240854,
      "p_java": 4.952530815362515e-06,
      "p_javascript": 0.07945664345173485,
      "p_matlab": 6.741177929984787e-05,
      "p_python": 0.09309552800016477,
      "p_sql": 0.7147588737705084,
      "p_typescript": 0.005115425489035693
    },
    {
      "text": "class Vehicle:\n   def __init__(self, capacity, speed):\n      self.capacity = capacity\n      self.speed = speed\n \n   def increase_speed(self):\n      self.speed += 10\n \n   def decrease_speed(self):\n      if self.speed > 0:\n         self.speed -= 10",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001618701221315759,
      "p_css": 0.022154557352992297,
      "p_html": 0.07150382824212552,
      "p_java": 6.000827650455563e-05,
      "p_javascript": 0.00019779429872384755,
      "p_matlab": 0.0002229817581346527,
      "p_python": 0.8750650766880852,
      "p_sql": 0.02423456126244635,
      "p_typescript": 0.006399321998856083
    },
    {
      "text": "mammal_score = 0\nreptile_score = 0\n\nif features[0] == 0:\n    mammal_score += 1\nif features[1] == 1:\n    mammal_score += 1\nif features[2] == 1:\n    mammal_score += 1 \nif features[3] == 1:\n    reptile_score += 1\nif features[4] == 0:\n    reptile_score += 1\n\nif mammal_score > reptile_score:\n    animal_class = \"Mammal\"\nelse:\n    animal_class = \"Reptile\"\n\nprint(animal_class)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4571927572451912e-05,
      "p_css": 7.887510032758393e-05,
      "p_html": 4.893274971854995e-05,
      "p_java": 1.281349435856046e-06,
      "p_javascript": 3.767415908028753e-06,
      "p_matlab": 0.9995840906557911,
      "p_python": 0.0001151707578291267,
      "p_sql": 1.0676321782944782e-06,
      "p_typescript": 0.00015224241123872168
    },
    {
      "text": "def print_primes(n):\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)\n\nprint_primes(10)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0368962887959681e-13,
      "p_css": 1.668632209272429e-18,
      "p_html": 4.086166817953516e-13,
      "p_java": 7.011907554547498e-15,
      "p_javascript": 9.572734222304156e-15,
      "p_matlab": 0.9999999987293249,
      "p_python": 1.2699095796920963e-09,
      "p_sql": 1.562147518083394e-13,
      "p_typescript": 8.041277774942333e-14
    },
    {
      "text": "def get_nth_element(list_of_lists, n):\n    return [item[n] for item in list_of_lists]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012226521749002224,
      "p_css": 0.016580298728083132,
      "p_html": 0.04210419666599712,
      "p_java": 0.00015058934025557883,
      "p_javascript": 0.025243837832026238,
      "p_matlab": 0.002945406809663233,
      "p_python": 0.9108267984358307,
      "p_sql": 0.0004675878139266064,
      "p_typescript": 0.0004586321993171405
    },
    {
      "text": "import string\nimport random\n\n# Generate 8 random characters, including special characters and numbers\nsize = 8\npassword = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))\n\nprint(password) # Output: eu$y6c17",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 1.0019290735375633e-11,
      "p_css": 6.003179099995221e-07,
      "p_html": 3.5258747648093436e-07,
      "p_java": 0.6676272746048478,
      "p_javascript": 9.20289362878809e-14,
      "p_matlab": 2.0499717335105537e-11,
      "p_python": 3.738675940475191e-05,
      "p_sql": 0.3323343630493985,
      "p_typescript": 2.2650351419401065e-08
    },
    {
      "text": "import string\nimport random\n\ndef generate_password():\n   up_alphabet = string.ascii_uppercase\n   low_alphabet = string.ascii_lowercase\n   digits = string.digits\n   symbols = string.punctuation\n   length = 8\n   pass_characters = up_alphabet + low_alphabet + digits + symbols\n   password =  ''.join(random.sample(pass_characters, length))\n   return password\n\nprint(generate_password())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 3.981349413092165e-13,
      "p_css": 3.631827852113855e-08,
      "p_html": 1.029017552246927e-08,
      "p_java": 0.03757229492874286,
      "p_javascript": 5.1118990404563383e-14,
      "p_matlab": 1.3980910031277588e-11,
      "p_python": 7.1033892383414345e-06,
      "p_sql": 0.96242055400357,
      "p_typescript": 1.0555645339959145e-09
    },
    {
      "text": "def find_factors(num): \n    \"\"\"Function to find prime factors\"\"\"\n    factors = [] \n    i = 2\n    while i * i <= num: \n        if num % i: \n            i += 1 \n        else: \n            num //= i \n            factors.append(i) \n    if num > 1: \n        factors.append(num) \n    return factors \n  \nnum = 15\nprint(find_factors(num))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.268916342202573e-09,
      "p_css": 3.158687620653573e-12,
      "p_html": 6.302684435878595e-09,
      "p_java": 4.844422569054187e-10,
      "p_javascript": 1.701393788118946e-08,
      "p_matlab": 0.9999998922218755,
      "p_python": 7.516692730665815e-08,
      "p_sql": 3.1077797030795104e-09,
      "p_typescript": 3.430277997446003e-09
    },
    {
      "text": "# Node class  \nclass Node: \n   \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize the Linked List object \n    def __init__(self):   \n        self.head = None\n\n# A helper function to check if a given linked list is a palindrome  \ndef checkPalindrome(root): \n    #base case\n    if root == None:\n        return True\n        \n    # Find length of list\n    lenList = 0\n    iterator = root\n    while iterator != None:\n        lenList = lenList+1\n        iterator = iterator.next\n    \n    # Find middle pointer\n    # If length is even, moving the second pointer right \n    # So, we can get two middle pointers \n    midPtr = root\n    for i in range(int(lenList/2)-1):\n        midPtr = midPtr.next\n    \n    # Now pointer is at the exact middle \n    # Checking each next node if its same\n    currentNode = midPtr\n    prevNode = None\n    while currentNode != None:\n        nextn = currentNode.next\n        currentNode.next = prevNode\n        prevNode = currentNode\n        currentNode = nextn\n    \n    # now both the halves are swapped \n    # checking each node one by one\n    startPtr1 = root\n    startPtr2 = prevNode\n    \n    # if length is odd\n    # move the second pointer one step right \n    if lenList%2!=0:\n        startPtr2 = startPtr2.next\n        \n    palindrome = True\n    while startPtr1 != None:\n        if startPtr1.data != startPtr2.data:\n            palindrome = False\n            break\n            \n        startPtr1 = startPtr1.next\n        startPtr2 = startPtr2.next\n    \n    # Re-linking both the pointers \n    currentNode = prevNode\n    prevNode = None\n    while currentNode != None:\n        nextn = currentNode.next\n        currentNode.next = prevNode\n        prevNode = currentNode\n        currentNode = nextn\n        \n    return palindrome\n\n# Driver Code \n\n# Create a linked list with  \n# 1->2->3->2->1 \nhead = Node(1) \nfirstNode = Node(2) \nsecondNode = Node(3) \nthirdNode = Node(2) \nfourthNode = Node(1) \n  \n# Now link the next pointers \nhead.next = firstNode \nfirstNode.next = secondNode \nsecondNode.next = thirdNode \nthirdNode.next = fourthNode \n  \nif(checkPalindrome(head)): \n    print (\"Linked List is palindrome\")\nelse: \n    print (\"Linked List is not palindrome\")",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 9.722607213510681e-05,
      "p_css": 0.0024145693607271054,
      "p_html": 0.05908081409096804,
      "p_java": 0.000524919372442732,
      "p_javascript": 0.061975170389384604,
      "p_matlab": 0.00014865624426502592,
      "p_python": 0.2018280148486428,
      "p_sql": 0.6167810238151025,
      "p_typescript": 0.05714960580633194
    },
    {
      "text": "# Define the function \ndef random_number(min_val, max_val):\n # Generate a random number\n rnd = np.random.randint(min_val, max_val+1)\n \n return rnd\n\n# Call the function\nrandom_num = random_number(5, 10)\n\n# Print the random number\nprint('Random number between 5 and 10:', random_num)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0004013319229826161,
      "p_css": 0.0015812020501390863,
      "p_html": 0.00011328109221583866,
      "p_java": 3.3529149202740787e-06,
      "p_javascript": 0.5645927428009665,
      "p_matlab": 4.671870067429831e-06,
      "p_python": 0.43131039406124577,
      "p_sql": 0.0014034582638185731,
      "p_typescript": 0.0005895650236439124
    },
    {
      "text": "new_string = []\nprev_word = ''\nfor word in \"This is a sample string\".split():\n    if word != prev_word:\n        new_string.append(word)\n    prev_word = word\nprint(' '.join(new_string))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.007891069854846932,
      "p_css": 0.004720900085566933,
      "p_html": 0.015667457810964413,
      "p_java": 0.009526027471315332,
      "p_javascript": 1.2216732033466738e-05,
      "p_matlab": 0.021716702429195524,
      "p_python": 0.06216320483454169,
      "p_sql": 0.876542695175523,
      "p_typescript": 0.0017597256060128228
    },
    {
      "text": "def find_average(list_numbers):\n    # Calculate the sum of all elements in the list\n    list_sum = 0\n    for i in range(len(list_numbers)):\n        list_sum += list_numbers[i]\n\n    # Calculate the average\n    list_average = list_sum / len(list_numbers)\n\n    # Return the average\n    return list_average\n\n# Call the function\nlist_average = find_average(list_numbers)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004282092160584329,
      "p_css": 0.00293054146061034,
      "p_html": 0.0038758347738354604,
      "p_java": 0.0004394372392244721,
      "p_javascript": 0.13914608345402948,
      "p_matlab": 0.001581270507587019,
      "p_python": 0.8296066668131872,
      "p_sql": 0.004430488909435085,
      "p_typescript": 0.01370758468150677
    },
    {
      "text": "def find_missing_num(arr):\n    n = len(arr)\n    sum_of_num = (n + 1)*(arr[0] + arr[n-1])/2\n    sum_of_arr = sum(arr)\n    return sum_of_num - sum_of_arr",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.409622424610635e-05,
      "p_css": 0.0007331179000120318,
      "p_html": 0.00010447761111851545,
      "p_java": 0.0001753005150626535,
      "p_javascript": 5.0840752621188835e-05,
      "p_matlab": 0.26455746546665965,
      "p_python": 0.7341470544553464,
      "p_sql": 7.156232852755174e-06,
      "p_typescript": 0.000130490842080696
    },
    {
      "text": "def get_grade(score):\n    # Set the score range\n    grade_map = {\n        90: 'A',\n        80: 'B',\n        70: 'C',\n        60: 'D'\n    }\n\n    # Iterate over the range and return the corresponding grade\n    for grade_min, grade in grade_map.items():\n        if score >= grade_min:\n            return grade\n\n# Test \nprint(get_grade(85))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.004620394299417355,
      "p_css": 0.26385696414678245,
      "p_html": 0.021145217548303827,
      "p_java": 0.00022067202033834068,
      "p_javascript": 0.019797351009240807,
      "p_matlab": 0.056841856602123104,
      "p_python": 0.5505910426516791,
      "p_sql": 0.0037039739125157164,
      "p_typescript": 0.07922252780959924
    },
    {
      "text": "def evaluate(expression): \n  \n    # split expression into list  \n    expression = expression.split() \n  \n    # stack to store integer values. \n    stack = []  \n  \n    # do for every element of expression. \n    for element in expression: \n  \n        # If element is an operand push \n        # into stack it's a number only \n        if element.isdigit(): \n            stack.append(element) \n  \n        # if element is an operator, \n        # pop two elements from stack \n        # perform respective operations \n        else:  \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + element + val1))) \n  \n    # return the value  \n    return (int(stack[0])) \n  \n# Driver Code  \nexpression = \"2 3 + 4 5 * *\"\n  \nprint(evaluate(expression)) \n\nOutput: 46",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00019707888598562354,
      "p_css": 0.0021321895015805506,
      "p_html": 0.0003457044522604367,
      "p_java": 0.00039699891228782473,
      "p_javascript": 0.0012927925026207313,
      "p_matlab": 0.9801860635682685,
      "p_python": 0.014196627168597877,
      "p_sql": 4.581708968947274e-06,
      "p_typescript": 0.0012479632994295015
    },
    {
      "text": "def make_float(string):\n  return float(string)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.3826299998541186e-15,
      "p_css": 4.91779319545094e-09,
      "p_html": 2.705563295459113e-10,
      "p_java": 0.999996169743802,
      "p_javascript": 1.32972457569057e-17,
      "p_matlab": 3.8375192733407893e-13,
      "p_python": 3.7610171324793944e-06,
      "p_sql": 6.395179356488265e-08,
      "p_typescript": 9.853526943193284e-11
    },
    {
      "text": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.001349440120791e-06,
      "p_css": 1.4611341153037943e-05,
      "p_html": 8.14847538009723e-06,
      "p_java": 1.9616043371836095e-07,
      "p_javascript": 8.864238924574581e-07,
      "p_matlab": 1.4652686459804302e-07,
      "p_python": 0.9999646442229297,
      "p_sql": 3.0387019797054246e-06,
      "p_typescript": 3.2679792666803994e-07
    },
    {
      "text": "from flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n data = request.json\n # Create the user\n # ...\n return {'status': 'user created'}\n\nif name == 'main':\n app.run(debug=True)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.011123855939294939,
      "p_css": 0.9839709809334234,
      "p_html": 0.0006648685625573958,
      "p_java": 0.00018814193305925704,
      "p_javascript": 7.169447827022453e-07,
      "p_matlab": 5.593288186472073e-06,
      "p_python": 0.0017017291177222505,
      "p_sql": 0.001103648189798338,
      "p_typescript": 0.0012404650911753705
    },
    {
      "text": "def factorial(n): \n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result) # prints 120",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.181702073872961e-05,
      "p_css": 0.0001534164930095214,
      "p_html": 1.0918109378946977e-05,
      "p_java": 2.960231478019262e-08,
      "p_javascript": 1.019503890490162e-05,
      "p_matlab": 1.4504941107022476e-06,
      "p_python": 0.9997130391630473,
      "p_sql": 2.387309871325007e-05,
      "p_typescript": 5.260979781675548e-06
    },
    {
      "text": "# Fisher-Yates algorithm to generate a random permutation of numbers from 0 to n-1\n# Time Complexity: O(n)\n\nimport random\n\ndef fisher_yates(n):\n    # Create an array to hold the permutation\n    perm = [x for x in range(0, n)]\n \n    # Start from the last element and swap and decrease \n    # index by one\n    for i in range(n-1, 0, -1):\n        # Pick a random index from 0 to i\n        j = random.randint(0, i)\n \n        # Swap the random element with current element\n        temp = perm[i]\n        perm[i] = perm[j]\n        perm[j] = temp\n    return perm\n\n# Sample call\nprint(fisher_yates(10))\n# Output: [4, 2, 0, 8, 5, 6, 9, 3, 1, 7]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0028498775995038483,
      "p_css": 0.0005705877620893558,
      "p_html": 0.001927811356761377,
      "p_java": 4.201013120133586e-05,
      "p_javascript": 0.013765290978919027,
      "p_matlab": 0.5321190325435315,
      "p_python": 0.3461617347712904,
      "p_sql": 0.005561128242496195,
      "p_typescript": 0.09700252661420702
    },
    {
      "text": "def count_frequency(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.9380337935208588e-05,
      "p_css": 0.06684770173909954,
      "p_html": 0.005294817890222451,
      "p_java": 0.14232212692241347,
      "p_javascript": 5.298131778592934e-06,
      "p_matlab": 0.00195968205358071,
      "p_python": 0.7765566703289869,
      "p_sql": 0.006190082960887272,
      "p_typescript": 0.0007942396350958047
    },
    {
      "text": "String myString = \"Hello World\";\nSystem.out.println(myString.substring(0,5));",
      "y_true": "java",
      "pred_label": "java",
      "p_bash": 3.405227112707872e-41,
      "p_css": 4.636422472030154e-29,
      "p_html": 4.2121566432725605e-28,
      "p_java": 1.0,
      "p_javascript": 2.9545279354238066e-28,
      "p_matlab": 4.6286277360391136e-39,
      "p_python": 1.747420979537073e-26,
      "p_sql": 8.980581712764637e-33,
      "p_typescript": 1.7399934921152102e-28
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import IsolationForest\n\n# read the csv file\ndata = pd.read_csv('transaction_data.csv')\n\n# define feature and target variables\nX = data.drop(['Date', 'Time', 'Type', 'Fraud'],axis=1).values\ny = data['Fraud'].values\n\n# split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0)\n\n# train the model\nclf = IsolationForest(n_estimators=100,random_state=0)\nclf.fit(X_train, y_train)\n\n# make predictions \ny_pred = clf.predict(X_test)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.02416666475757087,
      "p_css": 0.6287906133721651,
      "p_html": 0.017124762245285207,
      "p_java": 9.860479282554422e-06,
      "p_javascript": 0.00031064705535708415,
      "p_matlab": 6.541875085230243e-05,
      "p_python": 0.2370718084259339,
      "p_sql": 0.004158737302701872,
      "p_typescript": 0.08830148761085102
    },
    {
      "text": "# Import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport urllib.parse\n\n# Make a GET request\nr = requests.get('https://www.youtube.com/results?search_query=' + urllib.parse.quote('educational videos'))\n\n# Parse the HTML page\nsoup = BeautifulSoup(r.text, 'html.parser')\nvideos = soup.find_all('h3', {'class': 'yt-lockup-title'})\n\n# Save the links\nlinks = [video.find('a')['href'] for video in videos]\n\n# Download the videos\nfor link in links:\n    r = requests.get(link)\n    with open('video.mp4', 'wb') as f:\n        f.write(r.content)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 0.00012871479364442027,
      "p_css": 0.0027951295187492045,
      "p_html": 0.9739723666015488,
      "p_java": 2.146073222678626e-05,
      "p_javascript": 0.00017310660628422578,
      "p_matlab": 0.0008317441387931997,
      "p_python": 0.003739631023074306,
      "p_sql": 0.0005613904367273226,
      "p_typescript": 0.017776456148951524
    },
    {
      "text": "# import libraries\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# set the url to scrape\nurl = \"https://www.weather.gov/source/crh/stateMaxMinTemps.php\"\n\n# make a request to the url and create the beautiful soup object\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# parse the table\ntable = soup.find(id=\"main\")\n\n# read the table in to a DataFrame\ndf = pd.read_html(str(table))[0]\n\n# rename the columns\ndf.columns=['state', 'max_temp', 'min_temp']\n\n# find the maximum and minimum temperatures\nmax_temp = df['max_temp'].max()\nmin_temp = df['min_temp'].min()\n\n# print the maximum and minimum temperatures\nprint('The maximum temperature in the US is: %s' % max_temp) \nprint('The minimum temperature in the US is: %s' % min_temp)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 1.2608557869205814e-07,
      "p_css": 0.41091910294088296,
      "p_html": 0.00818820874149151,
      "p_java": 0.00010975969292581703,
      "p_javascript": 0.009569504769000557,
      "p_matlab": 5.715206751855128e-07,
      "p_python": 0.0038227067817289536,
      "p_sql": 0.003036806358543901,
      "p_typescript": 0.5643532131091723
    },
    {
      "text": "import numpy as np\n\ndef generate_random_matrix(rows, columns):\n    matrix = np.random.randint(low = 0, high = 100, size = (rows,columns))\n    return matrix",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003762511443961605,
      "p_css": 0.005175118340316731,
      "p_html": 0.0016407246116992384,
      "p_java": 6.640878312666057e-05,
      "p_javascript": 9.363967018993549e-05,
      "p_matlab": 2.3284180401018227e-05,
      "p_python": 0.9862639256754157,
      "p_sql": 0.0010361218981903074,
      "p_typescript": 0.0019382653966989179
    },
    {
      "text": "def invertWords(string): \n words = string.split(' ') \n\n def reverseStringWordWise(words, start, end): \n while (start < end): \n words[start], words[start] = words[end], words[start] \n start += 1\n end -= 1\n\n start = 0\n end = len(words) - 1\n reverseStringWordWise(words, start, end) \n\n start = 0\n end = len(words) - 1\n while (start < end): \n reverseStringWordWise(words, start, end) \n start += 1\n end -= 1\n\n return ' '.join(words) \n\n\nstring = \"This is a string\"\nprint(invertWords(string)) \n\n# Output: string a is This",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 3.491200916988106e-08,
      "p_css": 8.712728902319483e-05,
      "p_html": 0.00014970660189888787,
      "p_java": 0.047205967472617495,
      "p_javascript": 3.730148264321681e-09,
      "p_matlab": 4.2834274011718906e-08,
      "p_python": 0.8438629605222855,
      "p_sql": 0.10869181488232617,
      "p_typescript": 2.3417554173896e-06
    },
    {
      "text": "def count_words(sentence):\n    words = sentence.split(' ')\n    return len(words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.08909535686788e-05,
      "p_css": 0.0008270011747851354,
      "p_html": 0.0019173822960895641,
      "p_java": 6.125264134814641e-06,
      "p_javascript": 3.176909773187627e-05,
      "p_matlab": 3.6668848347884003e-06,
      "p_python": 0.9531202007127088,
      "p_sql": 0.044028264139328026,
      "p_typescript": 4.6994768184678265e-06
    },
    {
      "text": "# import libraries\nimport nltk\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom heapq import nlargest\n \n# Define text summarization function\ndef summarize(text):\n    # Tokenize text\n    words = word_tokenize(text)\n \n    # Calculate word frequencies\n    word_frequencies = FreqDist(words)\n    # Identify the most frequecny words\n    most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get)\n \n    # Identify sentences\n    sentences = sent_tokenize(text)\n \n    # Calculate sentence score based on most frequent words\n    sentence_scores = {} \n    for sentence in sentences:\n        score = 0\n        for word in word_tokenize(sentence.lower()):\n            if word in most_frequent_words:\n                score += 1\n        sentence_scores[sentence] = score\n \n    # Choose the highest score sentences from the list\n    summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get)\n \n    return ' '.join(summarized_text)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00302458675667449,
      "p_css": 0.12360189604163879,
      "p_html": 0.0011486336806586026,
      "p_java": 4.910023778293753e-06,
      "p_javascript": 0.001385856549095501,
      "p_matlab": 0.0001605304964721783,
      "p_python": 0.07292088840369833,
      "p_sql": 0.7968553793932964,
      "p_typescript": 0.0008973186546873523
    },
    {
      "text": "def largest_prime_factor(number):\n largest_factor = 1\n for i in range(2, number+1):\n while number % i == 0:\n largest_factor = i\n number //= i\n return largest_factor\n\nlargest_prime_factor(35) # Output: 5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00012996250016844463,
      "p_css": 0.00022316893236252477,
      "p_html": 0.0003745162238825292,
      "p_java": 1.829138478227198e-05,
      "p_javascript": 2.5212608024810718e-05,
      "p_matlab": 0.003820095194002749,
      "p_python": 0.9953066135626767,
      "p_sql": 5.510445710103293e-05,
      "p_typescript": 4.7035136998922765e-05
    },
    {
      "text": "import csv\n\ndef preprocess_data(in_file):\n    '''This function preprocesses a csv file into a list containing tuples with max four columns per row.'''\n    with open(in_file) as fin:\n        reader = csv.reader(fin)\n        data = [line[:4] for line in reader]\n        return [tuple(line) for line in data]",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.814360997775452,
      "p_css": 0.02786899105758276,
      "p_html": 0.015307364831739409,
      "p_java": 8.606819917326408e-05,
      "p_javascript": 0.003662686180999565,
      "p_matlab": 0.005059357380776923,
      "p_python": 0.10646501173351763,
      "p_sql": 0.0007423920290703015,
      "p_typescript": 0.026447130811688042
    },
    {
      "text": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n#Define and reshape the data\nstock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)\n\n#Train the model\nmodel = LinearRegression()\nmodel.fit(stock_price[:4], stock_price[1:])\n\n#Predict the next day's price\npredicted_price = model.predict([stock_price[4]])\nprint(f'Predicted price is: {predicted_price[0][0]}')",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.644348396141477,
      "p_css": 0.04781113082268375,
      "p_html": 0.0017295205000032192,
      "p_java": 5.829425667524179e-05,
      "p_javascript": 0.00033507191485885,
      "p_matlab": 8.209292479173196e-05,
      "p_python": 0.2824753247991051,
      "p_sql": 1.3160747058126974e-06,
      "p_typescript": 0.0231588525656993
    },
    {
      "text": "def prime_numbers(n):\n    # Create an empty list to store prime numbers\n    prime_list = []\n    # Iterate over the numbers from 2 to n\n    for num in range(2,n+1):\n        prime = True\n        # Iterate over the numbers from 2 to the square root of n\n        for i in range(2, round(n**0.5)+1):\n            # Check if num is divisible by any number\n            if num % i == 0:\n                prime = False\n        if prime:\n            prime_list.append(num)\n    return prime_list\n\nn = int(input(\"Enter a number: \"))\nprint(\"The prime numbers between 1 and\", n, \"are\", prime_numbers(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006003115773280374,
      "p_css": 7.0228759829823766e-06,
      "p_html": 0.001553288640435066,
      "p_java": 0.005058913813444168,
      "p_javascript": 0.007797568879185472,
      "p_matlab": 0.2319238302352288,
      "p_python": 0.6882899755786647,
      "p_sql": 0.004911376021957886,
      "p_typescript": 0.05985771237777311
    },
    {
      "text": "class ValuePair():\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n    \n    def get_key(self):\n        return self.key\n    \n    def get_value(self):\n        return self.value",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0001001465266417222,
      "p_css": 0.5195693158705362,
      "p_html": 0.06287652567252656,
      "p_java": 8.742648401868234e-06,
      "p_javascript": 9.08746693241326e-05,
      "p_matlab": 0.006728513550206676,
      "p_python": 0.0009357109463161592,
      "p_sql": 0.4095181620878717,
      "p_typescript": 0.0001720080281751489
    },
    {
      "text": "def is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n/x) // 2\n  return x*x == n",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.487684697066404e-05,
      "p_css": 6.434511239778072e-05,
      "p_html": 0.0002800848085493409,
      "p_java": 2.2176136954900643e-05,
      "p_javascript": 2.8447557127727033e-05,
      "p_matlab": 4.700344597947645e-05,
      "p_python": 0.999472034969043,
      "p_sql": 3.469471667324002e-05,
      "p_typescript": 3.633640630398008e-05
    },
    {
      "text": "class FootballTeam:\n def __init__(self):\n self.players = []\n\n def add_player(self, player):\n self.players.append(player)\n\n def average_age(self):\n total_age = 0\n for player in self.players:\n total_age += player.age\n return total_age / len(self.players)\n\n def highest_scorer(self):\n highest_scorer = self.players[0]\n for player in self.players:\n if player.score > highest_scorer.score:\n highest_scorer = player\n return highest_scorer",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006986032610388407,
      "p_css": 0.11069119005402324,
      "p_html": 0.11631171565220927,
      "p_java": 6.416460856261183e-05,
      "p_javascript": 0.0003747637830300056,
      "p_matlab": 0.0011500980900243103,
      "p_python": 0.5643774098345863,
      "p_sql": 0.2048555860394076,
      "p_typescript": 0.0014764686771180009
    },
    {
      "text": "class Node:\n def __init__(self, dataval=None):\n   self.dataval = dataval\n   self.nextval = None\n\nclass SLinkedList:\n def __init__(self):\n  self.headval = None\n\n# Function to add node\n def addNode(self, dataval):\n  NewNode = Node(dataval)\n  if self.headval is None:\n   self.headval = NewNode\n   return\n  laste = self.headval\n  while(laste.nextval):\n   laste = laste.nextval\n  laste.nextval=NewNode\n\n# Function to print the linked list\n def listprint(self):\n  printval = self.headval\n  while printval is not None:\n   print (printval.dataval),\n   printval = printval.nextval\n\n# Function to delete a node\n def DeleteNode(self, dataval):\n  deletenode = self.headval\n  if deletenode.dataval == dataval:\n   self.headval = deletenode.nextval\n   deletenode = None\n   return\n\n  prevnode = None\n  while deletenode.dataval != dataval:\n   prevnode = deletenode\n   deletenode = deletenode.nextval\n\n  prevnode.nextval = deletenode.nextval\n  deletenode = None",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0002609789296662868,
      "p_css": 0.03204056570685197,
      "p_html": 0.042192842813711086,
      "p_java": 0.00013662398537776386,
      "p_javascript": 0.02790195636742014,
      "p_matlab": 4.463989772495617e-05,
      "p_python": 0.38396375844624264,
      "p_sql": 0.5112576388587972,
      "p_typescript": 0.0022009949942081637
    },
    {
      "text": "class Car:\n    def __init__(self, brand, model, year, color):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.color = color\n    \n    def description(self):\n        return \"This car is a {} {}, made in {}, and its color is {}\".format(\n           self.brand,\n           self.model,\n           self.year,\n           self.color\n        )",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.634173120453221e-12,
      "p_css": 1.6353678571693014e-10,
      "p_html": 1.0323229575914355e-09,
      "p_java": 0.9999999873099351,
      "p_javascript": 1.5454565392591911e-24,
      "p_matlab": 2.406735276220006e-13,
      "p_python": 1.1458718049811163e-08,
      "p_sql": 1.6511315621346045e-11,
      "p_typescript": 1.3101160635711847e-11
    },
    {
      "text": "def prime_factors(num):\n  factors = []\n  n = 2\n  while n * n <= num:\n    if num % n == 0:\n      factors.append(n)\n      num //= n\n    else:\n      n += 1\n  if num > 1:\n    factors.append(num)\n\n  return factors",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.3192184394038689e-08,
      "p_css": 1.959204784225235e-11,
      "p_html": 2.348543809032912e-08,
      "p_java": 2.6711535356022267e-09,
      "p_javascript": 3.209260118155577e-09,
      "p_matlab": 0.9999996296134177,
      "p_python": 3.0635862217011617e-07,
      "p_sql": 6.8734013863562864e-09,
      "p_typescript": 1.4576930782878865e-08
    },
    {
      "text": "def reverse_string(string):\n    return string[::-1]",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.7366216442831176e-15,
      "p_css": 8.51669447569561e-09,
      "p_html": 8.516402071572627e-10,
      "p_java": 0.9999719696032902,
      "p_javascript": 2.7477559558206786e-17,
      "p_matlab": 8.620794651730033e-13,
      "p_python": 2.7859431338781684e-05,
      "p_sql": 1.6140886888371015e-07,
      "p_typescript": 1.873035263424416e-10
    },
    {
      "text": "def sum_array(arr):\n result = 0\n for item in arr:\n result += item\n return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.993380212511825e-06,
      "p_css": 0.0044717869852042005,
      "p_html": 0.00017187838052385758,
      "p_java": 1.523941985291823e-06,
      "p_javascript": 0.0003147757538933755,
      "p_matlab": 0.0044772960034492396,
      "p_python": 0.9905398016586231,
      "p_sql": 5.245390836753713e-06,
      "p_typescript": 8.698505271772844e-06
    },
    {
      "text": "import math\n\ndef get_area(a, b, c):\n    s = (a + b + c) / 2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\n\ninput_data = 5, 6, 7\narea = get_area(*input_data)\nprint(area)  # Output: 14.696938456699069",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00486646306842927,
      "p_css": 0.015420443997634838,
      "p_html": 0.0033953488421147285,
      "p_java": 0.0001427752038585981,
      "p_javascript": 0.0005574109141560259,
      "p_matlab": 0.0001538570326103851,
      "p_python": 0.9745883724548224,
      "p_sql": 0.000525779820424972,
      "p_typescript": 0.0003495486659488378
    },
    {
      "text": "class MedianSequence:\n    def __init__(self):\n        self.nums = []\n        \n    def __len__(self):\n        return len(self.nums)\n        \n    def add(self, num):\n        self.nums.append(num)\n        self.nums.sort()\n        \n    def remove_median(self):\n        mid = len(self.nums) // 2\n        self.nums.pop(mid)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.229576920411818e-05,
      "p_css": 0.0006617159781423759,
      "p_html": 0.008165400511157177,
      "p_java": 1.917328721414112e-05,
      "p_javascript": 1.8366399338025304e-05,
      "p_matlab": 9.327128900833266e-06,
      "p_python": 0.9684575403227224,
      "p_sql": 0.022498873277193233,
      "p_typescript": 0.00010730732612773309
    },
    {
      "text": "def applyDiscount(discountRate, price):\n    discountedPrice = discountRate * price\n    return discountedPrice\n\nprint(applyDiscount(discountRate, price)) # 180",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00033519975887784815,
      "p_css": 0.2193476408158797,
      "p_html": 0.00040441664399141163,
      "p_java": 5.452653852469421e-05,
      "p_javascript": 0.0001778835710491128,
      "p_matlab": 4.622969079872755e-05,
      "p_python": 0.7785402618201593,
      "p_sql": 0.0007053893929809216,
      "p_typescript": 0.0003884517677382409
    },
    {
      "text": "def longest_sequence(arr):\n    longest_sequence = []\n    current_sequence = []\n    current_num = None\n    \n    for num in sorted(arr):\n        if current_num is None or num == current_num + 1:\n            current_sequence.append(num)\n            current_num = num\n        else:\n            if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):\n                longest_sequence = current_sequence\n            current_sequence = [num]\n            current_num = num\n\n    if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):\n        longest_sequence = current_sequence\n\n    return longest_sequence",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00017648875447314922,
      "p_css": 1.697294606887796e-05,
      "p_html": 0.0001930619568044074,
      "p_java": 1.6598177154959325e-05,
      "p_javascript": 5.9877316494034806e-05,
      "p_matlab": 0.9853438115643768,
      "p_python": 0.013331491775701422,
      "p_sql": 3.113906581267792e-05,
      "p_typescript": 0.0008305584431134618
    },
    {
      "text": "def message():\n print(\"Hello World!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9980923241573593,
      "p_css": 1.9638863342787604e-06,
      "p_html": 1.8863821683741139e-06,
      "p_java": 8.309458089905708e-24,
      "p_javascript": 0.00022524711767667337,
      "p_matlab": 8.068679124271647e-10,
      "p_python": 0.0016785199038090186,
      "p_sql": 3.8952044443533706e-08,
      "p_typescript": 1.8793740006515426e-08
    },
    {
      "text": "let sentence = \"I love coding in Python\";\nlet reversed = sentence.split(\"\").reverse().join(\"\");\nconsole.log(reversed);",
      "y_true": "sql",
      "pred_label": "javascript",
      "p_bash": 3.587113213540645e-26,
      "p_css": 2.1257550232493295e-25,
      "p_html": 3.3985593352616473e-23,
      "p_java": 3.624425487552205e-26,
      "p_javascript": 1.0,
      "p_matlab": 5.36366893954175e-23,
      "p_python": 5.2616103264174085e-23,
      "p_sql": 2.81839210203871e-24,
      "p_typescript": 8.395848275907005e-24
    },
    {
      "text": "import string \nimport random \n  \ndef random_string(): \n  \n # using choice() to generate a \n # random character from a string \n letters = string.ascii_lowercase\n output = \"\" \n  \n # generating a string of 5 characters \n for i in range(5):\n  output += random.choice(letters) \n  \nreturn output\n\nprint(random_string())",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.1417767674661344e-07,
      "p_css": 7.176619437354058e-05,
      "p_html": 6.87555351672169e-05,
      "p_java": 0.526508116631931,
      "p_javascript": 4.416320728298361e-10,
      "p_matlab": 3.9612235907919367e-07,
      "p_python": 0.05442583877397235,
      "p_sql": 0.41892058760352907,
      "p_typescript": 4.224519359108234e-06
    },
    {
      "text": "import numpy as np \n\narr = np.ones((r,c))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.09421695337942508,
      "p_css": 0.01695307186167897,
      "p_html": 0.004055001095061966,
      "p_java": 0.00021345805337816677,
      "p_javascript": 5.073000247506234e-05,
      "p_matlab": 0.009137053384122103,
      "p_python": 0.8344761758431102,
      "p_sql": 4.6965284520704795e-05,
      "p_typescript": 0.04085059109622798
    },
    {
      "text": "import Foundation\n\nfunc randomString(length: Int) -> String {\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    return String((0..<length).map { _ in letters.randomElement()! })\n}\n\nlet str = randomString(length: 8)\nprint(str)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 1.927151504301986e-14,
      "p_css": 3.159851849749237e-11,
      "p_html": 4.272712938105178e-11,
      "p_java": 1.650953456084384e-06,
      "p_javascript": 0.9999983240290662,
      "p_matlab": 4.9634484572030337e-14,
      "p_python": 2.4931812165401425e-08,
      "p_sql": 7.459571810751636e-12,
      "p_typescript": 3.811421191780327e-12
    },
    {
      "text": "import random\n\nlist = [\"apple\", \"banana\", \"orange\", \"strawberry\", \"grape\"]\nrandom.shuffle(list)\n\nfor item in list[:3]:\n print(item)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002431390427420374,
      "p_css": 0.1096390243562752,
      "p_html": 0.08799059027739237,
      "p_java": 8.739398161043403e-05,
      "p_javascript": 0.02462367983832266,
      "p_matlab": 0.038307273743407796,
      "p_python": 0.5763276018751833,
      "p_sql": 0.15985188117657748,
      "p_typescript": 0.0007411643238103248
    },
    {
      "text": "def filter_list(num_list, divisor):\n    return list(filter(lambda n: n % divisor == 0, num_list))\n\nnum_list = [1, 2, 3, 4, 5, 6]\ndivisor = 2\n\ndivisible_nums = filter_list(num_list, divisor)\nprint(divisible_nums) # [2, 4, 6]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003778014383197374,
      "p_css": 0.012336607785568653,
      "p_html": 0.01020294219965419,
      "p_java": 0.0009284767590921669,
      "p_javascript": 0.0029187314197004284,
      "p_matlab": 0.0022546257262504254,
      "p_python": 0.9587305230925398,
      "p_sql": 0.0026335295047790674,
      "p_typescript": 0.006216549129218062
    },
    {
      "text": "from collections import Counter\n\nmylist = [2, 3, 4, 5, 2, 3, 2, 5, 6, 7]\nfreq = Counter(mylist)\nmost_common_element = freq.most_common(1)[0][0]\nprint(\"The most common element is %d\" %most_common_element)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.3834337198676993e-05,
      "p_css": 3.0367374759750063e-05,
      "p_html": 8.126067745541026e-06,
      "p_java": 7.580409714855151e-07,
      "p_javascript": 2.1820970922171835e-05,
      "p_matlab": 0.9998506330904275,
      "p_python": 3.2993948562508326e-05,
      "p_sql": 1.3231352464087434e-07,
      "p_typescript": 3.133385588765767e-05
    },
    {
      "text": "def reverseString(str): \n  s = \"\" \n  for i in str: \n    s = i + s\n  return s \n\nprint(reverseString('Hello World!'))\t# Output: !dlroW olleH",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.27323774444694293,
      "p_css": 0.0008201106567598322,
      "p_html": 0.006282827020154929,
      "p_java": 1.895036551038626e-10,
      "p_javascript": 0.10579923850829254,
      "p_matlab": 0.00046131153763106917,
      "p_python": 0.612802900138772,
      "p_sql": 0.000568580467078647,
      "p_typescript": 2.7287034864308348e-05
    },
    {
      "text": "from datetime import date\n\ndate_1 = date(2020, 1, 1)\ndate_2 = date(2020, 1, 30)\n\ndiff = date_2 - date_1\nprint('There are {} days between the two dates.'.format(diff.days))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01633204542378462,
      "p_css": 0.19975176864886823,
      "p_html": 0.00579460828124093,
      "p_java": 0.043988097679240036,
      "p_javascript": 0.002951939316301317,
      "p_matlab": 2.1167308751344626e-05,
      "p_python": 0.6801197620095429,
      "p_sql": 0.002760995024652624,
      "p_typescript": 0.04827961630761796
    },
    {
      "text": "def display_square(number):\n    result = number * number\n    print(result)\n\ndisplay_square(5)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0164288752092027e-07,
      "p_css": 0.00017501776370063346,
      "p_html": 1.0524174428189894e-06,
      "p_java": 3.440682376774685e-08,
      "p_javascript": 2.0433470467217472e-07,
      "p_matlab": 1.8372550697567708e-08,
      "p_python": 0.9998173089228607,
      "p_sql": 5.792144390771417e-06,
      "p_typescript": 4.699946384243867e-07
    },
    {
      "text": "def printArrayReverse(arr): \n    for i in range(len(arr) - 1, -1, -1): \n        print(arr[i], end = \" \")\n\nprintArrayReverse(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.2038994029735195e-08,
      "p_css": 7.121267468328685e-08,
      "p_html": 3.72388061236933e-08,
      "p_java": 3.799029477562377e-09,
      "p_javascript": 1.2230517274374274e-09,
      "p_matlab": 0.8258618011408798,
      "p_python": 0.17413802249836977,
      "p_sql": 1.0407838584521963e-08,
      "p_typescript": 3.044035559602837e-08
    },
    {
      "text": "\"\"\"\nCreate a neural network model in Python to classify text as positive or negative\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf \n\n# Define the model\nmodel = tf.keras.models.Sequential([\n    # The input layer with shape of vocab size used for one-hot encoding  \n    tf.keras.layers.Input(shape=(vocab_size)),\n    # Add a layer of Dropout for regularized learning\n    tf.keras.layers.Dropout(rate=0.2),\n    # The hidden layers\n    tf.keras.layers.Dense(units=64, activation='relu'),\n    tf.keras.layers.Dense(units=1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy', \n    metrics=['accuracy']\n)\n\n# Fit on the training data\nmodel.fit(X_train, y_train, epochs=5, batch_size=32)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.024834945032369066,
      "p_css": 0.00016402121660481157,
      "p_html": 0.00029365918563725794,
      "p_java": 3.7647914115853974e-07,
      "p_javascript": 2.3833312389501483e-06,
      "p_matlab": 2.7098388608454996e-06,
      "p_python": 0.006482605752082088,
      "p_sql": 2.3245654226746043e-07,
      "p_typescript": 0.9682190667075236
    },
    {
      "text": "def average(numbers):\n sum = 0\n for number in numbers:\n sum += number\n return sum / len(numbers)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.961791340054924e-05,
      "p_css": 0.0007276805264952083,
      "p_html": 0.0008696638524887721,
      "p_java": 0.6538694573960293,
      "p_javascript": 0.0004920458120013935,
      "p_matlab": 1.3849528536477592e-06,
      "p_python": 0.34349397837036433,
      "p_sql": 0.0003277270431711618,
      "p_typescript": 0.00015844413319559284
    },
    {
      "text": "arr = [2, 3, 4] \narr.append(6)\nprint(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.60489655969631e-06,
      "p_css": 8.663035079490556e-05,
      "p_html": 3.945140707327358e-06,
      "p_java": 1.3689617675766127e-06,
      "p_javascript": 3.124707117647362e-06,
      "p_matlab": 0.9984324973561782,
      "p_python": 0.0014634989634386025,
      "p_sql": 1.8624381969398287e-07,
      "p_typescript": 5.1433796164019454e-06
    },
    {
      "text": "def replace_string(input_string, target_string, replacement_string):\n    return input_string.replace(target_string, replacement_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9962683649781182,
      "p_css": 2.214851673856193e-05,
      "p_html": 6.310338497498748e-05,
      "p_java": 2.858193795028863e-14,
      "p_javascript": 0.0009288344876448813,
      "p_matlab": 1.0556409659072766e-06,
      "p_python": 0.002695100397911936,
      "p_sql": 2.7649150904049824e-06,
      "p_typescript": 1.8627678526338702e-05
    },
    {
      "text": "def convert_hexvals_to_decimal(hexvals):\n    # Split hexvals on whitespace\n    hexvals_list = hexvals.split()\n    # Reverse hexvals list\n    hexvals_list.reverse()\n    decimal_val = 0\n    # Loop through hexvals list\n    for index, hexval in enumerate(hexvals_list):\n        # Multiply hexval by 16^index to calculate decimal value\n        decimal_val += int(hexval, 16)*(16**index)\n    # Return decimal value\n    return decimal_val\n    \ndecimal = convert_hexvals_to_decimal(\"7a 0d 72\")\nprint(decimal)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.06440382438206646,
      "p_css": 0.25541704326661724,
      "p_html": 0.08898286291645964,
      "p_java": 0.05893419169527858,
      "p_javascript": 0.21610025587679363,
      "p_matlab": 0.22698073409872624,
      "p_python": 0.02542408723462497,
      "p_sql": 0.030223186929130817,
      "p_typescript": 0.03353381360030247
    },
    {
      "text": "def find_closest_sum(arr, num):\n    arr.sort()\n    final_sum = None\n    closest_sum = None\n    prev_diff = float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                sum = arr[i] + arr[j] + arr[k]\n                diff = abs(num - sum)\n                if diff < prev_diff:\n                    prev_diff = diff\n                    closest_sum = sum\n    return closest_sum\n\nprint(find_closest_sum(arr, num))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.383820502059013e-10,
      "p_css": 8.281815737804256e-11,
      "p_html": 1.6281719798743055e-09,
      "p_java": 7.764888863197436e-10,
      "p_javascript": 6.566494210968454e-11,
      "p_matlab": 0.9999403484058292,
      "p_python": 5.9647032648820855e-05,
      "p_sql": 6.422024366912551e-10,
      "p_typescript": 6.277937732742184e-10
    },
    {
      "text": "def areaCircle(radius):\n    pi = 3.14\n    area = pi * (radius**2)\n    return area\n\nprint(areaCircle(5)) # 78.5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005621437017161352,
      "p_css": 0.003946700727868611,
      "p_html": 0.0017789260984589865,
      "p_java": 0.00016328505141151826,
      "p_javascript": 0.0004893164928988938,
      "p_matlab": 0.00019555044745706864,
      "p_python": 0.9913921817541186,
      "p_sql": 0.0006803669229530959,
      "p_typescript": 0.0007915288031172512
    },
    {
      "text": "list1 = [2, 3, 4]\nlist2 = [5, 6, 7]\nlist3 = [8, 9, 10]\n\nlist = list1 + list2 + list3\nprint(list) \n# Output: [2, 3, 4, 5, 6, 7, 8, 9, 10]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0015957504534509265,
      "p_css": 0.0099967405366661,
      "p_html": 0.0048053314043463085,
      "p_java": 0.00014671367987169117,
      "p_javascript": 0.0008096532737835627,
      "p_matlab": 0.0011999427521328337,
      "p_python": 0.9807441731725436,
      "p_sql": 0.00039225507213387905,
      "p_typescript": 0.0003094396550712536
    },
    {
      "text": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius \n\n    # Getter method \n    def getRadius(self): \n        return self.radius \n  \n    # Setter method \n    def setRadius(self, radius): \n        self.radius = radius \n  \n    # Area method \n    def getArea(self): \n        return 3.14 * (self.radius**2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003380434267870209,
      "p_css": 0.003852239018979439,
      "p_html": 0.015081290668653878,
      "p_java": 0.0055636612218959896,
      "p_javascript": 4.520931891330047e-05,
      "p_matlab": 2.635414403378783e-06,
      "p_python": 0.9585560578646831,
      "p_sql": 0.01638204313481146,
      "p_typescript": 0.00017881993087239065
    },
    {
      "text": "def encrypt(string, key): \n   # Create an empty output string \n    output = \"\" \n  \n    # For each character in the given string \n    for char in string: \n        # Convert to ASCII value \n        char_ascii = ord(char) \n  \n        # Add the key (shift) \n        shifted = char_ascii + key \n  \n        # Convert to character \n        output += chr(shifted) \n  \n    # Return the output string \n    return output",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.418772128844709e-08,
      "p_css": 0.0002854475274453434,
      "p_html": 3.0295507878550346e-05,
      "p_java": 0.9976073751328922,
      "p_javascript": 2.8783203791225695e-09,
      "p_matlab": 1.7332011089638922e-08,
      "p_python": 0.0018640134930573663,
      "p_sql": 0.00020855634630459515,
      "p_typescript": 4.257594369212034e-06
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\n\ntry: \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    # your web scraping code here\n\nexcept Exception as e:\n    print('Error:', e)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.3643401901412022e-14,
      "p_css": 0.0028535511490306964,
      "p_html": 0.023528597407010417,
      "p_java": 0.9735828538704558,
      "p_javascript": 2.178097242518419e-07,
      "p_matlab": 8.089485529583375e-09,
      "p_python": 1.1888218213301485e-05,
      "p_sql": 4.489837151953761e-06,
      "p_typescript": 1.839361891432777e-05
    },
    {
      "text": "# Imports\nimport os\nimport time \nimport keras \nimport numpy as np \nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, LSTM, Dense, Bidirectional\n\n# Set random seed\nnp.random.seed(1234)  \nPYTHONHASHSEED = 0\n\n# Data Preprocessing\nreviews = ['The customer service here is terrible']\nlabels  = [1] # 1 for negative sentiment\n\n# Tokenize the sentences\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(reviews)\nword_index = tokenizer.word_index\nvocab_size=len(word_index)\n\nsentences = tokenizer.texts_to_sequences(reviews)\npadded_sentences = pad_sequences(sentences, padding='post')\n\n# Building the Model \nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 64, input_length = padded_sentences.shape[1]))\nmodel.add(Bidirectional(LSTM(64)))\nmodel.add(Dense(2, activation='softmax')) \nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# one-hot encode the labels\nlabels = np.eye(2)[labels].reshape(-1, 2)\n\nmodel.fit(padded_sentences, labels, epochs=200, batch_size=10)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.3517501206447153,
      "p_css": 0.01899297795637574,
      "p_html": 0.014095105385697106,
      "p_java": 0.0008269820862656066,
      "p_javascript": 0.0002880395856979811,
      "p_matlab": 1.0278838999760058e-05,
      "p_python": 0.6065064793269667,
      "p_sql": 0.00018678367268637594,
      "p_typescript": 0.0073432325025954955
    },
    {
      "text": "def maxSubarrySum(arr):\n  cur_max = 0\n  global_max = 0\n  \n  for i in arr:\n    cur_max = max(cur_max + i, 0)\n    global_max = max(global_max, cur_max)\n    \n  return global_max\n  \n# test\narr = [1, -2, 3, 4, -5]\nprint(maxSubarrySum(arr))\n\n# output: 7",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.939656449248525e-07,
      "p_css": 1.5053905832986675e-06,
      "p_html": 1.881936208724867e-07,
      "p_java": 1.340161263654051e-08,
      "p_javascript": 3.3914520178504056e-08,
      "p_matlab": 0.9976622508251822,
      "p_python": 0.0023354850193556074,
      "p_sql": 5.588917568335875e-09,
      "p_typescript": 2.370056260276868e-08
    },
    {
      "text": "class ParseJSON:\n def __init__(self, jsonObject):\n self.jsonObject = jsonObject\n\n def getNames(self):\n names = []\n for item in self.jsonObject['items']:\n  name = item['name']\n  names.append(name)\n return names\n\njsonObject = {\"items\": [{\"name\": \"item1\"}, {\"name\": \"item2\"}, {\"name\": \"item3\"}]}\npp = ParseJSON(jsonObject)\nresult = pp.getNames()\nprint(result) # ['item1', 'item2', 'item3']",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.003455783957126492,
      "p_css": 0.08346062829548784,
      "p_html": 0.04093867307514411,
      "p_java": 0.29487036443344505,
      "p_javascript": 8.61851180749453e-06,
      "p_matlab": 0.00041740322487417777,
      "p_python": 0.5705856084234302,
      "p_sql": 0.004275826962611236,
      "p_typescript": 0.001987093116073506
    },
    {
      "text": "#!/usr/bin/env python\n\n# ------------------------------\n# importacion\n# ------------------------------\nimport socket, sys, time, ConfigParser\n\ndef poner_mensaje( tipo , mensaje ):\n\t# -----------------------------\n\t# Colocar mensajes con formato\n\t# y marca de tiempo\n\t# -----------------------------\n\tprint time.strftime('%Y-%m-%d-%X') + \" \" + tipo + \": \" + mensaje\n\ndef activar_configuracion():\n\t# ------------------------------\n\t# Variables del servidor desde\n\t# un archivo de configuracion\n\t# ------------------------------\n\tconfiguracion = \"./configuracion/agente-servidor.cfg\"\n\tglobal direccion\n\tglobal puerto\n\tglobal clave\n\ttry:\n\t\tcfg = ConfigParser.ConfigParser()\n\t\tcfg.read([configuracion])\n\t\tpuerto = int(cfg.get('servidor','puerto'))\n\t\tclave = cfg.get('servidor','clave')\n\t\tclientes = cfg.get('servidor','clientes')\n\texcept:\n\t\tponer_mensaje( 'ERROR' , \"No se pudo leer el archivo de configuracion \" + configuracion )\n\t\tponer_mensaje( 'AVISO' , \"Se tomaran los valores por omision: 6470 root\" )\n\t\tpuerto = 6470\n\t\tclave = 'root'\n\nif __name__ == \"__main__\":\n\tactivar_configuracion()\n\t# ------------------------------\n\t# parametros a utilizar\n\t# ------------------------------\n\tif( len(sys.argv) == 3 ):\n\t\tcontinuar = True\n\t\tdireccion =  sys.argv[1]\n\t\tcomando =  sys.argv[2]\n\t\tagente = socket.socket( socket.AF_INET, socket.SOCK_STREAM )\n\t\ttry:\n\t\t\tagente.connect( ( direccion, puerto ) )\n\t\texcept:\n\t\t\tponer_mensaje ( 'ERROR' , \"No se pudo establecer la conexion en la direccion: \"+ direccion +\" con el puerto: \" + str(puerto) )\n\t\t\tcontinuar = False\n\t\tif ( continuar == True ):\n\t\t\tdata, server = agente.recvfrom( 100 )\n\t\t\tponer_mensaje ( 'MENSAJE' , data )\n\t\t\tagente.send( clave )\n\t\t\tdata, server = agente.recvfrom( 100 )\n\t\t\tponer_mensaje ( 'MENSAJE' , data )\n\t\t\tagente.send( comando )\n\t\t\tdata, server = agente.recvfrom( 100 )\n\t\t\tponer_mensaje ( 'MENSAJE' , data )\n\t\t\tagente.close()\n\telse:\n\t\tprint \"--------------------------------------------------------------\"\n\t\tprint \" Tiene que mandar cuatro parametros\"\n\t\tprint \"     agente-servidor.py <direccion> <comando>\"\n\t\tprint \"--------------------------------------------------------------\"\n",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.46026501736633335,
      "p_css": 0.13571205319001373,
      "p_html": 0.1619562263790673,
      "p_java": 0.00026265016152072536,
      "p_javascript": 0.0018633816692663204,
      "p_matlab": 9.766886386298058e-05,
      "p_python": 0.15850769071034976,
      "p_sql": 0.07855594733385599,
      "p_typescript": 0.0027793643257298718
    },
    {
      "text": "def get_max(ins):\n    return max(ins)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0027638126191827576,
      "p_css": 0.007884784769707304,
      "p_html": 0.005245869916755292,
      "p_java": 0.0006089810005279502,
      "p_javascript": 0.0018035122006250922,
      "p_matlab": 0.0005511082077889692,
      "p_python": 0.9756001979122335,
      "p_sql": 0.0018445130608642202,
      "p_typescript": 0.003697220312315113
    },
    {
      "text": "\"\"\"\nCreate a Spell Checker\n\"\"\"\n\nimport enchant\n\ndef check_spelling(text):\n    # Create a spell checker\n    spell_checker = enchant.Dict(\"en_US\")\n\n    # Split the text into words\n    words = text.split()\n\n    # Check the spelling of each word\n    for i, word in enumerate(words):\n        if not spell_checker.check(word):\n            # Word is misspelled, suggest a correction\n            words[i] = spell_checker.suggest(word)[0]\n    \n    # Join the words back together\n    corrected_text = ' '.join(words)\n\n    return corrected_text\n\nif __name__ == '__main__':\n    text = 'Ths is a languige exersice'\n    corrected_text = check_spelling(text)\n    print(corrected_text)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 3.397610492067939e-05,
      "p_css": 0.00014843580710173206,
      "p_html": 5.635501692362822e-05,
      "p_java": 6.861175342921234e-09,
      "p_javascript": 5.1084186322775895e-06,
      "p_matlab": 5.001398267120548e-07,
      "p_python": 0.002281097485219802,
      "p_sql": 0.9974376559831919,
      "p_typescript": 3.686418300807154e-05
    },
    {
      "text": "#!/bin/bash\n\n# SSH to EC2 instance\nssh -i <KeyPair>.pem ubuntu@<EC2_Public_IP>\n\n# Update the packages installed\nsudo apt-get update\n\n# Install docker\nsudo apt-get install docker.io docker-compose\n\n# Clone the source code\ngit clone <Git_Repo_URL> app\n\n# Build docker image\ncd app\ndocker-compose up -d --build\n\n# Migrate database\ndocker-compose run web python manage.py migrate\n\n# Run the Django server\ndocker-compose run web python manage.py runserver 0.0.0.0:8000",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.9999999986443453,
      "p_css": 1.3277226579080318e-10,
      "p_html": 6.415339374492166e-10,
      "p_java": 9.768602890707198e-15,
      "p_javascript": 3.364097386947497e-10,
      "p_matlab": 1.624593201534288e-11,
      "p_python": 5.022198043224788e-12,
      "p_sql": 1.9420537395017733e-10,
      "p_typescript": 2.945557691188768e-11
    },
    {
      "text": "def removeDuplicates(arr):\n  output = []\n  for ele in arr:\n    if ele not in output:\n      output.append(ele)\n  return output\n  \noutput = removeDuplicates([1,1,2,2,3,4,5,5]);\nprint(output) // outputs: [1, 2, 3, 4, 5]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.23981295361954422,
      "p_css": 0.014599755536547892,
      "p_html": 0.01192511233520904,
      "p_java": 5.662934595954171e-05,
      "p_javascript": 0.0004566313798741439,
      "p_matlab": 0.6086904192493733,
      "p_python": 0.12440771600309261,
      "p_sql": 4.6307725513962786e-05,
      "p_typescript": 4.474804885328098e-06
    },
    {
      "text": "def kClosestValues(arr, x, k):\n    closestPrimes = []\n    diff = float(\"inf\")\n    for num in arr:\n        currentDiff = abs(num - x)\n        if currentDiff <= diff:\n            if currentDiff < diff:\n                closestPrimes = []\n            closestPrimes.append(num)\n            diff = currentDiff\n    if closestPrimes[0] > x:\n        closestPrimes.sort()\n    else:\n        closestPrimes.sort(reverse=True)\n    return closestPrimes[:k]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.39866600660821e-10,
      "p_css": 5.92625342434452e-12,
      "p_html": 5.34573968173206e-10,
      "p_java": 3.918121107365045e-11,
      "p_javascript": 8.831664063395981e-11,
      "p_matlab": 0.9999999814313693,
      "p_python": 1.6682264575727737e-08,
      "p_sql": 7.206089096617187e-11,
      "p_typescript": 2.0644070140260858e-10
    },
    {
      "text": "import collections\n\ndef mode(numbers):\n counts = collections.Counter(numbers)\n max_count = max(counts.values())\n return [item for item, count in counts.items() if count == max_count]\n\nnumbers = [1, 2, 3, 2, 4, 2]\nmode = mode(numbers)\nprint(mode)\n# Output: [2]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005690582228563039,
      "p_css": 0.009012086107680057,
      "p_html": 0.003693373042008438,
      "p_java": 0.002971128004498365,
      "p_javascript": 0.001979293693528805,
      "p_matlab": 5.401407490939421e-07,
      "p_python": 0.9814401549453575,
      "p_sql": 0.000290613191452614,
      "p_typescript": 4.375265186876071e-05
    },
    {
      "text": "def permutations(nums):\n permutations_list = []\n for permutation in itertools.permutations(nums):\n permutations_list.append(list(permutation))\n \n return permutations_list\n \n print(permutations([1, 2]))\n# Output: [[1, 2], [2, 1]]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.015356858107986182,
      "p_css": 0.017895024288092466,
      "p_html": 0.01789020761234085,
      "p_java": 0.00109404447413287,
      "p_javascript": 0.005752485085946616,
      "p_matlab": 0.019115919725424806,
      "p_python": 0.8896738943981911,
      "p_sql": 0.029528390069817414,
      "p_typescript": 0.003693176238067672
    },
    {
      "text": "import random\nimport string\n\ndef generateRandomString(length):\n characters = string.ascii_lowercase + string.ascii_uppercase + string.digits\n\n return ''.join(random.choice(characters) for _ in range(length))\n\nprint(generateRandomString(10))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.1387210272500123e-11,
      "p_css": 8.081178982769678e-08,
      "p_html": 7.576440462348833e-08,
      "p_java": 0.012957201922308743,
      "p_javascript": 1.240674847947183e-12,
      "p_matlab": 1.0238188952787837e-08,
      "p_python": 0.00036786082799123836,
      "p_sql": 0.9866747665426384,
      "p_typescript": 3.880050207882098e-09
    },
    {
      "text": "ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = []\n\nfor num in ls:\n if num % 2 == 0:\n result.append(num)\n \nprint(result) # prints [2, 4, 6, 8, 10]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.0479638542444143e-09,
      "p_css": 4.584636862252352e-12,
      "p_html": 8.322857676925997e-10,
      "p_java": 1.7510539426445211e-12,
      "p_javascript": 1.8637549919292292e-10,
      "p_matlab": 0.9999995584044339,
      "p_python": 4.3782827957555783e-07,
      "p_sql": 3.66792099406593e-10,
      "p_typescript": 3.275336190932926e-10
    },
    {
      "text": "# Create the project\n$ django-admin startproject myproject \n\n# Create the application\n$ cd myproject\n$ python manage.py startapp user_data\n\n# Add the app to installed apps\n# myproject/settings.py\nINSTALLED_APPS = [\n 'user_data',\n ...\n]\n\n# Create the models\n# user_data/models.py\nfrom django.db import models\n\nclass User(models.Model):\n name = models.CharField(max_length=100)\n email = models.EmailField()\n\nclass Data(models.Model):\n user = models.ForeignKey(User, on_delete=models.CASCADE)\n data = models.TextField()\n\n# Create the migrations\n$ python manage.py makemigrations\n$ python manage.py migrate\n\n# Create the views\n# user_data/views.py\nfrom django.shortcuts import render\nfrom .models import User, Data\n\ndef index(request):\n users = User.objects.all()\n context = {\n  'users': users,\n }\n return render(request, 'user_data/index.html', context)\n\ndef user_data(request, user_id):\n user = User.objects.get(id=user_id)\n data = Data.objects.filter(user=user)\n context = {\n  'user': user,\n  'data': data,\n }\n return render(request, 'user_data/user_data.html', context)",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9999999999218998,
      "p_css": 3.447919685123629e-11,
      "p_html": 2.9126155869941533e-13,
      "p_java": 1.2543275717093795e-14,
      "p_javascript": 9.394025418135303e-13,
      "p_matlab": 3.018286181335694e-14,
      "p_python": 6.182187163882857e-14,
      "p_sql": 2.1301254318430204e-14,
      "p_typescript": 4.226464682974118e-11
    },
    {
      "text": "def factorial(n):\n fact = 1\n for i in range(2,n+1):\n  fact = fact * i\n return fact",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00406642618036623,
      "p_css": 0.00285521705629329,
      "p_html": 0.01122484219587269,
      "p_java": 0.0068325525563978865,
      "p_javascript": 7.488938606514113e-05,
      "p_matlab": 0.17939719444384633,
      "p_python": 0.5738336617567668,
      "p_sql": 0.0024228461461530955,
      "p_typescript": 0.21929237027823856
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://website.com/products/\"\n\ndef scrape(url):\n data = {'name': [], 'price': []}\n resp = requests.get(url)\n soup = BeautifulSoup(resp.text, 'html.parser')\n \n for product in soup.select('div.product'):\n data['name'].append(product.select_one('p.name').text)\n data['price'].append(product.select_one('p.price').text)\n \n return data\n\ndata = scrape(url)\n\nprint(data)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.3486109012730585e-09,
      "p_css": 0.8224773514542393,
      "p_html": 0.16179626414735848,
      "p_java": 0.01523235564167196,
      "p_javascript": 8.247890303882544e-08,
      "p_matlab": 2.0731739987229966e-06,
      "p_python": 0.00026411275279559994,
      "p_sql": 0.0001985442079045578,
      "p_typescript": 2.92147945174658e-05
    },
    {
      "text": "def get_even_numbers(list_of_numbers):\n    even_nums = []\n    for num in list_of_numbers:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\nlist_of_nums = [1, 2, 3, 4, 5, 6]\nresult = get_even_numbers(list_of_nums)\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.09281386311386e-07,
      "p_css": 2.978087473392157e-08,
      "p_html": 2.1639016445896804e-06,
      "p_java": 1.37048677309795e-07,
      "p_javascript": 5.75684812311321e-07,
      "p_matlab": 0.9999072006421506,
      "p_python": 8.641348400301178e-05,
      "p_sql": 1.3221141280554097e-06,
      "p_typescript": 1.3480623231095037e-06
    },
    {
      "text": "import numpy as np \n\nX = np.array([[2, 3], \n     [1, 4]]) \n\nY = np.array([[5, 6], \n     [7, 8]])\n\nZ = X + Y \n\nprint(\"Matrix addition result:\") \nprint(Z)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.596704565978585,
      "p_css": 0.0048171172548440834,
      "p_html": 0.00044925462067460964,
      "p_java": 9.311351206792341e-06,
      "p_javascript": 5.6525183225530454e-06,
      "p_matlab": 0.00013202788617325528,
      "p_python": 0.3972314762124395,
      "p_sql": 7.215197894698567e-07,
      "p_typescript": 0.0006498726579647446
    },
    {
      "text": "def prim(G, start):\n    node = start\n    visited = set()\n    edges = []\n    visited.add(node)\n    while len(visited) < G.num_nodes:\n        min_edge = float(\"inf\")\n        for neighbor, weight in G.neighbors[node]:\n            if neighbor not in visited and weight < min_edge:\n                min_edge = weight\n                new_node = neighbor\n        edges.append((node, new_node, min_edge))\n        visited.add(new_node)\n        node = new_node\n    return edges",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007229246133601419,
      "p_css": 0.06828182915547992,
      "p_html": 0.01842020105200637,
      "p_java": 0.021663197533344156,
      "p_javascript": 0.0018075032465879714,
      "p_matlab": 0.003229054960271894,
      "p_python": 0.7808001848939075,
      "p_sql": 0.03958832293209487,
      "p_typescript": 0.058980460092705675
    },
    {
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  models.py\n#  \n#  Copyright 2012 Thomas Grainger <tagrain@gmail.com>\n#  \n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as\n#  published by the Free Software Foundation; version 3.\n#  \n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#  \n#  You should have received a copy of the GNU Affero General Public\n#  License along with this program; if not, write to the Free Software\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#  MA 02110-1301, USA.\n#  \n#\n\nfrom django.db import models\n\nclass Event(models.Model):\n    id = models.BigIntegerField(db_column= \"event_id\", primary_key=True)\n    username = models.CharField(max_length=765)\n    radius_account_id = models.CharField(max_length=765)\n    radius_session_id = models.CharField(max_length=765)\n    radius_info = models.TextField()\n    ip_src = models.CharField(max_length=765)\n    ip_dst = models.CharField(max_length=765)\n    start = models.DateTimeField()\n    finish = models.DateTimeField()\n    alerts = models.BigIntegerField()\n    blacklist = models.ForeignKey(\"Blacklist\", db_column = \"blacklist\")\n    rule = models.ForeignKey(\"Rule\", db_column = \"rule\")\n    rule_class = models.CharField(max_length=93)\n    \n    def __unicode__(self):\n        return \"{username}@{ip_src} accessed {ip_dst} from {start} till {finish}. Rule class: {rule_class}\".format(\n            username = self.username,\n            ip_src = self.ip_src,\n            ip_dst = self.ip_dst,\n            start = self.start,\n            finish = self.finish,\n            rule_class = self.rule_class\n        )\n    \n    class Meta:\n        db_table = u'event'\n        unique_together = (\"username\", \"ip_src\", \"ip_dst\", \"start\", \"finish\")\n\nclass Rule(models.Model):\n    id = models.BigIntegerField(primary_key=True, db_column=\"rule_id\", editable=False)\n    name = models.CharField(max_length=765, db_column = \"rule_name\")\n    hide = models.BooleanField()\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('rule', (), {\"pk\":str(self.pk)});\n    \n    \n    def __unicode__(self):\n        return \"{name}[{pk}]\".format(name=self.name, pk=self.pk)\n    \n    class Meta:\n        db_table = u'rules'\n        \nclass Blacklist(models.Model):\n    id = models.BigIntegerField(primary_key=True, db_column=\"bl_id\", editable=False)\n    name = models.CharField(max_length=765, editable=False)\n    url = models.CharField(max_length=765, editable=False)\n    serialized = models.TextField(editable=False)\n    updated = models.DateTimeField(editable=False)\n    hide = models.BooleanField()\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('blacklist', (), {\"pk\":str(self.pk)});\n    \n    def __unicode__(self):\n        return self.name\n    \n    class Meta:\n        db_table = u'blacklists'\n\nclass Script(models.Model):\n    id = models.AutoField(primary_key=True, db_column = \"script_id\", editable=False)\n    name = models.CharField(max_length=765)\n    updated = models.DateTimeField(db_column=\"lastupdated\", editable=False)\n    \n    @models.permalink\n    def get_absolute_url(self):\n        return ('script', (), {\"pk\":str(self.pk)});\n    \n    def __unicode__(self):\n        return \"{name}[{pk}]\".format(\n            name=self.name,\n            pk=self.pk\n        ) \n    \n    class Meta:\n        db_table = u'scripts'\n",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9912864450559122,
      "p_css": 0.004732540829062676,
      "p_html": 4.7907584695581354e-05,
      "p_java": 0.002498449806804214,
      "p_javascript": 1.5488463697043647e-07,
      "p_matlab": 1.0706689929831387e-07,
      "p_python": 0.0002959546270098006,
      "p_sql": 9.308052511676886e-06,
      "p_typescript": 0.0011291320924676253
    },
    {
      "text": "##########################################################################\n#\n#  Copyright (c) 2013, Image Engine Design Inc. All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are\n#  met:\n#\n#      * Redistributions of source code must retain the above\n#        copyright notice, this list of conditions and the following\n#        disclaimer.\n#\n#      * Redistributions in binary form must reproduce the above\n#        copyright notice, this list of conditions and the following\n#        disclaimer in the documentation and/or other materials provided with\n#        the distribution.\n#\n#      * Neither the name of John Haddon nor the names of\n#        any other contributors to this software may be used to endorse or\n#        promote products derived from this software without specific prior\n#        written permission.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n#  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n##########################################################################\n\nimport unittest\n\nimport IECore\nimport GafferImage\nimport os\n\nclass MergeTest( unittest.TestCase ) :\n\n\trPath = os.path.expandvars( \"$GAFFER_ROOT/python/GafferTest/images/redWithDataWindow.100x100.exr\" )\n\tgPath = os.path.expandvars( \"$GAFFER_ROOT/python/GafferTest/images/greenWithDataWindow.100x100.exr\" )\n\tbPath = os.path.expandvars( \"$GAFFER_ROOT/python/GafferTest/images/blueWithDataWindow.100x100.exr\" )\n\tcheckerPath = os.path.expandvars( \"$GAFFER_ROOT/python/GafferTest/images/checkerboard.100x100.exr\" )\n\tcheckerRGBPath = os.path.expandvars( \"$GAFFER_ROOT/python/GafferTest/images/rgbOverChecker.100x100.exr\" )\n\trgbPath = os.path.expandvars( \"$GAFFER_ROOT/python/GafferTest/images/rgb.100x100.exr\" )\n\n\t# Do several tests to check the cache is working correctly:\n\tdef testHashes( self ) :\n\n\t\tr1 = GafferImage.ImageReader()\n\t\tr1[\"fileName\"].setValue( self.checkerPath )\n\n\t\tr2 = GafferImage.ImageReader()\n\t\tr2[\"fileName\"].setValue( self.gPath )\n\n\t\t##########################################\n\t\t# Test to see if the hash changes.\n\t\t##########################################\n\t\tmerge = GafferImage.Merge()\n\t\tmerge[\"operation\"].setValue(8) # 8 is the Enum value of the over operation.\n\n\t\tmerge[\"in\"].setInput(r1[\"out\"])\n\t\tmerge[\"in1\"].setInput(r2[\"out\"])\n\t\th1 = merge[\"out\"].image().hash()\n\n\t\t# Switch the inputs.\n\t\tmerge[\"in1\"].setInput(r1[\"out\"])\n\t\tmerge[\"in\"].setInput(r2[\"out\"])\n\t\th2 = merge[\"out\"].image().hash()\n\n\t\tself.assertNotEqual( h1, h2 )\n\n\t\t##########################################\n\t\t# Test to see if the hash remains the same\n\t\t# when the output should be the same but the\n\t\t# input plugs used are not.\n\t\t##########################################\n\t\tmerge = GafferImage.Merge()\n\t\tmerge[\"operation\"].setValue(8) # 8 is the Enum value of the over operation.\n\n\t\texpectedHash = h1\n\n\t\t# Connect up a load of inputs ...\n\t\tmerge[\"in\"].setInput(r1[\"out\"])\n\t\tmerge[\"in1\"].setInput(r1[\"out\"])\n\t\tmerge[\"in2\"].setInput(r1[\"out\"])\n\t\tmerge[\"in3\"].setInput(r2[\"out\"])\n\n\t\t# but then disconnect two so that the result should still be the same...\n\t\tmerge[\"in\"].setInput( None )\n\t\tmerge[\"in2\"].setInput( None )\n\t\th1 = merge[\"out\"].image().hash()\n\n\t\tself.assertEqual( h1, expectedHash )\n\n\tdef testHashPassThrough( self ) :\n\n\t\tr1 = GafferImage.ImageReader()\n\t\tr1[\"fileName\"].setValue( self.checkerPath )\n\n\t\t##########################################\n\t\t# Test to see if the input has is always passed\n\t\t# through if only the first input is connected.\n\t\t##########################################\n\t\tmerge = GafferImage.Merge()\n\t\tmerge[\"operation\"].setValue(8) # 8 is the Enum value of the over operation.\n\n\t\texpectedHash = r1[\"out\"].image().hash()\n\t\tmerge[\"in\"].setInput(r1[\"out\"])\n\t\th1 = merge[\"out\"].image().hash()\n\n\t\tself.assertEqual( h1, expectedHash )\n\n\t\t##########################################\n\t\t# Test that if we disable the node the hash gets passed through.\n\t\t##########################################\n\t\tmerge[\"enabled\"].setValue(False)\n\t\th1 = merge[\"out\"].image().hash()\n\n\t\tself.assertEqual( h1, expectedHash )\n\n\n\t# Overlay a red, green and blue tile of different data window sizes and check the data window is expanded on the result and looks as we expect.\n\tdef testOverRGBA( self ) :\n\t\tr = GafferImage.ImageReader()\n\t\tr[\"fileName\"].setValue( self.rPath )\n\n\t\tg = GafferImage.ImageReader()\n\t\tg[\"fileName\"].setValue( self.gPath )\n\n\t\tb = GafferImage.ImageReader()\n\t\tb[\"fileName\"].setValue( self.bPath )\n\n\t\tmerge = GafferImage.Merge()\n\t\tmerge[\"operation\"].setValue(8) # 8 is the Enum value of the over operation.\n\t\tmerge[\"in\"].setInput(r[\"out\"])\n\t\tmerge[\"in1\"].setInput(g[\"out\"])\n\t\tmerge[\"in2\"].setInput(b[\"out\"])\n\n\t\tmergeResult = merge[\"out\"].image()\n\t\texpected = IECore.Reader.create( self.rgbPath ).read()\n\n\t\tself.assertTrue( not IECore.ImageDiffOp()( imageA = expected, imageB = mergeResult, skipMissingChannels = False, maxError = 0.001 ).value )\n\n\t# Overlay a red, green and blue tile of different data window sizes and check the data window is expanded on the result and looks as we expect.\n\tdef testOverRGBAonRGB( self ) :\n\t\tc = GafferImage.ImageReader()\n\t\tc[\"fileName\"].setValue( self.checkerPath )\n\n\t\tr = GafferImage.ImageReader()\n\t\tr[\"fileName\"].setValue( self.rPath )\n\n\t\tg = GafferImage.ImageReader()\n\t\tg[\"fileName\"].setValue( self.gPath )\n\n\t\tb = GafferImage.ImageReader()\n\t\tb[\"fileName\"].setValue( self.bPath )\n\n\t\tmerge = GafferImage.Merge()\n\t\tmerge[\"operation\"].setValue(8) # 8 is the Enum value of the over operation.\n\t\tmerge[\"in\"].setInput(c[\"out\"])\n\t\tmerge[\"in1\"].setInput(r[\"out\"])\n\t\tmerge[\"in2\"].setInput(g[\"out\"])\n\t\tmerge[\"in3\"].setInput(b[\"out\"])\n\n\t\tmergeResult = merge[\"out\"].image()\n\t\texpected = IECore.Reader.create( self.checkerRGBPath ).read()\n\n\t\tself.assertTrue( not IECore.ImageDiffOp()( imageA = expected, imageB = mergeResult, skipMissingChannels = False, maxError = 0.001 ).value )\n\n\nif __name__ == \"__main__\":\n\tunittest.main()\n",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 6.303504944901527e-07,
      "p_css": 6.84332710374649e-05,
      "p_html": 0.001222436431807218,
      "p_java": 0.0038070597901119227,
      "p_javascript": 0.012662866250336106,
      "p_matlab": 1.0196598375783074e-07,
      "p_python": 1.0266135513789056e-05,
      "p_sql": 1.6872022654455971e-06,
      "p_typescript": 0.9822265186024498
    },
    {
      "text": "import pandas as pd\n\n# Read the data\ndata = pd.read_csv(\"apple stock data.csv\")\n\n# Extract the data points\nX = data[['open', 'high', 'low', 'volume']]\ny = data['close']\n\n# Fit the model\nmodel.fit(X, y)\n\n# Predict the stock price of Apple in 2021 \npredict = model.predict([[Apple_open, Apple_high, Apple_low, Apple_volume]])\nprint(predict)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.024398642445961616,
      "p_css": 0.15875467085954614,
      "p_html": 0.005537749902340275,
      "p_java": 2.6606976676221473e-06,
      "p_javascript": 0.00037020003535981783,
      "p_matlab": 1.738480126932716e-05,
      "p_python": 0.2690722848972766,
      "p_sql": 3.035761188975284e-05,
      "p_typescript": 0.5418160487486889
    },
    {
      "text": "def sort_numbers(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.5504501733196646e-05,
      "p_css": 6.89231253443069e-05,
      "p_html": 0.00010954751282083861,
      "p_java": 9.69196354515354e-06,
      "p_javascript": 1.5872317982823947e-05,
      "p_matlab": 0.019136937521150643,
      "p_python": 0.9804042275562692,
      "p_sql": 0.00012615924142840733,
      "p_typescript": 8.313625972550846e-05
    },
    {
      "text": "import random\nimport string\n\ndef generate_password(length):\n chars = string.ascii_letters + string.digits + '$#&'\n return ''.join(random.choice(chars) for _ in range(length))\n\nlength = 8\npassword = generate_password(length)\nprint(password)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.873970272211742e-12,
      "p_css": 6.84991847472801e-10,
      "p_html": 5.666072506143319e-10,
      "p_java": 1.2319573568586137e-06,
      "p_javascript": 6.155457491649994e-12,
      "p_matlab": 2.0834998901560427e-10,
      "p_python": 9.20146479615869e-07,
      "p_sql": 0.9999978463740051,
      "p_typescript": 5.417997500180034e-11
    },
    {
      "text": "def stringCompare(str1, str2):\n    if str1 < str2: \n        return -1\n    elif str1 > str2: \n        return 1\n    else: \n        return 0\n\nstr1 = \"Hello\"\nstr2 = \"World\"\n\nresult = stringCompare(str1, str2)\nif result == -1:\n    print (\"str1 is less than str2\")\nelif result == 1:\n    print (\"str2 is less than str1\")\nelse:\n    print (\"str1 is equal to str2\")",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 4.086873440802402e-05,
      "p_css": 0.00024359212460353088,
      "p_html": 6.787747191990345e-08,
      "p_java": 5.509906316879889e-07,
      "p_javascript": 0.8017024862633496,
      "p_matlab": 1.4644628459424696e-05,
      "p_python": 0.19400304974576973,
      "p_sql": 0.003237580102061559,
      "p_typescript": 0.0007571595332444308
    },
    {
      "text": "# coding=utf-8\n# --------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n#\n# Code generated by Microsoft (R) AutoRest Code Generator.\n# Changes may cause incorrect behavior and will be lost if the code is\n# regenerated.\n# --------------------------------------------------------------------------\n\nfrom msrest.serialization import Model\n\n\nclass VirtualMachineScaleSetInstanceView(Model):\n    \"\"\"The instance view of a virtual machine scale set.\n\n    Variables are only populated by the server, and will be ignored when\n    sending a request.\n\n    :ivar virtual_machine: The instance view status summary for the virtual\n     machine scale set.\n    :vartype virtual_machine:\n     ~azure.mgmt.compute.v2015_06_15.models.VirtualMachineScaleSetInstanceViewStatusesSummary\n    :ivar extensions: The extensions information.\n    :vartype extensions:\n     list[~azure.mgmt.compute.v2015_06_15.models.VirtualMachineScaleSetVMExtensionsSummary]\n    :param statuses: The resource status information.\n    :type statuses:\n     list[~azure.mgmt.compute.v2015_06_15.models.InstanceViewStatus]\n    \"\"\"\n\n    _validation = {\n        'virtual_machine': {'readonly': True},\n        'extensions': {'readonly': True},\n    }\n\n    _attribute_map = {\n        'virtual_machine': {'key': 'virtualMachine', 'type': 'VirtualMachineScaleSetInstanceViewStatusesSummary'},\n        'extensions': {'key': 'extensions', 'type': '[VirtualMachineScaleSetVMExtensionsSummary]'},\n        'statuses': {'key': 'statuses', 'type': '[InstanceViewStatus]'},\n    }\n\n    def __init__(self, *, statuses=None, **kwargs) -> None:\n        super(VirtualMachineScaleSetInstanceView, self).__init__(**kwargs)\n        self.virtual_machine = None\n        self.extensions = None\n        self.statuses = statuses\n",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.0036447111643472304,
      "p_css": 0.010448347072250286,
      "p_html": 0.0010915088220387755,
      "p_java": 1.6552714160696295e-05,
      "p_javascript": 0.003856737613775526,
      "p_matlab": 2.574822084207049e-05,
      "p_python": 0.001040940225560493,
      "p_sql": 0.0005366406376527828,
      "p_typescript": 0.9793388135293721
    },
    {
      "text": "# Import the library\nimport cx_Oracle\n\n# Connect to the database\nconnection = cx_Oracle.connect('<username>', '<password>', '<database_url>')\n\n# Create a cursor\ncursor = connection.cursor()\n\n# Execute a query\ncursor.execute('SELECT * FROM my_table')\n\n# Get the results\nresult = cursor.fetchall()\n\n# Close the connection\nconnection.close()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00012290014163740125,
      "p_css": 0.00030272450981360554,
      "p_html": 2.5946905000249327e-05,
      "p_java": 6.912046426923208e-07,
      "p_javascript": 0.00021462953164255247,
      "p_matlab": 2.1743279104581643e-06,
      "p_python": 0.0002607352369142885,
      "p_sql": 0.9892141169587074,
      "p_typescript": 0.00985608118373127
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/movies'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\ntitles = []\nratings = []\ndates = []\ndescriptions = []\n\n# Get the movie titles\nall_titles = soup.find_all('h3', class_='title')\nfor title in all_titles:\n titles.append(title.text)\n\n# Get the movie ratings\nall_ratings = soup.find_all('span', class_='rating')\nfor rating in all_ratings:\n ratings.append(rating.text)\n\n# Get the movie dates\nall_dates = soup.find_all('span', class_='date')\nfor date in all_dates:\n dates.append(date.text)\n\n# Get the movie descriptions\nall_descriptions = soup.find_all('p', class_='desc')\nfor description in all_descriptions:\n descriptions.append(description.text)\n\n# Print out the collected data\nfor i in range(len(titles)):\n print(f'Movie Title: {titles[i]}')\n print(f'Movie Rating: {ratings[i]}')\n print(f'Movie Date: {dates[i]}')\n print(f'Movie Description: {descriptions[i]}')",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.997638077172551e-08,
      "p_css": 0.9084118393185001,
      "p_html": 0.08082580397914858,
      "p_java": 0.006199771260854771,
      "p_javascript": 0.00013203924053167688,
      "p_matlab": 0.0005794595966075872,
      "p_python": 0.002831099868918139,
      "p_sql": 0.0008400566175939356,
      "p_typescript": 0.00017990014146469142
    },
    {
      "text": "import json\n\ndef serialize_object(obj):\n    if hasattr(obj, '__dict__'):\n        return obj.__dict__\n    else:\n        return obj\n\ndef serialize_class(class_instance):\n    return json.dumps(class_instance, default=serialize_object)\n\nif __name__ == '__main__':\n    # Sample\n    class Person:\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age\n        def hello(self):\n            print(\"Hello, my name is {} and I'm {} years old\".format(self.name, self.age))\n    \n    person = Person('Jane', 20)\n    print(serialize_class(person))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008196178477970957,
      "p_css": 0.0010024438207815805,
      "p_html": 0.0037942692884121686,
      "p_java": 7.559666519257473e-05,
      "p_javascript": 7.939665817492378e-05,
      "p_matlab": 2.3592465024896614e-06,
      "p_python": 0.9922126112630548,
      "p_sql": 0.001988667060764083,
      "p_typescript": 2.5038149320320743e-05
    },
    {
      "text": "from flask import Flask, request, jsonify\nfrom textblob import TextBlob\n\napp = Flask(__name__)\n\n@app.route('/sentiment/analyze', methods=['POST'])\ndef sentiment():\n    request_data = request.get_json()\n    sentence = request_data['sentence']\n    blob = TextBlob(sentence)\n    sentiment = blob.sentiment.polarity\n    response_object = {\n        'sentiment': sentiment\n    }\n    return jsonify(response_object)\nif __name__ == '__main__':\n    app.run()",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.022407801423128103,
      "p_css": 0.609802981801884,
      "p_html": 0.0070752099716360145,
      "p_java": 0.00013546354624925305,
      "p_javascript": 0.0004783584702162307,
      "p_matlab": 0.00037288946506021804,
      "p_python": 0.3006023514576091,
      "p_sql": 0.057094078658657274,
      "p_typescript": 0.002030865205559839
    },
    {
      "text": "def convert_base10_to_binary(num):\n    binary_num = []\n    while (num > 0): \n        binary_num.append(num % 2)\n        num //= 2\n  \n    binary_num.reverse() \n    return binary_num",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.062039218964929e-05,
      "p_css": 1.5100895763456008e-07,
      "p_html": 2.651633282031777e-05,
      "p_java": 3.7419195024150816e-06,
      "p_javascript": 5.9044927028802425e-06,
      "p_matlab": 0.9993097892516065,
      "p_python": 0.0006205416959065206,
      "p_sql": 4.151539116974561e-06,
      "p_typescript": 1.858336719718761e-05
    },
    {
      "text": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(node):\n    if node is None:\n        return True\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n\n    return (abs(left_height - right_height) <= 1\n        and is_balanced(node.left) == True\n        and is_balanced(node.right) == True\n        )\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003621643417506413,
      "p_css": 0.008509559482295368,
      "p_html": 0.002626234395594709,
      "p_java": 8.831542099975056e-05,
      "p_javascript": 0.00011217091375997333,
      "p_matlab": 3.5607034254075914e-05,
      "p_python": 0.9743577913373176,
      "p_sql": 0.008184114085932098,
      "p_typescript": 0.005724042988095834
    },
    {
      "text": "def create_add_closure():\n    def adder(a, b):\n        return a + b\n    return adder\n\nadd_func = create_add_closure()\nprint(add_func(2, 3)) # Output: 5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011980439851529828,
      "p_css": 0.0011757368043443955,
      "p_html": 0.0007306102647490929,
      "p_java": 2.3442673666141477e-05,
      "p_javascript": 9.402825344852583e-05,
      "p_matlab": 2.727240653648153e-06,
      "p_python": 0.9966170903841911,
      "p_sql": 0.00013952187375136088,
      "p_typescript": 1.879852004282086e-05
    },
    {
      "text": "def longest_valid_parentheses(s):\n    # maintain a stack\n    stack = []\n    longest_valid_len = 0\n\n    # traverse through the string\n    for i in range(len(s)):\n        # if current char is an opening bracket, push it to the stack\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            # if closing bracket, check if the stack is empty\n            if stack:\n                # pop an opening bracket from the stack and calculate the length \n                current_len = i - stack.pop() + 1\n\n                if stack:\n                    # if the stack is not empty, subtract the top element from the current length\n                    current_len -= (stack[-1] + 1)\n\n                longest_valid_len = max(longest_valid_len, current_len)\n            else:\n                # if the stack is empty, reset the longest_valid_len\n                longest_valid_len = max(longest_valid_len, current_len)\n\n    return longest_valid_len\n\ns = '()(()())'\nprint(longest_valid_parentheses(s)) # 6",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.006333895212015849,
      "p_css": 0.02226346878144816,
      "p_html": 0.005390175268412168,
      "p_java": 0.0005350093724969654,
      "p_javascript": 0.052199579409499194,
      "p_matlab": 0.5623229097460017,
      "p_python": 0.043315028607184086,
      "p_sql": 0.029068893996735772,
      "p_typescript": 0.27857103960620594
    },
    {
      "text": "def mask_information(data):\n  masked_data = \"\"\n  for char in data:\n    if char.isdigit():\n      masked_data += 'x'\n    else:\n      masked_data += char\n  return masked_data\n\nmasked_data = mask_information('John Smith,123-456-7890')\nprint(masked_data) // John Smith,xxx-xxx-xxxx",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.002182933122783673,
      "p_css": 0.710154263061576,
      "p_html": 0.019310709397250863,
      "p_java": 3.773363432789797e-05,
      "p_javascript": 0.0007956205626840247,
      "p_matlab": 0.005734083383257589,
      "p_python": 0.2542106940067402,
      "p_sql": 0.004419170475115503,
      "p_typescript": 0.0031547923562642768
    },
    {
      "text": "def triangle_of_nums(n):\n    k = 0\n    for i in range(1, n + 1):\n        # inner loop to handle number of columns \n        for j in range(0, i): \n           # printing numbers \n           print(k, end=\" \") \n           # incrementing k \n           k = k + 1\n        # ending line after each row \n        print(\"\\r\") \n\nn = 4\ntriangle_of_nums(n)\n\n# Output:\n# 0 \n# 1 2 \n# 3 4 5 \n# 6 7 8 9",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.474713028005216e-05,
      "p_css": 1.1041033161524569e-05,
      "p_html": 5.2244569573431906e-05,
      "p_java": 3.8126580300486815e-06,
      "p_javascript": 1.4101268894258548e-05,
      "p_matlab": 0.001500785715375352,
      "p_python": 0.9983147069102414,
      "p_sql": 4.967126110404395e-05,
      "p_typescript": 8.88945333975694e-06
    },
    {
      "text": "def main():\n  val1 = 25\n  val2 = 6\n  sum = val1 + val2\n  print(sum)\n  return 0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.023810934080441465,
      "p_css": 0.02644765073366129,
      "p_html": 0.01875113253716883,
      "p_java": 0.01116148837011274,
      "p_javascript": 0.0032785038490055983,
      "p_matlab": 0.0004047982435555395,
      "p_python": 0.9052485501151328,
      "p_sql": 0.006109745488984526,
      "p_typescript": 0.004787196581937323
    },
    {
      "text": "class Person:\n  def __init__(self, gender, age, name):\n    self.gender = gender\n    self.age = age\n    self.name = name",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00030404438501828104,
      "p_css": 0.004373377309873074,
      "p_html": 0.022735544906833015,
      "p_java": 0.2648070767973136,
      "p_javascript": 6.386303506542067e-07,
      "p_matlab": 1.04267586034149e-05,
      "p_python": 0.703213401958157,
      "p_sql": 0.0043711571246995125,
      "p_typescript": 0.00018433212915147141
    },
    {
      "text": "from Bio.Seq import Seq\nfrom Bio import SeqIO\n\nseq = Seq(\"ATGGGCTAG\")\n\n# Count the occurrence of the DNA sequence\ncount = seq.count_overlap(seq)\n\nprint(count)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04382883207042543,
      "p_css": 0.06149055433533245,
      "p_html": 0.019544649889004444,
      "p_java": 0.0007709358915020499,
      "p_javascript": 0.012745945314748116,
      "p_matlab": 0.0004860222675014247,
      "p_python": 0.8137945651109378,
      "p_sql": 0.003113449163437914,
      "p_typescript": 0.044225045957110465
    },
    {
      "text": "class Stack: \n   \n    def __init__(self): \n        self.stack = [] \n   \n    def isEmpty(self): \n        return len(self.stack) == 0\n       \n    def push(self, item): \n        self.stack.append(item) \n       \n    def pop(self): \n        if (self.isEmpty()): \n            return \"Stack is empty\"\n       \n        return self.stack.pop() \n       \n    def peek(self): \n        if (self.isEmpty()): \n            return \"Stack is empty\"\n\n        return self.stack[-1] \n       \n    def size(self): \n        return len(self.stack)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.99948531073047e-05,
      "p_css": 0.008254083846441575,
      "p_html": 0.026568270711108264,
      "p_java": 5.703464065684293e-06,
      "p_javascript": 8.323251670011304e-05,
      "p_matlab": 5.826762643003899e-06,
      "p_python": 0.9047208743296636,
      "p_sql": 0.06023165072562079,
      "p_typescript": 7.036279064966671e-05
    },
    {
      "text": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  posts = response.json()\n  for post in posts:\n    print(post['title'])",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.7027632640532976e-10,
      "p_css": 0.9699194084861582,
      "p_html": 0.00020611909607872112,
      "p_java": 0.028248889304905232,
      "p_javascript": 7.245799520808487e-06,
      "p_matlab": 3.089498974822262e-05,
      "p_python": 0.0015579938582949318,
      "p_sql": 2.3230084365248887e-05,
      "p_typescript": 6.218210652174813e-06
    },
    {
      "text": "def quickSort(arr): \n\tif len(arr) <= 1:\n\treturn arr \n\telse: \n\t\tpivot = arr[0] \n\t\tlessThanPivot = [number for number in arr[1:] if number <= pivot] \n\t\tmoreThanPivot = [number for number in arr[1:] if number > pivot] \n\t\treturn quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)\n\narr = [3, 8, 6, 10, 11, 4] \nprint(quickSort(arr))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.23591161645647e-08,
      "p_css": 1.6739707020165017e-06,
      "p_html": 1.010483039538348e-07,
      "p_java": 2.4501605049447113e-08,
      "p_javascript": 1.5853139888636517e-08,
      "p_matlab": 0.9972982768038281,
      "p_python": 0.0026996819131388,
      "p_sql": 7.321673938391317e-09,
      "p_typescript": 1.36228492045529e-07
    },
    {
      "text": "import tkinter as tk\n \n# Set up the root window\nroot = tk.Tk()\n \n# Create the table\ntable = tk.Frame(root)\ntable.grid(row=0, column=0)\n \n# Set the row and column numbers\nrows = 5\ncolumns = 5\n \n# Create the label for column 0\nfor i in range(rows):\n    for j in range(1, columns):\n        b = tk.Entry(table, text=\"\") \n        b.grid(row=i, column=j, sticky=\"nsew\")\n \n# Sort by column\ndef sortByColumn(col):\n    list = table.grid_slaves()\n    sortlist = []\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            sortlist.append(l.get())\n    sortlist = sorted(sortlist)\n \n    i = 0\n    for l in list:\n        if int(l.grid_info()[\"column\"]) == col:\n            l.delete(0, \"end\")\n            l.insert(0, sortlist[i])\n            i += 1\n \n# Create the button to initiate the sort\nfor c in range(1, columns):\n    tk.Button(table, text=\"Sort\", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c)\n \n# Diplay the root window \nroot.mainloop()",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.0034784753299063067,
      "p_css": 0.0026632856837538695,
      "p_html": 0.00783382077546953,
      "p_java": 0.0019814978300203953,
      "p_javascript": 0.009231787953905151,
      "p_matlab": 0.18838415921020576,
      "p_python": 0.0380912189213981,
      "p_sql": 0.10087844654418855,
      "p_typescript": 0.6474573077511524
    },
    {
      "text": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load data\ndf = pd.read_csv('data.csv')\n\n# Split data into train and test sets\nX_train = df.loc[:2000, ['time']].values\ny_train = df.loc[:2000, ['value']].values\nX_test = df.loc[2000:, ['time']].values\ny_test = df.loc[2000:, ['value']].values\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Predict values\npredictions = model.predict(X_test)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.006712757347565273,
      "p_css": 0.8224796449945272,
      "p_html": 0.024457087270435763,
      "p_java": 0.0002220756151691864,
      "p_javascript": 0.0001693798083813724,
      "p_matlab": 0.005615183010879544,
      "p_python": 0.1300786063618699,
      "p_sql": 0.0016123984400593387,
      "p_typescript": 0.008652867151112513
    },
    {
      "text": "def wordCount(text):\n    words = text.split(' ')\n\n    return len(words)\n\nprint(wordCount(\"I love programming\"))  # 3",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.248679463456754e-05,
      "p_css": 0.005784627676754644,
      "p_html": 0.00042112568662981334,
      "p_java": 2.6420487654449195e-05,
      "p_javascript": 0.0001646582950083959,
      "p_matlab": 3.015074950404474e-05,
      "p_python": 0.9721735107113496,
      "p_sql": 0.019183755680479437,
      "p_typescript": 0.002143263917985159
    },
    {
      "text": "name = input('What is your name? ')\nprint(f'Hello {name}!')",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9046496883683048,
      "p_css": 0.0010465927921154616,
      "p_html": 0.004398443122975364,
      "p_java": 0.040389354120973185,
      "p_javascript": 6.490447587660514e-06,
      "p_matlab": 3.813653007872734e-05,
      "p_python": 0.04932687842055753,
      "p_sql": 8.140941297238691e-05,
      "p_typescript": 6.300678443477083e-05
    },
    {
      "text": "import random\n\ndef rock_paper_scissors():\n    rps_dict = {\n        0: 'rock',\n        1: 'paper',\n        2: 'scissors',\n    }\n\n    user_input = int(input(\"Choose: 0 for rock, 1 for paper, 2 for scissors >>> \"))\n    computer_input = random.randint(0,2)\n\n    if user_input > 2 or user_input < 0:\n        print(\"Invalid input\")\n    else:\n        print(\"You chose:\", rps_dict[user_input])\n        print(\"Computer chose:\", rps_dict[computer_input])\n        if user_input == computer_input:\n            print(\"It's a draw!\")\n        else:\n            if user_input == 0 and computer_input == 2:\n                print(\"You win!\")\n            elif user_input == 1 and computer_input == 0:\n                print(\"You win!\")\n            elif user_input == 2 and computer_input ==1:\n                print(\"You win!\")\n            else:\n                print(\"Computer wins!\")\n\nrock_paper_scissors()",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0016659706911580593,
      "p_css": 0.042490214507177944,
      "p_html": 0.0045225405948928245,
      "p_java": 0.00035271461334143164,
      "p_javascript": 9.732792025958732e-05,
      "p_matlab": 0.0006348711495183334,
      "p_python": 0.9289096735901617,
      "p_sql": 0.0056437364764341195,
      "p_typescript": 0.01568295045705619
    },
    {
      "text": "import os\n\npath = \".\"\n\nfor dirName, subdirList, fileList in os.walk(path):\n print(os.path.abspath(dirName))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.06135605951424845,
      "p_css": 0.670655169816696,
      "p_html": 0.008231923214182745,
      "p_java": 0.0002960671075801296,
      "p_javascript": 0.003887244979198196,
      "p_matlab": 0.018656489202627878,
      "p_python": 0.08168670294705555,
      "p_sql": 0.15047028300117843,
      "p_typescript": 0.004760060217232532
    },
    {
      "text": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n\n    while list1 and list2:\n        if list1[0] < list2[0]:\n            merged_list.append(list1.pop(0))\n        else:\n            merged_list.append(list2.pop(0))\n\n    merged_list += list1 + list2\n\n    return merged_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0020827750556288113,
      "p_css": 0.025937496343458284,
      "p_html": 0.007381249422052858,
      "p_java": 0.0011779268139298926,
      "p_javascript": 0.0018719439813942962,
      "p_matlab": 0.04260404579992166,
      "p_python": 0.9015289657049709,
      "p_sql": 0.0015426185306794354,
      "p_typescript": 0.01587297834796385
    },
    {
      "text": "\"\"\"\nCreate a python program that connects to a database and returns a list of all the records in the table.\n\"\"\"\n\nimport mysql.connector\n\n# Connect to the database\ndb = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    passwd=\"password\",\n    database=\"schooldb\"\n)\n\n# Select the table\ncursor = db.cursor()\nquery = \"SELECT * FROM students\"\ncursor.execute(query)\n\nresult = cursor.fetchall()\n\n# Print out all the records\nfor record in result:\n    print(record)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.004764002172969003,
      "p_css": 0.0002585342653236731,
      "p_html": 0.00016593164876908204,
      "p_java": 4.319002589695651e-06,
      "p_javascript": 0.03234269511009218,
      "p_matlab": 3.6444826245683e-05,
      "p_python": 0.0017068975706621065,
      "p_sql": 0.9561689265243222,
      "p_typescript": 0.0045522488790265365
    },
    {
      "text": "def is_palindrome(s):\n  s = s.lower()\n  return s == s[::-1]\n\nprint(is_palindrome(\"racecar\")) # True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011376196787924466,
      "p_css": 0.003809897511028614,
      "p_html": 0.0028800175449074524,
      "p_java": 6.820669280161117e-05,
      "p_javascript": 0.00035509809578126495,
      "p_matlab": 6.22288500356138e-05,
      "p_python": 0.9906573835294684,
      "p_sql": 0.0004299833667861991,
      "p_typescript": 0.0005995647303983185
    },
    {
      "text": "# find the minimum value using the min function\nmin_value = min(nums)\n\n# print the minimum value\nprint(\"The minimum value is: \",min_value)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0028297257796988744,
      "p_css": 0.018092903768232232,
      "p_html": 0.0017969480833606574,
      "p_java": 1.9733848302294636e-05,
      "p_javascript": 0.9105288037601135,
      "p_matlab": 0.018196914308037514,
      "p_python": 1.688900873439282e-05,
      "p_sql": 0.0001740337740212652,
      "p_typescript": 0.04834404766949926
    },
    {
      "text": "for num in range(2,101):\n prime = True\n for i in range(2,num):\n  if (num%i==0):\n   prime = False\n if prime:\n  print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.305838662918314e-15,
      "p_css": 4.982495474594019e-22,
      "p_html": 2.8295812089408655e-14,
      "p_java": 2.7016383455916415e-16,
      "p_javascript": 2.983141137586768e-16,
      "p_matlab": 0.9999999999827553,
      "p_python": 1.720178276451553e-11,
      "p_sql": 5.314673294058522e-15,
      "p_typescript": 2.4355879034311637e-15
    },
    {
      "text": "def most_common_string(word_list):\n    return max(set(word_list), key=word_list.count)\n\ndef most_common_integer(int_list):\n    return max(set(int_list), key=int_list.count)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016091374379041128,
      "p_css": 0.01035887932853179,
      "p_html": 0.0016284022465877786,
      "p_java": 0.00015048837605558725,
      "p_javascript": 0.0006688609973134587,
      "p_matlab": 7.212674910672058e-05,
      "p_python": 0.9812286877419799,
      "p_sql": 0.003276666817265438,
      "p_typescript": 0.0010067503052552465
    },
    {
      "text": "def isArmstrong(num): \n  \n    temp = num \n    sum = 0 \n  \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n  \n    if num == sum:\n        return True \n    else:\n        return False\n\nif __name__ == \"__main__\":\n    num = 371\n    result = isArmstrong(num)\n    if result == True:\n        print(f\"{num} is an Armstrong number\")\n    else:\n        print(f\"{num} is not an Armstrong number\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.7813392904553e-10,
      "p_css": 5.620810066391932e-12,
      "p_html": 6.414689136260756e-09,
      "p_java": 3.4588875325253775e-10,
      "p_javascript": 1.2767306954407478e-09,
      "p_matlab": 0.9999999859961857,
      "p_python": 5.408268773566543e-09,
      "p_sql": 8.448623172949397e-11,
      "p_typescript": 2.8999610048137443e-10
    },
    {
      "text": "class Point:\n def __init__(self, x, y):\n     self.x = x\n     self.y = y\n\n# create a Point object\np = Point(2, 4)\n\nprint(p.x)\nprint(p.y)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00014358283774376066,
      "p_css": 0.012487142983268437,
      "p_html": 0.019616666652672424,
      "p_java": 1.581876488814003e-05,
      "p_javascript": 2.3373669788945276e-05,
      "p_matlab": 4.369173964322434e-06,
      "p_python": 0.9322346355445271,
      "p_sql": 0.03326846070663862,
      "p_typescript": 0.0022059496665082366
    },
    {
      "text": "import random\nrand_num = random.randint(1000, 9999)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006927260167594611,
      "p_css": 0.013137350610541583,
      "p_html": 0.0064644337608785,
      "p_java": 0.0002676205034396218,
      "p_javascript": 0.0021189672336865144,
      "p_matlab": 0.0009007586425818768,
      "p_python": 0.9036843066717922,
      "p_sql": 0.06329539115411498,
      "p_typescript": 0.003203911255370145
    },
    {
      "text": "from tkinter import *\n\nroot = Tk()\nroot.title(\"Calculator\")\n\ne = Entry(root, width=35, borderwidth=5)\ne.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n\n# Define buttons\n\ndef button_click(number):\n current = e.get()\n e.delete(0, END)\n e.insert(0, str(current) + str(number))\n\n# Define clear function\n\ndef button_clear():\n e.delete(0, END)\n\n# Define addition function \n\ndef button_add():\n first_num=e.get()\n global f_num\n global maths\n maths=\"addition\"\n f_num = float(first_num)\n e.delete(0, END)\n\n# Define equal function \n\ndef button_equal():\n second_num= e.get()\n e.delete(0, END)\n \n if maths == \"addition\":\n  e.insert(0, f_num + float(second_num))\n \n# Create buttons\n\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\n\n# Put buttons on screen\n\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\n\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\n\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)\nbutton_9.grid(row=1, column=2)\n\nbutton_0.grid(row=4, column=0)\nbutton_clear.grid(row=4, column=1, columnspan=2)\nbutton_add.grid(row=5, column=0)\nbutton_equal.grid(row=5, column=1, columnspan=2)\n\nroot.mainloop()",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.01067662602554733,
      "p_css": 0.0834812527231419,
      "p_html": 0.010077075156495141,
      "p_java": 0.0011871006120595263,
      "p_javascript": 0.011845375483657071,
      "p_matlab": 0.0017471037923183377,
      "p_python": 0.6520304319809457,
      "p_sql": 0.2192909148047708,
      "p_typescript": 0.009664119421064333
    },
    {
      "text": "def remove_chars_at_indices(str, indices):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i not in indices:\n            new_str += str[i]\n    return new_str\n\nstr = \"Hello World!\"\nindex = [0, 5, 9]\nresult = remove_chars_at_indices(str, index)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011729192605476608,
      "p_css": 7.857453156825211e-06,
      "p_html": 0.0010398768026247658,
      "p_java": 2.493136676383579e-10,
      "p_javascript": 0.005057910294125146,
      "p_matlab": 0.00010967288293773367,
      "p_python": 0.9925455352865722,
      "p_sql": 6.457431967832436e-05,
      "p_typescript": 1.6534510437501511e-06
    },
    {
      "text": "# Import decision tree classifier from the sklearn library\nfrom sklearn import tree\n \n# Input data to the model\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n \n# Create a decision tree classifier object\nclf = tree.DecisionTreeClassifier()\n \n# Train the decision tree classifier\nclf = clf.fit(X, y)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.99983905893424,
      "p_css": 9.364663069422123e-05,
      "p_html": 1.7601839586384089e-06,
      "p_java": 2.2897288839800675e-08,
      "p_javascript": 8.28847715055028e-07,
      "p_matlab": 6.704986035821806e-08,
      "p_python": 5.253794948111703e-05,
      "p_sql": 7.006729373558453e-13,
      "p_typescript": 1.2077506061182739e-05
    },
    {
      "text": "# Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9972775950326948,
      "p_css": 0.000367502630270429,
      "p_html": 2.348166827606898e-05,
      "p_java": 3.700159972707729e-08,
      "p_javascript": 6.284148669543654e-07,
      "p_matlab": 4.7957147387096275e-08,
      "p_python": 0.0019641370528628993,
      "p_sql": 2.314323559341146e-11,
      "p_typescript": 0.00036657021913848403
    },
    {
      "text": "for i in range(1,11):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2415972227325905e-13,
      "p_css": 1.6911048586434646e-18,
      "p_html": 1.1057399553217356e-12,
      "p_java": 5.510266050076294e-15,
      "p_javascript": 7.48076876636178e-15,
      "p_matlab": 0.999998444523721,
      "p_python": 1.5554749300339005e-06,
      "p_sql": 3.862174504852572e-14,
      "p_typescript": 6.723799180726865e-14
    },
    {
      "text": "def isPalindrome(s):\n s = s.lower()\n \n left = 0\n right = len(s) - 1\n \n while left < right:\n if s[left] != s[right]:\n return False\n left += 1\n right -= 1\n \n return True\n\ns = 'racecar'\nisPalindrome = isPalindrome(s)\n\nprint(isPalindrome) # Output: True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004295171821103782,
      "p_css": 0.002980114677097297,
      "p_html": 0.006378732771307442,
      "p_java": 0.0001495141835942686,
      "p_javascript": 0.00045120056348356186,
      "p_matlab": 0.0001779228421439918,
      "p_python": 0.9839113663697834,
      "p_sql": 0.0012988085748077904,
      "p_typescript": 0.00035716819667842956
    },
    {
      "text": "a = \"test\"\nb = \"test\"\n\nif a == b:\n  print(\"true\")\nelse:\n  print(\"false\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002863689001538895,
      "p_css": 0.025434940566306588,
      "p_html": 0.017711296949233735,
      "p_java": 9.178745226113342e-05,
      "p_javascript": 0.0006858981721571365,
      "p_matlab": 0.009422335222084556,
      "p_python": 0.9404329339413159,
      "p_sql": 0.001708669970929478,
      "p_typescript": 0.0016484487241725026
    },
    {
      "text": "import numpy as np\nimport pandas as pd\nfrom sklearn.pipeline import Pipeline\n\n# Define the preprocessing steps\ndata_process = Pipeline([\n ('extract_capacity', extract_column('capacity')),\n ('transform_capcity', StandardScaler()),\n ('extract_date', extract_column('date of commission')),\n ('transform_date', YearExtractorTransformer()),\n ('label', BooleanLabelEncoder()),\n ])\n\n# Put the steps together into a pipeline\nmodel = Pipeline([\n ('preprocessing', data_process),\n ('classification', RandomForestClassifier()),\n ])\n\n# Fit and predict labels\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.3598277519653996,
      "p_css": 0.06665780625804173,
      "p_html": 0.002923779815027945,
      "p_java": 8.310661709237209e-05,
      "p_javascript": 0.00035266201530061224,
      "p_matlab": 0.00015664588315554264,
      "p_python": 0.47905925399645305,
      "p_sql": 2.0424295224273508e-05,
      "p_typescript": 0.09091856915430488
    },
    {
      "text": "text = \"Today it is a beautiful day.\"\nwords = text.split()\nprint(\"Number of words in the given text:\", len(words))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.167815016509299e-06,
      "p_css": 0.00427938506969494,
      "p_html": 0.0003952208989397601,
      "p_java": 8.420147249414368e-06,
      "p_javascript": 0.003876080468656131,
      "p_matlab": 1.719696433434397e-05,
      "p_python": 0.7551021479290737,
      "p_sql": 0.21079806260225628,
      "p_typescript": 0.025514318104779048
    },
    {
      "text": "class Student: \n    def  __init__(self, name, grade): \n        self.name = name\n        self.grade = grade \n  \n    def getGrade(self): \n        return self.grade",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008551594676386781,
      "p_css": 0.00941806196204807,
      "p_html": 0.03222659261852205,
      "p_java": 0.16713527254116597,
      "p_javascript": 1.515329322843158e-07,
      "p_matlab": 9.517996033038336e-06,
      "p_python": 0.7761246384654245,
      "p_sql": 0.013415758059527248,
      "p_typescript": 0.0008148473567082804
    },
    {
      "text": "import numpy as np\n\ndef fitness_function(X):\n return X[0] * X[1] + X[2]\n\ndef generate_genes(n, lower, upper):\n return np.random.uniform(lower, upper, n)\n\ndef GA(genes, fitness, lower, upper, mutation_rate, max_iterations):\n max_fitness = -float('inf')\n max_genes = None\n n = len(genes)\n for iteration in range(max_iterations):\n if max_fitness >= fitness_function(genes):\n break\n # Generate new population\n parent_generation = []\n for _ in range(int(n/2)):\n parent_generation.append((genes, fitness_function(genes)))\n parent_generation.sort(key=lambda x: x[1], reverse=True)  # Sort  parents \n # Select the best\n elite_genes, elite_fitness = parent_generation[0]\n # Crossover\n child_generation = []\n for _ in range(int(n/2)):  # Breed new population\n parent_1 = np.random.choice(parent_generation)\n parent_2 = np.random.choice(parent_generation)\n child_1, child_2 = crossover(parent_1, parent_2, n)\n child_generation.append(child_1)\n child_generation.append(child_2)\n # Mutate\n mutants = []\n for child in child_generation:\n if np.random.uniform(0, 1) < mutation_rate:\n mutants.append(mutation(child, lower, upper))\n else:\n mutants.append(child)\n # Update \n for gene in mutants:\n genes = gene\n fitness = fitness_function(genes)\n if fitness > max_fitness:\n max_fitness = fitness\n max_genes = gene\n return max_fitness, max_genes\n\ndef crossover(parent_1, parent_2, n):\n n_split = np.random.randint(1, n)  # Split \n child_1 = np.concatenate([parent_1[:n_split], parent_2[n_split:]])\n child_2 = np.concatenate([parent_2[:n_split], parent_1[n_split:]])\n return child_1, child_2\n\ndef mutation(gene, lower, upper):\n for i, gene_value in enumerate(gene):\n if np.random.uniform(0, 1) < mutation_rate:\n gene[i] = np.random.uniform(lower, upper)\n return gene\n\n# Run GA\nn = 3\nlower = 0\nupper = 1\ngenes = generate_genes(n, lower, upper)\nmutation_rate = 0.1\nmax_iterations = 1000\nmax_fitness, max_genes = GA(genes, fitness_function, lower, upper, mutation_rate, max_iterations)\n\n# Print results\nprint(\"Maximum fitness score:\", max_fitness)\nprint(\"Parameters:\", max_genes)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.01381342062528442,
      "p_css": 0.014375653590494452,
      "p_html": 0.012130443028095262,
      "p_java": 0.0011112940370376825,
      "p_javascript": 0.0015326029571472767,
      "p_matlab": 0.03647987056262119,
      "p_python": 0.8118676412184521,
      "p_sql": 0.10686793904071103,
      "p_typescript": 0.0018211349401566297
    },
    {
      "text": "def find_all_substrings(s, k):\n    substrings = []\n    for start_idx in range(len(s)):\n        if start_idx + k > len(s):\n            break\n        for end_idx in range(start_idx+k, len(s)+1):\n            substrings.append(s[start_idx:end_idx])\n    return substrings\n\ns = \"abcdefg\"\nk = 2\n\nprint(find_all_substrings(s, k))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.6723573437810374e-05,
      "p_css": 1.5544181196598943e-05,
      "p_html": 8.499461914613469e-05,
      "p_java": 1.860774422729427e-06,
      "p_javascript": 4.079996303793175e-06,
      "p_matlab": 0.45183854480259716,
      "p_python": 0.5478598624062089,
      "p_sql": 0.00014678404269600755,
      "p_typescript": 2.1605603990834046e-05
    },
    {
      "text": "import nltk\nfrom nltk.tokenize import word_tokenize\n\nwords = ['horse', 'dog', 'cat']\n\ntokens = [word_tokenize(word) for word in words]\n\nfor token in tokens:\n    print(nltk.pos_tag([token])[0][1])\n\n# prints NN, NN, NN",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06311985394145618,
      "p_css": 0.1497401704410178,
      "p_html": 0.013390704519931206,
      "p_java": 1.072856192721746e-05,
      "p_javascript": 0.0007245456624150529,
      "p_matlab": 0.0070546134227452645,
      "p_python": 0.4972876656582265,
      "p_sql": 0.2683229428596955,
      "p_typescript": 0.00034877493258520003
    },
    {
      "text": "#!/usr/bin/env python\n\nimport numbers\n\nimport numpy as np\nimport pycuda.driver as drv\nimport pycuda.elementwise as elementwise\nimport pycuda.gpuarray as gpuarray\nfrom pycuda.tools import dtype_to_ctype\n\n# List of available numerical types provided by numpy: \n# XXX This try/except is an ugly hack to prevent the doc build on\n# ReadTheDocs from failing:\ntry:\n    num_types = [np.typeDict[t] for t in \\\n                 np.typecodes['AllInteger']+np.typecodes['AllFloat']]\nexcept TypeError:\n    num_types = []\n\n# Numbers of bytes occupied by each numerical type:\nnum_nbytes = dict((np.dtype(t), t(1).nbytes) for t in num_types)\n\ndef set_realloc(x_gpu, data):\n    \"\"\"\n    Transfer data into a GPUArray instance.\n\n    Copies the contents of a numpy array into a GPUArray instance. If\n    the array has a different type or dimensions than the instance,\n    the GPU memory used by the instance is reallocated and the\n    instance updated appropriately.\n    \n    Parameters\n    ----------\n    x_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance to modify.\n    data : numpy.ndarray\n        Array of data to transfer to the GPU.\n\n    Examples\n    --------\n    >>> import pycuda.gpuarray as gpuarray\n    >>> import pycuda.autoinit\n    >>> import numpy as np\n    >>> import misc\n    >>> x = np.asarray(np.random.rand(5), np.float32)\n    >>> x_gpu = gpuarray.to_gpu(x)\n    >>> x = np.asarray(np.random.rand(10, 1), np.float64)\n    >>> set_realloc(x_gpu, x)\n    >>> np.allclose(x, x_gpu.get())\n    True\n    \n    \"\"\"\n\n    # Only reallocate if absolutely necessary:\n    if x_gpu.shape != data.shape or x_gpu.size != data.size or \\\n        x_gpu.strides != data.strides or x_gpu.dtype != data.dtype:\n        \n        # Free old memory:\n        x_gpu.gpudata.free()\n\n        # Allocate new memory:\n        nbytes = num_nbytes[data.dtype]\n        x_gpu.gpudata = drv.mem_alloc(nbytes*data.size)\n    \n        # Set array attributes:\n        x_gpu.shape = data.shape\n        x_gpu.size = data.size\n        x_gpu.strides = data.strides\n        x_gpu.dtype = data.dtype\n        \n    # Update the GPU memory:\n    x_gpu.set(data)\n\ndef bufint(a):\n    \"\"\"\n    Return buffer interface to GPU array.\n\n    Parameters\n    ----------\n    a : pycuda.gpuarray.GPUArray\n        GPU array.\n\n    Returns\n    -------\n    b : buffer\n        Buffer interface to array. Returns None if `a` has a length of 0.\n    \"\"\"\n\n    assert isinstance(a, gpuarray.GPUArray)\n    if a.size:\n        return a.gpudata.as_buffer(a.nbytes)\n    else:\n        return None\n\ndef set_by_inds(dest_gpu, ind, src_gpu, ind_which='dest'):\n    \"\"\"\n    Set values in a GPUArray by index.\n\n    Parameters\n    ----------\n    dest_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance to modify.\n    ind : pycuda.gpuarray.GPUArray or numpy.ndarray\n        1D array of element indices to set. Must have an integer dtype.\n    src_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance from which to set values.\n    ind_which : str\n        If set to 'dest', set the elements in `dest_gpu` with indices `ind`\n        to the successive values in `src_gpu`; the lengths of `ind` and\n        `src_gpu` must be equal. If set to 'src', set the\n        successive values in `dest_gpu` to the values in `src_gpu` with indices\n        `ind`; the lengths of `ind` and `dest_gpu` must be equal.\n\n    Examples\n    --------\n    >>> import pycuda.gpuarray as gpuarray\n    >>> import pycuda.autoinit\n    >>> import numpy as np\n    >>> import misc\n    >>> dest_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32))\n    >>> ind = gpuarray.to_gpu(np.array([0, 2, 4]))\n    >>> src_gpu = gpuarray.to_gpu(np.array([1, 1, 1], dtype=np.float32))\n    >>> misc.set_by_inds(dest_gpu, ind, src_gpu, 'dest')\n    >>> np.allclose(dest_gpu.get(), np.array([1, 1, 1, 3, 1], dtype=np.float32))\n    True\n    >>> dest_gpu = gpuarray.to_gpu(np.zeros(3, dtype=np.float32))\n    >>> ind = gpuarray.to_gpu(np.array([0, 2, 4]))\n    >>> src_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32))\n    >>> misc.set_by_inds(dest_gpu, ind, src_gpu)\n    >>> np.allclose(dest_gpu.get(), np.array([0, 2, 4], dtype=np.float32))\n    True\n\n    Notes\n    -----\n    Only supports 1D index arrays.\n\n    May not be efficient for certain index patterns because of lack of inability\n    to coalesce memory operations.\n    \"\"\"\n\n    # Only support 1D index arrays:\n    assert len(np.shape(ind)) == 1\n    assert dest_gpu.dtype == src_gpu.dtype\n    assert issubclass(ind.dtype.type, numbers.Integral)\n    N = len(ind)\n\n    # Manually handle empty index array because it will cause the kernel to\n    # fail if processed:\n    if N == 0:\n        return\n    if ind_which == 'dest':\n        assert N == len(src_gpu)\n    elif ind_which == 'src':\n        assert N == len(dest_gpu)\n    else:\n        raise ValueError('invalid value for `ind_which`')\n    if not isinstance(ind, gpuarray.GPUArray):\n        ind = gpuarray.to_gpu(ind)\n    try:\n        func = set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)]\n    except KeyError:\n        data_ctype = dtype_to_ctype(dest_gpu.dtype)\n        ind_ctype = dtype_to_ctype(ind.dtype)        \n        v = \"{data_ctype} *dest, {ind_ctype} *ind, {data_ctype} *src\".format(data_ctype=data_ctype, ind_ctype=ind_ctype)\n    \n        if ind_which == 'dest':\n            func = elementwise.ElementwiseKernel(v, \"dest[ind[i]] = src[i]\")\n        else:\n            func = elementwise.ElementwiseKernel(v, \"dest[i] = src[ind[i]]\")\n        set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)] = func\n    func(dest_gpu, ind, src_gpu, range=slice(0, N, 1))\nset_by_inds.cache = {}\n\ndef set_by_inds_from_inds(dest_gpu, ind_dest, src_gpu, ind_src):\n    \"\"\"\n    Set values in a GPUArray by index from indexed values in another GPUArray.\n\n    Parameters\n    ----------\n    dest_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance to modify.\n    ind_dest : pycuda.gpuarray.GPUArray or numpy.ndarray\n        1D array of element indices in `dest_gpu` to set. Must have an integer dtype.\n    src_gpu : pycuda.gpuarray.GPUArray\n        GPUArray instance from which to set values.\n    ind_src : pycuda.gpuarray.GPUArray or numpy.ndarray\n        1D array of element indices in `src_gpu` to copy. Must have an integer dtype.\n    \"\"\"\n\n    assert len(np.shape(ind_dest)) == 1\n    assert len(np.shape(ind_src)) == 1\n    assert dest_gpu.dtype == src_gpu.dtype\n    assert ind_dest.dtype == ind_src.dtype\n    assert issubclass(ind_dest.dtype.type, numbers.Integral)\n    assert issubclass(ind_src.dtype.type, numbers.Integral)\n    N = len(ind_src)\n\n    # Manually handle empty index array because it will cause the kernel to\n    # fail if processed:\n    if N == 0:\n        return\n    assert N == len(ind_dest)\n    if not isinstance(ind_dest, gpuarray.GPUArray):\n        ind_dest = gpuarray.to_gpu(ind_dest)\n    if not isinstance(ind_src, gpuarray.GPUArray):\n        ind_src = gpuarray.to_gpu(ind_src)\n    try:\n        func = set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)]\n    except KeyError:\n        data_ctype = dtype_to_ctype(dest_gpu.dtype)\n        ind_ctype = dtype_to_ctype(ind_dest.dtype)        \n        v = \"{data_ctype} *dest, {ind_ctype} *ind_dest,\"\\\n            \"{data_ctype} *src, {ind_ctype} *ind_src\".format(data_ctype=data_ctype, ind_ctype=ind_ctype)        \n        func = elementwise.ElementwiseKernel(v,\n                \"dest[ind_dest[i]] = src[ind_src[i]]\")\n        set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)] = func\n    func(dest_gpu, ind_dest, src_gpu, ind_src, range=slice(0, N, 1))\nset_by_inds_from_inds.cache = {}\n",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.08301861223608627,
      "p_css": 0.08261287462781909,
      "p_html": 0.020464641322603512,
      "p_java": 4.957454712604823e-05,
      "p_javascript": 0.052595986120255005,
      "p_matlab": 0.007692209254460767,
      "p_python": 0.04139043481525843,
      "p_sql": 0.008545237947423914,
      "p_typescript": 0.703630429128967
    },
    {
      "text": "arr = [\"python\", \"c++\", \"java\", \"java-script\"]\n\nresult = []\nfor item in arr:\n    if item.startswith(\"java\"):\n        result.append(item)\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.98442641037526e-05,
      "p_css": 8.881048363723967e-06,
      "p_html": 0.00013868350583898679,
      "p_java": 5.832249395785347e-10,
      "p_javascript": 8.508893272864482e-05,
      "p_matlab": 0.9996516365401228,
      "p_python": 1.3428602920401363e-05,
      "p_sql": 1.0802265697798222e-08,
      "p_typescript": 4.242572043128985e-05
    },
    {
      "text": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.1112715794483116e-05,
      "p_css": 7.136505564477444e-05,
      "p_html": 3.531836836023581e-05,
      "p_java": 1.2869066731951122e-06,
      "p_javascript": 3.5250645744119366e-05,
      "p_matlab": 2.5668894183900453e-05,
      "p_python": 0.9997573473952214,
      "p_sql": 2.0337267220680918e-05,
      "p_typescript": 1.2312751157187427e-05
    },
    {
      "text": "\"\"\"\nGenerate a Python script to scrub a list of emails for invalid entries\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n    # Create the regex\n    email_regex = re.compile(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+')\n    # Check whether the email is valid\n    is_valid = email_regex.match(email)\n    # Return the result\n    return is_valid\n    \ndef scrub_emails(emails):\n    # Initialize a list for valid emails\n    valid_emails = []\n    # Loop over the emails and validate them\n    for email in emails:\n        # Check if the email is valid\n        is_valid = validate_email(email)\n        # If valid, append to the list\n        if is_valid:\n            valid_emails.append(email)\n    # Return the list of valid emails\n    return valid_emails",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.016346735313231667,
      "p_css": 0.013150217009072453,
      "p_html": 0.06479843752306717,
      "p_java": 1.1014105990562311e-05,
      "p_javascript": 0.0790690949343589,
      "p_matlab": 0.00537527146618054,
      "p_python": 0.05882245154967824,
      "p_sql": 0.01844991808616359,
      "p_typescript": 0.7439768600122568
    },
    {
      "text": "def nth_prime_number(n):\n    prime_numbers = [2]\n    i = 3\n    while len(prime_numbers) < n:\n        for number in prime_numbers:\n            if i % number == 0:\n                break\n        else:\n            prime_numbers.append(i)\n        i+= 2\n    return prime_numbers[-1]\n\n\n# test \nprime_number = nth_prime_number(5)\nprint(prime_number) # Output: 11",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0020461803428784846,
      "p_css": 0.005026824311732599,
      "p_html": 0.0035191972359967755,
      "p_java": 0.0001881256921115293,
      "p_javascript": 0.0005777079743869015,
      "p_matlab": 0.026338216620262953,
      "p_python": 0.9606869077336506,
      "p_sql": 0.0008587475669151833,
      "p_typescript": 0.0007580925220650735
    },
    {
      "text": "import collections\n\ndef find_frequent_words(text):\n words = text.split()\n word_counts = collections.Counter(words)\n \n # Get the most frequent words\n most_frequent = word_counts.most_common()\n \n return most_frequent\n\n# Example output: [('This', 3), ('is', 3), ('a', 1), ('sentence.', 3), ......]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006745447771291721,
      "p_css": 0.017119661691236077,
      "p_html": 0.012705721127738932,
      "p_java": 0.0014578673234616813,
      "p_javascript": 0.0008458154246095131,
      "p_matlab": 2.6948368183381654e-05,
      "p_python": 0.8771207877338567,
      "p_sql": 0.08971565646970223,
      "p_typescript": 0.0003329970840823095
    },
    {
      "text": "def factorial(num): \n    if num == 0: \n        return 1 \n  \n    return num * factorial(num - 1) \n  \nnum = 6\nprint(\"Factorial of\", num, \"is\", factorial(num))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.899415407131241e-07,
      "p_css": 3.912502068640174e-11,
      "p_html": 4.5930750769516614e-07,
      "p_java": 5.9565027206065364e-08,
      "p_javascript": 4.469602168319439e-07,
      "p_matlab": 0.9988530371977589,
      "p_python": 0.0011452113060738116,
      "p_sql": 2.058758675413332e-07,
      "p_typescript": 3.898068822790979e-07
    },
    {
      "text": "class StudentGrades:\n    def __init__(self, grades=[]):\n        self.grades = grades\n    \n    def add_grade(self, grade):\n        self.grades.append(grade)\n\n    def delete_grade(self, index):\n        del self.grades[index]\n\n    def update_grade(self, index, new_grade):\n        self.grades[index] = new_grade",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.005072643574788359,
      "p_css": 0.08834881812368275,
      "p_html": 0.5429211007524056,
      "p_java": 8.754586940703842e-05,
      "p_javascript": 0.0010421426410553462,
      "p_matlab": 0.00024347466543495056,
      "p_python": 0.26445278055935034,
      "p_sql": 0.09523812032229655,
      "p_typescript": 0.0025933734915790656
    },
    {
      "text": "numbers = [1, 7, 25, 8, 14]\n\n# Sort the list in descending order\nnumbers.sort(reverse=True)\n\n# Print the sorted list\nprint(numbers)\n\n# Output\n[25, 14, 8, 7, 1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0030692126367668103,
      "p_css": 0.009977864361782959,
      "p_html": 0.004622493742315182,
      "p_java": 0.005329829875817213,
      "p_javascript": 0.19131660826479455,
      "p_matlab": 4.3376233389771287e-07,
      "p_python": 0.7829205662822111,
      "p_sql": 0.0027411878094109306,
      "p_typescript": 2.180326456722869e-05
    },
    {
      "text": "def sort_dict_by_key(sample):\n    # Create a sorted list of keys\n    sorted_keys = sorted(sample.keys())\n    # Iterate over the sorted sequence\n    for key in sorted_keys:\n        # Generate key-value pair\n        print (key, sample[key])\n\nsample = {'c':10, 'a':8, 'b':12, 'e':3, 'd':4}\nsort_dict_by_key(sample)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0021375485565129364,
      "p_css": 0.8964786058592921,
      "p_html": 0.010658948406456228,
      "p_java": 0.00010780099058288864,
      "p_javascript": 0.03421220265748472,
      "p_matlab": 0.009218480969596097,
      "p_python": 0.027324045731281717,
      "p_sql": 0.016153745699302557,
      "p_typescript": 0.0037086211294907836
    },
    {
      "text": "def calculate_stats(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    average = sum(numbers)/len(numbers)\n    return (maximum, minimum, average)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.282781758395105e-05,
      "p_css": 0.0002691221113306896,
      "p_html": 0.00046075275427432473,
      "p_java": 0.5368014900777964,
      "p_javascript": 0.001578634021779948,
      "p_matlab": 4.800064121494308e-10,
      "p_python": 0.4605604242850139,
      "p_sql": 0.0001781188189463451,
      "p_typescript": 8.862963326800876e-05
    },
    {
      "text": "def multiply_numbers():\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    result = num1 * num2\n    print(\"The result is \" + str(result))\n\nmultiply_numbers()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.0574659735151963e-05,
      "p_css": 0.00021680351527306055,
      "p_html": 1.7167416624341387e-05,
      "p_java": 8.003197352604519e-08,
      "p_javascript": 1.4007855138999107e-05,
      "p_matlab": 1.745309736569197e-07,
      "p_python": 0.9996661767520251,
      "p_sql": 6.319044873331152e-05,
      "p_typescript": 1.824789522774166e-06
    },
    {
      "text": "def f(x): \n    return x**2 - 3\n\ndef bisection(f,a,b,tol):\n  c = (a+b)/2\n  if f(c)==0 or (b-a)/2 < tol:\n    return c\n  elif f(c)*f(a) > 0:\n    return bisection(f,c,b,tol)\n  else:\n    return bisection(f,a,c,tol)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0017040496833279832,
      "p_css": 0.0032021591673411154,
      "p_html": 0.002720992763705427,
      "p_java": 0.00012941715098988373,
      "p_javascript": 0.0007623843288995099,
      "p_matlab": 0.00030799072485505945,
      "p_python": 0.9896464387691964,
      "p_sql": 0.00039465604062283887,
      "p_typescript": 0.0011319113710619175
    },
    {
      "text": "# -*- coding: utf-8 -*-\n\nclass Slot(object):\n    \"\"\"\n    To use comb, you should create a python module file. we named *slot*.\n\n    A legal slot must be named 'Slot' in your module file and it must be at least contain four method:\n\n    * `initialize`\n\n    initial resource, e.g: database handle\n\n    * `__enter__`\n\n    get next data to do,you can fetch one or more data.\n\n    * `slot`\n\n    user custom code\n\n    * `__exit__`\n\n    when slot finished, call this method\n\n    \"\"\"\n\n    def __init__(self, combd):\n        \"\"\"Don't override this method unless what you're doing.\n\n        \"\"\"\n\n        self.threads_num = combd.threads_num\n        self.sleep = combd.sleep\n        self.sleep_max = combd.sleep_max\n        self.debug = combd.debug\n        self.combd = combd\n\n        self.initialize()\n\n\n    def initialize(self):\n        \"\"\"Hook for subclass initialization.\n        \n        This block is execute before thread initial\n        \n        Example::\n\n            class UserSlot(Slot):\n                def initialize(self):\n                    self.threads_num = 10 \n\n                def slot(self, result):\n                    ...\n        \n        \"\"\"\n        pass\n\n    def __enter__(self):\n        \"\"\"You **MUST** return False when no data to do.\n\n        The return value will be used in `Slot.slot`\n        \"\"\"\n        print(\"You should override __enter__ method by subclass\")\n        return False\n\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"When slot done, will call this method.\n        \"\"\"\n        print(\"You should override __exit__ method by subclass\")\n        pass\n\n\n    def slot(self, msg):\n        \"\"\"\n        Add your custom code at here.\n\n        For example, look at:\n\n        * `comb.demo.list`\n\n        * `comb.demo.mongo`\n\n        * `comb.demo.redis`\n\n\n        \"\"\"\n\n        pass\n\n\n        # @staticmethod\n        # def options():\n        # \"\"\"\n        # replace this method if you want add user options\n        #     :return:\n        #     \"\"\"\n        #     return ()\n        #     pass\n",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 2.3800240211678032e-05,
      "p_css": 0.001539080503026276,
      "p_html": 0.028857096641875777,
      "p_java": 0.01658489522286035,
      "p_javascript": 0.0004184059015021349,
      "p_matlab": 2.1381577066475095e-06,
      "p_python": 0.0205939532580623,
      "p_sql": 0.03103866750323801,
      "p_typescript": 0.9009419625715168
    },
    {
      "text": "import random\n\nclass NimAgent():\n    # This stores the history of moves \n    # each game.\n    game_history = []\n\n    def __init__(self):\n        self.move_choice = None\n        self.game_won = False\n\n    def reset(self):\n        self.move_choice = None\n        self.game_ won = False\n\n    def get_move(self, board):\n        # starting condition, no history recorded\n        if len(self.game_history) == 0:\n            return random.randint(1,3)\n\n        # check if the game has been won in the last move\n        if sum(board) == 0:\n            self.game_won = True\n            return -1\n\n        # analyze the game history   \n        # look for patterns\n        optimalMove = self.analyze_game_history()\n        return optimalMove\n    \n    def analyze_game_history(self): \n        #TODO: implement the analysis of game history \n        # to play the optimal move\n        pass\n\n    def update_move_history(self, board):\n        # Add the current game board state to the history\n        self.game_history.append(tuple(board))",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.0001613437349672309,
      "p_css": 0.003299481956794594,
      "p_html": 0.010443713011669251,
      "p_java": 8.822794314896995e-07,
      "p_javascript": 0.00016244338103481675,
      "p_matlab": 5.891150972983728e-07,
      "p_python": 0.04257999596937498,
      "p_sql": 0.9348386248015046,
      "p_typescript": 0.00851292575012557
    },
    {
      "text": "import smtplib\n\nsender_email = \"sender@gmail.com\"\nreceiver_email = \"receiver@example.com\"\npassword = 'password'\n\nmessage = \"\"\"\\\nSubject: Hi There\n\nThis is an email to test the Gmail SMTP service.\n\"\"\"\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.ehlo()\nserver.starttls()\n\nserver.login(sender_email, password)\nserver.sendmail(sender_email, receiver_email, message)\n\nserver.quit()",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.8621572889974889e-06,
      "p_css": 0.006371583915752333,
      "p_html": 0.19880867215345618,
      "p_java": 0.6730042807247422,
      "p_javascript": 0.0023929013231846477,
      "p_matlab": 1.700962611869391e-05,
      "p_python": 0.09007698839200505,
      "p_sql": 0.0029713510266830643,
      "p_typescript": 0.026355350680768795
    },
    {
      "text": "d = {\"name\": \"John\", \"age\": 45, \"location\": \"San Francisco\"}\nfor key in d:\n d[key] = str(d[key]).upper()\n\nprint(d)\n# Output: {\"name\": \"JOHN\", \"age\": 45, \"location\": \"SAN FRANCISCO\"}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0011000708401276026,
      "p_css": 0.9793801324841085,
      "p_html": 0.009422879164979844,
      "p_java": 0.001237292593489496,
      "p_javascript": 3.449668059413133e-05,
      "p_matlab": 0.00011716596355878257,
      "p_python": 0.00855173337954237,
      "p_sql": 0.00011273269737511626,
      "p_typescript": 4.349619622407097e-05
    },
    {
      "text": "from selenium import webdriver\n\nurl = 'https://en.wikipedia.org/wiki/Python'\n\ndriver = webdriver.Chrome()\ndriver.get(url)\n\npage_content = driver.page_source\n \ndriver.close()\n\n# Process page_content",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.72008223305819e-07,
      "p_css": 0.000682932198661864,
      "p_html": 0.00010344058957230848,
      "p_java": 0.9948284141706838,
      "p_javascript": 4.451566902164921e-05,
      "p_matlab": 7.130655203067924e-07,
      "p_python": 0.004050191549687898,
      "p_sql": 0.00016322533728157395,
      "p_typescript": 0.00012589541134728075
    },
    {
      "text": "def sort_dicts_by_keys(dct1, dct2):\n    result = {}\n    keys = sorted(list(dct1.keys()) + list(dct2.keys()))\n    for key in keys:\n        if key in dct1:\n            result[key] = dct1[key]\n        else:\n            result[key] = dct2[key]\n        \n    return result",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 7.87334698783261e-05,
      "p_css": 0.9034043144530202,
      "p_html": 0.0004413167709408654,
      "p_java": 6.3711485926166205e-06,
      "p_javascript": 0.00025713607273208656,
      "p_matlab": 0.00030321817603940794,
      "p_python": 0.0913135051306573,
      "p_sql": 0.004032713866455402,
      "p_typescript": 0.00016269091168387662
    },
    {
      "text": "def is_prime(num):\n     \n    # Return False if num is less than 2\n    if num < 2:\n        return False\n     \n    # Check if any number from 2 to (num - 1) divides num\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n             \n    else:\n        return True\n\nnums = []\nnum = 2\n\nwhile len(nums) < 100:\n    if is_prime(num):\n        nums.append(num)\n    num = num + 1\n\nprint(nums)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.310726398612636e-12,
      "p_css": 1.3680372024481706e-16,
      "p_html": 6.771180516322628e-11,
      "p_java": 1.2418203769242241e-12,
      "p_javascript": 3.0249308546869675e-12,
      "p_matlab": 0.9999992214317819,
      "p_python": 7.783924224659451e-07,
      "p_sql": 2.1762616772630548e-11,
      "p_typescript": 7.374355655343985e-11
    },
    {
      "text": "def sort_alphabetically(my_list):\n    return sorted(my_list)\n\nprint(sort_alphabetically(my_list)) # ['C++', 'Java', 'JavaScript', 'Python']",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.08452719573172046,
      "p_css": 4.5764692109364085e-06,
      "p_html": 0.008727676830378426,
      "p_java": 2.0387960094061643e-05,
      "p_javascript": 0.07677972356641612,
      "p_matlab": 0.6013209377950942,
      "p_python": 0.21666186486930641,
      "p_sql": 0.0008921924818268107,
      "p_typescript": 0.01106544429595245
    },
    {
      "text": "def classify_email(email_list):\n    spam_count = 0\n    ham_count = 0\n    uncertain_count = 0\n    for email in email_list:\n        if 'offer' in email or 'discount' in email:\n            spam_count += 1\n        elif 'welcome' in email or 'company' in email:\n            ham_count += 1\n        else:\n            uncertain_count += 1\n    return {'spam': spam_count, 'ham': ham_count, 'uncertain': uncertain_count}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.008910858808250795,
      "p_css": 0.06797519142348471,
      "p_html": 0.02416868913859422,
      "p_java": 0.00020568347459813075,
      "p_javascript": 0.008194579635351713,
      "p_matlab": 0.251073650892327,
      "p_python": 0.6196103622938454,
      "p_sql": 0.002385285336615308,
      "p_typescript": 0.017475698996932625
    },
    {
      "text": "The Fast Fourier Transform (FFT) is an efficient algorithm used to compute the discrete Fourier transform (DFT). The algorithm works by decomposing a signal into its real and imaginary components and then applying a simple vector algorithm to compute the imaginary and real components simultaneously. In Python, the FFT algorithm can be implemented by using Numpy's fft function. In order to compute the FFT, the signal must first be broken into overlapping blocks and the DFT of each block must be computed separately. The blocks are then stitched together to form the final FFT result. The algorithm has several advantages, such as its ability to reduce the number of computations necessary to compute the DFT, as well as its parallelizability, meaning it can be efficiently executed on multiple CPUs.",
      "y_true": "typescript",
      "pred_label": "typescript",
      "p_bash": 1.0925714205821691e-11,
      "p_css": 1.5819968706402434e-11,
      "p_html": 3.044167414197884e-11,
      "p_java": 2.8374193684906305e-13,
      "p_javascript": 7.0944246182372196e-06,
      "p_matlab": 3.1847226724250664e-12,
      "p_python": 7.223969054275623e-12,
      "p_sql": 4.331655606288635e-12,
      "p_typescript": 0.9999929055031703
    },
    {
      "text": "list = [3, 1, 6, 9, 10, 5]\nlist.sort()\nprint(list)  # prints [1, 3, 5, 6, 9, 10]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01197764181913828,
      "p_css": 0.006005842730024875,
      "p_html": 0.002633394068221515,
      "p_java": 1.4029436699509589e-06,
      "p_javascript": 0.0008865266502808503,
      "p_matlab": 0.013314228413294793,
      "p_python": 0.9623700506156452,
      "p_sql": 0.002290625136800194,
      "p_typescript": 0.0005202876229243127
    },
    {
      "text": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.3746697726880748,
      "p_css": 0.0016429671357779852,
      "p_html": 0.01199994252657971,
      "p_java": 0.00012231075960842373,
      "p_javascript": 1.5241946266443746e-07,
      "p_matlab": 5.3633356338209705e-06,
      "p_python": 0.6114554218127006,
      "p_sql": 4.952679952358075e-05,
      "p_typescript": 5.4542522638269075e-05
    },
    {
      "text": "def remove_duplicates(list):\n    new_list = []\n    for e in list:\n        if e not in new_list:\n            new_list.append(e)\n    return new_list\n\nlist = [1, 2, 3, 1, 3, 4]\nlist = remove_duplicates(list)\nprint(list)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.757785902372595e-05,
      "p_css": 0.0002633007200621029,
      "p_html": 0.0004571195614856488,
      "p_java": 1.1523600045331127e-05,
      "p_javascript": 9.51360114311236e-05,
      "p_matlab": 0.9851699886035498,
      "p_python": 0.010482717568849952,
      "p_sql": 0.0032430809424532185,
      "p_typescript": 0.00019955513309903076
    },
    {
      "text": "def frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    \n    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])\n    return most_common_word, frequency",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007762872670028336,
      "p_css": 0.024456421211336406,
      "p_html": 0.012799800599196205,
      "p_java": 4.145042275377647e-05,
      "p_javascript": 0.0008703199576556005,
      "p_matlab": 0.002841366614675314,
      "p_python": 0.9290016600496613,
      "p_sql": 0.021960024698620014,
      "p_typescript": 0.0002660837760731758
    },
    {
      "text": "# importing matplotlib module\nimport matplotlib.pyplot as plt\n\n# list of numbers \nnumbers = [2, 5, 2, 8, 3, 9, 4, 10]\n\n# draw histogram \nplt.hist(numbers, bins = [0, 2, 4, 6, 8, 10])\n\n# x label, y label and title\nplt.xlabel('Numbers');\nplt.ylabel('Frequency');\nplt.title('Histogram for Numbers')\n\n# display histogram \nplt.show()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00031661538049991783,
      "p_css": 0.005135875038882738,
      "p_html": 0.5981384985681657,
      "p_java": 0.07686877382395808,
      "p_javascript": 0.014548808147633862,
      "p_matlab": 3.071051723935005e-06,
      "p_python": 0.28984333570519005,
      "p_sql": 0.002219051181156843,
      "p_typescript": 0.012925971102788845
    },
    {
      "text": "def print_fibonacci_seq(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a + b\n\nif __name__ == '__main__':\n    n = 100\n    print_fibonacci_seq(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015067426382415745,
      "p_css": 0.003868637605738176,
      "p_html": 0.0007600840272229429,
      "p_java": 3.1858085471648096e-05,
      "p_javascript": 0.00017305645553380953,
      "p_matlab": 0.0007415902667543727,
      "p_python": 0.9921741539456076,
      "p_sql": 0.0018382464575763752,
      "p_typescript": 0.000261698892270719
    },
    {
      "text": "def add(num1, num2):\n    return num1 + num2\n\nprint(add(1, 2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.997252839759963e-05,
      "p_css": 0.00012433422305748706,
      "p_html": 0.0001321601264124096,
      "p_java": 0.008444822902945298,
      "p_javascript": 3.159959527479571e-05,
      "p_matlab": 3.4822767174390343e-09,
      "p_python": 0.9909221848332281,
      "p_sql": 0.00028581011943727653,
      "p_typescript": 1.9112188970290858e-05
    },
    {
      "text": "num = 1\nwhile num <= n:\n    if num % 2 == 0:\n        print(num)\n    num += 1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.439688295551294e-12,
      "p_css": 1.021268565125607e-17,
      "p_html": 1.1130260295092161e-11,
      "p_java": 9.113333000347583e-13,
      "p_javascript": 9.41637988462767e-13,
      "p_matlab": 0.9999999979645489,
      "p_python": 2.0118220373099038e-09,
      "p_sql": 1.553034453205252e-12,
      "p_typescript": 5.653093973480854e-12
    },
    {
      "text": "import random\n\ndef display_random_items(lst, num):\n random.shuffle(lst)\n return lst[:num]\n\nlst = [\"dog\", \"cat\", \"bird\", \"fish\"]\nnum = 3\n\nrandom_items = display_random_items(lst, num)\nprint(random_items)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.888655371594257e-05,
      "p_css": 4.568314692044245e-06,
      "p_html": 0.0002047091019628537,
      "p_java": 6.509132443081001e-06,
      "p_javascript": 2.568897098631123e-05,
      "p_matlab": 0.02626064299023516,
      "p_python": 0.9725678374882996,
      "p_sql": 0.0007783596014235919,
      "p_typescript": 6.279784624124012e-05
    },
    {
      "text": "def check_if_list_is_in_alphabetical_order(words_list):\n    for i in range(len(words_list)-1):\n        if words_list[i] > words_list[i+1]:\n            return False\n    return True\n \nwords_list = ['cat', 'dog', 'hippo', 'horse']\nresult = check_if_list_is_in_alphabetical_order(words_list)\nprint (result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015800532438461193,
      "p_css": 0.001228504621981667,
      "p_html": 0.0006940639080310517,
      "p_java": 1.9220139173533736e-05,
      "p_javascript": 4.023568743097885e-05,
      "p_matlab": 0.0010183015408426032,
      "p_python": 0.9964036419917531,
      "p_sql": 0.0002789881052275627,
      "p_typescript": 0.00015903868117465189
    },
    {
      "text": "def reverse_sort(arr): \n    return sorted(arr, reverse=True) \n  \n# driver code \narr = [\"tomato\", \"apple\", \"mango\"] \nsorted_arr = reverse_sort(arr) \n  \nprint(sorted_arr)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003899709638881842,
      "p_css": 0.002881269936851764,
      "p_html": 0.00035204918520148013,
      "p_java": 0.0002551308340627659,
      "p_javascript": 0.00012945607046484063,
      "p_matlab": 0.005725892385420866,
      "p_python": 0.9885771488581458,
      "p_sql": 2.0564018628674383e-05,
      "p_typescript": 0.0016685177473355216
    },
    {
      "text": "unsorted_list = [7, 2, 5, 1, 3]\ndef bubblesort(unsorted_list):\n    length = len(unsorted_list)\n    for i in range(length):\n        for j in range(length - i - 1):\n            if unsorted_list[j] > unsorted_list[j + 1]:\n                unsorted_list[j], unsorted_list[j + 1] = unsorted_list[j + 1], unsorted_list[j]\n    return unsorted_list\nprint(bubblesort(unsorted_list))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002368087386944697,
      "p_css": 0.0013581306561967598,
      "p_html": 0.0024736113142761894,
      "p_java": 0.00034283545650284116,
      "p_javascript": 0.0069162726870088875,
      "p_matlab": 0.07517489710196504,
      "p_python": 0.9065940646886025,
      "p_sql": 0.0027689980213300492,
      "p_typescript": 0.0020031026871731054
    },
    {
      "text": "def fahrenheit_to_celsius(f):\n    celsius = (f - 32.0) * (5.0/9.0)\n    return celsius\n\nfahrenheit = 98.6\ncelsius = fahrenheit_to_celsius(fahrenheit)\nprint(\"The temperature in celsius is: \", celsius)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.013886505154712273,
      "p_css": 0.0406444084884989,
      "p_html": 0.01557327864461381,
      "p_java": 0.001214349099870514,
      "p_javascript": 0.013862630549444832,
      "p_matlab": 0.00639722784851987,
      "p_python": 0.8774108339206699,
      "p_sql": 0.004395549041175506,
      "p_typescript": 0.02661521725249428
    },
    {
      "text": "[x**2 for x in [1, 2, 3, 4, 5, 6] if x % 2 != 0]",
      "y_true": "matlab",
      "pred_label": "matlab",
      "p_bash": 6.077689812575443e-12,
      "p_css": 4.000485558888258e-12,
      "p_html": 3.667997086347792e-11,
      "p_java": 1.4963649338097925e-13,
      "p_javascript": 1.9505100251949266e-12,
      "p_matlab": 0.9999999998423279,
      "p_python": 7.76740659378566e-11,
      "p_sql": 2.1600379577386735e-11,
      "p_typescript": 9.539474286139092e-12
    },
    {
      "text": "def total_cost(items):\n    total_cost = 0\n    for item in items:\n        quantity = item[1]\n        unit_price = item[2]\n        total_cost += quantity * unit_price\n    return total_cost",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016931862816154668,
      "p_css": 0.09270792755711289,
      "p_html": 0.03763907657124658,
      "p_java": 0.00028613822441474337,
      "p_javascript": 0.07096251298334873,
      "p_matlab": 0.0012886441710143152,
      "p_python": 0.7942842163448981,
      "p_sql": 0.0008208825169025729,
      "p_typescript": 0.00031741534944683544
    },
    {
      "text": "def classify_error(message):\n    if 'Connection timed out' in message:\n        return 'Network'\n    else:\n        return 'Other'",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.558273762883703e-05,
      "p_css": 0.034540910043565465,
      "p_html": 0.004726883260978243,
      "p_java": 0.3427446078518385,
      "p_javascript": 0.0023124581958282086,
      "p_matlab": 0.002338058890050152,
      "p_python": 0.6088940538995602,
      "p_sql": 0.0030567484114352255,
      "p_typescript": 0.0012906967091150731
    },
    {
      "text": "def replace_char(string, character, replacement):\n   return string.replace(character, replacement)\n\nstring = \"Hello World\"\ncharacter = \"l\"\nreplacement = \"X\"\nprint(replace_char(string, character, replacement))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.0146377900411335e-05,
      "p_css": 0.008974008496232182,
      "p_html": 0.0023637586062115272,
      "p_java": 0.05970996555797972,
      "p_javascript": 4.578418112660108e-07,
      "p_matlab": 1.6120398202519154e-05,
      "p_python": 0.9132850219794195,
      "p_sql": 0.015227447418164106,
      "p_typescript": 0.00040307332407846116
    },
    {
      "text": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = np.genfromtxt('apple_stock.csv', delimiter=',')\nX = data[:, :-1] # features \ny = data[:, -1] # target\n\n# Create the regression model \nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions \npredictions = model.predict(X)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.6097860398005005,
      "p_css": 0.028299748602324218,
      "p_html": 0.0055720615391073825,
      "p_java": 3.5272514926350853e-06,
      "p_javascript": 2.5710843929123808e-05,
      "p_matlab": 8.944712409877248e-06,
      "p_python": 0.2979835550532678,
      "p_sql": 1.612717698451294e-07,
      "p_typescript": 0.058320250925198665
    },
    {
      "text": "# Generate a flag made up of *\nflagString = \"\"\n\nfor i in range(flagSize):\n    flagString += \"*\"\n\nprint(flagString)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.496638023022739e-05,
      "p_css": 1.2632972793814674e-06,
      "p_html": 0.00013469229886254035,
      "p_java": 7.5964869300388e-07,
      "p_javascript": 1.5211295844412086e-05,
      "p_matlab": 0.9864265164104921,
      "p_python": 0.013318876931521562,
      "p_sql": 1.2471416073141726e-05,
      "p_typescript": 2.52423210038215e-05
    },
    {
      "text": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Input Page</title>\n</head>\n<body>\n    <h1>Input Page</h1>\n    <form action=\"script.py\" method=\"POST\">\n      <label>Enter your input: <input type=\"text\" name=\"user_input\" size=\"50\"></label>\n      <input type=\"submit\" text=\"Submit\">\n    </form>\n</body>\n</html>",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 3.772785508632779e-20,
      "p_css": 4.0819640920399067e-19,
      "p_html": 1.0,
      "p_java": 3.2154052323537256e-20,
      "p_javascript": 2.9342562080178443e-20,
      "p_matlab": 1.834461194785887e-23,
      "p_python": 1.0390820271548677e-22,
      "p_sql": 6.79725154396804e-22,
      "p_typescript": 9.101209252090585e-23
    },
    {
      "text": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.5411739931452605e-05,
      "p_css": 1.4097308328811429e-05,
      "p_html": 0.0003831284804970119,
      "p_java": 0.9504416763551652,
      "p_javascript": 2.9038236456157253e-11,
      "p_matlab": 2.5457999969907065e-08,
      "p_python": 0.048991268479258256,
      "p_sql": 0.00015245658548646604,
      "p_typescript": 1.9355642945026167e-06
    },
    {
      "text": "def is_digit(x):\n  return x.isdigit()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.907360880303802e-05,
      "p_css": 0.00023670836695159606,
      "p_html": 0.00024420938444055123,
      "p_java": 1.3506715735368721e-05,
      "p_javascript": 4.645279323651542e-05,
      "p_matlab": 1.2543554699596302e-06,
      "p_python": 0.999148057615046,
      "p_sql": 0.0001982069042543101,
      "p_typescript": 5.2530256062769655e-05
    },
    {
      "text": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef equation(x):\n    return x**5 + 5*x**4 - 10*x**3 - 40*x**2 + 81*x \n\nresults = minimize(equation, [0])\nminx = results.x\nminy = results.fun\n\nprint('The minimum value of f(x) is {:.2f} when x={:.2f}.'.format(miny, minx))",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 2.627144765023836e-05,
      "p_css": 0.8827725453162528,
      "p_html": 0.0021193859680875378,
      "p_java": 0.03264605048595551,
      "p_javascript": 0.06271163242268928,
      "p_matlab": 0.0006087462236025581,
      "p_python": 0.01478372447755387,
      "p_sql": 0.00015381753586371554,
      "p_typescript": 0.00417782612234444
    },
    {
      "text": "def fibonacci(n): \n   if n<= 0: \n      print(\"Incorrect input\") \n   elif n==1: \n       return 0\n   elif n==2: \n       return 1\n   else: \n       return(fibonacci(n-1) + fibonacci(n-2)) \n\n# Function calls\nfibonacci(15)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001675108845221025,
      "p_css": 0.0003617949985970235,
      "p_html": 0.00011410034991372268,
      "p_java": 6.189625557184466e-06,
      "p_javascript": 0.009668727756521285,
      "p_matlab": 1.6641184864524766e-05,
      "p_python": 0.9896018275796395,
      "p_sql": 5.4731000036099245e-05,
      "p_typescript": 8.476620348569664e-06
    },
    {
      "text": "employee = {\n 'name': 'John',\n 'age': 28\n}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00038034026918281054,
      "p_css": 0.9920709640242532,
      "p_html": 0.0006820479690218521,
      "p_java": 0.005394839583728923,
      "p_javascript": 1.0926837426290838e-06,
      "p_matlab": 0.0013032566697747158,
      "p_python": 6.218750192834805e-05,
      "p_sql": 7.4693526513404356e-06,
      "p_typescript": 9.780194571629222e-05
    },
    {
      "text": "import json\nimport requests\n\napi_url = \"https://www.googleapis.com/books/v1/volumes?q=\"\nquery = \"Alice in Wonderland\"\n\n# form the API call URL\nurl = api_url + query\n\n# issue API call\nresponse = requests.get(url)\n\n# parse the API response\nresponse_JSON = json.loads(response.text)\n\n# loop through API response and print the book titles\nfor item in response_JSON[\"items\"]:\n    print(item[\"volumeInfo\"][\"title\"])",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.513584364039703e-10,
      "p_css": 0.9958945340467624,
      "p_html": 0.0009261159577653123,
      "p_java": 0.000981295370953061,
      "p_javascript": 0.00010764983463233155,
      "p_matlab": 2.16116537112258e-06,
      "p_python": 0.0019640967640057855,
      "p_sql": 3.383473707082871e-05,
      "p_typescript": 9.031197208064785e-05
    },
    {
      "text": "def convert_str_list(x):\n    return x.split()\n\nprint(convert_str_list(\"This is a test\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005501804235446433,
      "p_css": 0.0006246826540227911,
      "p_html": 0.002785817368226641,
      "p_java": 0.0011047465813140425,
      "p_javascript": 4.801376037702986e-05,
      "p_matlab": 9.377758993798961e-06,
      "p_python": 0.9889743683435231,
      "p_sql": 0.004032237801241247,
      "p_typescript": 0.0018705753087566715
    },
    {
      "text": "def search_word(sentence, word):\n    words = sentence.split(\" \")\n\n    if word in words:\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008934976669096312,
      "p_css": 0.0004582881538249847,
      "p_html": 0.004184746280581107,
      "p_java": 2.8588279706654984e-07,
      "p_javascript": 8.000732972145614e-06,
      "p_matlab": 1.0389465963275978e-05,
      "p_python": 0.9868851343035224,
      "p_sql": 0.0075586026442892446,
      "p_typescript": 1.0548691402836873e-06
    },
    {
      "text": "# brute force search algorithm\ndef brute_force_search(arr, target):\n\tfor i in range(len(arr)):\n\t\tfor j in range(len(arr)):\n\t\t\tif arr[i] + arr[j] == target:\n\t\t\t\treturn arr[i], arr[j]\n\treturn None\n\n# test the algorithm\ntarget = 8\nlst = [1, 3, 4, 5, 6, 7]\nprint(brute_force_search(lst, target))\n\nOutput:\npair = (3, 5)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9063361229825495e-07,
      "p_css": 2.0593336674288034e-06,
      "p_html": 1.4868380523844963e-06,
      "p_java": 5.154672902825964e-07,
      "p_javascript": 1.0811190656025072e-07,
      "p_matlab": 0.29927238261412575,
      "p_python": 0.7007214442049474,
      "p_sql": 5.634408999677006e-07,
      "p_typescript": 1.24935549786642e-06
    },
    {
      "text": "import string\nimport random\n\ndef generate_random_string():\n chars = string.ascii_letters + string.digits\n random_string = ''.join(random.choice(chars) for _ in range(20))\n return random_string\n \nrandom_string = generate_random_string()\nprint(random_string) // \"xVUqrHZkXDjzXFVfBmO7\"",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 4.508861950823172e-09,
      "p_css": 1.2432014084553639e-06,
      "p_html": 2.410944342334093e-06,
      "p_java": 0.0010311984898617613,
      "p_javascript": 1.4205152979746894e-10,
      "p_matlab": 3.647273969179798e-07,
      "p_python": 0.00039742005109628844,
      "p_sql": 0.9985670905892188,
      "p_typescript": 2.673457619777663e-07
    },
    {
      "text": "import tkinter\n\ndef increase_count():\n global count\n count += 1\n counter_label.config(text=str(count))\n \n# Create the main window\nroot = tkinter.Tk()\nroot.geometry(\"300x200\")\n\n# Create a label to show the count\ncount = 0\ncounter_label = tkinter.Label(root, text=str(count))\ncounter_label.pack()\n\n# Create a button to increase the count\nincrease_button = tkinter.Button(root, text=\"Increase Count\", command=increase_count)\nincrease_button.pack()\n\n# Run the main loop\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.014610682435856838,
      "p_css": 0.016078034634563566,
      "p_html": 0.006686776870097408,
      "p_java": 2.599305537094653e-05,
      "p_javascript": 0.0057406687068406684,
      "p_matlab": 4.028965677178074e-05,
      "p_python": 0.5302165399319326,
      "p_sql": 0.09717379831651873,
      "p_typescript": 0.3294272163920474
    },
    {
      "text": "# package imports\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize, sent_tokenize \n\n# store the text document as a string\ntext = '''\nThis is a sample text document that will be used to find the keywords. \nIt has a few sentences that talk about different topics such as sports, \ntechnology, and entertainment.\n'''\n\n# tokenize sentences\nsentences = sent_tokenize(text) \n\n# store keyword set\nkeywords = set() \n\nfor i in sentences: \n\t\n\t# tokenize words\n\twords = word_tokenize(i) \n\t\n\t# remove stopwords\n\twords = [w for w in words if not w in stopwords.words('english')] \n\n\t# store keywords\n\tkeywords = keywords.union(set(words)) \n\nprint(keywords)\n\n# Output: \n{'different', 'sentences', 'sports', 'document', 'Technology', \n'entertainment', 'find', 'sample', 'text', 'topics'}",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 2.368459748921299e-06,
      "p_css": 6.200980829444457e-05,
      "p_html": 6.485042189405015e-05,
      "p_java": 2.782603176540018e-06,
      "p_javascript": 2.205953156072941e-05,
      "p_matlab": 2.6038282327338093e-05,
      "p_python": 0.0008078521273722429,
      "p_sql": 0.00047666840409024973,
      "p_typescript": 0.9985353703615356
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.wikipedia.org' \npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntitle = soup.find('title').text\nprint(title)\n# Output: Wikipedia",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.3671696320914801e-11,
      "p_css": 0.264375528694434,
      "p_html": 0.735151462869333,
      "p_java": 0.0004341989141746328,
      "p_javascript": 3.7407753770209014e-07,
      "p_matlab": 1.2293377800345678e-08,
      "p_python": 3.097198724141532e-05,
      "p_sql": 7.3299819946736316e-06,
      "p_typescript": 1.2116823506616288e-07
    },
    {
      "text": "class Circle :\n    def __init__(self, r):\n        self.radius = r\n    \n    def area(self):\n        return self.radius**2*3.14\n\n#Example\ncircle = Circle(2)\ncircle.area()\n# Output: 12.56",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003852411003143487,
      "p_css": 0.006617533247118761,
      "p_html": 0.04303158785694873,
      "p_java": 0.0003748427115983869,
      "p_javascript": 0.00015966201362017875,
      "p_matlab": 8.576272146265363e-06,
      "p_python": 0.9410262180950252,
      "p_sql": 0.008328845162658274,
      "p_typescript": 6.749354056985139e-05
    },
    {
      "text": "import math\n\ndef is_prime(n):\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.5640000220304727e-05,
      "p_css": 3.10128017279243e-06,
      "p_html": 2.9930145919764695e-05,
      "p_java": 9.668148616784375e-05,
      "p_javascript": 4.623140271859002e-07,
      "p_matlab": 6.80353814355871e-07,
      "p_python": 0.999851423367945,
      "p_sql": 1.0711619421818737e-06,
      "p_typescript": 1.0098897905988786e-06
    },
    {
      "text": "from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\n\nmodel.fit(X, y)\n\ndef predict_class(X):\n pred = model.predict([X])\n return pred",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.5877980860935922,
      "p_css": 0.004464880354876914,
      "p_html": 0.0015955315755382437,
      "p_java": 6.223912219897059e-05,
      "p_javascript": 0.00012021570444063336,
      "p_matlab": 6.0097741137973594e-05,
      "p_python": 0.4057911174939477,
      "p_sql": 1.451436071433583e-07,
      "p_typescript": 0.00010768677066020712
    },
    {
      "text": "def sum_numbers(n):\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n\nprint(sum_numbers(20))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.9334354817035942e-05,
      "p_css": 7.809073095372393e-05,
      "p_html": 0.00015007913753298238,
      "p_java": 2.861417464690461e-06,
      "p_javascript": 6.190322954146348e-06,
      "p_matlab": 0.0012880763420042636,
      "p_python": 0.9983917109142231,
      "p_sql": 2.433778431756196e-05,
      "p_typescript": 2.9318995732585902e-05
    },
    {
      "text": "import csv\n\n# Initialize empty list\ndata = []\n\n# Open csv file\nwith open('data.csv', 'r') as csv_file:\n  # Parse csv file\n  csv_reader = csv.reader(csv_file)\n  \n  # Iterate over rows \n  for row in csv_reader:\n    # Convert each row into a dictionary\n    row_dict = {\n      'name': row[0],\n      'age': row[1],\n      'location': row[2]\n    }\n    \n    # Append dictionary to data list\n    data.append(row_dict)\n\n# Display output\nprint(data)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0016698588512987782,
      "p_css": 0.8902876200510459,
      "p_html": 0.042426636720304195,
      "p_java": 0.00010578110096235482,
      "p_javascript": 0.00010990606637460675,
      "p_matlab": 0.0023165350546336563,
      "p_python": 0.03085483465398332,
      "p_sql": 0.018096744998275925,
      "p_typescript": 0.014132082503121304
    },
    {
      "text": "def sum_squares(x, y):\n    return x**2 + y**2\n\nx = 2\ny = 4\ns = sum_squares(x, y)\nprint(\"The sum of two squares is {}\".format(s))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.002354327849729197,
      "p_css": 0.0026120589026780994,
      "p_html": 0.0038950437753854914,
      "p_java": 0.7446011008050987,
      "p_javascript": 0.18125419320548156,
      "p_matlab": 1.9213408119418532e-07,
      "p_python": 0.05182116219549882,
      "p_sql": 0.0008312494363354255,
      "p_typescript": 0.012630671695711717
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras import layers\n\n#importing the dataset\ndf = pd.read_csv('spam.csv', encoding='latin-1')\ndf.head()\n\n#cleaning the data\nmsg = df.v2\ncorpus = msg.apply(lambda row: row.lower())\n\n#splitting dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(corpus, msg, test_size=0.2, random_state=0)\n\n#vectorizing the data\nvectorizer = CountVectorizer()\nX_train = vectorizer.fit_transform(X_train)\n\n#generating the model\nmodel = Sequential()\nmodel.add(layers.Dense(10, input_shape=(X_train.shape[1],), activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()\n\n#training the model\nhistory = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=128, verbose=2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.2289862268828806,
      "p_css": 0.03436834719967103,
      "p_html": 0.045601984115884925,
      "p_java": 2.2460830629050125e-05,
      "p_javascript": 1.4147296609390258e-05,
      "p_matlab": 1.6205328719820217e-06,
      "p_python": 0.6668043782364262,
      "p_sql": 4.426232492599624e-06,
      "p_typescript": 0.02419640867253418
    },
    {
      "text": "def merging_lists(list1, list2):\n    # Merge two sorted lists\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    # Add any leftover items from the original lists\n    merged_list.extend(list1[i:])\n    merged_list.extend(list2[j:])\n \n    return merged_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016627625054313013,
      "p_css": 0.012790671166890366,
      "p_html": 0.0057502797932680455,
      "p_java": 0.005961506072837205,
      "p_javascript": 0.001116392361074468,
      "p_matlab": 0.0004933793674923335,
      "p_python": 0.9598071059878613,
      "p_sql": 0.001495714987113998,
      "p_typescript": 0.010922187758031004
    },
    {
      "text": "# Create a function to compute the total cost of purchasing the items\ndef compute_cost(items):\n total = 0\n for item in items:\n total += item['price']\n return total\n\n# Create a function for computing the maximum cost of purchasing the items\ndef compute_maximum_cost(items, budget):\n max_cost = 0\n n = len(items)\n \n # Generate all possible combinations of items\n for i in range(1 << n):\n  current_cost = 0\n  for j in range(n):\n   if i & (1 << j):\n    current_cost += items[j]['price']\n \n  if current_cost <= budget and current_cost > max_cost:\n   max_cost = current_cost\n \n return max_cost\n\n # Create a function for determining the optimal set of items to purchase\n def compute_optimal_items(items, budget):\n  n = len(items)\n  max_cost = compute_maximum_cost(items, budget)\n  optimal_set = []\n  \n  # Generate all possible combinations of items\n  for i in range(1 << n):\n   current_cost = 0\n   for j in range(n):\n    if i & (1 << j):\n     current_cost += items[j]['price']\n \n   if current_cost == max_cost:\n    for j in range(n):\n     if i & (1 << j):\n      optimal_set.append(items[j]['name'])\n  return optimal_set",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 1.68378480143736e-05,
      "p_css": 0.0014030710641812045,
      "p_html": 0.000198852227214564,
      "p_java": 1.8139378725673808e-06,
      "p_javascript": 0.8709847523074425,
      "p_matlab": 0.07434946599622533,
      "p_python": 0.052886387072310526,
      "p_sql": 0.0001309263317143634,
      "p_typescript": 2.7893215024396155e-05
    },
    {
      "text": "val = [1, 10, 125, 400]\nres = []\n\nfor v in reversed(val):\n    res.append(v)\n    \nprint(res) # Output: [400, 125, 10,1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00435448054077815,
      "p_css": 0.12564172404131108,
      "p_html": 0.011258259427914181,
      "p_java": 0.0002642077701704953,
      "p_javascript": 0.0009342878665416104,
      "p_matlab": 0.07323349039800206,
      "p_python": 0.7828778811969481,
      "p_sql": 0.0008639069050097252,
      "p_typescript": 0.0005717618533245693
    },
    {
      "text": "import string \nimport random \n\ndef generate_password():\n  chars = string.ascii_uppercase + string.ascii_lowercase + string.digits \n  size = 8\n  return ''.join(random.choice(chars) for x in range(size,15)) \n    \npassword = generate_password()\n\nprint(\"The generated random 8-character alphanumeric password is: \" + password)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 5.18643558452958e-12,
      "p_css": 2.1463716868512517e-08,
      "p_html": 2.859550784951654e-08,
      "p_java": 0.00013878327909973897,
      "p_javascript": 3.34055965793098e-13,
      "p_matlab": 2.6235537451756445e-09,
      "p_python": 2.243866572561593e-06,
      "p_sql": 0.9998589146150844,
      "p_typescript": 5.5509441514748365e-09
    },
    {
      "text": "d = { \"A\": 4, \"B\": 6, \"C\": 10 }",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0001716862262808112,
      "p_css": 0.013801343011421129,
      "p_html": 0.0025951614739621325,
      "p_java": 5.723377054654816e-05,
      "p_javascript": 0.00017015774424723612,
      "p_matlab": 0.00552169408575227,
      "p_python": 0.9774920624040947,
      "p_sql": 2.2554188224354584e-07,
      "p_typescript": 0.00019043574181317765
    },
    {
      "text": "import numpy as np\n\ndef rmse(predictions, targets):  \n    differences = predictions - targets                      \n    differences_squared = differences ** 2                   \n    mean_of_differences_squared = np.mean(differences_squared)  \n    rmse_val = np.sqrt(mean_of_differences_squared)          \n    return rmse_val\n\ny = np.array([1, 2, 3, 4, 5])\npredicted = np.array([1.1, 2.2, 2.9, 4.1, 4.8])\nrmse = rmse(y, predicted)\nprint(rmse)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.16555552959726177,
      "p_css": 0.01701366299865693,
      "p_html": 0.0069876416693048825,
      "p_java": 0.00038658664215608716,
      "p_javascript": 0.000330247131235508,
      "p_matlab": 0.0023946458774442908,
      "p_python": 0.8028013585634255,
      "p_sql": 0.00021951462104527364,
      "p_typescript": 0.00431081289946969
    },
    {
      "text": "import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_absolute_error \n\n# Read in data \ndata = pd.read_csv('data.csv') \n\n# Split data into dependent and independent variables \nX = data.iloc[:, :-1].values \ny = data.iloc[:, -1].values \n\n# Split data into training and testing datasets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \n\n# Train the model \nregressor = LinearRegression() \nregressor.fit(X_train, y_train) \n\n# Make predictions on the test data\ny_pred = regressor.predict(X_test) \n\n# Calculate the mean absolute error \nmae = mean_absolute_error(y_test, y_pred) \n\n# Print results \nprint('Mean absolute error: %.2f' % mae)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0016173647362245417,
      "p_css": 0.5843440453893451,
      "p_html": 0.022999542235235416,
      "p_java": 3.732576409950812e-05,
      "p_javascript": 0.0002526432587889796,
      "p_matlab": 5.96331198738032e-05,
      "p_python": 0.3144026062017871,
      "p_sql": 0.011492398810035123,
      "p_typescript": 0.06479444048461036
    },
    {
      "text": "def length_of_string(string): \n    count = 0\n    for char in string: \n        count += 1\n    return count",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.2067505649378272e-09,
      "p_css": 0.00018495353552558868,
      "p_html": 7.678541982849498e-06,
      "p_java": 0.7600363362807261,
      "p_javascript": 1.089852394810863e-10,
      "p_matlab": 2.5710084269650416e-07,
      "p_python": 0.23951440025088985,
      "p_sql": 0.00025409134793026497,
      "p_typescript": 2.281626366914924e-06
    },
    {
      "text": "# ex:ts=4:sw=4:sts=4:et\n# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-\nfrom __future__ import absolute_import\nimport re\nimport os\nimport xml.etree.ElementTree as ET\nimport json\nimport copy\n\nfrom svtplay_dl.utils.urllib import urlparse, parse_qs, quote_plus\nfrom svtplay_dl.service import Service, OpenGraphThumbMixin\nfrom svtplay_dl.utils import is_py2_old, filenamify\nfrom svtplay_dl.log import log\nfrom svtplay_dl.fetcher.hls import hlsparse, HLS\nfrom svtplay_dl.fetcher.rtmp import RTMP\nfrom svtplay_dl.fetcher.hds import hdsparse\nfrom svtplay_dl.subtitle import subtitle\nfrom svtplay_dl.error import ServiceError\n\n\nclass Tv4play(Service, OpenGraphThumbMixin):\n    supported_domains = ['tv4play.se', 'tv4.se']\n\n    def __init__(self, url):\n        Service.__init__(self, url)\n        self.subtitle = None\n        self.cookies = {}\n\n    def get(self, options):\n        data = self.get_urldata()\n\n        vid = findvid(self.url, data)\n        if vid is None:\n            yield ServiceError(\"Can't find video id for %s\" % self.url)\n            return\n\n        if options.username and options.password:\n            data = self.http.request(\"get\", \"https://www.tv4play.se/session/new?https=\")\n            auth_token = re.search('name=\"authenticity_token\" ([a-z]+=\"[^\"]+\" )?value=\"([^\"]+)\"', data.text)\n            if not auth_token:\n                yield ServiceError(\"Can't find authenticity_token needed for user / password\")\n                return\n            url = \"https://www.tv4play.se/session\"\n            postdata = {\"user_name\" : options.username, \"password\": options.password, \"authenticity_token\":auth_token.group(2), \"https\": \"\"}\n            data = self.http.request(\"post\", url, data=postdata, cookies=self.cookies)\n            self.cookies = data.cookies\n            fail = re.search(\"<p class='failed-login'>([^<]+)</p>\", data.text)\n            if fail:\n                yield ServiceError(fail.group(1))\n                return\n        url = \"http://premium.tv4play.se/api/web/asset/%s/play\" % vid\n        data = self.http.request(\"get\", url, cookies=self.cookies)\n        if data.status_code == 401:\n            xml = ET.XML(data.content)\n            code = xml.find(\"code\").text\n            if code == \"SESSION_NOT_AUTHENTICATED\":\n                yield ServiceError(\"Can't access premium content\")\n            elif code == \"ASSET_PLAYBACK_INVALID_GEO_LOCATION\":\n                yield ServiceError(\"Can't downoad this video because of geoblocked.\")\n            else:\n                yield ServiceError(\"Can't find any info for that video\")\n            return\n        if data.status_code == 404:\n            yield ServiceError(\"Can't find the video api\")\n            return\n        xml = ET.XML(data.content)\n        ss = xml.find(\"items\")\n        if is_py2_old:\n            sa = list(ss.getiterator(\"item\"))\n        else:\n            sa = list(ss.iter(\"item\"))\n\n        if xml.find(\"live\").text:\n            if xml.find(\"live\").text != \"false\":\n                options.live = True\n        if xml.find(\"drmProtected\").text == \"true\":\n            yield ServiceError(\"We cant download DRM protected content from this site.\")\n            return\n\n        if options.output_auto:\n            directory = os.path.dirname(options.output)\n            options.service = \"tv4play\"\n            title = \"%s-%s-%s\" % (options.output, vid, options.service)\n            title = filenamify(title)\n            if len(directory):\n                options.output = os.path.join(directory, title)\n            else:\n                options.output = title\n\n        if self.exclude(options):\n            yield ServiceError(\"Excluding video\")\n            return\n\n        for i in sa:\n            if i.find(\"mediaFormat\").text == \"mp4\":\n                base = urlparse(i.find(\"base\").text)\n                parse = urlparse(i.find(\"url\").text)\n                if \"rtmp\" in base.scheme:\n                    swf = \"http://www.tv4play.se/flash/tv4playflashlets.swf\"\n                    options.other = \"-W %s -y %s\" % (swf, i.find(\"url\").text)\n                    yield RTMP(copy.copy(options), i.find(\"base\").text, i.find(\"bitrate\").text)\n                elif parse.path[len(parse.path)-3:len(parse.path)] == \"f4m\":\n                    streams = hdsparse(copy.copy(options), self.http.request(\"get\", i.find(\"url\").text, params={\"hdcore\": \"3.7.0\"}).text, i.find(\"url\").text)\n                    if streams:\n                        for n in list(streams.keys()):\n                            yield streams[n]\n            elif i.find(\"mediaFormat\").text == \"smi\":\n                yield subtitle(copy.copy(options), \"smi\", i.find(\"url\").text)\n\n        url = \"http://premium.tv4play.se/api/web/asset/%s/play?protocol=hls\" % vid\n        data = self.http.request(\"get\", url, cookies=self.cookies).content\n        xml = ET.XML(data)\n        ss = xml.find(\"items\")\n        if is_py2_old:\n            sa = list(ss.getiterator(\"item\"))\n        else:\n            sa = list(ss.iter(\"item\"))\n        for i in sa:\n            if i.find(\"mediaFormat\").text == \"mp4\":\n                parse = urlparse(i.find(\"url\").text)\n                if parse.path.endswith(\"m3u8\"):\n                    streams = hlsparse(i.find(\"url\").text, self.http.request(\"get\", i.find(\"url\").text).text)\n                    for n in list(streams.keys()):\n                        yield HLS(copy.copy(options), streams[n], n)\n\n    def find_all_episodes(self, options):\n        parse = urlparse(self.url)\n        show = parse.path[parse.path.find(\"/\", 1)+1:]\n        if not re.search(\"%\", show):\n            show = quote_plus(show)\n        data = self.http.request(\"get\", \"http://webapi.tv4play.se/play/video_assets?type=episode&is_live=false&platform=web&node_nids=%s&per_page=99999\" % show).text\n        jsondata = json.loads(data)\n        episodes = []\n        n = 1\n        for i in jsondata[\"results\"]:\n            try:\n                days = int(i[\"availability\"][\"availability_group_free\"])\n            except (ValueError, TypeError):\n                days = 999\n            if days > 0:\n                video_id = i[\"id\"]\n                url = \"http://www.tv4play.se/program/%s?video_id=%s\" % (\n                    show, video_id)\n                episodes.append(url)\n                if n == options.all_last:\n                    break\n                n += 1\n\n        return episodes\n\n\ndef findvid(url, data):\n    parse = urlparse(url)\n    if \"tv4play.se\" in url:\n        try:\n            vid = parse_qs(parse.query)[\"video_id\"][0]\n        except KeyError:\n            return None\n    else:\n        match = re.search(r\"\\\"vid\\\":\\\"(\\d+)\\\",\", data)\n        if match:\n            vid = match.group(1)\n        else:\n            match = re.search(r\"-(\\d+)$\", url)\n            if match:\n                vid = match.group(1)\n            else:\n                match = re.search(r\"meta content='([^']+)' property='og:video'\", data)\n                if match:\n                    match = re.search(r\"vid=(\\d+)&\", match.group(1))\n                    if match:\n                        vid = match.group(1)\n                    else:\n                        log.error(\"Can't find video id for %s\", url)\n                        return\n                else:\n                    return None\n    return vid",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 7.835874624928994e-10,
      "p_css": 0.5786449277106145,
      "p_html": 0.4035936970429193,
      "p_java": 0.0018089716162814362,
      "p_javascript": 1.4941057475094926e-05,
      "p_matlab": 4.2913400712389317e-05,
      "p_python": 0.0006503646828408495,
      "p_sql": 0.015023688044870049,
      "p_typescript": 0.0002204956606989732
    },
    {
      "text": "def sort_by_frequency(list_a):\n    frequency = {}\n    for a in list_a:\n        if a not in frequency:\n            frequency[a] = 1\n        else:\n            frequency[a] += 1\n    list_sorted = []\n    for key, value in sorted(frequency.items(), key=lambda item: item[1], reverse=True):\n        for _ in range(value):\n            list_sorted.append(key)\n    return list_sorted",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.5236151434835333e-06,
      "p_css": 0.0012741136464465325,
      "p_html": 4.070721336856782e-05,
      "p_java": 9.654066952174736e-08,
      "p_javascript": 5.2480438706069055e-06,
      "p_matlab": 0.998653146703619,
      "p_python": 1.8054028872643158e-05,
      "p_sql": 5.021395436695463e-06,
      "p_typescript": 1.0888125728393905e-06
    },
    {
      "text": "import numpy as np\nimport tensorflow as tf\nfrom tensorflow.contrib.factorization.python.ops import lda\n\ndef create_lda_network(num_topics, num_documents, num_words):\n    \"\"\" \n    Function to design a neural network using LDA.\n\n    Args:\n        num_topics (int): Desired number of topics\n        num_documents (int): Desired number of documents\n        num_words (int): Desired number of words\n\n    Returns:\n        A tensorflow graph node representing the trained LDA network.\n    \"\"\"\n    # Define Dirichlet priors to use for the LDA\n    prior = 0.1 * np.ones([num_topics], dtype=np.float32)\n\n    # Initialize the LDA with the given input parameters\n    lda_model = lda.LDA(num_topics, \n                        num_documents,\n                        num_words, \n                        prior=prior,\n                        name='lda_model'\n                        )\n\n    # Create a placeholder for the documents\n    x = tf.placeholder(alice_documents)\n\n    # Create and train the LDA network with the given placeholder\n    lda_topics = lda_model(x)\n\n    return lda_topics",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0002906363817884844,
      "p_css": 5.599672237829364e-05,
      "p_html": 5.081862457494511e-06,
      "p_java": 9.659955832863039e-05,
      "p_javascript": 2.877510237256773e-06,
      "p_matlab": 1.6897048740459677e-10,
      "p_python": 0.00021907579190853018,
      "p_sql": 1.386183153610965e-06,
      "p_typescript": 0.9993283458207772
    },
    {
      "text": "class Account:\n    def __init__(self, name, balance):\n        # instance attributes\n        self.name = name\n        self.balance = balance\n    \n    # method to withdraw money from account\n    def withdraw(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # check if amount is greater than balance\n        if amount > self.balance:\n            raise ValueError('Insufficient funds')\n        \n        # subtract the amount from the balance\n        self.balance -= amount\n    \n    # method to deposit money to account\n    def deposit(self, amount):\n        # check if amount is a valid number\n        if not isinstance(amount, (int, float)):\n            raise ValueError('Invalid amount')\n        \n        # add the amount to the balance\n        self.balance +=amount\n\n# create an instance of the Account class\nmy_account = Account('John Doe', 100)\n\n# withdraw money from account\nmy_account.withdraw(50)\n\n# deposit money to account\nmy_account.deposit(20)\n\n# print the updated balance\nprint('Account balance:', my_account.balance)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.4934385101837105,
      "p_css": 0.0881132152163393,
      "p_html": 0.004836387349949519,
      "p_java": 0.10668465883138888,
      "p_javascript": 0.016962010142084556,
      "p_matlab": 8.21599311897893e-05,
      "p_python": 0.21282051003199606,
      "p_sql": 0.017946543112297132,
      "p_typescript": 0.05911600520104428
    },
    {
      "text": "class Patient:\n    def __init__(self,name, age, medical_history):\n        self.name = name\n        self.age = age\n        self.medical_history = medical_history\n        \n    def get_name(self):\n        return self.name\n        \n    def get_age(self):\n        return self.age\n    \n    def get_history(self):\n        return self.medical_history",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.053776361041935e-06,
      "p_css": 0.0018600698306562224,
      "p_html": 0.011209923133204245,
      "p_java": 0.0006615343531673689,
      "p_javascript": 3.433132005834105e-09,
      "p_matlab": 2.610066972566395e-08,
      "p_python": 0.9767640832231563,
      "p_sql": 0.009494349075320145,
      "p_typescript": 3.95707433296744e-06
    },
    {
      "text": "def getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.6095677398268403e-06,
      "p_css": 0.0001411461433598028,
      "p_html": 8.346389934558983e-06,
      "p_java": 2.799699408373737e-07,
      "p_javascript": 6.619361514830398e-07,
      "p_matlab": 2.5120402328078696e-06,
      "p_python": 0.9998366558804808,
      "p_sql": 7.370300153851077e-06,
      "p_typescript": 1.4177720060777113e-06
    },
    {
      "text": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \nbubble_sort(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.1025285868709665e-08,
      "p_css": 4.007740272894458e-08,
      "p_html": 4.515593101483276e-08,
      "p_java": 1.0875713942043915e-08,
      "p_javascript": 1.1910034782947283e-08,
      "p_matlab": 0.9917734194186094,
      "p_python": 0.008226374311741272,
      "p_sql": 2.9468288239477757e-09,
      "p_typescript": 5.427845215583208e-08
    },
    {
      "text": "def sum_list(nums):\n total = 0\n for num in nums:\n total += num\n return total\n\ndef sum_list_optimized(nums):\n total = 0\n length = len(nums)\n while length > 0:\n total += nums[length - 1]\n length -= 1\n return total\n\nnums = [1, 2, 3, 4, 5]\nprint(sum_list_optimized(nums))  # Output: 15",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.2321246754050314e-05,
      "p_css": 6.180173710735468e-06,
      "p_html": 2.3462369433655163e-05,
      "p_java": 1.5473447044095001e-06,
      "p_javascript": 0.00015526227319340725,
      "p_matlab": 0.00010347652662919182,
      "p_python": 0.9996352497486758,
      "p_sql": 4.859198640629994e-05,
      "p_typescript": 3.9083304925388455e-06
    },
    {
      "text": "import random\n\nclass CardGame:\n\n    deck = None\n    scores = None\n\n    def __init__(self):\n        self.deck = self.generateDeck()\n        self.scores = {'player1': 0, 'player2': 0}     \n\n    def generateDeck(self):\n        suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']\n        ranks = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']\n        deck = []\n        for suit in suits:\n            for rank in ranks:\n                deck.append([suit, rank])\n        random.shuffle(deck)\n        return deck\n\n    # Returns total points of a player's cards\n    def getScore(self, player):\n        score = 0\n        for card in self.deck:\n            if card[1] in ['J', 'Q', 'K']:\n                score += 10\n            elif card[1] == 'A':\n                score += 11\n            else:\n                score += int(card[1])\n        self.scores[player] = score\n        return score\n\n    # Check if a player won or there is a tie\n    def isWinner(self, player1, player2):\n        score1 = self.getScore(player1)\n        score2 = self.getScore(player2)\n\n        if score1 > score2:\n            print(f'{player1} Wins')\n        elif score2 > score1:\n            print(f'{player2} Wins')\n        else:\n            print('It is a tie')",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.00034454127248467937,
      "p_css": 0.08033843870686348,
      "p_html": 0.03233385534215798,
      "p_java": 0.0001422608431129475,
      "p_javascript": 0.00040077632364157766,
      "p_matlab": 0.0009421048256373789,
      "p_python": 0.7846987379060386,
      "p_sql": 0.0987399995430963,
      "p_typescript": 0.002059285236966995
    },
    {
      "text": "def sum_odd_numbers(n):\n    result = 0\n    for i in range(n):\n        if i % 2 != 0:\n            result += i\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9322594069952307e-07,
      "p_css": 4.299237845200632e-06,
      "p_html": 1.5164803923376579e-06,
      "p_java": 1.936884861908526e-08,
      "p_javascript": 9.083272559946629e-08,
      "p_matlab": 0.001253041189011574,
      "p_python": 0.9987349243991286,
      "p_sql": 5.476098539281527e-06,
      "p_typescript": 4.391675681073062e-07
    },
    {
      "text": "\"\"\"\nWrite an algorithm to implement a trie data structure in Python\n\"\"\"\n\nclass TrieNode(object):\n    \"\"\"Trie node class\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for trie node\"\"\"\n        self.children = {}\n        self.end_of_word = False\n\nclass Trie(object):\n    \"\"\"Trie class\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for Trie\"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word):\n        \"\"\"Inserts the given word into the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n\n        node.end_of_word = True\n\n    def search(self, word):\n        \"\"\"Searches if the given word is present in the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.end_of_word\n\n# Test code\ntrie = Trie() \nwords = [\"apple\", \"application\", \"hi\"]\n\n# Insert words into the trie\nfor word in words:\n    trie.insert(word)\n\n# Test search\nif trie.search(\"apple\"):\n    print(\"Word Found\")\nelse:\n    print(\"Word Not Found\")",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0009801972538516339,
      "p_css": 0.0025079691878754345,
      "p_html": 0.014148369970562128,
      "p_java": 9.996316900590817e-06,
      "p_javascript": 5.153008204307772e-05,
      "p_matlab": 6.532568430843373e-05,
      "p_python": 0.6938865486801787,
      "p_sql": 0.18534771197083388,
      "p_typescript": 0.10300235085344601
    },
    {
      "text": "from flask import Flask, jsonify, request\nfrom flask_restplus import Api, Resource, fields\n\n# Create and configure the Flask app\napp = Flask(__name__)\napi = Api(app)\n\n# Define the endpoints\n@api.route('/employees', methods=['GET'])\ndef get_employees():\n    # Return a list of all employees\n    ...\n\n# Run the Flask app\napp.run(host='localhost', port=5000)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.2514911099241772,
      "p_css": 0.6957851389984195,
      "p_html": 0.007585787787809625,
      "p_java": 2.0837760372351754e-06,
      "p_javascript": 0.0002840601491521096,
      "p_matlab": 4.3168766751122566e-05,
      "p_python": 0.015198451322901442,
      "p_sql": 0.019320495810419353,
      "p_typescript": 0.010289703464332348
    },
    {
      "text": "import string\nimport random\n\ndef generate_random_string():\n    \"\"\"\n    Generate a random string of 8 characters\n    \"\"\"\n    \n    # Character sets\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    # Length of random string\n    length = 8\n    \n    # Generate random string\n    random_string = ''.join(random.sample(chars, length))\n\n    return random_string\n\nprint(generate_random_string())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 9.836272892683362e-13,
      "p_css": 9.059325118837173e-08,
      "p_html": 2.046775494715842e-08,
      "p_java": 0.4012909196799918,
      "p_javascript": 3.101058496506111e-13,
      "p_matlab": 1.6359790807256165e-11,
      "p_python": 6.090479852600294e-05,
      "p_sql": 0.5986480542653008,
      "p_typescript": 1.017752170541134e-08
    },
    {
      "text": "sentence = \"John and Mary went to the school\"\nwords = sentence.split()\nword_dict = {}\n\nfor word in words:\n    if word in word_dict:\n        word_dict[word] += 1\n    else:\n        word_dict[word] = 1\n\nprint(word_dict)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.036591901189691765,
      "p_css": 0.04445453619505411,
      "p_html": 0.36133022464532966,
      "p_java": 2.9069903585106757e-05,
      "p_javascript": 0.002730111742897235,
      "p_matlab": 0.012684558138961079,
      "p_python": 0.5150481701389884,
      "p_sql": 0.012247471261143696,
      "p_typescript": 0.014883956784348855
    },
    {
      "text": "# Import libraries \nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n \n# Load Data\ndf = pd.read_csv('flower_data.csv')\n \n# Data Preprocessing\nX = df[['petal_length', 'petal_width', 'sepal_length', 'sepal_width']]\ny = df['flower_type']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n# Build & Train the Model\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n \n# Model Testing & Evaluation\nscore = model.score(X_test, y_test)\nprint('Model Accuracy: ', score)\n \n# Predict for given data\ninput_data = [[4.2, 2.2, 6, 3.2]]\nprediction = model.predict(input_data)\nprint('Flower type: ', prediction[0])",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9617624849819019,
      "p_css": 0.009681400100067263,
      "p_html": 0.0004280953321444462,
      "p_java": 5.429720565082037e-07,
      "p_javascript": 1.2913666546862991e-06,
      "p_matlab": 1.305553238990848e-06,
      "p_python": 0.02811425316871454,
      "p_sql": 3.1485440336984754e-10,
      "p_typescript": 1.062621036734499e-05
    },
    {
      "text": "def add(x, y): \n    return x + y \n  \nx = 5\ny = 10\n\nprint(add(x, y))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.4660388203862492e-05,
      "p_css": 2.3783544104599544e-05,
      "p_html": 9.321962228919629e-05,
      "p_java": 0.7845534926146362,
      "p_javascript": 8.068758581784773e-06,
      "p_matlab": 1.1168062228888018e-11,
      "p_python": 0.21527860672498458,
      "p_sql": 2.405334491794267e-05,
      "p_typescript": 4.114991113791984e-06
    },
    {
      "text": "<html>\n  <head>\n    <title>Course Tree</title>\n    <style>\n      ul {\n        list-style: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul>\n      <li>Programming\n        <ul>\n          <li>Python\n            <ul>\n              <li>Basics</li>\n              <li>Data Structures</li>\n              <li>Advanced Topics</li>\n            </ul>\n          </li>\n          <li>Javascript\n            <ul>\n              <li>Basics</li>\n              <li>Object Oriented Programming</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>Design \n        <ul>\n          <li>UI/UX Design\n            <ul>\n              <li>Wireframing</li>\n              <li>Prototyping</li>\n              <li>Visual Design</li>\n            </ul>\n          </li>\n          <li>Graphic Design\n            <ul>\n              <li>Logo Design</li>\n              <li>Illustration</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html>",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 4.99881832250627e-12,
      "p_css": 3.826122739419725e-12,
      "p_html": 0.999999999805735,
      "p_java": 2.295703818511826e-12,
      "p_javascript": 6.883715090520196e-11,
      "p_matlab": 4.964048036608167e-12,
      "p_python": 2.248616502612161e-16,
      "p_sql": 1.3046372462109298e-12,
      "p_typescript": 1.0803819821126736e-10
    },
    {
      "text": "from sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef linear_regression(x, y):\n    lr = LinearRegression()\n    lr.fit(x , y)\n    y_hat = lr.predict(x)\n    return np.abs(y_hat - y).mean()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06985804923202418,
      "p_css": 0.01828521609658991,
      "p_html": 0.003637977339166293,
      "p_java": 8.681481131685017e-05,
      "p_javascript": 9.024332102553434e-05,
      "p_matlab": 0.00012668952668050472,
      "p_python": 0.906386122114501,
      "p_sql": 9.192129418496986e-05,
      "p_typescript": 0.0014369662645109483
    },
    {
      "text": "class Queue:\n    def __init__(self):\n        self.items = []\n    \n    def isEmpty(self):\n        return self.items == []\n    \n    def enqueue(self, item):\n        self.items.insert(0,item)\n    \n    def dequeue(self):\n        return self.items.pop()\n    \n    def size(self):\n        return len(self.items)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 1.1059984510738597e-05,
      "p_css": 0.0025194230830885168,
      "p_html": 0.0200147830632219,
      "p_java": 8.787798312122656e-07,
      "p_javascript": 9.810199923775171e-05,
      "p_matlab": 9.673432959999135e-08,
      "p_python": 0.4944479959953659,
      "p_sql": 0.48290397212225816,
      "p_typescript": 3.6882381562752176e-06
    },
    {
      "text": "def find_max_value(arr):\n    max_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n    return max_value\n\narray = [1,4,2]\nres = find_max_value(array)\nprint (res)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.2660334323592234e-05,
      "p_css": 6.270581730915248e-05,
      "p_html": 1.5665118200559078e-05,
      "p_java": 2.726339269573074e-06,
      "p_javascript": 2.1182424047168643e-06,
      "p_matlab": 0.927118907749743,
      "p_python": 0.07276040288384111,
      "p_sql": 1.8728577722808797e-06,
      "p_typescript": 1.2940657135910889e-05
    },
    {
      "text": "# Create function to count the words\ndef word_count(string):\n # split the string into words\n words = string.split(' ')\n \n # create a dictionary to store the word and its count\n word_count_dict = {}\n \n # add word to the dictionary and increase the count if it already exists\n for word in words:\n  if word in word_count_dict:\n   word_count_dict[word] += 1\n  else:\n   word_count_dict[word] = 1\n \n # return the dictionary\n return word_count_dict\n\n# test the code\nstring =\"This is a test string to test the word count program\"\nprint(word_count(string))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 3.2871860827475915e-06,
      "p_css": 0.004703678880305521,
      "p_html": 0.00032556857706161066,
      "p_java": 0.23676640794227688,
      "p_javascript": 2.418899031763859e-07,
      "p_matlab": 1.0005641933680513e-07,
      "p_python": 0.055086596256113736,
      "p_sql": 0.22970316471203728,
      "p_typescript": 0.4734109544997997
    },
    {
      "text": "# Load data\ndata = np.array(data)\n\n# Labels\nlabels = np.array([0, 1, 0, 1, 0, 0, 1, 0])\n\n# Create training and testing data\nX_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0)\n\n# Train the model\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test)\n\n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy_score(y_test, y_pred)))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.020439558386115296,
      "p_css": 0.37063553860187276,
      "p_html": 0.05412026132834771,
      "p_java": 7.720371483228623e-05,
      "p_javascript": 0.0006043054299395451,
      "p_matlab": 0.0005630721461109481,
      "p_python": 0.49281830274952865,
      "p_sql": 0.00031433202234835105,
      "p_typescript": 0.06042742562090448
    },
    {
      "text": "import math \n \nclass Point:\n def __init__(self, x, y):\n self.x = x \n self.y = y \n \n def distance_from_origin(self):\n return math.sqrt(self.x**2 + self.y**2)\n \n pt1 = Point(3, 4)\n print(pt1.distance_from_origin()) # prints 5.0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007148662679863497,
      "p_css": 0.007112305896643077,
      "p_html": 0.027698766038174522,
      "p_java": 1.3001163027987842e-06,
      "p_javascript": 2.4406999236090613e-05,
      "p_matlab": 2.18347881745134e-06,
      "p_python": 0.9318579144871151,
      "p_sql": 0.03243625121888066,
      "p_typescript": 0.00015200549684407758
    },
    {
      "text": "import requests \n\nresponse = requests.get('<url>')",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 7.570485845949297e-08,
      "p_css": 0.9490081826384226,
      "p_html": 4.2271128947807614e-05,
      "p_java": 0.00013197770072036652,
      "p_javascript": 1.1052555169668963e-05,
      "p_matlab": 9.692841721749322e-06,
      "p_python": 0.05049023102575266,
      "p_sql": 0.0002974676300805179,
      "p_typescript": 9.04877432622964e-06
    },
    {
      "text": "import xlwt\n\n# Create workbook, worksheet and set the default font\nwb = xlwt.Workbook()\nws = wb.add_sheet('People Information')\nstyle = xlwt.XFStyle()\nfont = xlwt.Font()\nfont.bold = True\nstyle.font = font\n\n# Define the header row and write it\nws.write(0, 0, 'Name', style)\nws.write(0, 1, 'Surname', style)\nws.write(0, 2, 'Age', style)\n\n# Write the content in each row\nfor row_index in range(1, len(information)+1):\n    row = information[row_index-1]\n    ws.write(row_index, 0, row[0])\n    ws.write(row_index, 1, row[1])\n    ws.write(row_index, 2, row[2])\n\n# Save the workbook\nwb.save('PeopleInfo.xls')",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.11009364237606958,
      "p_css": 0.02171980323528928,
      "p_html": 0.32953277089260313,
      "p_java": 0.0007582820250877568,
      "p_javascript": 0.0007437568252236543,
      "p_matlab": 0.0015139678631021405,
      "p_python": 0.09253585516170028,
      "p_sql": 0.0006057052910477729,
      "p_typescript": 0.4424962163298764
    },
    {
      "text": "def printWords(text):\n words = text.split()\n for word in words:\n print(word)\n\nprintWords(\"The quick brown fox\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012691411468656326,
      "p_css": 0.01067596291387238,
      "p_html": 0.0010262288021205678,
      "p_java": 8.548993889135833e-07,
      "p_javascript": 0.00013782953995516861,
      "p_matlab": 0.0001308074779546399,
      "p_python": 0.9027988122725261,
      "p_sql": 0.08341821940119518,
      "p_typescript": 0.0005421435461213723
    },
    {
      "text": "import statistics\n\ndata_set = [2,4,4,4,5,5,7,9]\nprint(round(statistics.stdev(data_set),2))",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.05404433923718404,
      "p_css": 0.2043447272481257,
      "p_html": 0.3403204649530368,
      "p_java": 0.004140752827226951,
      "p_javascript": 0.01607471527970362,
      "p_matlab": 0.016620808194891448,
      "p_python": 0.31633593659666887,
      "p_sql": 0.015298601223536696,
      "p_typescript": 0.03281965443962585
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Vectorize the text\ncv = CountVectorizer()\nX = cv.fit_transform(data[\"text\"])\n\n# Convert target labels to numerical values\ny = np.array([1 if label == \"category1\" else 2 if label == \"category2\" else 3 for label in data[\"category\"]])\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Test the model\ny_pred = nb.predict(X_test)\n\n# Print out the results\nprint(classification_report(y_test, y_pred))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.06966147452101111,
      "p_css": 0.7135299134880917,
      "p_html": 0.00968015754062741,
      "p_java": 2.3670196073229002e-05,
      "p_javascript": 0.000287767017567194,
      "p_matlab": 0.0003433732516867649,
      "p_python": 0.15770600224195105,
      "p_sql": 0.00018017085682459335,
      "p_typescript": 0.048587470886166974
    },
    {
      "text": "def median(num1, num2, num3): \n  \n    if (num1 > num2): \n        if (num3 > num1): \n            median = num1 \n        elif (num3 > num2): \n            median = num3\n        else: \n            median = num2\n    else: \n        if (num3 > num2): \n            median = num2\n        elif (num3 > num1): \n            median = num3\n        else: \n            median = num1\n    return median\n\nprint(\"Median is: \" + str(median(6, 8, 4)))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010483254477348877,
      "p_css": 0.004385269038349152,
      "p_html": 0.0021549072842530197,
      "p_java": 9.266618969018786e-05,
      "p_javascript": 0.0011064865394064165,
      "p_matlab": 0.004433759024494688,
      "p_python": 0.9845710566973008,
      "p_sql": 0.0011989698670547447,
      "p_typescript": 0.001008559911716085
    },
    {
      "text": "def optimize_expression(expr):\n    expr_tree = ast.parse(expr, mode='eval')\n    \n    # transform expression\n    expr_tree = ast.fix_missing_locations(ast.optimize_expression(expr_tree)) \n    ast.increment_lineno(expr_tree, 1)\n\n    # compile ast to python code\n    compiled_expr = compile(expr_tree, '', 'eval') \n     \n return eval(compiled_expr)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.3004885044503123,
      "p_css": 0.06168537944238365,
      "p_html": 0.022432029809273602,
      "p_java": 0.00022878454766834833,
      "p_javascript": 0.014874217196869528,
      "p_matlab": 0.00624591851857983,
      "p_python": 0.16240645166780507,
      "p_sql": 0.01238768691877824,
      "p_typescript": 0.41925102744832937
    },
    {
      "text": "import string\n\nalphabet = string.ascii_uppercase\n\nfor letter in alphabet[::-1]:\n    print(letter)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.0983080550885729e-07,
      "p_css": 0.0004963714012171242,
      "p_html": 0.0001192577314612785,
      "p_java": 0.9763150439856849,
      "p_javascript": 6.0799449230687375e-09,
      "p_matlab": 1.8524607930214633e-05,
      "p_python": 0.012088486493044769,
      "p_sql": 0.010928245071367186,
      "p_typescript": 3.39547985439388e-05
    },
    {
      "text": "def solve_linear_eq(a,b,c,d):\n    x = (b*d - c*a) / (b*d - c*a)\n    y = (d*a - b*c) / (b*d - c*a)\n    return x, y",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0458681726310896e-12,
      "p_css": 2.5489143973834694e-10,
      "p_html": 2.7598246867965498e-11,
      "p_java": 8.025231839209999e-13,
      "p_javascript": 3.049889349032867e-12,
      "p_matlab": 3.595677408560778e-18,
      "p_python": 0.9999999972484059,
      "p_sql": 2.461794976084354e-09,
      "p_typescript": 4.1123042603913176e-13
    },
    {
      "text": "class Node:\n    def __init__(self, value):\n        self.data = value\n        self.next = None\n \n \ndef merge_sorted_lists(head_a, head_b):\n    # Create a new linked list.\n    new_list = Node(None)\n    tail = new_list\n \n    current_a = head_a\n    current_b = head_b\n \n    while current_a is not None or current_b is not None:\n        if current_a is None:\n            tail.next = current_b\n            current_b = current_b.next\n        elif current_b is None:\n            tail.next = current_a\n            current_a = current_a.next\n        elif current_a.data <= current_b.data:\n            tail.next = current_a\n            current_a = current_a.next\n        else:\n            tail.next = current_b\n            current_b = current_b.next\n        tail = tail.next\n \n    return new_list.next",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0017481423153234744,
      "p_css": 0.20578299616272078,
      "p_html": 0.024541778098449547,
      "p_java": 0.0012911243541316412,
      "p_javascript": 0.002867213187294376,
      "p_matlab": 0.008953561913661222,
      "p_python": 0.36636777677609766,
      "p_sql": 0.35973745539077573,
      "p_typescript": 0.028709951801545404
    },
    {
      "text": "def combine_strings(str1, str2):\n    return str1 + str2",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.000722776358727271,
      "p_css": 0.0009344237920857959,
      "p_html": 1.9284888802940553e-06,
      "p_java": 0.00019489926285001167,
      "p_javascript": 0.5940754197945389,
      "p_matlab": 0.00011700147451508651,
      "p_python": 0.3969623921850138,
      "p_sql": 0.005869147770418954,
      "p_typescript": 0.001122010872969941
    },
    {
      "text": "def count_keyword(text, keyword):\n count = 0\n words = text.lower().split()\n\n for word in words:\n if word == keyword.lower():\n count += 1\n\n return count\n\ntext = 'Every morning I start my day with a cup of coffee.'\nprint(count_keyword(text, 'cup'))\n# Output: 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010502117824045755,
      "p_css": 0.01630569134835844,
      "p_html": 0.0022380239501720097,
      "p_java": 9.735913126745894e-06,
      "p_javascript": 0.005695738974355161,
      "p_matlab": 0.0002037007040653839,
      "p_python": 0.8738733073254488,
      "p_sql": 0.09820964562807857,
      "p_typescript": 0.0024139443739900875
    },
    {
      "text": "from flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef home():\n    return \"<form action='/save' method='POST'><input type='text' name='email'/><input type='submit’/></form>\"\n\n@app.route(\"/save\", methods=[\"POST\"])\ndef save():\n    email = request.form[\"email\"]\n    # save the email address to your database\n    return redirect(\"/\")\n\nif __name__ == \"__main__\":\n    app.run()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.012794945362911252,
      "p_css": 0.3124344013811821,
      "p_html": 0.6090060540718077,
      "p_java": 0.00022736242050741334,
      "p_javascript": 0.00039465580505367075,
      "p_matlab": 2.106092084234258e-05,
      "p_python": 0.0486477008679721,
      "p_sql": 0.016175836647656133,
      "p_typescript": 0.00029798252206721863
    },
    {
      "text": "def get_dict_with_prefix(dict_data, prefix):\n  new_dict = {}\n  for key, value in dict_data.items():\n    if key.startswith(prefix):\n      new_dict[key] = value\n\n  return new_dict\n\ndict_data = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\",\n    \"prefix_key1\": \"value4\",\n    \"prefix_key2\": \"value5\"\n}\nprefix = \"prefix_\"\n\nnew_dict = get_dict_with_prefix(dict_data, prefix)\n\nprint(new_dict)  # Output: {'prefix_key1': 'value4', 'prefix_key2': 'value5'}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0015624673997728712,
      "p_css": 0.9710923689006776,
      "p_html": 0.001956864598265684,
      "p_java": 9.538283169528728e-05,
      "p_javascript": 0.0005585627685144056,
      "p_matlab": 0.021384120087217188,
      "p_python": 0.00264374971853134,
      "p_sql": 0.000363145521693964,
      "p_typescript": 0.0003433381736315473
    },
    {
      "text": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\ndef mergesort(arr): \n    if len(arr) > 1: \n        mid = len(arr) // 2   # Finding the mid of the array \n        L = arr[:mid]   # Dividing the array elements  \n        R = arr[mid:]   # into 2 halves \n        left_arr = mergesort(L)  # Sorting the first \n        right_arr = mergesort(R) # half \n        arr =[] \n        while len(left_arr) > 0 and len(right_arr) > 0: \n            if left_arr[0] < right_arr[0]: \n                arr.append(left_arr[0]) \n                left_arr.pop(0) \n            else: \n                arr.append(right_arr[0]) \n                right_arr.pop(0) \n        # Checking if any element was left \n        for i in left_arr: \n            arr.append(i) \n        for i in right_arr: \n            arr.append(i) \n        return arr\n\n# Test array \narr = [3, 8, 1, 9, 5, 2] \n# Sorted array using QuickSort \nprint(\"Sorted array using QuickSort:\", quicksort(arr)) \n# Sorted array using MergeSort \nprint(\"Sorted array using MergeSort:\", mergesort(arr))\n\nOutput:\nSorted array using QuickSort: [1, 2, 3, 5, 8, 9]\nSorted array using MergeSort: [1, 2, 3, 5, 8, 9]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.390862643034755e-07,
      "p_css": 4.899782213224451e-07,
      "p_html": 1.0656423562796579e-07,
      "p_java": 9.776645493189393e-09,
      "p_javascript": 5.668650934404839e-08,
      "p_matlab": 0.9999883357612325,
      "p_python": 7.554426478669637e-06,
      "p_sql": 2.4138156739724904e-09,
      "p_typescript": 2.7053065972230846e-06
    },
    {
      "text": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n# arrayToList() function \ndef arrayToList(arr): \n\n    # Create a reference to root \n    root = None\n\n    # Create a reference to prev node \n    prev = None\n\n    # Iterate through the given array \n    for x in arr: \n\n        # Allocate a new node in heap \n        curr = ListNode(x) \n\n        # Linked the prev node \n        # to the current node. \n        if prev != None: \n            prev.next = curr \n\n        # If root is None, \n        # assign it as curr node. \n        if root == None: \n            root = curr \n\n        # Store the current node \n        # as prev node for next \n        # iteration \n        prev = curr \n\n    # Return the root node of \n    # linked list. \n    return root \n\n# Sample array \narr = [22, 7, 34, 15] \n\n# Root node reference \nroot = arrayToList(arr) \n\n# Print the converted Linked List \nlist_print(root)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.000805915226199751,
      "p_css": 0.015970239420660007,
      "p_html": 0.0016398191314937244,
      "p_java": 0.00011370219792686945,
      "p_javascript": 0.006455093465351054,
      "p_matlab": 0.03916595526008515,
      "p_python": 0.24159070531842788,
      "p_sql": 0.24202926692760754,
      "p_typescript": 0.4522293030522481
    },
    {
      "text": "import pymysql\n\n# Create connection to database\nconn = pymysql.connect(host=\"localhost\",\n                       user=\"admin\",\n                       passwd=\"admin123\",\n                       db=\"test\")\n\n# Create a cursor and execute a query\ncur = conn.cursor()",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.0006969256733679597,
      "p_css": 0.005440187178036992,
      "p_html": 0.0018774047778151138,
      "p_java": 4.204248495051984e-05,
      "p_javascript": 0.00021511240130341159,
      "p_matlab": 0.00023646903598847037,
      "p_python": 0.0061342060478996934,
      "p_sql": 0.746217464822351,
      "p_typescript": 0.23914018757828692
    },
    {
      "text": "def nth_prime(n):\n  \n num_primes = 0\n curr_num = 2\n \n while num_primes < n:\n   is_prime = True\n   for i in range(2, curr_num):\n       if curr_num % i == 0:\n           is_prime = False\n           break\n   if is_prime:\n       num_primes += 1\n   curr_num += 1\n\nreturn curr_num - 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0018905553039070353,
      "p_css": 0.001305770688301608,
      "p_html": 0.00457269283780047,
      "p_java": 0.00029280959873625637,
      "p_javascript": 0.00041382861168884984,
      "p_matlab": 0.25585178097472255,
      "p_python": 0.7332051868085894,
      "p_sql": 0.00036315373476790793,
      "p_typescript": 0.0021042214414859254
    },
    {
      "text": "class BinaryTree:\n    def __init__(self, root):\n        self.root = root\n        self.left = None\n        self.right = None\n        \n    def insert_left(self, node):\n        if self.left is None:\n            self.left = BinaryTree(node)\n        else:\n            t = BinaryTree(node)\n            t.left = self.left\n            self.left = t\n        \n    def insert_right(self, node):\n        if self.right is None:\n            self.right = BinaryTree(node)\n        else:\n            t = BinaryTree(node)\n            t.right = self.right\n            self.right = t",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.00012159765797884865,
      "p_css": 0.0056690368272396706,
      "p_html": 0.017017223276214424,
      "p_java": 1.1516116467271074e-05,
      "p_javascript": 6.116690163947187e-05,
      "p_matlab": 2.3212677056552022e-05,
      "p_python": 0.16004019773667363,
      "p_sql": 0.816692812865322,
      "p_typescript": 0.00036323594140800114
    },
    {
      "text": "import re\n\ndef parse_url(url):\n    regex = r\"^(https?://[^/]+)(.*)$\"\n    match = re.search(regex, url)\n    return match.group(1), match.group(2)\n\nurl, query = parse_url(\"https://www.example.com/index.php?p=1&q=2\")\nprint(\"URL:\", url)\nprint(\"Query:\", query)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.1510455239489635e-22,
      "p_css": 8.382621291288886e-09,
      "p_html": 4.955387588458023e-07,
      "p_java": 0.9999994842143527,
      "p_javascript": 1.321798158330509e-10,
      "p_matlab": 2.2715665504737602e-12,
      "p_python": 1.1560985675203223e-08,
      "p_sql": 2.7278440978725855e-11,
      "p_typescript": 1.4155158363197975e-10
    },
    {
      "text": "def generate_password(word):\n      # initialize variables \n    password = \"\"\n    letters = \"\"\n    numbers = \"\"\n\n    # create new password\n    for i in range(0, len(word)):\n      letters += word[i]\n      numbers += str(i)\n\n    password = letters + numbers\n    return password\n\nprint(generate_password(\"Hello\"))",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.042213245845131635,
      "p_css": 0.0004387822959523206,
      "p_html": 0.008475163790615074,
      "p_java": 9.878433072236682e-05,
      "p_javascript": 0.000410572745021982,
      "p_matlab": 1.1962982179379924e-05,
      "p_python": 0.4101532378498952,
      "p_sql": 0.5374685116193267,
      "p_typescript": 0.0007297385411552657
    },
    {
      "text": "def remove_duplicates(string):\nwords = string.split(\" \")\nunique_words = set(words)\nreturn \" \".join(unique_words)\n\nremove_duplicates(\"I have to go go shopping shopping\") # \"I have to go shopping\"",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 5.737494170462993e-05,
      "p_css": 0.012756785111210239,
      "p_html": 0.002255339894367831,
      "p_java": 0.037744427736114396,
      "p_javascript": 1.3491701781438102e-05,
      "p_matlab": 9.975438939402718e-05,
      "p_python": 0.18078351623961378,
      "p_sql": 0.760876624179713,
      "p_typescript": 0.0054126858061005634
    },
    {
      "text": "pos_tags = nltk.pos_tag([\"happy\", \"run\", \"went\", \"like\"])\nfor tag in pos_tags:\n    print(f'{tag[0]}: {tag[1]}')\n\n# Output \n# happy: JJ\n# run: VB\n# went: VBD\n# like: IN",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.23016833942316078,
      "p_css": 0.06515951203950913,
      "p_html": 0.555761045864193,
      "p_java": 0.0003874744225902781,
      "p_javascript": 0.010362205237225116,
      "p_matlab": 0.06347529839817928,
      "p_python": 0.045687365177676915,
      "p_sql": 0.02314097623604078,
      "p_typescript": 0.00585778320142476
    },
    {
      "text": "for i in range(0, 101): \n    if (i % 2 == 0): \n        print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.744185753073568e-19,
      "p_css": 2.809829868854975e-29,
      "p_html": 2.0061855638544017e-18,
      "p_java": 2.2482500425369732e-20,
      "p_javascript": 1.7290637095316134e-20,
      "p_matlab": 0.9999999999999978,
      "p_python": 2.258495268550087e-15,
      "p_sql": 2.330988725277688e-19,
      "p_typescript": 1.3258507633607872e-19
    },
    {
      "text": "class Conversion: \n      \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        self.array = [] \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} \n      \n    def isEmpty(self): \n        return True if self.top == -1 else False\n      \n    def peek(self): \n        return self.array[-1]\n      \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        elsE: \n            return \"$\"\n      \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)\n      \n    def infixToPostfix(self, exp):\n        for i in exp: \n            if i.isalpha(): \n                self.output.append(i)\n            elif i == '(': \n                self.push(i)\n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop()\n            else: \n                while(not self.isEmpty() and self.precedence[i] <= self.precedence[self.peek()]):\n                    self.output.append(self.pop())\n                self.push(i)\n        while not self.isEmpty():\n            self.output.append(self.pop())\n        return \"\".join(self.output)\n\nexp = \"A * B + C\"\nconversion = Conversion(len(exp)) \nresult = conversion.infixToPostfix(exp) \nprint(result)",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.0002957578910220478,
      "p_css": 0.04515330125753406,
      "p_html": 0.23258785771018525,
      "p_java": 1.1534207023637644e-06,
      "p_javascript": 1.3343681674633354e-05,
      "p_matlab": 6.9155619319276e-05,
      "p_python": 0.11125601766685848,
      "p_sql": 0.61053736607281,
      "p_typescript": 8.604667989394291e-05
    },
    {
      "text": "def reverse_string(string):\n # Create empty string to store reversed characters\n reversed_string = \"\"\n\n # Loop through string to get individual characters \n for char in string:\n reversed_string = char + reversed_string\n\n # Return reversed string\n return reversed_string\n\nprint(reverse_string(\"Hello World!\"))  # Output -> \"!dlroW olleH\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.089527016571063e-07,
      "p_css": 0.004395824417840209,
      "p_html": 0.00043588439801775,
      "p_java": 0.020812940699633804,
      "p_javascript": 1.0860851571510639e-07,
      "p_matlab": 1.7624304294061445e-06,
      "p_python": 0.9288173436606115,
      "p_sql": 0.04524181363891115,
      "p_typescript": 0.00029351319333866975
    },
    {
      "text": "# Generate a random color code (RGB) \nimport random\n\ndef get_random_color():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return (r, g, b)\n\nif __name__ == '__main__':\n    print(get_random_color())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002585836658796319,
      "p_css": 0.0004958801277919798,
      "p_html": 0.001169093744627432,
      "p_java": 0.032957381914232864,
      "p_javascript": 3.080639540284641e-08,
      "p_matlab": 1.8402356780279316e-05,
      "p_python": 0.9222316069564318,
      "p_sql": 0.04265052728953803,
      "p_typescript": 0.00021849313832252203
    },
    {
      "text": "# import necessary libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# define a function for preprocessing the tweets\ndef preprocess_tweets(tweets):\n    # lowercase the text\n    tweets = tweets.lower()\n    # remove punctuation\n    tweets = tweets.replace('[^\\w\\s]',' ') \n    return tweets\n\n# define a function for training the model\ndef train_model(X_train, y_train):\n    # initialize count vectorizer\n    vectorizer = CountVectorizer()\n\n    # fit and transform the data\n    X_train_counts = vectorizer.fit_transform(X_train)\n\n    # initilaize multinomial classifier\n    clf = MultinomialNB()\n    # fit the classifier\n    clf.fit(X_train_counts, y_train)\n    # return trained model\n    return clf\n\n# define a function for testing the model\ndef test_model(model, X_test, y_test):\n    # initialize count vectorizer for test set\n    vectorizer = CountVectorizer()\n    # transform the data\n    X_test_counts = vectorizer.fit_transform(X_test)\n    # predict labels\n    y_pred = model.predict(X_test_counts)\n    # calculate and return accuracy\n    accuracy = accuracy_score(y_pred, y_test)\n    return accuracy\n\n# define a main function\ndef main():\n    # preprocess the data\n    tweets = preprocess_tweets(tweets)\n    # split the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.20, random_state=1)\n    # train the model\n    model = train_model(X_train, y_train)\n    # print the test accuracy\n    accuracy = test_model(model, X_test, y_test)\n    print('Test accuracy is {}'.format(accuracy))\n\n# call the main function\nif __name__  == \"__main__\":\n    main()",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.1803338410412506,
      "p_css": 0.1556783996334705,
      "p_html": 0.006014596067538651,
      "p_java": 1.1651715769868617e-05,
      "p_javascript": 0.45605054839979703,
      "p_matlab": 1.0612051515463691e-05,
      "p_python": 0.18379203479905956,
      "p_sql": 0.00014529594696773734,
      "p_typescript": 0.01796302034463064
    },
    {
      "text": "# Import Python modules\nimport os\nimport lxml\nimport requests\nimport html5lib\n\n# Retrieve the HTML\nurl = 'https://www.example.com/'\nr = requests.get(url)\nhtml_doc = r.text\n\n# Parse the HTML\ntree = lxml.html.fromstring(html_doc)\nlinks = tree.xpath('//a/@href')\n\n# Fetch the data from each link\ndata = []\nfor link in links:\n try:\n r = requests.get(link)\n data.append(r.text)\n except:\n pass\n \n# Store data in a file\nfile_name = os.path.join('data', 'data.txt')\nwith open(file_name, 'w') as f:\n f.write('\\n'.join(data))",
      "y_true": "sql",
      "pred_label": "html",
      "p_bash": 4.601947576894847e-09,
      "p_css": 0.0069695504885095546,
      "p_html": 0.9732086158425453,
      "p_java": 0.008971190043012318,
      "p_javascript": 4.589991848826434e-05,
      "p_matlab": 6.598605965815868e-05,
      "p_python": 0.00031533164466991914,
      "p_sql": 0.0009698886175470121,
      "p_typescript": 0.009453532783621717
    },
    {
      "text": "a, b = 0, 1\nprint(\"The first 10 numbers in Fibonacci series are:\")\nwhile a < 10:\n    print(a)\n    a, b = b, a + b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00010218446001302821,
      "p_css": 0.0009385094827584481,
      "p_html": 0.0006706960684963198,
      "p_java": 0.00026884475882046617,
      "p_javascript": 0.00044601735990387693,
      "p_matlab": 2.4210398174951097e-05,
      "p_python": 0.9928038240619386,
      "p_sql": 5.512240486322868e-05,
      "p_typescript": 0.004690591005031196
    },
    {
      "text": "def replace_word(string, word, replacement_word):\n    return string.replace(word, replacement_word)\n\nprint(replace_word(\"Hello hello world!\", \"hello\", \"welcome\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06304705178119133,
      "p_css": 0.0009195651701743593,
      "p_html": 0.0028079910205846136,
      "p_java": 1.624296741772748e-09,
      "p_javascript": 5.4253705961910624e-05,
      "p_matlab": 1.0278443593687156e-06,
      "p_python": 0.9322804986838394,
      "p_sql": 0.0008352034746003468,
      "p_typescript": 5.440669499192424e-05
    },
    {
      "text": "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    binary = ''\n    while num > 0:\n        binary = str(num%2) + binary\n        num //= 2\n    return binary",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0345918992704188e-06,
      "p_css": 1.064415602272233e-09,
      "p_html": 3.976105941692296e-06,
      "p_java": 3.459284493623444e-07,
      "p_javascript": 1.0090205757743736e-06,
      "p_matlab": 0.998376697922593,
      "p_python": 0.001614708667762778,
      "p_sql": 9.98955162596337e-07,
      "p_typescript": 1.2277432001551516e-06
    },
    {
      "text": "def compute_word_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01361696920129807,
      "p_css": 0.009286054887683711,
      "p_html": 0.015314144021703835,
      "p_java": 1.7876861513552618e-05,
      "p_javascript": 0.0003546851629823434,
      "p_matlab": 0.005837079832340069,
      "p_python": 0.9081777448682753,
      "p_sql": 0.047189085985691936,
      "p_typescript": 0.0002063591785113969
    },
    {
      "text": "def is_palindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n\n    while right_pos >= left_pos:\n        if string[left_pos] != string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.983695632169604e-07,
      "p_css": 0.0004613473695608721,
      "p_html": 0.0003369844827450132,
      "p_java": 0.9358199515304751,
      "p_javascript": 6.306914669884166e-08,
      "p_matlab": 1.2349535862131952e-05,
      "p_python": 0.06285620138404369,
      "p_sql": 0.0004085633315834503,
      "p_typescript": 0.00010394092701974635
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the specified URL\nurl = 'https://example.com/'\nresponse = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Extract the desired data\ntitle = soup.find('title').text\nbody = soup.find('body').text\n\n# Print the extracted data\nprint(title)\nprint(body)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.719389435483201e-14,
      "p_css": 0.034135260159155335,
      "p_html": 0.9658441626528105,
      "p_java": 1.9960872989041596e-05,
      "p_javascript": 3.481770009328171e-08,
      "p_matlab": 2.616205769586661e-11,
      "p_python": 2.1067765390181881e-07,
      "p_sql": 2.6391770873274893e-07,
      "p_typescript": 1.0687580330222036e-07
    },
    {
      "text": "def classify_strings(strings):\n    # initialize lists for each classification\n    short = []\n    long = []\n    # classify each string\n    for s in strings:\n        if len(s) <= 6:\n            short.append(s)\n        else:\n            long.append(s)\n    # return classified lists\n    return [short, long]\n\nif __name__ == '__main__':\n    strings = ['short', 'longer_string', 'medium_length', 'very_long_string']\n    print(classify_strings(strings))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.8855079940107586e-05,
      "p_css": 0.008325219808563027,
      "p_html": 0.000583811162653556,
      "p_java": 0.0010300984209076678,
      "p_javascript": 1.1248401529406376e-05,
      "p_matlab": 0.9849859439213372,
      "p_python": 0.0012503376923959518,
      "p_sql": 0.0035580601739500753,
      "p_typescript": 0.0002164253387231239
    },
    {
      "text": "def is_leap(year):\n    if (year % 400 == 0): \n        return True\n    if (year % 100 == 0):  \n        return False\n    if (year % 4 == 0): \n        return True\n    else:\n        return False\n  \nyear = int(input())\nprint(is_leap(year))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00014526814197300794,
      "p_css": 0.00149689124621004,
      "p_html": 0.006992242659435981,
      "p_java": 0.004997508540219261,
      "p_javascript": 0.00021148437355016808,
      "p_matlab": 1.3535624806063563e-05,
      "p_python": 0.9860027576371392,
      "p_sql": 6.461227478247164e-05,
      "p_typescript": 7.569950188386102e-05
    },
    {
      "text": "import random\n\ndef generate_random_numbers(length, min, max):\n  result = []\n  for _ in range(length):\n    result.append(round(random.uniform(min, max), 1))\n  return result\n\nprint(generate_random_numbers(5, 2, 10)) # [2.6, 6.2, 2.5, 8.5, 8.1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.916747848855994e-06,
      "p_css": 4.70436624303026e-05,
      "p_html": 8.305672981292558e-06,
      "p_java": 1.9622472029937198e-07,
      "p_javascript": 2.633832184563097e-05,
      "p_matlab": 6.817313651587432e-05,
      "p_python": 0.9982793776642749,
      "p_sql": 0.001563801765708836,
      "p_typescript": 1.8468036741714408e-06
    },
    {
      "text": "def multiply(num1, num2):\n    return num1 * num2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.245675669974762e-05,
      "p_css": 0.0005634811754310174,
      "p_html": 0.00016140051690601332,
      "p_java": 3.997881494172754e-06,
      "p_javascript": 6.955634768125802e-05,
      "p_matlab": 2.5831081156248518e-05,
      "p_python": 0.9987023562278059,
      "p_sql": 0.0002896932297762336,
      "p_typescript": 9.122678304950386e-05
    },
    {
      "text": "def filter_same_value_elements(mylist):\n seen = set()\n for item in mylist:\n if item not in seen:\n yield item\n seen.add(item)\n\nfiltered_list = list(filter_same_value_elements(mylist))\nprint(filtered_list) # [1, 2, 3]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.262551508845763e-08,
      "p_css": 8.199622121064392e-08,
      "p_html": 1.50243746778099e-07,
      "p_java": 3.892677659764532e-08,
      "p_javascript": 5.864894819285034e-07,
      "p_matlab": 0.9999990010354739,
      "p_python": 5.8024816401284095e-08,
      "p_sql": 8.362245058123093e-10,
      "p_typescript": 1.982174350651042e-08
    },
    {
      "text": "def largestNumber(list): \n    maximum = list[0] \n      \n    for num in list: \n        if num > maximum: \n            maximum = num \n    return maximum \n  \nlist = [4, 8, 2, 6, 9] \nlargestNumber = largestNumber(list) \n  \nprint(\"Largest number in the given list is:\", largestNumber)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.8350639390275177e-06,
      "p_css": 1.1810840047855977e-07,
      "p_html": 9.098948014688268e-06,
      "p_java": 4.6363466092085493e-07,
      "p_javascript": 1.06946349304247e-05,
      "p_matlab": 0.9997147241246309,
      "p_python": 0.00019799942301753864,
      "p_sql": 4.365524507278111e-05,
      "p_typescript": 2.1410817333115664e-05
    },
    {
      "text": "def longest_substring(string):\n    # Keep track of the longest substring\n    longest_substring = \"\"\n    start_index = 0\n  \n    # Iterate over each letter in the string\n    for current_index in range(len(string)):\n        # Check if the current letter has occurred before in the substring\n        if string[current_index] in string[start_index:current_index]:\n            # If so, the previous substring is no longer valid\n            start_index = current_index\n        # Check if the current substring is longer than the longest\n        longest_substring = max(longest_substring, string[start_index:current_index+1], key=len)\n  \n    return longest_substring",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.5779422977068422e-06,
      "p_css": 0.001093478615914743,
      "p_html": 0.0005212445108140001,
      "p_java": 0.8874199211267834,
      "p_javascript": 1.543252129164783e-06,
      "p_matlab": 0.00015016745380206606,
      "p_python": 0.08650520080934758,
      "p_sql": 0.019999068542207968,
      "p_typescript": 0.0043077977467033185
    },
    {
      "text": "def rolling_average(arr):\n    last_three = arr[-3:]\n    return sum(last_three) / len(last_three)\n\nmylist = [10, 20, 30, 40, 50]\nrolling_avg = rolling_average(mylist)\nprint(\"Rolling average:\", rolling_avg)\n\n# Output:\n# Rolling average: 33.333333333333336",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.659509339946314e-05,
      "p_css": 0.00010411001153370397,
      "p_html": 6.646656413165323e-06,
      "p_java": 3.8061086036678726e-06,
      "p_javascript": 2.9300755748568893e-06,
      "p_matlab": 0.9995508195872127,
      "p_python": 0.00030385432027830024,
      "p_sql": 9.786875212902643e-08,
      "p_typescript": 1.1402782319991974e-06
    },
    {
      "text": "def insertionSort(arr): \n    n = len(arr)\n    for i in range(1, n): \n        key = arr[i]\n        j = binarySearch(arr, key, 0, i - 1)\n        for k in range(i-1, j-1, -1):\n            arr[k+1] = arr[k]\n        arr[j] = key\n\ndef binarySearch(arr, key, start, end):\n    if (end - start == 1):\n        if (key < arr[start]):\n            return start\n        else:\n            return end\n    if (end == start):\n        return start\n    mid = start + (end - start) // 2\n    if (key < arr[mid]):\n        return binarySearch(arr, key, start, mid)\n    else:\n        return binarySearch(arr, key, mid, end)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.8082260683539903e-05,
      "p_css": 0.00032644898827746075,
      "p_html": 1.7808416290820256e-05,
      "p_java": 2.1321206361671206e-06,
      "p_javascript": 6.264632594178615e-06,
      "p_matlab": 0.04941780391648103,
      "p_python": 0.950184439528046,
      "p_sql": 1.429857551737626e-05,
      "p_typescript": 1.2721561473149076e-05
    },
    {
      "text": "import string\nimport random\n\ndef generate_password(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    generated_password = ''.join(random.choice(chars) for i in range(length))\n\n    return generated_password",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.3785814031013703e-11,
      "p_css": 5.613174152816185e-08,
      "p_html": 6.137630582269023e-08,
      "p_java": 0.01870306214744777,
      "p_javascript": 1.655389045324623e-12,
      "p_matlab": 1.2631343715692038e-08,
      "p_python": 8.038628850380286e-05,
      "p_sql": 0.9812164153805903,
      "p_typescript": 6.028625740124963e-09
    },
    {
      "text": "def min_distance_words(s, w1, w2):\n    list_str = s.split(\" \")\n    index1 = -1\n    index2 = -1\n    min_dist = float(\"inf\")\n    for i in range(len(list_str)):\n        if list_str[i] == w1:\n            index1 = i\n            if index2 != -1:\n               min_dist = min(min_dist, abs(index1 - index2))\n        elif list_str[i] == w2:\n            index2 = i \n            if index1 != -1:\n               min_dist = min(min_dist, abs(index1 - index2))\n    if min_dist == float(\"inf\"):\n        return -1\n    else:\n        return min_dist",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009681201411010637,
      "p_css": 0.008043494145230241,
      "p_html": 0.009405117607949312,
      "p_java": 0.0008489396503913447,
      "p_javascript": 0.0020080411555310038,
      "p_matlab": 0.13772008261102764,
      "p_python": 0.8209961330672302,
      "p_sql": 0.005851088209244293,
      "p_typescript": 0.005445902142385345
    },
    {
      "text": "def reverseArray(arr): \n    start = 0\n    end = len(arr) - 1\n    while start < end: \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.9806751563530727e-05,
      "p_css": 0.0005982047546555478,
      "p_html": 6.217258463223452e-05,
      "p_java": 1.7052716548825742e-05,
      "p_javascript": 1.8478170880028848e-05,
      "p_matlab": 0.00442238296142322,
      "p_python": 0.9946537212942136,
      "p_sql": 1.8515583030919924e-05,
      "p_typescript": 0.00015966518305208174
    },
    {
      "text": "def add_list(list_of_numbers):\n    sum = 0\n    for i in list_of_numbers:\n        sum += i\n    return sum\n\nlist = [2, 5, 9]\nresult = add_list(list)\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0008067111110560875,
      "p_css": 0.01669066938622431,
      "p_html": 0.008708504080592311,
      "p_java": 0.007509020617626549,
      "p_javascript": 0.0025621882759008304,
      "p_matlab": 0.5244545232277081,
      "p_python": 0.40824814844641377,
      "p_sql": 0.027898615170698707,
      "p_typescript": 0.0031216196837793603
    },
    {
      "text": "def check_substring(string1, string2):\n    if string2 in string1:\n        return True\n    else:\n        return False\n\n# example\nresult = check_substring(\"Hello world!\", \"world\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.017993090339974992,
      "p_css": 0.000448110838636734,
      "p_html": 0.000747308387557766,
      "p_java": 1.0508603318026994e-12,
      "p_javascript": 0.0020820033476095677,
      "p_matlab": 7.521949246242779e-07,
      "p_python": 0.9787004537656521,
      "p_sql": 2.681997025489766e-05,
      "p_typescript": 1.4611543384970142e-06
    },
    {
      "text": "def is_uppercase(text):\n    if text[0].isupper():\n        print(\"True\")\n    else:\n        print(\"False\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000780341656362961,
      "p_css": 0.04087354535128352,
      "p_html": 0.0018864264659489078,
      "p_java": 1.910379923806448e-05,
      "p_javascript": 0.00018543494245070933,
      "p_matlab": 0.0010755877715977592,
      "p_python": 0.950026405601168,
      "p_sql": 0.0033118861218904344,
      "p_typescript": 0.0018412682900596237
    },
    {
      "text": "def is_subsequence(str1, str2):\n    i = 0\n    j = 0\n\n    while(i < len(str1) and j < len(str2)):\n        if str1[i] == str2[j]:\n            i += 1\n        j += 1\n\n    return i == len(str1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00027150586874198385,
      "p_css": 0.0004678411151375886,
      "p_html": 5.376999068364242e-07,
      "p_java": 0.0001067663412077645,
      "p_javascript": 0.2668226384234019,
      "p_matlab": 0.00020091462599659466,
      "p_python": 0.7226700647109652,
      "p_sql": 0.006652082502429454,
      "p_typescript": 0.0028076487122127834
    },
    {
      "text": "import json\n\n# some Python data\ndata = [{'name': 'John', 'age': 30, 'city': 'New York'},\n        {'name': 'Max', 'age': 20, 'city': 'Berlin'}]\n\n# convert to JSON\njson_data = json.dumps(data)\n\n# save as JSON file\nwith open(\"data.json\", \"w\") as json_file:\n json.dump(json_data, json_file)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 2.5722958955102994e-05,
      "p_css": 0.9998184890673014,
      "p_html": 4.392453184838295e-06,
      "p_java": 2.8577205404914944e-07,
      "p_javascript": 2.802586478724533e-08,
      "p_matlab": 1.626936314334223e-07,
      "p_python": 1.5923443076090347e-05,
      "p_sql": 5.820359714193229e-07,
      "p_typescript": 0.00013441354996108823
    },
    {
      "text": "def sort_by_length_descending(list_of_strings):\n    list_of_strings.sort(key=len, reverse=True)\n    return list_of_strings\n\nresult = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics'])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.342701517831069e-05,
      "p_css": 0.00809385418185243,
      "p_html": 0.0002467468483257824,
      "p_java": 9.182679821980278e-06,
      "p_javascript": 5.756968071351027e-05,
      "p_matlab": 2.5723279640091756e-06,
      "p_python": 0.9912072812208604,
      "p_sql": 0.00023006837787240876,
      "p_typescript": 5.929766741111549e-05
    },
    {
      "text": "import psycopg2\n\n# Connect to the PostgreSQL database\ndb_conn = psycopg2.connect(\n    user=\"<USER>\",\n    password=\"<PASSWORD>\",\n    host=\"localhost\",\n    port=\"5432\"\n    )\n\n# Create a cursor object\ncur = db_conn.cursor()\n\n# Execute a query\ncur.execute(\"SELECT * FROM table_name\")\n\n# Fetch the results\nrows = cur.fetchall()\n\n# Iterate through the results\nfor row in rows:\n    print(row)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00012992820446341464,
      "p_css": 0.0016964764843925553,
      "p_html": 9.874962918797342e-05,
      "p_java": 1.3348981366633214e-06,
      "p_javascript": 0.0007422981275628091,
      "p_matlab": 1.1816146631297553e-05,
      "p_python": 0.0007906484621605711,
      "p_sql": 0.9929349497616876,
      "p_typescript": 0.0035937982857771164
    },
    {
      "text": "def predict(data, tree):\n    if tree['node_type'] == 'leaf':\n        return tree['value']\n    feature_index = tree['feature_index']\n    if data[feature_index] < tree['value']:\n        return predict(data, tree['left_child'])\n    else:\n        return predict(data, tree['right_child'])",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.6397689026208132,
      "p_css": 0.2536991171415839,
      "p_html": 0.02004972269880085,
      "p_java": 0.0002395531153697619,
      "p_javascript": 0.0009675219427109303,
      "p_matlab": 0.0644485968068105,
      "p_python": 0.015384374206691972,
      "p_sql": 2.886835151718379e-06,
      "p_typescript": 0.005439324632067061
    },
    {
      "text": "import math\n\ndef is_prime(num):\n    \"\"\"Function to check for prime number\"\"\"\n    if num == 1:\n        return False\n\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef get_first_prime_numbers(limit):\n    \"\"\"Function to get the first limit prime numbers\"\"\"\n    num = 2\n    count = 0\n    prime_numbers = []\n\n    while count < limit:\n        if is_prime(num):\n            prime_numbers.append(num)\n            count += 1\n        num += 1\n\n    return prime_numbers\n\n\n# Get the first 20 prime numbers\nlimit = 20\nprint(get_first_prime_numbers(limit))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.8303492162036585e-05,
      "p_css": 1.235164462402465e-07,
      "p_html": 0.000142588265087675,
      "p_java": 5.5386855438429885e-05,
      "p_javascript": 0.0016318736155824178,
      "p_matlab": 0.179032350425313,
      "p_python": 0.8190016892924226,
      "p_sql": 7.500932285429503e-05,
      "p_typescript": 3.267521469342889e-05
    },
    {
      "text": "def get_domain_name_from_email(email):\n    return email.split('@')[-1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016032848924293155,
      "p_css": 0.02130591840679097,
      "p_html": 0.003540777954733257,
      "p_java": 5.883041124336053e-05,
      "p_javascript": 0.0007059793382886858,
      "p_matlab": 0.0001107469709967457,
      "p_python": 0.9703305847733422,
      "p_sql": 0.0015573083695278485,
      "p_typescript": 0.0007865688826475081
    },
    {
      "text": "def dot_product(u, v):\n    if len(u) != len(v):\n        raise ValueError(\"Vectors u and v must be of the same length!\")\n\n    result = 0\n    for i in range(len(u)):\n        result += u[i] * v[i]\n    return result\n\nu = [1, 2, 3]\nv = [4, 5, 6]\n\nprint(\"Dot product of u and v is:\" , dot_product(u, v))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.670971402350853e-07,
      "p_css": 6.117656585081594e-05,
      "p_html": 6.563965886709597e-06,
      "p_java": 9.380489800009023e-07,
      "p_javascript": 4.435100984263629e-05,
      "p_matlab": 3.849895741869145e-06,
      "p_python": 0.9746213254877959,
      "p_sql": 7.851884003517741e-05,
      "p_typescript": 0.025182409088726522
    },
    {
      "text": "class Person:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\nperson = Person(\"John\", \"Doe\")\nprint(person.first_name, person.last_name)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.02651909046905491,
      "p_css": 0.008671427857030062,
      "p_html": 0.08863177398859816,
      "p_java": 0.0009350107138733557,
      "p_javascript": 0.10021032541499743,
      "p_matlab": 0.0014482417390575993,
      "p_python": 0.734361022715925,
      "p_sql": 0.026079011769744656,
      "p_typescript": 0.013144095331718819
    },
    {
      "text": "def construct_polynomial(input_str):\n    parts = input_str.split(\"+\")\n    \n    coefficients = []\n    for part in parts:\n        try:\n            coefficient = int(part)\n        except:\n            coefficient = 1\n            \n        coefficients.append(coefficient)\n    \n    \n    def polynomial(x):\n        output = 0\n        for i, coeff in enumerate(coefficients):\n            output += coeff * x**i\n        return output\n    \n    return polynomial",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.12446800596857835,
      "p_css": 0.04366949162215953,
      "p_html": 0.05304512543157736,
      "p_java": 0.020685314415892993,
      "p_javascript": 0.006693243368541183,
      "p_matlab": 0.002407981651607792,
      "p_python": 0.7437851726366315,
      "p_sql": 0.004040823324591968,
      "p_typescript": 0.0012048415804193735
    },
    {
      "text": "def bubbleSort(arr): \n n = len(arr) \n\n # Traverse through all array elements \n for i in range(n): \n\n# Last i elements are already in place \n for j in range(0, n-i-1): \n\n# traverse the array from 0 to n-i-1 \n# Swap if the element found is greater \n# than the next element \n if arr[j] > arr[j+1] : \n arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above\narr = [2, 5, 1, 8, 4]\n\nbubbleSort(arr)\n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n print (\"%d\" %arr[i]), \n \n# Output: 1 2 4 5 8",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0370116402362037e-07,
      "p_css": 4.674669946194048e-08,
      "p_html": 2.8034514002005797e-08,
      "p_java": 9.785458422038502e-09,
      "p_javascript": 9.319451112224031e-08,
      "p_matlab": 0.9963887079680636,
      "p_python": 0.0036071363065253484,
      "p_sql": 9.171477862753531e-09,
      "p_typescript": 3.8650915863556355e-06
    },
    {
      "text": "def is_valid_triangle(a, b, c): \n  \n    # triangle should have 3 sides \n    if a + b <= c or a + c <= b or b + c <= a: \n        return False\n  \n    # sum of any two side should always be greater than third side \n    if a + b > c and a + c > b and b + c > a: \n        return True\n    return False\n\nis_valid_triangle(2, 2, 3)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 1.4875279687341446e-07,
      "p_css": 3.023585618113047e-07,
      "p_html": 4.777576130838049e-06,
      "p_java": 1.0835763397568754e-05,
      "p_javascript": 3.809201003519535e-07,
      "p_matlab": 5.026447428947378e-09,
      "p_python": 0.0008049704404529396,
      "p_sql": 5.942259742301488e-10,
      "p_typescript": 0.9991785785678863
    },
    {
      "text": "def checkPrime(num):\n    if (num == 1): \n        return False\n    for i in range(2, num):\n        if (num % i == 0): \n            return False\n    return True\n\nn1 = 20\nn2 = 50\n\nfor num in range(n1, n2 + 1):\n    if (checkPrime(num)):\n        print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.266802209355133e-12,
      "p_css": 4.4961912674536155e-17,
      "p_html": 5.718319171301255e-11,
      "p_java": 2.789424387549977e-13,
      "p_javascript": 5.323279901000079e-13,
      "p_matlab": 0.9999997375372307,
      "p_python": 2.623929587605689e-07,
      "p_sql": 3.680941728172234e-12,
      "p_typescript": 1.8682631494525807e-12
    },
    {
      "text": "# Defining a function  \ndef calculate(s): \n    if s.isalpha()==True: \n        vowels = 0\n        consonants = 0\n        words = 1\n  \n        for i in s:  \n  \n            # checking vowel \n            if(i == 'a' or i == 'e' or i == 'i' \n                        or i == 'o' or i == 'u'): \n                vowels += 1\n\n            # checking consonants \n            else: \n                consonants += 1\n        \n        words+=1\n\n        print(\"Vowels:\", vowels) \n        print(\"Consonants:\", consonants)\n        print(\"Total words:\",words) \n\n# Driver program \ns = \"This is a sample text\"\ncalculate(s)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1042715803705841,
      "p_css": 0.009029822837376033,
      "p_html": 0.025799998188597878,
      "p_java": 0.00018856215070789134,
      "p_javascript": 0.01625011050117139,
      "p_matlab": 0.006933028391183538,
      "p_python": 0.8251494800565047,
      "p_sql": 0.01115407847224642,
      "p_typescript": 0.0012233390316278613
    },
    {
      "text": "def get_squares(n):\n    squares = []\n    for i in range(1, n + 1):\n        squares.append(i**2)\n    return squares\n\nresult = get_squares(10)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004686397620702348,
      "p_css": 0.010351125345594342,
      "p_html": 0.003041638716874656,
      "p_java": 7.317235803949513e-05,
      "p_javascript": 0.2724631762979323,
      "p_matlab": 0.23842856331743234,
      "p_python": 0.47357965180859224,
      "p_sql": 0.0015233370347840522,
      "p_typescript": 7.069535868050756e-05
    },
    {
      "text": "def calculate_sum(num1, num2):\n    sum = num1 + num2\n    return sum\n\nnum1 = int(input('Enter first number: '))\nnum2 = int(input('Enter second number: '))\n\nresult = calculate_sum(num1, num2)\nprint('The sum of the two numbers is:', result)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.7221026238676358e-07,
      "p_css": 1.7091436474893773e-07,
      "p_html": 5.445725964174555e-07,
      "p_java": 0.997069747155463,
      "p_javascript": 2.6310987748437993e-07,
      "p_matlab": 6.24840171308006e-16,
      "p_python": 0.0029286172191641344,
      "p_sql": 3.126011439697615e-07,
      "p_typescript": 1.722171270967574e-07
    },
    {
      "text": "def create_dict(tuples): \n  dictionary = {} \n  \n  for item in tuples: \n    dictionary[item[0]] = item[1]\n  \n  return dictionary \n  \ntuples = [(\"a\", \"b\"), (\"c\", \"d\"), (\"e\", \"f\")]\nprint(create_dict(tuples)) \n\n# Output\n{'a': 'b', 'c': 'd', 'e': 'f'}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0011192972999130352,
      "p_css": 0.3302568625238588,
      "p_html": 0.022804500989957944,
      "p_java": 7.460273889341527e-05,
      "p_javascript": 0.003989598683337814,
      "p_matlab": 0.0003555345200781056,
      "p_python": 0.6406297874809282,
      "p_sql": 0.0002685644588072218,
      "p_typescript": 0.0005012513042254627
    },
    {
      "text": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MNISTClassifier(nn.Module):\n  def __init__(self):\n    super(MNISTClassifier, self).__init__()\n    # Create a convolutional network using 2D convolution and max pooling layers\n    self.conv1 = nn.Conv2d(1, 8, 3, padding=1)\n    self.conv2 = nn.Conv2d(8, 8, 3, padding=1)\n    self.pool = nn.MaxPool2d(2,2)\n    # Fully connected layer\n    self.fc1 = nn.Linear(8 * 7 * 7, 10)\n  \n  def forward(self, x):\n    x = F.relu(self.conv1(x))\n    x = self.pool(x)\n    x = F.relu(self.conv2(x))\n    x = self.pool(x)\n    x = x.view(-1, 8 * 7 * 7)\n    x = F.relu(self.fc1(x))\n    return x\n\nmodel = MNISTClassifier()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016717092994799542,
      "p_css": 0.025461109052704906,
      "p_html": 0.13178177106110045,
      "p_java": 6.0991554141674116e-05,
      "p_javascript": 0.00017331433628999914,
      "p_matlab": 0.00012015265397755635,
      "p_python": 0.7631281752636216,
      "p_sql": 0.025597520793670878,
      "p_typescript": 0.05200525598501287
    },
    {
      "text": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('house_price-data.csv')\n\nX = data[['size']]\ny = data['price']\n\nmodel = LinearRegression()\nmodel.fit(X, y)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01186615341684519,
      "p_css": 0.40836800521346467,
      "p_html": 0.017419090564550346,
      "p_java": 2.5978002651221437e-05,
      "p_javascript": 2.5002080015233634e-05,
      "p_matlab": 4.372601256487371e-05,
      "p_python": 0.558038225614331,
      "p_sql": 4.029384923924501e-05,
      "p_typescript": 0.004173525246338196
    },
    {
      "text": "import random\n\ndef random_int_between_1_and_100():\n  return random.randint(1, 100)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00019488939316107437,
      "p_css": 0.000384149629203505,
      "p_html": 8.93220802021488e-05,
      "p_java": 1.3212826039585656e-06,
      "p_javascript": 6.865271299515053e-05,
      "p_matlab": 1.8129372418040961e-07,
      "p_python": 0.9642700287085181,
      "p_sql": 0.034978778929568244,
      "p_typescript": 1.2675970023895804e-05
    },
    {
      "text": "# Import libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Read data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nfeatures = data.drop('Attrition', axis=1)\nle = LabelEncoder()\ntarget = le.fit_transform(data['Attrition'])\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=0)\n\n# Build Decision Tree classifier\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = clf.predict(X_test)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.41190347410400596,
      "p_css": 0.4361632756340127,
      "p_html": 0.004814850949926114,
      "p_java": 2.625072676258677e-06,
      "p_javascript": 1.9049553879578643e-05,
      "p_matlab": 1.4614175374235375e-05,
      "p_python": 0.13821542628033795,
      "p_sql": 9.817994969764614e-07,
      "p_typescript": 0.008865702430290223
    },
    {
      "text": "for word in words:\n    vowels = \"\"\n    for x in word:\n        if x in ('a', 'e', 'i', 'o', 'u'):\n            vowels += x\n    print(vowels)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00123479671602131,
      "p_css": 0.0010284660584871362,
      "p_html": 0.00222671224273801,
      "p_java": 1.8241027308208937e-06,
      "p_javascript": 7.086915046092928e-05,
      "p_matlab": 0.8591837113028628,
      "p_python": 0.12801724744024454,
      "p_sql": 0.008151910272185318,
      "p_typescript": 8.446271426912905e-05
    },
    {
      "text": "def ipv4_format(ip):\n octets = ip.split('.')\n octets.extend(['0', '0', '0', '0'])\n octets = octets[:4]\n return '.'.join(octets)\n\nif __name__ == '__main__':\n ip = '192.168.1'\n print(ipv4_format(ip))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0027080819382174367,
      "p_css": 0.021537582179723097,
      "p_html": 0.018531667325953488,
      "p_java": 0.0002250743618501701,
      "p_javascript": 0.0013485579750615957,
      "p_matlab": 0.0028226821005581096,
      "p_python": 0.31808332791504673,
      "p_sql": 0.6336895603099318,
      "p_typescript": 0.0010534658936574568
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Load and prepare the data\ndata = pd.read_csv('data.csv')\nX = np.array(data.iloc[:, 0:4])\ny = np.array(data['Heart Attack Risk'])\n\n# Create the model\nmodel = LogisticRegression(solver='lbfgs')\n\n# Train the model\nmodel.fit(X, y)\n\n# Make the predictions\npredictions = model.predict_proba(X)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8440423506062131,
      "p_css": 0.007989739313304609,
      "p_html": 0.0012790532583055987,
      "p_java": 6.960807816883604e-07,
      "p_javascript": 6.331380827208022e-06,
      "p_matlab": 5.478640967366055e-06,
      "p_python": 0.05428336347387111,
      "p_sql": 2.372990966913043e-08,
      "p_typescript": 0.09239296351581947
    },
    {
      "text": "def primeNumberGenerator(n):\n    prime = [True for _ in range(n+1)]\n    prime[0] = False\n    prime[1] = False\n    for p in range(2, n+1):\n        if prime[p] == True:\n            for i in range(2*p, n+1, p):\n                prime[i] = False\n\n    prime_nums = []\n    for i in range(n+1):\n        if prime[i] == True:\n            prime_nums.append(i)\n\n    return prime_nums\n\nprime_nums = primeNumberGenerator(100);\nconsole.log(prime_nums);",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.95488317086624e-06,
      "p_css": 2.1267931865282447e-06,
      "p_html": 0.00023735986752904762,
      "p_java": 1.188192456973258e-06,
      "p_javascript": 0.03240389097622705,
      "p_matlab": 0.8383817797473878,
      "p_python": 0.12886381290071558,
      "p_sql": 8.159215046242837e-05,
      "p_typescript": 2.1294488863750462e-05
    },
    {
      "text": "import numpy as np\nfrom sklearn import tree\n\n# Create the data\nx = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\n# Train the tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(x, y)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9997906459476311,
      "p_css": 3.328775151424635e-05,
      "p_html": 2.0386809872841353e-06,
      "p_java": 1.1905130563888729e-08,
      "p_javascript": 6.908203890765744e-08,
      "p_matlab": 2.1199369742586347e-07,
      "p_python": 5.064967845368156e-05,
      "p_sql": 5.554065880994505e-13,
      "p_typescript": 0.0001230849599912722
    },
    {
      "text": "def add_numbers(x, y):\n return sum(range(x, y))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005106071642337423,
      "p_css": 0.00045624653549446875,
      "p_html": 0.00221325733754416,
      "p_java": 0.00125857013614312,
      "p_javascript": 0.00022237032619601212,
      "p_matlab": 0.0017338537587489457,
      "p_python": 0.9924296842531132,
      "p_sql": 0.000446193688165178,
      "p_typescript": 0.0007292168003610827
    },
    {
      "text": "def triangle_area(base_length, height):\n    area = 0.5 * base_length * height\n    return area",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0023431840598550904,
      "p_css": 0.01567965164389107,
      "p_html": 0.005030400754531122,
      "p_java": 0.0006447515492136384,
      "p_javascript": 0.00161013699696697,
      "p_matlab": 0.0006351381644469326,
      "p_python": 0.9696680388669928,
      "p_sql": 0.0019642461017068194,
      "p_typescript": 0.0024244518623953958
    },
    {
      "text": "def threeNumSum(arr, targetSum):\n    combinations = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == targetSum:\n                    combination = [arr[i], arr[j], arr[k]]\n                    combinations.append(combination)\n    \n    return combinations\n\narr = [2, 3, 4, 5, 6]\ntargetSum = 7\nprint(threeNumSum(arr, targetSum))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.7542088656760838e-09,
      "p_css": 3.684628693938201e-09,
      "p_html": 2.909500639159532e-09,
      "p_java": 5.611617721047543e-10,
      "p_javascript": 2.87549600415641e-10,
      "p_matlab": 0.9990521948914387,
      "p_python": 0.0009477930862830927,
      "p_sql": 3.892903835910322e-10,
      "p_typescript": 2.435938090603731e-09
    },
    {
      "text": "def permute(s):\n    if len(s) == 1:\n        return s\n\n    perms = []\n    for i in range(len(s)):\n        element = s[i]\n\n        remaining_elements = s[:i] + s[i+1:]\n        z = permute(remaining_elements)\n\n        for t in z:\n            perms.append(element + t)\n\n    return perms\n\nprint(permute(\"ABC\"))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.3904539363772936e-05,
      "p_css": 3.69638760461949e-05,
      "p_html": 7.56968999383082e-05,
      "p_java": 4.032908194578444e-06,
      "p_javascript": 7.870380786433488e-06,
      "p_matlab": 0.9581967590962199,
      "p_python": 0.04160158275648711,
      "p_sql": 8.088225184556243e-06,
      "p_typescript": 3.5101317779103516e-05
    },
    {
      "text": "def find_anagrams(word):\n    word_list = list(word)\n    anagrams = []\n    for i in range(len(word_list)):\n        for j in range(i+1,len(word_list)+1):\n            anagram = ''.join(word_list[i:j])\n            if anagram != '' and anagram != word and anagram not in anagrams:\n                anagrams.append(anagram)\n    return anagrams",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0012360435075915402,
      "p_css": 0.0003054223545840425,
      "p_html": 0.0035493578208693967,
      "p_java": 4.253640214104421e-05,
      "p_javascript": 8.989325742699057e-05,
      "p_matlab": 0.45167529992131134,
      "p_python": 0.5240666750116306,
      "p_sql": 0.013671250766655011,
      "p_typescript": 0.005363520957790074
    },
    {
      "text": "prime_numbers = []\nfor num in range(2, 101):\n  isPrime = True\n  for i in range(2, num//2 + 1):\n    if (num % i == 0):\n      isPrime = False\n      break  \n  if isPrime:\n    prime_numbers.append(num)\n\nprint(prime_numbers)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.004915415713894e-12,
      "p_css": 4.705284199380947e-18,
      "p_html": 3.262109278061324e-12,
      "p_java": 6.344548888296405e-14,
      "p_javascript": 9.762482803723892e-14,
      "p_matlab": 0.9999999992771675,
      "p_python": 7.176316229151763e-10,
      "p_sql": 2.533047733852547e-13,
      "p_typescript": 5.19282280844462e-13
    },
    {
      "text": "def linear_search(arr, x): \n    for i in range (0, len(arr)): \n        if arr[i] == x: \n            return i  \n    return -1\n  \n# Test array \narr = [ 2, 3, 4, 10, 40 ] \nx = 10\n  \n# Function call \nresult = linear_search(arr, x) \n  \nif(result == -1): \n    print(\"Element is not present in array\") \nelse: \n    print(\"Element is present at index\", result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4505510185830964e-08,
      "p_css": 9.622979271894229e-08,
      "p_html": 1.9827897699674815e-08,
      "p_java": 2.1371897559168e-09,
      "p_javascript": 2.1756420720559616e-07,
      "p_matlab": 0.9999682940100024,
      "p_python": 3.1352486483591686e-05,
      "p_sql": 4.781774600826597e-10,
      "p_typescript": 2.76073888375439e-09
    },
    {
      "text": "import json\n\ndef validate_json_string(s):\n    try:\n        json_obj = json.loads(s)\n        return True\n    except json.JSONDecodeError:\n        return False",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0005742116339289871,
      "p_css": 0.6500291907781263,
      "p_html": 0.0018644305592019662,
      "p_java": 7.416389888461291e-06,
      "p_javascript": 7.51169585754788e-05,
      "p_matlab": 3.301596294541093e-06,
      "p_python": 0.34729474409482236,
      "p_sql": 6.578962423347756e-05,
      "p_typescript": 8.579836492848822e-05
    },
    {
      "text": "def find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0003551825409877032,
      "p_css": 0.0002247751591603276,
      "p_html": 0.0009265176437497435,
      "p_java": 5.6446172591330585e-05,
      "p_javascript": 9.554268296242914e-05,
      "p_matlab": 0.905772600515032,
      "p_python": 0.09195576723453781,
      "p_sql": 0.0001935116957579,
      "p_typescript": 0.0004196563552208617
    },
    {
      "text": "def calculate_sum(numbers):\n    return sum(numbers)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00013914892310363822,
      "p_css": 0.0004096711141866784,
      "p_html": 0.0009749955716413681,
      "p_java": 0.6270610180631482,
      "p_javascript": 0.001163707635314576,
      "p_matlab": 1.9311945654403216e-08,
      "p_python": 0.3698384870224505,
      "p_sql": 0.0001984753506543955,
      "p_typescript": 0.00021447700755500325
    },
    {
      "text": "text = 'This is a sample string'\n\n# Get the total number of characters \ntotal = len(text) \n\n# Count the number of vowels \nvowels = 0 \nfor character in text: \n if character in 'aeiou': \n  vowels += 1\n\n# Count the number of consonants \nconsonants = 0 \nfor character in text: \n if character in 'bcdfghjklmnpqrstvwxyz': \n  consonants += 1\n\n# Print the result \nprint(f\"Vowels: {vowels}\")\nprint(f\"Consonants: {consonants}\")\nprint(f\"Total: {total}\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.521694364807297e-05,
      "p_css": 0.0051011977085313066,
      "p_html": 0.0002273190286707882,
      "p_java": 3.288054705616183e-05,
      "p_javascript": 7.163344454719193e-05,
      "p_matlab": 0.00015750153317816288,
      "p_python": 0.9818073151816077,
      "p_sql": 0.008862966542031848,
      "p_typescript": 0.003713969070728814
    },
    {
      "text": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Input data\nrooms = np.array([4, 3, 2, 5]).reshape(-1, 1)\nsquare_feet = np.array([2000, 1600, 1400, 2500]).reshape(-1, 1)\nprice = np.array([400000, 340000, 280000, 480000])\n\n# Create linear regression model\nmodel = LinearRegression()\nmodel.fit(rooms, price)\nmodel.fit(square_feet, price)\n\n# Output predicted prices\npredicted_price = model.predict([[4], [1600]])\nprint(predicted_price)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.988048507392031,
      "p_css": 0.00178483305663517,
      "p_html": 0.00011004899039440348,
      "p_java": 1.424866860342855e-06,
      "p_javascript": 8.03926476333443e-07,
      "p_matlab": 7.85514617106554e-06,
      "p_python": 0.010038714347262204,
      "p_sql": 1.2750155196049083e-09,
      "p_typescript": 7.810999154092025e-06
    },
    {
      "text": "def sum_list_elements(lst):\n    sum = 0\n    for item in lst:\n        sum += item\n    return sum\n\nprint(sum_list_elements([1, 2, 3]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000568227344511405,
      "p_css": 0.013339299450595912,
      "p_html": 0.04534681410264079,
      "p_java": 0.0040870268623673265,
      "p_javascript": 0.010841415250482548,
      "p_matlab": 0.0046459598999650025,
      "p_python": 0.9200206686198176,
      "p_sql": 0.0008709210870511912,
      "p_typescript": 0.00027966738256814285
    },
    {
      "text": "# Create two sets\nset1 = {1,2,3,4,5}\nset2 = {3,4,5,6,7}\n\n# Find the intersection\nintersection = set1 & set2\n\n# Print the result\nprint(intersection)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0032278254049801333,
      "p_css": 0.015981999153667555,
      "p_html": 0.007737914155974975,
      "p_java": 0.0015246711282922867,
      "p_javascript": 0.0012661272982458997,
      "p_matlab": 6.056504044968983e-05,
      "p_python": 0.827481191514575,
      "p_sql": 0.00228786622627273,
      "p_typescript": 0.14043184007754195
    },
    {
      "text": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length * self.width",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00017768749268766155,
      "p_css": 0.0019729272325837675,
      "p_html": 0.006433093246582479,
      "p_java": 1.651819026978642e-05,
      "p_javascript": 0.00302214941553763,
      "p_matlab": 7.202278534650568e-06,
      "p_python": 0.8606549375835199,
      "p_sql": 0.12762226274842722,
      "p_typescript": 9.322181185684123e-05
    },
    {
      "text": "# Python3 program to find frequency table \nfrom collections import Counter \ndef freq_table(arr):\n    return dict(Counter(arr))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.08784815097251303,
      "p_css": 0.022223409162522665,
      "p_html": 0.0006972303703910097,
      "p_java": 5.566818508155055e-06,
      "p_javascript": 0.000657496398464072,
      "p_matlab": 0.0007182604627337083,
      "p_python": 0.8876783151060174,
      "p_sql": 0.00010690839224168374,
      "p_typescript": 6.466231660825329e-05
    },
    {
      "text": "# Node class\nclass Node: \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class\nclass LinkedList: \n  \n    # Function to initialize the Linked  \n    # List object \n    def __init__(self):  \n        self.head = None\n  \n    # Deletes the node at position n\n    def deleteNode(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store headnode \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position-1): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 8.320372953378927e-06,
      "p_css": 0.002220516579417543,
      "p_html": 0.01552708510955046,
      "p_java": 8.638832743728262e-05,
      "p_javascript": 0.0042557601812482125,
      "p_matlab": 0.08212496970955353,
      "p_python": 0.0011532549596254518,
      "p_sql": 0.22677698899481374,
      "p_typescript": 0.6678467157654003
    },
    {
      "text": "import random\n\narray_length = 10\n\nmy_array = [random.randint(0, 10) for _ in range(array_length)]\n\nprint(my_array)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.557881378398818e-05,
      "p_css": 0.00011635622303262337,
      "p_html": 0.00025181196464269673,
      "p_java": 4.269247330051675e-06,
      "p_javascript": 1.69076268404144e-05,
      "p_matlab": 0.008131582632745762,
      "p_python": 0.9909762850290198,
      "p_sql": 0.00035657235417648744,
      "p_typescript": 5.0636108428243456e-05
    },
    {
      "text": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.2004088957864957e-06,
      "p_css": 4.1602021637064916e-07,
      "p_html": 2.509564074906481e-06,
      "p_java": 1.7255168896552265e-08,
      "p_javascript": 4.0019345995833465e-08,
      "p_matlab": 7.326983684286269e-05,
      "p_python": 0.9999210593969868,
      "p_sql": 1.4543039346626807e-06,
      "p_typescript": 3.3194533575636226e-08
    },
    {
      "text": "def calculateSquare(x):\n    return x ** 2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0458681726310896e-12,
      "p_css": 2.5489143973834694e-10,
      "p_html": 2.7598246867965498e-11,
      "p_java": 8.025231839209999e-13,
      "p_javascript": 3.049889349032867e-12,
      "p_matlab": 3.595677408560778e-18,
      "p_python": 0.9999999972484059,
      "p_sql": 2.461794976084354e-09,
      "p_typescript": 4.1123042603913176e-13
    },
    {
      "text": "arr = [i for i in range(11) if i % 2 == 0]",
      "y_true": "matlab",
      "pred_label": "matlab",
      "p_bash": 1.2859824434419033e-22,
      "p_css": 1.0936283243526974e-31,
      "p_html": 2.2528558626391923e-22,
      "p_java": 5.8183347193251e-24,
      "p_javascript": 8.019093217501043e-24,
      "p_matlab": 1.0,
      "p_python": 1.6339751542953013e-18,
      "p_sql": 2.0365189837681625e-25,
      "p_typescript": 4.3908274713576686e-23
    },
    {
      "text": "import random\n\ndef generate_password(character_list, min_length):\n  password = ''\n\n  for i in range(min_length):\n    password += random.choice(character_list)\n  \n  return password\n\nif __name__ == '__main__':\n  character_list = ['a', 'b', 'c', 'd', 'e','1','2','3','4','5']\n  min_length = 8\n  password = generate_password(character_list, min_length)\n  print(password)",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.00018519406537216476,
      "p_css": 0.0005828685289200924,
      "p_html": 0.0006924026323599014,
      "p_java": 5.902665022584561e-06,
      "p_javascript": 6.011299597281706e-05,
      "p_matlab": 0.004837069478972893,
      "p_python": 0.17919538737332044,
      "p_sql": 0.8142499257633878,
      "p_typescript": 0.00019113649667137865
    },
    {
      "text": "# This code filters a list of numbers and prints out only the even ones\nnumbers = [1,2,3,4,5,6,7,8]\n\n# Use list comprehension to filter the list\neven_numbers = [x for x in numbers if x % 2 == 0]\n\n# Print out the even numbers\nfor num in even_numbers:\n  print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.712442627331913e-06,
      "p_css": 3.8888184047986045e-07,
      "p_html": 5.542671698153298e-05,
      "p_java": 0.17747208637602796,
      "p_javascript": 6.6326459077573495e-06,
      "p_matlab": 0.8168885262397718,
      "p_python": 0.0002678545479430409,
      "p_sql": 5.676230383302468e-05,
      "p_typescript": 0.005250609845067201
    },
    {
      "text": "import requests \nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.imdb.com/chart/moviemeter'\n\n# Make a request to the url\nr = requests.get(url)\n\n# Parse the content of the request with BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get all the movies listed\nmovies = soup.find_all('td', class_='titleColumn')\n\n# Loop over each movie\nfor movie in movies:\n    # Get the movie title\n    title = movie.a.text\n    # Get the release year\n    year = movie.span.text[1:-1]\n    # Print the title and year\n    print(title + ' ('+year + ')')",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 4.2163078940729286e-10,
      "p_css": 0.06862813908122625,
      "p_html": 0.9306580094200276,
      "p_java": 0.0002868693531530524,
      "p_javascript": 6.229439190070905e-05,
      "p_matlab": 8.357746570083413e-08,
      "p_python": 4.3677333682311425e-05,
      "p_sql": 6.998092144636821e-05,
      "p_typescript": 0.00025094549946737596
    },
    {
      "text": "from datetime import date \n\ndef daysDifference(date1, date2): \n    return (date2-date1).days \n\ndate1 = date(2020, 12, 20) \ndate2 = date(2021, 1, 10) \nprint(daysDifference(date1, date2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007545999521223501,
      "p_css": 0.04441697363895455,
      "p_html": 0.0052398366459852075,
      "p_java": 0.0004126397440778818,
      "p_javascript": 0.001312913281691811,
      "p_matlab": 0.0008439286001619354,
      "p_python": 0.9371582367834255,
      "p_sql": 0.0008510220645234146,
      "p_typescript": 0.002218449719956166
    },
    {
      "text": "for i in range(1,101):\n if i % 3 == 0 and i % 5 == 0:\n print(\"fizzbuzz\")\n elif i % 3 == 0:\n print(\"fizz\")\n elif i % 5 == 0:\n print(\"buzz\")\n else:\n print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.030060317856945e-08,
      "p_css": 8.944619672581697e-11,
      "p_html": 8.753323695427225e-07,
      "p_java": 6.584235726626429e-09,
      "p_javascript": 1.4800320477943062e-08,
      "p_matlab": 0.9995996693676348,
      "p_python": 0.0003988819472815227,
      "p_sql": 1.7392666139763174e-07,
      "p_typescript": 3.0765144734251655e-07
    },
    {
      "text": "list = [1, 2, 3, 4, 5]\nprint(\"The list is: \")\nfor i in list:\nprint(i, end=\" \")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00011669188845960638,
      "p_css": 0.0011393346226410085,
      "p_html": 0.0005588825142322015,
      "p_java": 9.409255004640885e-06,
      "p_javascript": 0.003702237186649998,
      "p_matlab": 0.9196641596275253,
      "p_python": 0.03927047621045764,
      "p_sql": 0.033808578253253424,
      "p_typescript": 0.0017302304417759413
    },
    {
      "text": "from collections import Counter\n\ndef frequency(arr):\n    \"\"\"\n    Develop a Python program to create a frequency table for an array of integer elements\n    \"\"\"\n    return Counter(arr)\n\nif __name__ == '__main__':\n    arr = [1,1,3,5,3,3,5] \n    print(frequency(arr))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9409924159167277,
      "p_css": 0.0003808004043752766,
      "p_html": 0.00023634910425433272,
      "p_java": 2.642534201174706e-07,
      "p_javascript": 4.346369698296344e-05,
      "p_matlab": 0.02953349789809269,
      "p_python": 0.02860753600561077,
      "p_sql": 1.1315378120117642e-05,
      "p_typescript": 0.00019435734241596652
    },
    {
      "text": "import random as rd\n\ndef random_selection(n):\n    num_list = [i for i in range(1, n+1)]\n    index_list = rd.sample(range(1, n+1), 10)\n    \n    selected_list = [num_list[i] for i in index_list]\n    return selected_list",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.491412000075441e-06,
      "p_css": 1.0283671055974324e-06,
      "p_html": 1.3369659409526166e-05,
      "p_java": 1.0033414428326649e-07,
      "p_javascript": 7.24470338054918e-08,
      "p_matlab": 0.8508139249147318,
      "p_python": 0.14912478350306077,
      "p_sql": 1.5836720856333405e-06,
      "p_typescript": 4.264569042860262e-05
    },
    {
      "text": "import random\nimport string\n\nlength = 10\n\ndef generatePassword(length):\n    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"!@#$%^&*\"\n    return ''.join([random.choice(chars) for _ in range(length)])\n\npassword = generatePassword(length)\nprint(password)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.7957678219294127e-11,
      "p_css": 6.600044845877573e-08,
      "p_html": 2.8719330500881025e-08,
      "p_java": 0.0007731033973762034,
      "p_javascript": 4.062006067878672e-11,
      "p_matlab": 6.715615263869112e-09,
      "p_python": 6.383307781853205e-05,
      "p_sql": 0.999162958963767,
      "p_typescript": 3.0570664341963833e-09
    },
    {
      "text": "class UserInformation:\n    def __init__(self, username, email, profile_picture):\n        self.username = username\n        self.email = email\n        self.profile_picture = profile_picture",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00022483225334464589,
      "p_css": 0.06429639105707498,
      "p_html": 0.04093387760224433,
      "p_java": 2.3642045938902108e-05,
      "p_javascript": 9.837739690817222e-05,
      "p_matlab": 1.6439529859063753e-05,
      "p_python": 0.8305161736717169,
      "p_sql": 0.06326593473099053,
      "p_typescript": 0.0006243317119225985
    },
    {
      "text": "def parse_contact_info(string):\n    name = string.split(\", \")[0]\n    email = string.split(\", \")[1]\n    phone_number = string.split(\", \")[2]\n    print(f\"Name: {name} \\nEmail: {email} \\nPhone Number: {phone_number}\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.2489614146966882e-21,
      "p_css": 1.9673330718859192e-16,
      "p_html": 2.8056121926376454e-17,
      "p_java": 0.9999999999999647,
      "p_javascript": 3.9943176425533645e-32,
      "p_matlab": 2.530321480721356e-20,
      "p_python": 3.405733797027846e-14,
      "p_sql": 1.0631251895702389e-15,
      "p_typescript": 1.0665342714761778e-18
    },
    {
      "text": "import string\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('', '', string.punctuation))\n\nprint(remove_punctuation(\"The quick brown fox jumps over the lazy dog.\"))\n# output: The quick brown fox jumps over the lazy dog",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00024289524485772041,
      "p_css": 0.06440334811195077,
      "p_html": 0.00414967825400999,
      "p_java": 0.022519132031589183,
      "p_javascript": 0.0001421004989943236,
      "p_matlab": 3.99776090740473e-05,
      "p_python": 0.8665970089073313,
      "p_sql": 0.028338821485069363,
      "p_typescript": 0.013567037857123293
    },
    {
      "text": "def solve_sudoku(matrix):\n # find empty spaces\n empty_spaces = find_empty_spaces(matrix)\n \n if not empty_spaces:\n #No empty spaces\n return True\n else:\n row, col = empty_spaces\n \n # choose valid entries\n for i in range(1,10):\n # entry validate\n if is_validated(matrix, i, (row, col)):\n matrix[row][col] = i\n \n if solve_sudoku(matrix):\n # jump out of function\n return True\n \n matrix[row][col] = 0\n \nreturn False\n\ndef find_empty_spaces(matrix):\n for i in range(9):\n for j in range(9):\n if matrix[i][j] == 0:\n return i, j  # row, col\n \nreturn None\n\ndef is_validated(matrix, number, position): # check row\n for i in range(9):\n if matrix[position[0]][i] == number and position[1] != i:\n return False\n \n # check column\n for i in range(9):\n if matrix[i][position[1]] == number and position[0] != i:\n return False\n \n # check 3x3 box\n box_x = position[1] // 3\n box_y = position[0] // 3\n \n for i in range(box_y * 3, box_y * 3 + 3):\n for j in range(box_x * 3, box_x * 3 + 3):\n if matrix[i][j] == number and (i,j) != position:\n return False\n \nreturn True\n\n# Solve Sudoku\nsolved = solve_sudoku(matrix) \n\nif solved:\n print('Sudoku solved!')\n \n for i in range(9):\n for j in range(9):\n print(matrix[i][j], end=\" \")\n print()\nelse:\n print('No solution')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.699565948364856e-07,
      "p_css": 9.002211383026382e-07,
      "p_html": 1.0037456969940114e-05,
      "p_java": 1.8657337363398562e-07,
      "p_javascript": 6.305920396329334e-07,
      "p_matlab": 0.022388448972699728,
      "p_python": 0.9775959763925924,
      "p_sql": 2.9310008033642615e-06,
      "p_typescript": 6.188337880427822e-07
    },
    {
      "text": "def fibonacci(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return fibonacci(n-1) + fibonacci(n-2)\n\n# Main Program\nn = int(input(\"Enter number of terms: \"))\n\nfor i in range(n):\n print(fibonacci(i), end=\" \")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.617630108674901e-05,
      "p_css": 2.714411662241723e-07,
      "p_html": 1.0265150147893342e-06,
      "p_java": 5.915601934191258e-07,
      "p_javascript": 1.2361680748346293e-07,
      "p_matlab": 3.739108920272741e-09,
      "p_python": 0.999911031581654,
      "p_sql": 7.592455518475769e-07,
      "p_typescript": 1.5999416738711638e-08
    },
    {
      "text": "import uuid\n\ndef generate_uuid():\n    return str(uuid.uuid4())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0044948358322636685,
      "p_css": 0.007739620055915887,
      "p_html": 0.007563425768754907,
      "p_java": 0.0002970136555281958,
      "p_javascript": 0.003779492253509114,
      "p_matlab": 0.00036206489445538237,
      "p_python": 0.9732031117800586,
      "p_sql": 0.0014977102455174288,
      "p_typescript": 0.001062725513996862
    },
    {
      "text": "import mysql.connector\n\n# Connect to local MySQL Server\nconn = mysql.connector.connect(\n    user='root',\n    password='root',\n    host='localhost',\n    database='test'\n)\ncursor = conn.cursor()\n\n# Execute SQL Query\nsql = \"SELECT * FROM users\"\ncursor.execute(sql)\n\n# Fetch and print results\ndata = cursor.fetchall()\nfor record in data:\n    print(record)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 3.30257222490453e-06,
      "p_css": 0.00011690365209402965,
      "p_html": 5.7569993750396124e-05,
      "p_java": 6.458458271191627e-07,
      "p_javascript": 8.128120043784704e-06,
      "p_matlab": 4.443746851340953e-06,
      "p_python": 0.00030493533405183686,
      "p_sql": 0.9991471694352485,
      "p_typescript": 0.0003569012999080255
    },
    {
      "text": "def extractDuplicates(nums): \n    result = [] \n\n    for i in range(len(nums)): \n        k = i + 1 \n        for j in range(k, len(nums)): \n            if nums[i] == nums[j] and nums[i] not in result: \n                result.append(nums[i]) \n  \n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.467740359281463e-08,
      "p_css": 2.049224073128206e-06,
      "p_html": 2.460147551904181e-07,
      "p_java": 7.898944016378196e-09,
      "p_javascript": 1.6355859524536994e-08,
      "p_matlab": 4.5913617855392526e-05,
      "p_python": 0.9999471656213675,
      "p_sql": 3.6828041012954744e-06,
      "p_typescript": 8.537856401831927e-07
    },
    {
      "text": "def sort_list(nums): \n    # Sort list in ascending order\n    nums.sort()\n    \n    # Print out the sorted list\n    for num in nums: \n        print(num) \n  \n# Test the function\nnums = [3, 2, 5, 7, 1, 4]\nsort_list(nums)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.290839808458576e-05,
      "p_css": 7.2484817789264e-05,
      "p_html": 0.0011314847040381332,
      "p_java": 0.0009307375152845302,
      "p_javascript": 0.37939145046311856,
      "p_matlab": 0.05821527097219225,
      "p_python": 0.558446437094026,
      "p_sql": 0.0016927645750810369,
      "p_typescript": 6.646146038562846e-05
    },
    {
      "text": "# Lambda expression to return the square of the given number \nsquare = lambda x: x * x \n  \n# calling the lambda expression  \nresult = square(5) \n  \n#Printing the result \nprint(result) \n\n# Output: 25",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00021979872916130184,
      "p_css": 0.01900330470400936,
      "p_html": 0.0005394349226939956,
      "p_java": 8.700796048919418e-06,
      "p_javascript": 0.0023045983814292716,
      "p_matlab": 5.503092279905399e-07,
      "p_python": 0.9265034182205322,
      "p_sql": 0.0010861820822748252,
      "p_typescript": 0.05033401185462221
    },
    {
      "text": "lst = [5, 10, 15, 20, 25, 30]\n\ndivisible_by_5 = [num for num in lst if num%5 == 0]\nprint(divisible_by_5)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.672948421538287e-12,
      "p_css": 7.6371669773848e-16,
      "p_html": 2.2817733327851477e-11,
      "p_java": 4.68365202293971e-13,
      "p_javascript": 1.647223662389165e-12,
      "p_matlab": 0.9999999991290518,
      "p_python": 8.34821761849846e-10,
      "p_sql": 2.095789975365595e-12,
      "p_typescript": 3.423798354152642e-12
    },
    {
      "text": "def checkIfStringContainsSubstring(myString, substring):\n  for i in range(len(myString) - len(substring) + 1):\n    if myString[i:i+len(substring)] == substring:\n      return True\n  return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00010791665659211281,
      "p_css": 9.478252966002282e-05,
      "p_html": 0.00045994455414193747,
      "p_java": 6.3987711736407745e-06,
      "p_javascript": 1.8144689751117243e-05,
      "p_matlab": 0.0008803936029870808,
      "p_python": 0.9981955458347967,
      "p_sql": 0.0001716904334814451,
      "p_typescript": 6.518292741582034e-05
    },
    {
      "text": "def sort_array(array):\n    for i in range(len(array)):\n        lowest = i\n        for j in range(i + 1, len(array)):\n            if array[lowest] > array[j]:\n                lowest = j\n        array[i], array[lowest] = array[lowest], array[i]\n    return array\n\nresult = sort_array([1, 5, 3, 8, 4, 2])\nprint(result)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.600623893175885e-05,
      "p_css": 4.687998517298046e-06,
      "p_html": 8.208414513838378e-06,
      "p_java": 4.187368898859666e-07,
      "p_javascript": 4.595393520838195e-07,
      "p_matlab": 0.9997507917876817,
      "p_python": 0.00016471629146076947,
      "p_sql": 2.170379419579066e-06,
      "p_typescript": 2.5406132329363064e-06
    },
    {
      "text": "import numpy as np\n \n# Generating random points\npoints = np.random.rand(10, 2)\n \n# Calculating distance between points\ndist_matrix = np.sqrt(np.sum(points**2, axis=1, keepdims=True) + \\\n          np.sum(points**2, axis=1, keepdims=True).T - \\\n          2*np.dot(points, points.T))\n \n# Clustering\ncluster_indices = np.argmin(dist_matrix, axis=1)\ncluster_points = [points[cluster_indices == i] for i in range(points.shape[0])]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01737472613636641,
      "p_css": 0.00924696741155597,
      "p_html": 0.008759274717096194,
      "p_java": 0.0007048623029210459,
      "p_javascript": 0.0002616265600110643,
      "p_matlab": 0.006438987361104855,
      "p_python": 0.9522005787398399,
      "p_sql": 0.0026493071323846415,
      "p_typescript": 0.0023636696387200214
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntext = soup.find_all(text=True)\n\nfor t in text:\n    print(t.strip())",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.267674467665762e-19,
      "p_css": 0.0009595580479136976,
      "p_html": 5.018763948582712e-05,
      "p_java": 0.9989889896627949,
      "p_javascript": 2.687015269904429e-09,
      "p_matlab": 6.68236959223795e-10,
      "p_python": 7.857205225575786e-07,
      "p_sql": 4.735286083304656e-07,
      "p_typescript": 2.0454224114684866e-09
    },
    {
      "text": "import pandas as pd \nfrom sklearn import tree \ndata = pd.read_csv('customer_data.csv') \nfeature_names = ['Age','Gender','Occupation','Type','City','Member since','Months on Site'] \ntarget_names = ['No','Yes'] \nX = data[feature_names].values \ny = data['Purchase'].values \n\n# Create decision tree classifier \nclf = tree.DecisionTreeClassifier() \n\n# Train the decision tree classifier \nclf = clf.fit(X, y) \n\n# Visualize the decision tree \ndot_data = tree.export_graphviz(clf, out_file=None, \n                     feature_names=feature_names,  \n                     class_names=target_names,  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \nimport graphviz \ngraph = graphviz.Source(dot_data)  \ngraph",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999998997268246,
      "p_css": 8.806909286942071e-08,
      "p_html": 9.969828061115324e-10,
      "p_java": 3.740522955219383e-12,
      "p_javascript": 1.684262263162507e-11,
      "p_matlab": 1.1066952903399999e-11,
      "p_python": 1.0405181136595537e-08,
      "p_sql": 5.4585346877023926e-21,
      "p_typescript": 7.702683510074293e-10
    },
    {
      "text": "import random\n\nn = random.randint(1, 10)\narray = [random.randint(0, 1000) for i in range(n)]\nprint(array)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00041233575420936304,
      "p_css": 0.00011298958096224858,
      "p_html": 0.0003172578423813144,
      "p_java": 3.6357627958807485e-06,
      "p_javascript": 1.7259689955683585e-05,
      "p_matlab": 0.06149932330615618,
      "p_python": 0.93473274153044,
      "p_sql": 0.0028554115179657102,
      "p_typescript": 4.90450151337373e-05
    },
    {
      "text": "class Temperature:\n    def __init__(self, value, unit):\n        self.value = value\n        self.unit = unit\n\n\n    def convert_to_celsius(self):\n        if self.unit == 'C':\n            return self.value\n        elif self.unit == 'F':\n            return (self.value - 32) * 5/9\n        elif self.unit == 'K':\n            return self.value - 273.15\n        else:\n            return None",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0004233916676390372,
      "p_css": 0.4036357530474631,
      "p_html": 0.1217365454541767,
      "p_java": 3.4325351323794595e-05,
      "p_javascript": 0.0001592704667475398,
      "p_matlab": 0.19476421779334033,
      "p_python": 0.0004025108587552947,
      "p_sql": 0.27806176740306876,
      "p_typescript": 0.0007822179574853517
    },
    {
      "text": "import random\n\nnum = random.randint(min, max)\nprint(num)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001637840902468103,
      "p_css": 2.107389270383606e-06,
      "p_html": 0.00023457204333248254,
      "p_java": 3.250599872294323e-06,
      "p_javascript": 3.860405463662902e-05,
      "p_matlab": 0.027206398417115554,
      "p_python": 0.9648895836111159,
      "p_sql": 0.007414707191269256,
      "p_typescript": 4.6992603140662726e-05
    },
    {
      "text": "def average_grade(grades):\n total = 0\n for grade in grades:\n total += grade\n return total / len(grades)\n\n>>> average_grade([90, 99, 75, 72, 85])\n84.2",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.013433979604180721,
      "p_css": 0.3145305117488158,
      "p_html": 0.08465991666739746,
      "p_java": 0.002236801871585758,
      "p_javascript": 0.008098916103554175,
      "p_matlab": 0.32108972486805204,
      "p_python": 0.23845275504610544,
      "p_sql": 0.003795623158904091,
      "p_typescript": 0.013701770931404495
    },
    {
      "text": "original_list = [1, 2, 5, 2, 4, 1]\nunique_list = []\n\nfor item in original_list:\n    if item not in unique_list:\n        unique_list.append(item)\n\nprint(unique_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00467087755423813,
      "p_css": 0.049150593446048024,
      "p_html": 0.0869199483477729,
      "p_java": 0.0003676782457581283,
      "p_javascript": 0.025286412976136815,
      "p_matlab": 0.22200796062807898,
      "p_python": 0.6076848313365932,
      "p_sql": 0.0013875749089763076,
      "p_typescript": 0.0025241225563975194
    },
    {
      "text": "from rest_framework import views, status\nfrom rest_framework.response import Response\nfrom .models import Post\nfrom .serializers import PostSerializer\n\nclass PostView(views.APIView):\n    def get(self, request):\n        posts = Post.objects.all()\n        serializer = PostSerializer(posts, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = PostSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass PostDetailView(views.APIView):\n    def get(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        serializer = PostSerializer(post)\n        return Response(serializer.data)\n\n    def put(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        serializer = PostSerializer(post, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n   def delete(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        post.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)",
      "y_true": "sql",
      "pred_label": "css",
      "p_bash": 0.0568281911717722,
      "p_css": 0.8770756643189775,
      "p_html": 0.0004944043775415775,
      "p_java": 4.193373993374469e-05,
      "p_javascript": 0.00035412142099140693,
      "p_matlab": 0.00011459318295042006,
      "p_python": 0.06080569031607926,
      "p_sql": 0.0015517147073282923,
      "p_typescript": 0.0027336867644253623
    },
    {
      "text": "def add_dict_nums(nums1, nums2):\n    result = dict()\n    for key in nums1.keys():\n        result[key] = nums1[key] + nums2[key]\n    return result\n\nprint(add_dict_nums(nums1, nums2))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 8.76722928590513e-06,
      "p_css": 0.5430829390425981,
      "p_html": 3.488298211022302e-05,
      "p_java": 7.669356564896953e-07,
      "p_javascript": 4.402482705443823e-05,
      "p_matlab": 1.521778311855367e-06,
      "p_python": 0.4563970029501831,
      "p_sql": 0.0004143927146516167,
      "p_typescript": 1.5701540148316118e-05
    },
    {
      "text": "def median(lst):\n    lst = sorted(lst)\n    if len(lst) % 2 == 0:\n        mid = int(len(lst) / 2)\n        return (lst[mid] + lst[mid-1]) / 2\n    else:\n        mid = int(len(lst) / 2)\n        return lst[mid]\n\nmedian([3, 4, 1, 2, 5])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00019283637690815567,
      "p_css": 0.00029097154361476123,
      "p_html": 0.00018423948692432632,
      "p_java": 0.0024399841955427336,
      "p_javascript": 3.993460170007939e-05,
      "p_matlab": 2.158921590859515e-07,
      "p_python": 0.9967010302924899,
      "p_sql": 6.433548936203362e-05,
      "p_typescript": 8.645212129887029e-05
    },
    {
      "text": "def find_duplicates(csv_file):\n    \"\"\"\n    A function to detect duplicates in a CSV.\n\n    Args:\n        csv_file (str): The path of the CSV file to be processed.\n\n    Returns: \n        Set of duplicates found.\n    \"\"\" \n    duplicates = set()    \n    \n    # Open and read the CSV file\n    with open(csv_file,'r') as csvfile:\n        lines = csv.reader(csvfile)\n        # Read data into a list of lists       \n        data_list = list(lines)\n        # Store the no. of columns in csv \n        col = len(data_list[0]) \n  \n    for i in range(len(data_list)-1): \n        for j in range(i + 1, len(data_list)): \n            count = 0\n            for k in range(col): \n                if data_list[i][k] != data_list[j][k]: \n                    break\n                count += 1\n  \n            # If each value of the row is same, add to duplicates list\n            if count == col: \n                duplicates.add(tuple(data_list[i]))\n  \n    return duplicates",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0006273327715800151,
      "p_css": 0.0006890663292381368,
      "p_html": 0.0010629583085373486,
      "p_java": 0.0002748658341400723,
      "p_javascript": 0.020612467599140597,
      "p_matlab": 0.013867563905873376,
      "p_python": 0.17847814176377813,
      "p_sql": 0.012569769896397704,
      "p_typescript": 0.7718178335913146
    },
    {
      "text": "# Initialize sum\nsum = 0\n\n# Use a for loop to iterate over numbers\nfor num in range(1, 7):\n    sum = sum + num\n\n# Print result\nprint(\"The sum of the first six numbers is:\", sum)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.126711545620021e-06,
      "p_css": 9.114293461477736e-08,
      "p_html": 0.00019350044244703177,
      "p_java": 0.9983498174239366,
      "p_javascript": 0.00035560619901331907,
      "p_matlab": 0.0005168663315667574,
      "p_python": 0.0004127911983030654,
      "p_sql": 5.224002132000469e-05,
      "p_typescript": 0.00011296052893281212
    },
    {
      "text": "import random\n\n# Function to generate random numbers \ndef random_number(start, end): \n\treturn random.randint(start, end) \n\n# Driver code\nstart = 1\nend = 10\nprint(random_number(start, end))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9755830819431027e-05,
      "p_css": 9.719200613155857e-05,
      "p_html": 2.919752669662924e-05,
      "p_java": 9.234131731528966e-06,
      "p_javascript": 0.0005799853691637038,
      "p_matlab": 1.802773211826e-08,
      "p_python": 0.9984503505783652,
      "p_sql": 0.0006716732654791144,
      "p_typescript": 0.00014259326388083417
    },
    {
      "text": "def generate_fibonacci_sequence(n):\n  a = 0\n  b = 1\n  sequence = [a]\n  while b < n:\n    a, b = b, a + b\n    sequence.append(a)\n  return sequence\n\nresult = generate_fibonacci_sequence(7)\nprint(result) # [0, 1, 1, 2, 3, 5]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004877722369628974,
      "p_css": 0.025403737398624865,
      "p_html": 0.002239202381349092,
      "p_java": 0.0002478027842241271,
      "p_javascript": 0.0010179857700771406,
      "p_matlab": 0.0013380011746636387,
      "p_python": 0.9646110112569053,
      "p_sql": 0.0032225285465647545,
      "p_typescript": 0.00143195845062834
    },
    {
      "text": "def encrypt(message, key):\n cipher_text = []\n for i in range(len(message)):\n cipher_text.append(ord(message[i]) ^ ord(key[i]))\n return cipher_text\n\ndef decrypt(cipher_text, key):\n message = []\n for i in range(len(cipher_text)):\n message.append(chr(cipher_text[i] ^ ord(key[i])))\n return \"\".join(message)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0010548418527449716,
      "p_css": 0.023571699213715883,
      "p_html": 0.005045513271689136,
      "p_java": 0.00016435566553032628,
      "p_javascript": 0.00047367363194363466,
      "p_matlab": 0.14482859834824238,
      "p_python": 0.7881972445138992,
      "p_sql": 0.03570075343851453,
      "p_typescript": 0.0009633200637198634
    },
    {
      "text": "def two_sum_digits():\n for i in range(0, 10):\n  for j in range(0, 10):\n   print(i + j)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1566195266649515e-12,
      "p_css": 1.3638880030240583e-13,
      "p_html": 2.1320170358074954e-11,
      "p_java": 7.046771247228823e-14,
      "p_javascript": 3.0824519646954297e-14,
      "p_matlab": 0.9999613643040001,
      "p_python": 3.863567201586576e-05,
      "p_sql": 4.238979619558049e-15,
      "p_typescript": 1.2654926238987203e-12
    },
    {
      "text": "list_odd = [] \nfor num in [3, 5, 7, 4, 8, 10]:\n    if num %2 != 0:\n        list_odd.append(num)\n        \nprint(list_odd)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.665831387330734e-19,
      "p_css": 4.722248185305289e-24,
      "p_html": 2.827142933631014e-18,
      "p_java": 5.365319439566863e-20,
      "p_javascript": 1.9424127211545746e-19,
      "p_matlab": 1.0,
      "p_python": 3.6499843899922495e-18,
      "p_sql": 2.399651508223576e-21,
      "p_typescript": 5.852001344529501e-19
    },
    {
      "text": "#!/usr/bin/env python\n\nimport argparse\nimport numpy as np\nimport sys, os\nfrom os import listdir\nimport plantcv as pcv\nimport datetime\n\n### Parse command-line arguments\ndef options():\n  parser = argparse.ArgumentParser(description=\"Get images from an SQLite database and some input information\")\n  parser.add_argument(\"-d\", \"--directory\", help=\"path to directory of images to average.\")\n  parser.add_argument(\"-o\", \"--outdir\", help=\"Output directory.\", required=False)\n  args = parser.parse_args()\n  return args\n\n\n### Functions\n\ndef average_all_img(directory,outdir):\n    allfiles=os.listdir(directory)\n    \n    path=str(directory)\n    \n    allpaths=[]\n    \n    for files in allfiles:\n        p=path+str(files)\n        allpaths.append(p)\n    \n    img, path, filename = pcv.readimage(allpaths[0])\n    n=len(allpaths)\n\n    \n    if len(np.shape(img))==3:\n        ix,iy,iz=np.shape(img)\n        arr=np.zeros((ix,iy,iz),np.float)\n    else:\n        ix,iy=np.shape(img)\n        arr=np.zeros((ix,iy,iz),np.float)\n\n    # Build up average pixel intensities, casting each image as an array of floats\n    for i,paths in enumerate(allpaths):\n        img,path,filename=pcv.readimage(allpaths[i])\n        imarr=np.array(img,dtype=np.float)\n        arr=arr+imarr/n\n\n    #Round values in array and cast as 8-bit integer\n    arr=np.array(np.round(arr),dtype=np.uint8)\n\n    pcv.print_image(arr, (str(outdir)+\"average_\"+str(allfiles[0])))\n\n\n\n### Main pipeline\n\ndef main():\n    \n  # Get options\n  args = options()\n  \n  average_all_img(args.directory, args.outdir)\n\nif __name__ == '__main__':\n  main()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999997562557045,
      "p_css": 1.9541718485448878e-07,
      "p_html": 2.3917462200451406e-08,
      "p_java": 1.2319709677428947e-11,
      "p_javascript": 1.407453803502946e-09,
      "p_matlab": 4.822872952089505e-09,
      "p_python": 4.752257045837281e-09,
      "p_sql": 1.5758223799351033e-10,
      "p_typescript": 1.3257162746471958e-08
    },
    {
      "text": "import matplotlib.pyplot as plt \n  \ndef plot_histogram(data): \n    plt.hist(data) \n    plt.title(\"Histogram\") \n    plt.xlabel(\"Values\") \n    plt.ylabel(\"Frequency\") \n    plt.show() \n\nif __name__ == \"__main__\": \n    data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] \n    plot_histogram(data)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00023375829388634287,
      "p_css": 0.02526052125393364,
      "p_html": 0.6925136161581346,
      "p_java": 7.226092261191367e-05,
      "p_javascript": 9.685579524252451e-05,
      "p_matlab": 0.00044203328195947377,
      "p_python": 0.26716366817862375,
      "p_sql": 0.006401527332105319,
      "p_typescript": 0.007815758783502295
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# Function to web scrape news from CNN\ndef scrape_cnn():\n    url = \"https://www.cnn.com/\"\n    page = requests.get(url)\n    if page.status_code != 200:\n        return False\n    soup = BeautifulSoup(page.content, 'html.parser')\n    headlines = []\n    for headline in soup.find_all('h3', {'class': 'cd__headline'}):\n        headlines.append(headline.get_text().strip())\n    return headlines\n\n# Call the function to scrape news from CNN\nheadlines = scrape_cnn()\n\n# Print out the headlines\nfor headline in headlines:\n    print(headline)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.277627736536544e-07,
      "p_css": 0.5337849469397437,
      "p_html": 0.24332918966928097,
      "p_java": 0.15894019074380225,
      "p_javascript": 0.04986734141375882,
      "p_matlab": 0.00015234139101019981,
      "p_python": 0.011373612769977762,
      "p_sql": 0.0018725000555185553,
      "p_typescript": 0.0006797492541342338
    },
    {
      "text": "# Creating a virtual environment\npython -m venv env\nsource env/bin/activate\npip install Django\n\n# Create a Django project\ndjango-admin startproject Blog\n\n# Create an app\ncd Blog\npython manage.py startapp blog_app\n\n# Install dependencies\n# Install crispy_forms to use for styling forms\npip install django-crispy-forms\n\n# Adding applications to the settings.py\n# Add the blog_app to the installed applications\nINSTALLED_APPS = [\n    # django dependencies\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    # third-party dependencies\n    'crispy_forms', \n\n    #  project applications\n    'blog_app',\n]\n\n# Add template settings to the settings.py\n# Include the templates directory in the settings\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# Register models and create the URL path\n# Create views to handle requests\n# Add templates for posts and pages\n# Configure your Django admin interface\n# Configure static and media files\n# Start the server to see the blog",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9999999969316089,
      "p_css": 5.954746151938911e-10,
      "p_html": 1.481906630445192e-11,
      "p_java": 1.225412457595755e-13,
      "p_javascript": 3.7855257759707043e-10,
      "p_matlab": 1.306331856947499e-12,
      "p_python": 1.110270673153258e-12,
      "p_sql": 6.991222655095478e-12,
      "p_typescript": 2.0700146104139576e-09
    },
    {
      "text": "import random\n\nx = random.randint(0, 10)\nprint(x)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.498201532996486e-05,
      "p_css": 0.00014332015838404945,
      "p_html": 4.250251567328787e-05,
      "p_java": 2.7163001488247874e-07,
      "p_javascript": 4.885314420749686e-06,
      "p_matlab": 2.388965184487437e-07,
      "p_python": 0.9977479515945578,
      "p_sql": 0.0020212016110305055,
      "p_typescript": 4.646264070241187e-06
    },
    {
      "text": "In Python, the length of a string can be checked by using the len() function. For example, the length of the string \"Hello World\" can be checked by using the following code:\n\nmy_string = \"Hello World\"\nprint(len(my_string))",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 1.9977907466295574e-05,
      "p_css": 4.687400744617717e-08,
      "p_html": 1.9145202858753157e-07,
      "p_java": 9.77800263112138e-13,
      "p_javascript": 0.9061136267559086,
      "p_matlab": 3.3206305027865324e-10,
      "p_python": 1.3906748108587097e-09,
      "p_sql": 3.1676671216015766e-08,
      "p_typescript": 0.09386612361020233
    },
    {
      "text": "def most_common_element(arr):\n    frequency = 0\n    most_common = None\n\n    for element in arr:\n        count = arr.count(element)\n        if count > frequency:\n            frequency = count\n            most_common = element\n\n    return most_common\n\nprint(most_common_element([3, 4, 2, 3, 5, 3, 2, 3]))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.4636770336281816e-06,
      "p_css": 3.50567196797132e-05,
      "p_html": 3.3070936853595633e-06,
      "p_java": 6.782476043222159e-07,
      "p_javascript": 1.8075260138039068e-06,
      "p_matlab": 0.9900126678987742,
      "p_python": 0.00993741594650856,
      "p_sql": 1.340386517587507e-08,
      "p_typescript": 5.589486835209824e-06
    },
    {
      "text": "d = {'a':1, 'b':2, 'c':3}\n\n# Using the clear() method\nd.clear()\n\nprint(d) # Prints an empty dictionary",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.5629660033094779,
      "p_css": 0.01608030909024276,
      "p_html": 0.006581808811891424,
      "p_java": 5.462152770626864e-05,
      "p_javascript": 0.19956262233151478,
      "p_matlab": 1.8375631832866733e-05,
      "p_python": 0.005633978547212046,
      "p_sql": 6.331112001887363e-05,
      "p_typescript": 0.209038969630103
    },
    {
      "text": "my_list = [1, 2, 3, 4, 5]\n\nsum_list = sum(my_list)\nmean_list = sum_list / len(my_list)\n\nmy_list.sort()\nmiddle_index = int(len(my_list) / 2)\n\nif len(my_list) % 2 == 0:\n median_list = (my_list[middle_index] + my_list[middle_index - 1]) / 2\nelse:\n median_list = my_list[middle_index+1]\n\nprint('sum', sum_list)\nprint('mean', mean_list)\nprint('median', median_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007558098368190902,
      "p_css": 0.003530702871930946,
      "p_html": 0.0015618761964090603,
      "p_java": 0.00509341564402142,
      "p_javascript": 0.00014948453835180988,
      "p_matlab": 3.192099776658332e-05,
      "p_python": 0.9875399381222452,
      "p_sql": 0.000845472410961989,
      "p_typescript": 0.0004913793814940507
    },
    {
      "text": "def get_times_table(x):\n  times_table = []\n  for i in range(10):\n      times_table.append(x * i)\n  return times_table",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.391412547828164e-14,
      "p_css": 2.9688635250421266e-14,
      "p_html": 2.055001595408969e-12,
      "p_java": 8.391231670933104e-15,
      "p_javascript": 4.1871482113475974e-15,
      "p_matlab": 0.9999998718997056,
      "p_python": 1.280980593272569e-07,
      "p_sql": 5.797951659327839e-16,
      "p_typescript": 6.332806196392417e-14
    },
    {
      "text": "def find_first_duplicate(arr):\n    seen = dict()\n\n    for i, n in enumerate(arr):\n        if n in seen:\n            return i\n        else:\n            seen[n] = True\n\n    return -1\n\narr = [5, 7, 9, 3, 1, 3]\nprint(find_first_duplicate(arr))\n# Output: 4",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.332881657206225e-05,
      "p_css": 0.0005830100381990372,
      "p_html": 3.541697116523493e-05,
      "p_java": 1.1684686287196462e-06,
      "p_javascript": 4.9960309524958266e-06,
      "p_matlab": 0.8765309463771521,
      "p_python": 0.12277725012769794,
      "p_sql": 7.517390788389545e-07,
      "p_typescript": 3.1314305538384965e-06
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load data\ndata = pd.read_csv(\"data.csv\")\n\n# Split data into training and test sets\nX = data[['height', 'weight']]\ny = data['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint(\"Model Accuracy: {:.2f}\".format(score))",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.004263945132094545,
      "p_css": 0.5827791307715093,
      "p_html": 0.019816766067491783,
      "p_java": 4.2244079154311365e-05,
      "p_javascript": 5.364593311727996e-06,
      "p_matlab": 1.094188948729276e-05,
      "p_python": 0.3911980743897756,
      "p_sql": 5.212969150851172e-06,
      "p_typescript": 0.0018783201080247362
    },
    {
      "text": "def function(arg):\n    for i in arg:\n        print(i)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.000286373197400086,
      "p_css": 0.0021039312191030736,
      "p_html": 0.0012253598027071877,
      "p_java": 1.3081745963661495e-05,
      "p_javascript": 0.9189975868226806,
      "p_matlab": 0.05930385784849311,
      "p_python": 0.016932285499618793,
      "p_sql": 0.0010515574231326921,
      "p_typescript": 8.596644090078143e-05
    },
    {
      "text": "def number_of_common_letters(s1, s2):\n    common_letters = 0\n    for c in s1:\n        if c in s2:\n            common_letters += 1\n    return common_letters",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.000504505440164818,
      "p_css": 0.002696179390622469,
      "p_html": 0.001659992546634619,
      "p_java": 4.598619966519678e-05,
      "p_javascript": 0.00030932146828305864,
      "p_matlab": 0.6566766436708144,
      "p_python": 0.3361472695787962,
      "p_sql": 0.0012457804400904972,
      "p_typescript": 0.0007143212649287116
    },
    {
      "text": "def last_characters(string):\n return string[-3:]",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.839318516909983e-23,
      "p_css": 1.8535574305719918e-13,
      "p_html": 5.874216272131269e-15,
      "p_java": 0.9999999982369607,
      "p_javascript": 6.664960335197061e-26,
      "p_matlab": 2.8201882724120404e-19,
      "p_python": 1.7434527504454368e-09,
      "p_sql": 1.9394688900596057e-11,
      "p_typescript": 7.059484647344903e-16
    },
    {
      "text": "def count_frequency(arr):\n    freq_dict = {}\n    for ele in arr: \n        if ele in freq_dict: \n            freq_dict[ele] += 1\n        else: \n            freq_dict[ele] = 1\n    return freq_dict\n\narr = ['a', 'a', 'b', 'a', 'c', 'a']\nresult = count_frequency(arr)\n\nprint(result) # Output: {'a': 4, 'b': 1, 'c': 1}",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 0.0009819139081521345,
      "p_css": 0.010065993698076979,
      "p_html": 0.0009250182105500207,
      "p_java": 0.00010470999421779524,
      "p_javascript": 0.0003691996400791334,
      "p_matlab": 0.7387145189185955,
      "p_python": 0.24823524229274185,
      "p_sql": 8.036727482498788e-05,
      "p_typescript": 0.0005230360627615913
    },
    {
      "text": "maxVal = 0\nmaxItem = {}\nfor item in items:\n if item['price'] > maxVal:\n maxVal = item['price']\n maxItem = item\n\nprint(\"The item with the highest price is: \", maxItem)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0007500740428173055,
      "p_css": 0.18961221794360142,
      "p_html": 0.014712763061151731,
      "p_java": 3.242755116501222e-05,
      "p_javascript": 0.593036939261596,
      "p_matlab": 0.0008088764129005189,
      "p_python": 0.20022803448114126,
      "p_sql": 0.0001102961462365627,
      "p_typescript": 0.0007083710993902546
    },
    {
      "text": "#O(n^2)\ndef order_without_nlogn(arr): \n\tn = len(arr)\n\n\t# Traverse through all array elements \n\tfor i in range(n): \n\t\n\t\t# Last i elements are already in place \n\t\tfor j in range(0, n-i-1): \n\t\t\n\t\t\t# traverse the array from 0 to n-i-1 \n\t\t\t# Swap if the element found is greater \n\t\t\t# than the next element\n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_without_nlogn(arr) \n\n# O(nlogn)\ndef order_with_nlogn(arr): \n\tarr.sort() \n\n# Driver code to test above \narr = [3, 5, 2, 1, 4]\norder_with_nlogn(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.0340292638734775e-07,
      "p_css": 2.3676681159863537e-07,
      "p_html": 1.1472995466629879e-07,
      "p_java": 1.8433632797574827e-07,
      "p_javascript": 1.3083293436356708e-06,
      "p_matlab": 0.9939189856823276,
      "p_python": 0.00565353718126941,
      "p_sql": 4.3208613258524315e-08,
      "p_typescript": 0.00042528636242543236
    },
    {
      "text": "def nextPowerOf2Generator(n): \n    power = 1\n    while True: \n        pow_val = power * 2\n        yield pow_val \n        power = pow_val \n  \nn = 4\n\nfor i in nextPowerOf2Generator(n):\n    if i > n:\n        print(i)\n        break",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0013280441144411707,
      "p_css": 0.005858281773174229,
      "p_html": 0.0024798277123318168,
      "p_java": 0.0001283393457461644,
      "p_javascript": 0.00040168488985799667,
      "p_matlab": 0.7702693854288647,
      "p_python": 0.21726510599491883,
      "p_sql": 0.0009090135057979606,
      "p_typescript": 0.0013603172348671693
    },
    {
      "text": "#!/usr/bin/python3    \n\n\t#Artifical load profile generator v1.1, generation of artificial load profiles to benchmark demand side management approaches\n    #Copyright (C) 2018 Gerwin Hoogsteen\n\n    #This program is free software: you can redistribute it and/or modify\n    #it under the terms of the GNU General Public License as published by\n    #the Free Software Foundation, either version 3 of the License, or\n    #(at your option) any later version.\n\n    #This program is distributed in the hope that it will be useful,\n    #but WITHOUT ANY WARRANTY; without even the implied warranty of\n    #MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    #GNU General Public License for more details.\n\n    #You should have received a copy of the GNU General Public License\n    #along with this program.  If not, see <http://www.gnu.org/licenses/>.\n    \n    \n\n    \n#This is an example configuration file!\n\n# Select the output writer\nimport writer as writer\n\n#Random seed\nseed = 42\n\n#input files:\nweather_irradiation = 'input/weather/solarirradiation_twenthe.csv'\nweather_timebaseDataset = 3600 #in seconds per interval\n\n\n#Simulation:\n#number of days to simulate and skipping of initial days. Simulation starts at Sunday January 1.\nnumDays = 365\t\t\t# number of days\nstartDay = 0\t\t\t# Initial day\n\n\n#Select the geographic location. Refer to the Astral plugin to see available locations (or give a lon+lat)\n# Use e.g. https://www.latlong.net/\nfrom astral import Location\n\nlocation = Location()\nlocation.solar_depression = 'civil'\nlocation.latitude = 52.239095\nlocation.longitude = 6.857018\nlocation.timezone = 'Europe/Amsterdam'\nlocation.elevation = 0\n\n#Select the devices in the neighbourhood\n\n#Devices\n#Scale overall consumption:\nconsumptionFactor = 1.0 #consumption was a bit too high\n\n# Penetration of emerging technology in percentages\n# all values must be between 0-100\n# These indicate what percentage of the houses has a certain device\n\n# Electric mobility, restriction that the sum <= 100\n# Note, households with larger driving distances will receive EVs first\npenetrationEV \t\t\t\t= 13\npenetrationPHEV \t\t\t= 32\n\n# PV and storage, restriction that Battery <= PV\n# Note PV and battery size depend on the annual household consumption\n# This emulates the Dutch \"nul-op-the-meter regime (net zero annual electricity usage)\npenetrationPV\t\t\t\t= 50\npenetrationBattery \t\t\t= 10\t#Note only houses with PV will receive a battery!\n\n# Heating systems, with restriction that the sum <= 100\npenetrationHeatPump \t\t= 25\npenetrationCHP\t\t\t\t= 5\t\t# Combined heat and power\n\npenetrationInductioncooking = 25\n\n\n#Device parameters:\n#EV\ncapacityEV = \t42000\t#Wh\npowerEV = \t\t7400\t#W\ncapacityPHEV = \t12000\t#Wh\npowerPHEV = \t3700\t#W\n\n#PV\nPVProductionPerYear = \t220\t\t#average kWh per m2 solar panel on annual basis\nPVAngleMean = \t\t\t35 \t\t#degrees, 0 is horizontal to earth surface\nPVAngleSigma = \t\t\t10\t\t#degrees\nPVAzimuthMean = \t\t180 \t#degrees, 0 is north, 90 is east\nPVAzimuthSigma = \t\t90 \t\t#degrees\nPVEfficiencyMin = \t\t15\t\t#% of theoretical max\nPVEfficiencyMax = \t\t20\t\t#% of theoretical max\n\n#Driving distances\ncommuteDistanceMean = \t25\t\t#km\ncommuteDistanceSigma = \t10\t\t#km\n\n\n#Battery\ncapacityBatteryLarge = \t12000 \t#Wh\ncapacityBatteryMedium = 5000  \t#Wh\ncapacityBatterySmall = \t2000 \t#Wh\npowerBatteryLarge = \t3700 \t#W\npowerBatteryMedium = \t3700  \t#W\npowerBatterySmall = \t3700 \t#W\n\n\n#Kitchen\n#Consumption of devices\nConsumptionOven = \t\t\t\t2000\t#W\nConsumptionMicroWave = \t\t\t800\t\t#W\nConsumptionStoveVentilation = \t120 \t#W #But this is maximum, usually set lower!\nConsumptionInductionStove = \t2200 \t#W #http://homeguides.sfgate.com/many-watts-induction-stove-85380.html\n\nConsumptionFridgeBigMin = \t\t80\t\t#W\nConsumptionFridgeBigMax = \t\t120\t\t#W\nConsumptionFridgeSmallMin = \t50\t\t#W\nConsumptionFridgeSmallMax = \t80\t\t#W\n\nConsumptionKettle = \t\t\t2000\t#W\n\n#White goods\nConsumptionIron = \t\t\t\t2000\t#W\nConsumptionVacuumcleaner = \t\t1500\t#W\n\n#House\nConsumptionHouseVentilation = \t50 \t\t#W\n\n\n#Household randomization\n#all values must be between 0-1000\nfamilyOutingChanceMin = \t\t\t10 \t#percentage\nfamilyOutingChanceMax = \t\t\t20 \t#percentage\npersonWeekdayActivityChanceMin = \t20 \t#percentage\npersonWeekdayActivityChanceMax = \t30 \t#percentage\npersonWeekendActivityChanceMin = \t20 \t#percentage\npersonWeekendActivityChanceMax = \t30 \t#percentage\n\n\n\nhouseholdList = []\n\n#Select the types of households\nimport households\n\nfor i in range(0,1):\n\thouseholdList.append(households.HouseholdSingleWorker())\n\nfor i in range(0,2):\n\thouseholdList.append(households.HouseholdSingleRetired())\n\nfor i in range(0,1):\n\thouseholdList.append(households.HouseholdDualWorker(True))\n\nfor i in range(0,1):\n\thouseholdList.append(households.HouseholdDualWorker(False))\n\nfor i in range(0,2):\n\thouseholdList.append(households.HouseholdDualRetired())\n\nfor i in range(0,2):\n\thouseholdList.append(households.HouseholdFamilyDualWorker(True))\n\nfor i in range(0,1):\n\thouseholdList.append(households.HouseholdFamilyDualWorker(False))\n",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.00011926677767388108,
      "p_css": 7.655913760544518e-05,
      "p_html": 0.00038972273369592764,
      "p_java": 0.00018571238403878148,
      "p_javascript": 5.480165615331301e-06,
      "p_matlab": 8.642328847629686e-05,
      "p_python": 9.51881992572661e-06,
      "p_sql": 5.179580956918246e-05,
      "p_typescript": 0.9990755208833993
    },
    {
      "text": "def contains_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in string:\n        if char in vowels:\n            return True\n    return False\n\nprint(contains_vowels(\" hello, how are you\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.931311989930972e-07,
      "p_css": 0.0009685428039714597,
      "p_html": 9.925809930499433e-05,
      "p_java": 0.0003440507131554457,
      "p_javascript": 9.935563873479781e-09,
      "p_matlab": 5.919904491280728e-06,
      "p_python": 0.9974017315484446,
      "p_sql": 0.0011468601094593823,
      "p_typescript": 3.3333754409831786e-05
    },
    {
      "text": "# import packages\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\n# create linear regression object\nreg = LinearRegression()\n\n# create polynomial features\npoly = PolynomialFeatures(degree = 2)\nx_poly = poly.fit_transform(X_train)\n\n# fit the linear regression model with the polynomial features\nreg.fit(x_poly, y_train)\n\n# predict the y-values using the regression model\ny_pred = reg.predict(poly.fit_transform(X_test))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.49869595726089605,
      "p_css": 0.08775871107676783,
      "p_html": 0.012996088490711502,
      "p_java": 8.353802787134973e-05,
      "p_javascript": 0.004825593710578501,
      "p_matlab": 0.000267326477459976,
      "p_python": 0.12510521625981633,
      "p_sql": 1.801748183862847e-05,
      "p_typescript": 0.2702495512140597
    },
    {
      "text": "def is_armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n\n    while temp > 0:\n        remainder = temp % 10\n        sum += remainder ** order\n        temp //= 10\n\n    if sum == num:\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.0683391094994137e-10,
      "p_css": 1.3493564887066703e-11,
      "p_html": 4.917097257543181e-09,
      "p_java": 1.00132522279895e-09,
      "p_javascript": 1.6383899017596842e-09,
      "p_matlab": 0.9999999918475281,
      "p_python": 2.4699034551229506e-10,
      "p_sql": 1.8672778149848404e-11,
      "p_typescript": 1.0966905777496852e-10
    },
    {
      "text": "def dfs(graph, start):\n    visited, stack = set(), [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.add(vertex)\n            stack.extend(graph[vertex] - visited)\n    return visited",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.060757492944863246,
      "p_css": 0.1871483553454414,
      "p_html": 0.021652427576173527,
      "p_java": 0.006878099832101338,
      "p_javascript": 0.0029148628538533962,
      "p_matlab": 0.002842635330020203,
      "p_python": 0.70249693418119,
      "p_sql": 0.00371318547862718,
      "p_typescript": 0.01159600645772974
    },
    {
      "text": "\"\"\"\nGenerate a sentence based on the input text\n\"\"\"\n\nimport random\n\n#get the user input\nuser_input = \"The quick brown fox jumps over the lazy dog.\"\n\n#split the string into a list of words\nword_list = user_input.split()\n\n#shuffle the list\nrandom.shuffle(word_list)\n\n#convert the list back to a string\ngenerated_sentence = ' '.join(word_list)\n\n#print the generated sentence\nprint(generated_sentence)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 6.689435642432442e-06,
      "p_css": 0.0014326336813373557,
      "p_html": 0.0001312299753177849,
      "p_java": 3.896735176777799e-05,
      "p_javascript": 1.3466180155145958e-05,
      "p_matlab": 3.5836452311235017e-07,
      "p_python": 0.020756934831255545,
      "p_sql": 0.9573491855252365,
      "p_typescript": 0.020270534654764156
    },
    {
      "text": "def factorial(n):\nif (n == 0):\n  return 1\nelse:\n  return n * factorial(n-1)\n\nprint(factorial(5))  # Should print 120",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.793511116623568e-05,
      "p_css": 0.00014543534335222463,
      "p_html": 7.420862874727573e-05,
      "p_java": 1.806135088207432e-06,
      "p_javascript": 3.79301661060605e-05,
      "p_matlab": 1.5192011973337216e-05,
      "p_python": 0.9994131477417235,
      "p_sql": 9.40748838497863e-06,
      "p_typescript": 0.00026493737345817153
    },
    {
      "text": "def binary_to_decimal(binary_number):\n    decimal_number = 0\n    for digit in binary_number:\n        decimal_number = decimal_number*2 + int(digit)\n    return decimal_number\n\nbinary_number = \"1010\"\n\nprint(binary_to_decimal(binary_number)) # 10",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.012998440187321263,
      "p_css": 0.027327792248530675,
      "p_html": 0.030433695222705164,
      "p_java": 0.04556440288382651,
      "p_javascript": 0.006845732580943876,
      "p_matlab": 0.0016952453209096755,
      "p_python": 0.8629285503919277,
      "p_sql": 0.0020354025083379884,
      "p_typescript": 0.01017073865549707
    },
    {
      "text": "# sentiment_rating function takes in a string of text \n# and returns a sentiment score from -1 to 1\ndef sentiment_rating(text):\n    # Create a sentiment analyzer object\n    sentiment_analyzer = SentimentIntensityAnalyzer()\n \n    # Calculate the sentiment score\n    sentiment_score = sentiment_analyzer.polarity_scores(text)\n\n    return sentiment_score['compound']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001858323678406492,
      "p_css": 0.06985242473884493,
      "p_html": 0.0006305875497647568,
      "p_java": 0.005049617525745726,
      "p_javascript": 0.023729393658998954,
      "p_matlab": 0.0005278292468749863,
      "p_python": 0.6954548139400196,
      "p_sql": 0.012633712507441877,
      "p_typescript": 0.19193578846446863
    },
    {
      "text": "x = 10\ny = 20\n\nsum = x + y\n\nprint(sum) # Output: 30",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.05185842594274103,
      "p_css": 0.12911973697221063,
      "p_html": 0.060321230165576424,
      "p_java": 0.02725446175282098,
      "p_javascript": 0.004078337629408272,
      "p_matlab": 0.003613967332877745,
      "p_python": 0.7217334374790888,
      "p_sql": 0.0011628638593440457,
      "p_typescript": 0.0008575388659319873
    },
    {
      "text": "import re\nimport operator\n \ninput_string = \"\"\"top\n \nPID\tUSER\t  PR\tNI\tVIRT\tRES\tSHR\tS\t%CPU\t%MEM\tTIME+\tCOMMAND\n 1\troot\t  20\t0\t 759236\t9740\t8116\tS\t0.0\t 0.0\t 0:00.68\tinit\n[truncated for brevity]\n\n885\tdnsmasq\t 20\t0\t 97128\t8108\t5556\tS\t0.0\t0.1\t 0:00.37\tdnsmasq\n 886\tdbus-daem\t 20\t0\t  12744\t1420\t1204\tS\t0.0\t 0.0\t 0:00.02\tdbus-daemon\n 887\tNetworkMa\t 20\t0\t 71965\t3164\t2152\tS\t0.0\t 0.1\t 0:00.08\tNetworkManager\n 888\tavahi-daem\t 20\t0\t  12088\t1332\t1072\tS\t0.0\t 0.0\t 0:00.00\tavahi-daemon\n 889\tavahi-daem\t 20\t0\t  12084\t1332\t1072\tS\t0.0\t 0.0\t 0:00.00\tavahi-daemon\"\"\"\n\n# Find all of the entries \nprocesses = re.findall(r'(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+(.*?)\\s+', input_string)\n\n# Create a list of tuples for each process \nprocess_list = [(process[4],process[5], process[0], process[11]) for process in processes]\n\n# Sort the list based on memory \nsorted_list = sorted(process_list,key=operator.itemgetter(1), reverse=True)\n\n# List the top 5 processes\nprint(\"Top 5 processes taking the most memory:\")\nfor i in range(5):\n    print(sorted_list[i][2], sorted_list[i][3], \"-\", str(sorted_list[i][1])+\"KB\")\n    \n # Output: \n # Top 5 processes taking the most memory:\n # init init - 9740KB\n # dnsmasq dnsmasq - 8108KB\n # NetworkManager NetworkManager - 3164KB\n # avahi-daemon avahi-daemon - 1332KB\n # avahi-daemon avahi-daemon - 1332KB",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009728438041138076,
      "p_css": 0.006536197324649078,
      "p_html": 0.09118534054320317,
      "p_java": 0.00024912851409574866,
      "p_javascript": 0.019744782240869063,
      "p_matlab": 0.008161174892893327,
      "p_python": 0.7864069808806898,
      "p_sql": 0.01710016853994798,
      "p_typescript": 0.06088778902251373
    },
    {
      "text": "# -*- coding: utf-8 -*-\r\n# Author : https://github.com/kmlee408\r\n#          https://github.com/jeonghoonkang\r\n\r\n'''\r\n    부산 URL= http://openapi.airkorea.or.kr/openapi/services/rest/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?serviceKey=fCRWi0DoCfoCPMHyDwai3trva10y4qb8mh9aysoHzvLKDWw6Q2bWOsvuM4%2BsRdvE4dPiKqBFD7vj7%2FM2noCe2g%3D%3D&ver=1.3&pageSize=10&pageNo=1&sidoName=%EB%B6%80%EC%82%B0&startPage=1&numOfRows=100\r\n\r\n    실행 방법=  $python mdust_pusan.py\r\n    (지역을 바꾸고 싶으면 misaemunji 함수 안에 location = '경기'  와 같은 식으로 변경)\r\n    (측정 가능 지역: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종)\r\n    '''\r\n    \r\nimport requests\r\nfrom urllib import urlencode, quote_plus\r\nfrom bs4 import BeautifulSoup\r\nimport pandas as pd\r\nimport keytxt\r\n\r\n   # 서비스키는 data.go.kr 에서 받아야 함\r\n   # https://www.data.go.kr/dataset/15000581/openapi.do?mypageFlag=Y\r\n\r\nservice_key = keytxt.key\r\n\r\ndef misaemunji(service_key, location=None, spot=None):\r\n\r\n    #location으로 가능한 것: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종\r\n    \r\n    #시도별 실시간 측정 조회 api\r\n    URL ='http://openapi.airkorea.or.kr/openapi/services/rest/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?serviceKey='\r\n\r\n    # URL 인자 설정 및 인코딩\r\n    queryParams = '&' + urlencode({quote_plus('numOfRows') : '100', # 최대로 설정\r\n                                   quote_plus('pageSize'): '10',\r\n                                   quote_plus('pageNo') : '1',\r\n                                   quote_plus('startPage') :'1',\r\n                                   quote_plus('sidoName') : location,\r\n                                   quote_plus('ver') : '1.3'\r\n                                   })\r\n\r\n    if location == None : \r\n        exit ('you shoud write location such like 부산')\r\n\r\n    r = requests.get(URL+service_key+queryParams)\r\n    html = r.text\r\n    soup = BeautifulSoup(html, 'html.parser') #parsing\r\n    info_ = soup.select('item')\r\n\r\n    misae_station = {}\r\n    for info__ in info_:\r\n        datetime_ = info__.datatime.text \r\n        list_ = [str(info__.pm10value.text),str(info__.pm25value.text)]\r\n            # list 미세먼지 측정값 2가지\r\n        misae_station[info__.stationname.text.encode('utf-8')] =list_\r\n            # misae_station 은 기상대 이름별로 pm2.5, pm10 데이터를 담고 있음\r\n    \r\n    #dataframe 생성\r\n    index_list = ['미세먼지10','초미세먼지2.5']\r\n    df = pd.DataFrame(misae_station, index = index_list) \r\n    if spot != None :\r\n        if spot in misae_station:\r\n            '''\r\n            print('측정시간 : ' + str(datetime_)), 2018-11-08 20:00\r\n            print('측정지역 : ')\r\n            print(location)\r\n            print(spot) \r\n            print('(단위 : ㎍/㎥)')\r\n            print misae_station[spot][1]\r\n                '''\r\n            return (str(datetime_), str(spot), 'pm2.5', misae_station[spot][1]  )\r\n    \r\ndef get_public_mise(loc='서울', station='강남구'):\r\n    \r\n    kangnam = misaemunji(service_key, location=loc, spot=station) \r\n    return kangnam\r\n\r\nif __name__ == '__main__':\r\n    \r\n    kangnam = misaemunji(service_key, location='서울', spot='강남구') \r\n    #location으로 가능한 것: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종\r\n    print kangnam\r\n\r\n\r\n",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 8.425386202865032e-08,
      "p_css": 0.0318682813252367,
      "p_html": 0.9513306088611265,
      "p_java": 0.013870378042981796,
      "p_javascript": 7.651378304880256e-05,
      "p_matlab": 2.647739041119617e-05,
      "p_python": 0.002190849335738136,
      "p_sql": 0.0004640535636770019,
      "p_typescript": 0.00017275344391797596
    },
    {
      "text": "import sys\n\nclass ConnectFour:\n\n# Variables\n \n C4_COLUMNS = 7\n C4_ROWS = 6\n \n def __init__(self):\n self.field = [[0 for i in range(self.C4_COLUMNS)] for i in range(self.C4_ROWS)]\n \n def print_field(self):\n for r in range(self.C4_ROWS):\n for c in range(self.C4_COLUMNS):\n print(self.field[r][c], end = \" \")\n \n print()\n\n# Create the game\ndef populate_field(self):\n \n # The field needs to be populated \n # with pieces of two players:\n # 1 - player 1, 2 - player 2\n \n player = 1\n \n print(\"Player {} is at turn\".format(player))\n while True:\n \n # Take column from the player\n column = int(input(\"Choose a column (0-6): \"))\n if  0 <= column < self.C4_COLUMNS:\n \n # Check if there is room in the column\n if self.field[0][column] == 0:\n \n # Place the piece in the lowest\n # empty space in the column\n for r in reversed(range(self.C4_ROWS)):\n if self.field[r][column] == 0:\n self.field[r][column] = player\n break\n \n # Check conditions for victory\n if self.check_victory(player, r, column):\n print(\"Player {} won!\".format(player))\n sys.exit()\n \n # Change player\n player = 1 if player == 2 else 2\n \n else:\n # Column number is not correct\n print(\"Column number is not correct\")\n else:\n print(\"Column is full!\")\n \n # Print the field\n self.print_field()\n \n print(\"Player {} is at turn\".format(player))\n \n# Check victory condition\ndef check_victory(self, player, r, column):\n \n # Check the same pieces\n # in horizontal direction\n cnt_horizontal = 0\n for c in range(self.C4_COLUMNS):\n if self.field[r][c] == player:\n cnt_horizontal += 1\n \n if cnt_horizontal == 4:\n return True\n \n # Check the same pieces\n # in vertical direction\n cnt_vertical = 0\n for rr in range(self.C4_ROWS):\n if self.field[rr][column] == player:\n cnt_vertical += 1\n \n if cnt_vertical == 4:\n return True\n \n # Check the same pieces\n # in diagonal direction\n cnt_diagonal1 = 0\n rrr = r\n ccc = column\n \n # Go up-left\n while rrr >= 0 and ccc >= 0:\n if self.field[rrr][ccc] == player:\n cnt_diagonal1 += 1\n rrr -= 1\n ccc -= 1\n \n # Go down-right\n rrr = r\n ccc = column\n while rrr < self.C4_ROWS and ccc < self.C4_COLUMNS:\n if self.field[rrr][ccc] == player:\n cnt_diagonal1 += 1\n rrr += 1\n ccc += 1\n \n if cnt_diagonal1 == 4:\n return True\n \n # Check for another diagonal\n cnt_diagonal2 = 0\n rrr = r\n ccc = column\n \n # Go up-right\n while rrr >= 0 and ccc < self.C4_COLUMNS:\n if self.field[rrr][ccc] == player:\n cnt_diagonal2 += 1\n rrr -= 1\n ccc += 1\n \n # Go down-left\n rrr = r\n ccc = column\n while rrr < self.C4_ROWS and ccc >= 0:\n if self.field[rrr][ccc] == player:\n cnt_diagonal2 += 1\n rrr += 1\n ccc -= 1\n \n if cnt_diagonal2 == 4:\n return True\n \n return False\n\n# Create the game\nif __name__ == '__main__':\n game = ConnectFour()\n game.populate_field()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010443749312157172,
      "p_css": 0.007959580802039012,
      "p_html": 0.06009285722605387,
      "p_java": 1.7911658719695792e-05,
      "p_javascript": 0.0003151003704824468,
      "p_matlab": 0.024009228918856818,
      "p_python": 0.5525120934474547,
      "p_sql": 0.3155601552602117,
      "p_typescript": 0.038488697384965985
    },
    {
      "text": "list1 = [1, 2, 3, 4] \nlist2 = [5, 6, 7, 8] \n\n#create an empty list\nlist3 = []\n\n#iterate through each item in the two lists\nfor x, y in zip(list1, list2):\n    #append each tuple as a single element in the new list\n    list3.append((x, y))\n\nprint(list3)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016689990572961648,
      "p_css": 0.02050164434474127,
      "p_html": 0.028408260014719845,
      "p_java": 0.007098755291144742,
      "p_javascript": 0.07189868881185581,
      "p_matlab": 0.22623821807827368,
      "p_python": 0.581888505068165,
      "p_sql": 0.0023026312481869695,
      "p_typescript": 0.059994298085616585
    },
    {
      "text": "class TotalPriceCalculator():\n    def __init__(self):\n        self.total_price = 0\n    \n    def add_item(self,price):\n        self.total_price+=price\n    \n    def get_total_price(self):\n        return self.total_price",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002203034007475526,
      "p_css": 0.01902437794016461,
      "p_html": 0.03171843660106876,
      "p_java": 2.1546975902667756e-05,
      "p_javascript": 6.755753536009968e-05,
      "p_matlab": 9.186717866243395e-06,
      "p_python": 0.9005522780966989,
      "p_sql": 0.04787839699316989,
      "p_typescript": 0.0005079157390213081
    },
    {
      "text": "def is_anagram(w1, w2):\n    # Check if lengths are equal\n    if len(w1) == len(w2):\n        # Sort the strings\n        s1 = sorted(w1)\n        s2 = sorted(w2)\n        # Check if sorted strings are equal\n        if s1 == s2:\n            return True\n    return False\n\n# Example\nw1 = \"silent\"\nw2 = \"listen\"\n\nprint(is_anagram(w1, w2)) #Output: True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0022573856153494444,
      "p_css": 0.013546609244563662,
      "p_html": 0.0058198168597196126,
      "p_java": 0.0005990366667720215,
      "p_javascript": 0.0019664138756735746,
      "p_matlab": 0.0016860981927956605,
      "p_python": 0.9689403915910625,
      "p_sql": 0.00353772834501748,
      "p_typescript": 0.0016465196090458423
    },
    {
      "text": "def is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.6035316687586582e-12,
      "p_css": 3.608369765679841e-18,
      "p_html": 2.6560576365036158e-11,
      "p_java": 8.069584230411778e-14,
      "p_javascript": 1.7825873837392689e-13,
      "p_matlab": 0.9999996091849386,
      "p_python": 3.9078415884261144e-07,
      "p_sql": 1.008457847876096e-12,
      "p_typescript": 4.710651286960588e-13
    },
    {
      "text": "def are_all_characters_unique(string): \n    return len(set(string)) == len(string) \n\n# Driver code \nprint(are_all_characters_unique(\"Hello\")) # Output: false\nprint(are_all_characters_unique(\"abcdef\")) # Output: true",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.524855024400265e-07,
      "p_css": 0.00010636337175131625,
      "p_html": 5.548258945203895e-05,
      "p_java": 0.7342061276237877,
      "p_javascript": 7.060441100310464e-11,
      "p_matlab": 1.4845750035664505e-10,
      "p_python": 0.2653604226540987,
      "p_sql": 0.00027074654878150894,
      "p_typescript": 7.045075645107007e-07
    },
    {
      "text": "def hanoi(n, source, aux, dest):\n if n == 1:\n  print('Move disk 1 from {0} to {1}'.format(source, dest))\n else:\n  hanoi(n-1, source, dest, aux)\n  print('Move disk {0} from {1} to {2}'.format(n, source, dest))\n  hanoi(n-1, aux, source, dest)\n\n# Driver program\nn = 4\nhanoi(n, 'a', 'b', 'c')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.2332800029792819,
      "p_css": 0.08284397895096977,
      "p_html": 0.02802091567550683,
      "p_java": 0.00045901371053981,
      "p_javascript": 0.0068298107287711775,
      "p_matlab": 0.004764074181898676,
      "p_python": 0.6218790643164367,
      "p_sql": 0.00732270294999331,
      "p_typescript": 0.014600436506601745
    },
    {
      "text": "list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']\n\n# sort strings by length\nlist_of_strings.sort(key=len)\n\n# print sorted list\nprint(list_of_strings)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00139586360132316,
      "p_css": 0.07572316004678704,
      "p_html": 0.008453059246897281,
      "p_java": 0.00020428451508394712,
      "p_javascript": 0.027799737175549254,
      "p_matlab": 0.0005086995956053644,
      "p_python": 0.8704331066122392,
      "p_sql": 0.014893157598166283,
      "p_typescript": 0.0005889316083484001
    },
    {
      "text": "def extract_words(word_list, given_letter):\n    extracted_words=[]\n    for word in word_list:\n        if word[0]==given_letter:\n            extracted_words.append(word)\n    return extracted_words",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.11008282492271411,
      "p_css": 0.007981942142771153,
      "p_html": 0.028348974688699853,
      "p_java": 7.154007626890375e-05,
      "p_javascript": 0.000993794598464082,
      "p_matlab": 0.5536173480283864,
      "p_python": 0.2911758866634404,
      "p_sql": 0.00564721877277427,
      "p_typescript": 0.002080470106480784
    },
    {
      "text": "# convert days\ndef convert_days(days):\n  years = days // 365\n  months = (days % 365) // 30\n  days = (days % 365) % 30 \n  return (years, months, days)\n\n# test\ndays = 900\nyears, months, days = convert_days(days)\nprint(\"Number of years =\", years) \nprint(\"Number of months =\", months) \nprint(\"Number of days =\", days)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009471741126667457,
      "p_css": 0.011965296916388384,
      "p_html": 0.005067447210566517,
      "p_java": 0.0004626418035572408,
      "p_javascript": 0.002238884129772718,
      "p_matlab": 0.0005311972611223558,
      "p_python": 0.9719979582250798,
      "p_sql": 0.001645295500178484,
      "p_typescript": 0.005144104840667704
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scraper(url):\n  response = requests.get(url)\n  html = response.content\n  soup = BeautifulSoup(html, 'lxml')\n\n  reviews_container = soup.find_all('div', class_='review_container')\n  \n  reviews = []\n  for review in reviews_container:\n    rating = review.find('span', attrs={'class': 'rating'}).text\n    description = review.find('p', class_='review_description').text\n    reviews.append((rating, description))\n\n  return reviews\n\nurl = 'https://www.example.com/hotels/reviews'\nreviews = scraper(url)",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 4.938650773749297e-13,
      "p_css": 0.035307601825543364,
      "p_html": 0.06611252791369712,
      "p_java": 0.8985056337952225,
      "p_javascript": 1.9394918729551258e-06,
      "p_matlab": 5.269810405191276e-07,
      "p_python": 5.846840321523027e-05,
      "p_sql": 1.1459229092253292e-05,
      "p_typescript": 1.8423598221179132e-06
    },
    {
      "text": "# empty list to store the numbers\nnum_list = []\n\n# read the user input\nwhile True:\n\n    # read the input and add to the list\n    user_input = input(\"Enter a number: \")\n    if user_input == \"\":\n        break\n    else:\n        num_list.append(int(user_input))\n    \n# calculate the total\ntotal = 0\nfor num in num_list:\n    total += num\n\n# display the result\nprint(\"The total is: \", total)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.022417152059415676,
      "p_css": 0.001349484597636799,
      "p_html": 0.004487420289556223,
      "p_java": 0.003822243586917132,
      "p_javascript": 0.031933500042194744,
      "p_matlab": 0.0007023249686567099,
      "p_python": 0.4854804412272711,
      "p_sql": 0.002080358501011489,
      "p_typescript": 0.44772707472734
    },
    {
      "text": "import dialogflow_v2 as dialogflow\nimport requests\n\nproject_id = 'project-id'\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path(project_id, 'session-id')\n\nwhile True:\n text = input('User: ')\n text_input = dialogflow.types.TextInput(text=text, language_code='en-US')\n query_input = dialogflow.types.QueryInput(text=text_input)\n response = session_client.detect_intent(session=session, query_input=query_input)\n\n print('Assistant:', response.query_result.fulfillment_text)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.017716047574342194,
      "p_css": 0.47109967343019193,
      "p_html": 0.03807867315063678,
      "p_java": 0.0005566327022264933,
      "p_javascript": 0.000984869001650355,
      "p_matlab": 0.0027346687929135504,
      "p_python": 0.43278501852498125,
      "p_sql": 0.0075997869516967785,
      "p_typescript": 0.028444629871360757
    },
    {
      "text": "#!/usr/bin/env python\n\nimport csv\n\ntotal_attendees = 0\nwith open('attendance.csv', 'r') as csv_file:\n    csv_reader = csv.reader(csv_file)\n    for row in csv_reader:\n        total_attendees += 1\n\nprint(f'Total Attendees: {total_attendees}')",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.989221475426631,
      "p_css": 0.0015116241286599226,
      "p_html": 0.0007206882871143677,
      "p_java": 1.7066929218969168e-06,
      "p_javascript": 0.00012019476607627206,
      "p_matlab": 0.00031855546100164397,
      "p_python": 0.0071396528263191214,
      "p_sql": 0.00022419816769873556,
      "p_typescript": 0.0007419042435770915
    },
    {
      "text": "#import itertools \n  \n# initialize empty list to hold all anagrams \nword_pairs = [] \n  \n# enter the source text  \nsource_text = input(\"Enter the source text: \") \n  \n# split the source text into individual words\nwords = source_text.split() \n  \nfor word1, word2 in itertools.combinations(words,2): \n    if (sorted(word1) == sorted(word2)): \n        word_pairs.append((word1, word2)) \n  \n# print the list of anagram pairs in source text  \nprint(word_pairs)",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.0017627665697466887,
      "p_css": 0.026350652385355586,
      "p_html": 0.009525169836081761,
      "p_java": 2.6352468846199573e-05,
      "p_javascript": 0.008201030280513092,
      "p_matlab": 0.005946939874647894,
      "p_python": 0.4619721456029941,
      "p_sql": 0.47538219891797406,
      "p_typescript": 0.010832744063840598
    },
    {
      "text": "list = [5, 2, 8, 1]\nlist.sort() \nprint(list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009042762661031116,
      "p_css": 0.007101031420308626,
      "p_html": 0.005730385962891198,
      "p_java": 0.0002625576964697235,
      "p_javascript": 0.0033674230682344255,
      "p_matlab": 0.023184106832915823,
      "p_python": 0.8527007261868585,
      "p_sql": 0.10465400980229436,
      "p_typescript": 0.0020954827639242195
    },
    {
      "text": "def sort_array(A):\n    if len(A) <= 1:\n        return A\n\n    pivot = A[0]\n    left = [item for item in A if item < pivot]\n    right = [item for item in A if item > pivot]\n\n    return sort_array(left) + [pivot] + sort_array(right)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00038442218861886053,
      "p_css": 0.0038780410424968897,
      "p_html": 0.019165010393317593,
      "p_java": 1.7983349947475617e-05,
      "p_javascript": 0.007406383477218359,
      "p_matlab": 0.003101941681451138,
      "p_python": 0.9656676100991577,
      "p_sql": 0.00033217438264027344,
      "p_typescript": 4.6433385151805564e-05
    },
    {
      "text": "def sort_descending(arr):\n    arr.sort(reverse=True)\n    return arr\n\narr = [9, 2, 7, 1]\nres = sort_descending(arr) \nprint (str(res))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.836463655721732e-05,
      "p_css": 0.0011354175784212479,
      "p_html": 8.292650137467615e-05,
      "p_java": 1.0662427657834119e-05,
      "p_javascript": 6.150400497713787e-05,
      "p_matlab": 0.003020225957926455,
      "p_python": 0.995608420922718,
      "p_sql": 7.694864749183638e-06,
      "p_typescript": 2.478310561819678e-05
    },
    {
      "text": "def wrap_words(text):\n    words = text.split(' ')\n    line_length = 15\n    new_text = ''\n    line = ''\n    for word in words:\n        if len(line + word) > line_length:\n            new_text += line + '\\n'\n            line = word + ' '\n        else:\n            line += word + ' '\n    new_text += line\n    return new_text\n\noriginal_text = 'This is a string with some long words.'\nwrapped_text = wrap_words(original_text)\nprint(wrapped_text)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9098341770913769,
      "p_css": 0.005812738352450347,
      "p_html": 0.007235064659231676,
      "p_java": 0.0004730689789803379,
      "p_javascript": 6.846339004672841e-06,
      "p_matlab": 0.0005268369478545641,
      "p_python": 0.07323759055262453,
      "p_sql": 0.002257877908647021,
      "p_typescript": 0.0006157991698298681
    },
    {
      "text": "class InputValidator:\n    def __init__(self, userInput):\n        self.userInput = userInput\n \n    def is_valid_quantity(self):\n        try:\n            int(self.userInput) # Check if user input is an integer.\n            return True\n        except ValueError:\n            return False\n\n# Create a class instance\ninputValidator = InputValidator(\"10\") \nresult = inputValidator.is_valid_quantity()\nprint(result) # Displays True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00022484403689975477,
      "p_css": 0.0024739269711608882,
      "p_html": 0.019165930581111816,
      "p_java": 0.00045745213184010975,
      "p_javascript": 2.7099285522174926e-05,
      "p_matlab": 5.277654832074187e-08,
      "p_python": 0.9748501498563398,
      "p_sql": 0.002605304674894627,
      "p_typescript": 0.00019523968568263873
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# define url of page\nurl = 'http://example.com/headlines'\n\n# make request and parse html\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# get headlines\nheadlines = soup.find_all(class_='headline')\n\n# iterate over each headline\nheadlines_list = []\nfor headline in headlines:\n # get headline text\n headline_text = headline.find('h3').text\n # get headline page url\n headline_page_url = headline.find('a')['href']\n # get date\n headline_date = headline.find(class_='date')\n # add to list\n headlines_list.append((headline_text, headline_page_url, headline_date))\n\nprint(headlines_list)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.1961244215694302e-08,
      "p_css": 0.8994093511250068,
      "p_html": 0.08078739614836328,
      "p_java": 0.01365101395523322,
      "p_javascript": 0.00011983397430706415,
      "p_matlab": 6.351199234942472e-06,
      "p_python": 0.004855231629211023,
      "p_sql": 0.0010617088307056121,
      "p_typescript": 0.00010909117669394946
    },
    {
      "text": "class BankAccount:\n   def __init__(self, account_number, account_balance):\n        self.account_number = account_number\n        self.account_balance = account_balance\n\n    def deposit(self, deposit_amount):\n        self.account_balance += deposit_amount\n\n    def withdraw(self, withdraw_amount):\n        if self.account_balance - withdraw_amount >= 0:\n            self.account_balance -= withdraw_amount\n            return True\n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.16964167848558e-05,
      "p_css": 0.004653552012458344,
      "p_html": 0.08370748183400387,
      "p_java": 2.2858576344810083e-06,
      "p_javascript": 1.2681086120629602e-05,
      "p_matlab": 1.0745015600514365e-06,
      "p_python": 0.8358846310738116,
      "p_sql": 0.0755989059552576,
      "p_typescript": 7.769126236848402e-05
    },
    {
      "text": "import random\nx = random.randint(5, 20)\nprint(x)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005011243139515766,
      "p_css": 0.0014710850400222561,
      "p_html": 0.00038382519542365357,
      "p_java": 4.185295336585127e-06,
      "p_javascript": 6.628311519326645e-05,
      "p_matlab": 3.3384072366392258e-06,
      "p_python": 0.9576320567801396,
      "p_sql": 0.03987440030214203,
      "p_typescript": 6.370155055430553e-05
    },
    {
      "text": "def bubbleSort(list): \n    for num in range(len(list)-1,0,-1): \n        for i in range(num): \n            if list[i] < list[i+1]: \n                temp = list[i] \n                list[i] = list[i+1] \n                list[i+1] = temp \n  \nlist = [54,26,93,17,77,31,44,55,20] \nbubbleSort(list) \nprint(\"Sorted list:\")\nfor i in range(len(list)): \n    print(list[i],end=\" \")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0235932898446925e-08,
      "p_css": 1.1752767105199547e-09,
      "p_html": 1.404769147020575e-07,
      "p_java": 2.1862597235828665e-09,
      "p_javascript": 2.7207753763904067e-08,
      "p_matlab": 0.9998825394885635,
      "p_python": 0.0001121943078378861,
      "p_sql": 5.071117095977613e-06,
      "p_typescript": 1.3804364701787269e-08
    },
    {
      "text": "import copy\n\noriginal_dict = {'a': 1, 'b': 2}\n\nshallow_copy_dict = copy.copy(original_dict)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.05610952033670681,
      "p_css": 0.24195750460193674,
      "p_html": 0.04083310732969459,
      "p_java": 0.0027473324037293628,
      "p_javascript": 0.012674130333291976,
      "p_matlab": 0.013888482239493037,
      "p_python": 0.5912253381159179,
      "p_sql": 0.020606603777086004,
      "p_typescript": 0.01995798086214356
    },
    {
      "text": "def print_fibonacci_sequence(n):\n  a = 0\n  b = 1\n  \n  print(a, end=' ')\n  print(b, end=' ')\n  \n  for i in range(2, n):\n    c = a + b\n    a = b\n    b = c\n    print(c, end=' ')\n\nn = 10\nprint_fibonacci_sequence(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.4608530324250545e-06,
      "p_css": 2.1557547151105718e-05,
      "p_html": 2.3112109201981213e-05,
      "p_java": 4.2321288869084355e-07,
      "p_javascript": 1.103654527754312e-06,
      "p_matlab": 5.2820528851842445e-05,
      "p_python": 0.9998818212002295,
      "p_sql": 7.85177716121693e-06,
      "p_typescript": 6.849116955352971e-06
    },
    {
      "text": "def sum_elements(arr):\n  s = 0\n  for row in arr:\n    s += sum(row)\n  return s\n\narr = [[1,2,3],\n[4,5,6],\n[7,8,9]]\n\nprint(sum_elements(arr))\n\n# Output: 45",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0009044299169000769,
      "p_css": 0.004942402334408057,
      "p_html": 0.0006888777144422697,
      "p_java": 0.00024044639069172933,
      "p_javascript": 0.0002683013943233791,
      "p_matlab": 0.6719568663034259,
      "p_python": 0.32073341181348813,
      "p_sql": 5.8208722898901576e-05,
      "p_typescript": 0.00020705540942158245
    },
    {
      "text": "import random\n\nprint('Player 1 Taking Turn')\n\nrandom_number = random.randint(0, 100)\n\np1_name = input('Enter your name: ')  \np2_name = input('Enter your name: ')\n\ngame_over = False\n\nwhile not game_over:\n\n  # Player 1 guessing\n  p1_guess = int(input('Guess a number between 0 and 100: '))\n  if p1_guess == random_number:\n    print('{} wins!'.format(p1_name))\n    game_over = True\n  elif p1_guess > random_number:\n    print('{} your guess is too high'.format(p1_name))\n\n  # Player 2 guessing\n  print('\\n' + p2_name + ' Taking Turn')\n  p2_guess = int(input('Guess a number between 0 and 100: '))\n  if p2_guess == random_number:\n    print('{} wins!'.format(p2_name))\n    game_over = True\n  elif p2_guess > random_number:\n    print('{} your guess is too high'.format(p2_name))\n    \nprint('Game over!')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03294935698566355,
      "p_css": 0.07376565334122237,
      "p_html": 0.01664549587213343,
      "p_java": 0.028508395138938544,
      "p_javascript": 0.0004569654580918174,
      "p_matlab": 2.027202270871681e-05,
      "p_python": 0.8429725883802696,
      "p_sql": 0.0029072396576537906,
      "p_typescript": 0.0017740331433179876
    },
    {
      "text": "# Program to print \"Hello, World!\"\n\nprint(\"Hello, World!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999995790678231,
      "p_css": 1.5726193371794776e-11,
      "p_html": 7.063116251421275e-11,
      "p_java": 3.3540950918887666e-32,
      "p_javascript": 3.905960560853784e-07,
      "p_matlab": 2.2228962084939223e-14,
      "p_python": 3.024785133164939e-08,
      "p_sql": 1.6757293259040868e-12,
      "p_typescript": 2.1407428587856817e-13
    },
    {
      "text": "import requests\nimport sqlite3\n\n# create connection\nconn = sqlite3.connect('data.db')\nc = conn.cursor()\n\n# create table\nc.execute('CREATE TABLE Prices (stock_symbol TEXT, price REAL)')\n\n# get stock price data\nres = requests.get('https://api.iextrading.com/1.0/stock/AAPL/price')\nprice = res.json()\n\n# insert data into table\nc.execute('INSERT INTO Prices (stock_symbol, price) VALUES (?, ?)',\n('AAPL', price))\n\n# commit changes to database\nconn.commit()\n\n# close database connection\nconn.close()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.6129656604026191e-06,
      "p_css": 0.033015333007112145,
      "p_html": 5.036298748936325e-05,
      "p_java": 1.9769755233324192e-05,
      "p_javascript": 2.033189412717439e-05,
      "p_matlab": 4.350258897491344e-06,
      "p_python": 0.0015736407822481862,
      "p_sql": 0.9646713771008973,
      "p_typescript": 0.0006432212483346283
    },
    {
      "text": "def is_anagram(s1, s2):\n    s1_list = list(s1)\n    s1_list.sort()\n    s2_list = list(s2)\n    s2_list.sort()\n\n    if(s1_list == s2_list):\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0024457512033981697,
      "p_css": 0.00745266385611029,
      "p_html": 0.008155459229078453,
      "p_java": 0.00027097346361501496,
      "p_javascript": 0.0014259086795023184,
      "p_matlab": 0.0018302155056819805,
      "p_python": 0.9747049926375705,
      "p_sql": 0.0019742843802245157,
      "p_typescript": 0.0017397510448189453
    },
    {
      "text": "import requests\nimport re\n\nurl = \"https://www.youtube.com/user/Thexvid/videos\"\n\nr = requests.get(url)\ntitles = re.findall('<a href=\"/watch\\?v=([^\"]+)\">(.+?)<\\/a>',r.content.decode('utf-8'))\n\nfor title in titles:\n print(title[1])",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.348019287062441e-14,
      "p_css": 0.0015724713576486732,
      "p_html": 0.015551169971457862,
      "p_java": 0.9826111126028685,
      "p_javascript": 8.221284634565524e-07,
      "p_matlab": 1.1165915301076327e-06,
      "p_python": 0.000255181475482055,
      "p_sql": 7.4516721326277305e-06,
      "p_typescript": 6.742003533848754e-07
    },
    {
      "text": "def calculate_grade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"\n\nresult = calculate_grade(90)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001383831615045199,
      "p_css": 0.0633446707773633,
      "p_html": 0.0009540299277637399,
      "p_java": 5.3563707843397396e-05,
      "p_javascript": 0.0002377766885290081,
      "p_matlab": 0.00044814544936487734,
      "p_python": 0.93380382902613,
      "p_sql": 0.0009371258606990519,
      "p_typescript": 8.247540080206971e-05
    },
    {
      "text": "import re\n\ndef extract_numbers(input_string):\n    \"\"\"This function extracts numbers from a given textstring using regular expressions.\"\"\"\n    \n    # Compile the regular expression\n    pattern = re.compile(r'\\d+')\n    \n    # Find all numbers in the string\n    output_list = pattern.findall(input_string)\n    \n    return output_list\n    \n# Sample Input\ninput_string = 'I have 2 cats and 3 dogs'\n    \n# Print the output\nprint(extract_numbers(input_string))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005335611426798202,
      "p_css": 0.0016592931980019478,
      "p_html": 0.041123511530682236,
      "p_java": 0.0019140511905262662,
      "p_javascript": 0.0023365552241417157,
      "p_matlab": 3.179865553510836e-06,
      "p_python": 0.9295428377438073,
      "p_sql": 0.0005123883412631558,
      "p_typescript": 0.017572571479225835
    },
    {
      "text": "def find_smallest_number(numbers):\n    smallest = numbers[0] \n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nprint(find_smallest_number([5, 4, 12, 17, 9]))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0006926184417677943,
      "p_css": 3.8128220244350145e-06,
      "p_html": 0.0020825331801928903,
      "p_java": 0.010826827684311683,
      "p_javascript": 0.0011613090289610427,
      "p_matlab": 0.6922611170591358,
      "p_python": 0.2918262548266006,
      "p_sql": 0.00053315764978201,
      "p_typescript": 0.0006123693072237675
    },
    {
      "text": "class Order:\n # Initialize order\n def __init__(self):\n self.items = []\n\n# Add item to order\n def add_item(self, item):\n self.items.append(item)\n\n# Calculate subtotal\n def calc_subtotal(self):\n subtotal = 0\n for item in self.items:\n subtotal += item.price\n return subtotal\n\n# Calculate tax\n def calc_tax(self):\n return self.calc_subtotal() * 0.08\n\n# Calculate total\n def calc_total(self):\n return self.calc_subtotal() + self.calc_tax()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.077065596772645e-06,
      "p_css": 0.012107814554024267,
      "p_html": 0.042480999682515105,
      "p_java": 1.961345084312695e-06,
      "p_javascript": 0.00031794189811113545,
      "p_matlab": 6.069334837592142e-08,
      "p_python": 0.8881581008431145,
      "p_sql": 0.056926013486068884,
      "p_typescript": 1.030432136496407e-06
    },
    {
      "text": "def predict_next_value(nums):\n  # calculate average\n  avg = sum(nums) / len(nums)\n\n  # predict next value\n  return avg\n  \n# test  \nprint(predict_next_value([7, 3, 5, 9, 4])) # prints 6.0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007715177065625644,
      "p_css": 0.03462602815804405,
      "p_html": 0.0027745143468289593,
      "p_java": 8.398054942295024e-05,
      "p_javascript": 0.0005676149810750025,
      "p_matlab": 0.001660049647318111,
      "p_python": 0.9437486847855083,
      "p_sql": 0.006966353165652811,
      "p_typescript": 0.0018575973005242317
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\ndata = [[5,2,4,1,3], [7,3,5,1,2], [9,5,4,2,3]]\nlabels = ['iris-setosa', 'iris-versicolor', 'iris-virginica']\n\ndf = pd.DataFrame(data, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class'])\nX = df.iloc[:, :4]\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, \n    y,\n    train_size=0.8, \n    test_size=0.2, \n    random_state=0\n)\n\nclf = RandomForestClassifier(n_estimators=100, random_state=0, max_depth=2)\nclf.fit(X_train, y_train)\nprint(\"Accuracy of Random Forest classifier on training set:{:.2f}\".format(clf.score(X_test, y_test)))",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0002378044495593259,
      "p_css": 0.6675128080370354,
      "p_html": 0.014395584561643304,
      "p_java": 0.0023753032742292197,
      "p_javascript": 0.000306218510522708,
      "p_matlab": 9.726821983076552e-05,
      "p_python": 0.3045113423973057,
      "p_sql": 0.008540075827332528,
      "p_typescript": 0.0020235947225411993
    },
    {
      "text": "import re\n\ndef remove_special_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.267095007360417e-08,
      "p_css": 0.00010597373191047823,
      "p_html": 0.0018756891950038822,
      "p_java": 0.9040592994256977,
      "p_javascript": 1.0507400869142267e-09,
      "p_matlab": 1.5496714312650406e-07,
      "p_python": 0.09355768186347127,
      "p_sql": 0.00038882126987031183,
      "p_typescript": 1.2345825213085737e-05
    },
    {
      "text": "def network_search(graph, start, end):\n visited, queue = set(), [(start, 0)]\n \n while queue:\n vertex, depth = queue.pop(0)\n \n if vertex not in visited:\n visited.add(vertex)\n \n if vertex == end:\n return depth\n \n for neighbor in graph[vertex]:\n queue.append((neighbor, depth + 1))\n \n return -1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.053443820457679196,
      "p_css": 0.11271673038442677,
      "p_html": 0.02515716141115739,
      "p_java": 0.006393831442041043,
      "p_javascript": 0.003838116556987674,
      "p_matlab": 0.027965657767291027,
      "p_python": 0.7397810611142384,
      "p_sql": 0.011856133642668356,
      "p_typescript": 0.018847487223510116
    },
    {
      "text": "import random\n\ndef suggest_sentence(lastWord):\n    sentences = [\"the cat is cute\", \"the dog is smart\", \"the duck is noisy\"]\n    suggestedSentences = []\n    \n    for sentence in sentences:\n        if sentence.split()[-1] == lastWord:\n            suggestedSentences.append(sentence)\n    \n    return random.choice(suggestedSentences)\n\nsuggestion = suggest_sentence(\"cute\")",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.005317821146285751,
      "p_css": 0.020072003277936838,
      "p_html": 0.005467055311933834,
      "p_java": 8.879248325853532e-05,
      "p_javascript": 0.07611295595595055,
      "p_matlab": 0.004520582062760203,
      "p_python": 0.1143635593883341,
      "p_sql": 0.7533502221189633,
      "p_typescript": 0.020707008254576914
    },
    {
      "text": "def check_alphabet(string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\" \n    if set(string.lower()) >= set(alphabet): \n        return True \n    else: \n        return False",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.5932764260049666e-07,
      "p_css": 0.00046013208742539383,
      "p_html": 0.0002190971614044687,
      "p_java": 0.9365331703731935,
      "p_javascript": 1.9063146161742575e-09,
      "p_matlab": 6.128427025961344e-07,
      "p_python": 0.061870490387048484,
      "p_sql": 0.0009064786617549066,
      "p_typescript": 9.857252513325161e-06
    },
    {
      "text": "def nth_smallest(input_list, n):\n    input_list.sort()\n    return input_list[n-1]\n\ninput_list = [2, 3, 5, 7, 11]\nn = 2\nresult = nth_smallest(input_list, n)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00011616549762461827,
      "p_css": 0.0008292807059277401,
      "p_html": 0.00030289647160408254,
      "p_java": 2.314031708750881e-05,
      "p_javascript": 0.00012639780273813455,
      "p_matlab": 6.203499078617391e-05,
      "p_python": 0.9979669040065544,
      "p_sql": 0.00036523481732350204,
      "p_typescript": 0.0002079453903538776
    },
    {
      "text": "# Get the input string\nstring = \"Hello World!\"\n\n# Modify the string\nvowels = \"aeiou\"\nnew_string = \"\"\nfor char in string:\n    if char in vowels:\n        new_string += char\n\n# Print the string\nprint(new_string)\n# prints \"eoo\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.529957773072648e-06,
      "p_css": 0.012023482125168785,
      "p_html": 0.0005180254361233237,
      "p_java": 0.007176581120074834,
      "p_javascript": 1.862980146285917e-08,
      "p_matlab": 9.078933343403144e-06,
      "p_python": 0.9209071709247201,
      "p_sql": 0.05923995275392948,
      "p_typescript": 0.00011716011906553396
    },
    {
      "text": "def remove_num(lst, num):\n  return [n for n in lst if n != num]\n\nprint(remove_num([1, 7, 3, 1, 4, 7, 9], 7))  # [1, 3, 1, 4, 9]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0589677043388337e-08,
      "p_css": 4.094205150809575e-11,
      "p_html": 4.465202690434268e-08,
      "p_java": 6.561358883220776e-10,
      "p_javascript": 2.5978530818791957e-09,
      "p_matlab": 0.9990483128349648,
      "p_python": 0.0009515817098994237,
      "p_sql": 3.725226584169364e-08,
      "p_typescript": 9.66623504135211e-09
    },
    {
      "text": "def max_of_three(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nresult = max_of_three(3, 4, 5)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.148630081728805e-06,
      "p_css": 0.0007407613632158103,
      "p_html": 3.8632446380792544e-05,
      "p_java": 1.0892928107660382e-06,
      "p_javascript": 4.986073917842882e-06,
      "p_matlab": 1.6664982064935018e-06,
      "p_python": 0.9984917354786816,
      "p_sql": 2.2343695987017475e-05,
      "p_typescript": 0.0006946365207176772
    },
    {
      "text": "string = \"Hello World   \"\n\nno_space_string = string.replace(' ', '')\n\nprint(no_space_string)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.877251468354816e-05,
      "p_css": 0.0042794920182485825,
      "p_html": 0.0016512107410196785,
      "p_java": 2.873926747341231e-06,
      "p_javascript": 4.006910085349087e-08,
      "p_matlab": 1.7393932482697353e-07,
      "p_python": 0.9863889732515633,
      "p_sql": 0.007542510243900283,
      "p_typescript": 3.595329541167401e-05
    },
    {
      "text": "def read_csv(filename):\n    try:\n        with open(filename, 'r') as f: \n            data = f.readlines()\n            return data\n    except FileNotFoundError: \n        print(\"File not found. Please provide a valid filename\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0021768496688668497,
      "p_css": 0.07747701089879945,
      "p_html": 0.019115462071646366,
      "p_java": 9.504160001017261e-05,
      "p_javascript": 0.0005935352261506767,
      "p_matlab": 0.00058718251298664,
      "p_python": 0.46859414766430446,
      "p_sql": 0.01952106410983714,
      "p_typescript": 0.411839706247398
    },
    {
      "text": "sum = 0\nfor value in [2, 17, 3, 8]:\n sum += value\nprint(sum)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.664384444052371e-11,
      "p_css": 1.3718786876632259e-08,
      "p_html": 2.014185433966369e-09,
      "p_java": 4.100056274417152e-09,
      "p_javascript": 1.5333501445273837e-10,
      "p_matlab": 0.9999999791372229,
      "p_python": 7.161408092115532e-17,
      "p_sql": 4.737483758400613e-10,
      "p_typescript": 3.260211465140047e-10
    },
    {
      "text": "def is_palindrome(num):\n  rev = 0\n  tmp = num\n  \n  while tmp > 0:\n    rev = rev * 10\n    rev = rev + (tmp % 10)\n    tmp = tmp // 10\n\n  return num == rev\n  \nnum = 12321\nif (is_palindrome(num)):\n  print(\"Number is a palindrome\")\nelse:\n  print(\"Number is not a palindrome\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.06070433748711195,
      "p_css": 9.365266207160815e-05,
      "p_html": 0.0038308039699025353,
      "p_java": 0.00016420080219543704,
      "p_javascript": 0.0008373009064261713,
      "p_matlab": 0.5766832122970078,
      "p_python": 0.3561146420513965,
      "p_sql": 0.00013995510208739817,
      "p_typescript": 0.0014318947218006615
    },
    {
      "text": "import random\n\nrandom_array = random.sample(range(10,20), 50)\nprint(random_array)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008659109780040959,
      "p_css": 0.002190723720475439,
      "p_html": 0.0022230794237714934,
      "p_java": 2.2013030930318295e-05,
      "p_javascript": 0.00012382656788738065,
      "p_matlab": 0.0015765290498155032,
      "p_python": 0.9918625976542219,
      "p_sql": 0.0009834217157204713,
      "p_typescript": 0.00015189785917340347
    },
    {
      "text": "import re\nfrom collections import Counter\n\ndef tf_idf(documents):\n  # Split documents into tokens\n  tokens = [tokenize(document) for document in documents]\n  \n  # Get vocabulary\n  vocabulary = get_vocabulary(tokens)\n  \n  # Calculate Term Frequency \n  tf = get_termfrequency(tokens, vocabulary)\n  \n  # Calculate Document Frequency\n  df = get_documentfrequency(tokens, vocabulary)\n  \n  # Calculate Inverse Document Frequency \n  idf = get_inverse_documentfrequency(df, len(documents))\n  \n  # Calculate TF-IDF \n  tf_idf = get_tf_idf(tf, idf)\n  \n  # Return TF-IDF scores\n  return tf_idf\n\ndef tokenize(document):\n  # Tokenize document\n  tokens = re.findall(r\"[\\w']+\", document)\n  \n  # Return tokens\n  return tokens\n\ndef get_vocabulary(tokens):\n  # Get vocabulary\n  vocabulary = set()\n  for token_list in tokens:\n    vocabulary.update(set(token_list))\n  \n  # Return vocabulary\n  return vocabulary\n\ndef get_termfrequency(tokens, vocabulary):\n  # Initialize term frequency\n  tf = {word: [] for word in vocabulary}\n  \n  for token_list in tokens:\n    # Get word frequency\n    counter = Counter(token_list)\n    \n    # Update term frequency\n    for word in vocabulary:\n      tf[word] = tf[word] + [counter[word]]\n    \n  # Return term frequency\n  return tf\n\ndef get_documentfrequency(tokens, vocabulary):\n  # Initialize document frequency\n  df = {word: 0 for word in vocabulary}\n  \n  for token_list in tokens:\n    # Update document frequency\n    for word in vocabulary:\n      if word in token_list:\n        df[word] += 1\n  \n  # Return document frequency\n  return df\n\ndef get_inverse_documentfrequency(df, num_documents):\n  # Initialize Inverse document frequency\n  idf = {word: 0 for word in df.keys()}\n  \n  # Calculate inverse document frequency\n  for word in df.keys():\n    idf[word] = math.log(num_documents / df[word])\n  \n  # Return Inverse Document Frequency\n  return idf\n\ndef get_tf_idf(tf, idf):\n  # Initialize tf-idf\n  tf_idf = {word: [] for word in tf.keys()}\n  \n  # Calculate tf-idf\n  for word in tf.keys():\n    scores = [tf[word][k] * idf[word] for k in range(len(tf[word])) ]\n    tf_idf[word] = scores\n  \n  # Return tf-idf\n  return tf_idf",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.003635512667793953,
      "p_css": 0.015063830966188447,
      "p_html": 0.14408646387082277,
      "p_java": 2.7274331834972257e-05,
      "p_javascript": 0.00018306721273940625,
      "p_matlab": 0.00233057242190614,
      "p_python": 0.8263305604634261,
      "p_sql": 0.008144569021136425,
      "p_typescript": 0.00019814904415182331
    },
    {
      "text": "from flask import Flask, request\nfrom sympy import *\n\napp = Flask(name)\nx = Symbol('x')\n\n@app.route('/solve', methods=['POST'])\ndef solve():\n equation = request.json['equation']\n solution = solve(equation, x)\n return {'solution': str(solution[0])}\n\nif name == 'main':\n app.run(debug=True)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.1620215643193057,
      "p_css": 0.8150082914902024,
      "p_html": 0.006349965572804075,
      "p_java": 0.001613200502977978,
      "p_javascript": 6.930306062221003e-05,
      "p_matlab": 5.7572813507220074e-05,
      "p_python": 0.012093880839870423,
      "p_sql": 0.00267412425757994,
      "p_typescript": 0.00011209714313003149
    },
    {
      "text": "# Python program to establish connection to a MySQL database\n\nimport mysql.connector\n\n# establish connection\nmydb = mysql.connector.connect(host=\"localhost\", user=\"yourusername\", passwd=\"yourpassword\")\n\n# create a cursor\nmycursor = mydb.cursor()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.7522455499714359,
      "p_css": 0.00222757167415574,
      "p_html": 0.0024623610343469755,
      "p_java": 2.561993918912149e-05,
      "p_javascript": 0.0014307746201083248,
      "p_matlab": 0.0004919129760911343,
      "p_python": 0.01702513259823978,
      "p_sql": 0.22092049405147265,
      "p_typescript": 0.003170583134960326
    },
    {
      "text": "def get_array(n):\n    a = [[0 for i in range(n)] for i in range(n)]\n    return a",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.781337839116974e-13,
      "p_css": 9.747500716243002e-16,
      "p_html": 8.032391672804954e-12,
      "p_java": 2.4361239630869958e-14,
      "p_javascript": 5.398923982758484e-15,
      "p_matlab": 0.9999038364904074,
      "p_python": 9.616349020896758e-05,
      "p_sql": 1.0501134773542463e-11,
      "p_typescript": 4.414151519429793e-13
    },
    {
      "text": "import nltk\nfrom nltk.stem import WordNetLemmatizer\n\n# initialize lemmatizer\nlemmatizer = WordNetLemmatizer()\n\n# tokenize dialogue\nwords = nltk.word_tokenize(dialogue)\n\n# use pos_tagging to identify the topics\ntagged_words = nltk.pos_tag(words)\n\n# lemmatize words\nlemmatized_words = [lemmatizer.lemmatize(word) for word in words]\n\n# extract topics\ntopics = [word for word in lemmatized_words if word[1] in ['NN', 'NNS']]\n\n# respond appropriately\nresponse = 'hello John, it\\'s nice to meet you. So you\\'re interested in learning more about ' + ', '.join(topics) + '?'",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.040052116466383444,
      "p_css": 0.05112021809957934,
      "p_html": 0.043591764238735224,
      "p_java": 5.7527790934962e-06,
      "p_javascript": 0.001945524666096136,
      "p_matlab": 0.005316991464287378,
      "p_python": 0.10126245531643394,
      "p_sql": 0.7396435013458774,
      "p_typescript": 0.017061675623513673
    },
    {
      "text": "def updateList(myList):\n myList.append(1)\n \nmyList = [1, 2, 3]\nupdateList(myList)\nprint(myList)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.082268772771758e-12,
      "p_css": 4.1069523319575587e-13,
      "p_html": 1.0761726937287103e-13,
      "p_java": 4.2453364670250754e-13,
      "p_javascript": 1.0640801898090332e-12,
      "p_matlab": 0.9999999999933775,
      "p_python": 1.5968288964599302e-15,
      "p_sql": 2.266342403231282e-15,
      "p_typescript": 2.5294656715224015e-12
    },
    {
      "text": "def sumDigits(num): \n  \n    # convert number into string \n    # and convert each digit into number \n    # using ord() and store it in list \n    # convert number into string \n    # and convert each digit into number \n    # using ord() and store it in list \n    strNum = str(num) \n    digits = [int(x) for x in strNum] \n  \n    # return sum using sum() function \n    return sum(digits) \n  \n# Driver program \nnum = 12345\nprint(\"Sum of digits in num is:\", \n        sumDigits(num))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 6.567193597300067e-05,
      "p_css": 0.00020305294160772547,
      "p_html": 0.0008781245900054255,
      "p_java": 0.1866351194696298,
      "p_javascript": 0.0013085039003028578,
      "p_matlab": 0.1034741645174679,
      "p_python": 0.03765700562813192,
      "p_sql": 0.0035993605239248334,
      "p_typescript": 0.6661789964929565
    },
    {
      "text": "def median(arr): \n # Sort the array \n arr.sort() \n n = len(arr) \n  \n # If number of elements is odd, \n # return the middle element \n if n % 2 != 0: \n  return arr[n//2] \n  \n # If number of elements is even, \n # return the average of the middle \n # two elements \n else:\n  return (arr[n//2] + arr[(n//2)-1]) / 2\n\n# Driver code \narr = [3, 1, 4, 5, 2] \nprint(median(arr))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.297976985096086e-05,
      "p_css": 0.00033395068150730053,
      "p_html": 0.0001392910665476106,
      "p_java": 0.0003366870087723937,
      "p_javascript": 0.001148227248344727,
      "p_matlab": 0.04335616388929412,
      "p_python": 0.9431818274374029,
      "p_sql": 1.3865863176923906e-05,
      "p_typescript": 0.011407007035102919
    },
    {
      "text": "days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\nfor day in days:\n    print(day)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011868569211817965,
      "p_css": 0.04839580399999117,
      "p_html": 0.03616384066761625,
      "p_java": 0.0020747891104210903,
      "p_javascript": 0.010265156693539787,
      "p_matlab": 0.05617735227943104,
      "p_python": 0.8101038106308865,
      "p_sql": 0.005294587346132512,
      "p_typescript": 0.019656090060163573
    },
    {
      "text": "def levenshtein(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005274049884400551,
      "p_css": 0.02926765983620981,
      "p_html": 0.01150588575664926,
      "p_java": 0.0007258473077450705,
      "p_javascript": 0.002010914396589423,
      "p_matlab": 0.12500132089577062,
      "p_python": 0.8118510470527995,
      "p_sql": 0.008257657222028685,
      "p_typescript": 0.00610561764780703
    },
    {
      "text": "import pandas as pd\nfrom scipy.optimize import minimize\n\n# read in data\ndf = pd.read_csv('data.csv')\n\n# objective function\ndef obj_func(weights, mean_returns, covariance_matrix):\n    # compute portfolio mean return\n    portfolio_mean_return = np.dot(mean_returns, weights)\n    \n    # compute portfolio variance\n    portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(covariance_matrix, weights)))\n    \n    # return the negative of the Sharpe ratio\n    return -(portfolio_mean_return / portfolio_variance)\n\n# minimize function\ndef minimize_func(mean_returns, covariance_matrix):     \n    # define initial weights\n    init_weights = np.array([1/len(mean_returns)] * len(mean_returns))\n    \n    # define constraints\n    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1},\n                   {'type': 'ineq', 'fun': lambda x: x})\n    \n    # minimize the objective function\n    results = minimize(obj_func, init_weights, args=(mean_returns, covariance_matrix),\n                       method='SLSQP', constraints=constraints)\n    \n    return results.x\n\n# optimize and get optimal weights\nweights = minimize_func(df.mean(), df.cov())\nprint(weights)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.003365310958468742,
      "p_css": 0.43416434707572055,
      "p_html": 0.006696385229471841,
      "p_java": 0.0004847917553860162,
      "p_javascript": 0.4093272212403656,
      "p_matlab": 2.375645777396938e-05,
      "p_python": 0.13958941330016625,
      "p_sql": 0.005322727814390128,
      "p_typescript": 0.0010260461682570798
    },
    {
      "text": "def findMaxLen(listA, listB):\n  lengthA = len(listA)\n  lengthB = len(listB) \n  \n  # Initialize left and right pointers \n  l, r = 0, 0\n  \n  max_len = 0 \n  \n  # While left and right pointer cross the other    \n  # maintain a maximum length\n  while l < lengthA and r < lengthB: \n      # If they both have same element \n      if listA[l] == listB[r]:\n          max_len = max(max_len, l + r + 1) \n          l += 1\n          r += 1\n      \n      # If listA's element is less, increment  \n      # listB pointer \n      elif listA[l] > listB[r]:\n          r += 1\n          \n      # If listA's element is more, increment  \n      # listA pointer\n      else:\n          l += 1   \n  return max_len",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0028672385040880116,
      "p_css": 0.010222081811289757,
      "p_html": 0.004458346827685461,
      "p_java": 0.001860429795233126,
      "p_javascript": 0.00911123512967349,
      "p_matlab": 0.22655974811549184,
      "p_python": 0.5942012708434437,
      "p_sql": 0.0012382812390816812,
      "p_typescript": 0.14948136773401297
    },
    {
      "text": "def filter_words(words): \n    filtered_words = [] \n    for word in words: \n        if len(word) > 5: \n            filtered_words.append(word) \n    return filtered_words \n\nwords = [\"hello\", \"world\", \"example\", \"test\"]\n\nfiltered_words = filter_words(words) \n\nprint(filtered_words)  # Output: ['example', 'test']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04561498320113941,
      "p_css": 0.005295723197381954,
      "p_html": 0.10490611168620508,
      "p_java": 3.517028087685545e-06,
      "p_javascript": 0.0067076760562678455,
      "p_matlab": 0.0016027394660586415,
      "p_python": 0.8166384856945158,
      "p_sql": 0.019182555251254105,
      "p_typescript": 4.82084190893328e-05
    },
    {
      "text": "function add_two_numbers(a,b) {\n    return a + b;\n}",
      "y_true": "javascript",
      "pred_label": "javascript",
      "p_bash": 2.7831060753549955e-10,
      "p_css": 4.348875161531878e-10,
      "p_html": 4.183025597417684e-10,
      "p_java": 6.359688135911777e-11,
      "p_javascript": 0.9999999986486034,
      "p_matlab": 5.7432624638936295e-11,
      "p_python": 1.893377178712687e-11,
      "p_sql": 5.7740787493973845e-11,
      "p_typescript": 2.2191635406834887e-11
    },
    {
      "text": "print(\"This is an example sentence\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.240277894131016e-05,
      "p_css": 0.00016934929900876882,
      "p_html": 0.13062284182111833,
      "p_java": 0.8532383844297097,
      "p_javascript": 0.0031448476830830997,
      "p_matlab": 1.2629732464717602e-05,
      "p_python": 0.009142121163370803,
      "p_sql": 0.003514364752438581,
      "p_typescript": 0.00013305833986463792
    },
    {
      "text": "import psycopg2\n\nconnection = psycopg2.connect(database='dbname', user='user', password='password', host='localhost', port='5432')\n\ncursor = connection.cursor()\n\ncursor.execute('SELECT * FROM customers')\n\nrows = cursor.fetchall()\n\nfor row in rows:\n    print(row)\n    \ncursor.close()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 3.502709677620902e-05,
      "p_css": 0.0004165437038294822,
      "p_html": 7.323710489412887e-05,
      "p_java": 3.687330147927282e-06,
      "p_javascript": 1.175271972207957e-05,
      "p_matlab": 2.588627841753336e-05,
      "p_python": 0.0009547939480973414,
      "p_sql": 0.9984061907739025,
      "p_typescript": 7.28810442129339e-05
    },
    {
      "text": "def sum_all_numbers(n):\n return n * (n + 1) // 2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0458681726310896e-12,
      "p_css": 2.5489143973834694e-10,
      "p_html": 2.7598246867965498e-11,
      "p_java": 8.025231839209999e-13,
      "p_javascript": 3.049889349032867e-12,
      "p_matlab": 3.595677408560778e-18,
      "p_python": 0.9999999972484059,
      "p_sql": 2.461794976084354e-09,
      "p_typescript": 4.1123042603913176e-13
    },
    {
      "text": "import string\n\n# Define the input string\ninp_str = \"A text containing punctuation marks.\"\n\n# Remove all punctuation\nout_str = inp_str.translate(str.maketrans('', '', string.punctuation))\n\nprint(out_str) # Output: A text containing punctuation marks",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.7377590571086296e-05,
      "p_css": 0.005514490699300542,
      "p_html": 0.0005796519505537446,
      "p_java": 0.8454906148973426,
      "p_javascript": 3.8350273172984554e-07,
      "p_matlab": 7.498394798742767e-06,
      "p_python": 0.125344315300906,
      "p_sql": 0.022808144136671267,
      "p_typescript": 0.00022752352712443436
    },
    {
      "text": "def median(nums):\n    sorted_nums = sorted(nums)\n    length = len(nums)\n    if length % 2 == 0:\n        return (sorted_nums[length//2] + sorted_nums[length//2 - 1]) / 2\n    else:\n        return sorted_nums[length//2]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005144653947828159,
      "p_css": 0.0007931843610756379,
      "p_html": 0.00015960889615189655,
      "p_java": 5.326469708991873e-05,
      "p_javascript": 0.037536390457955954,
      "p_matlab": 0.00010904735177778326,
      "p_python": 0.9568344879989966,
      "p_sql": 0.0039022749398828637,
      "p_typescript": 9.727590228660159e-05
    },
    {
      "text": "def is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.140971746416212e-05,
      "p_css": 0.00010650901963559434,
      "p_html": 0.0009203851665593873,
      "p_java": 0.00020325173558886946,
      "p_javascript": 0.0036606883411235613,
      "p_matlab": 0.9877505948482089,
      "p_python": 0.005791497872334588,
      "p_sql": 8.058067881477296e-06,
      "p_typescript": 0.0014676052312031214
    },
    {
      "text": "import csv\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ncsv_file = open('data.csv', 'w')\ncsv_writer = csv.writer(csv_file)\ncsv_writer.writerow(['title', 'description'])\n\nfor article in soup.find_all('article'):\n title = article.h2.a.text\n description = article.find('div', class_='entry-content').p.text\n csv_writer.writerow([title, description])\n\ncsv_file.close()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 3.119111621332067e-10,
      "p_css": 0.03099097744400244,
      "p_html": 0.9682182859214418,
      "p_java": 0.0007684672752951707,
      "p_javascript": 1.6037345349594208e-06,
      "p_matlab": 1.7261973557796058e-07,
      "p_python": 1.4788319848427278e-05,
      "p_sql": 4.355094226825258e-06,
      "p_typescript": 1.3492790034739483e-06
    },
    {
      "text": "SELECT name \nFROM pages \nWHERE title LIKE '%Python%';",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.6804229733905897,
      "p_css": 0.0033138409138543904,
      "p_html": 0.2523906951188477,
      "p_java": 0.0013063790695118321,
      "p_javascript": 0.0001240437000512203,
      "p_matlab": 0.00031547894047112747,
      "p_python": 0.001397626876850396,
      "p_sql": 0.059345699311417685,
      "p_typescript": 0.0013832626784058323
    },
    {
      "text": "import random\nimport string\n\ndef random_str():\n  return ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nprint(random_str())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.605252046180332e-11,
      "p_css": 4.481252764837848e-07,
      "p_html": 1.5639864387721318e-07,
      "p_java": 0.005912395408020721,
      "p_javascript": 3.9171313037572057e-13,
      "p_matlab": 8.014550338199069e-11,
      "p_python": 2.8573321940341104e-05,
      "p_sql": 0.9940584160261207,
      "p_typescript": 1.0613408314301362e-08
    },
    {
      "text": "import re\n\ndef count_vowels(string):\n    vowels = re.findall(r'[aeiou]', string, re.I)\n    return len(vowels)\n\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    print(\"Number of vowels in the given string:\", count_vowels(string))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 6.841224867669656e-08,
      "p_css": 4.638504735182637e-05,
      "p_html": 0.003071011296371163,
      "p_java": 0.00996653119059844,
      "p_javascript": 4.748639848341773e-10,
      "p_matlab": 7.030169556179424e-08,
      "p_python": 0.9763441556925544,
      "p_sql": 0.010556330433007468,
      "p_typescript": 1.544715130847665e-05
    },
    {
      "text": "def generateTrees(keys): \n        # if the list of keys is empty, \n        # the result is an empty tree \n        if len(keys) == 0: \n            return [None] \n  \n        # store the result \n        trees = [] \n  \n        # loop through all keys \n        for i in range(len(keys)): \n          \n            # using each key as the root, \n            # generate subpairs on the left and right \n            l_trees = generateTrees(keys[:i]) \n            r_trees = generateTrees(keys[i+1:]) \n  \n            # loop through all of the possible combinations of left and right \n            # subtrees and save each as a root node with all the subtrees\n            for j in range(len(l_trees)): \n                for k in range(len(r_trees)): \n                    root = Node(keys[i]) \n                    root.left = l_trees[j] \n                    root.right = r_trees[k] \n                    trees.append(root) \n  \n        return trees",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00015677778800693003,
      "p_css": 0.0020135080788204994,
      "p_html": 0.00028655690906313443,
      "p_java": 4.893865807873161e-06,
      "p_javascript": 0.0009016707083319432,
      "p_matlab": 0.0018063275233469035,
      "p_python": 0.21684862274445055,
      "p_sql": 0.005302798797470219,
      "p_typescript": 0.7726788435847018
    },
    {
      "text": "# Function to calculate the maximum, minimum, and average values\ndef calculate_metrics(list):\n    # Calculate the maximum value\n    maximum = max(list)\n    \n    # Calculate the minimum value\n    minimum = min(list)\n   \n    # Calculate the average\n    n = len(list)\n    total = 0\n    for num in list:\n        total += num\n    average = total/n\n    \n    return maximum, minimum, average\n\n# Main Program \nlist = [3, 4, 5, 6, 21, 8]\n\nmaximum, minimum, average = calculate_metrics(list)\n\nprint(\"Maximum value:\", maximum)\nprint(\"Minimum value:\", minimum)\nprint(\"Average value:\", average)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.003332275580079282,
      "p_css": 0.0037063871328730826,
      "p_html": 0.0009714087333095728,
      "p_java": 1.4087352253571614e-05,
      "p_javascript": 0.006611333731780884,
      "p_matlab": 0.9710051498894919,
      "p_python": 0.0017290075936110892,
      "p_sql": 0.00956281074553334,
      "p_typescript": 0.0030675392410674162
    },
    {
      "text": "import random\n\njokes = [\n   'Why did the chicken cross the playground? To get to the other slide!',\n   'Why did the monkey fall out of the tree? Because it was dead!',\n   'Why did the dinosaur go to the dentist? Because he had a toothache!'\n]\n\ndef tell_joke():\n   joke = random.choice(jokes)\n   print(joke)\n\ntell_joke()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0005175463055436275,
      "p_css": 0.004344081386030759,
      "p_html": 0.0004589120514121779,
      "p_java": 0.00013210927969333148,
      "p_javascript": 0.18719091718868458,
      "p_matlab": 1.3865021678098201e-06,
      "p_python": 0.007556532667817912,
      "p_sql": 0.002168853863105342,
      "p_typescript": 0.7976296607555445
    },
    {
      "text": "def filter_values(lst, condition):\n    filtered_list = []\n    for x in lst:\n        if eval(condition):\n            filtered_list.append(x)\n    return filtered_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0014510929678560745,
      "p_css": 0.005123321684445851,
      "p_html": 0.003999899198507765,
      "p_java": 0.00021472562229195137,
      "p_javascript": 0.0006477007121381438,
      "p_matlab": 0.27001002642762784,
      "p_python": 0.7155457601420905,
      "p_sql": 0.0010583185803333811,
      "p_typescript": 0.0019491546647085259
    },
    {
      "text": "def sort_highest_to_lowest(arr):\n    sorted_arr = sorted(arr, reverse = True)\n    return sorted_arr\n\narr = [6, 2, 8, 3, 9]\nsorted_arr = sort_highest_to_lowest(arr)\nprint(sorted_arr)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012493270006125278,
      "p_css": 0.007861420876512856,
      "p_html": 0.0016865243832157855,
      "p_java": 0.00021449604935075832,
      "p_javascript": 0.00047786893552552933,
      "p_matlab": 0.04615593955625845,
      "p_python": 0.9413630159588996,
      "p_sql": 9.083532479818521e-05,
      "p_typescript": 0.0009005719148261632
    },
    {
      "text": "from random import random\n\ndef generate_cubed_object(n):\n    objects = []\n    for i in range(n):\n        x = random()\n        y = random()\n        z = random()\n        objects.append([x, y, z])\n    return objects\n\nprint(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002708097990055753,
      "p_css": 0.00028685750687663746,
      "p_html": 1.2383103004830576e-05,
      "p_java": 3.064060759156563e-06,
      "p_javascript": 0.00020421089314614645,
      "p_matlab": 0.005735027139774633,
      "p_python": 0.7382782855573581,
      "p_sql": 0.2547505190309303,
      "p_typescript": 0.00045884290914453965
    },
    {
      "text": "def concat_strings(str1, str2, str3):\n  return str1 + str2 + str3",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0038632857278377555,
      "p_css": 0.005387666028631678,
      "p_html": 7.726950905165414e-05,
      "p_java": 0.0009886104663934718,
      "p_javascript": 0.3107085575005894,
      "p_matlab": 0.0013243639439514908,
      "p_python": 0.6638709294391356,
      "p_sql": 0.007832125727348803,
      "p_typescript": 0.0059471916570600246
    },
    {
      "text": "# Python code to implement \n# the Gradient Descent algorithm\n\ndef gradientDescent(x, y, learning_rate, max_iterations): \n  \n    m_curr = b_curr = 0\n    n = len(x)\n    cost_previous = 0\n    cost_present = 0\n    iteration = 0 \n  \n    while iteration < max_iterations: \n        y_predicted = m_curr * x + b_curr \n        cost_present = (1/n) * sum([val**2 for val in (y-y_predicted)]) \n        md = -(2/n)*sum(x*(y-y_predicted)) \n        bd = -(2/n)*sum(y-y_predicted) \n        m_curr = m_curr - learning_rate * md \n        b_curr = b_curr - learning_rate * bd \n        iteration = iteration + 1\n        cost_previous = cost_present\n  \n    return m_curr, b_curr, cost_previous",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.05484994275162551,
      "p_css": 0.029407712124241068,
      "p_html": 0.028373218693210023,
      "p_java": 0.006887397479871831,
      "p_javascript": 0.03806116541180151,
      "p_matlab": 0.026303887210331257,
      "p_python": 0.13251208129950287,
      "p_sql": 0.02646942751232673,
      "p_typescript": 0.6571351675170892
    },
    {
      "text": "class BankAccount:\n def __init__(self, name, balance):\n self.name = name\n self.balance = balance\n\n def deposit(self, amount):\n self.balance += amount\n\n def withdraw(self, amount):\n if self.balance < amount:\n raise ValueError('Insufficient funds')\n self.balance -= amount\n\n def view_balance(self):\n return self.balance\n\n def transfer_money(self, other_account, amount):\n self.withdraw(amount)\n other_account.deposit(amount)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.014048022260109731,
      "p_css": 0.024321388308694514,
      "p_html": 0.01630477985102496,
      "p_java": 0.00210638977826813,
      "p_javascript": 8.21093119003682e-05,
      "p_matlab": 9.320329929545103e-05,
      "p_python": 0.9132082332453587,
      "p_sql": 0.028921731863315252,
      "p_typescript": 0.0009141420820327277
    },
    {
      "text": "import numpy as np\nimport matplotlib.pyplot as plt\n \n# Define some constants \nG = 1\n \n# Define some parameters\nm1 = 1\nm2 = 1\n \n# Initial conditions\nx1_0 = 0 # initial position of the first mass\ny1_0 = 0 \nvx1_0 = 1 # initial velocity of the first mass (along the x-axis)\nvy1_0 = 0\n \nx2_0 = 3    # initial position of the second mass\ny2_0 = 0\nvx2_0 = 0 # initial velocity of the second mass (along the x-axis)\nvy2_0 = 0.5 \n \n# Simulation parameters\nN = 1000 # number of steps\ndt = 1e-3 # time step\n \n# Create arrays to hold the x,y positions of the masses\nx1 = np.zeros(N)\ny1 = np.zeros(N)\nx2 = np.zeros(N)\ny2 = np.zeros(N)\n \n# Initial conditions\nx1[0] = x1_0\ny1[0] = y1_0\nx2[0] = x2_0\ny2[0] = y2_0\n \n# Simulation loop\nfor i in range(N-1):\n    # Calculate the force for the first mass \n    dx = x2[i] - x1[i]\n    dy = y2[i] - y1[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx1 = G*m2/r**3 * dx\n    Fy1 = G*m2/r**3 * dy\n    \n    # Calculate the force for the second mass \n    dx = x1[i] - x2[i]\n    dy = y1[i] - y2[i]\n    r = np.sqrt(dx**2 + dy**2)\n    Fx2 = G*m1/r**3 * dx \n    Fy2 = G*m1/r**3 * dy\n    \n    # Update the positions \n    x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 / 2 \n    y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 / 2 \n    x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 / 2 \n    y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 / 2 \n \n# Plot the results\nplt.plot(x1, y1, label=\"Mass 1\")\nplt.plot(x2, y2, label=\"Mass 2\")\nplt.xlabel(\"x-position\")\nplt.ylabel(\"y-position\")\nplt.legend(loc=\"lower right\")\nplt.show()",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.0126908002929642,
      "p_css": 0.00945610304621789,
      "p_html": 0.034028450439852906,
      "p_java": 0.0006225507429516046,
      "p_javascript": 0.015889692893557236,
      "p_matlab": 0.0005733924786509803,
      "p_python": 0.37381474313066565,
      "p_sql": 0.13049620089754263,
      "p_typescript": 0.42242806607759686
    },
    {
      "text": "import math\n\n# Semi-Major Axis\na = 5\n\n# Semi-Minor Axis\nb = 3\n\n# Calculate the area of an ellipse\narea = math.pi * a * b\n\nprint(\"The area of the ellipse is\", area)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00908354214755072,
      "p_css": 0.028728151339633162,
      "p_html": 0.010208144093675297,
      "p_java": 0.0008591563909979965,
      "p_javascript": 0.3568535481534243,
      "p_matlab": 0.00024796351387905684,
      "p_python": 0.44654112931201045,
      "p_sql": 0.0034072712100490284,
      "p_typescript": 0.14407109383877997
    },
    {
      "text": "import numpy as np \n\nfreq = 250 \namplitude = 1 \n\nt= np.linspace(0, 1, 1000) \nvoltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1446291478348093,
      "p_css": 0.05012381761162076,
      "p_html": 0.03395416665301263,
      "p_java": 0.00047078392362437214,
      "p_javascript": 0.00047235463607953434,
      "p_matlab": 0.0033228822131390807,
      "p_python": 0.7499616638917004,
      "p_sql": 0.002447492094793679,
      "p_typescript": 0.014617691141220286
    },
    {
      "text": "import math\n\ndef calculate_distance(x1, y1, x2, y2):\n  x_diff = x2 - x1\n  y_diff = y2 - y1\n  distance = math.sqrt(x_diff**2 + y_diff**2)\n  return distance\n\nresult = calculate_distance(x1, y1, x2, y2)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007519813227916828,
      "p_css": 0.008110185299850832,
      "p_html": 0.0015385902727016456,
      "p_java": 0.00012815917641534997,
      "p_javascript": 0.00036578021984025647,
      "p_matlab": 0.00014997573825106784,
      "p_python": 0.9840362302095252,
      "p_sql": 0.004131655494092717,
      "p_typescript": 0.000787442266530996
    },
    {
      "text": "def reverse_list(list):\n    reversed_list = list[::-1]\n    return reversed_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0030935047985011237,
      "p_css": 0.007834781855627405,
      "p_html": 0.008785722565284686,
      "p_java": 0.0008999562923994281,
      "p_javascript": 0.0037678774630355884,
      "p_matlab": 0.006035237879874536,
      "p_python": 0.9466912169331515,
      "p_sql": 0.01611612152711344,
      "p_typescript": 0.006775580685012401
    },
    {
      "text": "# Get list of numbers\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Initialize a count\ncount = 0\n\n# Iterate through the list of numbers and count the even numbers\nfor num in numbers:\n    if num % 2 == 0:\n        count += 1\n\n# Print the result\nprint(f\"The number of even numbers is: {count}\")",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 6.655673095945825e-05,
      "p_css": 2.623582285636588e-05,
      "p_html": 0.0002734496852934582,
      "p_java": 0.16982270552852938,
      "p_javascript": 0.5659211567009843,
      "p_matlab": 6.3896557251061555e-06,
      "p_python": 0.25020369014946137,
      "p_sql": 0.0034256558603761324,
      "p_typescript": 0.010254159865814324
    },
    {
      "text": "def delete_element_at_index(arr, index):\n    if index >= len(arr):\n        raise Exception('index out of range')\n    \n    # Delete the element at the index\n    del arr[index]\n\n# Example array and index\nmy_arr = [1,2,3,4,5];\nindex = 3;\n\n# Call the function\ndelete_element_at_index(my_arr, index)\n\n# Print the array\nprint(my_arr)",
      "y_true": "sql",
      "pred_label": "javascript",
      "p_bash": 0.01095135359131264,
      "p_css": 0.0011822998772739548,
      "p_html": 0.03400337648871201,
      "p_java": 0.008834974426770488,
      "p_javascript": 0.7784037029876851,
      "p_matlab": 0.05280681781973767,
      "p_python": 0.10156246752254575,
      "p_sql": 6.056007551093127e-05,
      "p_typescript": 0.012194447210451518
    },
    {
      "text": "import math\nx = 81.0\n# calculate the square root\nprint('The square root of %0.1f is %0.1f'%(x, math.sqrt(x)))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.019824365754562274,
      "p_css": 0.044823942743619574,
      "p_html": 0.0067780443346499054,
      "p_java": 0.0005363264648356969,
      "p_javascript": 0.04682843652387908,
      "p_matlab": 0.0007892284400556725,
      "p_python": 0.8029549853118589,
      "p_sql": 0.011357167485919516,
      "p_typescript": 0.06610750294061932
    },
    {
      "text": "for num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n if num % 2 == 0:\n print(num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.679032817529313e-17,
      "p_css": 1.491287175851539e-22,
      "p_html": 2.0519769637583101e-16,
      "p_java": 3.6350437896967974e-18,
      "p_javascript": 1.4521254752773983e-17,
      "p_matlab": 0.9999999999999947,
      "p_python": 5.0274073453224815e-15,
      "p_sql": 1.6544694606786108e-19,
      "p_typescript": 4.427792410141711e-17
    },
    {
      "text": "import pandas as pd\n\ndata = pd.read_sql\n\n  query = \"SELECT * FROM table\"\n\ndf = pd.read_sql(query, conn)\n\nsum_column = df['column'].sum()\n\nprint(sum_column)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0009281133320995743,
      "p_css": 0.15326722199575676,
      "p_html": 0.026093714423156174,
      "p_java": 0.00045495644825989227,
      "p_javascript": 0.0029135125605799853,
      "p_matlab": 0.001202577446658379,
      "p_python": 0.3329324650577284,
      "p_sql": 0.39242290012656456,
      "p_typescript": 0.08978453860919637
    },
    {
      "text": "def count_above_average(input_list): \n average = sum(input_list)/len(input_list)\n count = 0\n for value in input_list: \n  if value > average:  \n   count += 1\n return count",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0146636921236535e-06,
      "p_css": 6.818427692533237e-05,
      "p_html": 5.143176224506685e-06,
      "p_java": 3.7959697853407675e-07,
      "p_javascript": 8.346297154666275e-07,
      "p_matlab": 0.9999183682925551,
      "p_python": 3.267486996259412e-08,
      "p_sql": 3.675168745548096e-06,
      "p_typescript": 2.3675202936582196e-06
    },
    {
      "text": "class Multiplier:\n    def __init__(self, factor):\n        self.factor = factor\n \n    def multiply(self, num):\n        return num * self.factor",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002441782278860485,
      "p_css": 0.00020517213737643357,
      "p_html": 0.015063941032352658,
      "p_java": 3.578699996119237e-05,
      "p_javascript": 5.630423339110773e-05,
      "p_matlab": 0.0011453802999316608,
      "p_python": 0.9672501791683956,
      "p_sql": 0.015528914146643147,
      "p_typescript": 0.00047014375406223655
    },
    {
      "text": "import sqlite3\nimport requests\nfrom bs4 import BeautifulSoup\n\n# create sqlite3 DB\nconn = sqlite3.connect('example.db')\ncur = conn.cursor()\n\ncur.execute('CREATE TABLE IF NOT EXISTS ExampleTable (title TEXT, url TEXT)')\n\n# get website page contents\nurl = 'https://example.com/'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# parse data\nlinks = soup.find_all('a')\nfor link in links:\n title = link.string\n url = link['href']\n\n# insert data into DB\ncur.execute('INSERT INTO ExampleTable VALUES (?, ?)', (title, url))\n\nconn.commit()\nconn.close()\n\nprint('Data successfully stored in example.db')",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 3.57353357297443e-15,
      "p_css": 7.952061460905978e-05,
      "p_html": 0.012003181602101589,
      "p_java": 0.9373564612011125,
      "p_javascript": 4.629694544998364e-08,
      "p_matlab": 2.1985168878385126e-07,
      "p_python": 2.6283144365331193e-06,
      "p_sql": 0.050557827451733185,
      "p_typescript": 1.1466736919961796e-07
    },
    {
      "text": "def sort_list(lst, key):\n    # Sorts a list of dictionaries\n    return sorted(lst, key=lambda k: k[key])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004900490943927133,
      "p_css": 0.021672796661651565,
      "p_html": 0.0015409060797534303,
      "p_java": 0.00013239303407344466,
      "p_javascript": 0.00681454585231889,
      "p_matlab": 0.00011918964754842172,
      "p_python": 0.9654656757909192,
      "p_sql": 0.0028192291984275707,
      "p_typescript": 0.0009452146409147695
    },
    {
      "text": "def add_numbers(a, b):\n try:\n  sum = a + b\n except:\n  print(\"Error: Could not compute the sum of the numbers\")\n  return None\n else:\n  return sum",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0007383908857005997,
      "p_css": 0.001992026855967052,
      "p_html": 0.01618622195105113,
      "p_java": 0.47496744197038426,
      "p_javascript": 0.021404353809299725,
      "p_matlab": 4.064138807955273e-07,
      "p_python": 0.24358771572789836,
      "p_sql": 0.004553628850287198,
      "p_typescript": 0.23656981353553094
    },
    {
      "text": "import uuid\nunique_id = uuid.uuid3(uuid.NAMESPACE_DNS, string)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00022632570947821884,
      "p_css": 0.01944055684492388,
      "p_html": 0.006760014112656977,
      "p_java": 0.7316502405649777,
      "p_javascript": 1.7388903563383142e-05,
      "p_matlab": 0.0006824090837767398,
      "p_python": 0.23251682944223737,
      "p_sql": 0.00565327329643562,
      "p_typescript": 0.003052962041949965
    },
    {
      "text": "import psycopg2\n\ntry:\n connection = psycopg2.connect(\n user = \"postgres\",\n password = \"your_password\",\n host = \"localhost\",\n port = \"5432\",\n database = \"your_database\"\n )\n\n cursor = connection.cursor()\n postgreSQL_select_Query = \"select * from table_name\"\n  \n cursor.execute(postgreSQL_select_Query)\n  \n print(\"Table Before inserting a record\")\n records = cursor.fetchall() \n \n postgres_insert_query = \"\"\" INSERT INTO table_name (column_1, column_2, colum_n) VALUES (%s,%s,%s)\"\"\"\n record_to_insert = ('value1', 'value2', 'value3')\n cursor.execute(postgres_insert_query, record_to_insert)\n connection.commit()\n\n print(\"Table After inserting a record\")\n cursor.execute(postgreSQL_select_Query)\n records = cursor.fetchall() \n\nexcept (Exception, psycopg2.Error) as error :\n    print (\"Error while connecting to PostgreSQL\", error)\nfinally:\n    if(connection):\n        cursor.close()\n        connection.close()\n        print(\"PostgreSQL connection is closed\")",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00013739474390055017,
      "p_css": 0.0006919178742146534,
      "p_html": 0.0005947752658210872,
      "p_java": 3.6105530608307164e-05,
      "p_javascript": 0.0002311994465708876,
      "p_matlab": 0.00012140480304168091,
      "p_python": 0.0057726474365767545,
      "p_sql": 0.9864801838683926,
      "p_typescript": 0.005934371030873255
    },
    {
      "text": "import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Train the model\nmodel = KMeans(n_clusters=6).fit(data)\n\n# Predict the clusters\nclusters = model.predict(data)\n\n# Visualize the clusters\nplt.scatter(data[:,0], data[:,1], c=clusters)\nplt.show()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.016719744294128255,
      "p_css": 0.24871418771082976,
      "p_html": 0.049256404629416904,
      "p_java": 6.327537434348009e-05,
      "p_javascript": 0.0006371698921880602,
      "p_matlab": 0.00012106521505360223,
      "p_python": 0.6310332708697207,
      "p_sql": 0.000391982696877602,
      "p_typescript": 0.05306289931744156
    },
    {
      "text": "# List of numbers which are multiples of both 3 and 5 between 0 and 100\nmultiples_3_5 = [] \n\n# Iterate over all numbers between 0 and 100 \nfor num in range(101): \n \n    # Check for multiples of both 3 and 5 \n    if num % 3 == 0 and num % 5 == 0: \n        multiples_3_5.append(num) \n      \nprint(multiples_3_5)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0983982486123728e-08,
      "p_css": 2.485923338825595e-11,
      "p_html": 2.7422290785934014e-08,
      "p_java": 1.725366467020681e-07,
      "p_javascript": 1.5239207211276172e-06,
      "p_matlab": 0.9997724600774776,
      "p_python": 3.4102191672404677e-06,
      "p_sql": 1.1085238888147768e-07,
      "p_typescript": 0.00022228396246595534
    },
    {
      "text": "class Node:\n def __init__(self, data):\n self.data = data\n self.left = None\n self.right = None\n\ndef construct_tree(preorder, inorder):\n if not preorder or not inorder:\n return None\n\n # first element of preorder is the root\n root = Node(preorder[0])\n\n # get index of root in inorder\n idx = inorder.index(root.data)\n\n # left and right subtrees are constructed recursively\n root.left = construct_tree(preorder[1: idx + 1], inorder[0:idx])\n root.right = construct_tree(preorder[idx + 1:], inorder[idx + 1:])\n\n return root\n\nif __name__ == \"__main__\":\n preorder = [\"A\", \"B\", \"E\", \"K\", \"C\", \"F\", \"G\", \"D\"]\n inorder = [\"E\", \"B\", \"K\", \"A\", \"F\", \"C\", \"D\", \"G\"]\n\n root = construct_tree(preorder, inorder)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011419194715479488,
      "p_css": 0.01275013406106262,
      "p_html": 0.01965524568116706,
      "p_java": 0.0002225294476715524,
      "p_javascript": 0.0018276012113442165,
      "p_matlab": 0.0006921211705760297,
      "p_python": 0.8519891697563772,
      "p_sql": 0.08276284769602037,
      "p_typescript": 0.028958431504233023
    },
    {
      "text": "max_length = 0\n\nfor string in list_of_strings:\n    max_length = max(max_length, len(string))\n\nprint(max_length)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 9.828337796090694e-07,
      "p_css": 0.006148864792020966,
      "p_html": 0.0010508434150317304,
      "p_java": 0.7918182145644231,
      "p_javascript": 2.3653538727452853e-07,
      "p_matlab": 0.00011196482632933017,
      "p_python": 0.19605835920413808,
      "p_sql": 0.004478303076128281,
      "p_typescript": 0.0003322307527617053
    },
    {
      "text": "def area_rectangle(length, width):\n return length * width\n\nprint(area_rectangle(2, 3)) # Output: 6",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005246729397566405,
      "p_css": 0.002213384759119214,
      "p_html": 0.0009723045527366969,
      "p_java": 8.592961990586172e-05,
      "p_javascript": 0.030016219401286928,
      "p_matlab": 5.66472649649272e-05,
      "p_python": 0.9573836102458627,
      "p_sql": 0.003981819953954016,
      "p_typescript": 4.3354804603234325e-05
    },
    {
      "text": "def modify_number(number):\n   if number % 2 == 0:\n       return number * 2\n   else:\n       return number - 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.6682406576162384e-06,
      "p_css": 0.0001736663399055097,
      "p_html": 1.561710437165574e-05,
      "p_java": 7.840200614614262e-07,
      "p_javascript": 1.5143048726989817e-06,
      "p_matlab": 9.117740302443485e-06,
      "p_python": 0.9997816154654009,
      "p_sql": 1.066477124698503e-05,
      "p_typescript": 3.3520131806915543e-06
    },
    {
      "text": "def intersection(a, b): \nintersection_list = []\nfor item1 in a:\n    if item1 in b:\n        intersection_list.append(item1)\nreturn intersection_list\n\na = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]\nprint(intersection(a,b))\n# Output: [5, 8, 9, 10]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008333784905439876,
      "p_css": 0.031914080443743324,
      "p_html": 0.015348291686185319,
      "p_java": 0.00036056644186062284,
      "p_javascript": 0.0020161966505323125,
      "p_matlab": 0.2779351666929493,
      "p_python": 0.6621260269743287,
      "p_sql": 0.0005416156483058774,
      "p_typescript": 0.0014242705566546016
    },
    {
      "text": "import random \n\ndef generate_code():\n    code = \"\"\n    for _ in range(4):\n        code += str(random.randint(0, 9))\n    return code\n\ncode = generate_code()\nprint(code)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00018547908529648337,
      "p_css": 3.5569199151786402e-06,
      "p_html": 0.00011405007758428373,
      "p_java": 7.033882172900878e-06,
      "p_javascript": 0.00023474698764359183,
      "p_matlab": 0.0007537109621049991,
      "p_python": 0.07058800350243805,
      "p_sql": 0.0009257245951727915,
      "p_typescript": 0.9271876939876716
    },
    {
      "text": "import re\n\nphonePattern = re.compile(r'^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$') \n\ndef validate_phone(phone_number): \n    if phone_pattern.search(phone_number): \n        return true\n    else: \n        return false",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.600778962290382e-05,
      "p_css": 0.00045943842138782936,
      "p_html": 0.09207183313319638,
      "p_java": 3.554908931588878e-05,
      "p_javascript": 3.758044802294138e-05,
      "p_matlab": 1.4372285790973344e-05,
      "p_python": 0.9071680044644085,
      "p_sql": 2.707412433497247e-05,
      "p_typescript": 9.01402439197649e-05
    },
    {
      "text": "def average(a, b): \n    return (a + b) / 2\n\nprint(average(2, 3))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00017344556807958458,
      "p_css": 0.003156107243459545,
      "p_html": 0.000685324248422018,
      "p_java": 3.637846842738874e-05,
      "p_javascript": 0.00013729963439269895,
      "p_matlab": 2.4458839606114683e-05,
      "p_python": 0.9953078789792532,
      "p_sql": 0.00024817636373802583,
      "p_typescript": 0.00023093065462159192
    },
    {
      "text": "#!/usr/bin/env python2\n##################################################\n# GNU Radio Python Flow Graph\n# Title: Output Window\n# Generated: Sat Apr 30 16:45:27 2016\n##################################################\n\nif __name__ == '__main__':\n    import ctypes\n    import sys\n    if sys.platform.startswith('linux'):\n        try:\n            x11 = ctypes.cdll.LoadLibrary('libX11.so')\n            x11.XInitThreads()\n        except:\n            print \"Warning: failed to XInitThreads()\"\n\nfrom gnuradio import analog\nfrom gnuradio import blocks\nfrom gnuradio import eng_notation\nfrom gnuradio import fft\nfrom gnuradio import gr\nfrom gnuradio import wxgui\nfrom gnuradio.eng_option import eng_option\nfrom gnuradio.fft import window\nfrom gnuradio.filter import firdes\nfrom gnuradio.wxgui import fftsink2\nfrom gnuradio.wxgui import forms\nfrom gnuradio.wxgui import numbersink2\nfrom grc_gnuradio import wxgui as grc_wxgui\nfrom optparse import OptionParser\nimport osmosdr\nimport time\nimport wx\n\n\nclass Output_window(grc_wxgui.top_block_gui):\n\n    def __init__(self):\n        grc_wxgui.top_block_gui.__init__(self, title=\"Output Window\")\n        _icon_path = \"/usr/share/icons/hicolor/32x32/apps/gnuradio-grc.png\"\n        self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY))\n\n        ##################################################\n        # Variables\n        ##################################################\n        self.threshold = threshold = -55\n        self.samp_rate = samp_rate = 2.048e6\n        self.freq = freq = 658e6\n        self.fft_size = fft_size = 1.024e3\n\n        ##################################################\n        # Blocks\n        ##################################################\n        self.notebook = self.notebook = wx.Notebook(self.GetWin(), style=wx.NB_TOP)\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Spectrum\")\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Output\")\n        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \"Stream\")\n        self.Add(self.notebook)\n        _threshold_sizer = wx.BoxSizer(wx.VERTICAL)\n        self._threshold_text_box = forms.text_box(\n        \tparent=self.notebook.GetPage(1).GetWin(),\n        \tsizer=_threshold_sizer,\n        \tvalue=self.threshold,\n        \tcallback=self.set_threshold,\n        \tlabel=\"Threshold\",\n        \tconverter=forms.float_converter(),\n        \tproportion=0,\n        )\n        self._threshold_slider = forms.slider(\n        \tparent=self.notebook.GetPage(1).GetWin(),\n        \tsizer=_threshold_sizer,\n        \tvalue=self.threshold,\n        \tcallback=self.set_threshold,\n        \tminimum=-100,\n        \tmaximum=0,\n        \tnum_steps=100,\n        \tstyle=wx.SL_HORIZONTAL,\n        \tcast=float,\n        \tproportion=1,\n        )\n        self.notebook.GetPage(1).Add(_threshold_sizer)\n        _freq_sizer = wx.BoxSizer(wx.VERTICAL)\n        self._freq_text_box = forms.text_box(\n        \tparent=self.notebook.GetPage(0).GetWin(),\n        \tsizer=_freq_sizer,\n        \tvalue=self.freq,\n        \tcallback=self.set_freq,\n        \tlabel=\"freq\",\n        \tconverter=forms.float_converter(),\n        \tproportion=0,\n        )\n        self._freq_slider = forms.slider(\n        \tparent=self.notebook.GetPage(0).GetWin(),\n        \tsizer=_freq_sizer,\n        \tvalue=self.freq,\n        \tcallback=self.set_freq,\n        \tminimum=10e6,\n        \tmaximum=10e9,\n        \tnum_steps=100,\n        \tstyle=wx.SL_HORIZONTAL,\n        \tcast=float,\n        \tproportion=1,\n        )\n        self.notebook.GetPage(0).Add(_freq_sizer)\n        self.wxgui_numbersink2_1 = numbersink2.number_sink_f(\n        \tself.notebook.GetPage(1).GetWin(),\n        \tunit=\"signal present\",\n        \tminval=0,\n        \tmaxval=1,\n        \tfactor=1,\n        \tdecimal_places=0,\n        \tref_level=0,\n        \tsample_rate=samp_rate,\n        \tnumber_rate=15,\n        \taverage=False,\n        \tavg_alpha=None,\n        \tlabel=\"Signal Detection\",\n        \tpeak_hold=False,\n        \tshow_gauge=True,\n        )\n        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_1.win)\n        self.wxgui_numbersink2_0 = numbersink2.number_sink_f(\n        \tself.notebook.GetPage(1).GetWin(),\n        \tunit=\"dB\",\n        \tminval=-120,\n        \tmaxval=0,\n        \tfactor=1.0,\n        \tdecimal_places=10,\n        \tref_level=0,\n        \tsample_rate=samp_rate,\n        \tnumber_rate=15,\n        \taverage=False,\n        \tavg_alpha=30e-3,\n        \tlabel=\"level\",\n        \tpeak_hold=False,\n        \tshow_gauge=False,\n        )\n        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_0.win)\n        self.wxgui_fftsink2_0 = fftsink2.fft_sink_c(\n        \tself.notebook.GetPage(0).GetWin(),\n        \tbaseband_freq=freq,\n        \ty_per_div=5,\n        \ty_divs=10,\n        \tref_level=0,\n        \tref_scale=2.0,\n        \tsample_rate=samp_rate,\n        \tfft_size=1024,\n        \tfft_rate=15,\n        \taverage=True,\n        \tavg_alpha=30e-3,\n        \ttitle=\"Spectrum\",\n        \tpeak_hold=False,\n        \twin=window.rectangular,\n        )\n        self.notebook.GetPage(0).Add(self.wxgui_fftsink2_0.win)\n        self.rtlsdr_source_0 = osmosdr.source( args=\"numchan=\" + str(1) + \" \" + \"\" )\n        self.rtlsdr_source_0.set_sample_rate(samp_rate)\n        self.rtlsdr_source_0.set_center_freq(freq, 0)\n        self.rtlsdr_source_0.set_freq_corr(0, 0)\n        self.rtlsdr_source_0.set_dc_offset_mode(0, 0)\n        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)\n        self.rtlsdr_source_0.set_gain_mode(False, 0)\n        self.rtlsdr_source_0.set_gain(20, 0)\n        self.rtlsdr_source_0.set_if_gain(10, 0)\n        self.rtlsdr_source_0.set_bb_gain(5, 0)\n        self.rtlsdr_source_0.set_antenna(\"\", 0)\n        self.rtlsdr_source_0.set_bandwidth(0, 0)\n          \n        self.fft_1 = fft.fft_vcc(1024, True, (window.rectangular(1024)), True, 1)\n        self.blocks_vector_to_stream_0 = blocks.vector_to_stream(gr.sizeof_float*1, 1024)\n        self.blocks_threshold_ff_0 = blocks.threshold_ff(-100, threshold, 0)\n        self.blocks_stream_to_vector_0 = blocks.stream_to_vector(gr.sizeof_gr_complex*1, 1024)\n        self.blocks_nlog10_ff_0 = blocks.nlog10_ff(10, 1, 0)\n        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_float*1, \"/media/shashwat/DATA/Q3/Wireless Networking/gnu codes/Outputs/db_498\", False)\n        self.blocks_file_sink_0.set_unbuffered(False)\n        self.blocks_divide_xx_0 = blocks.divide_ff(1)\n        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1024)\n        self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 1.04858e6)\n\n        ##################################################\n        # Connections\n        ##################################################\n        self.connect((self.analog_const_source_x_0, 0), (self.blocks_divide_xx_0, 1))    \n        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_vector_to_stream_0, 0))    \n        self.connect((self.blocks_divide_xx_0, 0), (self.blocks_nlog10_ff_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_file_sink_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_threshold_ff_0, 0))    \n        self.connect((self.blocks_nlog10_ff_0, 0), (self.wxgui_numbersink2_0, 0))    \n        self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_1, 0))    \n        self.connect((self.blocks_threshold_ff_0, 0), (self.wxgui_numbersink2_1, 0))    \n        self.connect((self.blocks_vector_to_stream_0, 0), (self.blocks_divide_xx_0, 0))    \n        self.connect((self.fft_1, 0), (self.blocks_complex_to_mag_squared_0, 0))    \n        self.connect((self.rtlsdr_source_0, 0), (self.blocks_stream_to_vector_0, 0))    \n        self.connect((self.rtlsdr_source_0, 0), (self.wxgui_fftsink2_0, 0))    \n\n\n    def get_threshold(self):\n        return self.threshold\n\n    def set_threshold(self, threshold):\n        self.threshold = threshold\n        self._threshold_slider.set_value(self.threshold)\n        self._threshold_text_box.set_value(self.threshold)\n        self.blocks_threshold_ff_0.set_hi(self.threshold)\n\n    def get_samp_rate(self):\n        return self.samp_rate\n\n    def set_samp_rate(self, samp_rate):\n        self.samp_rate = samp_rate\n        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)\n        self.wxgui_fftsink2_0.set_sample_rate(self.samp_rate)\n\n    def get_freq(self):\n        return self.freq\n\n    def set_freq(self, freq):\n        self.freq = freq\n        self._freq_slider.set_value(self.freq)\n        self._freq_text_box.set_value(self.freq)\n        self.rtlsdr_source_0.set_center_freq(self.freq, 0)\n        self.wxgui_fftsink2_0.set_baseband_freq(self.freq)\n\n    def get_fft_size(self):\n        return self.fft_size\n\n    def set_fft_size(self, fft_size):\n        self.fft_size = fft_size\n\n\nif __name__ == '__main__':\n    parser = OptionParser(option_class=eng_option, usage=\"%prog: [options]\")\n    (options, args) = parser.parse_args()\n    tb = Output_window()\n    tb.Start(True)\n    tb.Wait()\n",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 7.234473559096457e-05,
      "p_css": 0.028298943627436644,
      "p_html": 0.6074047084355437,
      "p_java": 1.426481168434094e-07,
      "p_javascript": 3.4608789118653712e-06,
      "p_matlab": 8.428196426066976e-08,
      "p_python": 0.009611919707501557,
      "p_sql": 0.3546011203165383,
      "p_typescript": 7.2753683957932324e-06
    },
    {
      "text": "matrix = [[ 1,  2,  3,  4], \n          [ 5,  6,  7,  8], \n          [ 9, 10, 11, 12], \n          [13, 14, 15, 16]] \n\ndef print_matrix_in_spiral(matrix):\n    row_start = 0\n    row_end = len(matrix) - 1\n    col_start = 0\n    col_end = len(matrix[0]) - 1\n\n    while row_start <= row_end and col_start <= col_end:\n        for i in range(row_start, row_end + 1): \n            print(matrix[row_start][i], end = \" \") \n  \n        row_start += 1\n  \n        for i in range(col_start, col_end + 1): \n            print(matrix[i][col_end], end = \" \") \n  \n        col_end -= 1\n  \n        if row_start <= row_end: \n            for i in range(row_end, row_start - 1, -1): \n                print(matrix[row_end][i], end = \" \") \n   \n            row_end -= 1\n  \n        if col_start <= col_end: \n            for i in range(col_end, col_start - 1, -1): \n                print(matrix[i][col_start], end = \" \") \n   \n            col_start += 1\n\nprint_matrix_in_spiral(matrix)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00014000919210205623,
      "p_css": 0.00011237934337671797,
      "p_html": 0.0004458370720296182,
      "p_java": 1.8796954103828056e-05,
      "p_javascript": 2.4766910436972455e-05,
      "p_matlab": 0.1309711142536276,
      "p_python": 0.8678328292549327,
      "p_sql": 0.00011769084494586419,
      "p_typescript": 0.00033657617444481834
    },
    {
      "text": "import random\nimport string\n\ndef generate_password():\n  length = random.randrange(8, 11)\n  password = ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(length))\n  return password\n\nif __name__ == '__main__':\n  password = generate_password()\n  print('Generated Password:', password)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.9903847002884434e-12,
      "p_css": 3.566406881054243e-09,
      "p_html": 4.995611528661672e-09,
      "p_java": 2.5389887721269883e-05,
      "p_javascript": 4.900454551629136e-13,
      "p_matlab": 4.847524226071282e-09,
      "p_python": 1.2947962947479464e-05,
      "p_sql": 0.9999616481182675,
      "p_typescript": 6.190406044275394e-10
    },
    {
      "text": "import logging\n\ndef handler(e):\n logging.exception(e)\n # Do any other error handling logic here.\n\ntry:\n # the code that could throw an error\nexcept Exception as e:\n handler(e)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 6.84339039400108e-05,
      "p_css": 2.9397689495351437e-06,
      "p_html": 5.128173319195867e-05,
      "p_java": 4.5491679227355404e-06,
      "p_javascript": 0.0002403471836446803,
      "p_matlab": 2.3676362162211738e-05,
      "p_python": 0.0002585243289166647,
      "p_sql": 3.9770594778793945e-05,
      "p_typescript": 0.9993104769564936
    },
    {
      "text": "from flask import Flask, request\nimport sqlite3\n\napp = Flask(name)\n\nconn = sqlite3.connect('movies.db')\ncur = conn.cursor()\n\n@app.route('/api/movies', methods=['GET'])\ndef get_movie():\n title = request.args.get('title')\n language = request.args.get('language')\n year = request.args.get('year')\n \n query = 'SELECT * FROM movies WHERE title=' + title + ' AND language=' + language + ' AND year=' + year\n cur.execute(query)\n result = cur.fetchone()\n \n if not result:\n return {'error': 'No movie found for given parameters.'}, 400\n \n return {\n 'title': result[0],\n 'language': result[1],\n 'year': result[2]\n }\n\nif name == 'main':\n app.run(debug=True)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00011618517782894071,
      "p_css": 0.6959174630019551,
      "p_html": 0.18892048809135417,
      "p_java": 0.000276408610824434,
      "p_javascript": 1.69281271015336e-05,
      "p_matlab": 1.1253275021060173e-06,
      "p_python": 0.005253959190849081,
      "p_sql": 0.10830177874784595,
      "p_typescript": 0.0011956637247386953
    },
    {
      "text": "def get_str_length(string):\n  return len(string)\n\nprint(get_str_length(string)) # outputs 13",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.0050978424920424e-21,
      "p_css": 2.0725121511722836e-11,
      "p_html": 3.011205842036107e-13,
      "p_java": 0.9999998188363066,
      "p_javascript": 2.0233029942886713e-23,
      "p_matlab": 9.549523366649127e-18,
      "p_python": 1.798723596153245e-07,
      "p_sql": 1.270278619791008e-09,
      "p_typescript": 2.889274171749121e-14
    },
    {
      "text": "import pandas as pd \n\n# Create dataframe\ndata = {\n    'size': [1,600],\n    'bedrooms': [3],\n    'bathrooms': [2],\n    'garage_size': [1]\n    }\ndf = pd.DataFrame(data)\n\n# Define the features and target\nfeatures = df[['size','bedrooms','bathrooms','garage_size']]\ntarget = df['house_price']\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size = 0.2)\n\n# Import linear regression model and train\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\n# Make prediction on test data\npredictions = model.predict(x_test)\nprint(predictions)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.008944574288744974,
      "p_css": 0.42224925056953694,
      "p_html": 0.008902546026228931,
      "p_java": 8.662504827272005e-06,
      "p_javascript": 4.644893914213637e-05,
      "p_matlab": 2.526458441005187e-05,
      "p_python": 0.4595943774200956,
      "p_sql": 0.00013402678583012242,
      "p_typescript": 0.10009484888118396
    },
    {
      "text": "def generatemaxcombo(arr):\n    max_combo = []\n    value = 1\n    for x in arr:\n        value = value * x\n        max_combo.append(value)\n    return max_combo\n\narr = [4, 2, 8, 12]\nmax_combo = generatemaxcombo(arr)\n\nprint(\"The maximum combination of {} is: {}\".format(arr, max_combo))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0601065994700352e-12,
      "p_css": 2.943426377191451e-10,
      "p_html": 1.0027324901256237e-12,
      "p_java": 1.506285289323756e-13,
      "p_javascript": 2.2004337441619627e-12,
      "p_matlab": 0.9999999996932967,
      "p_python": 1.3381484170043829e-16,
      "p_sql": 1.2869988516638196e-13,
      "p_typescript": 7.81807087710591e-12
    },
    {
      "text": "def dotProduct(vector1, vector2): \n    dotProd = 0\n    for i in range(len(vector1)):\n        dotProd += vector1[i] * vector2[i]\n    return dotProd",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010070369206350513,
      "p_css": 0.0008509799224868953,
      "p_html": 0.0025857483647355466,
      "p_java": 0.000177807532921697,
      "p_javascript": 0.00029121335213714,
      "p_matlab": 0.038874995428702964,
      "p_python": 0.9540088016377438,
      "p_sql": 0.0008511988799922942,
      "p_typescript": 0.0013522179606447655
    },
    {
      "text": "The given code snippet defines a function called 'count_ones' which takes a single integer argument 'n'. It then initializes a count variable which is used to keep track of the number of ones in binary representation of the given argument. It then executes a loop which runs until all bits of the argument are processed in binary representation. It uses bitwise & operation on the argument with 1 and then compares the result with 1 to recognize whether the bit is 1 or 0. If it is 1, it increments the count by 1, and if it is 0, it does nothing. Finally, it shifts the argument to the right by 1 bit before looping back and processes the next bit.",
      "y_true": "javascript",
      "pred_label": "typescript",
      "p_bash": 4.392302504749279e-11,
      "p_css": 2.1005542297274256e-09,
      "p_html": 1.9516251257806897e-10,
      "p_java": 1.2045510900054119e-10,
      "p_javascript": 0.00017857907805161484,
      "p_matlab": 6.012351738328887e-11,
      "p_python": 3.4736977967489633e-09,
      "p_sql": 8.942675500141004e-10,
      "p_typescript": 0.9998214140337647
    },
    {
      "text": "# Define a function to count the strings\ndef count_strings(lst):\n count = 0\n \n # Iterate through the list\n for s in lst:\n \n # Check if string length is greater than 2 and first and last character is same\n if len(s) >= 2 and s[0] == s[-1]:\n count += 1\n \n return count\n \n# Driver Code\nlst = ['abc', 'xyz', 'aba', '1221']\nprint(count_strings(lst))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.448867929207831e-06,
      "p_css": 0.0007906594098248008,
      "p_html": 2.635850554911951e-05,
      "p_java": 0.00023138205779409834,
      "p_javascript": 0.0018437143974821902,
      "p_matlab": 1.786778460355354e-05,
      "p_python": 0.9084573731305341,
      "p_sql": 0.005497644961531215,
      "p_typescript": 0.08313055088475166
    },
    {
      "text": "def getAverageOfFirstThree(data):\n    sum = 0\n    for i in range(3):\n        sum += data[i]\n    \n    return sum / 3",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.924984589127614e-06,
      "p_css": 8.281765146159763e-05,
      "p_html": 0.0024611273768629003,
      "p_java": 0.0007845640239377552,
      "p_javascript": 6.722167108997982e-06,
      "p_matlab": 0.9849826637722238,
      "p_python": 0.011112078773129686,
      "p_sql": 0.0003270512590151521,
      "p_typescript": 0.00023504999167096903
    },
    {
      "text": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n echo \"Usage: $0 [dir]\"\n exit 1\nfi\n\nDIR=\"\"$1\"\"\n\nif [ ! -d \"$DIR\" ]; then\n echo \"Error: Directory \\\"$DIR\\\" does not exist\"\n exit 1\nfi\n\ncd \"$DIR\"\npython -m SimpleHTTPServer 8080",
      "y_true": "bash",
      "pred_label": "bash",
      "p_bash": 0.9999999999999147,
      "p_css": 1.7339261319201283e-15,
      "p_html": 3.445737148480867e-14,
      "p_java": 2.24330408571247e-18,
      "p_javascript": 2.6116516416905374e-14,
      "p_matlab": 1.7018759275488753e-14,
      "p_python": 1.6337247954068755e-15,
      "p_sql": 4.266303017749901e-15,
      "p_typescript": 2.9800853165687724e-18
    },
    {
      "text": "def shorten_string(arr):\n    \"\"\"\n    Manipulate a list of strings so that each string contains only the first letter from the original string.\n    \"\"\"\n    result = []\n    for word in arr:\n        result.append(word[0])\n    \n    return result\n\n# Call the function\narr = [\"apple\", \"banana\", \"coconut\"]\nresult = shorten_string(arr)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.780649736241254e-06,
      "p_css": 0.012943066579502826,
      "p_html": 9.192213581600958e-05,
      "p_java": 0.0024135443006916162,
      "p_javascript": 0.001018745032555935,
      "p_matlab": 0.003597116231266067,
      "p_python": 0.9752352146312837,
      "p_sql": 0.004580851903600268,
      "p_typescript": 0.00011475853554724639
    },
    {
      "text": "from datetime import date\n\nprint(\"Hello!\")\n\ncurrent_date = date.today().strftime(\"%Y-%m-%d\")\nprint(\"Today's date is\", current_date)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04239612875225597,
      "p_css": 0.041112353800270056,
      "p_html": 0.003617256914919938,
      "p_java": 4.458443108237339e-06,
      "p_javascript": 0.009351094780542331,
      "p_matlab": 0.0004910831989428207,
      "p_python": 0.900382202638518,
      "p_sql": 0.0012654381816174193,
      "p_typescript": 0.0013799832898252987
    },
    {
      "text": "import matplotlib.pyplot as plt\n\ndata = [2, 3, 5, 6, 8, 4, 2, 4, 6, 9]\n\nplt.hist(data)\nplt.title(\"Histogram of Data\")\nplt.xlabel(\"Data Values\")\nplt.ylabel(\"Frequency\")\nplt.show()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.0001918157365468514,
      "p_css": 0.015034576996867227,
      "p_html": 0.8952245949538497,
      "p_java": 0.00012757341782674818,
      "p_javascript": 0.0002809279522607414,
      "p_matlab": 0.00016948800151113884,
      "p_python": 0.06800800075240875,
      "p_sql": 0.005809403017583995,
      "p_typescript": 0.015153619171145029
    },
    {
      "text": "output_list = []\n\ndef flatten_list(my_list):\n    for item in my_list:\n        if isinstance(item, list):\n            flatten_list(item)\n        elif isinstance(item, tuple):\n            flatten_list(list(item))\n        else:\n            output_list.append(item)\n\nflatten_list(input_list)\n\nprint(output_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0021130543385588234,
      "p_css": 0.05271965123581752,
      "p_html": 0.07155872800208349,
      "p_java": 0.00022212576506720316,
      "p_javascript": 0.03773002966775637,
      "p_matlab": 0.030046316003434714,
      "p_python": 0.8035235447851097,
      "p_sql": 0.0012805961749687849,
      "p_typescript": 0.0008059540272033011
    },
    {
      "text": "# Find the second largest number from a given list\n\nnumbers = [12, 23, 45, 22, 50]\n\n# Sort the list in ascending order\nnumbers.sort()\n\n# Get the second largest number\nsecond_largest_num = numbers[-2]\n\nprint('The second largest number in the list is:', second_largest_num)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0021258680847937206,
      "p_css": 0.00828802138364212,
      "p_html": 0.010728455909516118,
      "p_java": 0.0010278009833862751,
      "p_javascript": 0.038956544383766833,
      "p_matlab": 1.0987080674192246e-05,
      "p_python": 0.9266944298241042,
      "p_sql": 0.00477539355061182,
      "p_typescript": 0.007392498799504981
    },
    {
      "text": "def sortListInDescendingOrder(list):\n    return sorted(list, reverse=True)\n\nlist1 = [30, 10, 40, 20]\nsortedList = sortListInDescendingOrder(list1)\nprint(sortedList)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005810768643273802,
      "p_css": 0.013480617837136328,
      "p_html": 0.002403685023426514,
      "p_java": 7.446887919581879e-05,
      "p_javascript": 0.0008029675706909697,
      "p_matlab": 0.00021607088706869826,
      "p_python": 0.9816504930903315,
      "p_sql": 0.0005688877932712737,
      "p_typescript": 0.00022173205455146627
    },
    {
      "text": "def optimize_route(startX, endX):\n    best_route = [startX]\n    next_x = startX\n\n    while next_x < endX:\n        best_cost = float(\"inf\")\n        for x in range(next_x+1, endX+1):\n            cost = abs(x - next_x)\n            if cost < best_cost:\n                best_cost = cost\n                next_x = x\n        best_route.append(next_x)\n\n    return best_route",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0002750627755692694,
      "p_css": 0.0003058168281955531,
      "p_html": 0.0006480608237553097,
      "p_java": 6.960691179341456e-05,
      "p_javascript": 5.392963082748989e-05,
      "p_matlab": 0.9359098378037498,
      "p_python": 0.06185869210578084,
      "p_sql": 0.0006244364208879595,
      "p_typescript": 0.000254556699440487
    },
    {
      "text": "# Python code for Newton-Raphson Method for \n# solving equations \n\n# An example function whose solution is determined using \n# Newton-Raphson method. The function is x^3 - x^2 + 2 \ndef func(x): \n\treturn x * x * x - x * x + 2\n\n# Derivative of the above function which is 3*x^x - 2*x \ndef derivFunc(x): \n\treturn 3 * x * x - 2 * x \n\n# Function to find the root \ndef newtonRaphson(x): \n\th = func(x) / derivFunc(x) \n\twhile abs(h) >= 0.0001: \n\t\th = func(x) / derivFunc(x) \n\t\t\n\t\t# x(i+1) = x(i) - f(x) / f'(x) \n\t\tx = x - h \n\t\n\tprint(\"The value of the root is : \", \n\t\t\t\t\t\t\"%.4f\"% x) \n\n# Driver program to test above \nx = 3 # Initial values assumed \nnewtonRaphson(x)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 7.537424074478226e-08,
      "p_css": 2.4244376209083288e-09,
      "p_html": 3.0503136823303095e-09,
      "p_java": 1.981811472363298e-09,
      "p_javascript": 0.9999997925088444,
      "p_matlab": 7.972158549045915e-12,
      "p_python": 4.0909317972410226e-10,
      "p_sql": 1.098491398010052e-08,
      "p_typescript": 1.1325837289127863e-07
    },
    {
      "text": "def add(x, y):\n    return x + y",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.644166295168704e-05,
      "p_css": 3.0373726174217555e-05,
      "p_html": 0.0001836470763826539,
      "p_java": 0.7161181174906789,
      "p_javascript": 3.5323731553628805e-05,
      "p_matlab": 1.1044216229316879e-10,
      "p_python": 0.2834323043138984,
      "p_sql": 0.00013554546581326585,
      "p_typescript": 1.8246422105049435e-05
    },
    {
      "text": "def sum_pair(array, target_sum):\n    res_pair = []\n    # Sort the array\n    array.sort()\n    # Set the left and right pointers\n    l, r = 0, len(array) - 1\n    while l != r:\n        if array[l] + array[r] == target_sum:\n            res_pair.append((array[l], array[r]))\n            l += 1\n            r -= 1\n            # If sum is smaller than target sum, increase left\n        elif array[l] + array[r] < target_sum:\n            l += 1\n            # If sum is greater than target sum, decrease right\n        else:\n            r -= 1\n    return res_pair\n \nprint(sum_pair([2, 4, 6, 9], 8))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.001772585512043866,
      "p_css": 0.000434367645223376,
      "p_html": 0.00035445624130573864,
      "p_java": 0.00025091884659770366,
      "p_javascript": 0.0002437538646464303,
      "p_matlab": 0.9953425827110305,
      "p_python": 9.028432490048984e-05,
      "p_sql": 0.000228729341108273,
      "p_typescript": 0.0012823215131436915
    },
    {
      "text": "def calc_diff(arr1, arr2):\n    # Initialize difference array\n    diff = []\n\n    # Iterate through arrays\n    for i in range(len(arr1)):\n        # Calculate the difference between two elements\n        diff.append(abs(arr1[i] - arr2[i]))\n        \n    return diff",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002369332933324215,
      "p_css": 0.0020238004115093705,
      "p_html": 0.0032323031905762134,
      "p_java": 0.002636307007664236,
      "p_javascript": 0.0004380094577000348,
      "p_matlab": 0.0075115379646117164,
      "p_python": 0.974567263663051,
      "p_sql": 0.00394927004086818,
      "p_typescript": 0.003272175330694804
    },
    {
      "text": "import smtplib\nimport logging\n\ndef send_email():\n sender_email = \"my@mail.com\"\n receiver_email = \"your@mail.com\"\n\n message = \"\"\"\\\n Subject: Exception Alert\n\nThere has been an exception in the code.\"\"\"\n\n with smtplib.SMTP('smtp.gmail.com', 587) as server:\n server.ehlo()\n server.starttls()\n server.login(sender_email, 'SENDER_EMAIL_PASSWORD')\n server.sendmail(sender_email, receiver_email, message)\n \nlogging.basicConfig(filename=\"logfile.log\", \n                    level=logging.ERROR, \n                    format='%(asctime)s - %(levelname)s - %(message)s') \n\ntry:\n raise Exception\nexcept Exception:\n logging.error(\"Error occurred\", exc_info=True)\n send_email()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00010849154125493805,
      "p_css": 0.011844770141805412,
      "p_html": 0.10924530169714079,
      "p_java": 0.014210710375473466,
      "p_javascript": 0.025478695339976102,
      "p_matlab": 0.00021021216013709736,
      "p_python": 0.11854777990097623,
      "p_sql": 0.0021877897923841924,
      "p_typescript": 0.7181662490508518
    },
    {
      "text": "def minCoins(amount):  \n  \n    # Initializing the list of coins with the given amount \n    coins = [1, 2, 5] \n    num_coins = [999999999] * (amount+1) \n    num_coins[0] = 0\n  \n    for i in range(1, amount+1): \n        for j in coins: \n            if j <= i: \n                sub_res = num_coins[i-j] \n                if sub_res + 1 < num_coins[i]: \n                    num_coins[i] = sub_res + 1\n  \n    return num_coins[amount] \n\nprint(minCoins(8))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.01971751354561152,
      "p_css": 0.0029325772015478574,
      "p_html": 0.0006512770110708847,
      "p_java": 0.00014267938229564495,
      "p_javascript": 0.017468241141148966,
      "p_matlab": 0.76452615995084,
      "p_python": 0.17590532841844728,
      "p_sql": 0.002252183994137781,
      "p_typescript": 0.01640403935489994
    },
    {
      "text": "s1 = set([i for i in s1])\ns2 = set([i for i in s2])\ncommon = list(s1.intersection(s2))\nprint(\"The following characters occur in both the words: \" + ', '.join(common))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.005356564896339417,
      "p_css": 0.010298398669713384,
      "p_html": 0.013862368813152157,
      "p_java": 9.72519538478103e-05,
      "p_javascript": 0.004402021970448854,
      "p_matlab": 0.26593006714354606,
      "p_python": 0.19379291170499674,
      "p_sql": 0.47326867135774875,
      "p_typescript": 0.03299174349020701
    },
    {
      "text": "def findSmallest(arr):\n    smallest = arr[0]\n    for i in arr:\n        if i < smallest:\n            smallest = i\n    return smallest\n\nfindSmallest([3, 5, 2, 1, 4])\n# Output: 1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.2273268125958175e-05,
      "p_css": 1.8772256105444963e-05,
      "p_html": 9.331429983941933e-06,
      "p_java": 1.2422957248296126e-06,
      "p_javascript": 2.8628047002665956e-06,
      "p_matlab": 0.999071746804498,
      "p_python": 0.0008702750210371573,
      "p_sql": 2.712047108643818e-07,
      "p_typescript": 3.224915113806439e-06
    },
    {
      "text": "def compute_sum(int_arry):\n    sum = 0\n    # loop through each element in the array\n    for i in int_arry:\n        sum += i\n    return sum\n\n# example testing code\nint_arry = [1, 2, 3, 4, 5]\ntotal_sum = compute_sum(int_arry)\n\nprint(\"Sum of array elements is\", total_sum)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0007105803693894286,
      "p_css": 0.001435823495367131,
      "p_html": 0.007694186638072213,
      "p_java": 0.6728092500041899,
      "p_javascript": 0.05900107912468839,
      "p_matlab": 0.18362667228657323,
      "p_python": 0.06861725592904035,
      "p_sql": 0.0007054764424078105,
      "p_typescript": 0.005399675710271627
    },
    {
      "text": "def add_numbers(numbers):\n    \"\"\"\n    Find the sum of a given list of numbers.\n    Args:\n        numbers: a list of numbers.\n    Returns:\n        The sum of the numbers.\n    \"\"\"\n    sum = 0\n\n    # Iterate over numbers\n    for num in numbers:\n        # Add number to total\n        sum += num\n\n    return sum\n\ntotal = add_numbers([4, 7, 6, 2])\n\nprint(total)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.5288840391971e-07,
      "p_css": 2.1141150962793786e-08,
      "p_html": 8.280014187838637e-06,
      "p_java": 0.9972996561060967,
      "p_javascript": 0.0025341910549991514,
      "p_matlab": 2.7472911596879065e-10,
      "p_python": 0.00013666614367353753,
      "p_sql": 7.398694625101892e-06,
      "p_typescript": 1.3633682133736101e-05
    },
    {
      "text": "class Node: \n def __init__(self, data): \n self.data = data\n self.left = None\n self.right = None\n\n# Function to insert a node \ndef insert(node, data): \n if node is None: \n node = Node(data) \n elif data < node.data: \n node.left = insert(node.left, data) \n else: \n node.right = insert(node.right, data) \n\nreturn node \n\nif __name__ == '__main__':\n root = None \n root = insert(root, 8) \n root = insert(root, 3) \n root = insert(root, 10) \n root = insert(root, 1) \n root = insert(root, 6)\n root = insert(root, 4) \n root = insert(root, 7) \n root = insert(root, 14)\n root = insert(root, 13)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00014232433932789357,
      "p_css": 0.0031740819322954752,
      "p_html": 0.003525124916256505,
      "p_java": 8.757209021713392e-05,
      "p_javascript": 0.0005425206778757774,
      "p_matlab": 0.00015558095914715563,
      "p_python": 0.09023192031563251,
      "p_sql": 0.8995665322174371,
      "p_typescript": 0.0025743425518103195
    },
    {
      "text": "class DataStorage:\n\n    def __init__(self):\n        self.data = {}\n\n    def store(self, key, value):\n        \"\"\"Stores a value in the data structure with the given key\"\"\"\n        self.data[key] = value\n\n    def get(self, key):\n        \"\"\"Retrieves the value associated with a given key in the data structure\"\"\"\n        return self.data[key]\n\n    def remove(self, key):\n        \"\"\"Removes the value associated with a given key from the data structure\"\"\"\n        if key in self.data:\n            del self.data[key]",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.9508516352099045e-05,
      "p_css": 0.7609887119988485,
      "p_html": 0.014239346764652131,
      "p_java": 5.900872046603553e-07,
      "p_javascript": 8.970085694737242e-05,
      "p_matlab": 0.0005469697200129205,
      "p_python": 0.0005552185844039425,
      "p_sql": 0.06664403457679387,
      "p_typescript": 0.1569159188947846
    },
    {
      "text": "import pytorch\nimport numpy as np\n\n# Define the board size\nROWS = 6\nCOLS = 7\n\n# Create a 2-dimensional numpy array board\nboard = np.zeros((ROWS,COLS))\n\n# Define players\nplayer1 = 1\nplayer2 = -1\n\n# Define a class for our agent\nclass Agent:\n    def __init__(self, symbol):\n        self.symbol = symbol\n        \n    def move(self, board):\n        valid_moves = []\n        for c in range(COLS):\n            if board[ROWS-1][c] == 0:\n                valid_moves.append(c)\n        \n        # Get the highest predicted value column\n        col = self.predict(board, valid_moves)\n        \n        # Drop the piece in column\n        for r in range(ROWS):\n            # If row is empty\n            if board[r][col] == 0:\n                board[r][col] = self.symbol\n                \n                # End for loop\n                break\n    \n    # Artificial intelligence/Machine Learning\n    def predict(self, board, valid_moves):\n        predictions = []\n        # Loop through all the valid moves\n        for col in valid_moves:\n            # Create a deep copy of the board\n            temp_board = board.copy()\n            # Drop the piece in the column\n            for r in range(ROWS):\n                if temp_board[r][col] == 0:\n                    temp_board[r][col] = self.symbol\n                    break\n            # Make a prediction with the Neural Network\n            prediction = model.predict(temp_board.reshape(1, ROWS, COLS))\n            predictions.append(prediction)\n        \n        # Search predictions for the highest value\n        # and return the corresponding column index\n        return int(np.argmax(predictions))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01599299805912508,
      "p_css": 0.020452364091417423,
      "p_html": 0.028403214716943317,
      "p_java": 0.00022907324747746497,
      "p_javascript": 0.0013050080549711855,
      "p_matlab": 0.07880631597478235,
      "p_python": 0.3727953581853941,
      "p_sql": 0.1260701070048155,
      "p_typescript": 0.3559455606650735
    },
    {
      "text": "import pandas as pd\n\n# Create the dataframe\ndf = pd.DataFrame({'date': dates, 'number': numbers, 'string': strings})\n\ndf\n   date  number string\n0  2013-01-01       1      a\n1  2013-01-02       2      b\n2  2013-01-03       3      c",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 3.653929474502556e-06,
      "p_css": 0.06470188404159762,
      "p_html": 0.002466783038897452,
      "p_java": 0.4752521097987282,
      "p_javascript": 1.7594418266307343e-06,
      "p_matlab": 1.557515218686638e-05,
      "p_python": 0.4344916973591478,
      "p_sql": 0.01473622821414118,
      "p_typescript": 0.008330309023999762
    },
    {
      "text": "def concat_and_capitalize(str1, str2):\n    result = str1 + str2\n    return result.capitalize()\n\nstr1 = 'python'\nstr2 = 'programming'\nprint(concat_and_capitalize(str1, str2))",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.001297237678705537,
      "p_css": 0.000422245506009836,
      "p_html": 4.615258236660529e-08,
      "p_java": 4.402444473588082e-06,
      "p_javascript": 0.8488512449089289,
      "p_matlab": 1.3080379798843195e-05,
      "p_python": 0.14391326855246955,
      "p_sql": 0.003740637634431191,
      "p_typescript": 0.001757836742600327
    },
    {
      "text": "def is_perfect_square(lst):\n    for num in lst:\n        if (int(num ** 0.5)) ** 2 != num: \n            return False\n    return True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00010210686716474,
      "p_css": 2.7756525950131217e-09,
      "p_html": 0.00011022819073600922,
      "p_java": 0.001385550064209436,
      "p_javascript": 4.519664353020541e-06,
      "p_matlab": 0.5906726173797211,
      "p_python": 0.40771719835924924,
      "p_sql": 1.8644372298545609e-06,
      "p_typescript": 5.9122616840802424e-06
    },
    {
      "text": "def product_of_list(list):\n    output = {}\n    for element in list:\n        output[element] = element * element\n    return output\n\nprint(product_of_list([7, 8, 5]))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.9287472424580345e-05,
      "p_css": 1.856661692645238e-06,
      "p_html": 2.4022566742925788e-06,
      "p_java": 5.680956970992816e-08,
      "p_javascript": 4.1683754451473155e-07,
      "p_matlab": 0.9997913843778387,
      "p_python": 0.00018458192492620503,
      "p_sql": 2.1115545884271548e-10,
      "p_typescript": 1.3448173895667995e-08
    },
    {
      "text": "def extract_domain_name(url):\n  split_url = url.split('//')\n  if len(split_url) == 2:\n      domain_name = split_url[1]\n  else: \n      domain_name = split_url[0]\n  \n  split_domain_name = domain_name.split('/')\n  return split_domain_name[0]\n\ndomain_name = extract_domain_name(url)\nprint(domain_name)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.4425931982896314e-05,
      "p_css": 0.0752105193679349,
      "p_html": 0.04971564425378588,
      "p_java": 0.2125946082664072,
      "p_javascript": 0.00262531216724629,
      "p_matlab": 0.008077412542874193,
      "p_python": 0.642006710679664,
      "p_sql": 0.0050515144426275275,
      "p_typescript": 0.004703852347477195
    },
    {
      "text": "class Student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\ndef read_excel(filename):\n    excel_file = open(filename, 'r')\n    lines = excel_file.readlines()\n    students = list()\n    for line in lines[1:]:\n        name, gpa = line.split(\",\")\n        students.append(Student(name, float(gpa)))\n    return students",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.08015665172853695,
      "p_css": 0.005692648097078081,
      "p_html": 0.01140324660532095,
      "p_java": 0.8032092459372037,
      "p_javascript": 1.378583262684848e-07,
      "p_matlab": 0.0007567867612085856,
      "p_python": 0.09282264626060331,
      "p_sql": 0.0010583794073077762,
      "p_typescript": 0.0049002573444144664
    },
    {
      "text": "import matplotlib.pyplot as plt\n\nwords = [\"word1\", \"word2\", \"word3\", \"word4\"]\nfrequencies = [5, 8, 3, 2]\n\nplt.bar(words, frequencies)\nplt.title(\"Word Frequency Chart\")\nplt.xlabel(\"Words\")\nplt.ylabel(\"Frequency\")\nplt.show()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.0004785876238900472,
      "p_css": 0.0015447876484748764,
      "p_html": 0.8914473509190167,
      "p_java": 5.596829150916059e-05,
      "p_javascript": 9.951095048430644e-05,
      "p_matlab": 0.00013741769393173846,
      "p_python": 0.10157370069541653,
      "p_sql": 0.004010401798257754,
      "p_typescript": 0.000652274379018794
    },
    {
      "text": "def find_intersection(list1, list2):\n    intersection = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                intersection.append(item1)\n    return intersection\n\nlist1 = [1, 2, 3]\nlist2 = [3, 4, 5]\nresult = find_intersection(list1, list2)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002764520959281749,
      "p_css": 0.010641001768631413,
      "p_html": 0.0013020687672443945,
      "p_java": 8.310905188074369e-05,
      "p_javascript": 0.00042116514277943653,
      "p_matlab": 0.010459176301520589,
      "p_python": 0.9752016647019744,
      "p_sql": 0.0007144221029820836,
      "p_typescript": 0.0009009400670586861
    },
    {
      "text": "def get_stats_for_string(string):\n    num_elements = len(string)\n    max_element = max(string)\n    min_element = min(string)\n    mean_element = sum(string) / num_elements\n    return (max_element, min_element, mean_element)\n\nstring = \"abcdef\"\nstats_for_string = get_stats_for_string(string)\nprint(\"Max: {0}, Min: {1}, Mean: {2}\".format(*stats_for_string))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.2019065030600018e-21,
      "p_css": 6.648068588870255e-13,
      "p_html": 4.641581046093864e-14,
      "p_java": 0.9999999994012032,
      "p_javascript": 3.21282638280311e-24,
      "p_matlab": 7.361717265515111e-18,
      "p_python": 5.553533746175982e-10,
      "p_sql": 4.2726867460535344e-11,
      "p_typescript": 5.429881709716029e-15
    },
    {
      "text": "# Program to remove duplicate elements\n\ndef remove_duplicates(nums):\n new_list = []\n for num in nums:\n if num not in new_list:\n new_list.append(num)\n \nreturn new_list\n\n# Main program\nnums = [1, 3, 3, 5, 5, 7]\ndedup_nums = remove_duplicates(nums)\nprint(dedup_nums) # [1, 3, 5, 7]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.04780754233541023,
      "p_css": 2.0124567955141196e-06,
      "p_html": 0.00017921684276314177,
      "p_java": 1.1920481173995083e-06,
      "p_javascript": 3.7974304364580874e-05,
      "p_matlab": 0.7814399908734814,
      "p_python": 0.17024955244252557,
      "p_sql": 0.0002562621875185966,
      "p_typescript": 2.6256509023569976e-05
    },
    {
      "text": "def minDepth(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 1\n    elif root.left is None:\n        return minDepth(root.right) + 1\n    elif root.right is None:\n        return minDepth(root.left) + 1\n    else:\n        return min(minDepth(root.left), minDepth(root.right)) + 1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000646228938297029,
      "p_css": 0.0061029250709059586,
      "p_html": 0.0020314170898182936,
      "p_java": 0.0008235742228903072,
      "p_javascript": 0.004948002627936663,
      "p_matlab": 0.0004805177093749508,
      "p_python": 0.8526506870180738,
      "p_sql": 0.13048511208435276,
      "p_typescript": 0.0018315352383500305
    },
    {
      "text": "import nltk \nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom collections import defaultdict\nfrom string import punctuation\nfrom heapq import nlargest\nimport numpy as np\n\n# Function to summarize the given text\ndef summarize(text, n):\n    # Tokenize the sentences in the text\n    sents = sent_tokenize(text)\n \n    # Tokenize the words in the text\n    words = word_tokenize(text.lower())\n \n    # Generate a list of stop words\n    stop_words = set(stopwords.words('english') + list(punctuation))\n \n    # Create a word frequency dictionary\n    word_freq = defaultdict(int)\n    for word in words:\n        if word not in stop_words:\n            word_freq[word] += 1\n \n    max_freq = max(word_freq.values()) \n \n    # Normalize the frequencies\n    for word in word_freq.keys():\n        word_freq[word] *= 1.0/max_freq\n \n    # Compute sentence scores\n    sent_scores = defaultdict(int) \n    for i, sent in enumerate(sents):\n        for word in word_tokenize(sent.lower()):\n            if word in word_freq.keys():\n                sent_scores[i] += word_freq[word]\n \n    # Identify the n highest scoring sentences\n    summary_sents = nlargest(n, sent_scores, key=sent_scores.get)\n    summary = [sents[j] for j in sorted(summary_sents)]   \n    return ' '.join(summary)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.018819022245109,
      "p_css": 0.05506850648850856,
      "p_html": 0.004661729148677916,
      "p_java": 7.679649993214062e-05,
      "p_javascript": 0.0006184456715509884,
      "p_matlab": 0.00010981073524815055,
      "p_python": 0.14402811804049778,
      "p_sql": 0.7627331620941429,
      "p_typescript": 0.013884409076332592
    },
    {
      "text": "def merge_list(list_1, list_2):\n  merged_list =[]\n  while list_1 and list_2:\n    if list_1[0] < list_2[0]:\n      merged_list.append(list_1.pop(0))\n    else:\n      merged_list.append(list_2.pop(0))\n  merged_list.extend(list_1 if list_1 else list_2)\n  return merged_list",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0890292627343786e-11,
      "p_css": 7.701783685626415e-11,
      "p_html": 3.3618049224333057e-11,
      "p_java": 4.336833626712378e-12,
      "p_javascript": 9.339223976126966e-12,
      "p_matlab": 0.9999999994462587,
      "p_python": 3.569304682880465e-10,
      "p_sql": 6.913877713146127e-21,
      "p_typescript": 6.16085250061165e-11
    },
    {
      "text": "from bs4 import BeautifulSoup\n\n\nclass HTMLParser:\n    def __init__(self, html_doc):\n        self.html_doc = html_doc\n\n    def parse(self):\n        soup = BeautifulSoup(self.html_doc, 'html.parser')\n        return soup",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00011992932786136185,
      "p_css": 0.009503036255566453,
      "p_html": 0.9584703863879445,
      "p_java": 1.7273839148024263e-06,
      "p_javascript": 1.5299915554448262e-05,
      "p_matlab": 8.784598334342951e-07,
      "p_python": 0.02563869277475899,
      "p_sql": 0.00616674460744574,
      "p_typescript": 8.330488712035877e-05
    },
    {
      "text": "def average(k):\n    sum = 0\n    for i in range(1, k+1):\n        sum += i\n\n    return sum / k",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.547565796983706e-06,
      "p_css": 5.252700741997183e-06,
      "p_html": 0.00017515698887566046,
      "p_java": 0.000705933842489138,
      "p_javascript": 4.997744948917325e-06,
      "p_matlab": 0.9913516702889942,
      "p_python": 0.007690529778638234,
      "p_sql": 3.636835839642934e-05,
      "p_typescript": 2.0542731118344073e-05
    },
    {
      "text": "\"\"\"\nCreate a program to assess whether or not a movie genre is representing violent behaviour\n\"\"\"\n\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\ndef classify_movie(review):\n    # Tokenize review\n    tokens = word_tokenize(review)\n\n    # Check for violent words in the review\n    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']\n\n    for token in tokens:\n        if token in violent_words:\n            return 'Yes'\n\n    return 'No'\n\nif __name__ == '__main__':\n    review = 'The movie is full of thrilling action scenes and lots of violence.'\n    result = classify_movie(review)\n    print(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01989433741550939,
      "p_css": 0.059022440504981746,
      "p_html": 0.004517916898955755,
      "p_java": 5.6293730818046905e-05,
      "p_javascript": 0.015630510235748334,
      "p_matlab": 0.0035471549104154746,
      "p_python": 0.6072467139542567,
      "p_sql": 0.2128641455311854,
      "p_typescript": 0.07722048681812918
    },
    {
      "text": "def count_strings_by_sum_of_ascii(strings):\n    count = 0\n    for string in strings:\n        ascii_sum = 0\n        for char in string:\n            ascii_sum += ord(char)\n        if ascii_sum % 3 == 0:\n            count += 1\n    return count",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.507427990700502e-08,
      "p_css": 0.0028406181451072292,
      "p_html": 5.072534225435806e-05,
      "p_java": 0.11451495936035157,
      "p_javascript": 4.11074293341038e-09,
      "p_matlab": 9.091345535763562e-05,
      "p_python": 0.8805567953915141,
      "p_sql": 0.0019273389511705573,
      "p_typescript": 1.8610169221712987e-05
    },
    {
      "text": "# Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def is_empty(self):\n        return self.head == None\n    \n    def add(self, data):\n        node = Node(data)\n        node.next = self.head\n        self.head = node\n\n    def remove(self):\n        if self.is_empty():\n            return None\n        data = self.head.data\n        self.head = self.head.next\n        return data",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 2.1789683701921507e-07,
      "p_css": 0.00022364890218628912,
      "p_html": 0.9854822487360875,
      "p_java": 5.193933064190994e-07,
      "p_javascript": 1.3203663731565383e-07,
      "p_matlab": 3.580685466923971e-09,
      "p_python": 0.0031582259912440605,
      "p_sql": 0.011128747947571474,
      "p_typescript": 6.25551544471685e-06
    },
    {
      "text": "def count_list_items(list_of_strings):\n counts = {}\n \n for item in list_of_strings:\n if item not in counts:\n counts[item] = 1\n else:\n counts[item] += 1\n \n return counts\n \nprint(count_list_items(list_of_strings))\n# Output: {\"apple\": 2, \"banana\": 1, \"orange\": 1, \"kiwi\": 1}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.003332602690192801,
      "p_css": 0.17085213448856354,
      "p_html": 0.0535868701434394,
      "p_java": 7.900697676157692e-05,
      "p_javascript": 0.007879934609858757,
      "p_matlab": 0.0017196982730347146,
      "p_python": 0.7618727742385698,
      "p_sql": 0.0004069034990465567,
      "p_typescript": 0.00027007508053276724
    },
    {
      "text": "def most_common(list):\n    dict = {}\n    for item in list:\n        dict[item] = dict.get(item,0) + 1\n    max_count = 0\n    max_item = list[0]\n    for k,v in dict.items():\n        if v > max_count:\n            max_count = v\n            max_item = k\n    return max_item\n\nlist = ['a', 'a', 'b', 'd', 'e', 'a']\nresult = most_common(list)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00047686564359347065,
      "p_css": 0.15475264518393544,
      "p_html": 0.011289465945366207,
      "p_java": 7.414258574902284e-05,
      "p_javascript": 0.011978162867349226,
      "p_matlab": 0.0710541030930975,
      "p_python": 0.7444002293437882,
      "p_sql": 0.005581141263417756,
      "p_typescript": 0.0003932440737030931
    },
    {
      "text": "def bmi_calculation(height, weight):  \n    bmi = weight / (height * height)  \n    return bmi",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.012171854966528076,
      "p_css": 0.09475568653370141,
      "p_html": 0.026264004096436807,
      "p_java": 0.0031412258908503038,
      "p_javascript": 0.008070889376758804,
      "p_matlab": 0.004997757648795444,
      "p_python": 0.8261147470065219,
      "p_sql": 0.012445039697470617,
      "p_typescript": 0.012038794782936684
    },
    {
      "text": "def search_element(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i \n\n    return -1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.212021091856513e-09,
      "p_css": 6.344408882901645e-09,
      "p_html": 1.067514893749885e-08,
      "p_java": 2.1781124854065926e-09,
      "p_javascript": 5.318832114774081e-10,
      "p_matlab": 0.9947294727026803,
      "p_python": 0.0052704933370735976,
      "p_sql": 1.366878885870933e-09,
      "p_typescript": 5.651792611462297e-09
    },
    {
      "text": "def calculate_avg_max_min(list_of_int):\n    avg = sum(list_of_int) / len(list_of_int)\n    maximum = max(list_of_int)\n    minimum = min(list_of_int)\n    return avg, maximum, minimum\n\nlist_of_int = [1, 7, 4, 6]\navg, max_int, min_int = calculate_avg_max_min(list_of_int)\nprint(\"Average =\", avg)\nprint(\"Maximum =\", max_int)\nprint(\"Minimum =\", min_int)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00047301429321967105,
      "p_css": 0.004712918645872673,
      "p_html": 0.00201652941953902,
      "p_java": 0.00019603688795846968,
      "p_javascript": 0.0007727882222010784,
      "p_matlab": 2.76951825636484e-05,
      "p_python": 0.9894374599881167,
      "p_sql": 0.0018055890792210481,
      "p_typescript": 0.0005579682813076913
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nitems = [\"iPhone 11 Pro\", \"Playstation 4 Pro\", \"Samsung Galaxy S20\"]\n\nfor item in items:\n    r = requests.get(\"https://www.amazon.com/s?k=\" + item)\n    soup = BeautifulSoup(r.content, 'html.parser')\n    product_prices = [price.get_text().replace(\"$\", \"\") for price in soup.find_all(\"span\", class_=\"a-price-whole\")]\n    print(f\"The current price for {item} is {product_prices[0]}\")",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.674345570441343e-07,
      "p_css": 0.931547993113586,
      "p_html": 0.06466930771137311,
      "p_java": 0.00016673199260676516,
      "p_javascript": 0.0008359865106111212,
      "p_matlab": 5.083646018103251e-05,
      "p_python": 0.0025697361176907282,
      "p_sql": 0.00015353154647729461,
      "p_typescript": 5.609112916722733e-06
    },
    {
      "text": "def merge_lists(list1, list2):\n  merged_list = list1 + list2\n  return merged_list\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00048491949337856977,
      "p_css": 0.004143331530725897,
      "p_html": 0.0017769086602122694,
      "p_java": 0.00018707387499045344,
      "p_javascript": 0.00045820097356985844,
      "p_matlab": 0.0002180040238233314,
      "p_python": 0.9912473095789358,
      "p_sql": 0.00035316190128662026,
      "p_typescript": 0.0011310899630773022
    },
    {
      "text": "import json\n\nraw_data = [\n {\n  \"customer_name\": \"John Doe\",\n  \"total_amount_spent\": 2000\n },\n {\n  \"customer_name\": \"Jane Doe\",\n  \"total_amount_spent\": 800\n },\n {\n  \"customer_name\": \"Joe Smith\",\n  \"total_amount_spent\": 200\n }\n]\n\n# calculate total amount spent\ntotal_amount_spent = 0\nfor customer in raw_data:\n total_amount_spent += customer['total_amount_spent']\n\n# generate summary report\nsummary_report = {\n 'total_amount_spent': total_amount_spent,\n 'customers': []\n}\nfor customer in raw_data:\n summary_report['customers'].append({\n  'customer_name': customer['customer_name'],\n  'total_amount_spent': customer['total_amount_spent']\n })\n\n# save summary report to a file\nwith open('summary_report.json', 'w') as outfile:\n json.dump(summary_report, outfile)",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.5480805266013634,
      "p_css": 0.422254264210087,
      "p_html": 0.0017725838209410043,
      "p_java": 6.036775488715951e-05,
      "p_javascript": 0.0008748233767480399,
      "p_matlab": 0.011277996268854439,
      "p_python": 0.002470414430867707,
      "p_sql": 0.000513186717886096,
      "p_typescript": 0.012695836818365195
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https://example.com/')\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nfor h1 in soup.find_all('h1'):\n print(h1.text)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 6.122808576722514e-14,
      "p_css": 5.081124684081744e-05,
      "p_html": 0.9999448141494278,
      "p_java": 4.073636477243207e-06,
      "p_javascript": 7.276028901060229e-09,
      "p_matlab": 2.7697670444599295e-10,
      "p_python": 1.5941162017445437e-08,
      "p_sql": 2.7557820898066986e-07,
      "p_typescript": 1.8948163565010155e-09
    },
    {
      "text": "def sort_items(items):\n  items.sort()\n  return items\n\nprint(sort_items(items))\n\n# Output\n['Apple', 'Avocado', 'Banana', 'Cherry']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001447792392680013,
      "p_css": 0.2624008701825854,
      "p_html": 0.0022012678581229753,
      "p_java": 7.727786295851277e-05,
      "p_javascript": 0.008015513480017276,
      "p_matlab": 1.9896293970401977e-05,
      "p_python": 0.7252650339850842,
      "p_sql": 0.0005639236817333518,
      "p_typescript": 8.424262847731097e-06
    },
    {
      "text": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nprint(fibonacci(5)) # 5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.2275645446491183e-07,
      "p_css": 3.145778564505491e-07,
      "p_html": 1.2416988701137009e-06,
      "p_java": 7.583447458110354e-09,
      "p_javascript": 2.202144762536432e-08,
      "p_matlab": 9.961657689670726e-06,
      "p_python": 0.9999870853192451,
      "p_sql": 9.269990293555652e-07,
      "p_typescript": 1.738595966114118e-08
    },
    {
      "text": "def swap(items):\n    temp = items[0]\n    items[0] = items[-1]\n    items[-1] = temp\n    return items",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0020597304337751136,
      "p_css": 0.4486034395259334,
      "p_html": 0.01393836340911009,
      "p_java": 0.0014597223164584724,
      "p_javascript": 0.32702105013856203,
      "p_matlab": 0.07235865224444418,
      "p_python": 0.13003493760133322,
      "p_sql": 0.004308256816925763,
      "p_typescript": 0.00021584751345759534
    },
    {
      "text": "class Student:\n def __init__(self, name, grades):\n  self.name = name\n  self.grades = grades\n\n def calculate_grade(self):\n  total = 0\n  for grade in self.grades:\n   total += grade\n\n  return total / len(self.grades)\n\nstudent1 = Student(\"John\", [80,90,85,95])\nprint(student1.calculate_grade())\n# Output: 88.75",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002910804916778887,
      "p_css": 0.10618637173021847,
      "p_html": 0.0867078219321198,
      "p_java": 0.013272682934351188,
      "p_javascript": 2.210001658373773e-06,
      "p_matlab": 0.00011368657581315857,
      "p_python": 0.7777435789158311,
      "p_sql": 0.011986868729856937,
      "p_typescript": 0.0010759742633718494
    },
    {
      "text": "def merge_arrays(array1, array2):\n    merged_array = array1 + array2\n    return merged_array\n\narray1 = [1, 2, 3]\narray2 = [4, 5, 6]\nmerged_array = merge_arrays(array1, array2)\nprint(merged_array)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.014202429994457044,
      "p_css": 0.03434239249306387,
      "p_html": 0.02875873908909785,
      "p_java": 0.0033924942229153847,
      "p_javascript": 0.009804097243807066,
      "p_matlab": 0.00985721188023616,
      "p_python": 0.872264881071232,
      "p_sql": 0.004600443908932494,
      "p_typescript": 0.022777310096257983
    },
    {
      "text": "SELECT a.id, a.name, b.age\nFROM TableA a LEFT JOIN TableB b\nON a.id = b.id;",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0017125854404369482,
      "p_css": 0.1535620032872911,
      "p_html": 0.13459404422452503,
      "p_java": 0.0038422201961896474,
      "p_javascript": 1.8366282871914308e-05,
      "p_matlab": 0.0001396887902585692,
      "p_python": 0.005799758059467087,
      "p_sql": 0.6995264750234627,
      "p_typescript": 0.0008048586954970263
    },
    {
      "text": "import turtle\n\nt = turtle.Turtle();\nt.speed(2);\n\nt.right(72);\nt.fd(100);\nt.left(144);\nt.fd(100);\nt.left(144);\nt.fd(100);\nt.left(144);\nt.fd(100);\nt.left(144);\nt.fd(100);\n\nt.done();",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.09494398190143728,
      "p_css": 0.3645537934101464,
      "p_html": 0.07497176877452487,
      "p_java": 0.009583078311893659,
      "p_javascript": 0.11850029322677105,
      "p_matlab": 0.08662005895237862,
      "p_python": 0.17453296025746795,
      "p_sql": 0.028024352749982377,
      "p_typescript": 0.04826971241539787
    },
    {
      "text": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add a hidden layer\nmodel.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu'))\n\n# Add an output layer\nmodel.add(Dense(3, kernel_initializer='uniform', activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc'])\n\n# Fit the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8650727763200063,
      "p_css": 0.0002566481891520416,
      "p_html": 0.00909727996305851,
      "p_java": 0.00024267762255012832,
      "p_javascript": 7.887514542295074e-06,
      "p_matlab": 9.741001219686651e-08,
      "p_python": 0.12482487416004613,
      "p_sql": 5.5414889864544524e-08,
      "p_typescript": 0.0004977034057422941
    },
    {
      "text": "def check_divisible_3and5(num):\n    if (num % 3 == 0 and num % 5 == 0):\n        return True\n    else:\n        return False\n\n# test given number\nnum = 10\nif check_divisible_3and5(num):\n    print(\"%d is divisible by 3 and 5\" %num)\nelse:\n    print(\"%d is not divisible by 3 and 5\" %num)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1311044704637688e-08,
      "p_css": 1.2938166910547814e-10,
      "p_html": 4.325260553070233e-08,
      "p_java": 2.9400149402904493e-09,
      "p_javascript": 4.0877064157101097e-08,
      "p_matlab": 0.9999736237484778,
      "p_python": 2.5443449504567198e-05,
      "p_sql": 4.191619203882e-09,
      "p_typescript": 8.301002873587801e-07
    },
    {
      "text": "def calculate_median(data):\n    data.sort()\n    if len(data) % 2 == 0:\n        first_num = data[int(len(data) / 2) - 1]\n        second_num = data[int(len(data) / 2)]\n        median = (first_num + second_num) / 2\n    else:\n        median = data[int((len(data) - 1) / 2)]\n    return median\n\nresult = calculate_median(data)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00020383812710687342,
      "p_css": 0.06739739239574255,
      "p_html": 0.014758709014988942,
      "p_java": 0.09343936864737558,
      "p_javascript": 0.00014527776912752762,
      "p_matlab": 1.2161246958921065e-07,
      "p_python": 0.8158141350032507,
      "p_sql": 0.0026815677774402026,
      "p_typescript": 0.005559589652497944
    },
    {
      "text": "The issue with the code snippet is that the two lists are not being concatenated, but instead being added together, resulting in a list containing the sums of the corresponding elements in the two lists. The correct code snippet should be as following:\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = list1 + list2",
      "y_true": "typescript",
      "pred_label": "typescript",
      "p_bash": 3.9679540956677095e-07,
      "p_css": 1.9017238422029173e-07,
      "p_html": 5.861328994166203e-07,
      "p_java": 1.814838301510806e-05,
      "p_javascript": 0.00011757954136772869,
      "p_matlab": 1.4969884852941713e-09,
      "p_python": 3.2612422082222636e-06,
      "p_sql": 1.4046419212244215e-07,
      "p_typescript": 0.9998596957715352
    },
    {
      "text": "\"\"\"\nGenerate a class with objects and methods in Python to store customer data\n\"\"\"\n\nclass Customer():\n    '''\n    This class stores customer information\n    '''\n    def __init__(self, name, address, phone):\n        self.name = name\n        self.address = address\n        self.phone = phone\n \n    def get_name(self):\n        '''\n        This method returns customer name\n        '''\n        return self.name\n \n    def get_address(self):\n        '''\n        This method returns customer address\n        '''\n        return self.address\n \n    def get_phone(self):\n        '''\n        This method returns customer phone number\n        '''\n        return self.phone\n  \n    def set_name(self, name):\n        '''\n        This method sets customer name\n        '''\n        self.name = name\n \n    def set_address(self, address):\n        '''\n        This method sets customer address\n        '''\n        self.address = address\n \n    def set_phone(self, phone):\n        '''\n        This method sets customer phone number\n        '''\n        self.phone = phone",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00042506159841450823,
      "p_css": 0.0009137820068755031,
      "p_html": 0.0015627841582897101,
      "p_java": 0.9136379607905241,
      "p_javascript": 1.0878995618277127e-07,
      "p_matlab": 3.9185260477728024e-07,
      "p_python": 0.07948795154652966,
      "p_sql": 0.0037368258068186336,
      "p_typescript": 0.00023513344998676503
    },
    {
      "text": "def most_frequent_elements(lst):\n count = {}\n for item in lst:\n if item in count:\n count[item] += 1\n else:\n count[item] = 1\n max_count = 0\n max_element = None\n for item in count:\n if count[item] > max_count:\n max_count = count[item]\n max_element = item\n\nreturn max_element\n\nprint(most_frequent_elements([3, 4, 2, 5, 4, 3, 2, 5, 4]))\n# Output: 4",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00020568828513822874,
      "p_css": 0.007148218860113856,
      "p_html": 0.006390545950199233,
      "p_java": 5.172154359543088e-06,
      "p_javascript": 0.0034887877795280833,
      "p_matlab": 0.00024524531229686876,
      "p_python": 0.9824584550601366,
      "p_sql": 4.24870991622583e-05,
      "p_typescript": 1.5399499065149462e-05
    },
    {
      "text": "# Find all numbers divisible by 7 and multiple of 5 between 0 and 50\n\n# Create an empty list\nresult = []\n\n# Loop through the range\nfor i in range(0, 51):\n    # Check if number is divisible by 7 and multiple of 5\n    if (i % 7 == 0) and (i % 5 == 0):\n        # Add the number to the list\n        result.append(i)\n\n# Print the list \nprint(result)  # Output: [0, 35, 70]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.564516577891375e-05,
      "p_css": 0.002707035583609849,
      "p_html": 0.0003222337451751539,
      "p_java": 9.622516702862995e-05,
      "p_javascript": 0.0162955427468284,
      "p_matlab": 0.0016168762284731234,
      "p_python": 0.7508555845961277,
      "p_sql": 0.006532004299619431,
      "p_typescript": 0.22147885246735893
    },
    {
      "text": "import string\nimport random\n\ndef generatePassword():\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for i in range(8))\n  return password\n \nprint(generatePassword())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.5180746954206852e-12,
      "p_css": 2.3372041425701626e-08,
      "p_html": 3.931660453852383e-08,
      "p_java": 0.004127750321685023,
      "p_javascript": 1.5323297864231905e-14,
      "p_matlab": 2.576276718023251e-09,
      "p_python": 3.239919231376511e-05,
      "p_sql": 0.9958397829597742,
      "p_typescript": 2.259771116188594e-09
    },
    {
      "text": "import tweepy\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#Twitter credentials\nconsumer_key = 'your_key'\nconsumer_secret = 'your_secret'\naccess_token = 'your_token'\naccess_token_secret = 'your_secret'\n\n#Create OAuth authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n#Create API object\napi = tweepy.API(auth)\n\n#initialize sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#Search query\nsearch_query = '#sad'\n\n#Search results\nsearch_results = api.search(search_query)\n\n#Loop through search results\nfor tweet in search_results:\n    #Analyze sentiment\n    sentiment = analyzer.polarity_scores(tweet.text)\n    #Print sentiment\n    print(f\"{tweet.text} - {sentiment}\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.826117540650594e-05,
      "p_css": 0.07183350854626536,
      "p_html": 0.001268903627846422,
      "p_java": 0.008066664813733242,
      "p_javascript": 0.0015549379482020847,
      "p_matlab": 0.0014205885865065861,
      "p_python": 0.83636740127589,
      "p_sql": 0.001764001474716356,
      "p_typescript": 0.07766573255143328
    },
    {
      "text": "def selection_sort(arr): \n    # Iterate through all array elements \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with  \n        # the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n\n# Sample list \narr = [23, 12, 45, 1, 30, 19, 7] \n  \nselection_sort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.066155052017792e-08,
      "p_css": 1.0035985700782806e-07,
      "p_html": 5.334075498390544e-08,
      "p_java": 4.838387087602855e-09,
      "p_javascript": 2.4306559625288638e-08,
      "p_matlab": 0.9985682784797005,
      "p_python": 0.0014313521175036937,
      "p_sql": 2.0335058961370035e-09,
      "p_typescript": 1.0386218051690028e-07
    },
    {
      "text": "# Solution\n# First, let's import necessary libraries\nimport pandas as pd\nimport openpyxl as op\n\n# Then, let's define a dictionary with user inputs\nuser_inputs = {\n 'name': 'John Smith',\n 'age': 28\n 'gender': 'Male'\n}\n\n# Next, we need to create a Pandas DataFrame with the data\ndf = pd.DataFrame([user_inputs])\n\n# Finally, we can write the data to an Excel spreadsheet\nwriter = pd.ExcelWriter('user_details.xlsx', engine='openpyxl')\ndf.to_excel(writer, sheet_name='Sheet1', index=False)\nwriter.save()",
      "y_true": "css",
      "pred_label": "javascript",
      "p_bash": 3.8441458476801413e-07,
      "p_css": 0.0005162795275397222,
      "p_html": 0.0002681920946154552,
      "p_java": 9.109604354173429e-07,
      "p_javascript": 0.6966849072486982,
      "p_matlab": 1.6212402067804422e-06,
      "p_python": 0.0001921687854777497,
      "p_sql": 9.988758315313207e-07,
      "p_typescript": 0.30233453685261036
    },
    {
      "text": "def get_values(dictionary):\n    return [value for key, value in dictionary.items() if value > 0]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4757455311128774e-10,
      "p_css": 2.3603295320653224e-05,
      "p_html": 1.668296261682227e-09,
      "p_java": 3.941056890098105e-11,
      "p_javascript": 5.091473208163596e-10,
      "p_matlab": 0.999976392957742,
      "p_python": 1.006481797776835e-15,
      "p_sql": 8.656253959669691e-10,
      "p_typescript": 5.168821206791749e-10
    },
    {
      "text": "def calc_circumference(radius):\n  circumference = 2 * 3.14 * radius\n  return circumference\n  \ncircumference = calc_circumference(radius)\nprint(circumference)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0032189679111286965,
      "p_css": 0.009130584843798749,
      "p_html": 0.00769969808137914,
      "p_java": 0.0007914176627468258,
      "p_javascript": 0.0024188660804305355,
      "p_matlab": 0.0015760068629620462,
      "p_python": 0.9685332386212407,
      "p_sql": 0.00191001818940501,
      "p_typescript": 0.004721201746908201
    },
    {
      "text": "from threading import Thread\n\ndef worker():\n    print(\"I am a worker\")\n\nthreads = list()\nfor _ in range(5):\n    th = Thread(target=worker)\n    threads.append(th)\n    th.start()\n\nfor th in threads:\n    th.join()\n\nprint(\"Done\")",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 0.06161979208530174,
      "p_css": 0.014178609179682965,
      "p_html": 0.04288347822814338,
      "p_java": 0.0002965878157603037,
      "p_javascript": 0.0017591179383093026,
      "p_matlab": 0.5922235867356482,
      "p_python": 0.22990893725566922,
      "p_sql": 0.056272442402641586,
      "p_typescript": 0.0008574483588432973
    },
    {
      "text": "def calculate_area_of_triangle(p1, p2, p3):\n    a = ((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) ** 0.5 \n    b = ((p3[0] - p2[0]) ** 2 + (p3[1] - p2[1]) ** 2) ** 0.5\n    c = ((p3[0] - p1[0]) ** 2 + (p3[1] - p1[1]) ** 2) ** 0.5\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nresult = calculate_area_of_triangle((2, 0), (3, 4), (6, 2))\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0022498377476755436,
      "p_css": 0.03730024259140556,
      "p_html": 0.00860836029841128,
      "p_java": 0.0009838253358415046,
      "p_javascript": 0.0032268789445097723,
      "p_matlab": 0.0017385706285199774,
      "p_python": 0.9348844957488623,
      "p_sql": 0.003886109424423124,
      "p_typescript": 0.007121679280350886
    },
    {
      "text": "print(\"Hello World!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999734119020168,
      "p_css": 9.96764694856539e-10,
      "p_html": 8.203989019786867e-09,
      "p_java": 1.3871331484896268e-31,
      "p_javascript": 2.3140070270935628e-05,
      "p_matlab": 1.5029167266270406e-12,
      "p_python": 3.438768591603071e-06,
      "p_sql": 1.5910552505341453e-11,
      "p_typescript": 4.0953400341391626e-11
    },
    {
      "text": "from reportlab.lib.pagesizes import A4\nfrom reportlab.pdfgen import canvas\n\ndef prepare_presentation(content):\n    \"\"\"\n    Develop a Python program to prepare a presentation in PDF format.\n    \n    :param content: presentation slides\n    :return: PDF file of the presentation\n    \"\"\"\n    # create a pdf object\n    pdf_obj = canvas.Canvas('presentation.pdf', pagesize=A4)\n    \n    # add contents to the pdf\n    for slide in content:\n        pdf_obj.drawImage(slide)\n    \n    # save pdf\n    pdf_obj.save()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9892352752414091,
      "p_css": 0.003043906372003923,
      "p_html": 0.002804719023836778,
      "p_java": 9.438564520419612e-06,
      "p_javascript": 0.0013791230358211246,
      "p_matlab": 1.3604962489313463e-05,
      "p_python": 0.0017151126238548534,
      "p_sql": 0.00038890262949995395,
      "p_typescript": 0.001409917546564488
    },
    {
      "text": "# input expression as a string\nexpr = \"2 * (3 + 1)\"\n\n# Evaluate the expression using eval()\nresult = eval(expr)\n\n# print the result\nprint(\"Result:\", result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.7670175185078016e-05,
      "p_css": 0.02563134015613244,
      "p_html": 0.00047148986703938876,
      "p_java": 0.0005877929866637477,
      "p_javascript": 7.692906497118011e-06,
      "p_matlab": 2.9747475056913508e-06,
      "p_python": 0.92423859323295,
      "p_sql": 0.000966805524497591,
      "p_typescript": 0.04805564040352903
    },
    {
      "text": "# Function to convert temperature from Celsius to Fahrenheit\ndef cToF(celsius):\n   return celsius * 9/5 + 32\n\n# Function to convert temperature from Fahrenheit to Celsius\ndef fToC(fahrenheit):\n   return (fahrenheit - 32) * 5/9\n\n# Main code\n# Get input from user\ntemperature = 28\nscale = 'C'\n\n# Convert the temperature to the target scale\nif scale == 'C':\n    output = cToF(temperature)\n    outputScale = 'F'\nelse:\n    output = fToC(temperature)\n    outputScale = 'C'\n    \n# Print the result\nprint(f'{temperature} {scale} is {output} {outputScale}')",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.06545003083416182,
      "p_css": 0.11066522929043338,
      "p_html": 0.006222173968517994,
      "p_java": 8.228571100999763e-05,
      "p_javascript": 0.6524768270650866,
      "p_matlab": 0.00030773596950177113,
      "p_python": 0.14142960920083059,
      "p_sql": 0.004414004443509851,
      "p_typescript": 0.018952103516948066
    },
    {
      "text": "def alphabetical_sort(words):\n    return sorted(words)\n\nlist_of_words = [\"python\", \"javascript\", \"java\", \"ruby\"]\nsorted_list = alphabetical_sort(list_of_words)\nprint(sorted_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0570918664160911,
      "p_css": 0.00047908288236403305,
      "p_html": 0.026152035299997038,
      "p_java": 2.197270433594938e-05,
      "p_javascript": 0.32280988350953643,
      "p_matlab": 0.011304633313845661,
      "p_python": 0.5200115717841589,
      "p_sql": 0.018995746811288617,
      "p_typescript": 0.04313320727838236
    },
    {
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# Copyright (c) 2015 Jérémie DECOCK (http://www.jdhp.org)\n\n\"\"\"\nThis is a simple Python GTK+3 TreeView CellRenderText snippet.\n\nSee: http://python-gtk-3-tutorial.readthedocs.org/en/latest/cellrenderers.html#cellrenderertext\n\"\"\"\n\nfrom gi.repository import Gtk as gtk\nfrom gi.repository import Pango as pango\n\n# Countries, population (as in 2015) and continent.\nDATA_LIST = [(\"China\",         1370130000, \"Asia\"),\n             (\"India\",         1271980000, \"Asia\"),\n             (\"United States\", 321107000,  \"North America\"),\n             (\"Indonesia\",     255461700,  \"Asia\"),\n             (\"Brazil\",        204388000,  \"South America\"),\n             (\"Pakistan\",      189936000,  \"Asia\"),\n             (\"Nigeria\",       183523000,  \"Africa\"),\n             (\"Bangladesh\",    158425000,  \"Asia\"),\n             (\"Russia\",        146267288,  \"Eurasia\"),\n             (\"Japan\",         126880000,  \"Asia\")]\n\ndef main():\n    window = gtk.Window()\n    window.set_default_size(300, 450)\n    window.set_border_width(18)\n\n    # Creating the ListStore model\n    liststore = gtk.ListStore(str, int, str)\n    for item in DATA_LIST:\n        liststore.append(list(item))\n\n    # Creating the treeview and add the columns\n    treeview = gtk.TreeView(liststore)\n    for column_index, column_title in enumerate([\"Country\", \"Population\", \"Continent\"]):\n        renderer = gtk.CellRendererText()\n\n        column = gtk.TreeViewColumn(column_title, renderer, text=column_index)\n        column.set_resizable(True)       # Let the column be resizable\n\n        # Use ellipsize for the \"Population\" and \"Continent\" columns\n        if column_title in (\"Population\", \"Continent\"):\n            renderer.set_property(\"ellipsize\", pango.EllipsizeMode.END)\n            renderer.set_property(\"ellipsize-set\", True)\n\n        if column_title == \"Population\":\n            column.set_expand(True)      # This column will use all the space left\n\n        treeview.append_column(column)\n\n    # Scrolled window\n    scrolled_window = gtk.ScrolledWindow()\n    scrolled_window.set_border_width(0)\n    scrolled_window.set_shadow_type(gtk.ShadowType.IN)                              # should be gtk.ShadowType.IN, gtk.ShadowType.OUT, gtk.ShadowType.ETCHED_IN or gtk.ShadowType.ETCHED_OUT\n    scrolled_window.set_policy(gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS)     # should be gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS or gtk.PolicyType.NEVER\n    scrolled_window.add(treeview)\n\n    window.add(scrolled_window)\n\n    window.connect(\"delete-event\", gtk.main_quit) # ask to quit the application when the close button is clicked\n    window.show_all()                             # display the window\n    gtk.main()                                    # GTK+ main loop\n\nif __name__ == '__main__':\n    main()\n\n",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.02124171216922074,
      "p_css": 0.0018415121739358436,
      "p_html": 0.4352865228872678,
      "p_java": 0.0012351275511288246,
      "p_javascript": 0.020697649527237568,
      "p_matlab": 8.701443513346056e-05,
      "p_python": 0.0005752122973343305,
      "p_sql": 0.00027773433089338514,
      "p_typescript": 0.518757514627848
    },
    {
      "text": "import requests\nimport json\n\n# Get the response from reddit\nurl = \"https://www.reddit.com/r/dataisbeautiful/top/.json\"\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"}\nresponse = requests.get(url, headers=headers, allow_redirects=False)\ndata = json.loads(response.text)\n\n# Get the list of the top 20 posts\npost_list = data['data']['children']\ntop_20_posts = [post['data']['title'] for post in post_list[:20]]\n\nprint(top_20_posts)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 8.160081110274977e-10,
      "p_css": 0.9996501671856848,
      "p_html": 4.1286200717878696e-05,
      "p_java": 0.00012051162104929103,
      "p_javascript": 2.5554080141296737e-06,
      "p_matlab": 1.8206264282310226e-07,
      "p_python": 0.00015188657527608434,
      "p_sql": 1.595462966485409e-05,
      "p_typescript": 1.745550094196362e-05
    },
    {
      "text": "def find_subarrays(arr):\n     subarrays = []\n     for i in range(len(arr)):\n         subarrays.append(arr[i:])\n         for j in range(i+1, len(arr)):\n             subarrays.append(arr[i:j+1])\n     return subarrays",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2124680026977077e-07,
      "p_css": 1.7209067593114018e-07,
      "p_html": 2.4919008044066126e-07,
      "p_java": 2.7636894024904652e-08,
      "p_javascript": 1.2576865697848891e-08,
      "p_matlab": 0.9984591952608245,
      "p_python": 0.0015400146166522832,
      "p_sql": 5.93045189513787e-08,
      "p_typescript": 1.4807668779447925e-07
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup \n\n# Request page\n URL = 'https://example.com/product' \n page = requests.get(URL)\n\n# Parse page \nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the price \nprice = soup.find(\"span\", class_=\"price\").get_text()\nprint(\"Price of the product is: \",price)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 4.937086300524753e-10,
      "p_css": 0.9443604183557771,
      "p_html": 0.017272328640331472,
      "p_java": 0.037938667856279744,
      "p_javascript": 3.131166465803117e-05,
      "p_matlab": 5.067834713132656e-08,
      "p_python": 0.0003128572049961901,
      "p_sql": 5.636068159991428e-05,
      "p_typescript": 2.8004424301525547e-05
    },
    {
      "text": "import itertools\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\nfor s in itertools.combinations_with_replacement(vowels, 2):\n        print(''.join(s))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.001760374694710779,
      "p_css": 0.0031825583308161608,
      "p_html": 0.0045269509684873685,
      "p_java": 6.252784364349047e-05,
      "p_javascript": 0.000635904842763438,
      "p_matlab": 0.023140146364558096,
      "p_python": 0.04408246750226205,
      "p_sql": 0.9214121492631052,
      "p_typescript": 0.001196920189653444
    },
    {
      "text": "import random\n\ndef randomListGenerator():\n    randomList = []\n    for i in range(1, 21):\n        randomNumber = random.randint(1,20)\n        while randomNumber in randomList:\n            randomNumber = random.randint(1,20)\n        else:\n            randomList.append(randomNumber)\n    return randomList\n\nprint(randomListGenerator())",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0009066912290209943,
      "p_css": 0.0015570366320810185,
      "p_html": 0.001790384449767524,
      "p_java": 7.392847299639139e-05,
      "p_javascript": 1.880174665807686e-05,
      "p_matlab": 0.7876606847538299,
      "p_python": 0.20339025018872514,
      "p_sql": 0.003908043903565071,
      "p_typescript": 0.0006941786233558619
    },
    {
      "text": "class Name:\n    def __init__(self, name):\n        self.name = name\n\n    def showName(self):\n        print(self.name)\n\n    def hideName(self):\n        self.name = '*****'\n        print(self.name)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.7872739476972543e-05,
      "p_css": 3.976476211814236e-05,
      "p_html": 0.000874148100863662,
      "p_java": 0.970579548116619,
      "p_javascript": 1.4766242613408747e-11,
      "p_matlab": 2.6549366444018664e-08,
      "p_python": 0.02820148131735239,
      "p_sql": 0.00028571956135138506,
      "p_typescript": 1.4388380857962506e-06
    },
    {
      "text": "#!/usr/bin/env python3\nimport argparse\nimport importlib\nimport os\nimport re\nimport sqlite3\nfrom datetime import datetime\nfrom urllib.parse import urljoin\n\nimport requests\nimport yaml\n\n\ndef load_plugin_class(plugin_class_str):\n    \"\"\"\n    dynamically load a class from a string\n    \"\"\"\n    class_data = plugin_class_str.split(\".\")\n    module_path = \"plugins.\" + \".\".join(class_data[:-1])\n    class_str = class_data[-1]\n\n    mod = importlib.import_module(module_path)\n    return getattr(mod, class_str)\n\n\n# print if verbose output is on\ndef log(msg):\n    if verbose_output:\n        print(msg)\n\n\ndef course_loop():\n    download_count = 0\n    skip_count = 0\n\n    # import config\n    try:\n        with open(os.path.join(os.path.dirname(__file__), 'data', 'config.yaml'), 'r', encoding='utf-8') as config_file:\n            config = yaml.load(config_file)\n    except FileNotFoundError:\n        print(\"Please provide a config file under data/config.yaml.\")\n        return\n\n    # make the initial request to get the token\n    session = requests.Session()\n\n    # Loop through sources\n    for src_cfg in config:\n        # check if there are courses to download from\n        if 'courses' not in src_cfg or (source_part is not None and src_cfg['name'] not in source_part):\n            continue\n\n        log('\\n\\nSource: %s' % src_cfg['name'])\n\n        # load dynamically the source class\n        try:\n            src_class = load_plugin_class(src_cfg['class'])\n            src = src_class()\n        except AttributeError:\n            print('Class %s not found. Check your config file.' % src_cfg['class'])\n            continue\n        except ImportError:\n            print(\n                'Class %s not found. Check your config file' % src_cfg['class']\n                + ' and ensure you have the class qualifier relative to the plugin directory.')\n            continue\n\n        # login\n        if 'login_url' in src_cfg and 'username' in src_cfg and 'password' in src_cfg:\n            src.login(session, src_cfg['login_url'], src_cfg['username'], src_cfg['password'])\n\n        # loop through courses\n        for course in src_cfg['courses']:\n\n            # check if only some courses should be checked\n            if course_part is not None and course['name'] not in course_part:\n                continue\n\n            log('\\nCourse: %s\\n' % course['name'])\n\n            if 'path' in course and course['path'] is not None:\n                course_url = urljoin(src_cfg['base_url'], course['path'])\n            elif 'param' in course and course['param'] is not None:\n                course_url = src.course_url(src_cfg['base_url'], course['param'])\n            else:\n                course_url = src_cfg['base_url']\n\n            # regex pattern for link text and file name\n            text_pattern = re.compile(course['pattern'])\n\n            filename_pattern = None\n            if 'filename_pattern' in course:\n                filename_pattern = re.compile(course['filename_pattern'])\n\n            # get all relevant links from the source site\n            links = src.link_list(session, course_url)\n\n            if links is None:\n                continue\n\n            for link in links:\n                if text_pattern.search(link[0]) is not None:\n                    # request file http header\n                    file_request = session.head(link[1], allow_redirects=True)\n\n                    # get file name\n                    if 'Content-Disposition' in file_request.headers:\n                        file_disposition = file_request.headers['Content-Disposition']\n                        file_name = file_disposition[\n                                    file_disposition.index('filename=') + 10:len(file_disposition) - 1].encode(\n                            'latin-1').decode('utf8')\n                    else:\n                        # last part of the link (usually filename)\n                        file_name = link[1].rsplit('/', 1)[-1]\n\n                    # check extension\n                    file_ext = os.path.splitext(file_name)[1]\n                    if 'ext' in course and course['ext'] is not False:\n                        if file_ext != course['ext'] or file_ext not in course['ext']:\n                            continue\n\n                    # check file name\n                    if filename_pattern is not None and filename_pattern.search(file_name) is None:\n                        continue\n\n                    # get last modified date as timestamp\n                    if 'Last-Modified' in file_request.headers:\n                        file_last_modified = int(datetime.strptime(file_request.headers['Last-Modified'], '%a, %d %b %Y %H:%M:%S %Z').timestamp())\n                    else:\n                        print(\"No timestamp found for file %s\" % file_name)\n                        continue\n\n                    # adjust file name\n                    if 'rename' in course and course['rename'] is not False:\n                        # find a number\n                        num = re.search('\\d{1,3}', link[0])\n                        if num is None:\n                            num = re.search('\\d{1,3}', file_name)\n                        if num is None:\n                            num = file_last_modified\n                        else:\n                            num = num.group(0)\n                        file_name = course['rename'].replace('%', str(num)) + file_ext\n\n                    # remove trailing whitespaces\n                    file_name = file_name.strip()\n\n                    # the complete file path\n                    file_path = os.path.join(course['local_folder'], file_name)\n\n                    # fetch old timestamp from database\n                    file_last_modified_old = c.execute(\n                        'SELECT last_modified FROM file_modifications WHERE source=? AND course=? AND file_name=?',\n                        (src_cfg['name'], course['name'], file_name)).fetchone()\n\n                    # save file and timestamp in the database if it doesn't exists\n                    if not simulate and file_last_modified_old is None:\n                        c.execute(\n                            '''\n                            INSERT INTO file_modifications (source, course, file_name, file_path, last_modified)\n                            VALUES (?,?,?,?,?)\n                            ''',\n                            (src_cfg['name'], course['name'], file_name, file_path, file_last_modified))\n                    # update timestamp if there's a newer version of the file\n                    elif not simulate and file_last_modified > file_last_modified_old[0]:\n                        c.execute(\n                            'UPDATE file_modifications SET last_modified=? WHERE source=? AND course=? AND file_name=?',\n                            (file_last_modified, src_cfg['name'], course['name'], file_name))\n                    # otherwise skip saving\n                    else:\n                        skip_count += 1\n                        # log(file_name + ' (skipped)')\n                        continue\n\n                    log(file_name + ' (new)')\n\n                    if simulate:\n                        conn.rollback()\n                        continue\n\n                    # request whole file\n                    file_request = session.get(link[1])\n\n                    # write file\n                    try:\n                        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n                        with open(file_path, 'wb') as f:\n                            f.write(file_request.content)\n                            download_count += 1\n                    except FileNotFoundError:\n                        print('Can\\'t write file to %s' % file_path)\n                        conn.rollback()\n\n                    # save changes to the database\n                    conn.commit()\n\n    # display count of downloaded files\n    log('\\nDownloaded %i file(s), skipped %i file(s)' % (download_count, skip_count))\n\n\ndef clear_course():\n    if course_to_clear[0] == 'all':\n        c.execute(\"DELETE FROM file_modifications\")\n        log('\\nCleared all courses')\n    else:\n        c.execute(\"DELETE FROM file_modifications WHERE course=?\", course_to_clear)\n        log('\\nCleared course %s' % course_to_clear[0])\n    conn.commit()\n\n\n# command line args\nparser = argparse.ArgumentParser(\n    description='A simple script for downloading slides and exercises for university lectures.')\nparser.add_argument('-v', '--verbose', action='store_true', help='verbose output')\nparser.add_argument('-c', '--course', action='append', help='specify a course which should be checked')\nparser.add_argument('-s', '--source', action='append', help='specify a source which should be checked')\nparser.add_argument('-sim', '--simulate', action='store_true', help='specify if the process should only be simulated')\nparser.add_argument('--clear', action='append',\n                    help='specify a course which files should be deleted from the database (not from file system).'\n                         + 'Use keyword \\'all\\' to clear the whole database')\nargs = parser.parse_args()\n\nverbose_output = args.verbose\nsimulate = args.simulate\ncourse_part = args.course\nsource_part = args.source\ncourse_to_clear = args.clear\n\n# database for timestamps\nconn = sqlite3.connect(os.path.join(os.path.dirname(__file__), 'data', 'file_modifications.db'))\nc = conn.cursor()\n\n# check if table exists otherwise create it\nc.execute(\n    '''\n    CREATE TABLE IF NOT EXISTS file_modifications (\n        id\tINTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n        source TEXT,\n        course\tTEXT,\n        file_name\tTEXT,\n        file_path TEXT,\n        last_modified\tINTEGER\n    );\n    ''')\n\nif simulate:\n    log(\"Simulation on\")\n\nif course_to_clear is not None:\n    clear_course()\nelse:\n    course_loop()\n\n# close cursor\nc.close()\n",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0011078085731941853,
      "p_css": 0.00278787071512709,
      "p_html": 0.0016563905247642893,
      "p_java": 0.00027407208021526405,
      "p_javascript": 0.0005278030791455401,
      "p_matlab": 0.005934801196842512,
      "p_python": 0.0012560919523494107,
      "p_sql": 0.5118211590311823,
      "p_typescript": 0.47463400284717944
    },
    {
      "text": "from Crypto.PublicKey import RSA\n\ndef generate_key_pair():\n key = RSA.generate(2048)\n pub_key = key.publickey().export_key().decode()\n with open('public.pem', 'w') as file:\n  file.write(pub_key)\n \n priv_key = key.export_key().decode()\n with open('private.pem', 'w') as file:\n  file.write(priv_key)\n\ngenerate_key_pair()",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.044019722396530174,
      "p_css": 0.013736674393858709,
      "p_html": 0.001874414438644149,
      "p_java": 0.8260127089123109,
      "p_javascript": 5.6670497192840074e-08,
      "p_matlab": 2.6145232836047542e-05,
      "p_python": 0.03799717897224496,
      "p_sql": 0.0005064774945772246,
      "p_typescript": 0.07582662148850056
    },
    {
      "text": "my_list = [10,20,30,40]\n\ntotal = 0\nfor num in my_list:\n    total += num\n\nprint(\"The sum of all elements in the list is: \" + str(total))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015925229599325416,
      "p_css": 2.3714573772872307e-05,
      "p_html": 0.0017868220038916608,
      "p_java": 0.0002432902427008204,
      "p_javascript": 0.010397972316653285,
      "p_matlab": 0.48189422257029635,
      "p_python": 0.5036123508189566,
      "p_sql": 0.000717691310079696,
      "p_typescript": 0.0011646838676554938
    },
    {
      "text": "def computeFibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return computeFibonacci(n-1)+computeFibonacci(n-2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.232194732799174e-05,
      "p_css": 5.617519117211845e-05,
      "p_html": 2.0676209274911402e-05,
      "p_java": 2.750087005002131e-07,
      "p_javascript": 1.3813488880745555e-06,
      "p_matlab": 4.3253131605144855e-07,
      "p_python": 0.9998766280106909,
      "p_sql": 1.1798724559062511e-05,
      "p_typescript": 3.1102807032644405e-07
    },
    {
      "text": "my_list = [1, 5, 7, 2, 8]\nmy_list.sort()\nprint(my_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010459563263707917,
      "p_css": 0.007183940175539912,
      "p_html": 0.00272764431972809,
      "p_java": 0.00026563356414261406,
      "p_javascript": 0.00048244932857239106,
      "p_matlab": 0.00042671298874529846,
      "p_python": 0.9852300410897339,
      "p_sql": 0.0012246544756684794,
      "p_typescript": 0.0014129677314985761
    },
    {
      "text": "def max_two(list):\n    #sort the list in ascending order\n    list.sort()\n    #return the last two elements\n    return list[-2:]\n\n#example\nnumber_list = [2, 4, 5, 9, 10, 11]\nresult = max_two(number_list)\n\nprint(result)\n# Output: [10, 11]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.880189808084846e-05,
      "p_css": 0.00032905645123824256,
      "p_html": 0.0010658588459878575,
      "p_java": 0.0005266537690634025,
      "p_javascript": 0.0016539597602109838,
      "p_matlab": 5.146665146887524e-05,
      "p_python": 0.9954802471331068,
      "p_sql": 0.0008129115636793297,
      "p_typescript": 2.1043927163608765e-05
    },
    {
      "text": "import calendar\n\n# get the current month \ncurrent_month = calendar.month_name[calendar.datetime.now().month]\nprint('Current Month is %s' %current_month)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.047762607683570345,
      "p_css": 0.20044564707740617,
      "p_html": 0.01617544330662545,
      "p_java": 0.0012788458511731782,
      "p_javascript": 0.019815633415845343,
      "p_matlab": 0.0023193998263651367,
      "p_python": 0.6661173501156566,
      "p_sql": 0.016924692919199402,
      "p_typescript": 0.029160379804158296
    },
    {
      "text": "import requests\n\nurl = 'https://www.example.com/users'\nresponse = requests.get(url)\ndata = response.json()\n\nfor user in data:\n    print(user['name'])",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.4113059676010848e-24,
      "p_css": 1.3555489610596561e-06,
      "p_html": 9.371024918053585e-11,
      "p_java": 0.9999986432934783,
      "p_javascript": 1.050202470976446e-13,
      "p_matlab": 5.078073380740648e-13,
      "p_python": 9.633280712694808e-10,
      "p_sql": 9.915698030756368e-11,
      "p_typescript": 7.524830530187994e-13
    },
    {
      "text": "# Import relevant packages\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndata = pd.read_csv('patients_data.csv')\n\n# Create the feature and target vectors\nX = data[['fever', 'headache', 'sore throat', 'nausea']]\ny = data['disease']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Create and fit the Decision Tree\ntree = DecisionTreeClassifier()\ntree.fit(X_train, y_train)\n\n# Make predictions\npredictions = tree.predict(X_test)\n\n# Evaluate the model\naccuracy = tree.score(X_test, y_test)\nprint('Accuracy: ', accuracy)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9709254736559483,
      "p_css": 0.00925412688315391,
      "p_html": 0.00013466877172147164,
      "p_java": 1.3939447763609076e-08,
      "p_javascript": 8.38580333687481e-07,
      "p_matlab": 1.0092581683510293e-07,
      "p_python": 0.0015505454472555023,
      "p_sql": 3.733660210990311e-11,
      "p_typescript": 0.018134231758986222
    },
    {
      "text": "def frequency(string): \n    freq = {} \n    for i in string: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    return freq\n\nprint(frequency('hello world'))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001919984575801339,
      "p_css": 0.04146092168889035,
      "p_html": 0.027722724410916458,
      "p_java": 3.5700409522931923e-05,
      "p_javascript": 7.854451166968186e-05,
      "p_matlab": 0.012259809822603471,
      "p_python": 0.9105036556175138,
      "p_sql": 0.004777697249145094,
      "p_typescript": 0.0012409617139370476
    },
    {
      "text": "import nltk\nimport numpy as np\nimport random\nimport string # to process standard python strings\n\n# Read in the data\nf = open('student_questions.txt','r',errors = 'ignore')\ndata = f.read()\n\nconversationsPoints = data.lower().split(\"\n\n\")\n\n# Create a dictionary that maps each word to its occurrence\nword2count = {}\nfor conversation in conversationsPoints:\n for word in conversation.split():\n if word not in word2count.keys():\n word2count[word] = 1\n else:\n word2count[word] += 1\n\n# Tokenize the words\nwords = sorted(list(word2count.keys()))\n\n# Create the token_to_int dictionary\ntoken2int = {}\nint2token = {}\n\nfor i, word in enumerate(words):\n token2int[word] = i\n int2token[i] = word\n\n# Create input and output datasets\nX = []\nY = []\n\nfor conversation in conversationsPoints:\n sentence = conversation.lower().split()\n for i in range(1,len(sentence)):\n x = token2int[sentence[i-1]]\n y = token2int[sentence[i]]\n X.append(x)\n Y.append(y)\n\n# One hot encode our input and output data\nX_one_hot = np.zeros((len(X), len(words)), dtype=np.int32)\nY_one_hot = np.zeros((len(Y), len(words)), dtype=np.int32)\n\nfor i, x in enumerate(X):\nX_one_hot[i][x] = 1\n\nfor i, y in enumerate(Y):\nY_one_hot[i][y] = 1\n\n\n# Create and train the chatbot model\nmodel = MyChatbot()\nmodel.fit(X_one_hot, Y_one_hot, epochs=500, batch_size=32)\n\n# Define bot response function\ndef bot_response(s):\n sentence = [word.lower() for word in s.split()]\n sentence = [token2int[word] for word in sentence]\n prediction = model.predict_single(sentence)\n int2word[prediction]\n return int2word[prediction]\n\n# Run the app\nwhile True:\n print('User: ', end='')\n s = input()\n response = bot_response(s)\n print('Chatbot: ' + response)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.3944212281995099,
      "p_css": 0.049276597750219434,
      "p_html": 0.017312570709383433,
      "p_java": 4.146225579917999e-07,
      "p_javascript": 2.8209214742103775e-05,
      "p_matlab": 0.0022724207053785523,
      "p_python": 0.5223372487782246,
      "p_sql": 0.010045435087653374,
      "p_typescript": 0.004305874932330628
    },
    {
      "text": "def count_vowels(string):\n    count = 0\n    vowels = set(\"aeiouAEIOU\")\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.08322777885308e-06,
      "p_css": 0.003649133443836447,
      "p_html": 0.000506289626138261,
      "p_java": 0.15900883569405405,
      "p_javascript": 2.321310800613967e-07,
      "p_matlab": 0.000552075982694433,
      "p_python": 0.8248366911812393,
      "p_sql": 0.011232860288293615,
      "p_typescript": 0.0002117984248851528
    },
    {
      "text": "def list_to_number(list1):\n    result = list1[0]\n    for i in range(1, len(list1)):\n        result -= list1[i]\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.144615372302547e-06,
      "p_css": 5.980649464035767e-05,
      "p_html": 1.672381819868121e-05,
      "p_java": 8.204880029853585e-07,
      "p_javascript": 2.420574735460684e-06,
      "p_matlab": 6.448964880365282e-05,
      "p_python": 0.9997990835492214,
      "p_sql": 4.390581686145089e-05,
      "p_typescript": 9.604994163624696e-06
    },
    {
      "text": "import random\n\n# Initialize the game\nlevel = 1\npoints = 0\n\nwhile True:\n # Randomly generate the level\n level = random.randint(1, 10)\n \n # Print out the level and ask for input\n print('Level {}'.format(level))\n user_input = input()\n \n # Logic for checking the input\n if user_input == 'correct':\n points += 10\n elif user_input == 'wrong':\n break\n\n# Print out the result\nprint('Points:', points)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002216903276388543,
      "p_css": 0.10536957200902163,
      "p_html": 0.006744301351668675,
      "p_java": 0.008721262273038856,
      "p_javascript": 0.0078108869938495395,
      "p_matlab": 3.449653339848696e-05,
      "p_python": 0.8649128769314522,
      "p_sql": 0.0025195023239886313,
      "p_typescript": 0.001670198307193284
    },
    {
      "text": "odd_nums_list = []\n\nfor number in range(1, 26):\n    if number % 2 != 0:\n        odd_nums_list.append(number)\n\nprint(odd_nums_list) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.148778878262585e-06,
      "p_css": 4.780314450494573e-05,
      "p_html": 3.008410754659857e-05,
      "p_java": 1.1851615491581765e-06,
      "p_javascript": 3.342668876924515e-07,
      "p_matlab": 0.9870687763227187,
      "p_python": 0.012828083516658883,
      "p_sql": 8.504372778248984e-06,
      "p_typescript": 9.080328477376575e-06
    },
    {
      "text": "import re\n\n# Clean a string of HTML tags \ndef clean_html_tags(str):\n    clean_str = re.sub(\"<.*?>\", \"\", str)\n    return clean_str\n\nhtml_string = \"<p>This is a <b>test</b> string</p>\"\n\nclean_str = clean_html_tags(html_string)\n\nprint(clean_str) #This is a test string",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.5022631004867403e-09,
      "p_css": 1.4512310356176372e-06,
      "p_html": 0.006518515324667786,
      "p_java": 0.9909034903430386,
      "p_javascript": 9.341364121360097e-10,
      "p_matlab": 3.274555806455889e-09,
      "p_python": 0.002448114704027484,
      "p_sql": 0.00012372651071713961,
      "p_typescript": 4.696175558033508e-06
    },
    {
      "text": "def factorial(x):\n    result = 1\n    for num in range(1,x+1):\n        result *= num\n    return result",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.536676955973043e-08,
      "p_css": 1.295313375893247e-10,
      "p_html": 7.551642569438592e-08,
      "p_java": 1.8430392601808305e-09,
      "p_javascript": 1.2690344661760763e-08,
      "p_matlab": 0.9268774913915381,
      "p_python": 0.07312205302515225,
      "p_sql": 3.1117771878279915e-07,
      "p_typescript": 3.885948030959588e-08
    },
    {
      "text": "top_values = []\nfor key, value in dict.items():\n    if len(top_values)<3:\n        top_values.append(value)\n    else:\n        min_value = min(top_values)\n        if value > min_value:\n            top_values.remove(min_value)\n            top_values.append(value)\n\nprint(top_values)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.178476936393132e-09,
      "p_css": 2.474037963529567e-06,
      "p_html": 5.010177222801515e-09,
      "p_java": 1.0363676681124713e-10,
      "p_javascript": 1.2957743024076228e-09,
      "p_matlab": 0.9999975154960249,
      "p_python": 4.697959311872085e-14,
      "p_sql": 2.167139419483061e-09,
      "p_typescript": 7.107598169646421e-10
    },
    {
      "text": "class Stack:\n def __init__(self):\n  self.stack = []\n\n def push(self, item):\n  self.stack.append(item)\n\n def pop(self):\n  if self.stack:\n   return self.stack.pop()\n  else: \n   return None\n\n def is_empty(self):\n  return len(self.stack) == 0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.035758624133609e-05,
      "p_css": 0.012907726405608524,
      "p_html": 0.025832532706894038,
      "p_java": 4.411889938735203e-06,
      "p_javascript": 5.708706033725121e-05,
      "p_matlab": 9.67079305902723e-06,
      "p_python": 0.928173289241984,
      "p_sql": 0.03287505221786258,
      "p_typescript": 5.9872098074675516e-05
    },
    {
      "text": "class NeuralNetwork:\n    def __init__(self, input_size, num_outputs):\n        self.input_size = input_size\n        self.num_outputs = num_outputs\n\n        self.weights = np.random.rand(input_size, num_outputs)\n\n    def forward(self, x):\n        z = np.dot(x, self.weights)\n        return z",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00012875393673546356,
      "p_css": 0.005570921710586593,
      "p_html": 0.030374008851631808,
      "p_java": 6.1702423955353735e-06,
      "p_javascript": 9.03861943069699e-06,
      "p_matlab": 9.231893349423009e-07,
      "p_python": 0.5226830573662494,
      "p_sql": 0.44112997806354287,
      "p_typescript": 9.714802009263922e-05
    },
    {
      "text": "\"\"\"\nWrite a Python program to optimize the cost of a given set of knapsack items.\n\"\"\"\n\ndef  knapsack(items, capacity): \n    #2D array matrix, (items+1) x (capacity+1)\n    matrix = [[0] * (capacity + 1) for _ in range(len(items) + 1)] \n  \n    # Fill matrix[][] in bottom up manner. \n    for item in range(len(items) + 1): \n        for weight in range(capacity + 1): \n            if item == 0 or weight == 0: \n                matrix[item][weight] = 0\n            elif items[item-1][1] <= weight:\n                matrix[item][weight] = max(matrix[item - 1][weight], \n                                         matrix[item - 1][weight - \n                                         items[item - 1][1]] + \n                                         items[item - 1][2])\n            else: \n                matrix[item][weight] = matrix[item - 1][weight] \n  \n    # Tabulating the matrix \n    print(\"Matrix tabulation: \")\n    for item in matrix:\n        print(item)\n    \n    # Result w.r.t given capacity and items\n    res = matrix[len(items)][capacity] \n    # Create a list to store the optimum solution. \n    ans =[] \n  \n    item = len(items) \n    weight = capacity \n  \n    while item > 0 and weight > 0:\n        if res == matrix[item - 1][weight]: \n            item -= 1\n        else:\n            ans.append(items[item-1][0]) \n            res -= items[item - 1][2] \n            weight -= items[item - 1][1] \n            item -= 1\n  \n    print(\"Optimum solution for the given capacity:{} of knapsack - \".format(capacity)) \n    for x in range(len(ans)): \n        print(ans[x], end=\" \")\n  \n  \n# Driver Code \nitems = [(\"A\", 4, 12), (\"B\", 2, 1), (\"C\", 2, 2), (\"D\", 1, 1), (\"E\", 10, 4)]\ncapacity = 15\nknapsack(items, capacity)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016868957920542851,
      "p_css": 0.020798710382318477,
      "p_html": 0.014576907255157373,
      "p_java": 1.3679868960954627e-05,
      "p_javascript": 0.03641431998813097,
      "p_matlab": 0.0005215651579658063,
      "p_python": 0.9252065933456964,
      "p_sql": 0.0005636938125067065,
      "p_typescript": 0.0002176343972093019
    },
    {
      "text": "import tweepy\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initializing the API\napi = tweepy.API(auth)\n \n#Fetching tweets from the given Twitter handle\ntweets = api.user_timeline(screen_name='<Twitter handle>', count=200, include_rts=False, tweet_mode=\"extended\")\n \n# Storing the tweets in a list\ntweet_list = []\nfor tweet in tweets:\n tweet_list.append(tweet.full_text)\n\n# Saving the tweet list as a file\nwith open('data.txt', 'w') as f:\n for item in tweet_list:\n f.write(\"%s\\n\" % item)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.019894925977293178,
      "p_css": 0.09905966434426487,
      "p_html": 0.026690118378653618,
      "p_java": 6.980274963415916e-05,
      "p_javascript": 0.007781268530986859,
      "p_matlab": 0.03355763473644779,
      "p_python": 0.1902352681513864,
      "p_sql": 0.0029631139893638078,
      "p_typescript": 0.6197482031419692
    },
    {
      "text": "class Person:\n def __init__(self, first_name, last_name, age):\n self.first_name = first_name\n self.last_name = last_name\n self.age = age\n\n def greet(self):\n return f\"Hello, my name is {self.first_name} {self.last_name} and I am {self.age} years old.\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005642531650740982,
      "p_css": 0.0008344250938443416,
      "p_html": 0.07695425757838383,
      "p_java": 1.6079236450774938e-05,
      "p_javascript": 0.04281978898307591,
      "p_matlab": 2.787830972118921e-05,
      "p_python": 0.8523665060757938,
      "p_sql": 0.02468760077892757,
      "p_typescript": 0.0017292107787284204
    },
    {
      "text": "def longestPalSubstr(string):\n    maxLength = 1\n    start = 0\n    length = len(string)\n  \n    low = 0\n    high = 0\n  \n    # One by one consider every character as center point of even and length palindromes \n    for i in range(1, length): \n        # Find the longest even length palindrome with center points as i-1 and i. \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n        # Find the longest odd length palindrome with center point as i \n        low = i - 1\n        high = i + 1\n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n  \n    print(\"Longest palindrome substring is:\", end = \"\") \n    print(string[start:start + maxLength]) \n\nstring = \"forgeeksskeegfor\"\nlongestPalSubstr(string)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.3547058553784449e-06,
      "p_css": 0.0038689828070290386,
      "p_html": 0.0002474531993697454,
      "p_java": 0.5143272014270104,
      "p_javascript": 2.2603916924889277e-06,
      "p_matlab": 0.00010296609171019403,
      "p_python": 0.4581115941008816,
      "p_sql": 0.00799427429833231,
      "p_typescript": 0.015343912978118865
    },
    {
      "text": "# function to determine the number of days in a given month\ndef num_days_in_month(month):\n if month == 2:\n # account for leap year\n year = int(input('Enter the year: '))\n if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):\n return 29\n else:\n return 28\n elif month in (4, 6, 9, 11):\n return 30\n else:\n return 31\n\n# get month number from user\nmonth = int(input('Enter the month (1-12): '))\n\n# print the result\nprint('Number of days in the month:', num_days_in_month(month))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004979316608969097,
      "p_css": 0.0104000647480187,
      "p_html": 0.00217130620388389,
      "p_java": 0.0017708868415234364,
      "p_javascript": 0.013455264299153436,
      "p_matlab": 4.605206550516583e-05,
      "p_python": 0.9627277134428155,
      "p_sql": 0.0005937525469094806,
      "p_typescript": 0.008337028191293434
    },
    {
      "text": "# get user input\ninput_str = input('Enter a sentence: ')\n\n# split into words\nwords = input_str.split(' ')\n\n# create an empty dictionary\ndic = {}\n\n# loop over words\nfor word in words:\n # update dictionary\n if word in dic:\n  dic[word] += 1\n else:\n  dic[word] = 1\n\n# find the most common word\nmost_common_word = ''\nhighest_count = 0\n\nfor word, count in dic.items():\n if count > highest_count:\n  most_common_word = word\n  highest_count = count\n\n# print the result\nprint(f'The most common word is \"{most_common_word}\" with {highest_count} occurences.')",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.014334809388097785,
      "p_css": 0.05595888158993922,
      "p_html": 0.00989423193395965,
      "p_java": 2.0249319186687184e-06,
      "p_javascript": 0.0005790745531074026,
      "p_matlab": 0.0007470599851687319,
      "p_python": 0.8515771154414973,
      "p_sql": 0.06642629128373156,
      "p_typescript": 0.0004805108925796786
    },
    {
      "text": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add Conv2D and Dense layers\nmodel.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(32, kernel_size=3, activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])\n              \n# Train the model on the MNIST dataset\nmodel.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=3)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8364972046592365,
      "p_css": 0.0010006611452163807,
      "p_html": 0.014351414594809367,
      "p_java": 0.002446738732727763,
      "p_javascript": 3.653776808550991e-05,
      "p_matlab": 1.1530542515716642e-06,
      "p_python": 0.1343455629826136,
      "p_sql": 1.5860237225974107e-07,
      "p_typescript": 0.01132056846068719
    },
    {
      "text": "# This file is part of Shuup.\n#\n# Copyright (c) 2012-2017, Shoop Commerce Ltd. All rights reserved.\n#\n# This source code is licensed under the OSL-3.0 license found in the\n# LICENSE file in the root directory of this source tree.\nimport random\nimport string\n\nfrom django.conf import settings\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\nfrom django.db.models import Q\nfrom django.utils.encoding import force_text, python_2_unicode_compatible\nfrom django.utils.timezone import now\nfrom django.utils.translation import ugettext_lazy as _\nfrom enumfields import Enum\nfrom parler.models import TranslatableModel, TranslatedFields\n\nfrom shuup.campaigns.consts import (\n    CAMPAIGNS_CACHE_NAMESPACE, CATALOG_FILTER_CACHE_NAMESPACE,\n    CONTEXT_CONDITION_CACHE_NAMESPACE\n)\nfrom shuup.campaigns.models.basket_conditions import (\n    CategoryProductsBasketCondition, ProductsInBasketCondition\n)\nfrom shuup.campaigns.utils.campaigns import get_product_ids_and_quantities\nfrom shuup.campaigns.utils.matcher import get_matching_for_product\nfrom shuup.core import cache\nfrom shuup.core.fields import InternalIdentifierField\nfrom shuup.core.models import Category, Order, Shop\nfrom shuup.core.utils import context_cache\nfrom shuup.utils.analog import define_log_model\nfrom shuup.utils.properties import MoneyPropped\n\n\nclass CampaignType(Enum):\n    CATALOG = 1\n    BASKET = 2\n\n\nclass CampaignQueryset(models.QuerySet):\n    def available(self, shop=None):\n        query = Q(\n            Q(active=True) &\n            (Q(start_datetime__isnull=True) | Q(start_datetime__lte=now())) &\n            (Q(end_datetime__isnull=True) | Q(end_datetime__gte=now()))\n        )\n        if shop:\n            query &= Q(shop=shop)\n        return self.filter(query)\n\n\nclass Campaign(MoneyPropped, TranslatableModel):\n    admin_url_suffix = None\n\n    shop = models.ForeignKey(Shop, verbose_name=_(\"shop\"), help_text=_(\"The shop where the campaign is active.\"))\n    name = models.CharField(max_length=120, verbose_name=_(\"name\"), help_text=_(\"The name for this campaign.\"))\n\n    # translations in subclass\n    identifier = InternalIdentifierField(unique=True)\n\n    active = models.BooleanField(default=False, verbose_name=_(\"active\"), help_text=_(\n        \"Check this if the campaign is currently active. Please also set a start and end date.\"\n    ))\n    start_datetime = models.DateTimeField(null=True, blank=True, verbose_name=_(\"start date and time\"), help_text=_(\n        \"The date and time the campaign starts. This is only applicable if the campaign is marked as active.\"\n    ))\n    end_datetime = models.DateTimeField(null=True, blank=True, verbose_name=_(\"end date and time\"), help_text=_(\n        \"The date and time the campaign ends. This is only applicable if the campaign is marked as active.\"\n    ))\n    created_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"created by\"))\n    modified_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"modified by\"))\n    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\"created on\"))\n    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\"modified on\"))\n\n    objects = CampaignQueryset.as_manager()\n\n    class Meta:\n        abstract = True\n        verbose_name = _('Campaign')\n        verbose_name_plural = _('Campaigns')\n\n    def save(self, *args, **kwargs):\n        super(Campaign, self).save(*args, **kwargs)\n        cache.bump_version(CAMPAIGNS_CACHE_NAMESPACE)\n        cache.bump_version(CONTEXT_CONDITION_CACHE_NAMESPACE)\n        cache.bump_version(CATALOG_FILTER_CACHE_NAMESPACE)\n\n    def is_available(self):\n        if not self.active:  # move to manager?\n            return False\n        if self.start_datetime and self.end_datetime:\n            if self.start_datetime <= now() <= self.end_datetime:\n                return True\n            return False\n        elif self.start_datetime and not self.end_datetime:\n            if self.start_datetime > now():\n                return False\n        elif not self.start_datetime and self.end_datetime:\n            if self.end_datetime < now():\n                return False\n        return True\n\n    @property\n    def type(self):\n        return CampaignType.BASKET if isinstance(self, BasketCampaign) else CampaignType.CATALOG\n\n\nclass CatalogCampaign(Campaign):\n    _queryset = None\n\n    admin_url_suffix = \"catalog_campaign\"\n    conditions = models.ManyToManyField('ContextCondition', blank=True, related_name='campaign')\n    filters = models.ManyToManyField('CatalogFilter', blank=True, related_name='campaign')\n\n    translations = TranslatedFields(public_name=models.CharField(max_length=120, blank=True, help_text=_(\n        \"The campaign name to show in the store front.\"\n    )))\n\n    def __str__(self):\n        return force_text(_(\"Catalog Campaign: %(name)s\" % dict(name=self.name)))\n\n    def save(self, *args, **kwargs):\n        super(CatalogCampaign, self).save(*args, **kwargs)\n        self.filters.update(active=self.active)\n        for f in self.filters.all():\n            for matching_product in f.get_matching_shop_products():\n                context_cache.bump_cache_for_shop_product(matching_product)\n        self.conditions.update(active=self.active)\n\n    def rules_match(self, context, shop_product, matching_catalog_filters, matching_context_conditions):\n        if not self.is_available():\n            return False\n\n        # If rule has filters, all of them has to match\n        for filter_pk in self.filters.values_list(\"pk\", flat=True):\n            if filter_pk not in matching_catalog_filters:\n                return False\n\n        # All filters match so let's check that also all the conditions match\n        for condition_pk in self.conditions.values_list(\"pk\", flat=True):\n            if condition_pk not in matching_context_conditions:\n                return False\n        return True\n\n    @classmethod\n    def get_for_product(cls, shop_product):\n        matching_filters = get_matching_for_product(shop_product, provide_category=\"campaign_catalog_filter\")\n        matching_conditions = get_matching_for_product(shop_product, provide_category=\"campaign_context_condition\")\n        query_filter = Q(Q(filters__in=matching_filters) | Q(conditions__in=matching_conditions))\n        return cls.objects.available(shop=shop_product.shop).filter(query_filter).distinct()\n\n    @classmethod\n    def get_matching(cls, context, shop_product):\n        prod_ctx_cache_elements = dict(\n            customer=context.customer.pk or 0,\n            shop=context.shop.pk,\n            product_id=shop_product.pk)\n        namespace = CAMPAIGNS_CACHE_NAMESPACE\n        key = \"%s:%s\" % (namespace, hash(frozenset(prod_ctx_cache_elements.items())))\n        cached_matching = cache.get(key, None)\n        if cached_matching is not None:\n            return cached_matching\n\n        from shuup.campaigns.models.matching import get_matching_context_conditions, get_matching_catalog_filters\n        matching_context_conditions = get_matching_context_conditions(context)\n        matching_catalog_filters = get_matching_catalog_filters(shop_product)\n\n        if not (matching_context_conditions or matching_catalog_filters):\n            return []\n\n        # Get all possible campaign id's for matching context_conditions\n        campaigns_based_on_conditions = set(\n            cls.objects.filter(\n                active=True,\n                shop=context.shop,\n                conditions__id__in=matching_context_conditions\n            ).values_list(\"pk\", flat=True)\n        )\n\n        campaigns_based_on_catalog_filters = set()\n        if hasattr(cls, \"filters\"):\n            # Get all possible campaigns for matching catalog_filters\n            campaigns_based_on_catalog_filters = set(\n                cls.objects.filter(\n                    active=True,\n                    shop=context.shop,\n                    filters__id__in=matching_catalog_filters\n                ).values_list(\"pk\", flat=True)\n            )\n\n        all_possible_campaigns_ids = (campaigns_based_on_conditions | campaigns_based_on_catalog_filters)\n        matching = []\n        for campaign in cls.objects.filter(id__in=all_possible_campaigns_ids):\n            if campaign.rules_match(context, shop_product, matching_catalog_filters, matching_context_conditions):\n                matching.append(campaign)\n        cache.set(key, matching, timeout=None)\n        return matching\n\n\nclass BasketCampaign(Campaign):\n    admin_url_suffix = \"basket_campaign\"\n\n    basket_line_text = models.CharField(\n        max_length=120, verbose_name=_(\"basket line text\"), help_text=_(\"This text will be shown in basket.\"))\n\n    conditions = models.ManyToManyField('BasketCondition', blank=True, related_name='campaign')\n    coupon = models.OneToOneField('Coupon', null=True, blank=True, related_name='campaign', verbose_name=_(\"coupon\"))\n\n    translations = TranslatedFields(\n        public_name=models.CharField(max_length=120, verbose_name=_(\"public name\"), help_text=_(\n            \"The campaign name to show in the store front.\"\n        ))\n    )\n\n    def __str__(self):\n        return force_text(_(\"Basket Campaign: %(name)s\" % dict(name=self.name)))\n\n    def save(self, *args, **kwargs):\n        if self.coupon:\n            code_count_for_shop = BasketCampaign.objects.filter(\n                active=True, shop_id=self.shop.id, coupon__code=self.coupon.code)\n            if not self.id and code_count_for_shop.exists():\n                raise ValidationError(_(\"Can not have multiple active campaigns with same code.\"))\n\n            if self.id and code_count_for_shop.exclude(coupon_id=self.coupon.id).exists():\n                raise ValidationError(_(\"Can not have multiple active campaigns with same code.\"))\n\n        super(BasketCampaign, self).save(*args, **kwargs)\n        self.conditions.update(active=self.active)\n\n    @classmethod\n    def get_for_product(cls, shop_product):\n        matching_conditions = get_matching_for_product(\n            shop_product, provide_category=\"campaign_basket_condition\")\n        matching_effects = get_matching_for_product(\n            shop_product, provide_category=\"campaign_basket_discount_effect_form\")\n        matching_line_effects = get_matching_for_product(\n            shop_product, provide_category=\"campaign_basket_line_effect_form\")\n        effects_q = Q(Q(line_effects__id__in=matching_line_effects) | Q(discount_effects__id__in=matching_effects))\n        matching_q = Q(Q(conditions__in=matching_conditions) | effects_q)\n        return cls.objects.available(shop=shop_product.shop).filter(matching_q).distinct()\n\n    @classmethod\n    def get_matching(cls, basket, lines):\n        matching = []\n        exclude_condition_ids = set()\n        product_id_to_qty = get_product_ids_and_quantities(basket)\n\n        # Get ProductsInBasketCondition's that can't match with the basket\n        products_in_basket_conditions_to_check = set(\n            ProductsInBasketCondition.objects.filter(\n                products__id__in=product_id_to_qty.keys()\n            ).values_list(\"id\", flat=True)\n        )\n        exclude_condition_ids |= set(\n            ProductsInBasketCondition.objects.exclude(\n                id__in=products_in_basket_conditions_to_check\n            ).values_list(\"id\", flat=True)\n        )\n\n        # Get CategoryProductsBasketCondition's that can't match with the basket\n        categories = set(Category.objects.filter(\n            shop_products__product_id__in=product_id_to_qty.keys()).values_list(\"id\", flat=True))\n        category_products_in_basket_to_check = set(\n            CategoryProductsBasketCondition.objects.filter(categories__in=categories).values_list(\"id\", flat=True)\n        )\n        exclude_condition_ids |= set(\n            CategoryProductsBasketCondition.objects.exclude(\n                id__in=category_products_in_basket_to_check\n            ).values_list(\"id\", flat=True)\n        )\n\n        queryset = cls.objects.filter(active=True, shop=basket.shop)\n        if exclude_condition_ids:\n            queryset = queryset.exclude(conditions__id__in=exclude_condition_ids)\n        for campaign in queryset.prefetch_related(\"conditions\"):\n            if campaign.rules_match(basket, lines):\n                matching.append(campaign)\n        return matching\n\n    def rules_match(self, basket, lines):\n        \"\"\"\n        Check if basket rules match.\n\n        They will not match if\n        1) The campaign is not active\n        2) The campaign has attached coupon\n           which doesn't match or is not active\n        3) Any of the attached rules doesn't match\n        \"\"\"\n        if not self.is_available():\n            return False\n\n        if self.coupon and not (self.coupon.active and self.coupon.code.upper() in [c.upper() for c in basket.codes]):\n            return False\n\n        for rule in self.conditions.all():\n            if not rule.matches(basket, lines):\n                return False\n        return True\n\n\nclass CouponUsage(models.Model):\n    coupon = models.ForeignKey('Coupon', related_name='usages')\n    order = models.ForeignKey(Order, related_name='coupon_usages')\n\n    created_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"created by\"))\n    modified_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"modified by\"))\n\n    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\"created on\"))\n    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\"modified on\"))\n\n    @classmethod\n    def add_usage(cls, order, coupon):\n        return cls.objects.create(order=order, coupon=coupon)\n\n\n@python_2_unicode_compatible\nclass Coupon(models.Model):\n    admin_url_suffix = \"coupon\"\n    name_field = \"code\"  # TODO: Document me\n    search_fields = [\"code\"]    # used by Select2Multiple to know which fields use to search by\n\n    code = models.CharField(max_length=12)\n\n    usage_limit_customer = models.PositiveIntegerField(\n        blank=True, null=True,\n        verbose_name=_(\"usage limit per customer\"), help_text=_(\"Limit the amount of usages per a single customer.\"))\n    usage_limit = models.PositiveIntegerField(\n        blank=True, null=True,\n        verbose_name=_(\"usage limit\"),\n        help_text=_(\"Set the absolute limit of usages for this coupon. \"\n                    \"If the limit is zero (0) coupon cannot be used.\"))\n\n    active = models.BooleanField(default=False, verbose_name=_(\"is active\"))\n\n    created_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"created by\"))\n    modified_by = models.ForeignKey(\n        settings.AUTH_USER_MODEL, blank=True, null=True,\n        related_name=\"+\", on_delete=models.SET_NULL,\n        verbose_name=_(\"modified by\"))\n\n    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\"created on\"))\n    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\"modified on\"))\n\n    def save(self, **kwargs):\n        campaign = BasketCampaign.objects.filter(active=True, coupon_id=self.id).first()\n        if campaign and BasketCampaign.objects.filter(\n                active=True, shop_id=campaign.shop.id, coupon__code=self.code).exclude(id=campaign.id).exists():\n            raise ValidationError(_(\"Can not have multiple active campaigns with same code.\"))\n\n        return super(Coupon, self).save(**kwargs)\n\n    @classmethod\n    def generate_code(cls, length=6):\n        if length > 12:\n            length = 12\n        return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(length))\n\n    @property\n    def exhausted(self):\n        val = bool(self.usage_limit and self.usages.count() >= self.usage_limit)\n        return val\n\n    @property\n    def attached(self):\n        return BasketCampaign.objects.filter(coupon=self).exists()\n\n    def attach_to_campaign(self, campaign):\n        if not self.attached:\n            self.campaign = campaign\n\n    @classmethod\n    def is_usable(cls, code, customer):\n        try:\n            code = cls.objects.get(code__iexact=code, active=True)\n            return code.can_use_code(customer)\n        except cls.DoesNotExist:\n            return False\n\n    def can_use_code(self, customer):\n        \"\"\"\n        Check if customer can use the code\n\n        :param customer:\n        :type customer: `Contact` or None\n        :rtype: True|False\n        \"\"\"\n        if not self.active:\n            return False\n\n        if not self.attached:\n            return False\n\n        if self.usage_limit_customer:\n            if not customer or customer.is_anonymous:\n                return False\n            if (self.usages.filter(order__customer=customer, coupon=self).count() >= self.usage_limit_customer):\n                return False\n\n        return not self.exhausted\n\n    def use(self, order):\n        return CouponUsage.add_usage(order=order, coupon=self)\n\n    def increase_customer_usage_limit_by(self, amount):\n        if self.usage_limit_customer:\n            new_limit = self.usage_limit_customer + amount\n        else:\n            new_limit = self.usages.count() + amount\n        self.usage_limit_customer = new_limit\n\n    def increase_usage_limit_by(self, amount):\n        self.usage_limit = self.usage_limit + amount if self.usage_limit else (self.usages.count() + amount)\n\n    def has_been_used(self, usage_count=1):\n        \"\"\" See if code is used the times given \"\"\"\n        return CouponUsage.objects.filter(coupon=self).count() >= usage_count\n\n    def __str__(self):\n        return self.code\n\n\nCatalogCampaignLogEntry = define_log_model(CatalogCampaign)\nBasketCampaignLogEntry = define_log_model(BasketCampaign)\nCouponLogEntry = define_log_model(Coupon)\nCouponUsageLogEntry = define_log_model(CouponUsage)\n",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.4487136810377612,
      "p_css": 0.2378325237067638,
      "p_html": 0.0015912319120694046,
      "p_java": 6.346175417734921e-05,
      "p_javascript": 0.0006504731423379688,
      "p_matlab": 1.618115158102697e-05,
      "p_python": 0.04627735535916307,
      "p_sql": 0.018585230073047413,
      "p_typescript": 0.24626986186309882
    },
    {
      "text": "def BinaryToDecimal(binary): \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal \n  \n# Driver code \nbinary = 101010\nprint(BinaryToDecimal(binary))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003682367144143737,
      "p_css": 0.011399983337393005,
      "p_html": 0.011588909638078335,
      "p_java": 0.002552733318886864,
      "p_javascript": 0.0028796465329279665,
      "p_matlab": 0.0018622219751351827,
      "p_python": 0.9449827256590926,
      "p_sql": 0.001522879177209559,
      "p_typescript": 0.01952853321713254
    },
    {
      "text": "def add_matrix(A, B):\n    \"\"\"Add two matrices of the same size.\"\"\"\n    n = len(A)\n    m = len(A[0])\n    result = [[0 for _ in range(m)] for _ in range(n)] \n    for i in range(n):\n        for j in range(m):\n            result[i][j] = A[i][j] + B[i][j]\n            \n    return result\n\n# Output\nprint(add_matrix(A,B))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9868527972600524e-07,
      "p_css": 1.6883615226099372e-08,
      "p_html": 2.440834910304915e-06,
      "p_java": 3.2491513938392655e-05,
      "p_javascript": 1.2874709859290726e-08,
      "p_matlab": 2.0782686798792952e-05,
      "p_python": 0.9999394477026126,
      "p_sql": 2.9437260383700086e-06,
      "p_typescript": 1.6650920966545755e-06
    },
    {
      "text": "# Import libraries\nfrom sklearn import tree\nimport pandas as pd\n\n# Read data into a pandas DataFrame\ndata = pd.read_csv(\"movie_reviews.csv\")\ntext = data['text']\ny = data['sentiment']\n\n# Split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\ntext_train, text_test, y_train, y_test = train_test_split(text, y, random_state=1)\n\n# Create a decision tree classifier\nclf = tree.DecisionTreeClassifier()\nclf.fit(text_train, y_train)\n\n# Predict sentiment for the test set\ny_pred = clf.predict(text_test)\n\n# Measure accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_pred, y_test)\nprint(\"Accuracy:\", accuracy)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.44366293079912394,
      "p_css": 0.4312016556357391,
      "p_html": 0.0028398144895038033,
      "p_java": 2.569206804840616e-06,
      "p_javascript": 1.8099275918248072e-05,
      "p_matlab": 2.8048406037456153e-05,
      "p_python": 0.107122887566974,
      "p_sql": 2.8095361264173987e-06,
      "p_typescript": 0.01512118508377214
    },
    {
      "text": "def find_max(list): \n    max = list[0] \n    for i in list: \n        if i > max: \n            max = i \n    return max \n  \nlist = [10, 3, 16, 17, 8]\nprint(\"Maximum number in the list:\", find_max(list))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0004254151927581683,
      "p_css": 0.0021168532427633217,
      "p_html": 0.0021431949872078547,
      "p_java": 4.291647955530253e-05,
      "p_javascript": 0.002211707654502697,
      "p_matlab": 0.7453692376604791,
      "p_python": 0.23019326151023134,
      "p_sql": 0.01574712479251738,
      "p_typescript": 0.0017502884799847451
    },
    {
      "text": "def compute_total_cost(price, quantity, shipping, tax):\n    return price * quantity + shipping + tax",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008203997223750904,
      "p_css": 0.13804505934180736,
      "p_html": 0.010732840564263707,
      "p_java": 0.00187348780900977,
      "p_javascript": 0.005249195154037745,
      "p_matlab": 0.003775587093399568,
      "p_python": 0.8162868249176554,
      "p_sql": 0.003080614419576854,
      "p_typescript": 0.012752393476498609
    },
    {
      "text": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n\n    def insert(self, new_node):\n        temp = self.head \n  \n        if temp is None: \n            self.head = new_node \n            return \n  \n        while temp.next is not None: \n            temp = temp.next\n\n        temp.next = new_node\n#\n5. Instruction: Given a list of integers, write a Python program to find the longest increasing sub-sequence from the given list.\n5. Input:\n[2, 3, 4, 5, 6, 1, 7, 8]\n5. Output:\ndef longestIncreasingSubsequence(arr): \n    n = len(arr) \n  \n    lis = [1]*n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n  \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum\n\narr = [2, 3, 4, 5, 6, 1, 7, 8]\nprint(\"Length of Longest Increasing Subsequence is\", longestIncreasingSubsequence(arr))",
      "y_true": "sql",
      "pred_label": "matlab",
      "p_bash": 0.0014081513769646401,
      "p_css": 0.0002615387331623616,
      "p_html": 0.019677264993554818,
      "p_java": 2.832019875657205e-06,
      "p_javascript": 9.39573360671271e-05,
      "p_matlab": 0.9092704751297291,
      "p_python": 0.03436637225802374,
      "p_sql": 0.03481372383783,
      "p_typescript": 0.00010568431479250862
    },
    {
      "text": "def print_odd_numbers(start, end):\n    for i in range(start, end+1):\n        if i % 2 != 0:\n            print(i)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.010714550830906e-05,
      "p_css": 1.2768219150855515e-05,
      "p_html": 3.365240135921107e-05,
      "p_java": 5.333352619970345e-07,
      "p_javascript": 1.003556385533583e-06,
      "p_matlab": 0.016012223807025532,
      "p_python": 0.9838540766823992,
      "p_sql": 5.7748005373302426e-05,
      "p_typescript": 1.7886847536035078e-05
    },
    {
      "text": "import requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.156041622553236e-10,
      "p_css": 0.016391944999159743,
      "p_html": 0.030967437198483178,
      "p_java": 0.6954958522182915,
      "p_javascript": 2.6219955177614383e-05,
      "p_matlab": 5.470504382714328e-06,
      "p_python": 0.25550022061255356,
      "p_sql": 0.0016080355911023009,
      "p_typescript": 4.818505245109445e-06
    },
    {
      "text": "def check_even(numbers):\n  for num in numbers:\n    if num % 2 == 0:\n      return True\n  return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.1366766069585942e-06,
      "p_css": 1.161926575553534e-10,
      "p_html": 3.799653949947187e-05,
      "p_java": 0.00021549382193714953,
      "p_javascript": 7.51147560464589e-06,
      "p_matlab": 0.9465929934187658,
      "p_python": 0.053141597547894194,
      "p_sql": 1.566698971695504e-06,
      "p_typescript": 7.037045274237415e-07
    },
    {
      "text": "def textToList(string):\n words = []\n\n for char in string:\n  if char.isalpha():\n   words[-1] += char\n  else:\n   words.append('')\n \n words = [word.lower() for word in words if word]\n return words\n\nprint(textToList('Hi there, how are you?')) # returns ['hi', 'there', 'how', 'are', 'you']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.276894341309164e-06,
      "p_css": 0.009470394944781264,
      "p_html": 0.002422127746219651,
      "p_java": 0.0016957603459070475,
      "p_javascript": 3.6445896749381606e-07,
      "p_matlab": 0.0036912791803184594,
      "p_python": 0.8267312028796981,
      "p_sql": 0.1558667228165299,
      "p_typescript": 0.00011287073323680916
    },
    {
      "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Creating a dataset\nX = np.random.uniform(-1,1,100)\nY = np.random.uniform(-1,1,100)\n# Class labels\ny = np.zeros(100)\n# Adding some noise\ny[X>0] = 1\ny[X<0] = 0\n\n# Normal dataset\nplt.scatter(X, Y, c=y)\nplt.show()\n\n# Unbalanced dataset\n# Reducing the number of 0s\ny[X<0] = np.random.choice(np.arange(0,2), int(0.50*len(y[X<0])), replace=False)\nplt.scatter(X, Y, c=y)\nplt.show()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.05372066600052915,
      "p_css": 0.011872367418765347,
      "p_html": 0.012956036162476928,
      "p_java": 0.0032759560608915626,
      "p_javascript": 0.0005075910830153415,
      "p_matlab": 8.464491155729801e-06,
      "p_python": 0.8962244076348495,
      "p_sql": 0.007734098912782753,
      "p_typescript": 0.013700412235533642
    },
    {
      "text": "import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Define the model\nmodel = Sequential()\nmodel.add(Dense(8, input_dim=6, activation='relu'))\nmodel.add(Dense(4, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8931939451894478,
      "p_css": 0.0005051133274182238,
      "p_html": 0.020569226837616725,
      "p_java": 0.00019381771625999494,
      "p_javascript": 2.4182189362301298e-05,
      "p_matlab": 1.3602955441395811e-06,
      "p_python": 0.0847497358797893,
      "p_sql": 7.025437092916362e-07,
      "p_typescript": 0.0007619160208521456
    },
    {
      "text": "list_of_strings = ['hello', 'world', 'hello', 'moon', 'sun']\nunique_strings = set(list_of_strings)\n\nfor string in unique_strings:\n    print(string)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.016416860979677435,
      "p_css": 0.024628114097631475,
      "p_html": 0.010999315882382954,
      "p_java": 1.1747110932142926e-06,
      "p_javascript": 0.00015983108414359214,
      "p_matlab": 0.0002591825491500582,
      "p_python": 0.9368496023520465,
      "p_sql": 0.009600808762856164,
      "p_typescript": 0.0010851095810185674
    },
    {
      "text": "import math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00416288932342369,
      "p_css": 0.02487305991454643,
      "p_html": 0.004192740905092581,
      "p_java": 0.0005454632633698504,
      "p_javascript": 0.033827430435862615,
      "p_matlab": 0.00029665560830763544,
      "p_python": 0.9089908142179388,
      "p_sql": 0.006910508372432146,
      "p_typescript": 0.01620043795902635
    },
    {
      "text": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.items.pop()\n    \n    def peek(self):\n        if self.is_empty():\n            return None\n        return self.items[-1]\n    \n    def is_empty(self):\n        return self.items == []",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.2152149182293052e-05,
      "p_css": 0.012247257937537705,
      "p_html": 0.02665643948179002,
      "p_java": 1.3609063297739778e-06,
      "p_javascript": 0.00011522521768580597,
      "p_matlab": 2.2001864117512793e-06,
      "p_python": 0.7398340054940301,
      "p_sql": 0.2211143231718459,
      "p_typescript": 7.035455186644468e-06
    },
    {
      "text": "sentence_words = my_sentence.split(\" \")\nprint(sentence_words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01817103158410323,
      "p_css": 0.049630062120641534,
      "p_html": 0.028375452663936176,
      "p_java": 0.0013210235425077346,
      "p_javascript": 0.00634924490265477,
      "p_matlab": 0.006789243672119994,
      "p_python": 0.8705947727598023,
      "p_sql": 0.009154579445529916,
      "p_typescript": 0.009614589308704345
    },
    {
      "text": "def replace_vowels(string): \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() in vowels:\n            new_string += \"_\"\n        else:\n            new_string += letter\n    return new_string\n\nresult = replace_vowels(\"Hello World\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00034173161711629026,
      "p_css": 0.004384830845993014,
      "p_html": 0.0009543185098055869,
      "p_java": 2.9901859454982247e-06,
      "p_javascript": 1.4820422701607007e-05,
      "p_matlab": 0.00035038862473810975,
      "p_python": 0.9810868293729134,
      "p_sql": 0.012665233270277475,
      "p_typescript": 0.00019885715050900967
    },
    {
      "text": "import time\n\ndef count_words(text):\n    start_time = time.time()\n    words = text.split(' ')\n    result = len(words)\n    end_time = time.time()\n    duration = end_time - start_time\n    return result, duration\n\nif __name__ == '__main__':\n    text = 'This sentence has five words'\n    result, duration = count_words(text)\n    print(f'The result is {result} and it took {duration} seconds!')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.1303764556776958e-05,
      "p_css": 0.004896574831389113,
      "p_html": 0.0012260246556741064,
      "p_java": 1.2086530136089867e-05,
      "p_javascript": 5.070397386537126e-05,
      "p_matlab": 1.1785237084409195e-05,
      "p_python": 0.9551673335879883,
      "p_sql": 0.03714700820628699,
      "p_typescript": 0.0014671792130189628
    },
    {
      "text": "import pandas as pd\nimport requests\n\nurl = 'https://api.openweathermap.org/data/2.5/weather?q=London&units=metric&appid=YOUR_API_KEY'\ndata = requests.get(url).json()\n\nweather_data = {\n 'city': data['name'],\n 'temperature': data['main']['temp'],\n 'humidity': data['main']['humidity'],\n 'description': data['weather'][0]['description']\n}\n\nweather_df = pd.DataFrame(weather_data, index=[0])",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.550692570311912e-07,
      "p_css": 0.9843503053894948,
      "p_html": 0.0014872540696784756,
      "p_java": 0.0075412573734945434,
      "p_javascript": 5.684096294445966e-06,
      "p_matlab": 1.5288018781591225e-05,
      "p_python": 0.005781126089390308,
      "p_sql": 0.00031830417851781825,
      "p_typescript": 0.0005006257150912487
    },
    {
      "text": "from flask import Flask, request\nfrom nltk.stem import WordNetLemmatizer\n\napp = Flask(__name__)\n\n@app.route(\"/lemmas\", methods=['POST'])\ndef lemmas():\n    text = request.form[\"text\"]\n    lemmatizer = WordNetLemmatizer()\n    words = text.split(\" \")\n    lemmas = [lemmatizer.lemmatize(word) for word in words]\n    return \" \".join(lemmas)\n    \napp.run(debug=True)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.015237072900891761,
      "p_css": 0.23405180852010468,
      "p_html": 0.007231560043302709,
      "p_java": 6.437036808884403e-06,
      "p_javascript": 9.186528432312322e-05,
      "p_matlab": 6.898889953894486e-05,
      "p_python": 0.022309390343238072,
      "p_sql": 0.7208201858064439,
      "p_typescript": 0.00018269116534790425
    },
    {
      "text": "def find_pairs_with_sum(values, target):\n    indices_list = []\n    for i in range(len(values)):\n        x = target - values[i]\n        if x in values[i+1:]:\n            indices_list.extend([i, values.index(x)])\n    return indices_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00038478607126009724,
      "p_css": 0.002286288512188753,
      "p_html": 0.0038329673793735582,
      "p_java": 5.0522067552816004e-05,
      "p_javascript": 3.781260456893566e-05,
      "p_matlab": 0.0713808598018163,
      "p_python": 0.9192904594841965,
      "p_sql": 0.002032249854219287,
      "p_typescript": 0.0007040542248238555
    },
    {
      "text": "def power(x, y): \n    if (y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        return (power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n    else: \n        return (x * power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n\n\n# Driver Code \nx = 3; y = 5\nprint(power(x, y))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.6442983337355917e-08,
      "p_css": 1.37751259724944e-09,
      "p_html": 3.1489981153381644e-09,
      "p_java": 0.9999996086385758,
      "p_javascript": 1.834881464028276e-09,
      "p_matlab": 4.2824816880101465e-17,
      "p_python": 3.52779036638149e-07,
      "p_sql": 2.788857576140734e-10,
      "p_typescript": 5.49912637423148e-09
    },
    {
      "text": "def calculate_bmi(weight, height):\n    bmi = weight / (height**2)\n    return bmi\n\nweight = 70\nheight = 1.80\n\nbmi = calculate_bmi(weight, height)\nprint(\"BMI: \" + str(bmi))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.013144391586468044,
      "p_css": 0.13575929998175928,
      "p_html": 0.032683169061490956,
      "p_java": 0.003181427354548517,
      "p_javascript": 0.013519426003463059,
      "p_matlab": 0.006549896056363988,
      "p_python": 0.7708737240935303,
      "p_sql": 0.012590641167147455,
      "p_typescript": 0.011698024695228406
    },
    {
      "text": "from collections import Counter\n\ndef frequent_words(words, n):\n    counts = Counter(words)\n    return [word for word, count in counts.items() if count >= n]\n\nresult = frequent_words(words, n)\n\nprint(result) # prints ['a', 'd']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007751982838373548,
      "p_css": 0.004154158404521627,
      "p_html": 0.0004369659869257991,
      "p_java": 8.356595921557828e-08,
      "p_javascript": 1.4798629955143163e-05,
      "p_matlab": 1.0239570020046192e-05,
      "p_python": 0.9924505455379931,
      "p_sql": 0.0021563319188262317,
      "p_typescript": 1.6781019614822333e-06
    },
    {
      "text": "import random\n\n# constants\nCELLS = [(0, 0), (0, 1), (0, 2),\n         (1, 0), (1, 1), (1, 2),\n         (2, 0), (2, 1), (2, 2)]\n\ndef get_locations():\n    # monster = random location\n    monster = random.choice(CELLS)\n    # player = random location\n    player = random.choice(CELLS)\n    \n    # if monster and player are in the same location, regenerate\n    if monster == player:\n        return get_locations()\n\n    # door = random location\n    door = random.choice(CELLS)\n    # if monster, player or door are in the same location, regenerate\n    if monster == door or player == door:\n        return get_locations()\n\n    return monster, player, door\n\ndef move_player(player, move):\n    # get the player's current location\n    x, y = player\n    \n    # if move is LEFT, y - 1\n    if move == 'LEFT':\n        y -= 1\n    # if move is RIGHT, y + 1\n    elif move == 'RIGHT':\n        y += 1\n    # if move is UP, x - 1\n    elif move == 'UP':\n        x -= 1\n    # if move is DOWN, x + 1\n    elif move == 'DOWN':\n        x += 1\n\n    # if the player moves beyond a boundary, they stay in the same place\n    if x < 0:\n        x = 0\n    elif x > 2:\n        x = 2\n    elif y < 0:\n        y = 0\n    elif y > 2:\n        y = 2\n\n    return x, y\n\ndef get_moves(player):\n    moves = [\"LEFT\", \"RIGHT\", \"UP\", \"DOWN\"]\n    x, y = player\n    \n    # if monster is one the left side, they can't move left\n    if x == 0:\n        moves.remove(\"LEFT\")\n    # if monster is one the right side, they can't move right\n    if x == 2:\n        moves.remove(\"RIGHT\")\n    # if monster is one the top side, they can't move up\n    if y == 0:\n        moves.remove(\"UP\")\n    # if monster is one the bottom side, they can't move down\n    if y == 2:\n        moves.remove(\"DOWN\")\n\n    return moves\n\ndef draw_map(player):\n    print(\" _ _ _\")\n    tile = \"|{}\"\n\n    for idx, cell in enumerate(CELLS):\n        if idx in [0, 1, 3, 4, 6, 7]:\n            if cell == player:\n                print(tile.format(\"X\"), end=\"\")\n            else:\n                print(tile.format(\"_\"), end=\"\")\n        else:\n            if cell == player:\n                print(tile.format(\"X|\"))\n            else:\n                print(tile.format(\"_|\"))\n            \n\nmonster, player, door = get_locations()\nprint(\"Welcome to the dungeon!\")\n\nwhile True:\n    moves = get_moves(player)\n    print(\"You're currently in room {}\".format(player))\n    draw_map(player)\n\n    print(\"you can move {}\".format(moves)) # Fill in with available moves\n    print(\"Enter QUIT to quit\")\n\n    # GET PLAYER'S MOVE\n    move = input(\"> \").upper()\n\n    # if move is a valid, move player\n    if move in moves:\n        player = move_player(player, move)\n    # if move isquit, quit\n    if move == 'QUIT':\n        break\n    # if monster is player's location, end game\n    if player == monster:\n        print(\"\\nOH NO! The monster got you...\\n\")\n        break\n    # if player is at the door, they win\n    if player == door:\n        print(\"\\nYou escaped! Congratulations!\\n\")\n        break",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.12580896300067895,
      "p_css": 0.0301418507007539,
      "p_html": 0.01993047329047604,
      "p_java": 2.1134003636451198e-05,
      "p_javascript": 0.01211100171332764,
      "p_matlab": 0.15470246772824287,
      "p_python": 0.22473156363686259,
      "p_sql": 0.050780028921665235,
      "p_typescript": 0.38177251700435616
    },
    {
      "text": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.1873562066063212e-13,
      "p_css": 1.8766895299998872e-10,
      "p_html": 2.9879162528390127e-10,
      "p_java": 1.5333130038798926e-05,
      "p_javascript": 2.4463795739694757e-14,
      "p_matlab": 1.0152302791757994e-10,
      "p_python": 3.1048552092979407e-07,
      "p_sql": 0.9999843557781929,
      "p_typescript": 1.8120871952909232e-11
    },
    {
      "text": "def estimate_pi(n_terms: int) -> float:\n    numerator: float = 4.0\n    denominator: float = 1.0\n    operation: float = 1.0\n    pi: float = 0.0\n\n    for _ in range(n_terms):\n        pi += operation * (numerator / denominator)\n        denominator += 2.0\n        operation *= -1.0\n\n    return pi\n\n\nif __name__ == \"__main__\":\n    print(estimate_pi(1000))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.009302153777938008,
      "p_css": 0.002331619185331803,
      "p_html": 0.0019926334323272245,
      "p_java": 0.006911151835302024,
      "p_javascript": 0.0004123929040035736,
      "p_matlab": 0.0038860137352713623,
      "p_python": 0.9721761038648622,
      "p_sql": 0.0018377539152134206,
      "p_typescript": 0.0011501773497505463
    },
    {
      "text": "def print_squares_and_cubes_table():\n  # Print top of the table\n  print(\"n\\tSquare\\tCube\")\n\n  # Print the squares and cubes of natural numbers from 1 to 10\n  for n in range(1, 11):\n    print(n,\"\\t\", n*n,\"\\t\",n*n*n)\n\n# Driver code\nprint_squares_and_cubes_table()",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 6.722160284842428e-05,
      "p_css": 1.771146795130213e-05,
      "p_html": 0.00041323896689663883,
      "p_java": 0.00022176698241062302,
      "p_javascript": 0.7385284093983611,
      "p_matlab": 0.00020104932590060592,
      "p_python": 0.16171825470065837,
      "p_sql": 7.29331091612551e-05,
      "p_typescript": 0.09875941444581166
    },
    {
      "text": "def generate_grade(points):\n    if points >= 90:\n       return \"A\"\n    elif points >= 80:\n       return \"B\"\n    elif points >= 70:\n       return \"C\"\n    elif points >= 60:\n       return \"D\"\n    else:\n       return \"F\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005095099941028864,
      "p_css": 0.006345667697272735,
      "p_html": 0.0015869821443997227,
      "p_java": 0.0001406260159992577,
      "p_javascript": 0.00042847675387729464,
      "p_matlab": 0.00045411993679690953,
      "p_python": 0.9892179437514923,
      "p_sql": 0.000969122357849428,
      "p_typescript": 0.0003475513482093391
    },
    {
      "text": "a = 10\nb = 20\n\nprint(\"sum is\", a+b)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0027856531442349047,
      "p_css": 0.04969586289370305,
      "p_html": 0.017118430745523605,
      "p_java": 0.022280738220405664,
      "p_javascript": 0.023294576738355704,
      "p_matlab": 0.00251990771870638,
      "p_python": 0.8750294006314848,
      "p_sql": 0.0024839444405880956,
      "p_typescript": 0.004791485466997773
    },
    {
      "text": "def count_chars(string):\n    count_dict = {}\n\n    for char in string:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    return count_dict\n\nprint(count_chars(\"Hello World\"))\n\n# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.004065748060052113,
      "p_css": 0.04623371623150235,
      "p_html": 0.008746825684031038,
      "p_java": 6.67385520526423e-05,
      "p_javascript": 0.00012548026973841885,
      "p_matlab": 0.0016837655371973062,
      "p_python": 0.9342334218107734,
      "p_sql": 0.004289561963871458,
      "p_typescript": 0.0005547418907813172
    },
    {
      "text": "import requests\nimport pandas as pd\nimport json\n\nurl = 'https://www.example.com/'\n\nresponse = requests.get(url)\nproducts = json.loads(response.content)\n\nprice_df = pd.DataFrame(columns=['Product', 'Price'])\n\nfor product in products:\n    product_name = product['name']\n    product_price = product['price']\n    price_df = price_df.append({'Product': product_name, 'Price': product_price}, ignore_index=True)\n\nprice_df.to_csv('product_price.csv', index=False)",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 1.3306469967664366e-12,
      "p_css": 0.269609525267275,
      "p_html": 1.0793131654641726e-05,
      "p_java": 0.730197238166286,
      "p_javascript": 1.3918853385682684e-07,
      "p_matlab": 5.033057659524507e-07,
      "p_python": 0.00017875430772769444,
      "p_sql": 2.5248365990291064e-06,
      "p_typescript": 5.217948271268612e-07
    },
    {
      "text": "import findspark\nfindspark.init()\n\nfrom pyspark import SparkContext\n\nsc = SparkContext('local', 'fibonacci-generator')\n\ndef generate_fibonacci():\n rdd = sc.parallelize([0,1])\n for _ in range(100):\n rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])\n return rdd.collect()\n\nresult = generate_fibonacci()\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004240755076297082,
      "p_css": 0.001939415389992969,
      "p_html": 0.00032276844769204026,
      "p_java": 3.1502725184372454e-06,
      "p_javascript": 2.5799093048041736e-05,
      "p_matlab": 0.000709592776055976,
      "p_python": 0.9963783923243261,
      "p_sql": 0.00014857601849520383,
      "p_typescript": 4.823017024175941e-05
    },
    {
      "text": "def compute_readability(text):\n    \"\"\"Compute the readability score of a given text\"\"\"\n    words = 0\n    sentences = 0\n    syllables = 0\n    for word in text.split():\n        words += 1\n        syllables += count_syllables(word)\n\n    for sentence in text.split(\".\"):\n        sentences += 1\n\n    score = 206.835 - (1.015 * (words / sentences)) - (84.6 * (syllables / words))\n    return score\n\ndef count_syllables(word):\n    \"\"\"Count the number of syllables in a given word\"\"\"\n    vowels = \"aeiouAEIOU\"\n    syllables = 0\n    for letter in word:\n        if letter in vowels:\n            syllables += 1\n    if len(word) >= 3 and word[-3:] == \"ely\" or word[-2:] == \"es\":\n        syllables -= 1\n    return syllables",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003489376998721947,
      "p_css": 0.004206326727016461,
      "p_html": 0.0022294349802275577,
      "p_java": 9.31681259696601e-07,
      "p_javascript": 0.00023998062173253665,
      "p_matlab": 0.0008811068389128178,
      "p_python": 0.9136996942301001,
      "p_sql": 0.0735211605978566,
      "p_typescript": 0.0017319873241723718
    },
    {
      "text": "def find_all_primes(n):\n    \"\"\"Finds all prime numbers up to a given number n.\"\"\"\n    primes = []\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.2971524280360492e-10,
      "p_css": 9.605658172230814e-14,
      "p_html": 5.840769118444702e-10,
      "p_java": 1.4402808654553467e-10,
      "p_javascript": 6.509304089040962e-11,
      "p_matlab": 0.9999998751331003,
      "p_python": 1.1973171878960082e-07,
      "p_sql": 1.2855470913903519e-09,
      "p_typescript": 2.8266244687354945e-09
    },
    {
      "text": "user_list = [2, 7, 4, 5]\nsorted_list = sorted(user_list)\nprint(sorted_list)\n# Output: [2, 4, 5, 7]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.025234397521011535,
      "p_css": 0.020375997910584764,
      "p_html": 0.01106447635899555,
      "p_java": 0.0002447064977439835,
      "p_javascript": 0.0022602297105857086,
      "p_matlab": 0.0003711156807725361,
      "p_python": 0.9392950008884475,
      "p_sql": 0.0009757040049774464,
      "p_typescript": 0.00017837142688075595
    },
    {
      "text": "from flask import Flask, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/api/getData', methods=['POST'])\ndef get_data():\n data = request.get_json()\n con = sqlite3.connect('database.db')\n cur = con.cursor()\n query = 'SELECT * FROM myTable WHERE id=?'\n result = cur.execute(query, (data['id'],)).fetchall()\n return result\n\nif __name__ == '__main__':\n app.run(debug=True)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0005668024749451223,
      "p_css": 0.3217011596584252,
      "p_html": 0.0017213108509454835,
      "p_java": 1.1441227128972982e-06,
      "p_javascript": 2.2178852783280596e-05,
      "p_matlab": 3.4827998449207686e-06,
      "p_python": 0.0018383421612272316,
      "p_sql": 0.6740169059108644,
      "p_typescript": 0.00012867316825134227
    },
    {
      "text": "myString = \"Hello World!\"\nfor x in myString:\n  print(x)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9006271665297765,
      "p_css": 0.0012139998682586194,
      "p_html": 0.0036855250759865485,
      "p_java": 3.02382613743137e-12,
      "p_javascript": 0.03817042462406195,
      "p_matlab": 0.009500372198540446,
      "p_python": 0.04614520643602128,
      "p_sql": 0.00024651929133268606,
      "p_typescript": 0.00041078597299810466
    },
    {
      "text": "def linear_search(list, item):\n    \"\"\"\n    Implement linear search in a given list.\n    list: the list to be searched\n    item: the item to be searched for\n    \"\"\"\n    for i in range(len(list)):\n        if list[i] == item:\n            return i \n    return -1",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 2.0746457613293098e-06,
      "p_css": 0.00026355369639189416,
      "p_html": 0.0006684138869313518,
      "p_java": 3.274135562097555e-05,
      "p_javascript": 0.011824983996446659,
      "p_matlab": 0.046701224928142604,
      "p_python": 0.17064652037478392,
      "p_sql": 0.0002653325353001872,
      "p_typescript": 0.7695951545806211
    },
    {
      "text": "def remove_odd_numbers(input_list):\n    new_list = [x for x in input_list if x % 2 == 0]\n    return new_list\n\ndef find_sum_of_even_numbers(input_list):\n    new_list = remove_odd_numbers(input_list)\n    sum = 0\n    for number in new_list:\n        sum += number\n    return sum\n\ninput_list = [1, 2, 3, 4, 5, 6, 7]\nprint('Sum of even numbers:', find_sum_of_even_numbers(input_list))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001309953427091125,
      "p_css": 0.0007446599554477807,
      "p_html": 0.0011971260481290049,
      "p_java": 0.009240237163630462,
      "p_javascript": 0.00035158611556780986,
      "p_matlab": 0.0005091446509619538,
      "p_python": 0.9864534995187071,
      "p_sql": 0.0008965751800741602,
      "p_typescript": 0.0004761760247724904
    },
    {
      "text": "def convert_roman_to_decimal(roman_string):\n    # define a dictionary of key-value pairs\n    roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n    # runs loop to accrue total\n    total = 0\n    for i in range(len(roman_string)):\n        # assign values of characters\n        check = roman_dict[roman_string[i]]\n        if i+1 < len(roman_string):\n            # if the Next letter is in the string, compare it\n            check_next = roman_dict[roman_string[i+1]]\n            if check >= check_next:\n                # if the examined letter is bigger, add it\n                total += check\n            if check_next > check:\n                # if the examined letter is smaller , subtract it\n                total -= check\n        else:\n            total += check\n    return total",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0001832094567263379,
      "p_css": 0.10757533013915713,
      "p_html": 0.0038723781279072864,
      "p_java": 0.00466834016194679,
      "p_javascript": 0.008265302832235047,
      "p_matlab": 0.0456441348757018,
      "p_python": 0.5396005518622615,
      "p_sql": 0.045010368603143676,
      "p_typescript": 0.2451803839409202
    },
    {
      "text": "def unique_list(list):\n    unique_list = []\n    for element in list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n\nunique_elements = unique_list([1,2,2,3,3,3])\nprint(unique_elements)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.8739814327280527e-06,
      "p_css": 3.5008096924647246e-06,
      "p_html": 2.745122607768604e-06,
      "p_java": 3.313354445148584e-07,
      "p_javascript": 1.1595820771791009e-06,
      "p_matlab": 0.9999237740418576,
      "p_python": 6.27010428818571e-05,
      "p_sql": 2.1556449056689128e-08,
      "p_typescript": 3.892527556860452e-06
    },
    {
      "text": "import sys\nimport traceback\n\ndef visualize_program_calls():\n  def trace_calls(frame, event, arg):\n    if event != 'call':\n      return\n    co = frame.f_code\n    func_name = co.co_name\n    if func_name == 'write':\n      # Ignore write() calls from print statements\n      return\n    func_line_no = frame.f_lineno\n    func_filename = co.co_filename\n    caller = frame.f_back\n    caller_line_no = caller.f_lineno\n    caller_filename = caller.f_code.co_filename\n    print('Call to %s on line %s of %s from line %s of %s' % \\\n        (func_name, func_line_no, func_filename,\n         caller_line_no, caller_filename))\n    return\n\n  sys.setprofile(trace_calls)\n\ndef _visualize_program_returns(*args):\n  for thread_id, frame in sys._current_frames().items():\n    print('Return from %s on line %s of %s' % \\\n        (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename))\n\nsys.settrace(_visualize_program_returns)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.07775234283783847,
      "p_css": 0.15556449485485888,
      "p_html": 0.015402134602990012,
      "p_java": 0.0005878771486902163,
      "p_javascript": 0.004087684146098253,
      "p_matlab": 0.001111719764447999,
      "p_python": 0.6903911055815568,
      "p_sql": 0.005323647144855073,
      "p_typescript": 0.04977899391866425
    },
    {
      "text": "def count_substr(str, substr):\n    count = 0\n    start = 0\n    while (str.find(substr, start) != -1):\n        count += 1\n        start = str.find(substr, start) + 1\n    return count\n\nstring = \"abcdabcd\"\nsubstring = \"cd\"\nresult = count_substr(string, substring)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.425389725846417e-07,
      "p_css": 0.000581786125838155,
      "p_html": 3.651579146147806e-05,
      "p_java": 0.0011318332946494236,
      "p_javascript": 1.9668872229950057e-07,
      "p_matlab": 1.4651078894324713e-07,
      "p_python": 0.9975672846230547,
      "p_sql": 0.0006782961171121228,
      "p_typescript": 3.3983094001320807e-06
    },
    {
      "text": "def remove_other_list_elements_inplace(list_elements):\n    list_elements[:] = [element for index, element in enumerate(list_elements) if (index + 1) % 2 == 1]\n    return list_elements \n\nsample_list = [1,2,3,4,5,6]\nprint(\"Original List:\", sample_list) \n\nremove_other_list_elements_inplace(sample_list)\nprint(\"Modified List:\", sample_list)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0017301282498456247,
      "p_css": 0.00192929178741492,
      "p_html": 0.0025281330609345383,
      "p_java": 0.00014154509463047596,
      "p_javascript": 0.0010660227706010294,
      "p_matlab": 0.8173816169331387,
      "p_python": 0.17380618515303997,
      "p_sql": 3.45287834639654e-05,
      "p_typescript": 0.0013825481669309133
    },
    {
      "text": "def generate_matrix():\n    matrix = []\n    for _ in range(5):\n        row = [0] * 5\n        matrix.append(row)\n    return matrix\n        \nif __name__ == '__main__':\n    matrix = generate_matrix()\n    print(matrix)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00019276317202197884,
      "p_css": 0.000761105361248312,
      "p_html": 0.0007883463199055592,
      "p_java": 4.000865850111383e-05,
      "p_javascript": 6.554030049069537e-05,
      "p_matlab": 0.03793909855927216,
      "p_python": 0.9590806020464702,
      "p_sql": 0.0008606844972800352,
      "p_typescript": 0.00027185108480993586
    },
    {
      "text": "def extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005500073454298108,
      "p_css": 0.005739761449228293,
      "p_html": 0.00949466973026204,
      "p_java": 2.832972834627898e-06,
      "p_javascript": 8.806864040190484e-05,
      "p_matlab": 0.05763469158791293,
      "p_python": 0.695713182585602,
      "p_sql": 0.22570158000553794,
      "p_typescript": 0.0001251395739222083
    },
    {
      "text": "import string\n\ndef clean_text(text):\n # remove punctuation \n translator = str.maketrans('', '', string.punctuation)\n text = text.translate(translator)\n \n # remove unwanted words\n unwanted_words = {'the', 'and', 'a'}\n words = text.split(' ')\n words = [word for word in words if word not in unwanted_words]\n \n return ' '.join(words)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.4665520874615125e-06,
      "p_css": 0.00015561955257540637,
      "p_html": 9.162451464508072e-05,
      "p_java": 3.973785739874167e-05,
      "p_javascript": 5.7393411208998675e-08,
      "p_matlab": 2.071265839673127e-06,
      "p_python": 0.013761145134219622,
      "p_sql": 0.9859305989778535,
      "p_typescript": 1.7678751969569074e-05
    },
    {
      "text": "def sort_list(input_list): \n    # Traverse through all array elements \n    for i in range(len(input_list)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(input_list)): \n            if input_list[min_idx] > input_list[j]: \n                min_idx = j \n              \n        # Swap the found minimum element with  \n        # the first element         \n        input_list[i], input_list[min_idx] = input_list[min_idx], input_list[i] \n  \n    return input_list\n  \n# Driver code to test above\nif __name__ == '__main__':\n    input_list = [8, 15, 2, 18, 10]\n    print(\"Input list:\", input_list)\n    print(\"Sorted list:\", sort_list(input_list))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00034287001939062794,
      "p_css": 0.0002330683260330982,
      "p_html": 0.0005871195180086332,
      "p_java": 2.404649903138843e-05,
      "p_javascript": 0.0003417623014738174,
      "p_matlab": 0.06975714375786167,
      "p_python": 0.9263298036093386,
      "p_sql": 0.0002019524662651948,
      "p_typescript": 0.0021822335025969857
    },
    {
      "text": "my_list = [1, -2, 9, 4, -7, 0]\n\n# Initialize variables\nlargest_number = my_list[0]\nsmallest_number = my_list[0]\n\n# Loop through list\nfor number in my_list:\n    # Update variables\n    if number > largest_number:\n        largest_number = number\n    if number < smallest_number:\n        smallest_number = number\n\nprint(\"Largest number:\", largest_number)\nprint(\"Smallest number:\", smallest_number)",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.002049167901018809,
      "p_css": 0.009806586839454493,
      "p_html": 0.0019492498039855204,
      "p_java": 0.00013475182753308875,
      "p_javascript": 7.568644703719832e-05,
      "p_matlab": 0.0050786421423067345,
      "p_python": 0.9755937710930918,
      "p_sql": 0.004071203987715182,
      "p_typescript": 0.0012409399578572106
    },
    {
      "text": "def linearSearch(arr, value):\n    \n    for i in range(len(arr)):\n        if arr[i] == value:\n            return i\n        \n    return -1\n\narr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]\nvalue = 110\n\nidx = linearSearch(arr, value)\n\nif idx != -1:\n    print(\"Element is present at index\", idx)\nelse:\n    print(\"Element is not present in the array\")",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.1410529060777637e-08,
      "p_css": 1.9488888450598058e-07,
      "p_html": 2.3477389803034943e-08,
      "p_java": 1.3664397742342128e-09,
      "p_javascript": 9.98152414969462e-09,
      "p_matlab": 0.9999997323601119,
      "p_python": 1.481063957417946e-08,
      "p_sql": 8.385589782818914e-10,
      "p_typescript": 1.0865922307809307e-08
    },
    {
      "text": "def is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.2519113542722855e-12,
      "p_css": 2.7042726766247394e-18,
      "p_html": 3.093278463607561e-11,
      "p_java": 6.835920591015581e-14,
      "p_javascript": 1.500799917917631e-13,
      "p_matlab": 0.9999995621380299,
      "p_python": 4.378273490040063e-07,
      "p_sql": 8.104364225202085e-13,
      "p_typescript": 4.074924146578199e-13
    },
    {
      "text": "import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import fetch_california_housing\n\n# Load the dataset\ndataset = fetch_california_housing()\nX = dataset.data\ny = dataset.target\n\n# Train the model\nregr = RandomForestRegressor(n_estimators=100, random_state=42)\nregr.fit(X, y)\n\n# Print the R2 score\nscore = round(regr.score(X, y) * 100, 2)\nprint(f\"R2 score: {score}%\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8088408748932544,
      "p_css": 0.0955596569746378,
      "p_html": 0.0015575468107306512,
      "p_java": 9.589390031570057e-06,
      "p_javascript": 0.00023327375906298284,
      "p_matlab": 2.5910027934477642e-05,
      "p_python": 0.09288876218631414,
      "p_sql": 1.6031206639903673e-06,
      "p_typescript": 0.0008827828373697887
    },
    {
      "text": "def extract_words_with_length_greater_equal_than(input_string, length):\n    words = input_string.split(' ')\n    \n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    \n    return result\n\nresult = extract_words_with_length_greater_equal_than(input_string, 4)       \nprint(result) # This should print ['This', 'sample', 'string']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.6662083558065453e-06,
      "p_css": 0.00011898782866778923,
      "p_html": 1.7570877320041948e-05,
      "p_java": 2.1893599118382924e-05,
      "p_javascript": 1.0727234254540187e-07,
      "p_matlab": 1.084847582515111e-06,
      "p_python": 0.9981630573953246,
      "p_sql": 0.0016693846352264419,
      "p_typescript": 4.247336061703762e-06
    },
    {
      "text": "#!/usr/bin/env python\n\nimport virtualenv\n\n# Create a virtual environment\nvirtualenv_dir = virtualenv.create_environment()\n\n# Activate the virtual environment\nvirtualenv.activate_environment(virtualenv_dir)\n\n# Install package\nvirtualenv.install_package('mypackage', virtualenv_dir)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999902119038837,
      "p_css": 1.8728002620544701e-06,
      "p_html": 3.0132324769026918e-06,
      "p_java": 3.8454180371997267e-10,
      "p_javascript": 1.1242123417455651e-06,
      "p_matlab": 4.5349977238037634e-07,
      "p_python": 9.526452029236384e-08,
      "p_sql": 1.2678480987937516e-06,
      "p_typescript": 1.9608541026249573e-06
    },
    {
      "text": "def longestCommonPrefix(strings):\n    prefix = \"\"\n    min_length = min([len(s) for s in strings])\n    for i in range(min_length):\n        current_char = strings[0][i]\n        for s in strings:\n            if s[i] != current_char:\n                return prefix\n        prefix += current_char\n    return prefix\n\nresult = longestCommonPrefix(['car', 'cat', 'cow'])\nprint(result) # Output: 'c'",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003055731725873433,
      "p_css": 0.001937811011447788,
      "p_html": 0.0007089508956314615,
      "p_java": 0.00015004810388100366,
      "p_javascript": 1.1568503379251634e-05,
      "p_matlab": 0.05761567895593106,
      "p_python": 0.9376569662488675,
      "p_sql": 0.0014477884803974674,
      "p_typescript": 0.00016561462787698504
    },
    {
      "text": "def find_duplicate_rows(arr):\n    # Create a tracking array to keep track of visited rows\n    visited = [0] * len(arr)\n\n    # Iterate through the 2D array, starting from the 0th row\n    for i, row in enumerate(arr):\n        # If this row has been processed before, we do not need to process it again\n        if visited[i]:\n            continue\n\n        # Else, check this row against all subsequent rows\n        for j in range(i+1, len(arr)):\n            # Mark what rows we have visited\n            visited[j] = 1\n\n            # If two rows match, we have found a duplicate\n            if row == arr[j]:\n                print(f'Duplicate row {i} and {j}')\n\nfind_duplicate_rows(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0007205731654781338,
      "p_css": 0.0021329721667281464,
      "p_html": 0.001041313082353562,
      "p_java": 0.0003045810036733998,
      "p_javascript": 2.454517953186506e-05,
      "p_matlab": 0.45611375043057567,
      "p_python": 0.3191648003390625,
      "p_sql": 0.0030523462643421108,
      "p_typescript": 0.2174451183682545
    },
    {
      "text": "from sklearn.ensemble import RandomForestClassifier\n\n# Initialize the Random Forest model\nmodel = RandomForestClassifier(n_estimators=100)\n\n# Train the model using the training data\nmodel.fit(train_x, train_y)\n\n# Use the model to predict the class\npredictions = model.predict(test_x)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9964075861349125,
      "p_css": 0.00012338712904926566,
      "p_html": 9.101411371215119e-05,
      "p_java": 1.413072705268633e-06,
      "p_javascript": 9.443608401219306e-05,
      "p_matlab": 2.9887802885996844e-07,
      "p_python": 0.0007396819888469141,
      "p_sql": 9.194321831930064e-10,
      "p_typescript": 0.002542181679300675
    },
    {
      "text": "def remove_duplicates(head):\n    if head is None: \n        return None \n    current = head \n    while current.next: \n        if current.data == current.next.data: \n            current.next = current.next.next \n        else: \n            current = current.next\n    return head",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.0010087520167971044,
      "p_css": 0.015926375692177475,
      "p_html": 0.9498348089950154,
      "p_java": 0.0004889884193753065,
      "p_javascript": 0.0007262619841751513,
      "p_matlab": 0.0016462789024821614,
      "p_python": 0.0246749468325852,
      "p_sql": 0.004504814841481705,
      "p_typescript": 0.0011887723159106159
    },
    {
      "text": "\"\"\"\nGenerate a code to create a scatterplot using the Seaborn library in Python\n\"\"\"\n\nimport pandas as pd\nimport seaborn as sns\n\n#load the sample datasets\ndata1 = pd.read_csv('sample_data1.csv')\ndata2 = pd.read_csv('sample_data2.csv')\n\n# Create a Scatterplot Using Seaborn\nsns.relplot(x=\"data1_x\", y=\"data1_y\", data=data1); \nsns.relplot(x=\"data2_x\", y=\"data2_y\", data=data2);",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 6.622081079586908e-05,
      "p_css": 2.7868955019259277e-05,
      "p_html": 1.4596141152571494e-05,
      "p_java": 3.670091057591897e-08,
      "p_javascript": 3.5335055487492455e-06,
      "p_matlab": 1.4301260347542639e-06,
      "p_python": 1.8429137137378946e-05,
      "p_sql": 7.084066558102455e-07,
      "p_typescript": 0.999867176216745
    },
    {
      "text": "def permutation(nums):\n    if len(nums) == 1:\n        return [nums]\n\n    perm_list = [] \n    for i in range(len(nums)):\n       m = nums[i] \n\n       remLst = nums[:i] + nums[i+1:] \n\n       for p in permutation(remLst): \n           perm_list.append([m] + p) \n    return perm_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.629442465934904e-05,
      "p_css": 0.00016226535750648005,
      "p_html": 0.00014533330653907726,
      "p_java": 1.0285348397733197e-05,
      "p_javascript": 2.013257109783071e-05,
      "p_matlab": 0.0033077094359867374,
      "p_python": 0.9959676288761823,
      "p_sql": 0.000225875852931704,
      "p_typescript": 8.447482669876377e-05
    },
    {
      "text": "def sort_dicts_by_field(dict_list, field):\n    sorted_list = sorted(dict_list, key=lambda k: k[field])\n    return sorted_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0026704820960061926,
      "p_css": 0.04781087898231479,
      "p_html": 0.00580345875338542,
      "p_java": 0.0005682910347489887,
      "p_javascript": 0.002940192456273172,
      "p_matlab": 0.000686595971602336,
      "p_python": 0.9352041805083435,
      "p_sql": 0.002457967077581201,
      "p_typescript": 0.0018579531197441543
    },
    {
      "text": "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2016, Shoop Ltd. All rights reserved.\n#\n# This source code is licensed under the AGPLv3 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.db import models\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom django.utils.translation import ugettext_lazy as _\nfrom enumfields import Enum, EnumIntegerField\nfrom jsonfield import JSONField\n\nfrom shuup.core.fields import InternalIdentifierField\nfrom shuup.core.modules import ModuleInterface\nfrom shuup.utils.analog import define_log_model\n\nfrom ._base import ShuupModel\n\n\nclass SupplierType(Enum):\n    INTERNAL = 1\n    EXTERNAL = 2\n\n    class Labels:\n        INTERNAL = _('internal')\n        EXTERNAL = _('external')\n\n\n@python_2_unicode_compatible\nclass Supplier(ModuleInterface, ShuupModel):\n    default_module_spec = \"shuup.core.suppliers:BaseSupplierModule\"\n    module_provides_key = \"supplier_module\"\n\n    identifier = InternalIdentifierField(unique=True)\n    name = models.CharField(verbose_name=_(\"name\"), max_length=64)\n    type = EnumIntegerField(SupplierType, verbose_name=_(\"supplier type\"), default=SupplierType.INTERNAL)\n    stock_managed = models.BooleanField(verbose_name=_(\"stock managed\"), default=False)\n    module_identifier = models.CharField(max_length=64, blank=True, verbose_name=_('module'))\n    module_data = JSONField(blank=True, null=True, verbose_name=_(\"module data\"))\n\n    def __str__(self):\n        return self.name\n\n    def get_orderability_errors(self, shop_product, quantity, customer):\n        \"\"\"\n        :param shop_product: Shop Product\n        :type shop_product: shuup.core.models.ShopProduct\n        :param quantity: Quantity to order\n        :type quantity: decimal.Decimal\n        :param contect: Ordering contact.\n        :type contect: shuup.core.models.Contact\n        :rtype: iterable[ValidationError]\n        \"\"\"\n        return self.module.get_orderability_errors(shop_product=shop_product, quantity=quantity, customer=customer)\n\n    def get_stock_statuses(self, product_ids):\n        \"\"\"\n        :param product_ids: Iterable of product IDs\n        :return: Dict of {product_id: ProductStockStatus}\n        :rtype: dict[int, shuup.core.stocks.ProductStockStatus]\n        \"\"\"\n        return self.module.get_stock_statuses(product_ids)\n\n    def get_stock_status(self, product_id):\n        \"\"\"\n        :param product_id: Product ID\n        :type product_id: int\n        :rtype: shuup.core.stocks.ProductStockStatus\n        \"\"\"\n        return self.module.get_stock_status(product_id)\n\n    def get_suppliable_products(self, shop, customer):\n        \"\"\"\n        :param shop: Shop to check for suppliability\n        :type shop: shuup.core.models.Shop\n        :param customer: Customer contact to check for suppliability\n        :type customer: shuup.core.models.Contact\n        :rtype: list[int]\n        \"\"\"\n        return [\n            shop_product.pk\n            for shop_product\n            in self.shop_products.filter(shop=shop)\n            if shop_product.is_orderable(self, customer, shop_product.minimum_purchase_quantity)\n        ]\n\n    def adjust_stock(self, product_id, delta, created_by=None, type=None):\n        from shuup.core.suppliers.base import StockAdjustmentType\n        adjustment_type = type or StockAdjustmentType.INVENTORY\n        return self.module.adjust_stock(product_id, delta, created_by=created_by, type=adjustment_type)\n\n    def update_stock(self, product_id):\n        return self.module.update_stock(product_id)\n\n    def update_stocks(self, product_ids):\n        return self.module.update_stocks(product_ids)\n\n\nSupplierLogEntry = define_log_model(Supplier)\n",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.17658557652557752,
      "p_css": 0.60020187019772,
      "p_html": 0.036870646080568795,
      "p_java": 0.004533618131702861,
      "p_javascript": 0.0009890780778817336,
      "p_matlab": 3.262426228670927e-06,
      "p_python": 0.16705112945983677,
      "p_sql": 0.009011943525175209,
      "p_typescript": 0.004752875575308391
    },
    {
      "text": "def largest_elements(arr):\n    \n    max_vals = []\n    while arr:\n        max_value = max(arr)\n        max_vals.append(max_value)\n        while max_value in arr:\n            arr.remove(max_value)\n    return max_vals",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.162981260279516e-05,
      "p_css": 7.690848121226916e-05,
      "p_html": 1.1847711929939514e-05,
      "p_java": 8.509842885198743e-06,
      "p_javascript": 8.147140715842544e-06,
      "p_matlab": 0.9959772874854598,
      "p_python": 0.003876008523139309,
      "p_sql": 4.98680546527896e-07,
      "p_typescript": 2.9162321508603184e-05
    },
    {
      "text": "class Process:\n    def start(self):\n        # code to start the process \n        pass\n\n    def stop(self):\n        # code to stop the process \n        pass",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.000706726754723492,
      "p_css": 2.0501145521511305e-06,
      "p_html": 0.0001429126023215584,
      "p_java": 5.1992927541508414e-06,
      "p_javascript": 0.00011202092788001788,
      "p_matlab": 1.4221687652109764e-06,
      "p_python": 0.001710451853620898,
      "p_sql": 0.0005210326655218502,
      "p_typescript": 0.9967981836198606
    },
    {
      "text": "message = 'Hello world!'\n\nprint(message.upper()) // HELLO WORLD!",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.999713876851136,
      "p_css": 2.8224503278774414e-07,
      "p_html": 4.930750238523576e-07,
      "p_java": 7.435821343662181e-26,
      "p_javascript": 0.00027706535158177515,
      "p_matlab": 3.1595632358383725e-10,
      "p_python": 8.274732033013058e-06,
      "p_sql": 3.3634504406638847e-09,
      "p_typescript": 4.06578574722489e-09
    },
    {
      "text": "result = \"Hello\" + \" \" + \"World\"\nprint(result)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9371532744344366,
      "p_css": 0.00012045159325741173,
      "p_html": 1.2402546080356972e-05,
      "p_java": 3.0820316986684684e-20,
      "p_javascript": 0.0027351817616159393,
      "p_matlab": 8.34620023387487e-09,
      "p_python": 0.05997533374258006,
      "p_sql": 2.7301682733544186e-06,
      "p_typescript": 6.174075561661398e-07
    },
    {
      "text": "def classifySentence(sentence):\n    #importing the necessary libraries\n    import nltk\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    \n    #Create a sentiment analyzer object\n    sid_obj = SentimentIntensityAnalyzer() \n    \n    #calling the polarity_scores method \n    sentiment_dict = sid_obj.polarity_scores(sentence) \n  \n    #decide sentiment as positive, negative, neutral or mixed\n    if sentiment_dict['compound'] >= 0.05 : \n        return \"Positive\"\n  \n    elif sentiment_dict['compound'] <= - 0.05 : \n        return \"Negative\"\n  \n    else : \n        return \"Neutral\"\n    \nresult = classifySentence(\"She is a great teacher\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002363444506583184,
      "p_css": 0.030134752713367036,
      "p_html": 0.0015272322758653294,
      "p_java": 0.0001533338751792418,
      "p_javascript": 0.0009966952568811604,
      "p_matlab": 5.340792603798417e-05,
      "p_python": 0.9403204724930425,
      "p_sql": 0.002406219153550749,
      "p_typescript": 0.02204444179949288
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nimport keras\n\n# Read the data\ndf = pd.read_csv('stocks.csv')\n\n# Extract the features and target\nfeatures = df.drop(['Name', 'symbol', 'Close'], axis=1).values\ntarget = df.Close.values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Construct a model\nmodel = keras.Sequential([\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(32, activation='relu'),\n    keras.layers.Dense(1, activation='linear'),\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mse',\n              metrics=['mae'])\n\n# Train model\nmodel.fit(X_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(X_test, y_test)\n\nprint('Test accuracy:', test_acc)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03839045534168772,
      "p_css": 0.012631169586053313,
      "p_html": 0.01660027457624234,
      "p_java": 6.233038055567362e-06,
      "p_javascript": 7.373076165222285e-06,
      "p_matlab": 2.5282124347951982e-05,
      "p_python": 0.5919012926445594,
      "p_sql": 1.3864442821825576e-05,
      "p_typescript": 0.3404240551700666
    },
    {
      "text": "list1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8]\n\ndef find_unique_elements(list1, list2):\n    unique_elements = []\n    for ele in list1:\n        if ele not in list2:\n            unique_elements.append(ele)\n    for ele in list2:\n        if ele not in list1:\n            unique_elements.append(ele)\n\n    return unique_elements\n\nunique_elements = find_unique_elements(list1, list2)\nprint(unique_elements)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0020437593956848274,
      "p_css": 0.01901872438675082,
      "p_html": 0.00873150859739589,
      "p_java": 0.00047589875142895393,
      "p_javascript": 0.0017506340027156322,
      "p_matlab": 0.15445140472797547,
      "p_python": 0.8049043897753859,
      "p_sql": 0.0025711539790312927,
      "p_typescript": 0.006052526383631288
    },
    {
      "text": "def arrange_list(input_list):\n    # sort the list\n    input_list.sort()\n    # initialize the output list\n    output_list = []\n    # loop over elements in the input list\n    for i in range(0, len(input_list)):\n        if i % 2 == 0:\n            output_list.append(input_list[i])\n        else:\n            output_list.append(input_list[len(input_list) - 1 - i])\n    # return output list\n    return output_list\n\nif __name__ == '__main__':\n    input_list = [3, 5, 4, 16, 9]\n    print(arrange_list(input_list)) # [3, 16, 5, 4, 9]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.005728166222853062,
      "p_css": 0.004742656009032169,
      "p_html": 0.006223209939635463,
      "p_java": 6.178440682183309e-05,
      "p_javascript": 0.0014249948316631853,
      "p_matlab": 0.03911094220698265,
      "p_python": 0.9349246577357385,
      "p_sql": 0.007040280826715171,
      "p_typescript": 0.0007433078205579164
    },
    {
      "text": "def add_prefix(input_string, prefix):\n    \"\"\"Takes a string and adds a prefix to each word in the string.\"\"\"\n    output_string = []\n    words = input_string.split()\n    for word in words:\n        output_string.append(prefix + word)\n    return ' '.join(output_string)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.1913778235060774e-05,
      "p_css": 0.0023789821971544113,
      "p_html": 0.0018853819984615476,
      "p_java": 0.0096585908810316,
      "p_javascript": 5.039287727511698e-06,
      "p_matlab": 0.0003111898904443255,
      "p_python": 0.08768286621363804,
      "p_sql": 0.8970785653433557,
      "p_typescript": 0.0009774704099518874
    },
    {
      "text": "import random\n\npassword_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*().,?0123456789'\n\ndef generate_password(length):\n    return ''.join(random.choices(password_characters, k=length))\n  \nprint(generate_password(10))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.2365008487857372e-05,
      "p_css": 1.889979732623635e-05,
      "p_html": 1.0572450424354735e-05,
      "p_java": 1.545712912392299e-07,
      "p_javascript": 0.00010387107333109145,
      "p_matlab": 4.6256129874875953e-07,
      "p_python": 0.0016306999587244154,
      "p_sql": 0.9982203714700639,
      "p_typescript": 2.603109052071954e-06
    },
    {
      "text": "def trading_strategy(portfolio):\n    \"\"\"\n    Function to design a trading strategy using Python to maximize profits while minimizing risks\n\n    Arguments:\n    portfolio -- current portfolio of the trader\n\n    Returns:\n    new_portfolio -- new and improved portfolio\n    \"\"\"\n\n    # Initialize the new and improved portfolio\n    new_portfolio = portfolio.copy()\n \n    # Loop through all the stocks in the portfolio\n    for stock in portfolio:\n        # Calculate the current price of the stock\n        price = get_price(stock)\n \n        # Calculate the risk of buying the stock\n        risk = get_risk(stock)\n \n        # Calculate the expected return of buying the stock\n        return_expected = get_expected_return(stock, price)\n \n        # Calculate the risk/reward ratio\n        risk_reward = return_expected/risk\n \n        # If the risk/reward ratio is greater than 1,\n        # then buy the stock\n        if risk_reward > 1:\n            # Calculate the amount to buy\n            amount = calculate_amount_to_buy(portfolio, price, risk)\n coy\u0013\n            # Buy the stock\n            new_portfolio = buy_stock(new_portfolio, stock, amount)\n \n        # Else, sell the stock\n        else:\n            # Sell the stock\n            new_portfolio = sell_stock(new_portfolio, stock)\n\n    # return the new and improved portfolio\n    return new_portfolio",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0020409394368282982,
      "p_css": 0.0014071503511788393,
      "p_html": 0.00020347645105791244,
      "p_java": 6.042892369605049e-06,
      "p_javascript": 0.014608665615775559,
      "p_matlab": 3.061718013424278e-05,
      "p_python": 0.0007150322611770061,
      "p_sql": 0.00020183431175899337,
      "p_typescript": 0.9807862414997196
    },
    {
      "text": "import tkinter as tk\n\nroot = tk.Tk()\n\ntext_editor = tk.Text(root)\n\n# create and add scrollbar\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=tk.RIGHT, fill=tk.Y)\ntext_editor.config(yscrollcommand=scrollbar.set)\nscrollbar.config(command=text_editor.yview)\n\n# add functions to widgets\ntext_editor.pack(fill=tk.BOTH, expand=True)\n\n# create a menu and add commands\nmenu_bar = tk.Menu(root)\n\n# add menu bars\nroot.config(menu=menu_bar)\n\ndef quit():\n    root.destroy()\n\n# set menu bar items\nfile_menu= tk.Menu(menu_bar, tearoff=0)\nfile_menu.add_command(label=\"Open\", command=lambda: open_file())\nfile_menu.add_command(label=\"Save\", command=lambda: save_file())\nfile_menu.add_command(label=\"Quit\", command=lambda: quit())\n\n# add menu drop downs\nmenu_bar.add_cascade(label=\"File\", menu=file_menu)\n\n# create a file open dialog\ndef open_file():\n    file = tk.filedialog.askopenfile(mode=\"r\")\n    if file != None:\n        contents = file.read()\n        text_editor.insert('1.0', contents)\n\n# create a file save dialog\ndef save_file():\n    file = tk.filedialog.asksaveasfile(mode=\"w\")\n    if file != None:\n        data = text_editor.get('1.0', tk.END)\n        file.write(data)\n\nroot.mainloop()",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.03519960611636554,
      "p_css": 0.11993126052956413,
      "p_html": 0.022973216962939046,
      "p_java": 0.0055295607767988355,
      "p_javascript": 0.003289712360064074,
      "p_matlab": 0.00013813020683487863,
      "p_python": 0.4362149647017605,
      "p_sql": 0.23639817795084891,
      "p_typescript": 0.14032537039482415
    },
    {
      "text": "product = lambda x, y: x * y",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.006967385934331992,
      "p_css": 0.5568655597693001,
      "p_html": 0.01498505842791934,
      "p_java": 0.0008714990220385583,
      "p_javascript": 0.0014994032553446157,
      "p_matlab": 0.0012155949236100896,
      "p_python": 0.4100960584358755,
      "p_sql": 0.0012904477797543682,
      "p_typescript": 0.0062089924518253055
    },
    {
      "text": "# import required libraries\nimport pandas as pd\n\n# define the rating scale\nrating_scale = [1,2,3,4,5]\n\n# create an empty DataFrame\nrating_df = pd.DataFrame(columns=['Team', 'Rating'])\n\n# function to take in user input and add it to the DataFrame\ndef add_rating(team, rating):\n    rating_df = rating_df.append({'Team': team, 'Rating': rating}, ignore_index=True)\n\n# function to allow a user to rate a team\ndef rate_team():\n    team = input('Which team would you like to rate? ')\n    rating = input('Please enter a rating between 1 and 5: ')\n    if rating not in rating_scale:\n        print('Error: Rating must be between 1 and 5!')\n        rate_team()\n    else:\n        add_rating(team, rating)\n        print('Rating added successfully!')\n\n# call the rate_team() function\nrate_team()",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.00039494039126976787,
      "p_css": 0.023121107381795195,
      "p_html": 0.00113205342591718,
      "p_java": 4.296696938509735e-05,
      "p_javascript": 0.01612345864625418,
      "p_matlab": 0.00013933440874794672,
      "p_python": 0.02754010643781707,
      "p_sql": 0.00125278559718857,
      "p_typescript": 0.930253246741625
    },
    {
      "text": "class AnagramDetector:\n    def __init__(self, sentence1, sentence2):\n        self.sentence1 = sentence1\n        self.sentence2 = sentence2\n    \n    def is_anagram(self):\n        # put words in sentences in lowercase\n        s1_words = [word.lower() for word in self.sentence1.split()]\n        s2_words = [word.lower() for word in self.sentence2.split()]\n        \n        # compare the length of the words\n        if len(s1_words) != len(s2_words):\n            return False\n        \n        # compare the words in both list\n        for word in s1_words:\n            if word not in s2_words:\n                return False\n        \n        return True\n\ndetector = AnagramDetector(sentence1, sentence2)\nresult = detector.is_anagram()\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00063284578726077,
      "p_css": 0.0017221911465568579,
      "p_html": 0.01099336574650252,
      "p_java": 8.369610615498094e-07,
      "p_javascript": 0.00010929947620525683,
      "p_matlab": 5.4746613902492834e-05,
      "p_python": 0.9257093568928929,
      "p_sql": 0.06062723663266594,
      "p_typescript": 0.00015012074295177126
    },
    {
      "text": "def is_prime(number): \n \n    # If given number is greater than 1 \n    if number > 1: \n         \n        # Iterate from 2 to n / 2  \n        for i in range(2, int(number/2)): \n              \n            # If number is divisible by any number between  \n            # 2 and n / 2, it is not prime  \n            if (number % i) == 0: \n                return False\n        return True\n    else: \n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.7329309166473805e-06,
      "p_css": 3.689201461007314e-05,
      "p_html": 3.208539748544295e-05,
      "p_java": 3.7274719765721534e-05,
      "p_javascript": 2.7932796531558833e-05,
      "p_matlab": 4.904911991345972e-05,
      "p_python": 0.9994723088397106,
      "p_sql": 4.8084123158446524e-05,
      "p_typescript": 0.00029364005790805846
    },
    {
      "text": "import requests \n\n# API URL \nurl = \"http://api.openweathermap.org/data/2.5/weather?\"\n\n# API Key \napi_key = \"Your_API_KEY\"\n \n# City name \ncity_name = \"Dataak\"\n\n# parameters \nparams = {\n    'appid': api_key,\n    'q': city_name,\n    'units': 'metric'\n} \n\n# GET request \nresponse = requests.get(url, params=params)\n\n# Printing response \ndata = response.json() \n\n# Parsing data \ntemp = data['main']['temp'] \nwind_speed = data['wind']['speed'] \n\n# Printing output \nprint('Temperature : {} degree celcius'.format(temp)) \nprint('Wind Speed : {} m/s'.format(wind_speed))",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 1.0437161692499524e-06,
      "p_css": 0.9971928747769935,
      "p_html": 0.0012532300037045383,
      "p_java": 0.00015878180976847784,
      "p_javascript": 8.548260160778854e-06,
      "p_matlab": 0.00047953597318985293,
      "p_python": 0.0007438371338731772,
      "p_sql": 0.00010172818879580278,
      "p_typescript": 6.04201373447873e-05
    },
    {
      "text": "def dot_product(v1, v2):\n    total  = 0\n    for (x1, x2) in zip(v1, v2):\n        total += x1*x2\n    return total",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010472891089050725,
      "p_css": 0.005613657357915512,
      "p_html": 0.004691239373368232,
      "p_java": 0.00021338012345589307,
      "p_javascript": 0.0006731325474757915,
      "p_matlab": 0.001628614142567649,
      "p_python": 0.9821554178430681,
      "p_sql": 0.0020816284146128136,
      "p_typescript": 0.001895641088630865
    },
    {
      "text": "name = input(\"Please enter your name: \")\n\nprint(\"Hello \" + name + \"!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8194424080586175,
      "p_css": 0.001279435570863008,
      "p_html": 0.012353213310647562,
      "p_java": 0.01528719450124633,
      "p_javascript": 1.8958455835201104e-06,
      "p_matlab": 5.6017785287314284e-05,
      "p_python": 0.15139649365390118,
      "p_sql": 0.00011822863392570493,
      "p_typescript": 6.511263992809205e-05
    },
    {
      "text": "def primeSieve(n): \n    prime_list = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime_list[p] == True): \n            for i in range(p * 2, n+1, p): \n                prime_list[i] = False\n        p += 1\n    primes=[] \n    for p in range(2, n): \n        if prime_list[p]: \n            primes.append(p) \n    return primes\n\nprint(primeSieve(10))  # [2, 3, 5, 7]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.821967596264336e-06,
      "p_css": 8.20116149639005e-07,
      "p_html": 1.887394925405109e-05,
      "p_java": 2.792436838416037e-07,
      "p_javascript": 3.0566799083260546e-07,
      "p_matlab": 0.9902336641085306,
      "p_python": 0.009738712809757757,
      "p_sql": 1.3201732517012911e-06,
      "p_typescript": 2.2019637853354844e-06
    },
    {
      "text": "string1 = \"hello\"\nstring2 = \"world\"\n\nif string1 < string2:\n    print(string1 + \" comes before \" + string2 + \" alphabetically\")\nelse:\n    print(string2 + \" comes before \" + string1 + \" alphabetically\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03744821739644531,
      "p_css": 0.009745754403695057,
      "p_html": 0.011083238009808894,
      "p_java": 3.594139881925319e-06,
      "p_javascript": 0.016195773439552346,
      "p_matlab": 0.0054428999287731315,
      "p_python": 0.9136433753397641,
      "p_sql": 0.003319617382095595,
      "p_typescript": 0.003117529959983711
    },
    {
      "text": "import keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\nfrom keras.models import Sequential\n\n#Data loading and preprocessing\ntext = open('text_file.txt').read()\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts([text])\nencoded = tokenizer.texts_to_sequences([text])[0]\n\n# Generating sequences\nsequence_length = 15\nsequences = list()\nfor i in range(sequence_length, len(encoded)):\n    seq = encoded[i-sequence_length:i]\n    line = ' '.join(map(str, seq))\n    sequences.append(line)\n\n# Generate model\nmodel = Sequential()\nmodel.add(Embedding(20000, 128, input_length=sequence_length)) \nmodel.add(LSTM(256)) \nmodel.add(Dense(500, activation='relu')) \nmodel.add(Dense(20000, activation='softmax')) \nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(sequences, encoded, epochs=50, verbose=2)",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.7591390222960896,
      "p_css": 0.002145975765336464,
      "p_html": 0.025161681788722943,
      "p_java": 0.00061219347239618,
      "p_javascript": 8.316967298590644e-05,
      "p_matlab": 4.694797227434953e-05,
      "p_python": 0.209766048368745,
      "p_sql": 3.143688111759283e-05,
      "p_typescript": 0.0030135237823319307
    },
    {
      "text": "# Import libraries  \nimport numpy as np  \nimport pandas as pd  \nfrom sklearn.ensemble import RandomForestRegressor  \nfrom sklearn.model_selection import train_test_split  \nfrom sklearn.metrics import mean_squared_error, r2_score  \nfrom sklearn.preprocessing import StandardScaler, LabelEncoder  \n\n# Read data\ndf = pd.read_csv('housing.csv')\n\n# Pre-process data\nX = df.drop('price', axis=1)\nnumeric_features = X.select_dtypes(include=[np.number])\nnumeric_features = numeric_features.fillna(-999)\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(numeric_features)\nX[numeric_features.columns] = scaled_data\n\n# Encode categorical features \ncategorical_features = X.select_dtypes(include=['object'])\nencoder = LabelEncoder()\ncategorical_features = categorical_features.apply(encoder.fit_transform)\nX[categorical_features.columns] = categorical_features\n\n# Split data \ny = df.price \nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n\n# Build and train model \nregressor = RandomForestRegressor(n_estimators=100, random_state=0) \nregressor.fit(X_train, y_train)\n\n# Make predictions \ny_pred = regressor.predict(X_test)\n\n# Assess performance \nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred) \nprint('Root Mean Squared Error: ', rmse)\nprint('R2 score: ', r2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008206741390297796,
      "p_css": 0.28708527390225297,
      "p_html": 0.006826922122864363,
      "p_java": 4.999155205354818e-05,
      "p_javascript": 6.813409303456398e-05,
      "p_matlab": 6.557929544371146e-05,
      "p_python": 0.6939616126404429,
      "p_sql": 0.0010224819820543003,
      "p_typescript": 0.002713263021555741
    },
    {
      "text": "def sort_string():\n    # get the string from the user\n    string = input('Enter a string: ')\n\n    # convert the string to a list and sort\n    sorted_string = sorted(list(string))\n\n    # print the sorted string\n    print(''.join(sorted_string))\n\nsort_string()",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 2.198948748101052e-12,
      "p_css": 5.0074632366751055e-06,
      "p_html": 1.0889859068659706e-07,
      "p_java": 0.9979125481473516,
      "p_javascript": 2.93566719847479e-13,
      "p_matlab": 1.3933134463540825e-10,
      "p_python": 6.892328465884033e-05,
      "p_sql": 0.0020127767372450462,
      "p_typescript": 6.353270932376499e-07
    },
    {
      "text": "def isMultipleOf5(num1, num2):\n # Calculate the sum\n sum = num1 + num2\n \n # Check if the sum is divisible by 5\n if sum % 5 == 0:\n return True\n else:\n return False\n\n# Take user input\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# Execute the function\nresult = isMultipleOf5(num1, num2)\n\n# Print the result\nprint(\"The sum is a multiple of 5:\", result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0035335484134280085,
      "p_css": 0.003222556696422543,
      "p_html": 0.0013845229209985984,
      "p_java": 0.0028011543728840554,
      "p_javascript": 0.04704993457879579,
      "p_matlab": 2.720314257946931e-07,
      "p_python": 0.9373355823694558,
      "p_sql": 0.0037513265706853676,
      "p_typescript": 0.0009211020459039827
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://example.com\"\n\nhtml_doc = requests.get(url).text\n\nsoup = BeautifulSoup(html_doc, 'html.parser')\nheadings = soup.find_all('h1')\nanchors = soup.find_all('a')\n\nfor heading in headings:\n print(heading.text)\n\nfor anchor in anchors:\n print(anchor.get('href'))",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.043836950114398e-08,
      "p_css": 0.20755228300710055,
      "p_html": 0.7730223985795497,
      "p_java": 0.012515764707966703,
      "p_javascript": 7.044545021307288e-05,
      "p_matlab": 3.280068996266063e-05,
      "p_python": 0.005555165552782184,
      "p_sql": 0.001212602541948927,
      "p_typescript": 3.852903210667491e-05
    },
    {
      "text": "sentence_string = 'This is an example sentence with some words.'\nword_list = sentence_string.split(' ')\n\nlongest_word = sorted(word_list, key=len)[-1]\n\nprint(longest_word)\n\n# Output\nsentence",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002539528104755637,
      "p_css": 0.014430074943587716,
      "p_html": 0.19667873774072617,
      "p_java": 0.015096536158533786,
      "p_javascript": 0.007463428277403883,
      "p_matlab": 0.00014631829677177487,
      "p_python": 0.7214794415836301,
      "p_sql": 0.04180330803239302,
      "p_typescript": 0.00036262686219795643
    },
    {
      "text": "def is_anagram(s, t):\n s_list = list(s)\n t_list = list(t)\n s_list.sort()\n t_list.sort()\n if s_list == t_list:\n return True\n else:\n return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00010327032668117905,
      "p_css": 0.0003612427569110305,
      "p_html": 0.0009216314015761983,
      "p_java": 3.489907441316644e-06,
      "p_javascript": 4.812527284823827e-05,
      "p_matlab": 0.00012171480023084667,
      "p_python": 0.9980456853051805,
      "p_sql": 0.00038046465892641734,
      "p_typescript": 1.4375570204324337e-05
    },
    {
      "text": "import csv\nimport json\n \ncsv_file = open('data.csv', 'r')\njson_file = open('data.json', 'w')\n \nfieldnames = (\"Name\",\"Age\",\"Profession\")\nreader = csv.DictReader(csv_file, fieldnames)\nout = json.dumps([r for r in reader])\njson_file.write(out)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 8.164868190548268e-05,
      "p_css": 0.3615468331118992,
      "p_html": 0.00531075589825977,
      "p_java": 0.6023146871218436,
      "p_javascript": 6.465882177126784e-05,
      "p_matlab": 0.00021760386294126158,
      "p_python": 0.02928608856318154,
      "p_sql": 0.00012782733059797012,
      "p_typescript": 0.0010498966075997845
    },
    {
      "text": "\"\"\"\nPerformance tests based on tests/highlevel/high-in-low6-memory.py\nSee also auth-*py.\n\n- Data overhead is now at ~6.5 ms / MB.\n  A lot of the data overhead comes from json.dumps. This is to build mixed cells.\n  The rest is from get_hash.\n  Pure Python version (with get_hash and dumps) is at 6.3 ms / MB,\n  so the rest of the data overhead is fine!\n\n- Database upload overhead is about the same (7 ms / MB) with a flatfile backend\n  Database download is almost free.\n\n- A structured cell auth operation is about 10 ms.\n\n- map-list macro evaluation is cheap, 5 ms per (parallel) transformation\n\n- re-translation is about 20 ms per transformation (on top of the macro)\n\n- expression evaluation is about 10 ms + 0.5 ms / MB (of input + output) per transformation\n  (speculative relationship!)\n\n- BUT: Non-linear scaling:\n  between 100 and 1000 parallel transformations, a x4 slowdown is observed for the last three overheads above.\n\n\nNOTE: Mixed-to-str conversion is expensive, don't do it!\n\n\n\n\"\"\"\n\nimport sys\nimport seamless\n\nimport seamless.core.execute\nseamless.core.execute.DIRECT_PRINT = True\n\nseamless.database_sink.connect()\nseamless.database_cache.connect()\n#seamless.set_ncores(2)\n#seamless.set_parallel_evaluations(5)\n\nseamless.set_ncores(8) ###\nseamless.set_parallel_evaluations(100)  ###\n\n# for the big testing, 20 evaluations\nseamless.set_parallel_evaluations(20)  ###\n\n\"\"\"\nimport logging\nlogging.basicConfig()\nlogging.getLogger(\"seamless\").setLevel(logging.DEBUG)\n\"\"\"\n\nfrom seamless.highlevel import Context, Cell, Macro\nfrom seamless.highlevel.library import LibraryContainer\n\nimport time\nimport cProfile\ncProfile.profiler = cProfile.Profile()\n\nmylib = LibraryContainer(\"mylib\")\nmylib.map_list_N = Context()\ndef constructor(ctx, libctx, context_graph, inp, result):\n    m = ctx.m = Macro()\n    m.graph = context_graph\n    m.pins.result = {\"io\": \"output\", \"celltype\": \"mixed\", \"hash_pattern\": {\"!\": \"#\"}}\n\n    ctx.inp = Context()\n    ctx.cs_inp = Context()\n    inp_prefix = \"INPUT_\"\n    m.inp_prefix = inp_prefix\n    for key in inp:\n        c = Cell()\n        ctx.inp[key] = c\n        c.hash_pattern = {\"!\": \"#\"}\n        inp[key].connect(c)\n        ctx.cs_inp[key] = Cell(\"checksum\")\n        ctx.cs_inp[key] = ctx.inp[key]\n        setattr(m, inp_prefix + key , ctx.cs_inp[key])\n\n    def map_list_N(ctx, inp_prefix, graph, **inp):\n        #print(\"INP\", inp)\n        first_k = list(inp.keys())[0]\n        length = len(inp[first_k])\n        first_k = first_k[len(inp_prefix):]\n        for k0 in inp:\n            k = k0[len(inp_prefix):]\n            if len(inp[k0]) != length:\n                err = \"all cells in inp must have the same length, but '{}' has length {} while '{}' has length {}\"\n                raise ValueError(err.format(k, len(inp[k0]), first_k, length))\n\n        print(\"LENGTH\", length)\n\n        from seamless.core import Cell as CoreCell\n        from seamless.core.unbound_context import UnboundContext\n        pseudo_connections = []\n        ctx.result = cell(\"mixed\", hash_pattern = {\"!\": \"#\"})\n\n        ctx.sc_data = cell(\"mixed\", hash_pattern = {\"!\": \"#\"})\n        ctx.sc_buffer = cell(\"mixed\", hash_pattern = {\"!\": \"#\"})\n        ctx.sc = StructuredCell(\n            data=ctx.sc_data,\n            buffer=ctx.sc_buffer,\n            inchannels=[(n,) for n in range(length)],\n            outchannels=[()],\n            hash_pattern = {\"!\": \"#\"}\n        )\n\n        for n in range(length):\n            #print(\"MACRO\", n+1)\n            hc = HighLevelContext(graph)\n\n            subctx = \"subctx%d\" % (n+1)\n            setattr(ctx, subctx, hc)\n\n            if not hasattr(hc, \"inp\"):\n                raise TypeError(\"map_list_N context must have a subcontext called 'inp'\")\n            hci = hc.inp\n            if not isinstance(hci, UnboundContext):\n                raise TypeError(\"map_list_N context must have an attribute 'inp' that is a context, not a {}\".format(type(hci)))\n\n            for k0 in inp:\n                k = k0[len(inp_prefix):]\n                if not hasattr(hci, k):\n                    raise TypeError(\"map_list_N context must have a cell called inp.'{}'\".format(k))\n                if isinstance(hci[k], StructuredCell):\n                    raise TypeError(\"map_list_N context has a cell called inp.'{}', but its celltype must be mixed, not structured\".format(k))\n                if not isinstance(hci[k], CoreCell):\n                    raise TypeError(\"map_list_N context must have an attribute inp.'{}' that is a cell, not a {}\".format(k, type(hci[k])))\n                if hci[k].celltype != \"mixed\":\n                    raise TypeError(\"map_list_N context has a cell called inp.'{}', but its celltype must be mixed, not {}\".format(k, hci[k].celltype))\n\n                con = [\"..\" + k], [\"ctx\", subctx, \"inp\", k]\n                pseudo_connections.append(con)\n                cs = inp[k0][n]\n                hci[k].set_checksum(cs)\n\n            resultname = \"result%d\" % (n+1)\n            setattr(ctx, resultname, cell(\"mixed\"))\n            c = getattr(ctx, resultname)\n            hc.result.connect(c)\n            c.connect(ctx.sc.inchannels[(n,)])\n            con = [\"ctx\", subctx, \"result\"], [\"..result\"]\n            pseudo_connections.append(con)\n\n        ctx.sc.outchannels[()].connect(ctx.result)\n        ctx._pseudo_connections = pseudo_connections\n        print(\"/MACRO\")\n\n        \"\"\"\n        import logging\n        logging.basicConfig()\n        logging.getLogger(\"seamless\").setLevel(logging.DEBUG)\n        \"\"\"\n\n        import cProfile\n        cProfile.profiler.enable()\n\n    m.code = map_list_N\n    ctx.result = Cell()\n    ctx.result.hash_pattern = {\"!\": \"#\"}\n    ctx.result = m.result\n    result.connect_from(ctx.result)\n\n\nmylib.map_list_N.constructor = constructor\nmylib.map_list_N.params = {\n    \"context_graph\": \"context\",\n    \"inp\": {\n        \"type\": \"celldict\",\n        \"io\": \"input\"\n    },\n    \"result\": {\n        \"type\": \"cell\",\n        \"io\": \"output\"\n    },\n}\n\nctx = Context()\nctx.adder = Context()\nsctx = ctx.adder\nsctx.inp = Context()\nsctx.inp.a = Cell(\"mixed\")\nsctx.inp.b = Cell(\"mixed\")\nsctx.a = Cell(\"mixed\")\nsctx.b = Cell(\"mixed\")\nsctx.a = sctx.inp.a\nsctx.b = sctx.inp.b\ndef add(a,b):\n    print(\"ADD\", a[:10])\n    return a+b\nsctx.add = add\nsctx.add.a = sctx.a\nsctx.add.b = sctx.b\nsctx.result = sctx.add\nsctx.result.celltype = \"mixed\"\nctx.compute()\n\nctx.data_a = Cell()\nctx.data_a.hash_pattern = {\"!\": \"#\"}\nctx.data_b = Cell()\nctx.data_b.hash_pattern = {\"!\": \"#\"}\nctx.compute()\n\n# Next section is 14.5 secs (if the database is filled), but can be elided to ~0.5s by setting checksum directly (if in flatfile cache).\n# Not having a DB at all is also 13 secs, so DB request communication (without upload) doesn't cost much.\n\nrepeat = int(10e6)\n#repeat = int(5)\n#for n in range(1000): # 2x10 GB\n#for n in range(100): # 2x1 GB\nfor n in range(1000):\n    a = \"A:%d:\" % n + str(n%10) * repeat\n    b = \"B:%d:\" % n + str(n%10) * repeat\n    ctx.data_a[n] = a\n    ctx.data_b[n] = b\n    if n % 20 == 0:\n        ctx.compute()\n    print(n+1)\n\nctx.compute()\nprint(ctx.data_a.checksum)\nprint(ctx.data_b.checksum)\n\n\"\"\"\nctx.data_a.set_checksum(\"d07050610c50de8c810aa1d1e322786ed8932cf6eafa0fbe1f132b2c881af9c2\")\nctx.data_b.set_checksum(\"374c02504f89ed0a760b03c3e1fd2258988576b919d763254709b66fc7bfb22e\")\nctx.compute()\n\n\"\"\"\n\n#\n### For repeat=10 million, 1000 items\n### ctx.data_a.set_checksum(\"fa4e6aa7e7edaa6feb036fd5e8c28ffc48575cefc332187552c5be4bf0511af8\")\n### ctx.data_b.set_checksum(\"2988c44780790e4ffceb1f97391e475f165e316f27a656957282a2998aee9d4f\")\n\n### For repeat=10 million, 200 items\n### ctx.data_a.set_checksum(\"d07050610c50de8c810aa1d1e322786ed8932cf6eafa0fbe1f132b2c881af9c2\")\n### ctx.data_b.set_checksum(\"374c02504f89ed0a760b03c3e1fd2258988576b919d763254709b66fc7bfb22e\")\n\n### For repeat=10 million\n### ctx.data_a.set_checksum(\"983730afb7ab41d524b72f1097daaf4a3c15b98943291f96e523730849cabe8c\")\n### ctx.data_b.set_checksum(\"46dabc02b59be44064a9e06dd50bc6841833578c2b6339fbc43f090cc17831fa\")\n\n### For repeat=5\n### ctx.data_a.set_checksum(\"9b4a551a6c1c5830d6070b9c22ae1788b9743e9637be47d56103bcda019a897c\")\n### ctx.data_b.set_checksum(\"9820f1ab795db7b0d195f21966ecb071d76e9ce2fd3a90845974a3905584eb3e\")\nctx.compute()\n\n\"\"\"\nIf there is no database (100 x repeat 10e6):\n- 13 secs up to here (6.5 ms per MB)\n- 0.5 secs to evaluate the macro\n- 2.3 secs (2.8 - 0.5) for re-translation (23 ms per transformer)\n- 32 secs total time, which leaves 32 - 13 - 0.5 = 18.5 secs for transformation and expression evaluation\n  Since 13 secs is required for calculate checksum and decoding, that means ~5.5 secs (55 ms per transformer) overhead\n  This is a supplement of 32 ms over just re-translation\n\nIf there is no database (100 x repeat 5):\n- 2.3 secs up to here (12 ms per auth operation)\n- Still 0.5 secs to evaluate the macro\n- Still 2.3 secs (2.8 - 0.5) for re-translation (23 ms per transformer, independent of data size!)\n- 6.2 secs total time, which leaves 6.2 - 2.3 - 0.5 = 3.5 secs for transformation and expression evaluation\n  This is an overhead of 35 ms per transformer, a supplement of just 12 ms over re-translation\n  The 20 ms reduction compared to above comes from not handling 2x10 MB of input and 20 MB of output,\n  so that's 0.5 ms/MB.\n\nIf there is no database (1000 x repeat 5):\n- 11.7 secs up to here (12 ms per auth operation). So scales linearly.\n- 6.5 secs to evaluate the macro, so scales about linearly\n- 98 secs (104.5 - 6.5) for re-translation, which is 4x slower than above  (98 ms)\n- 145 secs total time, which leaves 145 - 11.7 - 6.5 = 127 secs for transformation and expression evaluation\n  This is an overhead of 127 ms per transformer, which is 4x slower than above (127 ms).\n  => So in principle, 90 sconds slower than might be\n    - Some 45 secs is await-upon-connection-tasks, this could be optimized?\n    - 12 seconds from isinstance is probably unavoidable\n    - 9 seconds comes from validate deep structure, that may be unavoidable\n    - 5 seconds each from taskmanager.add_task (61k tasks) and asyncio.Task.done (119 million tasks). Avoidable?\n  => do maplist-inside-maplist\n\nIf the database has not been filled:\n- 27.5 secs up to here\nIf the database has been filled:\n- 14 secs up to here: to synthesize the data, and to verify that all is present\n  So the raw upload is 13.5 seconds (27.5 - 14); and communication with the DB delays only 1 sec.\n- 1.5 secs up to here, with the above elision.\n\nWith the database:\n- 1.5 secs to evaluate the macro (DB slows down!)\n- 5.5 secs for re-translation\n- 45.7 secs total time, which leaves 45.7 - 5.5 - 1.5 = 38.5 secs for transformation and expression evaluation\n  Compare this to the 18.5 secs w/o database, this is a loss of 20 secs.\n  But we have to count the download of the inputs and upload of the results.\n  When removing the tfr entries from the database, transformations will be repeated, but no buffers will be uploaded,\n  as the sink knows them already.\n  This brings total time down to 32 secs, the same as no database!\n  So all of the extra overhead is from upload, and download is almost free. (This could be hard disk caching, though)\n- 5.5 secs total time with pulling transformation results out of the DB. Again, download is almost free.\n\n\nBig test with the database (1000 x repeat 10e6):\n- Total time 940 secs. Data upload overhead should be ~120 secs, and Seamless data overhead should be ~140 secs.\n- 142 secs for re-translation + macro evaluation (142 ms / transformation), a factor 6 slowdown\n- 940 - 142 - 120 - 140 = ~540 secs for evaluation\n   I.e. 540 ms per transformation. If the same slowdown applies, it would have been 90.\n   But we would have expected 30. So a larger slowdown (fewer parallel expressions may have been a cause too)\n\"\"\"\n\nctx.result = Cell()\nctx.result.hash_pattern = {\"!\": \"#\"}\nctx.compute()\n\nctx.include(mylib.map_list_N)\nctx.inst = ctx.lib.map_list_N(\n    context_graph = ctx.adder,\n    inp = {\"a\": ctx.data_a, \"b\": ctx.data_b},\n    result = ctx.result\n)\nctx.compute()\n\nprint(\"Exception:\", ctx.inst.ctx.m.exception)\nprint(ctx.result.data)\n\nimport pstats\nsortby = 'tottime'\nps = pstats.Stats(cProfile.profiler).sort_stats(sortby)\nps.print_stats(40)\n\nt0 = time.time()\n\"\"\"\nprint(\"Re-set\")\ngraph = ctx.get_graph()\nctx_dummy = Context()\ndummy_graph = ctx_dummy.get_graph()\nctx.set_graph(dummy_graph)\nctx.translate(force=True)\nctx.compute()\nprint(time.time()-t0)\nprint(\"Re-eval\")\nctx.set_graph(graph)\n\"\"\"\n\"\"\"\nctx.translate(force=True)\nctx.compute()\nprint(time.time()-t0)\n\"\"\"",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.011377705225333991,
      "p_css": 0.03378455949686031,
      "p_html": 0.024200037613018713,
      "p_java": 0.001049406355573027,
      "p_javascript": 0.09000896622437576,
      "p_matlab": 0.0009200503005904975,
      "p_python": 0.10946240222373349,
      "p_sql": 0.010068680117302593,
      "p_typescript": 0.7191281924432117
    },
    {
      "text": "def remove_vowels(string):\n    # Replace all the vowels with empty string\n    without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') \n    return without_vowels\n\nif __name__ == '__main__':\n    print(remove_vowels('Hello World!'))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001580703976229896,
      "p_css": 0.015492791823256257,
      "p_html": 0.003153222381883801,
      "p_java": 0.0014814457412976238,
      "p_javascript": 1.53014269527149e-05,
      "p_matlab": 7.134800084992519e-05,
      "p_python": 0.9369946422642534,
      "p_sql": 0.041719008307898986,
      "p_typescript": 0.0009141696559841266
    },
    {
      "text": "def sort_by_length(strings): \n    return sorted(strings, key=len) \n  \n# Test \nstrings = ['dog', 'cat', 'mouse', 'elephant'] \n  \nprint(sort_by_length(strings))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000862681090528465,
      "p_css": 0.030771926525434513,
      "p_html": 0.0024097756946344626,
      "p_java": 0.0001401282437692247,
      "p_javascript": 0.0006372006661257599,
      "p_matlab": 0.00014493298944207093,
      "p_python": 0.9608768868800277,
      "p_sql": 0.002647953207817832,
      "p_typescript": 0.0015085147022200686
    },
    {
      "text": "def max_value(num1, num2, num3):\n    max_val = num1\n    if num2 > max_val:\n        max_val = num2\n    if num3 > max_val:\n        max_val = num3\n    return max_val",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.01501606536728946,
      "p_css": 0.028669189936872855,
      "p_html": 0.023477376544767153,
      "p_java": 0.0015771507814150549,
      "p_javascript": 0.46912987494772956,
      "p_matlab": 0.031178521420602304,
      "p_python": 0.4067048146820437,
      "p_sql": 0.0076620361435947824,
      "p_typescript": 0.016584970175685183
    },
    {
      "text": "def towers_of_hanoi(n, from_rod, aux_rod, to_rod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod)\n        return\n    towers_of_hanoi(n-1, from_rod, to_rod, aux_rod) \n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \n    towers_of_hanoi(n-1, aux_rod, from_rod, to_rod) \n          \n# Driver code  \nn = 4\ntowers_of_hanoi(n, 'A', 'B', 'C')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.04122719857260414,
      "p_css": 0.019453924637015462,
      "p_html": 0.011632313698833134,
      "p_java": 0.0006283776118719774,
      "p_javascript": 0.00871743438793497,
      "p_matlab": 0.0025736604361086897,
      "p_python": 0.8117662313872336,
      "p_sql": 0.007038349722538468,
      "p_typescript": 0.09696250954585968
    },
    {
      "text": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\nreturn True",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.6224093059646606e-05,
      "p_css": 1.2413581300160076e-05,
      "p_html": 0.00018780190785723177,
      "p_java": 2.8310555255810445e-06,
      "p_javascript": 5.2770915352208665e-06,
      "p_matlab": 0.7163695154907976,
      "p_python": 0.28329915356342394,
      "p_sql": 1.5135810663901077e-05,
      "p_typescript": 8.164740583683296e-05
    },
    {
      "text": "def multiply_2_numbers(x, y):\n    product = 0\n    for i in range(y):\n        product += x\n    return product",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001915310516543024,
      "p_css": 0.0007994330974479892,
      "p_html": 0.0005283191634886874,
      "p_java": 1.6951380416994845e-05,
      "p_javascript": 2.270992510802294e-05,
      "p_matlab": 0.06431354217781855,
      "p_python": 0.9338493914779972,
      "p_sql": 0.00010851465821246294,
      "p_typescript": 0.00016960706785573763
    },
    {
      "text": "def sort_by_attr(objects, attr):\n return sorted(objects, key=lambda item: item[attr])\n \nsort_by_attr([{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}], \"age\")",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0007459680169732203,
      "p_css": 0.82634681338164,
      "p_html": 0.0012149412618212715,
      "p_java": 0.011651815010429903,
      "p_javascript": 5.015941918449989e-05,
      "p_matlab": 0.0003934070178143935,
      "p_python": 0.15887120411678052,
      "p_sql": 0.00024697585045453424,
      "p_typescript": 0.00047871592490185676
    },
    {
      "text": "import numpy as np\nfrom sklearn import tree\n \n# example data as an array\nX = np.array([[21, 180, 70], [22, 178, 68], [19, 182, 72], \n [18, 186, 80]])\n \n# output label (The label can be any string that you set)\ny = np.array(['male', 'male', 'female', 'female'])\n \n# decision tree classifier\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n \n# predict based on the given input\nprediction = clf.predict([[24, 185, 85]])\n \nprint(prediction)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.45993666926483606,
      "p_css": 0.02338868986729581,
      "p_html": 0.0009504967815319689,
      "p_java": 0.000724069992503634,
      "p_javascript": 4.567432474026474e-06,
      "p_matlab": 0.0009186813249623477,
      "p_python": 0.0054436693466099325,
      "p_sql": 1.7687351987111435e-08,
      "p_typescript": 0.5086331383024343
    },
    {
      "text": "@app.route('/', methods=['GET','POST'])\ndef read_dataset():\n    if request.method == 'POST':\n        data = request.form['data']\n        unique_items = len(set(data.split()))\n        print('Number of Unique items is:',unique_items)\n    return render_template('index.html')",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.006121755550506316,
      "p_css": 0.13575883807841738,
      "p_html": 0.8022472786095929,
      "p_java": 0.00045208914765657184,
      "p_javascript": 0.002312208314738576,
      "p_matlab": 1.178351872722279e-05,
      "p_python": 0.04834705997333583,
      "p_sql": 0.0034969279067674506,
      "p_typescript": 0.001252058900257735
    },
    {
      "text": "#!/bin/bash\n\n# Download and install Python\nwget https://www.python.org/ftp/python/${version}/Python-${version}.tgz\ntar -xvzf Python-${version}\ncd Python-${version}/\n./configure\nmake\nmake install\n\n# Install modules\npip install ${modules[0]}\npip install ${modules[1]}",
      "y_true": "bash",
      "pred_label": "bash",
      "p_bash": 1.0,
      "p_css": 4.123664146827721e-21,
      "p_html": 2.191962134429567e-20,
      "p_java": 8.36545951787011e-36,
      "p_javascript": 1.648889101891369e-20,
      "p_matlab": 1.0040070705432433e-21,
      "p_python": 2.567519546686649e-22,
      "p_sql": 5.797381778716982e-21,
      "p_typescript": 3.4540222849203564e-21
    },
    {
      "text": "import string \nimport random\n\ndef gen_random_string(length): \n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length)) \n\nprint(gen_random_string(10))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 8.478124080031695e-11,
      "p_css": 2.033758307816913e-08,
      "p_html": 2.4116634544026914e-08,
      "p_java": 6.789264186792514e-06,
      "p_javascript": 2.9095610875864415e-11,
      "p_matlab": 1.136873349444684e-08,
      "p_python": 8.053197513851073e-05,
      "p_sql": 0.9999126215646212,
      "p_typescript": 1.2592253279179805e-09
    },
    {
      "text": "class Stack:\n \n    def __init__(self):\n        self.stack = []\n \n    # Add to the top of stack\n    def push(self, data):\n        self.stack.append(data)\n \n    # Remove from the top of stack\n    def pop(self):\n        if self.stack:\n            return self.stack.pop()\n \n    # Peek top element\n    def peek(self):\n        return self.stack[-1]\n \n    # Check if stack is empty\n    def is_empty(self):\n        return not bool(self.stack)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003646512290499673,
      "p_css": 0.024745367148266605,
      "p_html": 0.06852750765179426,
      "p_java": 5.697548700281554e-05,
      "p_javascript": 0.0005272763263219699,
      "p_matlab": 5.747067420583133e-05,
      "p_python": 0.8054391402385613,
      "p_sql": 0.09710155232713596,
      "p_typescript": 0.003180058917661138
    },
    {
      "text": "class Stack: \n\n    # Constructor \n    def __init__(self): \n        self.stack = [] \n\n    # Pop operation \n    def pop(self): \n        if len(self.stack) <= 0: \n            return \"Stack is empty\" \n        return self.stack.pop() \n\n    # Push operation \n    def push(self, data): \n        self.stack.append(data) \n\n    # Peek operation \n    def peek(self): \n        if len(self.stack) <= 0: \n            return \"Stack is empty\" \n        return self.stack[-1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00021711275986307778,
      "p_css": 0.019756854940476565,
      "p_html": 0.02563161879356078,
      "p_java": 5.9476927986646806e-05,
      "p_javascript": 0.0001921693486879831,
      "p_matlab": 6.075700135116224e-05,
      "p_python": 0.8750118431881209,
      "p_sql": 0.07860068196833021,
      "p_typescript": 0.0004694850716227684
    },
    {
      "text": "x = 5\ndef add_two_numbers(x, y):\n    z = x + y\n    return z\n\nresult = add_two_numbers(x, 5)\nprint(result)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0005597745027870831,
      "p_css": 0.03628115659616578,
      "p_html": 0.001157104651750077,
      "p_java": 8.432106394455494e-05,
      "p_javascript": 0.4788030637496102,
      "p_matlab": 2.315547890890566e-05,
      "p_python": 0.47773566721125954,
      "p_sql": 0.004173630561918431,
      "p_typescript": 0.001182126183655281
    },
    {
      "text": "# generate a random prime number\ndef gen_prime(): \n    # generate a large, prime number \n    p = getPrime(1024)\n    q = getPrime(1024)\n \n    # compute the modulus\n    n = p * q\n    return n\n \n# generate the private and public key\ndef gen_keys(n): \n    # generate two distinct large primes\n    p = getPrime(1024)\n    q = getPrime(1024)\n    phi_n = (p - 1) * (q - 1)\n \n    # choose an integer e such that e and phi(n) are coprime\n    e = random.randrange(1, phi_n)\n    g = gcd(e, phi_n)\n    while g != 1:\n        e = random.randrange(1, phi_n)\n        g = gcd(e, phi_n)\n \n    # generate private key\n    d = modinv(e, phi_n)\n \n    # return public and private keypair\n    # public key is (e, n) and private key is (d, n)\n    return ((e, n), (d, n))\n \n# encrypt the message\ndef encrypt(pk, plaintext):\n    # unpack the key into it's components\n    key, n = pk\n    # convert each letter in the plaintext to numbers based on the character using a^b mod m\n    cipher = [(ord(char) ** key) % n for char in plaintext]\n    # return the array of bytes\n    return cipher\n \n# decrypt the message\ndef decrypt(pk, ciphertext):\n    # unpack the key into its components\n    key, n = pk\n    # generate the plaintext based on the ciphertext and key using a^b mod m\n    plain = [chr((char ** key) % n) for char in ciphertext]\n    # return the array of bytes as a string\n    return ''.join(plain)",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 4.5725477847194433e-07,
      "p_css": 1.366634078600803e-05,
      "p_html": 3.5102720955398615e-07,
      "p_java": 0.9599013355842118,
      "p_javascript": 1.4355003133541544e-10,
      "p_matlab": 1.5425178783944846e-09,
      "p_python": 6.480559026905327e-05,
      "p_sql": 3.919494348236567e-06,
      "p_typescript": 0.04001546302232891
    },
    {
      "text": "def linearSearch(array, element): \n    for i in range(len(array)): \n        if array[i]==element: \n            return i\n    return -1\n\nlinearSearch([1, 2, 3, 4, 5], 4) # returns 3",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.392192659166259e-09,
      "p_css": 1.654156284728072e-10,
      "p_html": 1.167106129088946e-09,
      "p_java": 1.8511515751467622e-10,
      "p_javascript": 1.6305838486067088e-10,
      "p_matlab": 0.9999999517947901,
      "p_python": 4.064751361730191e-08,
      "p_sql": 4.007083671328276e-12,
      "p_typescript": 4.808013392553689e-10
    },
    {
      "text": "1. Complete pending assignments. \n2. Review algorithms. \n3. Update the portfolio website. \n4. Attend a programming workshop. \n5. Start working on a Machine Learning project. \n6. Read some articles on JavaScript. \n7. Create a web application using Node.js. \n8. Practice solving programming puzzles. \n9. Write a program for sorting an array. \n10. Research on different AI technologies. \n11. Write a blog post on recent web development trends. \n12. Participate in hackathons. \n13. Build a basic chatbot using Python. \n14. Try to implement a Genetic Algorithm. \n15. Learn a new programming language. \n16. Make an interactive website using HTML, CSS and JavaScript. \n17. Update skills by working on an open source project. \n18. Create a machine learning model to classify images. \n19. Work on an Android application.",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 4.397534812439174e-09,
      "p_css": 5.4397707483570854e-11,
      "p_html": 9.82945711085661e-09,
      "p_java": 9.387388976971918e-13,
      "p_javascript": 1.6652192958419018e-09,
      "p_matlab": 5.894097626631077e-09,
      "p_python": 5.220693765899385e-11,
      "p_sql": 4.510786105086359e-14,
      "p_typescript": 0.9999999781061026
    },
    {
      "text": "ID = input('User ID: ')\n\nuser_name = ID.split('che')[0]\nprint('User Name: ' + user_name)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.04449416682581653,
      "p_css": 0.36661817711565664,
      "p_html": 0.3679375380921435,
      "p_java": 0.011284329542316791,
      "p_javascript": 8.896089445157927e-05,
      "p_matlab": 0.0009354911860702881,
      "p_python": 0.19857114051116773,
      "p_sql": 0.008856560116616502,
      "p_typescript": 0.001213635715760433
    },
    {
      "text": "import json\n \ndata = {\n  \"num1\": \"4\",\n  \"num2\": \"3\",\n  \"num3\": \"2\",\n  \"num4\": \"1\"\n}\n \nfor key, value in data.items():\n    print(key, value)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 5.395603483612474e-07,
      "p_css": 0.9940912551489401,
      "p_html": 1.163352857201356e-05,
      "p_java": 1.3860423216181395e-08,
      "p_javascript": 3.627301917739243e-06,
      "p_matlab": 0.005886361126171797,
      "p_python": 3.957695673821031e-07,
      "p_sql": 5.384751436461703e-06,
      "p_typescript": 7.889526229722836e-07
    },
    {
      "text": "def max_value(x, y):\n if x > y:\n return x\n else: \n return y",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00022992359103785935,
      "p_css": 0.0005104764447885187,
      "p_html": 0.00024555768555762963,
      "p_java": 1.894672976269567e-05,
      "p_javascript": 7.11161051817106e-05,
      "p_matlab": 0.00025020154002933963,
      "p_python": 0.9984854117979268,
      "p_sql": 0.00011848926487102134,
      "p_typescript": 6.987684084476475e-05
    },
    {
      "text": "def replace_spaces(string):\n    return string.replace(' ', '_')\n\nstring = 'Hello World'\n\nprint(replace_spaces(string))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.197554464138669e-07,
      "p_css": 0.001912399214732449,
      "p_html": 0.0003872389375617308,
      "p_java": 0.11256768595660392,
      "p_javascript": 4.675570451067846e-10,
      "p_matlab": 1.3442264128482145e-07,
      "p_python": 0.875387927848791,
      "p_sql": 0.009717548620688247,
      "p_typescript": 2.6544775977839902e-05
    },
    {
      "text": "def extract_nth_element(arr, n):\n nth_element = arr[n // len(arr[0])][n % len(arr[0])]\n return nth_element\n\narr = [[1,2,3], [4,5,6], [7,8,9]]\nn = 5\nprint(extract_nth_element(arr, n))\n# Output: 6",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.2694477503034085e-05,
      "p_css": 0.00011178650147570795,
      "p_html": 5.619817455133825e-06,
      "p_java": 1.2603085297589573e-06,
      "p_javascript": 8.503874781684714e-07,
      "p_matlab": 0.02320447612515832,
      "p_python": 0.976651967522835,
      "p_sql": 2.789537806485969e-07,
      "p_typescript": 1.0659057843241405e-06
    },
    {
      "text": "import random\n\nfor i in range(10):\n ip_address = \"192.168.1.\" + str(random.randrange(0, 255))\n print(ip_address)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00012986150222435167,
      "p_css": 0.00013213323401954527,
      "p_html": 0.002278625470775812,
      "p_java": 5.205383539359158e-06,
      "p_javascript": 5.459548388026608e-05,
      "p_matlab": 0.058828394417160534,
      "p_python": 0.938180724578318,
      "p_sql": 0.00037769114693547457,
      "p_typescript": 1.276878314667279e-05
    },
    {
      "text": "class InventoryManager:\n    def __init__(self):\n        self.items = []\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        self.items.remove(item)\n\n    def print_inventory(self):\n        for item in self.items:\n            print(item)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.988093778837763e-05,
      "p_css": 0.03656130003497726,
      "p_html": 0.24084949468662972,
      "p_java": 1.7889989910471816e-06,
      "p_javascript": 0.0028174791053636058,
      "p_matlab": 4.658623492081293e-06,
      "p_python": 0.6857135627467137,
      "p_sql": 0.0339960833319551,
      "p_typescript": 5.751534089081074e-06
    },
    {
      "text": "import pandas as pd\n\n# Load the dataset \ndf = pd.read_csv('dataset.csv')\n\n# Split the dataset into features and labels\nX = df.drop('label', axis=1).values\ny = df['label'].values\n\n# Train the model\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# Make predictions on the dataset\npredictions = model.predict(X)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.5836229084182667,
      "p_css": 0.06811579237613755,
      "p_html": 0.0019993069431672316,
      "p_java": 1.1319381103793788e-05,
      "p_javascript": 0.00026990449750202553,
      "p_matlab": 3.6941941002099515e-05,
      "p_python": 0.31714224758653375,
      "p_sql": 3.786491604865511e-06,
      "p_typescript": 0.028797792364682114
    },
    {
      "text": "Optimizing the performance of a k-means clustering algorithm in Python primarily involves choosing the right distance-measure to calculate the dissimilarity between data points, selecting an initial set of cluster centroids, avoiding local minima, and selecting an appropriate value of 'k'. Distance-measures such as the Euclidean distance, Manhattan distance, and Minkowski distance can be employed to accurately measure the dissimilarity between data points. The initial set of centroids can be selected randomly or through the 'k-means++' algorithm. Choosing an appropriate 'k' value is important because it affects the quality of the cluster.",
      "y_true": "typescript",
      "pred_label": "typescript",
      "p_bash": 2.3441163166649735e-10,
      "p_css": 1.3466002413216873e-09,
      "p_html": 3.339295349134544e-10,
      "p_java": 9.860590244777497e-12,
      "p_javascript": 1.6103989015990732e-07,
      "p_matlab": 1.0409342802828522e-10,
      "p_python": 8.317511438084216e-11,
      "p_sql": 5.381341991508661e-10,
      "p_typescript": 0.9999998363099051
    },
    {
      "text": "def sum_range(start, end): \n    sum = 0\n    for i in range(start, end+1): \n        sum += i \n    return sum \n  \n# Driver Code \nstart = 2\nend = 5\nprint(sum_range(start, end)) \n# Result: 14",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.636732287617787e-05,
      "p_css": 0.00012724202183291347,
      "p_html": 0.0001702501114400283,
      "p_java": 0.00018111011605947554,
      "p_javascript": 1.647984360552883e-05,
      "p_matlab": 0.00016274109859686518,
      "p_python": 0.9984158052647663,
      "p_sql": 0.0003726607792506332,
      "p_typescript": 0.0005173434415722524
    },
    {
      "text": "def capitalize_words(string):\n words = string.split(' ')\n capitalized = [word.capitalize() for word in words]\n return ' '.join(capitalized)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.1859929122246874e-07,
      "p_css": 9.688558145866234e-05,
      "p_html": 0.00015922435220999342,
      "p_java": 0.009585864033922881,
      "p_javascript": 3.5932258453614647e-09,
      "p_matlab": 1.9765988880874947e-06,
      "p_python": 0.007513254305736552,
      "p_sql": 0.982640297828923,
      "p_typescript": 2.2751063438784323e-06
    },
    {
      "text": "import http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nhttpd = socketserver.TCPServer((\"\", PORT), Handler)\n\nprint(\"Serving at port\", PORT)\nhttpd.serve_forever()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.008914448614229055,
      "p_css": 0.008380319282396208,
      "p_html": 0.5740817895512775,
      "p_java": 0.00044473437816613183,
      "p_javascript": 0.0017264195719376106,
      "p_matlab": 5.130415574871836e-05,
      "p_python": 0.39881231996137184,
      "p_sql": 0.0013671293791945288,
      "p_typescript": 0.006221535105678406
    },
    {
      "text": "import random\n \ndef main():\n # number of darts to throw\n n = 1000000\n   \n # number of darts that land within the circle\n inside = 0\n \n # use the current system time as the seed\n random.seed()\n \n for i in range(n):\n # generate a random point x between -1 and 1\n x = random.uniform(-1, 1)\n \n # generate a random point y between -1 and 1\n y = random.uniform(-1, 1)\n \n # check to see if it landed within the circle or outside\n if (x*x + y*y <= 1):\n inside +=1\n \n pi = 4 * inside/n\n \n print (\"Pi is roughly %f\" % pi)\n \nif __name__ == \"__main__\":\n main()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0005472770346372026,
      "p_css": 9.640453269440014e-05,
      "p_html": 7.795891909747701e-05,
      "p_java": 9.585348427224435e-05,
      "p_javascript": 0.0018079176370772484,
      "p_matlab": 7.136934193594092e-05,
      "p_python": 0.15395289961923136,
      "p_sql": 0.010221432709639449,
      "p_typescript": 0.8331288867214146
    },
    {
      "text": "def reduce_arr(arr):\n    result = 0\n    for i in arr:\n        result += i\n    return result\n\nreduce_arr(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.057604540160084e-07,
      "p_css": 0.000294445742587013,
      "p_html": 1.0642496847410521e-06,
      "p_java": 1.5593679936931403e-07,
      "p_javascript": 9.154987194994825e-07,
      "p_matlab": 0.7379173244396561,
      "p_python": 0.26178267914817543,
      "p_sql": 5.476070557189575e-07,
      "p_typescript": 2.3616168681227314e-06
    },
    {
      "text": "def int_to_Roman(num):\nroma_numerals = {\n 1: \"I\",\n 4: \"IV\",\n 5: \"V\",\n 9: \"IX\",\n 10: \"X\",\n 40: \"XL\",\n 50: \"L\",\n 90: \"XC\",\n 100: \"C\",\n 400: \"CD\",\n 500: \"D\",\n 900: \"CM\",\n 1000: \"M\",\n}\n\nroman_num = \"\"\nfor key, value in sorted(roma_numerals.items(), reverse=True):\n while num >= key:\n roman_num += value\n num -= key\n\nreturn roman_num",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 2.3530909771757255e-05,
      "p_css": 0.00010856363256347102,
      "p_html": 1.8129493019967454e-05,
      "p_java": 2.1767079842506832e-07,
      "p_javascript": 8.210780937072393e-06,
      "p_matlab": 0.9998350811151756,
      "p_python": 2.666986305611475e-06,
      "p_sql": 1.4394067875398093e-06,
      "p_typescript": 2.1600046405596736e-06
    },
    {
      "text": "import random\n\ndef generateEven():\n    even_int = random.randint(0,10)\n    if(even_int % 2 == 0):\n        return even_int\n    else:\n        return generateEven()\n\nprint(generateEven())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0597172608541396e-06,
      "p_css": 1.656545971517772e-05,
      "p_html": 3.0543809614282626e-06,
      "p_java": 9.796565993791797e-09,
      "p_javascript": 2.1342333779296882e-07,
      "p_matlab": 4.222748395152727e-05,
      "p_python": 0.9999315962218925,
      "p_sql": 3.1752246403647063e-06,
      "p_typescript": 9.829167434372326e-08
    },
    {
      "text": "def double(x):\n    return x * 2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002400473238428543,
      "p_css": 0.009084555859974197,
      "p_html": 0.005054410581874672,
      "p_java": 0.00045998733673412905,
      "p_javascript": 0.00166191321084125,
      "p_matlab": 0.0004294519937736158,
      "p_python": 0.9765127854388742,
      "p_sql": 0.001464655740546074,
      "p_typescript": 0.0029317665989536646
    },
    {
      "text": "import calendar\n\nc = calendar.TextCalendar(calendar.SUNDAY)\nstr = c.formatyear(2019, 2, 1, 1, 3)\nprint (str)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006239826875220774,
      "p_css": 0.01140315546956062,
      "p_html": 0.017224973298419474,
      "p_java": 0.000497439358700379,
      "p_javascript": 0.013037085585367019,
      "p_matlab": 0.0013895822685047374,
      "p_python": 0.9455099256924786,
      "p_sql": 0.002955187826318644,
      "p_typescript": 0.0017428236254296765
    },
    {
      "text": "# Python code\n\n# input list\nnumbers = [3, 15, 6, 5, 2, 8, 7]\n\n# set maximum number to -infinity\nmax_num = float(\"-inf\")\n\n# set second highest number to -infinity\nsecond_highest = float(\"-inf\")\n\n# loop through list of numbers\nfor num in numbers:\n  # check if num is greater than current maximum number\n  if num > max_num:\n    # set second highest to current maximum number\n    second_highest = max_num\n    # set current maximum number to num\n    max_num = num\n  # check if num is greater than second highest number, but smaller than current maximum number \n  elif num > second_highest:\n    # set second highest number to num\n    second_highest = num\n  \n# print the output\nprint(f'The two numbers are {max_num} and {second_highest}')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004914636508291468,
      "p_css": 3.730703415020325e-05,
      "p_html": 0.01020585410480643,
      "p_java": 0.027685784631544832,
      "p_javascript": 0.01628577182363459,
      "p_matlab": 0.2832416946627383,
      "p_python": 0.477328923089141,
      "p_sql": 0.011603818713636992,
      "p_typescript": 0.16869620943205613
    },
    {
      "text": "import numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    return np.mean(sequence)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.2016397756653251,
      "p_css": 0.01791114678955096,
      "p_html": 0.004326341413712173,
      "p_java": 0.0002401418035087142,
      "p_javascript": 0.0001550115325768727,
      "p_matlab": 0.000685442362468351,
      "p_python": 0.769790637232821,
      "p_sql": 0.00018278292674390835,
      "p_typescript": 0.005068720273292848
    },
    {
      "text": "import requests\nimport json\n\ndef get_lat_long_from_address(address):\n    \"\"\"\n    Converting a given address into its equivalent latitude and longitude coordinates.\n    \"\"\"\n    try:\n        url = 'https://maps.googleapis.com/maps/api/geocode/json?address=%s' % address\n        response = requests.get(url).json()\n\n        geography = response['results'][0]['geometry']\n        latitude = geography['location']['lat']\n        longitude = geography['location']['lng']\n        return latitude, longitude\n    except:\n        return None\n\nlat, lng = get_lat_long_from_address(\"Tokyo Tower, Tokyo\")\nprint(\"Latitude: %.06f \\t Longitude: %.06f\" % (lat, lng))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 6.780185391647057e-07,
      "p_css": 0.7944419976172307,
      "p_html": 0.004079517098111387,
      "p_java": 0.017576511056334756,
      "p_javascript": 0.0007172177757641052,
      "p_matlab": 0.0001928893433183772,
      "p_python": 0.17824896990025468,
      "p_sql": 0.0031487125922570127,
      "p_typescript": 0.001593506598189952
    },
    {
      "text": "sentence = \"The cat is playing with a ball.\"\nwords = sentence.split()\n\nverbs = []\nnouns = []\n\nfor word in words:\n  if word in [\"is\", \"playing\"]:\n    verbs.append(word)\n  elif word in [\"The\", \"cat\", \"a\", \"ball\"]:\n    nouns.append(word)\n\nprint(\"Verbs:\", verbs)\nprint(\"Nouns:\", nouns)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06153453151831894,
      "p_css": 0.11770166158987924,
      "p_html": 0.04533249979070416,
      "p_java": 0.00020020899490161628,
      "p_javascript": 0.02268670631064449,
      "p_matlab": 0.10050357533333998,
      "p_python": 0.5029550600630254,
      "p_sql": 0.13960418000139474,
      "p_typescript": 0.009481576397791458
    },
    {
      "text": "import nltk \nimport random \nfrom nltk.corpus import movie_reviews \n\n# Generate a set of documents\ndocuments = [(list(movie_reviews.words(fileid)), category) \n             for category in movie_reviews.categories() \n             for fileid in movie_reviews.fileids(category)]\n\n# Shuffle the documents\nrandom.shuffle(documents)\n\n# Generate features\nall_words = []\nfor w in movie_reviews.words():\n   all_words.append(w.lower())\n\nall_words = nltk.FreqDist(all_words) \n\nword_features = list(all_words.keys())[:3000] \n\n# Function to create a dictionary of features for each review in the list documents\n# The keys are the words in word_features\n# The values of each key are either true or false for whether that feature appears in the review \ndef find_features(document):\n features = {}\n words = set(document)\n for w in word_features:\n     features[w] = (w in words)\n \n return features\n\n#Find the features for all the documents\nfeaturesets = [(find_features(rev), category) for (rev, category) in documents] \n\n#Create the training set using the featuresets\ntraining_set = featuresets[:1900] \n\n# Create the testing set using the featuresets\ntesting_set = featuresets[1900:] \n\n# Train the classifier\nclassifier = nltk.NaiveBayesClassifier.train(training_set)\n\n#Test the classifier and print the accuracy\nprint(\"Classifier accuracy percent:\",(nltk.classify.accuracy(classifier, testing_set))*100)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0005553587993331547,
      "p_css": 0.02647644319415648,
      "p_html": 0.0031830307070510244,
      "p_java": 2.1895112045113275e-06,
      "p_javascript": 0.02824642694474572,
      "p_matlab": 0.0011076041802384657,
      "p_python": 0.00322471657169553,
      "p_sql": 0.006290523261310168,
      "p_typescript": 0.9309137068302649
    },
    {
      "text": "def prime_factors(n):\n    factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    return factors",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006899922995370215,
      "p_css": 0.0268289293038506,
      "p_html": 0.022598527237141484,
      "p_java": 0.006286087263411883,
      "p_javascript": 0.005798831574981157,
      "p_matlab": 0.0555572394258001,
      "p_python": 0.8465939870850729,
      "p_sql": 0.004033380534193029,
      "p_typescript": 0.025403094580178653
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import IsolationForest\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Create training and test sets\nx_train, x_test = train_test_split(data, test_size=0.2)\n\n# Train the Isolation Forest\nisolation_forest = IsolationForest(random_state=0).fit(x_train)\n\n# Make predictions\npreds = isolation_forest.predict(x_test)\n\n# Detect and mark anomalies\nanomalies_index = np.where(preds == -1)[0]",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.0026157748870909835,
      "p_css": 0.076775517887075,
      "p_html": 0.00508397675150578,
      "p_java": 5.808519051269959e-06,
      "p_javascript": 2.312195263729063e-05,
      "p_matlab": 2.9715267203981847e-05,
      "p_python": 0.2656683396212499,
      "p_sql": 0.0005771716778734405,
      "p_typescript": 0.6492205734363122
    },
    {
      "text": "#import necessary modules\nimport requests\nfrom bs4 import BeautifulSoup\n\n#make the request and get the HTML\nr = requests.get('https://www.example.com')\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n#find the product titles\nproduct_titles = soup.find_all('h2', class_='product-title')\n\n#initialize a list to store the titles\ntitles = []\n\n#loop through the product titles and store them in the list\nfor title in product_titles:\n titles.append(title.text)\n\n#find the product prices\nproduct_prices = soup.find_all('span', class_='product-price')\n\n#initialize a list to store the prices\nprices = []\n\n#loop through the product prices and store them in the list\nfor price in product_prices:\n prices.append(price.text)\n\n#print the titles and prices\nfor i in range(len(titles)):\n print(f'{titles[i]}: {prices[i]}')",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.0757078911795814e-06,
      "p_css": 0.8340425173345762,
      "p_html": 0.10287534883180989,
      "p_java": 0.0003775553078908365,
      "p_javascript": 0.027888478637671524,
      "p_matlab": 0.00017280190962014525,
      "p_python": 0.00797888431197539,
      "p_sql": 0.001408302400417372,
      "p_typescript": 0.025254035558147342
    },
    {
      "text": "def intersection(list1, list2):\n    return [value for value in list1 if value in list2]\n\nlist1 = [1, 2, 3 ,4 ,5]\nlist2 = [3, 4, 5, 6 ,7]\n\nprint (intersection(list1, list2))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.6515938387852797e-08,
      "p_css": 3.3341075906989646e-06,
      "p_html": 2.2848616936416175e-07,
      "p_java": 1.0038155031418685e-08,
      "p_javascript": 3.894151905655283e-08,
      "p_matlab": 0.9999961793768926,
      "p_python": 9.491150007639852e-11,
      "p_sql": 7.204311291543136e-08,
      "p_typescript": 1.1039571055370012e-07
    },
    {
      "text": "def string_lengths(arr):\n    lengths = [len(s) for s in arr]\n    return lengths\n\nresult = string_lengths(['hello', 'world'])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.040725588765874086,
      "p_css": 0.0014083814452691423,
      "p_html": 8.453187584664501e-05,
      "p_java": 2.0566001725200528e-13,
      "p_javascript": 0.0009508231686208719,
      "p_matlab": 0.02120325439385089,
      "p_python": 0.9355996845736934,
      "p_sql": 1.1202835945673659e-05,
      "p_typescript": 1.653294069367833e-05
    },
    {
      "text": "def merge_list(list1, list2):\n    merged_list = list1 + list2\n    final_list = list(dict.fromkeys(merged_list))\n    return final_list\n\nlist1 = [\"apple\",\"orange\",\"banana\"]\nlist2 = [\"cherry\",\"pineapple\",\"apple\"]\n\nresult = merge_list(list1, list2)\nprint(result) # Output: [\"apple\", \"orange\", \"banana\", \"cherry\", \"pineapple\"]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002245138360814674,
      "p_css": 0.02779009798046304,
      "p_html": 0.0008435593442037855,
      "p_java": 4.039449219812287e-05,
      "p_javascript": 0.00012667685623663814,
      "p_matlab": 2.926162835959558e-05,
      "p_python": 0.9705028462503813,
      "p_sql": 0.0002568606003211029,
      "p_typescript": 0.000185789011754926
    },
    {
      "text": "def render_ascii_table(columns, rows):\n    col_width = 10\n\n    # Create array of column labels\n    header_row = [('{:^' + str(col_width) + '}').format(label) for label in columns]\n\n    # Create divider row\n    divider_row = ['-' * col_width] * len(columns)\n\n    # Create row of data\n    data_rows = [[('{:^' + str(col_width) + '}').format(data) for data in row] for row in rows]\n\n    # Create table\n    table = [header_row] + [divider_row] + data_rows\n\n    # Render table\n    for row in table:\n        print('|'.join(row))\n\nrender_ascii_table(['col1', 'col2', 'col3', 'col4'], [\n    ['data1', 'data2', 'data3', 'data4'],\n    ['data5', 'data6', 'data7', 'data8'],\n    ['data9', 'data10', 'data11', 'data12']\n])",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0019190014305848152,
      "p_css": 0.15015464760681005,
      "p_html": 0.04032596370554203,
      "p_java": 0.00020721615561673857,
      "p_javascript": 0.01944912779418988,
      "p_matlab": 0.008738569711933576,
      "p_python": 0.5627437921694192,
      "p_sql": 0.1251625330256548,
      "p_typescript": 0.09129914840024884
    },
    {
      "text": "Maths = 85\nEnglish = 70\nScience = 90\n\n# Calculate the average \naverage = (Maths + English + Science) / 3\n\n# Check the grade\nif average >= 80:\n    grade = 'A'\nelif average >= 70:\n    grade = 'B'\nelif average >= 60:\n    grade = 'C'\nelif average >= 50:\n    grade = 'D'\nelse:\n    grade = 'F'\n\n# Print the grade\nprint(grade)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.020258793166143145,
      "p_css": 0.5089533934825939,
      "p_html": 0.025705442165041035,
      "p_java": 0.0010012946782402324,
      "p_javascript": 0.0134020828910251,
      "p_matlab": 0.019107880606554925,
      "p_python": 0.36441278722713494,
      "p_sql": 0.0062080408111277515,
      "p_typescript": 0.040950284972138935
    },
    {
      "text": "#!/usr/bin/env python\n\ntext = \"Hello World this is a Test\"\nwords = text.split()\n\nfor word in words:\n print(word)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9999981257970453,
      "p_css": 2.3451304652940086e-08,
      "p_html": 1.5547230074317292e-07,
      "p_java": 1.7469074654223234e-17,
      "p_javascript": 1.0282166282432404e-07,
      "p_matlab": 1.2801606017256154e-09,
      "p_python": 9.620600640062293e-07,
      "p_sql": 6.284376862235756e-07,
      "p_typescript": 6.797756033863626e-10
    },
    {
      "text": "for i in [1,2,3,4,5]:\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.57981419629807e-07,
      "p_css": 8.038253423770906e-06,
      "p_html": 7.343030695615063e-06,
      "p_java": 3.806882979393652e-08,
      "p_javascript": 4.608373399719722e-07,
      "p_matlab": 0.9985452119312823,
      "p_python": 0.001427610686059598,
      "p_sql": 9.005344700315455e-06,
      "p_typescript": 1.5338662487897521e-06
    },
    {
      "text": "def minimum_coins_needed(amount):\n    denominations = [1, 2, 5, 10]\n    result = [0 for _ in range(amount+1)]\n \n    # Compute the result for amount = 0\n    result[0] = 0 \n    \n    # Iterate over all amount from 1 to desired\n    for i in range(1, amount+1): \n        # Initialize an inner loop to maximum value (amount)\n        temp_min = float('Inf')\n        for j in range(0, len(denominations)): \n            # Check if coins are less than amount\n            if denominations[j] <= i:\n                temp_min = min(temp_min, result[i-denominations[j]])\n        # Store the final result in amount's index\n        result[i] = temp_min + 1\n        \n    return result[amount]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0078930759337423,
      "p_css": 0.00981090311332657,
      "p_html": 0.00011641011567295923,
      "p_java": 2.6725435190608304e-05,
      "p_javascript": 0.003438640625584297,
      "p_matlab": 0.43724332106714514,
      "p_python": 0.5339684390131357,
      "p_sql": 0.0014642275871883546,
      "p_typescript": 0.006038257109014018
    },
    {
      "text": "import string\nimport random\n\nchars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation\n\ndef generate_password(size=8, chars=chars):\n return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.5414101227075403e-12,
      "p_css": 8.177578537890951e-08,
      "p_html": 1.4406083408736546e-07,
      "p_java": 0.06027261931550276,
      "p_javascript": 2.7081668888309885e-14,
      "p_matlab": 3.6048812264163644e-09,
      "p_python": 1.8186595943492984e-05,
      "p_sql": 0.939708957292945,
      "p_typescript": 7.351539420538905e-09
    },
    {
      "text": "class Customer:\n    '''\n    A class used to store information about a Customer. \n    Attributes:\n    name (str): the customer's name\n    address (str): the customer's address\n    phone_number (str): the customer's phone number\n    email (str): the customer's email\n    '''\n    \n    def __init__(self, name, address, phone_number, email):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email = email\n\n    def display_info(self):\n        print('Name: {}\\nAddress: {}\\nPhone Number: {}\\nEmail: {}'.format(self.name, self.address, self.phone_number, self.email))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010855114481842702,
      "p_css": 0.020516931264649967,
      "p_html": 0.031264654731270686,
      "p_java": 0.014887436676168547,
      "p_javascript": 4.6830698302893324e-05,
      "p_matlab": 8.322548778554443e-06,
      "p_python": 0.91618520365063,
      "p_sql": 0.014092474143494278,
      "p_typescript": 0.0019126348385208995
    },
    {
      "text": "def find_all_occurrences(string, substring): \n    i=-1 \n    indices = [] \n    while True: \n        i = string.find(substring, i + 1) \n        if i == -1: \n            break \n        indices.append(i) \n    return indices \n\nstring = 'Python exercises, PHP exercises, C# exercises'\nsubstring = 'exercises'\n\nprint(find_all_occurrences(string, substring))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.74275120528649e-07,
      "p_css": 7.680812925904576e-05,
      "p_html": 1.7283601928149807e-05,
      "p_java": 0.9955369238454703,
      "p_javascript": 1.73712544296926e-10,
      "p_matlab": 2.3758786570980804e-06,
      "p_python": 0.00419409943474006,
      "p_sql": 0.0001629992181316817,
      "p_typescript": 9.335442980597096e-06
    },
    {
      "text": "def loop_through_list(items):\n    \"\"\"Iterates through a list of items and prints each one\"\"\"\n    for item in items:\n        print(item)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0005641800647853872,
      "p_css": 0.023258562137182415,
      "p_html": 0.0027668878901693267,
      "p_java": 1.961029732874662e-06,
      "p_javascript": 0.7240220769911099,
      "p_matlab": 0.0004940047392911313,
      "p_python": 0.24824670586958986,
      "p_sql": 0.0006068356994066561,
      "p_typescript": 3.8785578732405554e-05
    },
    {
      "text": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015481471683502425,
      "p_css": 0.0028727185231959135,
      "p_html": 0.013572754978039234,
      "p_java": 2.228182769605668e-05,
      "p_javascript": 7.205002155606157e-05,
      "p_matlab": 1.30795524316729e-05,
      "p_python": 0.9713205865236753,
      "p_sql": 0.011665865534102579,
      "p_typescript": 0.00030584832246829556
    },
    {
      "text": "# coding: utf-8\n\nimport sqlite3\nimport os\nimport time\n\nimport bottle\nfrom bottle import default_app, route, view\nfrom bottle import request\nfrom bottle_utils.i18n import I18NPlugin\n#from bottle_utils.i18n import lazy_gettext as _\n\n#todo: refactor so that there is no error in Py3 local deployment and testing\nimport input_number as ip\nfrom dbhelper import initialize_database\nimport hashlib\n\nMOD_PATH = os.path.dirname(os.path.abspath(__file__))\nDB_PATH = os.path.abspath(os.path.join(MOD_PATH, '..', '..', \"lagesonr.db\"))\n\nif not os.path.exists(DB_PATH):\n    initialize_database(DB_PATH)\n\nlagesonrdb = sqlite3.connect(DB_PATH)\n\n#todo: populate list dynamically based on available/selected translations\nLANGS = [\n    ('de_DE', 'Deutsch'),\n    ('en_US', 'English'),\n]\n# ('ar_AR', 'Arab'),\nDEFAULT_LOCALE = 'en_US'\n\n@route('/')\n@view('start_page')\ndef index():\n    \"\"\"1.Seite: Helfer steht am LaGeSo und gibt Nummern ein [_____] \"\"\"\n    return {'entered': []}\n\n@route('/', method='POST')\n@view('start_page')\ndef do_enter():\n    numbers = request.forms.get('numbers')\n    timestamp = time.asctime()\n    numbers = [num.strip() for num in numbers.split('\\n')]\n    result_num = []\n\n    #todo: refactor fingerprint in extra function for better testing\n    usr_agent = str(request.environ.get('HTTP_USER_AGENT'))\n    usr_lang = str(request.environ.get('HTTP_ACCEPT_LANGUAGE'))\n    usr_ip = str(request.remote_addr)\n\n    usr_fingerprint = usr_agent + usr_lang + usr_ip\n    usr_hash = hashlib.md5(usr_fingerprint.encode(\"utf-8\")).hexdigest()\n\n    with lagesonrdb as con:\n        cur = con.cursor()\n        for num in set(numbers):\n            if ip.is_valid_number(num) and ip.is_ok_with_db(\n                    num) and ip.is_valid_user():\n\n                num = str(num).capitalize()\n                query = 'SELECT NUMBER FROM NUMBERS WHERE NUMBER=\"%s\" AND FINGERPRINT=\"%s\"' % (num, usr_hash)\n                if len(list(cur.execute(query))) == 0:\n\n                    insert = 'INSERT INTO NUMBERS(NUMBER, TIME, PLACE, USER, FINGERPRINT) VALUES (\"%s\", \"%s\", \"-\", ' \\\n                             '\"-\", \"%s\")' % (num, timestamp, usr_hash)\n                    cur.execute(insert)\n                    result_num.append(num)\n                else:\n                    result_num.append(\"ALREADY ENTERED BY - %s - %s - %s: %s\" % (usr_ip, usr_agent, usr_lang, num))\n                    #return {'entered': [\"already before - by you!\"], 'timestamp': timestamp}\n            else:\n                result_num.append(\"INVALID INPUT: %s\" % num)\n\n    return {'entered': result_num, 'timestamp': timestamp}\n\n\n@route('/query')\n@view('query_page')\ndef query():\n    return {'result': '-', 'timestamp_first': '-','timestamp_last': '-', 'n': '-'}\n\n\n@route('/query', method='POST')\n@view('query_page')\ndef do_query():\n    number = request.forms.get('number')\n    timestamp_first = '-'\n    timestamp_last = '-'\n    n = '0'\n\n    if ip.is_valid_number(number) and ip.is_ok_with_db(\n            number) and ip.is_valid_user():\n\n        with lagesonrdb as con:\n            cur = con.cursor()\n\n            number = str(number).capitalize()\n            query = 'SELECT TIME FROM NUMBERS WHERE NUMBER=\"%s\" ORDER BY TIME' % number\n            result = list(cur.execute(query))\n            n = len(result)\n            if n > 0:\n                timestamp_first, timestamp_last = result[0][0], result[-1][0]\n            else:\n                timestamp_first = 'NOT FOUND'\n    else:\n        timestamp_first = 'INVALID INPUT'\n\n    return {'result': number, 'timestamp_first': timestamp_first,\n                'timestamp_last': timestamp_last, 'n': n}\n\n\n@route('/about')\n@view('about')\ndef about():\n    pass\n\n@route('/impressum')\n@view('impressum')\ndef impressum():\n    pass\n\n# findet templates im gleichen Verzeichnis\nbottle.TEMPLATE_PATH.append(MOD_PATH)\napp = default_app()\napplication = I18NPlugin(app, langs=LANGS, default_locale=DEFAULT_LOCALE,\n                         domain='messages',\n                         locale_dir=os.path.join(MOD_PATH, 'locales'))\n",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.0005043709937140742,
      "p_css": 0.005004485934662031,
      "p_html": 0.0012184416622405211,
      "p_java": 0.00015523538093896474,
      "p_javascript": 0.0013346098727760357,
      "p_matlab": 0.00813085564571287,
      "p_python": 0.019622128430529562,
      "p_sql": 0.9623711841172595,
      "p_typescript": 0.0016586879621665537
    },
    {
      "text": "class Student:\n    def __init__(self, student_id):\n        self.student_id = student_id\n        self.grades = {}\n\n    def set_grade(self, subject, grade):\n        self.grades[subject] = grade\n\n    def get_grade(self, subject):\n        return self.grades[subject]\n\n    def get_average_grade(self):\n        total = sum(self.grades.values())\n        subjects = len(self.grades)\n        return total / subjects",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00031206839981150225,
      "p_css": 0.0541003349926325,
      "p_html": 0.07947790211315289,
      "p_java": 4.5071367455164965e-05,
      "p_javascript": 8.056228870235394e-05,
      "p_matlab": 1.5802666720554774e-05,
      "p_python": 0.7685287881925446,
      "p_sql": 0.09629856226770668,
      "p_typescript": 0.0011409077112736678
    },
    {
      "text": "def encode_message(message, a, b):\n    encoded_message = \"\"\n    for char in message:\n        # encode each character\n        x = (ord(char) - 97) * a + b\n        # wrap around if x is greater than 26\n        x = x % 26\n        # convert back to character\n        encoded_message += chr(x + 97)\n    return encoded_message\n\n# Main\nif __name__ == \"__main__\":\n    message = \"Hello world\"\n    a = 3  # a and b must be relatively prime\n    b = 5\n    print(encode_message(message, a, b))  # Khoor zruog",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003091634522417486,
      "p_css": 0.03976790120104572,
      "p_html": 0.006170862004300855,
      "p_java": 2.6868688312407435e-06,
      "p_javascript": 0.020224093001327815,
      "p_matlab": 0.002192018742348393,
      "p_python": 0.8707657886010215,
      "p_sql": 0.011797973948191771,
      "p_typescript": 0.04598704111051528
    },
    {
      "text": "\"\"\"\nDesign a function in Python to generate a random password\n\"\"\"\n\nimport string\nimport random\n\ndef generate_password(length=16):\n    # list of possible characters for the password\n    characters = string.ascii_letters + string.punctuation + string.digits\n    \n    # generate a random password\n    password = ''.join(random.choice(characters) for i in range(length))\n    \n    # return the random password\n    return password\n\n# generate a random password\nrandom_password = generate_password()\n\n# print the random password\nprint(random_password)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.0680337329197337e-08,
      "p_css": 1.4993332477643628e-07,
      "p_html": 1.4076891444861108e-07,
      "p_java": 1.0886261765811643e-06,
      "p_javascript": 8.547750971738067e-08,
      "p_matlab": 2.5677733217877727e-08,
      "p_python": 2.321479056866184e-05,
      "p_sql": 0.9999747287913682,
      "p_typescript": 5.552540668982459e-07
    },
    {
      "text": "def solve_sudoku(board): \n \n    find = find_empty_location(board) \n    if not find: \n        return True\n    else: \n        row, col = find \n  \n    for i in range(1,10): \n        if is_valid(board, i, (row, col)): \n            board[row][col] = i \n  \n            if solve_sudoku(board): \n                return True\n  \n            # Undo the current cell for backtracking \n            board[row][col] = 0\n  \n    return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016962501280146994,
      "p_css": 0.005433305056380005,
      "p_html": 0.0033271041049504945,
      "p_java": 6.458470597693948e-05,
      "p_javascript": 0.0003856864102560638,
      "p_matlab": 0.07242766116430092,
      "p_python": 0.9152392669274687,
      "p_sql": 0.0005481590617659027,
      "p_typescript": 0.0008779824408861733
    },
    {
      "text": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom django.core.paginator import Paginator\n\n# Create your views here.\ndef get_user_records(request):\n    page_num = request.GET.get('page', 1)\n    page_size = int(request.GET.get('page_size', 10))\n\n    users = User.objects.all().order_by('user_id')\n    paginator = Paginator(users, page_size)\n    page_data = paginator.page(page_num)\n    response_data = {\n        'data': [\n            {\n                'user_id': user.user_id,\n                'first_name': user.first_name,\n                'last_name': user.last_name,\n                'age': user.age,\n                'email': user.email\n            } for user in page_data\n        ]\n    }\n    return JsonResponse(response_data)",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.9590554866166153,
      "p_css": 0.04062009986014375,
      "p_html": 1.1253742841227846e-06,
      "p_java": 2.5177187260512226e-06,
      "p_javascript": 4.2105324338981285e-06,
      "p_matlab": 1.2822373141983527e-06,
      "p_python": 0.00026835768149409043,
      "p_sql": 7.625511861270664e-06,
      "p_typescript": 3.929446712731705e-05
    },
    {
      "text": "def maxMinDifference(arr):\n    return max(arr)-min(arr)\n\nresult = maxMinDifference([3, 4, 7, 8, 12])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.537519567134057e-06,
      "p_css": 0.000267522533069614,
      "p_html": 4.703522038251268e-06,
      "p_java": 5.862158481276114e-07,
      "p_javascript": 1.7682195174994183e-06,
      "p_matlab": 0.00012611695119600077,
      "p_python": 0.9995898727575762,
      "p_sql": 2.389338899516857e-06,
      "p_typescript": 3.5029422877621324e-06
    },
    {
      "text": "def larger_than_num(nums, num_to_compare):\n  count = 0\n  for num in nums:\n    if num > num_to_compare:\n      count += 1\n  \n  return count\n\nprint(larger_than_num(nums, num_to_compare)) # 3",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.464321358630091e-07,
      "p_css": 9.305639126992641e-10,
      "p_html": 3.4164387797324887e-07,
      "p_java": 1.020543944098223e-08,
      "p_javascript": 6.656453095112437e-08,
      "p_matlab": 0.993252672232964,
      "p_python": 0.006746126494217153,
      "p_sql": 4.636949177258208e-07,
      "p_typescript": 1.7180135280513838e-07
    },
    {
      "text": "for i in range(10, 0, -1):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.9656415838442685e-12,
      "p_css": 9.24345959966392e-13,
      "p_html": 1.3906781818842273e-10,
      "p_java": 2.382126516031233e-13,
      "p_javascript": 1.6979731962244342e-13,
      "p_matlab": 0.9998352021961047,
      "p_python": 0.00016479765204655716,
      "p_sql": 3.2524040295583e-14,
      "p_typescript": 5.450371823541461e-12
    },
    {
      "text": "class Fraction:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def __add__(self, other):\n        return Fraction(self.a * other.b + other.a * self.b, self.b * other.b)\n    \n    def __sub__(self, other):\n        return Fraction(self.a * other.b - other.a * self.b, self.b * other.b)\n   \n    def __mul__(self, other):\n        return Fraction(self.a * other.a , self.b * other.b)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000915807375842714,
      "p_css": 0.020640361314302736,
      "p_html": 0.033572338383882974,
      "p_java": 4.3715314254988064e-05,
      "p_javascript": 0.004814074959486151,
      "p_matlab": 5.3308346182668766e-05,
      "p_python": 0.8745740368447684,
      "p_sql": 0.06504713305444948,
      "p_typescript": 0.0003392244068298972
    },
    {
      "text": "def evaluate_expr(expr):\n # Reverse the expression \n expr = expr[::-1] \n  \n # Stack to store integer values. \n values = [] \n  \n # Stack to store operators. \n ops = [] \n  \n # Traverse the given expression. \n i = 0\n while i < len(expr): \n   # Current character is a whitespace, skip it. \n   if expr[i] == ' ': \n     i += 1\n     continue\n   # Current character is an opening  \n   # brace, push it to 'ops' \n   elif expr[i] == '(': \n     ops.append(expr[i]) \n   # Current character is a number, push  \n   # it to stack for numbers. \n   elif expr[i].isdigit(): \n     val = 0\n     # There may be more than one \n     # digits in number. \n     while (i < len(expr) and\n            expr[i].isdigit()): \n       val = (val * 10) + int(expr[i]) \n       i += 1\n     values.append(val) \n   # Closing brace encountered, solve  \n   # entire brace. \n   elif expr[i] == ')': \n     while (not ops[-1] == '('): \n       val2 = values.pop() \n       val1 = values.pop() \n       op = ops.pop() \n  \n       values.append(str(eval(val1 + op + val2))) \n     # pop opening bracket. \n     ops.pop() \n   # Current character is an operator. \n   else: \n     # While top of 'ops' has same or  \n     # greater precedence to current  \n     # token, which is an operator. \n     # Apply operator on top of 'ops'  \n     # to top two elements in values stack. \n     while(len(ops) != 0 and\n           not ops[-1] == '(' and\n           not isHigherPrecedence(ops[-1], expr[i])): \n  \n       val2 = values.pop() \n       val1 = values.pop() \n       op = ops.pop() \n  \n       values.append(str(eval(val1 + op + val2))) \n     # Push current token to 'ops'. \n     ops.append(expr[i]); \n  \n   i += 1\n  \n # Entire expression has been parsed at this \n # point, apply remaining ops to remaining \n # values. \n while len(ops) != 0: \n     val2 = values.pop() \n     val1 = values.pop() \n     op = ops.pop() \n  \n     values.append(str(eval(val1 + op + val2))) \n  \n # Top of 'values' contains result, return it. \n return values[-1]\n\ndef isHigherPrecedence(op1, op2): \n if (op1 == '+' or op1 == '-') and (op2 == '*' or op2 == '/'): \n   return False\n else: \n   return True\n\nif __name__ == \"__main__\": \n expr = \"2-(8-3)\"\n print(evaluate_expr(expr))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00042126174367566866,
      "p_css": 0.05353178530241937,
      "p_html": 0.006599551073284056,
      "p_java": 0.001746241953728748,
      "p_javascript": 0.011793757865209031,
      "p_matlab": 0.0016276448436845453,
      "p_python": 0.16112493175042508,
      "p_sql": 0.008160680211970318,
      "p_typescript": 0.7549941452556032
    },
    {
      "text": "def identify_characters(s): \n    characters = []\n        \n    for char in s:\n        if char not in characters:\n            characters.append(char)\n        \n    return characters\n \nprint(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001472043045579715,
      "p_css": 0.019393820836262652,
      "p_html": 0.00673726621556649,
      "p_java": 4.561996613688475e-05,
      "p_javascript": 0.0008172897914635076,
      "p_matlab": 0.17490872280107264,
      "p_python": 0.760963279265941,
      "p_sql": 0.034073151183484536,
      "p_typescript": 0.0015888068944925951
    },
    {
      "text": "import ast\nimport logging\n\nfrom pygount import SourceAnalysis\n\n# Logging configuration\nlogging.basicConfig(level=logging.INFO)\n\n# Input code\ncode = \"\"\"\ndef find_bugs(code):\n    \n    analyzed_code = SourceAnalysis.from_string(language='python', text=code)\n    bugs = []\n\n    for function in code: \n        if 'fopen' in function.body:\n            bugs.append('Got a potential vulnerability!')\n\n    return bugs\n\"\"\"\n\n# Parsed syntax tree\ntree = ast.parse(code)\n\n# Find all functions\nfor node in ast.walk(tree):\n    if isinstance(node, ast.FunctionDef):\n        # Get the code for the function\n        function_code = ast.get_source_segment(code, node)\n        bugs = find_bugs(function_code)\n        for bug in bugs:\n            logging.warning(bug)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.04107874580452353,
      "p_css": 0.002631386779757617,
      "p_html": 0.001779038929556155,
      "p_java": 1.186517469015861e-05,
      "p_javascript": 0.8273710534734091,
      "p_matlab": 0.005899475585380249,
      "p_python": 0.0003214076417058282,
      "p_sql": 7.323961065637999e-05,
      "p_typescript": 0.120833787000321
    },
    {
      "text": "def words_count(text):\n words_dict = {}\n for word in text.split(' '):\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n return words_dict\n\nwords_dict = words_count(\"A quick brown fox jumps over the lazy dog\")\nprint(words_dict)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.039339889070664075,
      "p_css": 0.30929606556002703,
      "p_html": 0.019649439904904642,
      "p_java": 0.00033681010173332136,
      "p_javascript": 0.00465914158637949,
      "p_matlab": 0.021300446301416216,
      "p_python": 0.5815461250748123,
      "p_sql": 0.005902902022855404,
      "p_typescript": 0.017969180377207582
    },
    {
      "text": "def max_rect_area(matrix):\n\n    max_area = 0\n\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n\n            if matrix[row][col] == 0: # if current element is 0, skip\n                continue\n\n            # calculate the maximum possible rectangle area\n            # considering (row, col) as one of the vertices \n            min_column = len(matrix[0])\n            for r in range(row, len(matrix)):\n                min_column = min(min_column, matrix[r][col])\n\n            # calculate area of the rectangle \n            # composed of 1s belonging with these limits \n            area = min_column*(r - row + 1)\n\n            # update maximum area so far \n            max_area = max(max_area, area)\n\n    return max_area\n\n# Main Program \nmatrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]\nresult = max_rect_area(matrix) \n\nprint(\"The maximum rectangle area is {:d}\".format(result))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.00025690813836475436,
      "p_css": 0.00012447601009736835,
      "p_html": 5.773292514462991e-05,
      "p_java": 3.3070026880951234e-06,
      "p_javascript": 3.7413307767889904e-05,
      "p_matlab": 0.00012390898893699674,
      "p_python": 0.9981097560542449,
      "p_sql": 0.00035897365529542367,
      "p_typescript": 0.0009275239174599525
    },
    {
      "text": "import os\nimport shutil\n\n# define a function to move file to designated folder \ndef move_file (src_path, dest_path):\n    shutil.move(src_path, dest_path)\n    print(\"File moved from\", src_path, \"to\", dest_path)\n\n# define source and destination \nsrc_dir = \"./Unfiled_Documents/\"\ndest_dir = \"./Invoices_and_Receipts/\"\n\n# iterate through the files\nfor root, dirs, files in os.walk(src_dir):\n    for file in files: \n        # check the file type \n        filename, file_extension = os.path.splitext(file)\n        if file_extension in ['.pdf', '.odt', '.docx']:\n            # move the file \n            src = os.path.join(root, file)\n            dest = dest_dir + 'invoice_or_receipt' + file_extension\n            move_file(src, dest)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.02124204709655407,
      "p_css": 0.03717172688116293,
      "p_html": 0.000729758695168715,
      "p_java": 1.396613687260794e-07,
      "p_javascript": 0.036979981136407256,
      "p_matlab": 0.0006990358116693784,
      "p_python": 0.0048913502757012,
      "p_sql": 0.8737420155145988,
      "p_typescript": 0.02454394492736894
    },
    {
      "text": "def remove_nonalphanum(text):\n  new_string = \"\"\n  for char in text:\n    if char.isalnum():\n      new_string += char\n  return new_string\n\ncleaned_string = remove_nonalphanum(text)\nprint(cleaned_string) #prints \"ThisisaStringwithymbols\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002500091354569082,
      "p_css": 0.012536314619560666,
      "p_html": 0.0006374267502896699,
      "p_java": 3.63549352854813e-06,
      "p_javascript": 0.0003666415679086221,
      "p_matlab": 0.0026334839041233246,
      "p_python": 0.9726138618210743,
      "p_sql": 0.00584100234876696,
      "p_typescript": 0.002867542140178539
    },
    {
      "text": "# Initializing the list\nlist1 = [5, 6, 10, -9, 3, 21]\n\n# Maximum and Minimum in a List\n\nmax = list1[0]\nmin = list1[0]\n\n# Print all the list elements\nfor i in range(0, len(list1)):\n    if list1[i]>max:\n        max = list1[i]\n    if list1[i]<min:\n        min = list1[i]\n\nprint(\"The max value is:\", max)\nprint(\"The min value is:\", min)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0007907617983454922,
      "p_css": 0.0064139301774577,
      "p_html": 0.003677283693770915,
      "p_java": 7.260699405962513e-05,
      "p_javascript": 0.002373095364367057,
      "p_matlab": 0.8181706722385964,
      "p_python": 0.14339321682209089,
      "p_sql": 0.011691450381051254,
      "p_typescript": 0.01341698253026068
    },
    {
      "text": "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def get_area(self):\n        s = (self.side1 + self.side2 + self.side3) / 2.0\n        area = (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5\n        return area\n\nif __name__ == '__main__':\n    triangle = Triangle(3, 4, 5)\n    print(triangle.get_area())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007086071303290217,
      "p_css": 0.0204097107019713,
      "p_html": 0.0644110850520919,
      "p_java": 8.076715807190662e-05,
      "p_javascript": 0.0003735603137594823,
      "p_matlab": 0.0001645317832381718,
      "p_python": 0.8722282949115684,
      "p_sql": 0.03996926340684732,
      "p_typescript": 0.0016541795421224049
    },
    {
      "text": "names = [\"Taylor\", \"Hilton\", \"John\", \"Jack\", \"Justin\"]\n\nsearch_input = input(\"Enter a name to search: \")\n\nfiltered_names = []\nfor name in names:\n if search_input in name:\n  filtered_names.append(name)\nprint(filtered_names)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.260961132056824e-06,
      "p_css": 3.1361820172373254e-05,
      "p_html": 1.819178477810896e-05,
      "p_java": 0.9995852314181511,
      "p_javascript": 6.920012567734092e-11,
      "p_matlab": 0.0003062447307901433,
      "p_python": 2.5188139481133247e-05,
      "p_sql": 6.877662399590564e-07,
      "p_typescript": 3.083331005480293e-05
    },
    {
      "text": "def sort_list_of_tuples(list_of_tuples, key, reverse=False):\n    '''This function sorts a list of tuples based on the specified key\n    in ascending or descending order\n\n    Parameters: \n       list_of_tuples (list): list of tuples\n       key: the index of the tuple that should be used to sort\n       reverse (bool): flag to decide sorting order, \n                        False for ascending, True for descending\n\n    Returns:\n        list: A sorted list of tuples\n    '''\n\n    # sort using specified key\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[key], reverse=reverse)\n\n    return sorted_list\n\nlist_of_tuples = [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]\nkey = 2\n\n# Sort in ascending order\nsorted_list_asc = sort_list_of_tuples(list_of_tuples, key, reverse=False)\n\n# Sort in descending order\nsorted_list_desc = sort_list_of_tuples(list_of_tuples, key, reverse=True)\n\nprint(\"Sorted list in ascending order:\", sorted_list_asc)\nprint(\"Sorted list in descending order:\", sorted_list_desc)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 3.859611078327916e-05,
      "p_css": 0.0003620476860062517,
      "p_html": 0.0002090787762816142,
      "p_java": 8.093568847587995e-06,
      "p_javascript": 0.9888656979705677,
      "p_matlab": 0.000601049162418805,
      "p_python": 0.00882044714630323,
      "p_sql": 0.0002016133742247172,
      "p_typescript": 0.0008933762045666973
    },
    {
      "text": "import random\nimport string\n\ndef  generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for x in range(size))\n\nprint(generate_password())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 6.204420145985873e-12,
      "p_css": 9.76700473855543e-09,
      "p_html": 4.4894868787437334e-08,
      "p_java": 8.755852702256554e-05,
      "p_javascript": 9.921255309240854e-14,
      "p_matlab": 2.916213578787474e-09,
      "p_python": 4.0115823835153425e-06,
      "p_sql": 0.9999083709322397,
      "p_typescript": 1.373963702911761e-09
    },
    {
      "text": "# Python program to find all possible subset sums\n\ndef find_subset_sums(arr):\n    sums = set()\n    for i in range(2**len(arr)):\n        csum = 0\n        for j in range(len(arr)):\n            if i & (1<<j):\n                csum += arr[j]\n        sums.add(csum)\n    return sums",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.11502922210007284,
      "p_css": 1.1218084460105893e-05,
      "p_html": 2.7861611323410435e-05,
      "p_java": 1.9652149059467508e-06,
      "p_javascript": 3.256098028524013e-06,
      "p_matlab": 0.755771073944483,
      "p_python": 0.1291299906943504,
      "p_sql": 2.2771839880926074e-05,
      "p_typescript": 2.6404124949804965e-06
    },
    {
      "text": "d = {'Name': 'John', 'Age': 20, 'Location': 'New York'}\n\ndef print_dict(d):\n    formatted_str = ''\n    for key, value in d.items():\n        if formatted_str != '':\n            formatted_str += ', '\n        formatted_str += '{}={}'.format(key, value)\n    print(formatted_str)\n\nprint_dict(d) # Output: Name=John, Age=20, Location=New York",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 3.4187435769925024e-05,
      "p_css": 0.9991850342723737,
      "p_html": 0.00014453403328925932,
      "p_java": 1.8199300265611196e-05,
      "p_javascript": 5.333284034549794e-07,
      "p_matlab": 0.0006116192979189819,
      "p_python": 1.6072650242489818e-06,
      "p_sql": 3.4288407091531447e-06,
      "p_typescript": 8.562262454433789e-07
    },
    {
      "text": "import requests\n \nurl = 'http://example.com'\n \nr = requests.get(url)\nhtml = r.text\n \nwith open('page.html', 'w') as f:\n f.write(html)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 8.989634557923042e-16,
      "p_css": 3.1811804634463975e-06,
      "p_html": 0.9952996343968178,
      "p_java": 0.004696614466941745,
      "p_javascript": 2.562613381334913e-09,
      "p_matlab": 3.1698308548458716e-11,
      "p_python": 2.626963316297345e-07,
      "p_sql": 4.689958634345959e-09,
      "p_typescript": 2.9997517406809576e-07
    },
    {
      "text": "my_dict = {'Apple':1, 'Strawberry':4, 'Banana':3, 'Grapes':2}\n\nsorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}\n\nprint(sorted_dict)\n\n# Output: {'Apple': 1, 'Grapes': 2, 'Banana': 3, 'Strawberry': 4}",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.000827242571787907,
      "p_css": 0.9253033812959597,
      "p_html": 0.002539711506943275,
      "p_java": 3.765758257856582e-05,
      "p_javascript": 0.0009285500326637518,
      "p_matlab": 0.0002466909150224771,
      "p_python": 0.06995473271641912,
      "p_sql": 9.475393222497233e-05,
      "p_typescript": 6.727944640042593e-05
    },
    {
      "text": "def hello_world_lines(n):\n    for i in range(n):\n        print(\"Hello World!\")",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.5917285746191364,
      "p_css": 1.940990668895525e-09,
      "p_html": 9.115876389146547e-07,
      "p_java": 4.941528734908687e-26,
      "p_javascript": 1.3079460818035994e-05,
      "p_matlab": 0.0006060028999945777,
      "p_python": 0.4076514103250894,
      "p_sql": 1.58109253877462e-08,
      "p_typescript": 3.3554066929066225e-09
    },
    {
      "text": "def double_array(arr):\n    return [element * 2 for element in arr]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.100921335418994e-12,
      "p_css": 1.7206678023438883e-11,
      "p_html": 1.5072068654343634e-12,
      "p_java": 2.3829479999277507e-12,
      "p_javascript": 3.1737380128336937e-12,
      "p_matlab": 0.9999999926261642,
      "p_python": 7.330217469118932e-09,
      "p_sql": 1.3699061741487466e-17,
      "p_typescript": 1.3246805397314058e-11
    },
    {
      "text": "# Importing the necessary module\nimport schedule\n\n# Defining the job\ndef job():\n    print(\"Job executed!\")\n\n# Scheduling the job to run every 5 minutes\nschedule.every(5).minutes.do(job)\n\n# Running the job\nwhile True:\n    schedule.run_pending()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.06612381924197559,
      "p_css": 0.1265155969904705,
      "p_html": 0.027976948148263625,
      "p_java": 0.0006224536036179478,
      "p_javascript": 0.04327356404581502,
      "p_matlab": 0.003818080814928387,
      "p_python": 0.23822537603001984,
      "p_sql": 0.006900035961054596,
      "p_typescript": 0.4865441251638546
    },
    {
      "text": "def generate_infinite_sequence(num):\n    while True:\n        yield num\n\nfor n in generate_infinite_sequence(5):\n    print(n)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.439269432539627e-09,
      "p_css": 1.540697597514214e-12,
      "p_html": 1.088195915011979e-08,
      "p_java": 2.3094878842792944e-10,
      "p_javascript": 4.839738594449183e-10,
      "p_matlab": 0.9999993642553273,
      "p_python": 6.18376352488633e-07,
      "p_sql": 1.0094023282910205e-09,
      "p_typescript": 2.3212258464465183e-09
    },
    {
      "text": "import socket\n\nHOST, PORT = '', 8888\n\nlisten_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nlisten_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nlisten_socket.bind((HOST, PORT))\nlisten_socket.listen(1)\n\nprint('Serving HTTP on port %s ...' % PORT)\nwhile True:\n    client_connection, client_address = listen_socket.accept()\n    request = client_connection.recv(1024)\n    print(request)\n\n    http_response = \"\"\"\\\nHTTP/1.1 200 OK\n\nHello, World!\n\"\"\"\n    client_connection.sendall(http_response)\n    client_connection.close()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.17493560090039406,
      "p_css": 0.043079091339961746,
      "p_html": 0.04066891964870531,
      "p_java": 5.994494202182515e-06,
      "p_javascript": 0.014619615273270816,
      "p_matlab": 0.00133395028912723,
      "p_python": 0.709402680598043,
      "p_sql": 0.004367979502007798,
      "p_typescript": 0.011586167954287895
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# Fetch page\npage = requests.get(url)\n\n# Parse HTML into BeautifulSoup object\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Extract required data\ntitle = soup.title.string\ndescription = soup.find(attrs={'name': 'description'}).get('content')\n\n# Print out the data\nprint('Title:', title)\nprint('Description:', description)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 3.540828776388562e-09,
      "p_css": 0.11016955971217612,
      "p_html": 0.8898228668258163,
      "p_java": 2.8371322720028173e-06,
      "p_javascript": 1.1263685137183939e-08,
      "p_matlab": 4.5979255218299153e-10,
      "p_python": 1.589519843067412e-06,
      "p_sql": 2.397580603686371e-06,
      "p_typescript": 7.339649822688808e-07
    },
    {
      "text": "from flask import Flask, request\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/wikipedia', methods=['GET'])\ndef search_wikipedia():\n query = request.args.get('query')\n response = requests.get(\n 'https://en.wikipedia.org/w/api.php',\n params={\n 'action': 'query',\n 'list': 'search',\n 'format': 'json',\n 'srsearch': query\n}).json()\n\n return response\n\nif __name__ == '__main__':\n app.run()",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 9.144699464543727e-06,
      "p_css": 0.9991738419534318,
      "p_html": 2.8325276176316412e-05,
      "p_java": 6.524818585783674e-07,
      "p_javascript": 2.7170341317630134e-06,
      "p_matlab": 4.835309448679866e-07,
      "p_python": 0.0006036558716109427,
      "p_sql": 0.00014423686322458676,
      "p_typescript": 3.694228915649668e-05
    },
    {
      "text": "def findMax(arr):\n    max_number = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_number:\n            max_number = arr[i]\n    return max_number\n\narr = [1, 4, 9, 3, 6, 5]\nmax_number = findMax(arr)\nprint(\"The maximum element in the array is:\", max_number)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.475518165227948e-06,
      "p_css": 7.142684327490119e-06,
      "p_html": 3.3933559525119457e-06,
      "p_java": 5.946337461708397e-07,
      "p_javascript": 4.069079737959112e-06,
      "p_matlab": 0.9909850762135008,
      "p_python": 0.008976811931519934,
      "p_sql": 1.238143484198742e-07,
      "p_typescript": 1.6312768701568462e-05
    },
    {
      "text": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \nnum = 7\nresult = factorial(num)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.978369629269536e-06,
      "p_css": 1.8451377277833114e-06,
      "p_html": 6.722336303081609e-06,
      "p_java": 2.210238695878772e-07,
      "p_javascript": 4.573157708040584e-06,
      "p_matlab": 0.0006114038777263996,
      "p_python": 0.9993563844114665,
      "p_sql": 1.1944145302163723e-05,
      "p_typescript": 2.927540267114777e-06
    },
    {
      "text": "class Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, number1, number2):\n        return number1 + number2\n\n    def subtract(self, number1, number2):\n        return number1 - number2\n\n    def multiply(self, number1, number2):\n        return number1 * number2\n\n    def divide(self, number1, number2):\n        return number1 / number2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011143929650665558,
      "p_css": 0.008582167439514886,
      "p_html": 0.0050719334513374065,
      "p_java": 0.0007966700240418286,
      "p_javascript": 0.001152734251103426,
      "p_matlab": 0.00019524677278692657,
      "p_python": 0.964574235062404,
      "p_sql": 0.004696306926828088,
      "p_typescript": 0.003786776421317825
    },
    {
      "text": "import requests\nimport json\n\nurl = 'https://random-places.p.rapidapi.com/v1/get'\n\nquerystring = {'language': 'en-US', 'size': '1', 'types': 'city'}\n\nheaders = {\n'x-rapidapi-host': 'random-places.p.rapidapi.com',\n'x-rapidapi-key': <Your RapidAPI Key>\n}\n\nresponse = requests.request('GET', url, headers=headers, params=querystring)\n\ndata = json.loads(response.text)\n\ndestination = data['data'][0]\n\nprint(f'Destination: {destination[\"name\"]}, {destination[\"country\"]}')\nprint(f'Coordinates: {destination[\"lat\"]}, {destination[\"lng\"]}')",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 8.553299392620851e-10,
      "p_css": 0.988532265613699,
      "p_html": 0.0001798283261932248,
      "p_java": 0.00986998349826667,
      "p_javascript": 1.3219401528436287e-06,
      "p_matlab": 5.776318836417498e-07,
      "p_python": 0.0012528800368757887,
      "p_sql": 0.00015169267126511517,
      "p_typescript": 1.1449426333872824e-05
    },
    {
      "text": "def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n\nif __name__ == '__main__':\n    a = 4\n    b = 12\n    result = gcd(a, b) \n    print (\"GCD of 4 and 12 is \" + str(result))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0007938318973504953,
      "p_css": 0.015971447373839223,
      "p_html": 0.005747043135765387,
      "p_java": 0.0005478915982081885,
      "p_javascript": 0.008862506508670384,
      "p_matlab": 0.6302078149469993,
      "p_python": 0.32607699393152406,
      "p_sql": 0.002560181529526934,
      "p_typescript": 0.009232289078116017
    },
    {
      "text": "def to_dict(words):\n    result = {}\n    for word in words:\n        result[word] = 1\n    return result\n\nresult = to_dict([\"Hello\", \"World\", \"Welcome\"])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011707911356199174,
      "p_css": 0.0009160295781366213,
      "p_html": 8.096521030369957e-05,
      "p_java": 2.6223868547736624e-12,
      "p_javascript": 8.427986998041218e-05,
      "p_matlab": 2.776095843879817e-07,
      "p_python": 0.9971661913865995,
      "p_sql": 0.0005799461831554764,
      "p_typescript": 1.51902399736412e-06
    },
    {
      "text": "def sort_strings(list_of_strings):\n    sorted_list = sorted(list_of_strings, key=lambda str: str.lower())\n    return sorted_list\n\nresult = sort_strings(['apple', 'orange', 'pear'])\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.000115173072887e-05,
      "p_css": 0.007333574402050435,
      "p_html": 0.00047690309253077355,
      "p_java": 1.160080282365571e-05,
      "p_javascript": 0.0003459337987933742,
      "p_matlab": 4.780104017039337e-06,
      "p_python": 0.9912920771356625,
      "p_sql": 0.00045223439162157776,
      "p_typescript": 3.2895120769948576e-05
    },
    {
      "text": "def reverseArray(list): \n    start = 0\n    end = len(list) - 1\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n    return list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00015534648674753648,
      "p_css": 0.0011747276230070114,
      "p_html": 0.0006479494404079417,
      "p_java": 4.494471859219831e-05,
      "p_javascript": 0.00025069212559724984,
      "p_matlab": 0.00032104081836805727,
      "p_python": 0.9869092955184504,
      "p_sql": 0.009566182790723658,
      "p_typescript": 0.0009298204781058081
    },
    {
      "text": "def sum_odd_numbers(n):\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n\nodd_sum = sum_odd_numbers(10)\nprint(odd_sum)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.496353925165133e-05,
      "p_css": 2.962204693807161e-05,
      "p_html": 0.00043421129436890246,
      "p_java": 0.0003944130444959871,
      "p_javascript": 1.2042849641517057e-05,
      "p_matlab": 0.9420866150665059,
      "p_python": 0.05690659681079992,
      "p_sql": 5.88834038062106e-05,
      "p_typescript": 4.265194419176804e-05
    },
    {
      "text": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Create\ndata = {'Size': [500], \n'Rooms': [4]}\n\ndf = pd.DataFrame(data)\n\n# Train\nX = df[['Size','Rooms']] \nY = df['Price'] \n  \nreg = LinearRegression().fit(X, Y) \n  \n# Predict\nreg.predict([[500,4]]) # Predicted price: 1715.667543",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0011974990819696035,
      "p_css": 0.770017280701803,
      "p_html": 0.008014238768542346,
      "p_java": 9.408688813438066e-05,
      "p_javascript": 9.891109143072516e-05,
      "p_matlab": 0.0002636072139065466,
      "p_python": 0.21251953787156644,
      "p_sql": 0.0018455986604158667,
      "p_typescript": 0.0059492397222309515
    },
    {
      "text": "import random\n\ndef generate_hex_numbers(n): \n    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] \n    return hex_numbers\n\nprint(generate_hex_numbers(10))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.2634846330193e-06,
      "p_css": 2.650588624768304e-06,
      "p_html": 5.811664465471179e-06,
      "p_java": 1.5727187647972293e-08,
      "p_javascript": 1.1340566359868302e-07,
      "p_matlab": 0.00010847034783072906,
      "p_python": 0.9997413468851819,
      "p_sql": 0.000136829216045104,
      "p_typescript": 4.986803676724425e-07
    },
    {
      "text": "def two_sum(lst, x):\n for i in range(len(lst)):\n  for j in range(i+1, len(lst)):\n   if lst[i] + lst[j] == x:\n    return True \n return False\n\nlist = [1, 3, 7, 4, 5]\nX = 12\n\ntwo_sum(list, X) # True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.375714310069258e-06,
      "p_css": 1.0781478018172089e-06,
      "p_html": 1.1850746734012928e-05,
      "p_java": 5.894924559205082e-08,
      "p_javascript": 1.2654526802843555e-07,
      "p_matlab": 0.0004563852686551218,
      "p_python": 0.9995228961590809,
      "p_sql": 4.535841171891696e-06,
      "p_typescript": 6.926277328339204e-07
    },
    {
      "text": "import random\nimport string\n\ndef random_string(stringLength=8):\n    letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.choice(letters_and_numbers) for i in range(stringLength))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.8171403748808156e-12,
      "p_css": 3.4514205922065756e-08,
      "p_html": 7.656097660550391e-08,
      "p_java": 0.11206089998924089,
      "p_javascript": 8.591753485210411e-15,
      "p_matlab": 6.608487761480259e-09,
      "p_python": 5.0932508785231224e-05,
      "p_sql": 0.8878880441759209,
      "p_typescript": 5.6405570047777994e-09
    },
    {
      "text": "def check_anagrams(s1, s2):\n    s1 = s1.lower().replace(\" \", \"\")\n    s2 = s2.lower().replace(\" \", \"\")\n    return sorted(s1) == sorted(s2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0019815297569073355,
      "p_css": 0.017388415603067593,
      "p_html": 0.00607200757466212,
      "p_java": 0.0003995164282772657,
      "p_javascript": 0.0020253821436466814,
      "p_matlab": 0.0005362874070688611,
      "p_python": 0.9657461079233896,
      "p_sql": 0.003127643878449249,
      "p_typescript": 0.002723109284531271
    },
    {
      "text": "def days_between_dates(date1, date2):\n    \"\"\"\n    Calculate the number of days between two dates\n    date1: date object\n    date2: date object\n    \"\"\"\n    time_diff = date2 - date1\n    return time_diff.days\n\ndays_between_dates(date(2020,1,2), date(2020,2,19))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001760923687872379,
      "p_css": 0.035959256107923374,
      "p_html": 0.002733472267926652,
      "p_java": 0.0034174901809331686,
      "p_javascript": 0.004165447907427536,
      "p_matlab": 0.00016963931933837074,
      "p_python": 0.9253622264194843,
      "p_sql": 0.0029520589080068854,
      "p_typescript": 0.02347948520108734
    },
    {
      "text": "def caesarCipherEncrypt(str, key): \n    encrypted_str = \"\" \n  \n    # traverse text \n    for i in range(len(str)): \n        char = str[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            encrypted_str += chr((ord(char) + key-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            encrypted_str += chr((ord(char) + key - 97) % 26 + 97) \n  \n    return encrypted_str \n  \n# Driver code \nresult = caesarCipherEncrypt(\"Hello, World!\", 5) \nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010291213431152704,
      "p_css": 0.0002962909536394371,
      "p_html": 0.00019890767258682297,
      "p_java": 4.261653678659951e-09,
      "p_javascript": 0.0005770244362860865,
      "p_matlab": 3.0851706490475984e-05,
      "p_python": 0.99726922880124,
      "p_sql": 0.000555494201815348,
      "p_typescript": 4.307662317253391e-05
    },
    {
      "text": "def generateFibo(length):\n    fibo = [0, 1]\n    for i in range(2, length):\n        fibo.append(fibo[i-2] + fibo[i-1])\n    return fibo\n\nif __name__ == '__main__':\n    print(generateFibo(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.339376277225817e-07,
      "p_css": 6.548513612469654e-07,
      "p_html": 5.71506606918853e-07,
      "p_java": 2.1616798086421725e-08,
      "p_javascript": 4.084085987971955e-07,
      "p_matlab": 0.9923665742012471,
      "p_python": 0.007608383192973987,
      "p_sql": 2.308439738221727e-05,
      "p_typescript": 6.788740416624808e-08
    },
    {
      "text": "sum = 455\n  \ntotal = 0\nfor i in range(pixel1, pixel2):\n    if i % 2 != 0:\n        total += i\nprint('sum =', total)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.5702713454274418e-05,
      "p_css": 2.3003740638623842e-05,
      "p_html": 0.00046692676825745683,
      "p_java": 6.769947237669346e-05,
      "p_javascript": 4.6676226543691634e-06,
      "p_matlab": 0.7299652676508218,
      "p_python": 0.2693796544272126,
      "p_sql": 3.582671304385708e-05,
      "p_typescript": 3.12508915404337e-05
    },
    {
      "text": "import re\n\ninput_string = \"This is an example string\"\nstart_string = \"an\"\nend_string = \"string\"\n\n regex = re.compile(start_string + '(.*?)' + end_string)\nresult = re.search(regex, input_string) \nif result: \n    print(result.group(1))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.6983468051155897e-09,
      "p_css": 1.8642091874552656e-05,
      "p_html": 0.017860625140984864,
      "p_java": 0.9568652790077153,
      "p_javascript": 3.072389552124904e-08,
      "p_matlab": 7.941679080884422e-08,
      "p_python": 0.025129150653441235,
      "p_sql": 0.0001224685485053115,
      "p_typescript": 3.7207184453443978e-06
    },
    {
      "text": "def findLargestCount(list):\n    max_count = 0\n    result = []\n    \n    for item in list:\n        length_item = len(item)\n        if length_item > max_count:\n            max_count = length_item\n            result = [item]\n        elif length_item == max_count:\n            result.append(item)\n            \n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.618508566858516e-05,
      "p_css": 0.017867502749106933,
      "p_html": 0.0039740143337633985,
      "p_java": 7.776727564122156e-06,
      "p_javascript": 0.004037433596471083,
      "p_matlab": 0.0024158941335582045,
      "p_python": 0.9708989792894179,
      "p_sql": 0.0006740612727988744,
      "p_typescript": 4.815281165083552e-05
    },
    {
      "text": "# Import the requests library \nimport requests \n\n# Get the website's content \nr = requests.get('https://www.example.com/') \n\n# Get the webpage's HTML \nhtml = r.text\n\n# Print the HTML \nprint(html)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 2.1087739374092446e-14,
      "p_css": 1.1597205333223578e-05,
      "p_html": 0.998417936101944,
      "p_java": 0.0015690705494710755,
      "p_javascript": 1.8605411548828884e-07,
      "p_matlab": 6.127935088009344e-11,
      "p_python": 2.554203984603546e-07,
      "p_sql": 1.1925985390193868e-07,
      "p_typescript": 8.353475835569125e-07
    },
    {
      "text": "def word_frequency(text):\n    # Create a dictionary to store word frequencies\n    freq = {}\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through every word and add it to the dictionary\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n\n    # Return the dictionary\n    return freq",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008125478033766731,
      "p_css": 0.24847354075934414,
      "p_html": 0.014454424591430525,
      "p_java": 1.4443552198236723e-05,
      "p_javascript": 0.0023181930068642675,
      "p_matlab": 0.00011348054121825792,
      "p_python": 0.41649559519271845,
      "p_sql": 0.0833370193997166,
      "p_typescript": 0.2266678249227427
    },
    {
      "text": "class Movie:\n    def __init__(self, title, rating):\n        self.title = title\n        self.rating = rating",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 3.742121096112993e-06,
      "p_css": 0.000397189249294973,
      "p_html": 0.9984852038273014,
      "p_java": 9.419329402456045e-07,
      "p_javascript": 2.5173293182447335e-06,
      "p_matlab": 1.9206579547463197e-07,
      "p_python": 0.001011058787203725,
      "p_sql": 8.763185554290767e-05,
      "p_typescript": 1.1522831507045715e-05
    },
    {
      "text": "def to_arr(this):\n    \"\"\"Returns Python array from Js array\"\"\"\n    return [this.get(str(e)) for e in xrange(len(this))]\n\n\nARR_STACK = set({})\n\nclass ArrayPrototype:\n    def toString():\n        # this function is wrong but I will leave it here fore debugging purposes.\n        func = this.get('join')\n        if not func.is_callable():\n            @this.Js\n            def func():\n                return '[object %s]'%this.Class\n        return func.call(this, ())\n\n    def toLocaleString():\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        # separator is simply a comma ','\n        if not arr_len:\n            return ''\n        res = []\n        for i in xrange(arr_len):\n            element = array[str(i)]\n            if element.is_undefined() or element.is_null():\n                res.append('')\n            else:\n                cand = element.to_object()\n                str_func = element.get('toLocaleString')\n                if not str_func.is_callable():\n                    raise this.MakeError('TypeError', 'toLocaleString method of item at index %d is not callable'%i)\n                res.append(element.callprop('toLocaleString').value)\n        return ','.join(res)\n\n    def concat():\n        array = this.to_object()\n        A = this.Js([])\n        items = [array]\n        items.extend(to_arr(arguments))\n        n = 0\n        for E in items:\n            if E.Class=='Array':\n                k = 0\n                e_len = len(E)\n                while k<e_len:\n                    if E.has_property(str(k)):\n                        A.put(str(n), E.get(str(k)))\n                    n+=1\n                    k+=1\n            else:\n                A.put(str(n), E)\n                n+=1\n        return A\n\n    def join(separator):\n        ARR_STACK.add(this)\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        separator = ',' if separator.is_undefined() else separator.to_string().value\n        elems = []\n        for e in xrange(arr_len):\n            elem = array.get(str(e))\n            if elem in ARR_STACK:\n                s = ''\n            else:\n                s = elem.to_string().value\n            elems.append(s if not (elem.is_undefined() or elem.is_null()) else '')\n        res =  separator.join(elems)\n        ARR_STACK.remove(this)\n        return res\n\n    def pop(): #todo check\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not arr_len:\n            array.put('length', this.Js(arr_len))\n            return None\n        ind = str(arr_len-1)\n        element = array.get(ind)\n        array.delete(ind)\n        array.put('length', this.Js(arr_len-1))\n        return element\n\n\n    def push(item): # todo check\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        to_put = arguments.to_list()\n        i = arr_len\n        for i, e in enumerate(to_put, arr_len):\n            array.put(str(i), e)\n        if to_put:\n            i+=1\n            array.put('length', this.Js(i))\n        return i\n\n\n    def reverse():\n        array = this.to_object() # my own algorithm\n        vals = to_arr(array)\n        has_props = [array.has_property(str(e)) for e in xrange(len(array))]\n        vals.reverse()\n        has_props.reverse()\n        for i, val in enumerate(vals):\n            if has_props[i]:\n                array.put(str(i), val)\n            else:\n                array.delete(str(i))\n        return array\n\n\n    def shift():  #todo check\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not arr_len:\n            array.put('length', this.Js(0))\n            return None\n        first = array.get('0')\n        for k in xrange(1, arr_len):\n            from_s, to_s = str(k), str(k-1)\n            if array.has_property(from_s):\n                array.put(to_s, array.get(from_s))\n            else:\n                array.delete(to)\n        array.delete(str(arr_len-1))\n        array.put('length', this.Js(str(arr_len-1)))\n        return first\n\n    def slice(start, end): # todo check\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        relative_start = start.to_int()\n        k = max((arr_len + relative_start), 0) if relative_start<0 else  min(relative_start, arr_len)\n        relative_end = arr_len if end.is_undefined() else end.to_int()\n        final =  max((arr_len + relative_end), 0) if relative_end<0 else min(relative_end, arr_len)\n        res = []\n        n = 0\n        while k<final:\n            pk = str(k)\n            if array.has_property(pk):\n                res.append(array.get(pk))\n            k += 1\n            n += 1\n        return res\n\n    def sort(cmpfn):\n        if not this.Class in {'Array', 'Arguments'}:\n            return this.to_object() # do nothing\n        arr = [this.get(str(i)) for i in xrange(len(this))]\n        if not arr:\n            return this\n        if not cmpfn.is_callable():\n            cmpfn = None\n        cmp = lambda a,b: sort_compare(a, b, cmpfn)\n        arr.sort(cmp=cmp)\n        for i in xrange(len(arr)):\n            this.put(unicode(i), arr[i])\n        return this\n\n    def splice(start, deleteCount):\n        # 1-8\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        relative_start = start.to_int()\n        actual_start = max((arr_len + relative_start),0) if relative_start<0 else min(relative_start, arr_len)\n        actual_delete_count =  min(max(deleteCount.to_int(),0 ), arr_len - actual_start)\n        k = 0\n        A = this.Js([])\n        # 9\n        while k<actual_delete_count:\n            if array.has_property(str(actual_start+k)):\n                A.put(str(k), array.get(str(actual_start+k)))\n            k += 1\n        # 10-11\n        items = to_arr(arguments)[2:]\n        items_len = len(items)\n        # 12\n        if items_len<actual_delete_count:\n            k = actual_start\n            while k < (arr_len-actual_delete_count):\n                fr = str(k+actual_delete_count)\n                to = str(k+items_len)\n                if array.has_property(fr):\n                    array.put(to, array.get(fr))\n                else:\n                    array.delete(to)\n                k += 1\n            k = arr_len\n            while k > (arr_len - actual_delete_count + items_len):\n                array.delete(str(k-1))\n                k -= 1\n        # 13\n        elif items_len>actual_delete_count:\n            k = arr_len - actual_delete_count\n            while k>actual_start:\n                fr = str(k + actual_delete_count - 1)\n                to = str(k + items_len - 1)\n                if array.has_property(fr):\n                    array.put(to, array.get(fr))\n                else:\n                    array.delete(to)\n                k -= 1\n        # 14-17\n        k = actual_start\n        while items:\n            E = items.pop(0)\n            array.put(str(k), E)\n            k += 1\n        array.put('length', this.Js(arr_len - actual_delete_count + items_len))\n        return A\n\n    def unshift():\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        argCount = len(arguments)\n        k = arr_len\n        while k > 0:\n            fr = str(k - 1)\n            to = str(k + argCount - 1)\n            if array.has_property(fr):\n                array.put(to, array.get(fr))\n            else:\n                array.delete(to)\n            k -= 1\n        j = 0\n        items = to_arr(arguments)\n        while items:\n            E = items.pop(0)\n            array.put(str(j), E)\n            j += 1\n        array.put('length', this.Js(arr_len + argCount))\n        return arr_len + argCount\n\n    def indexOf(searchElement):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if arr_len == 0:\n            return -1\n        if len(arguments)>1:\n            n = arguments[1].to_int()\n        else:\n            n = 0\n        if n >= arr_len:\n            return -1\n        if n >= 0:\n            k = n\n        else:\n            k = arr_len - abs(n)\n            if k < 0:\n                k = 0\n        while k < arr_len:\n            if array.has_property(str(k)):\n                elementK = array.get(str(k))\n                if searchElement.strict_equality_comparison(elementK):\n                    return k\n            k += 1\n        return -1\n\n    def lastIndexOf(searchElement):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if arr_len == 0:\n            return -1\n        if len(arguments)>1:\n            n = arguments[1].to_int()\n        else:\n            n = arr_len - 1\n        if n >= 0:\n            k = min(n, arr_len-1)\n        else:\n            k = arr_len - abs(n)\n        while k >= 0:\n            if array.has_property(str(k)):\n                elementK = array.get(str(k))\n                if searchElement.strict_equality_comparison(elementK):\n                    return k\n            k -= 1\n        return -1\n\n\n    def every(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        k = 0\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                if not callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:\n                    return False\n            k += 1\n        return True\n\n\n    def some(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        k = 0\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                if callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:\n                    return True\n            k += 1\n        return False\n\n    def forEach(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        k = 0\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                callbackfn.call(T, (kValue, this.Js(k), array))\n            k+=1\n\n    def map(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        A = this.Js([])\n        k = 0\n        while k<arr_len:\n            Pk = str(k)\n            if array.has_property(Pk):\n                kValue = array.get(Pk)\n                mappedValue = callbackfn.call(T, (kValue, this.Js(k), array))\n                A.define_own_property(Pk, {'value': mappedValue, 'writable': True,\n                    'enumerable': True, 'configurable': True})\n            k += 1\n        return A\n\n    def filter(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        T = arguments[1]\n        res = []\n        k = 0\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                if callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:\n                    res.append(kValue)\n            k += 1\n        return res # converted to js array automatically\n\n    def reduce(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        if not arr_len and len(arguments)<2:\n            raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')\n        k = 0\n        if len(arguments)>1: # initial value present\n            accumulator = arguments[1]\n        else:\n            kPresent = False\n            while not kPresent and k<arr_len:\n                kPresent = array.has_property(str(k))\n                if kPresent:\n                    accumulator = array.get(str(k))\n                k += 1\n            if not kPresent:\n                raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')\n        while k<arr_len:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                accumulator = callbackfn.call(this.undefined, (accumulator, kValue, this.Js(k), array))\n            k += 1\n        return accumulator\n\n\n    def reduceRight(callbackfn):\n        array = this.to_object()\n        arr_len = array.get('length').to_uint32()\n        if not callbackfn.is_callable():\n            raise this.MakeError('TypeError', 'callbackfn must be a function')\n        if not arr_len and len(arguments)<2:\n            raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')\n        k = arr_len - 1\n        if len(arguments)>1: # initial value present\n            accumulator = arguments[1]\n        else:\n            kPresent = False\n            while not kPresent and k>=0:\n                kPresent = array.has_property(str(k))\n                if kPresent:\n                    accumulator = array.get(str(k))\n                k -= 1\n            if not kPresent:\n                raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')\n        while k>=0:\n            if array.has_property(str(k)):\n                kValue = array.get(str(k))\n                accumulator = callbackfn.call(this.undefined, (accumulator, kValue, this.Js(k), array))\n            k -= 1\n        return accumulator\n\n\ndef sort_compare(a, b, comp):\n    if a is None:\n        if b is None:\n            return 0\n        return 1\n    if b is None:\n        if a is None:\n            return 0\n        return -1\n    if a.is_undefined():\n        if b.is_undefined():\n            return 0\n        return 1\n    if b.is_undefined():\n        if a.is_undefined():\n            return 0\n        return -1\n    if comp is not None:\n        res = comp.call(a.undefined, (a, b))\n        return res.to_int()\n    x, y = a.to_string(), b.to_string()\n    if x<y:\n        return -1\n    elif x>y:\n        return 1\n    return 0\n\n\n\n\n",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 0.00014575169266798222,
      "p_css": 6.227073152841453e-06,
      "p_html": 2.2113751066788874e-05,
      "p_java": 1.8805654662947944e-05,
      "p_javascript": 2.3382336325875896e-05,
      "p_matlab": 0.9997484287984586,
      "p_python": 1.7642682694918973e-05,
      "p_sql": 1.4371755109562967e-05,
      "p_typescript": 3.2762558602491626e-06
    },
    {
      "text": "\"\"\"\nGenerate a python program to generate a subset of random numbers from the given array\n\"\"\"\n\nimport random\n\n# Function to generate a subset of random numbers\ndef generate_subset(array, subset_size):\n    # Get a list of indices\n    indices = random.sample(range(len(array)), subset_size)\n    \n    # Get a list of elements from the array\n    subset = [array[i] for i in indices]\n    \n    return subset\n\nif __name__ == '__main__':\n    array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1]\n    subset_size = 5\n    print(generate_subset(array, subset_size))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.84407164733082,
      "p_css": 0.0005600786977758782,
      "p_html": 0.0006659547957993404,
      "p_java": 2.0741023815546398e-05,
      "p_javascript": 0.07306851441900872,
      "p_matlab": 0.0008164605269026698,
      "p_python": 0.048958031077687245,
      "p_sql": 0.03080853495894951,
      "p_typescript": 0.00103003716924125
    },
    {
      "text": "def maxNum(numsList):\n    maxNum = numsList[0]\n    for num in numsList:\n        if num > maxNum:\n            maxNum = num\n    return maxNum\n\nnumList = [4, 9, 10, 11, 12]\nprint(\"The maximum number in the list is:\", maxNum(numList))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.25715103696867e-05,
      "p_css": 1.8058771092769419e-06,
      "p_html": 6.686005037042464e-05,
      "p_java": 1.3986958288766428e-06,
      "p_javascript": 8.18345260441609e-05,
      "p_matlab": 0.9951256554648887,
      "p_python": 0.004535508666810709,
      "p_sql": 2.1303934087429915e-05,
      "p_typescript": 0.00012306127449089257
    },
    {
      "text": "import logging\n\n# Create logutillogger\nlogutillogger = logging.getLogger('logutil')\nlogutillogger.setLevel(logging.ERROR)\n\n# Create a file handler\nfile_handler = logging.FileHandler('app_error.log')\nfile_handler.setLevel(logging.ERROR)\n\n# Create a formatter\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')\nfile_handler.setFormatter(formatter)\n\n# Add the file handler to the logger\nlogutillogger.addHandler(file_handler)\n\n# Log the errors\ntry:\n # Code that may throw an error\nexcept Exception as e:\n logutillogger.exception(e)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00026880366133822303,
      "p_css": 8.297344843598934e-05,
      "p_html": 0.00034047329539999883,
      "p_java": 0.00012122458703447553,
      "p_javascript": 0.022579432228885258,
      "p_matlab": 4.0113707027009666e-05,
      "p_python": 0.0025055645046701165,
      "p_sql": 0.0005888165777162149,
      "p_typescript": 0.9734725979894926
    },
    {
      "text": "class WordCounter:\n def __init__(self, text):\n self.text = text\n \n def count_words(self):\n return len(self.text.split())\n\ntext = 'This is some sample text.'\nwc = WordCounter(text)\nnum_words = wc.count_words()\nprint(num_words) # Output: 4",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00013867148087482454,
      "p_css": 0.010967120908001372,
      "p_html": 0.0011296213131208,
      "p_java": 1.6525740024926485e-05,
      "p_javascript": 1.612348961893008e-05,
      "p_matlab": 1.305793751862265e-06,
      "p_python": 0.8848060948856165,
      "p_sql": 0.10094056063335152,
      "p_typescript": 0.0019839757556393907
    },
    {
      "text": "multiply = 1\nfor x in range(1,6):\n multiply = multiply * x\n\nprint(multiply)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005331313196716436,
      "p_css": 0.0002704164364784212,
      "p_html": 0.0018552340801759675,
      "p_java": 5.36720285135931e-05,
      "p_javascript": 0.0001329633486753089,
      "p_matlab": 0.4673536699980667,
      "p_python": 0.528325416411639,
      "p_sql": 0.0007362233598994198,
      "p_typescript": 0.0007392730168799414
    },
    {
      "text": "def flatten(arr):\n    result = []\n \n    for item in arr:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n \n    return result\n \nflattenedArr = flatten(arr)\nprint(flattenedArr)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.560683323551041e-05,
      "p_css": 0.021582650363065215,
      "p_html": 0.0006472171112893641,
      "p_java": 3.1647854577824156e-06,
      "p_javascript": 0.0008512023427886272,
      "p_matlab": 0.4501102915257577,
      "p_python": 0.5267502937918263,
      "p_sql": 1.495366195030352e-05,
      "p_typescript": 1.4619584629424121e-05
    },
    {
      "text": "list_of_nums = [1, 2, 3, 4, 5]\n\ndictionary = {}\nfor num in list_of_nums:\n dictionary[num] = num\n\nprint(dictionary)\n\n# Output {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 1.2030669129249767e-06,
      "p_css": 8.388495000607667e-08,
      "p_html": 2.3132961451176442e-06,
      "p_java": 5.251159818886817e-08,
      "p_javascript": 1.1223885796992386e-07,
      "p_matlab": 0.9999532392411936,
      "p_python": 4.197834893233964e-05,
      "p_sql": 4.4118278090228534e-07,
      "p_typescript": 5.76228628809817e-07
    },
    {
      "text": "for i in range(10):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.9656415838442685e-12,
      "p_css": 9.24345959966392e-13,
      "p_html": 1.3906781818842273e-10,
      "p_java": 2.382126516031233e-13,
      "p_javascript": 1.6979731962244342e-13,
      "p_matlab": 0.9998352021961047,
      "p_python": 0.00016479765204655716,
      "p_sql": 3.2524040295583e-14,
      "p_typescript": 5.450371823541461e-12
    },
    {
      "text": "import re\n\nclass EmailParser:\n def __init__(self, email):\n self.email = email\n \n def parse_username(self):\n return re.search('(.*)@', self.email).group(1)\n \n def parse_domain(self):\n return re.search('@(.*)', self.email).group(1)\n\n# Usage\nparser = EmailParser(\"john@example.com\")\nprint(parser.parse_username())\n# john\nprint(parser.parse_domain())\n# example.com",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 8.332587994389006e-11,
      "p_css": 0.012063780805852272,
      "p_html": 0.5379905442138874,
      "p_java": 0.3924382095267902,
      "p_javascript": 8.030374446731698e-06,
      "p_matlab": 1.5449867733895342e-08,
      "p_python": 0.055275217144871984,
      "p_sql": 0.002221359377245558,
      "p_typescript": 2.843023712288296e-06
    },
    {
      "text": "import random\nnumbers = []\n\nfor i in range(10):\n number = random.randint(1, 100)\n numbers.append(number)\n \nprint(numbers)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.1993446948562158e-06,
      "p_css": 1.3735596368672766e-05,
      "p_html": 2.6246383491222477e-05,
      "p_java": 0.00031699005095733813,
      "p_javascript": 1.0302594296226557e-05,
      "p_matlab": 5.751769427927674e-06,
      "p_python": 0.9996044174210698,
      "p_sql": 1.7756778549918908e-05,
      "p_typescript": 1.6000611438908562e-06
    },
    {
      "text": "import json\n\ndef list_to_json(data):\n    return json.dumps(data)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.1347903578340046e-05,
      "p_css": 0.9959880442754366,
      "p_html": 0.0001613971138487575,
      "p_java": 5.796306033403486e-07,
      "p_javascript": 3.951083397032854e-06,
      "p_matlab": 8.92971297441347e-07,
      "p_python": 0.0037680314113158705,
      "p_sql": 3.8919070614940556e-05,
      "p_typescript": 2.683653990778661e-05
    },
    {
      "text": "from multiprocessing import Pool\n\ndef process_data(record):\n # Process the data\n\ndef process_list_data(data):\n with Pool() as p:\n p.map(process_data, data)\n\nlist_data = [1,2,3,4,5]\n\nprocess_list_data(list_data)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0022436306661633636,
      "p_css": 0.0337312519674095,
      "p_html": 0.009470868844434474,
      "p_java": 5.1043636176705044e-05,
      "p_javascript": 0.00022815562599659908,
      "p_matlab": 0.0001305737173826067,
      "p_python": 0.0723663468617024,
      "p_sql": 0.0006639927154782953,
      "p_typescript": 0.881114135965256
    },
    {
      "text": "import random\n\ndef generate_permutation(nums):\n n = len(nums)\n permutation = []\n\n# Generate a random index and add the element at that index to the list\n for _ in range(n):\n idx = random.randint(0, len(nums) - 1)\n permutation.append(nums[idx])\n nums.pop(idx)\n\nreturn permutation\n\n# Test the function\nprint(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008461057024178335,
      "p_css": 0.00012939902168716943,
      "p_html": 0.00023730783120498296,
      "p_java": 1.433859977269456e-05,
      "p_javascript": 0.021976855359565218,
      "p_matlab": 8.27496221050862e-05,
      "p_python": 0.9720231811229119,
      "p_sql": 0.003681036906944981,
      "p_typescript": 0.0010090258333899857
    },
    {
      "text": "class Numbers:\n   \n    def __init__(self):\n        pass\n   \n    def add(self, a, b):\n        return a + b\n   \n    def subtract(self, a, b):\n        return a - b",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.4283734876937615e-06,
      "p_css": 6.444985092072244e-05,
      "p_html": 0.0015683042865149064,
      "p_java": 0.0008802291012575211,
      "p_javascript": 2.4025978844501112e-06,
      "p_matlab": 2.7092042039111238e-11,
      "p_python": 0.9935363757242828,
      "p_sql": 0.003934875564046022,
      "p_typescript": 1.0934474513818172e-05
    },
    {
      "text": "def maxElement(arr):\n    return max(arr)\n\narray = [2, 78, 34, 55]\n\nprint(maxElement(array)) # 78",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006216325141793236,
      "p_css": 0.010320209087338788,
      "p_html": 0.003140805659610833,
      "p_java": 0.00046727213544739085,
      "p_javascript": 0.0008151022695401446,
      "p_matlab": 0.12495182742316212,
      "p_python": 0.8516213007190414,
      "p_sql": 0.00029907348073961317,
      "p_typescript": 0.0021680840833263712
    },
    {
      "text": "\"\"\"\nDetect malicious HTTP requests using Python\n\"\"\"\nimport requests\nfrom urllib.parse import urlparse\nimport re\n\ndef detect_malicious_requests(url):\n    # Parse the URL\n    parsed_url = urlparse(url)\n\n    # Check for malicious URL patterns\n    malicious_patterns = [\n        r\"\\.exe$\",\n        r\"\\.js$\",\n        r\"\\.gz$\",\n        r\"\\.bat$\",\n        r\"\\.zip$\",\n        r\"\\.php$\",\n        r\"\\.sh$\",\n        r\"\\.json$\"\n    ]\n    for pattern in malicious_patterns:\n        if re.search(pattern, parsed_url.path):\n            return \"MALICIOUS\"\n\n    # Check for suspicious file extensions\n    suspicious_file_extensions = [\n        \".xml\",\n        \".config\",\n        \".log\",\n        \".ini\"\n    ]\n    for extension in suspicious_file_extensions:\n        if parsed_url.path.endswith(extension):\n            return \"SUSPICIOUS\"\n\n    # Check for HTTP status codes\n    response = requests.get(url)\n    if response.status_code == 401:\n        return \"MALICIOUS\"\n\n    return \"SAFE\"\n\nif __name__ == '__main__':\n    url = \"http://example.com/index.php\"\n    print(detect_malicious_requests(url))",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.8770814674646658e-08,
      "p_css": 0.3690834490507006,
      "p_html": 0.1605152517924311,
      "p_java": 0.2913055861965962,
      "p_javascript": 0.004297640292892696,
      "p_matlab": 0.003530776907605256,
      "p_python": 0.16615089182380582,
      "p_sql": 0.0025661451434623875,
      "p_typescript": 0.0025502300216912175
    },
    {
      "text": "import numpy as np\n\nx = np.array([1,2,3,4,5])\ny = np.array([2,3,4,5,6])\n\ncorr = np.corrcoef(x, y)\n\nprint(corr[0][1]) # 0.98999999999999999",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9560977869047413,
      "p_css": 0.002526716387703199,
      "p_html": 0.000872892768938255,
      "p_java": 3.202397106977697e-05,
      "p_javascript": 1.5229911586524867e-05,
      "p_matlab": 0.0007665150488983199,
      "p_python": 0.03877484643481976,
      "p_sql": 9.717752790699384e-07,
      "p_typescript": 0.0009130167969636686
    },
    {
      "text": "def my_sqrt(x): \n    guess = x\n    i = 0\n    while guess * guess != x and i < 20:\n        guess = (guess + x/guess) / 2.0\n        i += 1\n    return guess \n\nresult = my_sqrt(36) \nprint(\"Square root of 36 is = \", result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0013207298514911867,
      "p_css": 0.01674105010333449,
      "p_html": 0.005744477690290405,
      "p_java": 0.0009027444753623214,
      "p_javascript": 0.004357963533089145,
      "p_matlab": 0.0006311682836359111,
      "p_python": 0.9519314336028283,
      "p_sql": 0.0028986692131485457,
      "p_typescript": 0.015471763246819604
    },
    {
      "text": "def closest_match(numbers, search_term):\n    closest_match = None\n    min_diff = float('inf')\n    \n    for number in numbers:\n        diff = abs(number - search_term)\n        if diff < min_diff:\n            min_diff = diff\n            closest_match = number\n    \n    return closest_match",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004461034858151498,
      "p_css": 0.003426146930053028,
      "p_html": 0.0010050056860405028,
      "p_java": 0.001603640740834339,
      "p_javascript": 0.00047923433838551426,
      "p_matlab": 7.819753251906839e-05,
      "p_python": 0.9918516624312612,
      "p_sql": 0.000542537371775551,
      "p_typescript": 0.0005674714833157724
    },
    {
      "text": "def sort_by_length(words):\n    return sorted(words, key=len)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.767362162325284e-05,
      "p_css": 0.0030347891756727957,
      "p_html": 0.0018751027633570237,
      "p_java": 1.9847966822805637e-05,
      "p_javascript": 0.00017467620801968177,
      "p_matlab": 1.1085476539983496e-05,
      "p_python": 0.9808280346579827,
      "p_sql": 0.013957331388603693,
      "p_typescript": 2.145874137799906e-05
    },
    {
      "text": "import flask\nfrom flask import jsonify\nimport sqlite3\nfrom flask import g\n\napp = flask.Flask(name)\n\nDATABASE = 'data.db'\n\ndef get_db():\n   db = getattr(g, '_database', None)\n   if db is None:\n       db = g._database = sqlite3.connect(DATABASE)\n   return db\n\n@app.route('/data', methods=['POST'])\ndef store_data():\n   db = get_db()\n   cur = db.cursor()\n   cur.execute(\"INSERT INTO data (data) VALUES (?)\", (flask.request.form['data'],))\n   db.commit()\n   return jsonify(status='OK', message='Data stored')\n\n@app.route('/data', methods=['GET'])\ndef get_data():\n   db = get_db()\n   cur = db.cursor()\n   cur.execute('SELECT * FROM data')\n   row = cur.fetchall()\n   data = [item[0] for item in row]\n   return jsonify(status='OK', message=data)\n\nif name == 'main':\n   app.run(debug=True)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00043277780874566594,
      "p_css": 0.2342705701189585,
      "p_html": 0.019011877579741147,
      "p_java": 1.7136569758453115e-05,
      "p_javascript": 7.266561014269713e-06,
      "p_matlab": 3.1628411362155108e-06,
      "p_python": 0.0011131459572398528,
      "p_sql": 0.7450764125551973,
      "p_typescript": 6.76500082085186e-05
    },
    {
      "text": "employee_data = {\n    \"Michael\": 45000,\n    \"Andrew\": 55000,\n    \"Mark\": 70000\n}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.03344522342202318,
      "p_css": 0.10564444689210196,
      "p_html": 0.05412966464485883,
      "p_java": 0.007795460585962923,
      "p_javascript": 0.019009128678025008,
      "p_matlab": 0.0344040148693489,
      "p_python": 0.6862784599258593,
      "p_sql": 0.006436265207938535,
      "p_typescript": 0.05285733577388134
    },
    {
      "text": "def comb3(arr):\n    result = []\n    for i in range(len(arr)):\n       for j in range(i+1, len(arr)):\n           for k in range(j+1, len(arr)):\n               t = [arr[i],arr[j],arr[k]]\n               result.append(t)\n    return result",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.6596783706649624e-09,
      "p_css": 8.66218401143605e-09,
      "p_html": 4.877068360910021e-09,
      "p_java": 3.3973984808254526e-10,
      "p_javascript": 2.0230948731034244e-10,
      "p_matlab": 0.6785197071691865,
      "p_python": 0.32148026731182355,
      "p_sql": 6.997585002915171e-09,
      "p_typescript": 2.7804248967850952e-09
    },
    {
      "text": "for key,value in my_dict.items(): \n    print(key,\" :\",value)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 2.0616154884746588e-06,
      "p_css": 0.6888280623992481,
      "p_html": 1.01409317521903e-05,
      "p_java": 2.7662794198923983e-07,
      "p_javascript": 2.477307575423573e-05,
      "p_matlab": 0.31112962694275414,
      "p_python": 3.00911221037744e-08,
      "p_sql": 3.6234738267140194e-06,
      "p_typescript": 1.4048421119690985e-06
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# Define the function to scrape articles from a website\ndef scrape_articles(url):\n  # Make a GET request to fetch the raw HTML content\n  html_content = requests.get(url).text\n  # Parse the html content\n  soup = BeautifulSoup(html_content, \"lxml\")\n  # Return articles\n  return soup.find_all(\"article\")\n\n# Example\narticles = scrape_articles('https://example.com/news')",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 2.4892097617269324e-09,
      "p_css": 2.082721296510898e-05,
      "p_html": 0.8941227806942019,
      "p_java": 0.09925473970787274,
      "p_javascript": 0.003573067579590655,
      "p_matlab": 0.0020987970533760253,
      "p_python": 0.00043682124523510544,
      "p_sql": 0.00043297451186275995,
      "p_typescript": 5.9989505685819754e-05
    },
    {
      "text": "totalCost = 0\nfor item, price in items.items():\ntotalCost += price\n\nprint(f'Total cost of the cart is {totalCost}')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0013916694595721539,
      "p_css": 0.42656917600558764,
      "p_html": 0.014479809183818517,
      "p_java": 0.0009000419100189627,
      "p_javascript": 0.08773569173442057,
      "p_matlab": 0.0005824697334721833,
      "p_python": 0.457614834349887,
      "p_sql": 0.002869002236502401,
      "p_typescript": 0.00785730538672057
    },
    {
      "text": "def get_largest(a, b, c):\n    largest = a \n    if b>largest:\n        largest = b\n    if c>largest:\n        largest = c\n    return largest\n\nprint(get_largest(10, 20, 15))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007748191474155783,
      "p_css": 0.02219613293482017,
      "p_html": 0.07275579078735527,
      "p_java": 0.00117204778843798,
      "p_javascript": 0.002605855072420937,
      "p_matlab": 0.02121578786166437,
      "p_python": 0.864306479330744,
      "p_sql": 0.0007512041943263855,
      "p_typescript": 0.007248510556075091
    },
    {
      "text": "def word_count(sentence):\n    count = 0\n    for word in sentence.split(' '):\n        count += 1\n    return count",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003107252739361152,
      "p_css": 0.0023518047491719904,
      "p_html": 0.0005230750438535021,
      "p_java": 2.7109279059530206e-06,
      "p_javascript": 5.2086763984734995e-05,
      "p_matlab": 5.269142922678079e-05,
      "p_python": 0.9948740348970228,
      "p_sql": 0.0017910304767679336,
      "p_typescript": 4.1840438130250395e-05
    },
    {
      "text": "def get_length(string):\n    return len(string)\n\nlength = get_length(\"Hello\")\nprint(length)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.30870456855293e-07,
      "p_css": 0.00034173544332266175,
      "p_html": 6.8121157368358e-05,
      "p_java": 0.02225438221017648,
      "p_javascript": 1.9912827619811356e-06,
      "p_matlab": 5.056721274573415e-07,
      "p_python": 0.9692040353254041,
      "p_sql": 0.008114547094840064,
      "p_typescript": 1.3750943541972397e-05
    },
    {
      "text": "def sum_values(d):\n    sum = 0\n    for value in d.values():\n        sum += value\n    return sum\n\ntotal = sum_values(d)\nprint(total) # 60",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.579826162950724e-06,
      "p_css": 0.000256255096607973,
      "p_html": 4.587120423060531e-05,
      "p_java": 1.7656154465694753e-05,
      "p_javascript": 2.6207694083498987e-06,
      "p_matlab": 0.9996568292083343,
      "p_python": 3.24705970400095e-08,
      "p_sql": 9.345289877048566e-06,
      "p_typescript": 8.80998031589814e-06
    },
    {
      "text": "def find_pairs(nums, num):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == num:\n                pairs.append((nums[i], nums[j]))\n    return len(pairs)\n\nif __name__ == '__main__':\n\tnums = [1,2,3,4]\n\tnum = 7\n\tpairs = find_pairs(nums, num)\n\tprint(pairs)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.9745846317789647e-05,
      "p_css": 2.627648698423228e-06,
      "p_html": 4.588508579402261e-05,
      "p_java": 2.6772114823903788e-06,
      "p_javascript": 9.475439987018898e-06,
      "p_matlab": 0.23982697375368095,
      "p_python": 0.7600406747017191,
      "p_sql": 2.908297489792918e-05,
      "p_typescript": 2.285733742218563e-05
    },
    {
      "text": "def linearSearch(arr, x): \n  \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n  \n    return -1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.2219282472320438e-08,
      "p_css": 1.0806083591004948e-08,
      "p_html": 1.8035956221079678e-08,
      "p_java": 3.6593488945450994e-09,
      "p_javascript": 9.374965942492903e-10,
      "p_matlab": 0.9920978784067421,
      "p_python": 0.007902064053555053,
      "p_sql": 2.272048574999131e-09,
      "p_typescript": 9.609486423024752e-09
    },
    {
      "text": "string1 = input(\"Enter a string: \")\nstring2 = input(\"Enter another string: \")\n\nif string1 == string2:\n print(\"The strings are equal\")\nelse:\n print(\"The strings are not equal\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.753444426348074e-05,
      "p_css": 0.012775349690130628,
      "p_html": 0.000732727821528817,
      "p_java": 0.06992902796095658,
      "p_javascript": 1.8978660872234822e-06,
      "p_matlab": 0.00017986761973971357,
      "p_python": 0.8769017422820643,
      "p_sql": 0.02848564974520181,
      "p_typescript": 0.010936202570027602
    },
    {
      "text": "def tsp(graph, start, end): \n    # Create an unvisited list \n    unvisited = {vertex: None for vertex in graph} \n    current = start \n    unvisited[current] = current \n    visited = dict() \n    route = list() \n  \n    while True: \n        visited[current] = current \n        route.append(current) \n        unvisited.pop(current, None) \n        if current == end: \n            break\n  \n        min_dist = float('inf')\n        for neighbour in graph[current].keys(): \n            if neighbour not in unvisited: \n                continue\n            dist = graph[current][neighbour]\n            if dist < min_dist: \n                min_dist = dist \n                next_vertex = neighbour \n  \n        current = next_vertex \n  \n    route.append(end) \n    return route",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.2624357933233855,
      "p_css": 0.3327975943357654,
      "p_html": 0.035101039427315774,
      "p_java": 0.0008182459282272069,
      "p_javascript": 0.0023414187540441115,
      "p_matlab": 0.2043661340203084,
      "p_python": 0.13915110488078722,
      "p_sql": 0.00787136603066244,
      "p_typescript": 0.015117303299503998
    },
    {
      "text": "def clear_dictionary(d): \n    keys = list(d.keys()) \n    for key in keys: \n        del d[key]",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0019807732554676044,
      "p_css": 0.9159210873888498,
      "p_html": 0.014581491112892255,
      "p_java": 0.00023251745856183202,
      "p_javascript": 0.0009951159902535102,
      "p_matlab": 0.010795274093255643,
      "p_python": 0.034049833639601526,
      "p_sql": 0.00834659542971932,
      "p_typescript": 0.013097311631398673
    },
    {
      "text": "import random\n\ndef generate_password():\n  data = \"0123456789\"\n  length = 10\n  password = \"\".join(random.sample(data, length))\n  return password\n\nprint(generate_password())",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.8999813371784913e-07,
      "p_css": 3.7487700497685847e-06,
      "p_html": 1.5650632021876112e-06,
      "p_java": 2.8969411861239188e-09,
      "p_javascript": 4.162951715205138e-06,
      "p_matlab": 1.5028995455351767e-08,
      "p_python": 0.000269740109531172,
      "p_sql": 0.9997202505057398,
      "p_typescript": 3.246756915834312e-07
    },
    {
      "text": "\"\"\"\nProgram to calculate the Fibonacci number at a particular index\n\"\"\"\n\ndef fibonacci_at_index(index):\n    \"\"\"Returns the Fibonacci number at a given index.\n    \n    Args:\n        index (int): The index of the Fibonacci number to be returned\n    \n    Returns:\n        int: The Fibonacci number at the given index\n    \"\"\"\n    if index <= 0:\n        return 0\n    if index == 1:\n        return 1\n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2)\n\nif __name__ == '__main__':\n    index = int(input())\n    print(fibonacci_at_index(index))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.19165397183706662,
      "p_css": 0.00021403786694715494,
      "p_html": 0.020920886136130246,
      "p_java": 0.024742409234061628,
      "p_javascript": 0.06532198658397183,
      "p_matlab": 1.4212027143629262e-06,
      "p_python": 0.6103590292947725,
      "p_sql": 0.00026712389460989183,
      "p_typescript": 0.08651913394972595
    },
    {
      "text": "def find_mode(List): \n    max_count = 0\n    modes = [] \n    for num in List: \n        current_count = List.count(num) \n        if current_count > max_count: \n            max_count = current_count \n            modes = [num] \n        elif current_count == max_count: \n            modes.append(num) \n    return modes",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.815472448401715e-06,
      "p_css": 4.177060853067079e-07,
      "p_html": 2.336831108020602e-05,
      "p_java": 1.810274947464686e-06,
      "p_javascript": 7.390164478979172e-06,
      "p_matlab": 0.9995638391356505,
      "p_python": 0.0003633668159507618,
      "p_sql": 1.3907414044658611e-05,
      "p_typescript": 1.6084705313716686e-05
    },
    {
      "text": "class Stack:\n\ndef __init__(self):\n    self.items = []\n\ndef push(self, item):\n    self.items.append(item)\n\ndef pop(self):\n    return self.items.pop()\n\ndef is_empty(self):\n    return self.items == []\n\ndef peek(self):\n    if not self.is_empty():\n        return self.items[-1]\n\ndef get_stack(self):\n    return self.items",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.5990380254902176e-05,
      "p_css": 0.007168878502200761,
      "p_html": 0.0269218939597092,
      "p_java": 7.416516966269145e-07,
      "p_javascript": 0.00010067796003395176,
      "p_matlab": 6.290279431183253e-07,
      "p_python": 0.7571694106552623,
      "p_sql": 0.20861699939287273,
      "p_typescript": 4.778470026431375e-06
    },
    {
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport bisect\nimport itertools\nimport operator\n\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nclass _BNode(object):\n    __slots__ = [\"tree\", \"contents\", \"children\"]\n\n    def __init__(self, tree, contents=None, children=None):\n        self.tree = tree\n        self.contents = contents or []\n        self.children = children or []\n        if self.children:\n            assert len(self.contents) + 1 == len(self.children), \\\n                \"one more child than data item required\"\n\n    def __repr__(self):\n        name = getattr(self, \"children\", 0) and \"Branch\" or \"Leaf\"\n        return \"<%s %s>\" % (name, \", \".join(map(str, self.contents)))\n\n    def lateral(self, parent, parent_index, dest, dest_index):\n        if parent_index > dest_index:\n            dest.contents.append(parent.contents[dest_index])\n            parent.contents[dest_index] = self.contents.pop(0)\n            if self.children:\n                dest.children.append(self.children.pop(0))\n        else:\n            dest.contents.insert(0, parent.contents[parent_index])\n            parent.contents[parent_index] = self.contents.pop()\n            if self.children:\n                dest.children.insert(0, self.children.pop())\n\n    def shrink(self, ancestors):\n        parent = None\n\n        if ancestors:\n            parent, parent_index = ancestors.pop()\n            # try to lend to the left neighboring sibling\n            if parent_index:\n                left_sib = parent.children[parent_index - 1]\n                if len(left_sib.contents) < self.tree.order:\n                    self.lateral(\n                        parent, parent_index, left_sib, parent_index - 1)\n                    return\n\n            # try the right neighbor\n            if parent_index + 1 < len(parent.children):\n                right_sib = parent.children[parent_index + 1]\n                if len(right_sib.contents) < self.tree.order:\n                    self.lateral(\n                        parent, parent_index, right_sib, parent_index + 1)\n                    return\n\n        center = len(self.contents) // 2\n        sibling, push = self.split()\n\n        if not parent:\n            parent, parent_index = self.tree.BRANCH(\n                self.tree, children=[self]), 0\n            self.tree._root = parent\n\n        # pass the median up to the parent\n        parent.contents.insert(parent_index, push)\n        parent.children.insert(parent_index + 1, sibling)\n        if len(parent.contents) > parent.tree.order:\n            parent.shrink(ancestors)\n\n    def grow(self, ancestors):\n        parent, parent_index = ancestors.pop()\n\n        minimum = self.tree.order // 2\n        left_sib = right_sib = None\n\n        # try to borrow from the right sibling\n        if parent_index + 1 < len(parent.children):\n            right_sib = parent.children[parent_index + 1]\n            if len(right_sib.contents) > minimum:\n                right_sib.lateral(parent, parent_index + 1, self, parent_index)\n                return\n\n        # try to borrow from the left sibling\n        if parent_index:\n            left_sib = parent.children[parent_index - 1]\n            if len(left_sib.contents) > minimum:\n                left_sib.lateral(parent, parent_index - 1, self, parent_index)\n                return\n\n        # consolidate with a sibling - try left first\n        if left_sib:\n            left_sib.contents.append(parent.contents[parent_index - 1])\n            left_sib.contents.extend(self.contents)\n            if self.children:\n                left_sib.children.extend(self.children)\n            parent.contents.pop(parent_index - 1)\n            parent.children.pop(parent_index)\n        else:\n            self.contents.append(parent.contents[parent_index])\n            self.contents.extend(right_sib.contents)\n            if self.children:\n                self.children.extend(right_sib.children)\n            parent.contents.pop(parent_index)\n            parent.children.pop(parent_index + 1)\n\n        if len(parent.contents) < minimum:\n            if ancestors:\n                # parent is not the root\n                parent.grow(ancestors)\n            elif not parent.contents:\n                # parent is root, and its now empty\n                self.tree._root = left_sib or self\n\n    def split(self):\n        center = len(self.contents) // 2\n        median = self.contents[center]\n        sibling = type(self)(\n            self.tree,\n            self.contents[center + 1:],\n            self.children[center + 1:])\n        self.contents = self.contents[:center]\n        self.children = self.children[:center + 1]\n        return sibling, median\n\n    def insert(self, index, item, ancestors):\n        self.contents.insert(index, item)\n        if len(self.contents) > self.tree.order:\n            self.shrink(ancestors)\n\n    def remove(self, index, ancestors):\n        minimum = self.tree.order // 2\n\n        if self.children:\n            # find the smallest in the right subtree, exchange the value with the current node\n            # then delete the smallest one, just like the idea in the binary search tree.\n            # Note: only if len(descendent.contents) > minimum, we do this way in order to avoid 'grow' operation.\n            # Or we will inspect the left tree and do it any way\n            # all internal nodes have both left and right subtree.\n            additional_ancestors = [(self, index + 1)]\n            descendent = self.children[index + 1]\n            while descendent.children:\n                additional_ancestors.append((descendent, 0))\n                descendent = descendent.children[0]\n            if len(descendent.contents) > minimum:\n                ancestors.extend(additional_ancestors)\n                self.contents[index] = descendent.contents[0]\n                descendent.remove(0, ancestors)\n                return\n\n            # fall back to the left child, and exchange with the biggest, then delete the biggest anyway.\n            additional_ancestors = [(self, index)]\n            descendent = self.children[index]\n            while descendent.children:\n                additional_ancestors.append(\n                    (descendent, len(descendent.children) - 1))\n                descendent = descendent.children[-1]\n            ancestors.extend(additional_ancestors)\n            self.contents[index] = descendent.contents[-1]\n            descendent.remove(len(descendent.children) - 1, ancestors)\n        else:\n            self.contents.pop(index)\n            if len(self.contents) < minimum and ancestors:\n                self.grow(ancestors)\n\nclass _BPlusLeaf(_BNode):\n    __slots__ = [\"tree\", \"contents\", \"data\", \"next\"]\n\n    def __init__(self, tree, contents=None, data=None, next=None):\n        self.tree = tree\n        self.contents = contents or []\n        self.data = data or []\n        self.next = next\n        assert len(self.contents) == len(self.data), \"one data per key\"\n\n    def insert(self, index, key, data, ancestors):\n        self.contents.insert(index, key)\n        self.data.insert(index, data)\n\n        if len(self.contents) > self.tree.order:\n            self.shrink(ancestors)\n\n    def lateral(self, parent, parent_index, dest, dest_index):\n        if parent_index > dest_index:\n            dest.contents.append(self.contents.pop(0))\n            dest.data.append(self.data.pop(0))\n            parent.contents[dest_index] = self.contents[0]\n        else:\n            dest.contents.insert(0, self.contents.pop())\n            dest.data.insert(0, self.data.pop())\n            parent.contents[parent_index] = dest.contents[0]\n\n    def split(self):\n        center = len(self.contents) // 2\n        median = self.contents[center - 1]\n        sibling = type(self)(\n            self.tree,\n            self.contents[center:],\n            self.data[center:],\n            self.next)\n        self.contents = self.contents[:center]\n        self.data = self.data[:center]\n        self.next = sibling\n        return sibling, sibling.contents[0]\n\n    def remove(self, index, ancestors):\n        minimum = self.tree.order // 2\n        if index >= len(self.contents):\n            self, index = self.next, 0\n\n        key = self.contents[index]\n\n        # if any leaf that could accept the key can do so\n        # without any rebalancing necessary, then go that route\n        current = self\n        while current is not None and current.contents[0] == key:\n            if len(current.contents) > minimum:\n                if current.contents[0] == key:\n                    index = 0\n                else:\n                    index = bisect.bisect_left(current.contents, key)\n                current.contents.pop(index)\n                current.data.pop(index)\n                return\n            current = current.next\n\n        self.grow(ancestors)\n\n    def grow(self, ancestors):\n        minimum = self.tree.order // 2\n        parent, parent_index = ancestors.pop()\n        left_sib = right_sib = None\n\n        # try borrowing from a neighbor - try right first\n        if parent_index + 1 < len(parent.children):\n            right_sib = parent.children[parent_index + 1]\n            if len(right_sib.contents) > minimum:\n                right_sib.lateral(parent, parent_index + 1, self, parent_index)\n                return\n\n        # fallback to left\n        if parent_index:\n            left_sib = parent.children[parent_index - 1]\n            if len(left_sib.contents) > minimum:\n                left_sib.lateral(parent, parent_index - 1, self, parent_index)\n                return\n\n        # join with a neighbor - try left first\n        if left_sib:\n            left_sib.contents.extend(self.contents)\n            left_sib.data.extend(self.data)\n            parent.remove(parent_index - 1, ancestors)\n            return\n\n        # fallback to right\n        self.contents.extend(right_sib.contents)\n        self.data.extend(right_sib.data)\n        parent.remove(parent_index, ancestors)\n\nclass BTree(object):\n    BRANCH = LEAF = _BNode\n\n    def __init__(self, order):\n        self.order = order\n        self._root = self._bottom = self.LEAF(self)\n\n    def _path_to(self, item):\n        \"\"\"\n\n        \"\"\"\n        current = self._root\n        ancestry = []\n\n        while getattr(current, \"children\", None):\n            index = bisect.bisect_left(current.contents, item)\n            ancestry.append((current, index))\n            if index < len(current.contents) \\\n                and current.contents[index] == item:\n                return ancestry\n            current = current.children[index]\n\n        index = bisect.bisect_left(current.contents, item)\n        ancestry.append((current, index))\n        present = index < len(current.contents)\n        present = present and current.contents[index] == item\n        return ancestry\n\n    def _present(self, item, ancestors):\n        last, index = ancestors[-1]\n        return index < len(last.contents) and last.contents[index] == item\n\n    def insert(self, item):\n        current = self._root\n        ancestors = self._path_to(item)\n        node, index = ancestors[-1]\n        while getattr(node, \"children\", None):\n            node = node.children[index]\n            index = bisect.bisect_left(node.contents, item)\n            ancestors.append((node, index))\n        node, index = ancestors.pop()\n        node.insert(index, item, ancestors)\n\n    def remove(self, item):\n        current = self._root\n        ancestors = self._path_to(item)\n\n        if self._present(item, ancestors):\n            node, index = ancestors.pop()\n            node.remove(index, ancestors)\n        else:\n            raise ValueError(\"%r not in %s\" % (item, self.__class__.__name__))\n\n    def __contains__(self, item):\n        return self._present(item, self._path_to(item))\n\n    def __iter__(self):\n        def _recurse(node):\n            if node.children:\n                for child, item in zip(node.children, node.contents):\n                    for child_item in _recurse(child):\n                        yield child_item\n                    yield item\n                for child_item in _recurse(node.children[-1]):\n                    yield child_item\n            else:\n                for item in node.contents:\n                    yield item\n\n        for item in _recurse(self._root):\n            yield item\n\n    def __repr__(self):\n        def recurse(node, accum, depth):\n            accum.append((\"  \" * depth) + repr(node))\n            for node in getattr(node, \"children\", []):\n                recurse(node, accum, depth + 1)\n\n        accum = []\n        recurse(self._root, accum, 0)\n        return \"\\n\".join(accum)\n\n    @classmethod\n    def bulkload(cls, items, order):\n        tree = object.__new__(cls)\n        tree.order = order\n\n        leaves = tree._build_bulkloaded_leaves(items)\n        tree._build_bulkloaded_branches(leaves)\n\n        return tree\n\n    def _build_bulkloaded_leaves(self, items):\n        minimum = self.order // 2\n        leaves, seps = [[]], []\n\n        for item in items:\n            if len(leaves[-1]) < self.order:\n                leaves[-1].append(item)\n            else:\n                seps.append(item)\n                leaves.append([])\n\n        if len(leaves[-1]) < minimum and seps:\n            last_two = leaves[-2] + [seps.pop()] + leaves[-1]\n            leaves[-2] = last_two[:minimum]\n            leaves[-1] = last_two[minimum + 1:]\n            seps.append(last_two[minimum])\n\n        return [self.LEAF(self, contents=node) for node in leaves], seps\n\n    def _build_bulkloaded_branches(self, (leaves, seps)):\n        minimum = self.order // 2\n        levels = [leaves]\n\n        while len(seps) > self.order + 1:\n            items, nodes, seps = seps, [[]], []\n\n            for item in items:\n                if len(nodes[-1]) < self.order:\n                    nodes[-1].append(item)\n                else:\n                    seps.append(item)\n                    nodes.append([])\n\n            if len(nodes[-1]) < minimum and seps:\n                last_two = nodes[-2] + [seps.pop()] + nodes[-1]\n                nodes[-2] = last_two[:minimum]\n                nodes[-1] = last_two[minimum + 1:]\n                seps.append(last_two[minimum])\n\n            offset = 0\n            for i, node in enumerate(nodes):\n                children = levels[-1][offset:offset + len(node) + 1]\n                nodes[i] = self.BRANCH(self, contents=node, children=children)\n                offset += len(node) + 1\n\n            levels.append(nodes)\n\n        self._root = self.BRANCH(self, contents=seps, children=levels[-1])\n\nclass BPlusTree(BTree):\n    LEAF = _BPlusLeaf\n\n    def _get(self, key):\n        node, index = self._path_to(key)[-1]\n\n        if index == len(node.contents):\n            if node.next:\n                node, index = node.next, 0\n            else:\n                return\n\n        while node.contents[index] == key:\n            yield node.data[index]\n            index += 1\n            if index == len(node.contents):\n                if node.next:\n                    node, index = node.next, 0\n                else:\n                    return\n\n    def _path_to(self, item):\n        path = super(BPlusTree, self)._path_to(item)\n        node, index = path[-1]\n        while hasattr(node, \"children\"):\n            node = node.children[index]\n            index = bisect.bisect_left(node.contents, item)\n            path.append((node, index))\n        return path\n\n    def get(self, key, default=None):\n        try:\n            return self._get(key).next()\n        except StopIteration:\n            return default\n\n    def getlist(self, key):\n        return list(self._get(key))\n\n    def insert(self, key, data):\n        path = self._path_to(key)\n        node, index = path.pop()\n        node.insert(index, key, data, path)\n\n    def remove(self, key):\n        path = self._path_to(key)\n        node, index = path.pop()\n        node.remove(index, path)\n\n    __getitem__ = get\n    __setitem__ = insert\n    __delitem__ = remove\n\n    def __contains__(self, key):\n        for item in self._get(key):\n            return True\n        return False\n\n    def iteritems(self):\n        node = self._root\n        while hasattr(node, \"children\"):\n            node = node.children[0]\n\n        while node:\n            for pair in itertools.izip(node.contents, node.data):\n                yield pair\n            node = node.next\n\n    def iterkeys(self):\n        return itertools.imap(operator.itemgetter(0), self.iteritems())\n\n    def itervalues(self):\n        return itertools.imap(operator.itemgetter(1), self.iteritems())\n\n    __iter__ = iterkeys\n\n    def items(self):\n        return list(self.iteritems())\n\n    def keys(self):\n        return list(self.iterkeys())\n\n    def values(self):\n        return list(self.itervalues())\n\n    def _build_bulkloaded_leaves(self, items):\n        minimum = self.order // 2\n        leaves, seps = [[]], []\n\n        for item in items:\n            if len(leaves[-1]) >= self.order:\n                seps.append(item)\n                leaves.append([])\n            leaves[-1].append(item)\n\n        if len(leaves[-1]) < minimum and seps:\n            last_two = leaves[-2] + leaves[-1]\n            leaves[-2] = last_two[:minimum]\n            leaves[-1] = last_two[minimum:]\n            seps.append(last_two[minimum])\n\n        leaves = [self.LEAF(\n            self,\n            contents=[p[0] for p in pairs],\n            data=[p[1] for p in pairs])\n                  for pairs in leaves]\n\n        for i in xrange(len(leaves) - 1):\n            leaves[i].next = leaves[i + 1]\n\n        return leaves, [s[0] for s in seps]\n\ndef main():\n    bt = BTree(2)\n    l = range(20, 0, -1)\n    bt.insert('박씨')\n    bt.insert('정씨')\n    bt.insert('김씨')\n    bt.insert('이씨')\n    bt.insert('황씨')\n\n    BP = BPlusTree(bt)\n\n    BP.insert('박', '박씨')   \n    for i in range(0,5):\n        print list(bt)[i]\n\n    print BP.values()[0]\n    print BP.keys()[0]\n    print BP.items()[0]\n\n    print BP.get('박씨')\n    #for i, item in enumerate(l):\n    #    bt.insert(item)\n    #    print list(bt)\n\nif __name__ == '__main__':\n    #unittest.main()\n    main()\n\n\n",
      "y_true": "sql",
      "pred_label": "html",
      "p_bash": 0.0014434147587917693,
      "p_css": 0.06173491267387575,
      "p_html": 0.4675560567928674,
      "p_java": 2.245222167225078e-06,
      "p_javascript": 0.0008196875145523759,
      "p_matlab": 8.059883044434105e-05,
      "p_python": 0.24394410970117072,
      "p_sql": 0.2237978100981717,
      "p_typescript": 0.0006211644079587974
    },
    {
      "text": "def lcs(str1, str2):\n    matrix = [[0] * (len(str2) + 1) for i in range(len(str1) + 1)]\n\n    for i, x in enumerate(str1):\n        for j, y in enumerate(str2):\n            if x == y:\n                matrix[i+1][j+1] = matrix[i][j] + 1\n            else:\n                matrix[i+1][j+1] = max(\n                    matrix[i+1][j],\n                    matrix[i][j+1]\n                )\n\n    result = \"\"\n    x, y = len(str1), len(str2)\n    while x != 0 and y != 0:\n        if matrix[x][y] == matrix[x-1][y]:\n            x -= 1\n        elif matrix[x][y] == matrix[x][y-1]:\n            y -= 1\n        else:\n            result = str1[x-1] + result\n            x -= 1\n            y -= 1\n\n    return result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.780901040672328e-05,
      "p_css": 0.0003188119010364348,
      "p_html": 3.4538746118824965e-06,
      "p_java": 6.919175316309876e-06,
      "p_javascript": 0.0006949587238567746,
      "p_matlab": 0.0013782440675989569,
      "p_python": 0.996002501531928,
      "p_sql": 0.001411937072618883,
      "p_typescript": 0.00014536464262588123
    },
    {
      "text": "def lcs(X, Y): \n    # find the length of the strings\n    m = len(X)\n    n = len(Y)\n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"lmnopq\"\nY = \"abclmnopq\"\nprint(\"Length of LCS is \", lcs(X, Y))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00682076206689991,
      "p_css": 0.00024071411940821072,
      "p_html": 0.0011768166532851805,
      "p_java": 0.00014454721528869854,
      "p_javascript": 0.09305033279039951,
      "p_matlab": 0.006151126126442788,
      "p_python": 0.8197089195810302,
      "p_sql": 0.045588448405301206,
      "p_typescript": 0.02711833304194418
    },
    {
      "text": "def array_sort(array):\n  # Iterate over the array\n  for i in range(len(array)):\n    # Find the minimum element\n    min_position = i\n    for j in range(i + 1, len(array)):\n      if array[min_position] > array[j]:\n        min_position = j\n\n    # Swap minimum element to current position\n    array[i], array[min_position] = array[min_position], array[i]\n  \n  return array",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.144441420928826e-06,
      "p_css": 3.833326528417832e-08,
      "p_html": 1.548588866690795e-07,
      "p_java": 4.434074223469768e-09,
      "p_javascript": 3.157792349398062e-08,
      "p_matlab": 0.9999959614100258,
      "p_python": 3.973859262673601e-07,
      "p_sql": 6.9447463413986514e-09,
      "p_typescript": 2.606137308589089e-07
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.imdb.com/chart/top?sort=us,asc'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nmovie_names = []\nfor div in soup.find_all('div', {'class': 'lister-list'}):\n  for h3 in div.find_all('h3'):\n    movie_names.append(h3.find('a').text)\n\nprint(movie_names)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 5.88500564204729e-16,
      "p_css": 1.042347552816644e-07,
      "p_html": 0.9999993705359324,
      "p_java": 5.233762067178415e-07,
      "p_javascript": 1.316385797929903e-10,
      "p_matlab": 3.110558437218844e-10,
      "p_python": 4.317221707279103e-10,
      "p_sql": 7.76223803265151e-10,
      "p_typescript": 2.0246482220260928e-10
    },
    {
      "text": "def MatrixMultiplication(A, B): \n    # Dimensions of A \n    m = len(A) \n    p = len(A[0]) \n    # Dimensions of B \n    q = len(B) \n    r = len(B[0]) \n    # Generating the result matrix \n    # C with dimensions m x r \n    C = [[0 for row in range(0, r)] for col in range(0, m)] \n    for i in range(0, m): \n        for j in range(0, r): \n            for k in range(0, p): \n                # Performing the multiplication operation \n                C[i][j] += A[i][k] * B[k][j] \n    # Printing the result matrix \n    return C",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.8732425523771208e-06,
      "p_css": 3.853692886377052e-07,
      "p_html": 7.092295466781356e-06,
      "p_java": 7.688697802901435e-08,
      "p_javascript": 2.8516615668543452e-06,
      "p_matlab": 0.03571331503809131,
      "p_python": 0.9641974092110847,
      "p_sql": 4.239207061676751e-05,
      "p_typescript": 3.460422435456806e-05
    },
    {
      "text": "def diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0004236061840302215,
      "p_css": 0.004749273571209615,
      "p_html": 0.00040727595865708716,
      "p_java": 8.978029163573344e-05,
      "p_javascript": 0.00013114479381008055,
      "p_matlab": 0.8092203303931612,
      "p_python": 0.18466586684453282,
      "p_sql": 2.6834555852370355e-05,
      "p_typescript": 0.0002858874071106531
    },
    {
      "text": "class VendingMachine():\n    def __init__(self):\n        # All the items and their prices\n        self.products = {\n            'Chips': 1.5,\n            'Soda': 1.25,\n            'Snickers': 2.25\n        }\n    \n    def dispenseItem(self, inputAmount):\n        for item in self.products:\n            if self.products[item] <= inputAmount:\n                print('Dispensing: ', item)\n                inputAmount -= self.products[item]\n                break\n        self.calculateChange(inputAmount)\n        \n    def calculateChange(self, inputAmount):\n        print('Change remaining: ', inputAmount)\n\nvm = VendingMachine()\nvm.dispenseItem(2.75)",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.00013483845648499623,
      "p_css": 0.18460885966558427,
      "p_html": 0.08941064769510165,
      "p_java": 3.712037294258819e-06,
      "p_javascript": 0.0038560322952278982,
      "p_matlab": 1.7021518442082828e-05,
      "p_python": 0.7001198846754759,
      "p_sql": 0.02180753088624796,
      "p_typescript": 4.1472770141095724e-05
    },
    {
      "text": "\"\"\"\nClass for a given type of rational number, with methods for adding, subtracting, multiplying, and dividing rational numbers.\n\"\"\"\n\nclass Rational:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def add(self, other):\n        numerator = self.numerator * other.denominator + self.denominator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def subtract(self, other):\n        numerator = self.numerator * other.denominator - self.denominator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def multiply(self, other):\n        numerator = self.numerator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def divide(self, other):\n        numerator = self.numerator * other.denominator\n        denominator = self.denominator * other.numerator\n        return Rational(numerator, denominator)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0030295636475598463,
      "p_css": 0.023232232719380887,
      "p_html": 0.02846637175584641,
      "p_java": 0.0007843127862881786,
      "p_javascript": 0.006273682124007804,
      "p_matlab": 0.0004884627968982203,
      "p_python": 0.9157506625598396,
      "p_sql": 0.01814926224727123,
      "p_typescript": 0.003825449362907908
    },
    {
      "text": "cur.execute(\"UPDATE orders SET customer_name = %s, price = %s WHERE order_id = %s\", (customer_name, price, order_id))\nconn.commit()",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.002907442495689936,
      "p_css": 0.03102809634097995,
      "p_html": 0.002846162761993226,
      "p_java": 0.0005869596004587306,
      "p_javascript": 0.0010896958967589801,
      "p_matlab": 0.001636159008256632,
      "p_python": 0.011939108003552558,
      "p_sql": 0.9431025864141744,
      "p_typescript": 0.004863789478135651
    },
    {
      "text": "def sum_of_squares(numbers):\n    squares_sum = []\n    for i in range(len(numbers)):\n        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))\n    return squares_sum",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.752691231426904e-10,
      "p_css": 1.01949724202616e-13,
      "p_html": 1.3281422925445569e-08,
      "p_java": 3.3747387856257456e-06,
      "p_javascript": 2.8999515628742893e-09,
      "p_matlab": 0.9999959947630629,
      "p_python": 6.056517938455351e-07,
      "p_sql": 6.708681751125796e-09,
      "p_typescript": 1.0809300497642224e-09
    },
    {
      "text": "def multiply(a, b):\n    return a * b\n\nprint(multiply(2, 3))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005597062989074148,
      "p_css": 0.002759366192002012,
      "p_html": 0.001683105059041057,
      "p_java": 8.080659777218204e-05,
      "p_javascript": 0.00036806711307364227,
      "p_matlab": 8.717735040672064e-05,
      "p_python": 0.9925826879231437,
      "p_sql": 0.0012595767852812724,
      "p_typescript": 0.0006195066803716606
    },
    {
      "text": "def compare_strings(str1, str2):\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    return str1 == str2",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0006304094891914443,
      "p_css": 0.0007152767676640104,
      "p_html": 1.1652558039325885e-06,
      "p_java": 0.00015823770037640307,
      "p_javascript": 0.7933115856102356,
      "p_matlab": 0.0001785422047669317,
      "p_python": 0.1975128827295516,
      "p_sql": 0.006483128262983924,
      "p_typescript": 0.0010087719794261837
    },
    {
      "text": "def is_armstrong_number(num):\n  n = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit**n\n    temp //= 10\n  return sum == num",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.4722447182775835e-10,
      "p_css": 1.217820387904097e-11,
      "p_html": 7.96028680582844e-09,
      "p_java": 3.4530842022838878e-09,
      "p_javascript": 1.5216183341010086e-09,
      "p_matlab": 0.9999999859330064,
      "p_python": 8.595745430693185e-11,
      "p_sql": 1.6615530541849827e-10,
      "p_typescript": 6.204888582788997e-10
    },
    {
      "text": "odd_list = []\neven_list = []\n\nfor x in list:\n    if x % 2 == 0:\n        even_list.append(x)\n    else:\n        odd_list.append(x)\n        \nprint(\"Odd numbers: \", odd_list)\nprint(\"Even numbers: \", even_list)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.9027374917432756e-05,
      "p_css": 0.0002829393446013758,
      "p_html": 0.00017891768993964928,
      "p_java": 0.00017958808949696046,
      "p_javascript": 8.393754174131785e-05,
      "p_matlab": 0.9990788539059811,
      "p_python": 6.442335545490488e-06,
      "p_sql": 7.367249377146128e-05,
      "p_typescript": 6.662122400505802e-05
    },
    {
      "text": "# Function to print the pyramid pattern\ndef print_pyramid(n):\n    k = 2*n - 2\n \n    # outer loop to print rows\n    for i in range(0, n):\n      \n        # inner loop to print columns\n        for j in range(0, k):\n            print(end=\" \")\n      \n        # decrementing k after each loop\n        k = k - 1\n     \n        # inner loop to print foo pattern\n        for j in range(0, i+1):       \n            print(\"* \", end=\"\")\n        print(\"\\r\")\n\n# Driver Code\nn = 5\nprint_pyramid(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.3318301489222856e-06,
      "p_css": 1.530176870325175e-05,
      "p_html": 5.494235501177583e-05,
      "p_java": 8.716056985860034e-07,
      "p_javascript": 0.001548452853154677,
      "p_matlab": 0.0022571750132262536,
      "p_python": 0.995601333287172,
      "p_sql": 0.0004415516993320623,
      "p_typescript": 7.703958755233188e-05
    },
    {
      "text": "def removeVowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    new_string = '' \n    for char in string: \n        if char not in vowels: \n            new_string += char \n    return new_string \n\nstring = 'My name is John'\nremoveVowelString = removeVowels(string) \nprint(removeVowelString)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.079660724197431e-09,
      "p_css": 1.4731500738941014e-05,
      "p_html": 1.4820442280162374e-05,
      "p_java": 0.9932290112664697,
      "p_javascript": 1.2742344279489206e-09,
      "p_matlab": 1.2556958353077012e-06,
      "p_python": 0.006224983918631313,
      "p_sql": 0.00051265331961739,
      "p_typescript": 2.536502532035778e-06
    },
    {
      "text": "import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ndef vectorize_corpus(corpus):\n    # Initialize the CountVectorizer\n    vectorizer = CountVectorizer()\n    # Fit the corpus\n    X = vectorizer.fit_transform(corpus)\n    # Convert the sparse matrix to numpy array\n    X = X.toarray()\n    # Return the vectorized corpus and the corresponding feature names\n    return X, vectorizer.get_feature_names()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.055962888779650104,
      "p_css": 0.011775588589346953,
      "p_html": 0.0013064183197887408,
      "p_java": 3.051994760598885e-05,
      "p_javascript": 0.0006214397406177619,
      "p_matlab": 3.608969092347444e-05,
      "p_python": 0.2555891972077129,
      "p_sql": 8.179439068684068e-05,
      "p_typescript": 0.6745960633336674
    },
    {
      "text": "import random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.4744203595071659e-05,
      "p_css": 0.00010524342835427418,
      "p_html": 1.3585148665382513e-05,
      "p_java": 1.233359513340508e-06,
      "p_javascript": 0.00038624455622916223,
      "p_matlab": 2.417349326436117e-07,
      "p_python": 0.9982744275060678,
      "p_sql": 0.001084732070177837,
      "p_typescript": 0.00011954799246437164
    },
    {
      "text": "import heapq\n\ndef create_heap(items):\n heapq.heapify(items)\n\ndef add_item(items, item):\n heapq.heappush(items, item)\n\ndef pop_item(items):\n return heapq.heappop(items)\n\nitems = [4, 5, 2, 33, 1]\ncreate_heap(items)\nadd_item(items, 6)\npop_item(items)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008201275523524489,
      "p_css": 0.19879472229206438,
      "p_html": 0.005731191742109754,
      "p_java": 0.00015739687024064102,
      "p_javascript": 0.09797314386532817,
      "p_matlab": 9.172451953995681e-05,
      "p_python": 0.6952765090050835,
      "p_sql": 0.0011314161939589018,
      "p_typescript": 2.3767959322304308e-05
    },
    {
      "text": "import re\n\ndef contains_numbers(string):\n    \"\"\"Classify if a given string contains any numbers.\"\"\"\n    return bool(re.search(r'\\d', string))\n\n# Usage Example\nstring = \"password123\"\ncontains_numbers = contains_numbers(string)\nprint(contains_numbers)  # True",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 6.604804707241579e-19,
      "p_css": 1.3337008421551171e-11,
      "p_html": 9.648333076350276e-11,
      "p_java": 0.9999999900825255,
      "p_javascript": 1.3894683212555615e-19,
      "p_matlab": 1.7166420366902862e-15,
      "p_python": 9.5559722645674e-09,
      "p_sql": 2.509165863147486e-10,
      "p_typescript": 7.635712618873008e-13
    },
    {
      "text": "import re\n\npattern = r'myname=(?P<name>.+?)&email=(?P<email>.+?)&age=(?P<age>.+)'\nstring = 'myname=Linda&email=linda@example.com&age=30'\n\n# Extract values\nmatch = re.search(pattern, string)\nname = match.group('name')\nemail = match.group('email')\nage = match.group('age')\n\n# Print results\nprint('Name:', name)\nprint('Email:', email)\nprint('Age:', age)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.9124926301024265e-11,
      "p_css": 1.4659789403585163e-05,
      "p_html": 1.4286996481239578e-05,
      "p_java": 0.9999536823729517,
      "p_javascript": 1.561038351691148e-13,
      "p_matlab": 3.988371341579059e-10,
      "p_python": 1.7297626842525888e-05,
      "p_sql": 6.922030278341658e-08,
      "p_typescript": 3.565899957650035e-09
    },
    {
      "text": "import re\n\nHEX_COLOR_REGEX = re.compile(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.019518412638421596,
      "p_css": 0.0010372592834589666,
      "p_html": 0.8903954206331386,
      "p_java": 4.77543016320683e-06,
      "p_javascript": 0.00037782835097426005,
      "p_matlab": 0.0001807787826082367,
      "p_python": 0.08745745745481771,
      "p_sql": 0.00027781246297658096,
      "p_typescript": 0.0007502549634408149
    },
    {
      "text": "def generate_fibonacci_series(n):\n    print(\"0\")\n    current = 0\n    next = 1\n    for i in range(0, n):\n        print(current)\n        temp = current\n        current = next\n        next = temp + next",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00045714765966466147,
      "p_css": 0.0009165033024394805,
      "p_html": 0.0006523314787419312,
      "p_java": 6.886416788022521e-05,
      "p_javascript": 0.00011467650024192984,
      "p_matlab": 0.956273742670223,
      "p_python": 0.03811210558368743,
      "p_sql": 0.0029616660164509165,
      "p_typescript": 0.00044296262067055085
    },
    {
      "text": "import nltk\nimport sklearn\n\n# load the data \ndata = list(nltk.corpus.gutenberg.sents('melville-moby_dick.txt'))\n\n# pre-process the data to remove stopwords, punctuation, numbers and special characters, and lowercase it\nprocessed_data = [nltk.word_tokenize(str(sentence)) for sentence in data] \nprocessed_data = [nltk.pos_tag(sentence) for sentence in processed_data]\n\n# create the features for the model \nfeaturesets = [(nltk.pos_tag(sentence), category) for sentence, category in processed_data]\n\n# split the data into training and testing sets\ntraining_set = featuresets[:int(len(featuresets)*0.8)]\ntesting_set = featuresets[int(len(featuresets)*0.8):]\n\n# create the text mining model using Naive Bayes \ntext_classifier = SklearnClassifier(naive_bayes.MultinomialNB())\n \n# Train the model \ntext_classifier.train(training_set)\n\n# Test the accuracy of the model \nprint('Text Mining Model Accuracy: ', nltk.classify.accuracy(text_classifier, testing_set))",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0009475516948826787,
      "p_css": 0.0010549547571149683,
      "p_html": 0.0002175351674342848,
      "p_java": 1.7968806237512537e-05,
      "p_javascript": 8.384606220129184e-05,
      "p_matlab": 1.3597452003555636e-07,
      "p_python": 0.0027597517837278647,
      "p_sql": 1.54619307977919e-05,
      "p_typescript": 0.9949027938230837
    },
    {
      "text": "def factorial(number):\n  total = 1\n  while number > 0: \n    total *= number\n    number -= 1\n  return total\n\nprint(factorial(5))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.1289166072741617e-06,
      "p_css": 0.00010761758243823784,
      "p_html": 3.4685277071794325e-05,
      "p_java": 1.4710979645218852e-06,
      "p_javascript": 3.761216855472155e-06,
      "p_matlab": 1.0320223247868776e-06,
      "p_python": 0.999832478081221,
      "p_sql": 6.271478034538918e-06,
      "p_typescript": 9.554327482619609e-06
    },
    {
      "text": "# Function to calculate the Mertens function\ndef mertens_function(m):\n    # Initialize the result\n    res = 0\n    \n    # Iterate over all numbers from 1 to m\n    for j in range(1, m+1):\n        res += moebius_function(j)\n    \n    return res\n\n# Function to calculate the Moebius function\ndef moebius_function(n):\n    # Initialize result \n    res = 1\n    \n    # Iterate over all factors\n    for i in range(2, n + 1):\n        cnt = 0\n        while n % i == 0:\n            n = int(n / i)\n            cnt += 1\n           \n        if cnt > 1: \n            res = 0\n            break\n        if cnt == 1: \n            res = -res \n        \n    return res\n\n# Main Program\nm = int(input(\"Enter the range: \"))\n\nres = mertens_function(m)\n\nprint(\"The Mertens function of\", m, \"is\", res)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0005107003261837956,
      "p_css": 0.00038392846697736,
      "p_html": 7.433242592935402e-05,
      "p_java": 0.00019082080614315537,
      "p_javascript": 0.9596237209003482,
      "p_matlab": 2.1474076688626347e-06,
      "p_python": 0.03876872453273453,
      "p_sql": 0.00040588589104321993,
      "p_typescript": 3.973924297163863e-05
    },
    {
      "text": "def sort_descending(list):\n    sorted_list = sorted(list, reverse=True)\n    return sorted_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0024341039776663016,
      "p_css": 0.009106758946361083,
      "p_html": 0.0062608584934444305,
      "p_java": 0.00027276620780972486,
      "p_javascript": 0.0041492793211643265,
      "p_matlab": 0.0011451852822378862,
      "p_python": 0.9725176460328079,
      "p_sql": 0.0034139172784795504,
      "p_typescript": 0.0006994844600287522
    },
    {
      "text": "def bin_from_text(text):\n    bin_text = \"\"\n    for char in text:\n        bin_text += bin(ord(char)).lstrip(\"0b\") + \" \"\n    return bin_text",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.434025122012326,
      "p_css": 0.020743258984085182,
      "p_html": 0.0009950253156948761,
      "p_java": 1.145785032018122e-05,
      "p_javascript": 0.0007221571434375335,
      "p_matlab": 0.0015469111515802507,
      "p_python": 0.5323078572327481,
      "p_sql": 0.008990337295636572,
      "p_typescript": 0.0006578730141713921
    },
    {
      "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.datasets import mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Normalize our data\nx_train = x_train.astype('float32') / 255\nx_test = x_test.astype('float32') / 255\n\n# Reshape image data\nx_train = x_train.reshape((x_train.shape[0], 28, 28, 1))\nx_test = x_test.reshape((x_test.shape[0], 28, 28, 1))\n\n# Convert class vectors to binary class matrices\ny_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)\n\n# Create our neural network\nmodel = keras.Sequential([\n keras.layers.Conv2D(32, \n  kernel_size=(3, 3),\n  activation='relu',\n  input_shape=(28, 28, 1)\n ),\n keras.layers.MaxPooling2D(pool_size=(2, 2)),\n keras.layers.Conv2D(64,\n  kernel_size=(3, 3),\n  activation='relu'\n ),\n keras.layers.MaxPooling2D(pool_size=(2, 2)),\n keras.layers.Flatten(),\n keras.layers.Dense(128, activation='relu'),\n keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(\n optimizer='adam',\n loss=keras.losses.categorical_crossentropy,\n metrics=['accuracy']\n)\n\n# Fit our model\nmodel.fit(x_train, y_train, batch_size=64, epochs=2, verbose=1)\n\n# Evaluate our model\nscore = model.evaluate(x_test, y_test, verbose=0)\n\n# Print our model's accuracy\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006479100693147131,
      "p_css": 0.039082424439244215,
      "p_html": 0.1765868614543305,
      "p_java": 0.000150533341254793,
      "p_javascript": 3.2116799842276086e-05,
      "p_matlab": 0.006186781698149476,
      "p_python": 0.6808284167528246,
      "p_sql": 0.00020168743337559958,
      "p_typescript": 0.09045207738783143
    },
    {
      "text": "\"\"\"\nCreate a Python script that monitors a given URL and sends an email notification if there is an error while accessing the resource\n\"\"\"\n\nimport requests\nimport smtplib\n\n# Monitor the URL\nURL = 'https://example.com'\nresponse = requests.get(URL)\nstatus_code = response.status_code\n\n# Send an email if there is an error\nif status_code == 404:\n    # Set up the email server\n    server = smtplib.SMTP('smtp.example.com', 25)\n    server.ehlo()\n    server.starttls()\n\n    # Set the 'from' and 'to' addresses\n    from_email = 'monitor@example.com'\n    to_email = 'admin@example.com'\n\n    # Construct the message\n    message = 'Error 404 on ' + URL\n\n    # Send the email\n    server.sendmail(from_email, to_email, message)\n    server.quit()",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.9279260854758065e-15,
      "p_css": 4.086343355720579e-06,
      "p_html": 4.57815931959691e-05,
      "p_java": 0.9999267964912371,
      "p_javascript": 2.3945364033468343e-06,
      "p_matlab": 5.741985155419174e-10,
      "p_python": 3.490662012372171e-07,
      "p_sql": 4.8877300745932337e-08,
      "p_typescript": 2.0542518102311295e-05
    },
    {
      "text": "import nltk\nimport numpy as np\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_score(text): \n   \"\"\"\n   Computes the sentiment score of a given text.\n   \"\"\"\n   sid = SentimentIntensityAnalyzer()\n   scores = sid.polarity_scores(text)\n   sentiment = np.argmax(list(scores.values()))\n   return sentiment \n\nif __name__ == '__main__':\n    text = 'I love this film'\n    print(sentiment_score(text))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003206128079102123,
      "p_css": 0.03204117614820312,
      "p_html": 0.00041494006023220256,
      "p_java": 6.15965562545723e-05,
      "p_javascript": 2.579718234320947e-05,
      "p_matlab": 0.0001121074515954229,
      "p_python": 0.8561047890952355,
      "p_sql": 0.006492838578389253,
      "p_typescript": 0.10154062684864461
    },
    {
      "text": "# This program creates the string \"999,888,777,666,555\".\n\n# create a list of numbers\nlist = [999, 888, 777, 666, 555]\n\n# join the values in the list\noutput = \",\".join([str(item) for item in list])\n\n# print the output \nprint(output) # Outputs: 999,888,777,666,555",
      "y_true": "sql",
      "pred_label": "bash",
      "p_bash": 0.40388707604433827,
      "p_css": 0.014415823753921905,
      "p_html": 0.24980439905541327,
      "p_java": 0.0007043898277337478,
      "p_javascript": 0.04126017688601961,
      "p_matlab": 0.0007526231465663167,
      "p_python": 0.09021265160278384,
      "p_sql": 0.19484443488592756,
      "p_typescript": 0.004118424797295642
    },
    {
      "text": "import pandas as pd\n\n# Load the input dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split into X and y\nX = data.iloc[:,0:6]\ny = data.iloc[:,6]\n\n# Build the model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n# Make predictions\npredictions = model.predict(X)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.33478999913791013,
      "p_css": 0.09274933260415334,
      "p_html": 0.0065371352245059185,
      "p_java": 4.4956008327220315e-06,
      "p_javascript": 5.732683297518732e-05,
      "p_matlab": 1.648073392725712e-05,
      "p_python": 0.5598072184302689,
      "p_sql": 6.9252881450961426e-06,
      "p_typescript": 0.0060310861472814845
    },
    {
      "text": "def reverse_string(string):\n    result = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        result += string[i]\n    return result\n\nreverse_string(\"hello\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 9.003564281469997e-11,
      "p_css": 3.9609937700996745e-06,
      "p_html": 5.444383914822126e-07,
      "p_java": 0.0062124345417656395,
      "p_javascript": 2.5503296740446867e-12,
      "p_matlab": 9.760353396404083e-08,
      "p_python": 0.9936556843256578,
      "p_sql": 0.000127186875381677,
      "p_typescript": 9.112891345888761e-08
    },
    {
      "text": "def isIsomorphic(s1, s2): \n        if len(s1) != len(s2): \n            return False\n\n        mapping = {} \n        for i in range(len(s1)): \n            if s1[i] in mapping: \n                if mapping[s1[i]] != s2[i]: \n                    return False\n            else: \n                if s2[i] in mapping.values(): \n                    return False\n                mapping[s1[i]] = s2[i] \n\n        return True\n\ns1 = \"add\"\ns2 = \"egg\"\n\nif(isIsomorphic(s1, s2) == True): \n    print(\"Yes\") \nelse: \n    print(\"No\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00025938779578717956,
      "p_css": 0.0013092502054633684,
      "p_html": 0.0012933228957426716,
      "p_java": 4.2055858609435926e-05,
      "p_javascript": 3.5921042967796656e-05,
      "p_matlab": 0.000841891682720079,
      "p_python": 0.9956706709628017,
      "p_sql": 0.0004168680760669825,
      "p_typescript": 0.0001306314798405854
    },
    {
      "text": "def triangle_numbers(n):\n    res = 0\n    for i in range(n):\n        res += i+1\n    return res\n\nresult = triangle_numbers(n)\nprint(result) # output: 15",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.55457756990785e-05,
      "p_css": 0.0005109496158511903,
      "p_html": 5.080991381009801e-05,
      "p_java": 8.233762605202633e-07,
      "p_javascript": 2.9158080376628646e-06,
      "p_matlab": 0.0005602779999509795,
      "p_python": 0.9987353361035447,
      "p_sql": 0.00011109906758859839,
      "p_typescript": 2.2423392573588744e-06
    },
    {
      "text": "def calculator():\n    while True:\n        operation = input('''\n        Please type in the math operation you would like to complete:\n        + for addition\n        - for subtraction\n        * for multiplication\n        / for division\n        ''')\n\n        number_1 = int(input('Please enter the first number: '))\n        number_2 = int(input('Please enter the second number: '))\n\n        if operation == '+':\n            print('{} + {} = '.format(number_1, number_2))\n            print(number_1 + number_2)\n\n        elif operation == '-':\n            print('{} - {} = '.format(number_1, number_2))\n            print(number_1 - number_2)\n\n        elif operation == '*':\n            print('{} * {} = '.format(number_1, number_2))\n            print(number_1 * number_2)\n\n        elif operation == '/':\n            print('{} / {} = '.format(number_1, number_2))\n            print(number_1 / number_2)\n\n        else:\n            print('You have not typed a valid operator, please run the program again.')\n            break\n\ncalculator()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.8736992437710953,
      "p_css": 0.005816456429823486,
      "p_html": 3.504810245688947e-05,
      "p_java": 2.1377221954685553e-05,
      "p_javascript": 8.261426921210331e-05,
      "p_matlab": 1.6811564849174064e-06,
      "p_python": 0.11945429960092192,
      "p_sql": 0.00018327884635516734,
      "p_typescript": 0.0007060006016956432
    },
    {
      "text": "def count_vowels(s):\n  count = 0\n  vowels = \"aeiou\"\n  \n  for char in s:\n    if char in vowels: \n      count += 1\n  \n  return count",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001713465489245073,
      "p_css": 0.0029755504892427774,
      "p_html": 0.00052674182441053,
      "p_java": 6.308988679257107e-06,
      "p_javascript": 0.0001252430177589453,
      "p_matlab": 0.0031036749285393932,
      "p_python": 0.9921998705676986,
      "p_sql": 0.0007216979928539966,
      "p_typescript": 0.00016956564189176554
    },
    {
      "text": "def mean(data):\n    return sum(data) / len(data)\n\ndef median(data):\n    sorted_data = sorted(data)\n    mid = len(data)//2\n    if len(data) % 2 == 0:\n        return (sorted_data[mid] + sorted_data[mid-1])/2\n    else:\n        return sorted_data[mid]\n\ndef mode(data):\n    counted_data = dict()\n    for item in data:\n        if item not in counted_data:\n            counted_data[item] = 1\n        else:\n            counted_data[item] += 1\n    highest_count = 0\n    modes = []\n    for key, value in counted_data.items():\n        if value > highest_count:\n            modes = [key]\n            highest_count = value\n        elif value == highest_count:\n            modes.append(key)\n    if len(modes) == len(data):\n        modes = []\n    return modes",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 5.470975438759269e-05,
      "p_css": 0.5735287278397897,
      "p_html": 0.021516189268343124,
      "p_java": 1.1516223892389745e-05,
      "p_javascript": 0.00046990409343275794,
      "p_matlab": 0.3977513251962516,
      "p_python": 0.003257396948021485,
      "p_sql": 0.0030011576156666786,
      "p_typescript": 0.0004090730602148331
    },
    {
      "text": "@app.route(\"/get_top_user\", methods=[\"GET\"])\ndef get_top_user():\n    user_list = Users.query.order_by(desc(Users.score)).first()\n    return jsonify(user_list.serialize())",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0015946642082373139,
      "p_css": 0.6715302818064708,
      "p_html": 0.024035906095438656,
      "p_java": 0.0005680689543728618,
      "p_javascript": 0.0008494380752830575,
      "p_matlab": 0.00038636395513669025,
      "p_python": 0.23880618554610508,
      "p_sql": 0.03198039059479139,
      "p_typescript": 0.03024870076416431
    },
    {
      "text": "def fib(n):\n a, b = 0, 1\n while a < n:\n print(a, end=\" \")\n a, b = b, a+b\n print()\n\nn = int(input(\"Enter the number of terms: \"))\nfib(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0003522510359240872,
      "p_css": 0.0006886575527305814,
      "p_html": 0.00038591518158415604,
      "p_java": 0.003650967012301678,
      "p_javascript": 0.0002406292518027671,
      "p_matlab": 1.4092993832155054e-08,
      "p_python": 0.9942362885611911,
      "p_sql": 0.000113360870511882,
      "p_typescript": 0.00033191644095967684
    },
    {
      "text": "def is_palindrome(word):\n    reversed_word = word[::-1]\n    if word == reversed_word:\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.023337483056917723,
      "p_css": 0.0017428823332834018,
      "p_html": 0.01013022564992592,
      "p_java": 2.1410341803178368e-05,
      "p_javascript": 0.00021969974957630458,
      "p_matlab": 0.00017833340787532038,
      "p_python": 0.9637505082582822,
      "p_sql": 0.0003045232418323169,
      "p_typescript": 0.00031493396050334053
    },
    {
      "text": "user_preferences = {\n    'language': 'english',\n    'font_size': 12,\n    'background_color': '#FFFFFF'\n}",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.012113924595821635,
      "p_css": 0.21751322793869066,
      "p_html": 0.21939632882716448,
      "p_java": 0.005005520053197751,
      "p_javascript": 0.020846143576061904,
      "p_matlab": 0.027438350048023034,
      "p_python": 0.32283795334151594,
      "p_sql": 0.0012691447991050242,
      "p_typescript": 0.17357940682041953
    },
    {
      "text": "def multiply_add_one(x, y):\n    print(x + 1 * y)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.035461490781966e-12,
      "p_css": 3.715669161269778e-08,
      "p_html": 7.58296989384162e-11,
      "p_java": 3.9953120795015435e-15,
      "p_javascript": 1.6246227400490235e-13,
      "p_matlab": 2.0235261176510354e-16,
      "p_python": 0.99999991681412,
      "p_sql": 4.5950842141535296e-08,
      "p_typescript": 3.1422001815800516e-13
    },
    {
      "text": "import tensorflow as tf\nfrom tensorflow import keras\n\n# Define model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile Model\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels))\n\n# Make predictions\nsentiment = model.predict(testing_padded)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.14956077773982476,
      "p_css": 0.009004039363415303,
      "p_html": 0.011621864325406997,
      "p_java": 2.630732566024099e-05,
      "p_javascript": 2.6460342064972306e-05,
      "p_matlab": 0.0005715374745525247,
      "p_python": 0.8072855355324767,
      "p_sql": 4.1952857324221e-06,
      "p_typescript": 0.021899282610866044
    },
    {
      "text": "def sortDescending(numbers):\n    for i in range(len(numbers)): \n        for j in range(i):\n            if numbers[j] < numbers[j+1]:\n                temp = numbers[j] \n                numbers[j] = numbers[j+1] \n                numbers[j+1] = temp \n  \n    return numbers\n\nprint(sortDescending([6,2,12,5]))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.179424271239232e-05,
      "p_css": 1.7861186037124705e-05,
      "p_html": 0.0003498025754029929,
      "p_java": 0.6272162090322626,
      "p_javascript": 0.00041730991275565674,
      "p_matlab": 2.9044109506104247e-06,
      "p_python": 0.37183791132833915,
      "p_sql": 8.380875744591603e-05,
      "p_typescript": 4.239855409344609e-05
    },
    {
      "text": "def is_prime(n): \n    if n <= 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.583796435139497e-07,
      "p_css": 2.829063375768894e-08,
      "p_html": 3.962396070607732e-06,
      "p_java": 9.785096474935669e-09,
      "p_javascript": 2.3007483727141916e-08,
      "p_matlab": 9.283407907303936e-05,
      "p_python": 0.9999028516607115,
      "p_sql": 9.45152148318359e-08,
      "p_typescript": 3.78860726559015e-08
    },
    {
      "text": "class StringComparator:\n\ndef __init__(self, string1, string2):\n self.string1 = string1\n self.string2 = string2\n\ndef is_equal(self):\n return self.string1 == self.string2\n\ndef is_different(self):\n return self.string1 != self.string2\n\ndef is_similar(self, threshold=0.5):\n distance = edit_distance(self.string1, self.string2)\n max_length = max(len(self.string1), len(self.string2))\n\n return distance / max_length < threshold",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00017790509430224628,
      "p_css": 0.0062232147010504455,
      "p_html": 0.02685221075527326,
      "p_java": 1.964718649145024e-05,
      "p_javascript": 0.00010503523562968682,
      "p_matlab": 1.0875879038926764e-05,
      "p_python": 0.9136006838810413,
      "p_sql": 0.05261018748253291,
      "p_typescript": 0.0004002397846397156
    },
    {
      "text": "import json\n\narticle_data = {\n    'name': 'Bob Dylan', \n    'prize': 'Nobel Prize for Literature',\n    'year': 2016,\n    'description': 'having created new poetic expressions within the great American song tradition'\n}\n\nwith open('article_data.json', 'w') as outfile:  \n    json.dump(article_data, outfile)",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.19252877778610958,
      "p_css": 0.7310795543823959,
      "p_html": 0.0025254420028944795,
      "p_java": 0.0024130252002985855,
      "p_javascript": 0.0003880761299594141,
      "p_matlab": 0.0020478173587328676,
      "p_python": 0.026746063590545977,
      "p_sql": 0.00022049483351320597,
      "p_typescript": 0.04205074871555004
    },
    {
      "text": "# File name: most_frequent_words.py\n\ndef most_frequent_words(text):\n words = text.split()\n word_freq = {}\n \n for word in words:\n if word in word_freq:\n word_freq[word] += 1\n else:\n word_freq[word] = 1\n \n words = sorted(word_freq.items(), key = lambda x: x[1], reverse = True)\n \n return words\n\nresult = most_frequent_words('The cat was playing in the garden. The cat was chasing a butterfly.')\nprint(result)\n# Output: [('The', 2), ('cat', 2), ('was', 2), ('playing', 1), ('in', 1), ('the', 1), ('garden.', 1), ('chasing', 1), ('a', 1), ('butterfly.', 1)]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.16805780552149485,
      "p_css": 0.043562002921809645,
      "p_html": 0.008042783005908109,
      "p_java": 1.6656100767673022e-05,
      "p_javascript": 0.002807507655761174,
      "p_matlab": 0.00032019260781674134,
      "p_python": 0.748760098662947,
      "p_sql": 0.028033164138349106,
      "p_typescript": 0.0003997893851457464
    },
    {
      "text": "def linearSearch(arr, target):\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1 # target not found",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.37324026526643e-06,
      "p_css": 1.000120318499999e-05,
      "p_html": 1.1250155078973096e-05,
      "p_java": 1.5482890586787309e-06,
      "p_javascript": 6.829787189391357e-07,
      "p_matlab": 0.6030840863056962,
      "p_python": 0.39687702504221894,
      "p_sql": 4.609458848116546e-06,
      "p_typescript": 6.423326929844165e-06
    },
    {
      "text": "import random\n\ndef approximate_probability(event, iterations):\n    num_occurences = 0\n    for i in range(iterations):\n        if event():\n            num_occurences += 1\n    return num_occurences / iterations",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007571039384233067,
      "p_css": 0.0005911518191135055,
      "p_html": 0.0010957805260763908,
      "p_java": 2.9899407523532504e-05,
      "p_javascript": 7.922015533043195e-05,
      "p_matlab": 0.31495213699190033,
      "p_python": 0.6736578251175085,
      "p_sql": 0.008551428780623956,
      "p_typescript": 0.0002854532635000947
    },
    {
      "text": "# Create an empty string \nseq = \"\"\n\n# Loop through the alphabet \nfor i in range(65, 75):\n    # Convert the ASCII code to a character \n    seq += chr(i)\n# Print the output \nprint(seq)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0003607367074618902,
      "p_css": 0.0010130881321363389,
      "p_html": 0.003074176564538271,
      "p_java": 0.0014196364757173567,
      "p_javascript": 0.0004905259152855815,
      "p_matlab": 0.0025295113580403087,
      "p_python": 0.39961755601312104,
      "p_sql": 0.003414661468056901,
      "p_typescript": 0.5880801073656423
    },
    {
      "text": "import random\n\ndef generate_random_even_number():\n    n = 0\n    while n < 1000 or n > 9999:\n        n = 0\n        for i in range(4):\n            n += random.randint(0, 8) * (10 ** i)\n        if n % 2 == 0:\n            break\n    return n",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.523493512591842e-06,
      "p_css": 1.6481775645233887e-06,
      "p_html": 7.011567210474355e-06,
      "p_java": 1.2384988750468245e-07,
      "p_javascript": 1.58159856773835e-06,
      "p_matlab": 0.8107605709761533,
      "p_python": 0.18921408351717214,
      "p_sql": 1.1176548611099084e-06,
      "p_typescript": 5.339165070621657e-06
    },
    {
      "text": "import cv2\nimport numpy as np\nimport tensorflow as tf\n\n# Load the COCO class labels .txt file\nlabels_file_path = tf.keras.utils.get_file('label.txt', 'https://raw.githubusercontent.com/qw3081020/models/master/label.txt')\nwith open(labels_file_path, 'r') as f:\n    labels = [line.strip() for line in f.readlines()]\n\n# Initialize the recognition model\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.ZeroPadding2D((1, 1)))\nmodel.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(len(labels), activation='softmax'))\n\n# Load model weights\nmodel.load_weights('model.h5')\n\n# Load the input image\nimage = cv2.imread('input_image.jpg')\nimage = cv2.resize(image, (300, 300))\n\n# Use the model to predict the labels\nlabels_predicted = model.predict(np.expand_dims(image, axis=0))[0]\n\n# Sort the labels by confidence\nlabels_sorted_by_confidence = [\n    label for label, confidence in \n    sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True)\n]\n\n# Print the predicted labels\nprint(labels_sorted_by_confidence)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.30668917359634157,
      "p_css": 0.007174033133484611,
      "p_html": 0.012478545513562261,
      "p_java": 0.012740582917942606,
      "p_javascript": 6.221741101785815e-05,
      "p_matlab": 1.9060267542586594e-06,
      "p_python": 0.6243694678758049,
      "p_sql": 1.9021687726074073e-06,
      "p_typescript": 0.03648217135631916
    },
    {
      "text": "import numpy as np\n\ndef generate_matrix(m, n, k):\n    matrix = np.random.randint(k + 1, high=9, size=(m, n))\n    return matrix\n\nm = 5\nn = 5\nk = 6\nmatrix = generate_matrix(m, n, k)\nprint(matrix)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009850551779630107,
      "p_css": 0.00131395990878656,
      "p_html": 0.0006672785332429575,
      "p_java": 2.1408474859460946e-05,
      "p_javascript": 2.2161105767041704e-05,
      "p_matlab": 7.9098173208091e-06,
      "p_python": 0.9959763299123747,
      "p_sql": 0.00029182169794895606,
      "p_typescript": 0.0007140753717364838
    },
    {
      "text": "def findCombinations(arr, target): \n    result = [] \n    for i in range(len(arr)-2): \n        for j in range(i + 1, len(arr)-1):  \n            for k in range(j + 1, len(arr)): \n                if arr[i] + arr[j] + arr[k] == target: \n                    temp = [] \n                    temp.append(arr[i]) \n                    temp.append(arr[j]) \n                    temp.append(arr[k]) \n                    result.append(temp) \n  \n    return result\n  \n# Driver Code \narr = [2, 3, 4, 5] \nX = 9\nprint(findCombinations(arr, X))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.2857930796427754e-12,
      "p_css": 2.8129444602429135e-11,
      "p_html": 9.921354682302078e-12,
      "p_java": 4.0543492293823624e-12,
      "p_javascript": 2.5960165351060154e-12,
      "p_matlab": 0.9999999869393115,
      "p_python": 1.2987207508609464e-08,
      "p_sql": 2.9061458491677942e-12,
      "p_typescript": 2.2587966556125505e-11
    },
    {
      "text": "def greatest_common_divisor(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b > 0:\n        a, b = b, a % b\n\n    return a\n\nresult = greatest_common_divisor(12, 24)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007439024999844608,
      "p_css": 0.03729720030723239,
      "p_html": 0.0018888928522778133,
      "p_java": 0.00012517006921657195,
      "p_javascript": 0.0004924228646122335,
      "p_matlab": 0.01452830021590889,
      "p_python": 0.9418822626803645,
      "p_sql": 0.0019547143734805674,
      "p_typescript": 0.0010871341369226599
    },
    {
      "text": "def generate_tree(h): \n    # h is the height of the tree\n    # Initialize the number of spaces per line \n    n_spaces = h - 1\n  \n    # Generate the tree structure \n    for i in range(1, h+1): \n        # Print h-i spaces at the beginning of each line \n        for j in range(n_spaces): \n            print(end=\" \") \n              \n        # Print i stars at the end of each line \n        for j in range(i): \n            print(\"* \", end=\"\") \n              \n        # Move to the next line (Print a newline character) \n        print() \n          \n        # Update the number of spaces used \n        n_spaces -= 1",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.03220544635891975,
      "p_css": 8.764179399917454e-05,
      "p_html": 0.0006249654024686024,
      "p_java": 1.1447351186683763e-06,
      "p_javascript": 0.0014815369181000223,
      "p_matlab": 0.0007946036634775909,
      "p_python": 0.8205130118417693,
      "p_sql": 0.00019796913654844875,
      "p_typescript": 0.14409368014959859
    },
    {
      "text": "positive_numbers = []\nnegative_numbers = []\n\nfor num in numbers:\n if num > 0:\n  positive_numbers.append(num)\n else:\n  negative_numbers.append(num)\n\nprint('Positive numbers:', positive_numbers)\nprint('Negative numbers:', negative_numbers)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.3012171659522887e-07,
      "p_css": 1.5162095768646323e-09,
      "p_html": 1.6029814143710037e-06,
      "p_java": 9.216662464958257e-06,
      "p_javascript": 8.658164648059334e-07,
      "p_matlab": 0.9999730200066532,
      "p_python": 1.3971454375822533e-05,
      "p_sql": 4.6951709154848943e-07,
      "p_typescript": 4.219236091300587e-07
    },
    {
      "text": "import re\n\nIPs = [\"123.235.123.245\", \"54.72.56.14\", \"182.193.146.172\"]\nfor ip in IPs:\n ip_parts = ip.split('.')\n octet1 = ip_parts[0]\n octet2 = ip_parts[1]\n octet3 = ip_parts[2]\n octet4 = ip_parts[3]\n\n print(f'The first octet is {octet1}, the second is {octet2}, the third is {octet3}, and the fourth is {octet4}.')",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.008254398462798426,
      "p_css": 0.008966263000463054,
      "p_html": 0.05055394450284428,
      "p_java": 0.0001355971015501708,
      "p_javascript": 0.2967126152325669,
      "p_matlab": 0.004124329248618802,
      "p_python": 0.006669617467076933,
      "p_sql": 0.00735661862360668,
      "p_typescript": 0.6172266163604748
    },
    {
      "text": "# Import libraries\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\nX = np.loadtxt('data.csv', delimiter=', ',skiprows=1, usecols=[0,1])\ny = np.loadtxt('data.csv', delimiter=', ', skiprows=1, usecols=[2], dtype=str)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5)\n\n# Create and train the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_pred, y_test)\nprint('Model accuracy:', accuracy)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.3352950370175852,
      "p_css": 0.09996576570739492,
      "p_html": 0.014843302307393898,
      "p_java": 3.198003099128877e-06,
      "p_javascript": 4.91652221717766e-05,
      "p_matlab": 1.3064143406204443e-05,
      "p_python": 0.517664551909089,
      "p_sql": 7.205259438040841e-06,
      "p_typescript": 0.03215871043042191
    },
    {
      "text": "def filterStringDict(input):\n    result = {}\n    for key, value in input.items():\n        # Check if value is a string\n        if isinstance(value, str):\n            # Add to result\n            result[key] = value\n    return result",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.1877836451728336e-06,
      "p_css": 0.39945664831204597,
      "p_html": 0.00010558936517035173,
      "p_java": 0.0013962593468776004,
      "p_javascript": 1.828846883163895e-05,
      "p_matlab": 0.5974043641349722,
      "p_python": 1.1876745550531164e-06,
      "p_sql": 0.0016106082039880083,
      "p_typescript": 4.866709913963172e-06
    },
    {
      "text": "def read_int_even_odd():\n    number = int(input(\"Enter an integer: \"))\n    if number % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")\n    \nread_int_even_odd()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00013086901014825012,
      "p_css": 0.0005116683254687627,
      "p_html": 0.00016258272723103923,
      "p_java": 0.0003116991797476466,
      "p_javascript": 0.00037921662077107813,
      "p_matlab": 3.793179569089614e-07,
      "p_python": 0.9982699229810061,
      "p_sql": 0.00013965835650495286,
      "p_typescript": 9.400348116521181e-05
    },
    {
      "text": "def celsius_to_fahrenheit(celsius):\n    \"\"\"\n    Convert Celsius Temperature to Fahrenheit.\n\n    Parameters:\n        celsius (float): Temperature in Celsius\n        \n    Returns:\n        Temperature in Fahrenheit\n    \"\"\"\n    return celsius * 9/5 + 32",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008772979002112772,
      "p_css": 0.020613332873403376,
      "p_html": 0.010345101138790736,
      "p_java": 0.0008953336359390821,
      "p_javascript": 0.007608681290160148,
      "p_matlab": 0.017588082318590586,
      "p_python": 0.9143633587817429,
      "p_sql": 0.004528799205393964,
      "p_typescript": 0.015284331753866516
    },
    {
      "text": "import random\nimport string\n\nlength = 10\nchars = string.ascii_letters + string.digits\npassword = ''.join(random.choice(chars) for i in range(length))\n\nprint(password)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.2412962664581921e-12,
      "p_css": 4.4179791002955394e-09,
      "p_html": 2.8950283616857033e-09,
      "p_java": 3.717146569752706e-05,
      "p_javascript": 3.761348975940544e-13,
      "p_matlab": 2.0200080523841646e-09,
      "p_python": 2.2712751408215735e-06,
      "p_sql": 0.9999605477515312,
      "p_typescript": 1.729977531002503e-10
    },
    {
      "text": "def reverse_string_words(string): \n    words = string.split(\" \") \n    words.reverse()\n    return ' '.join(words)  \n  \nstring = \"Python programming is fun\"\nprint(reverse_string_words(string))",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 8.594948732823672e-12,
      "p_css": 5.71309304932541e-07,
      "p_html": 2.6858097369820235e-07,
      "p_java": 0.9902616059212008,
      "p_javascript": 1.1642665584045477e-12,
      "p_matlab": 1.2266786247949946e-10,
      "p_python": 3.5895471743468054e-05,
      "p_sql": 0.009701617209563007,
      "p_typescript": 4.137478701730111e-08
    },
    {
      "text": "import smtplib\n\nsender = ‘sender@example.com’\nreceivers = ‘receiver@example.com’\n\nmessage = “””\nSubject: Sending Email using Python\n\nThis is a test e-mail message.\n”””\n\ntry:\n   smtpObj = smtplib.SMTP(‘localhost’)\n   smtpObj.sendmail(sender, receivers, message)         \n   print(“Successfully sent email”)\nexcept SMTPException:\n   print(“Error: unable to send email”)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 9.18747296356222e-07,
      "p_css": 0.011043695098200941,
      "p_html": 0.009784290192952063,
      "p_java": 0.9545612552292696,
      "p_javascript": 0.0008162890948151213,
      "p_matlab": 4.2430453747328555e-05,
      "p_python": 0.01870909391250682,
      "p_sql": 0.0009631863955522,
      "p_typescript": 0.004078840875659343
    },
    {
      "text": "import flask\nfrom flask import request, redirect, url_for, render_template\nfrom functools import wraps\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if \"username\" not in flask.session:\n            return redirect(url_for(\"login\", next=flask.request.url))\n        return f(*args, **kwargs)\n    return decorated_function\n\n@app.route(\"/\")\n@login_required\ndef home():\n    pages = [\n        {\"title\": \"Python\", \"slug\": \"python\"},\n        {\"title\": \"JavaScript\", \"slug\": \"javascript\"},\n        {\"title\": \"HTML/CSS\", \"slug\": \"html-css\"}\n    ]\n\n    return render_template(\"cms.html\", pages=pages)\n\n@app.route(\"/login/\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        flask.session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"home\"))\n\n    return render_template(\"login.html\")\n\n@app.route(\"/logout/\")\ndef logout():\n    flask.session.pop(\"username\", None)\n    return redirect(url_for(\"login\"))\n\napp.run()",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 2.880972811762807e-05,
      "p_css": 3.476396680235318e-05,
      "p_html": 0.9999082421269764,
      "p_java": 1.4712119185609479e-07,
      "p_javascript": 3.34088971256264e-06,
      "p_matlab": 5.290376771591862e-08,
      "p_python": 2.0561617679291387e-05,
      "p_sql": 1.4957822178121268e-06,
      "p_typescript": 2.5858635342906595e-06
    },
    {
      "text": "OldList = [5,5,5,2,1,2,3,5]\nNewList = []\n\nfor Num in OldList:\n    if Num not in NewList:\n        NewList.append(Num)\n\nprint(NewList)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.3535948623803694e-08,
      "p_css": 1.6501957661301164e-10,
      "p_html": 8.886282346652255e-08,
      "p_java": 3.570091467401193e-09,
      "p_javascript": 1.3406867257441473e-08,
      "p_matlab": 0.9999994468579414,
      "p_python": 3.419524720476073e-07,
      "p_sql": 2.1373636019240883e-08,
      "p_typescript": 5.027520020902262e-08
    },
    {
      "text": "def remove_elem(string, elem):\n    \"\"\"This function removes a specified element from the given string of words\"\"\"\n    return ' '.join([word for word in string.split() if word != elem])",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 6.281373875861749e-08,
      "p_css": 2.090004350893437e-05,
      "p_html": 5.059145990492578e-05,
      "p_java": 0.9221820928146006,
      "p_javascript": 3.428375776831754e-09,
      "p_matlab": 3.664254975735402e-06,
      "p_python": 0.004315365692836721,
      "p_sql": 0.07342049746852075,
      "p_typescript": 6.82202353758073e-06
    },
    {
      "text": "class FamilyTreeNode:\n    def __init__(self, name, parent=None):\n        self.name = name\n        self.parent = parent\n        self.children = []\n\n    def add_child(self, child):\n        child.parent = self\n        self.children.append(child)\n\n    def get_siblings(self):\n        siblings = []\n        if self.parent is not None:\n            for child in self.parent.children:\n                if not self.name == child.name:\n                    siblings.append(child.name)\n        return siblings",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003583398979014646,
      "p_css": 0.05231818910316075,
      "p_html": 0.20345597983656116,
      "p_java": 0.14313159518452226,
      "p_javascript": 4.060358429301257e-06,
      "p_matlab": 0.0012475460183273533,
      "p_python": 0.38755470650579055,
      "p_sql": 0.20740414347548827,
      "p_typescript": 0.0013003805387057261
    },
    {
      "text": "class Employee:\n    def __init__(self, emp_id, name, department, salary):\n        self.emp_id = emp_id\n        self.name = name\n        self.department = department\n        self.salary = salary",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001425871218911091,
      "p_css": 0.007173400346538827,
      "p_html": 0.05182278869169418,
      "p_java": 0.40176950046421506,
      "p_javascript": 3.464217588845157e-07,
      "p_matlab": 3.030782954622572e-05,
      "p_python": 0.5132547891506817,
      "p_sql": 0.023688831911890695,
      "p_typescript": 0.000834163964763387
    },
    {
      "text": "class Item():\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity\n\n    def update_item(self, quantity):\n        self.quantity += quantity\n        \n    def get_item_price(self):\n        return self.price * self.quantity\n\nclass VendingMachine():\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total_price(self, items):\n        total_price = 0\n        for item in items:\n            total_price += item.get_item_price()\n        return total_price\n\n# Create your items\ncoke = Item('Coke', 1.00, 1)\nchips = Item('Chips', 0.75, 1)\n\n# Create your Vending machine \nvending_machine = VendingMachine([coke, chips])\n\n# Calculate total price\nprice = vending_machine.calculate_total_price([coke, chips])\n\nprint(price) \n\nOutput:\n1.75",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002654498276019516,
      "p_css": 0.2229188539113539,
      "p_html": 0.043070092976017674,
      "p_java": 0.0001837833907811094,
      "p_javascript": 4.4189286021974083e-05,
      "p_matlab": 2.9599111624132973e-06,
      "p_python": 0.7245010009968308,
      "p_sql": 0.008964808158441973,
      "p_typescript": 4.886154178824423e-05
    },
    {
      "text": "import math\n\ndef largest_prime_factor(n):\n\n# Separate the list of larger factors of the number into prime and composite numbers \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n/i))\n# Find the largest prime factor in the list\n    prime_factors = []\n    for potential_factor in factors:\n        is_prime = True\n        for j in range(2,int(math.sqrt(potential_factor))+1):\n            if potential_factor % j == 0 and potential_factor != j: \n                is_prime = False\n        if is_prime:\n            prime_factors.append(potential_factor)\n\n# Return the largest prime factor\n    return max(prime_factors)\n\nprint(largest_prime_factor(331))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0013775562172003552,
      "p_css": 0.0004437834936407803,
      "p_html": 0.0032811210089548513,
      "p_java": 0.03800979579467168,
      "p_javascript": 0.00182375706225905,
      "p_matlab": 0.0005261574645761351,
      "p_python": 0.9198437981700031,
      "p_sql": 0.0006456895930471517,
      "p_typescript": 0.034048341195647105
    },
    {
      "text": "import pandas as pd\n\ndata_df = pd.DataFrame(data)\n\nprint(data_df)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 4.629120645651157e-05,
      "p_css": 0.5789648097067522,
      "p_html": 0.005166425722561436,
      "p_java": 3.510135345053374e-05,
      "p_javascript": 1.803250869860053e-05,
      "p_matlab": 0.00010063378883841971,
      "p_python": 0.37034365028485783,
      "p_sql": 0.008892780779166042,
      "p_typescript": 0.03643227464921831
    },
    {
      "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create the data\ndata = {'Monthly Income': [1900, 2300, 2800, 3500],\n        'Monthly Expenses': [750, 850, 950, 1250]}\ndf = pd.DataFrame(data)\n\n# Train the model\nx = df['Monthly Income'].values.reshape(-1, 1)\ny = df['Monthly Expenses'].values\nreg = LinearRegression().fit(x, y)\n\n# Create the prediction\nprediction = reg.predict([[2300]])\nprint('Predicted total monthly expenses: ', prediction)",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.028508855370286232,
      "p_css": 0.13810775544067436,
      "p_html": 0.006036289040310627,
      "p_java": 3.371157522570679e-05,
      "p_javascript": 0.0001088045455979788,
      "p_matlab": 7.803590586807194e-05,
      "p_python": 0.33602799827679275,
      "p_sql": 4.255766926043723e-05,
      "p_typescript": 0.49105599217598384
    },
    {
      "text": "def contains_number(numbers, number):\n for x in numbers:\n if x == number:\n return True\n return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.687950060505753e-07,
      "p_css": 9.673725866834945e-06,
      "p_html": 2.176283961867932e-05,
      "p_java": 6.89198584881189e-05,
      "p_javascript": 2.1342672824063265e-06,
      "p_matlab": 2.623586040979648e-08,
      "p_python": 0.9998943324917494,
      "p_sql": 1.7968171241269425e-06,
      "p_typescript": 4.84969003993105e-07
    },
    {
      "text": "class Stack:\n  \n    # empty list to store stack elements\n    def __init__(self):\n        self.stack = []\n  \n    # push element to the stack\n    def push(self, data):\n        self.stack.append(data)\n  \n    # pop element from the stack\n    def pop(self):\n        self.stack.pop() \n  \n    # peek element from the stack\n    def peek(self):\n        return self.stack[-1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006043043092144702,
      "p_css": 0.06560998854908473,
      "p_html": 0.033075349423558734,
      "p_java": 2.0230592669285547e-05,
      "p_javascript": 0.0009738430993477302,
      "p_matlab": 0.0007370742736565202,
      "p_python": 0.8746250285958138,
      "p_sql": 0.01463864908055169,
      "p_typescript": 0.009715532076103109
    },
    {
      "text": "import requests\nimport bs4\n\nurl = 'https://example.com/articles'\n\n# Fetch the page\nresponse = requests.get(url)\nhtml_soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n# Extract list of articles from the page\narticles = html_soup.find_all('article')\n\n# Iterate over the articles\nfor article in articles:\n # Extract the title, author, and content\n title = article.find('h2').text\n author = article.find('p', {'class': 'author'}).text\n content = article.find('p', {'class': 'content'}).text\n \n # Print out the extracted values\n print(\"Title:\", title)\n print(\"Author:\", author)\n print(\"Content:\", content)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 8.862154252780664e-09,
      "p_css": 6.678874403203233e-05,
      "p_html": 0.9891839511361534,
      "p_java": 0.005032786865186673,
      "p_javascript": 6.416615430226924e-05,
      "p_matlab": 0.00493310348824507,
      "p_python": 0.00024765071821255863,
      "p_sql": 0.0002248662109651137,
      "p_typescript": 0.0002466778207484406
    },
    {
      "text": "def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n        else:\n            duplicates.append(i)\n    return duplicates",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0001758023645368089,
      "p_css": 0.0004508179673392897,
      "p_html": 0.0002663731231464053,
      "p_java": 0.00022449293680585814,
      "p_javascript": 4.0512298466649895e-05,
      "p_matlab": 0.9856312902967824,
      "p_python": 0.013019192346822877,
      "p_sql": 3.027098993809745e-05,
      "p_typescript": 0.00016124767616157665
    },
    {
      "text": "def normalize(arr):\n    minVal = min(arr)\n    maxVal = max(arr)\n    normalizedArr = [(x - minVal) / (maxVal - minVal) for x in arr]\n    return normalizedArr\n\nresult = normalize([3, 4, 6, 8, 10])\nprint(result)  // [0.0, 0.2, 0.4, 0.6, 0.8]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.593473283028674e-05,
      "p_css": 0.0015129319044141151,
      "p_html": 0.00011713130998208041,
      "p_java": 1.5786593916563164e-05,
      "p_javascript": 4.5884243342400703e-05,
      "p_matlab": 0.27257111370797227,
      "p_python": 0.7255457903121642,
      "p_sql": 1.5946012170145177e-05,
      "p_typescript": 0.0001194811832078954
    },
    {
      "text": "def solve_scheduling(tasks):\n    # Sort tasks by their finish time\n    tasks.sort(key=lambda task: task[\"end\"])\n\n    # Initialize the solution sequence\n    sequence = [tasks[0]]\n\n    # Loop over the rest of the tasks in order\n    for curr_task in tasks[1:]:\n        last_task = sequence[-1]\n        if curr_task[\"start\"] >= last_task[\"end\"]:\n            sequence.append(curr_task)\n\n    return sequence\n\ntasks = [{\"start\":3, \"end\":7}, {\"start\":1, \"end\":2}, {\"start\":6, \"end\":10}, {\"start\":8, \"end\":11}, {\"start\":12, \"end\":15}]\nsequence = solve_scheduling(tasks)\n\nprint(\"The sequence of tasks is:\")\nfor task in sequence:\n    print(task)",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.0004885282741177924,
      "p_css": 0.0002675731141562535,
      "p_html": 0.006136022719009383,
      "p_java": 0.00015786019508285876,
      "p_javascript": 0.007113807897796503,
      "p_matlab": 0.0018838834655778198,
      "p_python": 0.1506029859907578,
      "p_sql": 0.010769454231979099,
      "p_typescript": 0.8225798841115225
    },
    {
      "text": "def frequency_of_words(s):\n    # split the string into words\n    words = s.split(' ')\n    \n    # create a dictionary and initialize the frequency to 0\n    frequency = {}\n    \n    for word in words:\n        if word not in frequency:\n            # if this is a new word, then add it to the dictionary\n            frequency[word] = 0\n        \n        # increment the frequency of this word\n        frequency[word] += 1\n    \n    return frequency",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.006168130468464813,
      "p_css": 0.01683243834173857,
      "p_html": 0.019830381544648824,
      "p_java": 0.0032271247419821476,
      "p_javascript": 0.00011459126085341951,
      "p_matlab": 0.00012821116805400757,
      "p_python": 0.37840610331061936,
      "p_sql": 0.14856428492746646,
      "p_typescript": 0.42672873423617236
    },
    {
      "text": "def concatenate_strings(str1, str2):\n    return str1 + str2\n\nprint(concatenate_strings(\"Hello\", \"world!\"))",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.035416178733799895,
      "p_css": 0.00015726990545465302,
      "p_html": 2.1881239807302957e-06,
      "p_java": 5.944811099591753e-11,
      "p_javascript": 0.8415457084650794,
      "p_matlab": 6.635278850408866e-06,
      "p_python": 0.12242196782840448,
      "p_sql": 0.0003624115426017217,
      "p_typescript": 8.764006238042486e-05
    },
    {
      "text": "\"\"\"Mission Pinball Framework (mpf) setup.py.\"\"\"\nimport re\nfrom setuptools import setup\n\n#  http://stackoverflow.com/questions/458550/standard-way-to-embed-version-into-python-package\nVERSIONFILE = \"mpf/_version.py\"\nVERSION_STRING_LONG = open(VERSIONFILE, \"rt\").read()\nVSRE = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\n_MO = re.search(VSRE, VERSION_STRING_LONG, re.M)\nif _MO:\n    VERSION_STRING = _MO.group(1)\nelse:\n    raise RuntimeError(\"Unable to find version string in %s.\" % (VERSIONFILE,))\n\npin2dmd_requires = [\n    'pyusb==1.1.0'\n]\n\nlinux_i2c_requires = [\n    'smbus2_asyncio==0.0.5'\n]\n\nrpi_requires = [\n    'apigpio-mpf==0.0.3'\n]\n\ncli_requires = [\n    'prompt_toolkit==3.0.8',\n    'asciimatics==1.12.0',\n    'terminaltables==3.1.0',\n]\n\nosc_requires = [\n    'python-osc==1.7.4'\n]\n\nirc_requires = [\n    'irc==19.0.1'\n]\n\nvpe_requires = [\n    'grpcio_tools==1.34.0',\n    'grpcio==1.34.0',\n    'protobuf==3.14.0',\n]\n\ncrash_reporter_requires = [\n    'requests==2.22.0'\n]\n\n\nall_requires = (pin2dmd_requires + cli_requires + linux_i2c_requires + rpi_requires + osc_requires + irc_requires +\n                vpe_requires + crash_reporter_requires)\n\nsetup(\n\n    name='mpf',\n    version=VERSION_STRING,\n    description='Mission Pinball Framework',\n    long_description='''Let's build a pinball machine!\n\nThe Mission Pinball Framework (MPF) is an open source, cross-platform,\nPython-based software framework for powering real pinball machines.\n\nMPF is written in Python. It can run on Windows, OS X, and Linux\nwith the same code and configurations.\n\nMPF interacts with real, physical pinball machines via modern pinball\ncontroller hardware such as a Multimorphic P-ROC or P3-ROC, a FAST Pinball\ncontroller, or Open Pinball Project hardware controllers. You can use MPF to\npower your own custom-built machine or to update the software in existing\nWilliams, Bally, Stern, or Data East machines.\n\nMPF is a work-in-progress that is not yet complete, though we're actively\ndeveloping it and checking in several commits a week. It's MIT licensed,\nactively developed by fun people, and supported by a vibrant, pinball-loving\ncommunity.''',\n\n    url='https://missionpinball.org',\n    author='The Mission Pinball Framework Team',\n    author_email='brian@missionpinball.org',\n    license='MIT',\n\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Natural Language :: English',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX :: Linux',\n        'Topic :: Artistic Software',\n        'Topic :: Games/Entertainment :: Arcade'\n\n    ],\n\n    keywords='pinball',\n\n    include_package_data=True,\n    package_data={'': ['*.yaml', '*.png', '*.so', '*.pyd', '*.ogg', '*.wav']},\n\n    # MANIFEST.in picks up the rest\n    packages=['mpf'],\n\n    zip_safe=False,\n\n    install_requires=['ruamel.yaml==0.15.100',\n                      'pyserial==3.5',\n                      'pyserial-asyncio==0.4;platform_system==\"Windows\"',\n                      'pyserial-asyncio==0.5;platform_system!=\"Windows\"',\n                      'sortedcontainers==2.3.0',\n                      'psutil==5.7.3',\n                      ],\n\n    extras_require={\n        'all': all_requires,\n        'pin2dmd': pin2dmd_requires,\n        'linux_i2c': linux_i2c_requires,\n        'rpi': rpi_requires,\n        'cli': cli_requires,\n        'osc': osc_requires,\n        'irc': irc_requires,\n        'vpe': vpe_requires,\n        'crash_reporter': crash_reporter_requires,\n    },\n\n    tests_require=[],\n    test_suite=\"mpf.tests\",\n\n    entry_points={\n        'console_scripts': [\n            'mpf = mpf.commands:run_from_command_line',\n        ]\n    }\n)\n",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 3.1481949881207062e-06,
      "p_css": 1.2571853852166469e-05,
      "p_html": 5.48704714178561e-06,
      "p_java": 3.5282726987198014e-06,
      "p_javascript": 0.0015910133539275804,
      "p_matlab": 9.680035722343264e-08,
      "p_python": 1.3599642346915924e-07,
      "p_sql": 7.179792997907383e-08,
      "p_typescript": 0.9983839466826809
    },
    {
      "text": "import os\nimport sys\nfrom vulpo.utils import ShellCommand, get_ts\nimport vulpo\nimport vulpo.utils\n\nclass ScriptBase(object):\n\n    def __init__(self, config_file=None):\n        self.instance_id = vulpo.config.get('Instance', 'instance-id', 'default')\n        self.name = self.__class__.__name__\n        self.ts = get_ts()\n        if config_file:\n            vulpo.config.read(config_file)\n\n    def notify(self, subject, body=''):\n        vulpo.utils.notify(subject, body)\n\n    def mkdir(self, path):\n        if not os.path.isdir(path):\n            try:\n                os.mkdir(path)\n            except:\n                vulpo.log.error('Error creating directory: %s' % path)\n\n    def umount(self, path):\n        if os.path.ismount(path):\n            self.run('umount %s' % path)\n\n    def run(self, command, notify=True, exit_on_error=False, cwd=None):\n        self.last_command = ShellCommand(command, cwd=cwd)\n        if self.last_command.status != 0:\n            vulpo.log.error('Error running command: \"%s\". Output: \"%s\"' % (command, self.last_command.output))\n            if notify:\n                self.notify('Error encountered', \\\n                        'Error running the following command:\\n\\t%s\\n\\nCommand output:\\n\\t%s' % \\\n                        (command, self.last_command.output))\n            if exit_on_error:\n                sys.exit(-1)\n        return self.last_command.status\n\n    def main(self):\n        pass\n\n",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.005077780661853782,
      "p_css": 0.07785680766282381,
      "p_html": 0.3767504028130557,
      "p_java": 1.272757189904141e-06,
      "p_javascript": 0.00024113378356340848,
      "p_matlab": 1.5008261850609586e-05,
      "p_python": 0.03019960125793619,
      "p_sql": 0.5097178675419136,
      "p_typescript": 0.00014012525981305869
    },
    {
      "text": "def celsius_to_fahrenheit(celsius): \n    fahrenheit = celsius * 9/5 + 32\n    return fahrenheit",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.012319334203658931,
      "p_css": 0.014520396522004188,
      "p_html": 0.011578587439826333,
      "p_java": 0.0011258383094487681,
      "p_javascript": 0.00284613603025773,
      "p_matlab": 0.0019182078400334461,
      "p_python": 0.9460343510893153,
      "p_sql": 0.0018852782827411408,
      "p_typescript": 0.007771870282714174
    },
    {
      "text": "#! /usr/bin/env python3\n\nimport os\nimport sys\nimport math\n\nfrom itertools import product\n\n# REXI\nfrom mule_local.rexi.REXICoefficients import *\nfrom mule_local.rexi.pcirexi.BeanREXI import BeanREXI\nfrom mule_local.rexi.pcirexi.LRREXI import LRREXI\nfrom mule_local.rexi.trexi.TREXI import *\nfrom mule_local.rexi.cirexi.CIREXI import *\nfrom mule_local.rexi.elrexi.ELREXI import *\nfrom mule_local.rexi.brexi.BREXI import *\n\n# EFloat\nefloat_mode = \"float\"\n\n\ndef get_rexi_benchmarks(jg):\n    # Accumulator of all REXI methods\n    # rexi_method['rexi_method'] = 'file'               # Choose REXI method which is typically 'file' for all file-based ones\n    # rexi_method['rexi_files_coefficients'] = None     # List with approximations for different 'phi' functions\n    rexi_methods = []\n\n    #\n    # CI REXI\n    #\n    if True:\n        # REXI stuff\n        def fun_params_ci_N(ci_max_real, ci_max_imag):\n            if ci_max_imag >= 7:\n                return 128\n            else:\n                return 32\n\n        params_ci_max_imag = [30.0]\n        params_ci_max_real = [10.0]\n\n        #\n        # Scale the CI circle radius relative to this time step size\n        # We do this simply to get a consistent time stepping method\n        # Otherwise, CI would not behave consistently\n        # Yes, that's ugly, but simply how it goes :-)\n        #\n        params_ci_max_imag_scaling_relative_to_timestep_size = 480\n        # params_ci_max_imag_scaling_relative_to_timestep_size = None\n\n        params_ci_min_imag = 5.0\n\n        rexi_method = {}\n\n        # Choose REXI method which is typically 'file' for all file-based ones\n        rexi_method['rexi_method'] = 'file'\n\n        # List with approximations for different 'phi' functions\n        rexi_method['rexi_files_coefficients'] = None\n\n        for ci_max_imag, ci_max_real in product(params_ci_max_imag, params_ci_max_real):\n\n            if params_ci_max_imag_scaling_relative_to_timestep_size != None:\n                ci_max_imag *= (jg.runtime.timestep_size / params_ci_max_imag_scaling_relative_to_timestep_size)\n\n            # \"phi0\"\n            cirexi = CIREXI(efloat_mode=efloat_mode)\n            coeffs_phi0 = cirexi.setup(\n                    function_name=\"phi0\",\n                    N=fun_params_ci_N(ci_max_real, ci_max_imag),\n                    lambda_include_imag=ci_max_imag,\n                    lambda_max_real=ci_max_real\n                ).toFloat()\n\n            # \"phi1\"\n            cirexi = CIREXI(efloat_mode=efloat_mode)\n            coeffs_phi1 = cirexi.setup(\n                    function_name=\"phi1\",\n                    N=fun_params_ci_N(ci_max_real, ci_max_imag),\n                    lambda_include_imag=ci_max_imag,\n                    lambda_max_real=ci_max_real\n                ).toFloat()\n\n            # \"phi2\"\n            cirexi = CIREXI(efloat_mode=efloat_mode)\n            coeffs_phi2 = cirexi.setup(\n                    function_name=\"phi2\",\n                    N=fun_params_ci_N(ci_max_real, ci_max_imag),\n                    lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real\n                ).toFloat()\n\n            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]\n\n            # Add to list of REXI methods\n            rexi_methods.append(rexi_method)\n\n    #\n    # EL-REXI\n    #\n    if True:\n        max_imags = [30.0]\n        rexi_method = {}\n\n        # Choose REXI method which is typically 'file' for all file-based ones\n        rexi_method['rexi_method'] = 'file'\n\n        # List with approximations for different 'phi' functions\n        rexi_method['rexi_files_coefficients'] = None\n\n        for max_imag in max_imags:\n            # \"phi0\"\n            elrexi = ELREXI(efloat_mode=efloat_mode)\n            coeffs_phi0 = elrexi.setup(\n                    function_name=\"phi0\",\n                    N=max(64, int(75 * max_imag / 30)),\n                    lambda_max_real=10.5,\n                    lambda_max_imag=max_imag + 2.5\n                ).toFloat()\n\n            # \"phi1\"\n            elrexi = ELREXI(efloat_mode=efloat_mode)\n            coeffs_phi1 = elrexi.setup(\n                    function_name=\"phi1\",\n                    N=max(64, int(75 * max_imag / 30)),\n                    lambda_max_real=10.5,\n                    lambda_max_imag=max_imag + 2.5\n                ).toFloat()\n\n            # \"phi2\"\n            elrexi = ELREXI(efloat_mode=efloat_mode)\n            coeffs_phi2 = elrexi.setup(\n                    function_name=\"phi2\",\n                    N=max(64, int(75 * max_imag / 30)),\n                    lambda_max_real=10.5,\n                    lambda_max_imag=max_imag + 2.5\n                ).toFloat()\n\n            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]\n\n            # Add to list of REXI methods\n            rexi_methods.append(rexi_method)\n\n    #\n    # LR-REXI (Rectangle contour with Gauss-Legendre Quadrature)\n    #\n    if True:\n        max_imags = [30.0]\n        rexi_method = {}\n\n        # Choose REXI method which is typically 'file' for all file-based ones\n        rexi_method['rexi_method'] = 'file'\n\n        # List with approximations for different 'phi' functions\n        rexi_method['rexi_files_coefficients'] = None\n\n        for max_imag in max_imags:\n\n            # \"phi0\"\n            lrrexi = LRREXI(efloat_mode=efloat_mode)\n            coeffs_phi0 = lrrexi.setup(\n                    function_name=\"phi0\",\n                    width=23,\n                    height=2 * max_imag + 20,\n                    center=-1,\n                    N=128).toFloat()\n\n            # \"phi1\"\n            lrrexi = LRREXI(efloat_mode=efloat_mode)\n            coeffs_phi1 = lrrexi.setup(\n                    function_name=\"phi1\",\n                    width=23,\n                    height=2 * max_imag + 20,\n                    center=-1,\n                    N=128).toFloat()\n\n            # \"phi2\"\n            lrrexi = LRREXI(efloat_mode=efloat_mode)\n            coeffs_phi2 = lrrexi.setup(\n                    function_name=\"phi2\",\n                    width=23,\n                    height=2 * max_imag + 20,\n                    center=-1,\n                    N=128).toFloat()\n\n            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]\n\n            # Add to list of REXI methods\n            rexi_methods.append(rexi_method)\n\n    #\n    # Bean-REXI\n    #\n    if True:\n        max_imags = [30.0]\n        rexi_method = {}\n\n        # Choose REXI method which is typically 'file' for all file-based ones\n        rexi_method['rexi_method'] = 'file'\n\n        # List with approximations for different 'phi' functions\n        rexi_method['rexi_files_coefficients'] = None\n\n        for max_imag in max_imags:\n            # \"phi0\"\n            beanrexi = BeanREXI(efloat_mode=efloat_mode)\n            coeffs_phi0 = beanrexi.setup(\n                    function_name=\"phi0\",\n                    horizontal_radius=16,\n                    vertical_radius=max_imag / 30 * 35,\n                    center=-2,\n                    N=max(64, int(75 * max_imag / 30))).toFloat()\n\n            # \"phi1\"\n            beanrexi = BeanREXI(efloat_mode=efloat_mode)\n            coeffs_phi1 = beanrexi.setup(\n                    function_name=\"phi1\",\n                    horizontal_radius=16,\n                    vertical_radius=max_imag / 30 * 35,\n                    center=-2,\n                    N=max(64, int(75 * max_imag / 30))).toFloat()\n\n\n            # \"phi2\"\n            beanrexi = BeanREXI(efloat_mode=efloat_mode)\n            coeffs_phi2 = beanrexi.setup(\n                    function_name=\"phi2\",\n                    horizontal_radius=16,\n                    vertical_radius=max_imag / 30 * 35,\n                    center=-2,\n                    N=max(64, int(75 * max_imag / 30))).toFloat()\n\n            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]\n\n            # Add to list of REXI methods\n            rexi_methods.append(rexi_method)\n\n    return rexi_methods\n\n\nif __name__ == \"__main__\":\n    pass\n",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.18969724752029787,
      "p_css": 0.2351191076323251,
      "p_html": 0.004386725023359858,
      "p_java": 0.23920091046443778,
      "p_javascript": 0.05113402259273956,
      "p_matlab": 0.00016107723997776826,
      "p_python": 0.13725391126945974,
      "p_sql": 0.12471220951602272,
      "p_typescript": 0.01833478874137963
    },
    {
      "text": "def square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01908643423106781,
      "p_css": 0.004551874733318116,
      "p_html": 0.025174384798683027,
      "p_java": 0.20910433914136012,
      "p_javascript": 0.006465393278963129,
      "p_matlab": 5.037628750995642e-05,
      "p_python": 0.6850148453363653,
      "p_sql": 0.0014567567129145558,
      "p_typescript": 0.04909559547981788
    },
    {
      "text": "num = 1\nwhile num <= 10:\n    print(num)\n    num += 1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.371318549240273e-09,
      "p_css": 5.433667356856447e-13,
      "p_html": 1.9793500853863872e-08,
      "p_java": 1.5762753322858168e-09,
      "p_javascript": 1.7521525019945289e-09,
      "p_matlab": 0.9999844847865756,
      "p_python": 1.5477648726109826e-05,
      "p_sql": 1.1696666751045775e-09,
      "p_typescript": 8.901241138864666e-09
    },
    {
      "text": "# Compute the average of the numbers\nnumbers = [1, 2, 3, 4, 5]\ntotal = 0\nfor number in numbers:\n    total += number\n\n# Divide the total by the number of elements in the list\naverage = total / len(numbers)\n\n# Print the average\nprint(average)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.31294185665063e-05,
      "p_css": 0.0010810036694786712,
      "p_html": 0.0007087522965164288,
      "p_java": 0.00047202028833582074,
      "p_javascript": 0.033262720241559185,
      "p_matlab": 3.219010658483462e-08,
      "p_python": 0.947070898070595,
      "p_sql": 0.0002546369298027726,
      "p_typescript": 0.017076806895039
    },
    {
      "text": "import tkinter as tk\n\nroot = tk.Tk()\n\n# Create the two checkboxes\ncat_var = tk.IntVar()\ndog_var = tk.IntVar()\ncat_checkbox = tk.Checkbutton(root, text=\"Cat\", variable=cat_var)\ndog_checkbox = tk.Checkbutton(root, text=\"Dog\", variable=dog_var)\ncat_checkbox.pack()\ndog_checkbox.pack()\n\n# Create the button\nbutton = tk.Button(root, text=\"Submit\")\nbutton.pack()\n\n# Define the button handler\ndef button_handler():\n if cat_var.get():\n print(\"Cat is checked\")\n else:\n print(\"Cat is not checked\")\n\n if dog_var.get():\n print(\"Dog is checked\")\n else:\n print(\"Dog is not checked\")\n\n# Set the button handler\nbutton.configure(command=button_handler)\nroot.mainloop()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.011203916625123525,
      "p_css": 0.03830175203058709,
      "p_html": 0.0082583456200076,
      "p_java": 0.0008992433937577134,
      "p_javascript": 0.01062563868170682,
      "p_matlab": 0.0005430106267191555,
      "p_python": 0.3488401060209644,
      "p_sql": 0.10989746395758557,
      "p_typescript": 0.47143052304354804
    },
    {
      "text": "def merge_sort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n  \n        merge_sort(L)\n        merge_sort(R)\n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nif __name__ == '__main__':\n    arr = [0, 4, 1, 3, 6, 5, 8, 7]\n    print(\"Given array is\", arr)\n    merge_sort(arr) \n    print(\"Sorted array is: \", arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.548355027270717e-06,
      "p_css": 7.927779745802838e-05,
      "p_html": 7.167137846855696e-06,
      "p_java": 4.7425622866687316e-06,
      "p_javascript": 3.029952338696485e-06,
      "p_matlab": 0.9444655947026166,
      "p_python": 0.05540117408201388,
      "p_sql": 1.0885404747309834e-06,
      "p_typescript": 3.0376869937345002e-05
    },
    {
      "text": "import roslib\nimport rospy\nimport sys\nimport timeit\nimport os\nimport Image_Process\nimport cv2\nimport cv2.cv as cv\nimport numpy as np\nimport BoW\nimport Analysis\nimport Segmentation\nfrom sklearn import cluster\nimport Descriptors\n\nclass Learn:\n    def __init__(self):\n        path = \"/media/iglu/Data/Dataset/DatasetIglu/Dataset_united/Ana_point/\"\n        i = 0\n\n        Seg = Segmentation.Segmentation()\n        f = open(path+\"List.txt\",'r')\n        for line in f:\n            print \"Starting Training\"\n            start_time = timeit.default_timer()\n            # code you want to evaluate\n            Time = line\n            file1 = next(f).rstrip('\\n')\n            file2 = next(f).rstrip('\\n')\n            Label = next(f).rstrip('\\n')\n            RGB = cv2.imread(path+\"RGB/\"+file1) #[:-4]+\"_RGB.jpg\"\n            Depth = cv2.imread(path+\"Depth/\"+file2) #[:-4]+\"_Depth.png\"\n            Mesh = []\n            for i in xrange(0, Depth.shape[0]):\n                for j in xrange(0, Depth.shape[1]):\n                    Mesh.append((i, j, Depth[i][j][0]))\n            kmeans = cluster.KMeans(Mesh,8)\n            print kmeans.n_clusters\n            # Depthv = self.Inpaint(Depth)\n            # Seg.CreateCloud(Depth)\n            # L = Seg.PlaneSegmentation()\n            # image = np.zeros(RGB.shape, RGB.dtype)\n            # depth2 = np.zeros(Depth.shape, Depth.dtype)\n            # for data in L:\n            #     image[int(data[0]),int(data[1])] = RGB[int(data[0]),int(data[1])]\n            #     depth2[int(data[0]), int(data[1])] = Depth[int(data[0]), int(data[1])]\n            #     print Depth[int(data[0]), int(data[1])]\n            # Seg.CreateCloud(depth2)\n            # L = Seg.PlaneSegmentation()\n            # image2 = np.zeros(image.shape, image.dtype)\n            # depth3 = np.zeros(depth2.shape, depth2.dtype)\n            # for data in L:\n            #     image2[int(data[0]),int(data[1])] = image[int(data[0]),int(data[1])]\n            #     depth3[int(data[0]), int(data[1])] = depth2[int(data[0]), int(data[1])]\n            #     print Depth[int(data[0]), int(data[1])]\n            elapsed = timeit.default_timer() - start_time\n            print \"Tiempo: \" + elapsed.__str__()\n            cv2.imshow(\"RGB\", RGB )\n            cv2.imshow(\"Depthv\", depth2)\n            cv2.waitKey(0) & 0xFF\n            cv2.destroyAllWindows()\n            # print \"Enviado \"+file+\" \"+i.__str__()\n            # if i >150:\n            #     break\n\n    def Inpaintv1(self,Depth):\n        Depth_Small = Depth\n        Temp2 = Depth\n        x1 = int(Depth.shape[0] * 0.2)\n        x2 = int(Depth.shape[1] * 0.2)\n        x3 = Depth.shape[2]\n        cv2.resize(Depth, (x1, x2), Depth_Small)\n        Temp = Depth_Small\n        mask = (Depth_Small == 0)\n        zeros = np.zeros(Depth_Small.shape, Depth_Small.dtype)\n        ones = np.ones(Depth_Small.shape, Depth_Small.dtype)\n        ones *= 255\n        maskk = np.where(mask == True, ones, zeros)\n        maskk = maskk[:, :, 0]\n        cv2.inpaint(Depth_Small, maskk, 10.0, cv2.INPAINT_TELEA, Temp)\n        cv2.resize(Temp, (Depth.shape[0], Depth.shape[1]), Temp2)\n        return Temp2\n\n    def Inpaint(self,Depth):\n        Depth_Small = Depth\n        Temp2 = Depth\n        Temp = Depth_Small\n        mask = (Depth_Small == 0)\n        zeros = np.zeros(Depth_Small.shape, Depth_Small.dtype)\n        ones = np.ones(Depth_Small.shape, Depth_Small.dtype)\n        ones *= 255\n        maskk = np.where(mask == True, ones, zeros)\n        maskk = maskk[:, :, 0]\n        cv2.inpaint(Depth_Small, maskk, 30.0, cv2.INPAINT_TELEA, Temp)\n        Temp2 = Temp\n        return Temp2\n\ndef main(args):\n    # Learn()\n    oll = np.zeros(25)\n    list = ['glass','Nesquik cereales','fork','bowl','Milk Box','Coke','plate','Heinz ketchup','Apple','lime','orange','Green tea box (Lipton)','cofee mug','Special K','water bottle','banana','Bote Pringles','pitcher','kleenex box','Spoon','Diet Coke','Mayonaise Heinz','Instant noodles','knife','lemon']\n\nif __name__ == '__main__':\n    main(sys.argv)",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 0.008350532898321494,
      "p_css": 0.01578498914708334,
      "p_html": 0.003525717779578567,
      "p_java": 0.9621185944305403,
      "p_javascript": 5.051229992765691e-05,
      "p_matlab": 4.9053446642133195e-08,
      "p_python": 0.009115434634963419,
      "p_sql": 0.0003406722387156704,
      "p_typescript": 0.0007134975174230953
    },
    {
      "text": "def factorial(inp):\n    if inp == 0:\n        return 1\n    else:\n        return inp*factorial(inp-1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0028067494675700867,
      "p_css": 0.0041939051461283745,
      "p_html": 0.0035009641523565094,
      "p_java": 0.0003256938377348423,
      "p_javascript": 0.0016376542615196218,
      "p_matlab": 0.002465871233707549,
      "p_python": 0.9816464634864835,
      "p_sql": 0.00143341196173879,
      "p_typescript": 0.0019892864527605325
    },
    {
      "text": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n# Build Logistic Regression model \nmodel = LogisticRegression() \nmodel.fit(X_train, y_train)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9555546216427595,
      "p_css": 0.0010904768301923796,
      "p_html": 0.0002463133163200332,
      "p_java": 2.758193858241326e-06,
      "p_javascript": 1.6319405630988372e-06,
      "p_matlab": 4.542923740093353e-06,
      "p_python": 0.04305632903591662,
      "p_sql": 1.0975573720244515e-09,
      "p_typescript": 4.33250190928154e-05
    },
    {
      "text": "class Numbers(object): \n    def __init__(self, num1, num2): \n        self.num1 = num1 \n        self.num2 = num2 \n\n    def find_sum(self): \n        return self.num1 + self.num2 \n\n    def find_product(self): \n        return self.num1 * self.num2 \n\n#creating an object \nnum_object = Numbers(22, 10) \n\n#finding sum \nsum_result = num_object.find_sum() \n\n#finding product \nproduct_result = num_object.find_product()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.508052764440429e-05,
      "p_css": 0.002254132462996032,
      "p_html": 0.0029768465647140134,
      "p_java": 1.6785607623615275e-05,
      "p_javascript": 4.817583261230882e-05,
      "p_matlab": 4.212603885673857e-07,
      "p_python": 0.9879967829638368,
      "p_sql": 0.006527233057229716,
      "p_typescript": 0.00015454172295477827
    },
    {
      "text": "def check_pair(arr, sum):\n    s = set()\n    for item in arr:\n        target = sum - item\n        if(target in s):\n            return True\n        s.add(item)\n    return False\n\nprint(check_pair([2, 4, 6, 5], 8))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002628718877823149,
      "p_css": 0.004622291603125922,
      "p_html": 0.02307167965890818,
      "p_java": 0.00305571208770851,
      "p_javascript": 0.0030407849132146067,
      "p_matlab": 0.008507986721690524,
      "p_python": 0.9573481549860959,
      "p_sql": 5.397250788002132e-05,
      "p_typescript": 3.654563359403735e-05
    },
    {
      "text": "def createDict(arr):\n  res = {}\n  for i in range(len(arr)):\n    res[arr[i]] = i + 1\n  return res\n\nd = createDict([2, 3, 1])\nprint(d)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.985645453744416e-06,
      "p_css": 3.0945153171698445e-05,
      "p_html": 5.424761232277525e-06,
      "p_java": 5.369784050519569e-07,
      "p_javascript": 3.4048635121214697e-07,
      "p_matlab": 0.022054990109377823,
      "p_python": 0.9778982162197534,
      "p_sql": 4.809938121210852e-06,
      "p_typescript": 2.7507081336527976e-06
    },
    {
      "text": "import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\n\n# Load the data\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Build the model \nmodel = Sequential()\nmodel.add(Flatten(input_shape=(28, 28)))\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(10, activation=\"softmax\"))\n\n# Compile the model\nmodel.compile(loss=\"sparse_categorical_crossentropy\",\n              optimizer=\"adam\",\n              metrics=[\"accuracy\"])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate the model\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.6820912439710323,
      "p_css": 0.007605878297277686,
      "p_html": 0.01822542639484312,
      "p_java": 8.044706916575691e-05,
      "p_javascript": 2.8337747332028354e-05,
      "p_matlab": 6.844945054109227e-06,
      "p_python": 0.28392626383236436,
      "p_sql": 4.622861117037883e-07,
      "p_typescript": 0.008035095456819005
    },
    {
      "text": "def longestPalindrome(s):\n    answer = ''\n    max_length = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            curr_str = s[i:j]\n            curr_str_rev = curr_str[::-1]\n            \n            if curr_str == curr_str_rev and max_length < len(curr_str):\n                max_length = len(curr_str)\n                answer = curr_str\n    \n    return answer",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.3196229274387214e-05,
      "p_css": 2.115078059031404e-05,
      "p_html": 8.540460819126764e-05,
      "p_java": 1.8870916209783192e-06,
      "p_javascript": 1.6247520259782236e-06,
      "p_matlab": 0.08807840585392897,
      "p_python": 0.91160673160054,
      "p_sql": 9.34901224939682e-05,
      "p_typescript": 9.810896133423677e-05
    },
    {
      "text": "# Function to count words\ndef word_count(string):\n \n # Create a dictionary to store results\n words = {}\n \n # Split the string into words\n for word in string.split():\n \n  # Check if the word is in the dictionary\n  if word in words:\n   # Increment the count\n   words[word] += 1\n  else:\n   # Add the word to the dictionary\n   words[word] = 1\n \n return words\n\n# Test\nstring = 'This is a test string to count the words in the string.'\nprint(word_count(string)) # Output: {'This': 1, 'is': 1, 'a': 1, 'test': 1, 'string': 2, 'to': 1, 'count': 1, 'the': 1, 'words': 1, 'in': 1}",
      "y_true": "css",
      "pred_label": "java",
      "p_bash": 2.7142511834344605e-08,
      "p_css": 0.0007091420073503617,
      "p_html": 0.00016308479324241926,
      "p_java": 0.632841559283451,
      "p_javascript": 3.284260827438428e-08,
      "p_matlab": 5.03604927223511e-08,
      "p_python": 0.031791135603220964,
      "p_sql": 0.33406304462214986,
      "p_typescript": 0.00043192334497267306
    },
    {
      "text": "class SimpleCalculator:\n    \"\"\"A simple class which has methods to do basic arithmetic operations.\"\"\"\n    def __init__(self):\n        \"\"\"Initializing an instance of the SimpleCalculator class.\"\"\"\n        self.result = 0\n    \n    def __str__(self):\n        \"\"\"Returns the string representation for the SimpleCalculator class.\"\"\"\n        return \"Simple Calculator\"\n    \n    def add(self, num1, num2):\n        self.result = num1 + num2\n        return self.result\n    \n    def subtract(self, num1, num2):\n        self.result = num1 - num2\n        return self.result\n    \n    def multiply(self, num1, num2):\n        self.result = num1 * num2\n        return self.result\n    \n    def divide(self, num1, num2):\n        self.result = num1 / num2\n        return self.result",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.4087756224724377e-05,
      "p_css": 0.0009658085586229418,
      "p_html": 0.00015625770725026907,
      "p_java": 3.2868918718256162e-06,
      "p_javascript": 3.1608252962918775e-06,
      "p_matlab": 3.390652232111901e-08,
      "p_python": 0.9941226685592401,
      "p_sql": 0.004647052673266435,
      "p_typescript": 8.764312170531591e-05
    },
    {
      "text": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n        self.down = None\n  \n# Function to create multi-level linked list \ndef multiLevelLL(root): \n    \n    q = Queue() \n    q.put(root) \n    lnk_lnst = [] \n  \n    while q.empty() == False: \n        p = q.get() \n        lnk_lnst.append(p) \n        left = p.next \n        right = p.down \n        if left is not None: \n            q.put(left) \n        if right is not None: \n            q.put(right) \n    return lnk_lnst \n  \n#Example Usage\nroot = Node(10) \nroot.next = Node(2) \nroot.next.next = Node(6) \nroot.next.next.next = Node(8) \nroot.next.next.next.next = Node(4) \n  \nroot.down = Node(3) \nroot.down.down = Node(19) \n  \nroot.next.down = Node(5) \nroot.next.down.down = Node(11) \n  \nroot.next.next.down = Node(7) \n\nllist = multiLevelLL(root) \n# Printing the Multi-level Linked List \nfor i in llist: \n    print(i.data, end = \" \")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00018192316557345137,
      "p_css": 0.011893565804464356,
      "p_html": 0.0029885204903812614,
      "p_java": 0.0002481697076733455,
      "p_javascript": 0.0007290132727298569,
      "p_matlab": 0.0009956694154677227,
      "p_python": 0.707125338905755,
      "p_sql": 0.26970712148859394,
      "p_typescript": 0.006130677749361033
    },
    {
      "text": "def isOdd(number): \n  \n    if number % 2 == 0: \n        return False\n    else: \n        return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.447317867584538e-06,
      "p_css": 2.3495826064075475e-05,
      "p_html": 1.2511913293055531e-05,
      "p_java": 4.326489975695831e-08,
      "p_javascript": 2.021796043078475e-07,
      "p_matlab": 2.0198031909450644e-07,
      "p_python": 0.9999613727447852,
      "p_sql": 5.283693586704271e-07,
      "p_typescript": 1.964038085688411e-07
    },
    {
      "text": "def area_of_triangle(base, height):\n return 0.5 * base * height\n\n# Calculate the area of triangle\na = area_of_triangle(5, 4)\nprint('The area of the triangle is: ', a)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003111432368594311,
      "p_css": 0.020235835596555802,
      "p_html": 0.0058480760593492866,
      "p_java": 0.0009132578172956194,
      "p_javascript": 0.06784656355734976,
      "p_matlab": 0.0001471339724776932,
      "p_python": 0.5742323773312143,
      "p_sql": 0.005851500236854752,
      "p_typescript": 0.3218138230603084
    },
    {
      "text": "prices = [12, 10, 5, 8] \nquantities = [1, 2, 3, 4]\n \ntotal_cost = 0\n\nfor i in range(len(prices)):\n    total_cost += prices[i] * quantities[i]\n\nprint(total_cost)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0008686996795403453,
      "p_css": 0.001383384476383648,
      "p_html": 0.002771575726054922,
      "p_java": 0.0001160594322019963,
      "p_javascript": 0.00020713434288607764,
      "p_matlab": 0.05352435137970955,
      "p_python": 0.9395819584612711,
      "p_sql": 0.0007243237274374733,
      "p_typescript": 0.0008225127745148717
    },
    {
      "text": "string1 + string2\n\nresult = string1 + string2\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00010597935029061986,
      "p_css": 0.0030781569662188812,
      "p_html": 0.00036705919104629975,
      "p_java": 3.1921962375201646e-05,
      "p_javascript": 0.00017825256507329707,
      "p_matlab": 2.524852482308738e-05,
      "p_python": 0.9951070954322943,
      "p_sql": 0.0008169265848707389,
      "p_typescript": 0.000289359423007664
    },
    {
      "text": "def find_profit(cost_price, selling_price):\n    profit = selling_price - cost_price\n    return profit",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002214028927464375,
      "p_css": 0.013197670863383191,
      "p_html": 0.0060862384279290254,
      "p_java": 0.0006922566724860084,
      "p_javascript": 0.001995550414883031,
      "p_matlab": 0.00048060881483527536,
      "p_python": 0.9688638440601955,
      "p_sql": 0.0015158095449330313,
      "p_typescript": 0.0049539922738902585
    },
    {
      "text": "def create_ordered_dict(list_tuple):\n    ordered_dict = OrderedDict()\n    for key, value in list_tuple:\n        ordered_dict[key] = value\n    return ordered_dict",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 7.009567648594181e-07,
      "p_css": 0.029535470824946484,
      "p_html": 4.293034674657605e-06,
      "p_java": 1.0220409742535414e-07,
      "p_javascript": 5.390019158840803e-06,
      "p_matlab": 0.9704503360011419,
      "p_python": 4.0807584405635635e-09,
      "p_sql": 2.6022611171594014e-06,
      "p_typescript": 1.1006173402968316e-06
    },
    {
      "text": "def join_list(lst):\n    return \" \".join(lst)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.647508800229894e-05,
      "p_css": 0.00010994762301918027,
      "p_html": 0.0001276178576485621,
      "p_java": 2.5320332875339783e-06,
      "p_javascript": 2.103693210242015e-05,
      "p_matlab": 7.616227075719982e-07,
      "p_python": 0.03175361970949168,
      "p_sql": 0.967915101978931,
      "p_typescript": 4.2907154809602584e-05
    },
    {
      "text": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n    \ndef display_nth_node(head, n):\n    index = 0\n    current_node = head\n    while current_node and index<n:\n        index += 1\n        current_node = current_node.next\n    if current_node is None:\n        return None\n    else:\n        return current_node.val\n\nhead = ListNode(5)\ndisplayed_node = display_nth_node(head, 2)\nprint(displayed_node) # None",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00016247702448454347,
      "p_css": 0.0037815964668600826,
      "p_html": 0.9548083195900098,
      "p_java": 5.851661649948167e-05,
      "p_javascript": 0.0001387535190512933,
      "p_matlab": 3.245413484672912e-05,
      "p_python": 0.04012369100198058,
      "p_sql": 0.0006744490078767193,
      "p_typescript": 0.00021974263839070633
    },
    {
      "text": "import flask\nfrom flask import Flask, request, jsonify\nimport json\n\napp = Flask(name)\n\n@app.route('/countries', methods=['GET'])\ndef get_countries():\nwith open('data.json', 'r') as f:\n countries = json.load(f)\n return jsonify(countries)\n\nif name == 'main':\n app.run()",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0038339591559078965,
      "p_css": 0.9934905697452311,
      "p_html": 0.0004395724956694738,
      "p_java": 7.782850607041812e-05,
      "p_javascript": 3.555165660836309e-07,
      "p_matlab": 3.085948334056039e-06,
      "p_python": 0.0016993419858722927,
      "p_sql": 0.00032930824497147756,
      "p_typescript": 0.00012597840137719077
    },
    {
      "text": "def find_primes_less_than(max_value):\n    primes=[]\n    for num in range(2, max_value + 1):\n        is_prime = True\n        for i in range(2, num):\n            if (num % i == 0):\n               is_prime = False\n        if is_prime:\n            primes.append(num) \n    return primes",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.3403171221275766e-11,
      "p_css": 8.17102904610599e-16,
      "p_html": 4.572459001400285e-11,
      "p_java": 7.782504390929959e-13,
      "p_javascript": 1.0802040289062107e-12,
      "p_matlab": 0.9999999617061189,
      "p_python": 3.8222419866761424e-08,
      "p_sql": 3.206704255011726e-12,
      "p_typescript": 7.267529054578609e-12
    },
    {
      "text": "def count_matches(list_a, list_b):\n    count = 0\n    for item_a in list_a:\n        for item_b in list_b:\n            if item_b == item_a:\n                count += 1\n    return count",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0013326155864297915,
      "p_css": 0.008570357716763633,
      "p_html": 0.0030849090237006645,
      "p_java": 0.00012493273419515404,
      "p_javascript": 0.001195513268730771,
      "p_matlab": 0.07258161276187317,
      "p_python": 0.9096705632783401,
      "p_sql": 0.0014038315620523202,
      "p_typescript": 0.0020356640679143577
    },
    {
      "text": "arr = [3, 4, 5]\nsum = 0\nfor i in arr:\n    sum = sum + i\n\naverage = sum / len(arr)\nprint(average)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0322682761884711e-06,
      "p_css": 1.55864089022438e-05,
      "p_html": 6.143779684768481e-06,
      "p_java": 6.169951619029229e-05,
      "p_javascript": 6.834571977590452e-07,
      "p_matlab": 0.9998165613852397,
      "p_python": 9.521682602520943e-05,
      "p_sql": 3.383490095077227e-07,
      "p_typescript": 2.7380094742339223e-06
    },
    {
      "text": "data = {'John': 24, 'Adam': 45, 'Kate': 12}\n\ndef get_max_min(data):\n    \"\"\"This function will return the maximum and minimum value of a given dictionary\"\"\"\n    max_value = max(data.values())\n    min_value = min(data.values())\n    return max_value, min_value\n\nif __name__ == '__main__':\n    data = {'John': 24, 'Adam': 45, 'Kate': 12}\n    max_value, min_value = get_max_min(data)\n    print('Max Value: {}, Min Value: {}'.format(max_value, min_value))",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.0011576317280048692,
      "p_css": 0.8102185029640614,
      "p_html": 0.06450947815409697,
      "p_java": 0.0002980130032704851,
      "p_javascript": 0.004209000434650471,
      "p_matlab": 0.034851040710503184,
      "p_python": 0.0026857191634683175,
      "p_sql": 0.007816209476202483,
      "p_typescript": 0.07425440436574188
    },
    {
      "text": "def leftRotate(arr, k): \n    new_arr = arr[k:] + arr[:k] \n    return new_arr",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.222399586191212e-09,
      "p_css": 3.1464776385808855e-08,
      "p_html": 6.92484621431537e-10,
      "p_java": 3.0325112746757914e-09,
      "p_javascript": 3.892451809367542e-09,
      "p_matlab": 0.9999880280129765,
      "p_python": 1.191811573032802e-05,
      "p_sql": 7.794107674641507e-14,
      "p_typescript": 1.0566591722195466e-08
    },
    {
      "text": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00016277398009114638,
      "p_css": 0.014102344873749086,
      "p_html": 0.0170935334240734,
      "p_java": 0.16465574925466983,
      "p_javascript": 1.8500564915872395e-08,
      "p_matlab": 4.473977942547585e-06,
      "p_python": 0.8001276179553167,
      "p_sql": 0.0037303047879695592,
      "p_typescript": 0.00012318324562298014
    },
    {
      "text": "import sqlite3\n\ndef get_table_meta_info(db_name, table_name):\n    conn = sqlite3.connect(db_name)\n    \n    cur = conn.cursor()\n    cur.execute(\"SELECT * FROM \"+ table_name)\n    col_names = [tuple[0] for tuple in cur.description]\n    row_length = len(col_names) \n    \n    cur.execute(\"PRAGMA table_info(\"+ table_name +\")\")\n    table_info = cur.fetchall()\n    \n    data_types = []\n    \n    for row in table_info:\n        data_types.append(row[2])\n        \n    meta_info = {\n            'table_name': table_name,\n            'row_length': row_length,\n            'column_names': col_names,\n            'data_types': data_types\n    }\n    return meta_info",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.0011664333535112035,
      "p_css": 0.004414376996199156,
      "p_html": 0.0010770776224206919,
      "p_java": 0.00011131908560173041,
      "p_javascript": 0.00046163565095487383,
      "p_matlab": 0.0021184315977195453,
      "p_python": 0.005737620349040743,
      "p_sql": 0.9841192822226787,
      "p_typescript": 0.0007938231218731164
    },
    {
      "text": "def generateFibonacci(n): \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    FibArray = [0, 1] \n   \n    while len(FibArray) < n: \n        next_fib_num = FibArray[-1] + FibArray[-2] \n        FibArray.append(next_fib_num) \n      \n    return FibArray \n  \n# Driver Code \nresult = generateFibonacci(10) \nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009417419669153093,
      "p_css": 0.009262759702506281,
      "p_html": 0.0036230705478615373,
      "p_java": 0.004749447447772186,
      "p_javascript": 0.0005863406802249757,
      "p_matlab": 0.0001754384783856112,
      "p_python": 0.8474431168654146,
      "p_sql": 0.0009235200775901475,
      "p_typescript": 0.13229456423332922
    },
    {
      "text": "import nltk\n\ndef tokenize_and_tag(filename):\n tokens = nltk.word_tokenize(open(filename).read())\n tagged_tokens = nltk.pos_tag(tokens)\n print(tagged_tokens)\n\ntokenize_and_tag('text.txt')\n\n# Output: [('The', 'DT'), ('quick', 'JJ'), ('brown', 'NN'), ('fox', 'NN'), ('jumps', 'VBZ'), ('over', 'IN'), ('the', 'DT'), ('lazy', 'JJ'), ('dog', 'NN'), ('.', '.')]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06367470279303922,
      "p_css": 0.0888868489138224,
      "p_html": 0.015750191100591636,
      "p_java": 0.0003685621792900193,
      "p_javascript": 0.014230497469263659,
      "p_matlab": 0.002000169660136744,
      "p_python": 0.7448024192015803,
      "p_sql": 0.04640766940986457,
      "p_typescript": 0.023878939272411345
    },
    {
      "text": "def isDivisibleBy9(num):\n    # Base case \n    if(num == 0 or num == 9): \n        return True\n   \n    if(num < 9): \n        return False\n  \n    # Recursive case\n    return isDivisibleBy9(sum(map(int,str(num)))) \n\nif __name__ == '__main__':\n    num = int(input('Enter a number: '))\n    if isDivisibleBy9(num):\n        print('Yes, {} is divisible by 9.'.format(num))\n    else:\n        print('No, {} is not divisible by 9.'.format(num))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0193451652774434e-05,
      "p_css": 7.768540739936595e-10,
      "p_html": 1.58758557000812e-05,
      "p_java": 9.224598673511904e-05,
      "p_javascript": 5.090523129812272e-06,
      "p_matlab": 0.9982712693022402,
      "p_python": 0.0016021541099301754,
      "p_sql": 1.214380507017417e-06,
      "p_typescript": 1.9556132509735525e-06
    },
    {
      "text": "def mean(numbers):\n    return sum(numbers) / len(numbers)\n\ndef median(numbers):\n    numbers.sort()\n    middle_index = int(len(numbers)/2)\n    if len(numbers) % 2 == 0:\n        return (numbers[middle_index] + numbers[middle_index-1])/2\n    else:\n        return numbers[middle_index]\n\ndef mode(numbers):\n    max_freq = 0\n    modes = []\n    for num in set(numbers):\n        count = numbers.count(num)\n        if count > max_freq:\n            modes.clear()\n            modes.append(num)\n            max_freq = count\n        elif count == max_freq and num not in modes:\n            modes.append(num)\n    return modes",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.3418046994719244e-05,
      "p_css": 5.360542123725976e-06,
      "p_html": 0.00013789896626593067,
      "p_java": 0.6332646780553588,
      "p_javascript": 0.000196782705470261,
      "p_matlab": 4.6432532963669113e-07,
      "p_python": 0.3662364942925767,
      "p_sql": 7.838687369033964e-05,
      "p_typescript": 4.651619218970174e-05
    },
    {
      "text": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\n    return True\n\n\ndef find_empty(bo):\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)  # row, col",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.2674117796195866e-05,
      "p_css": 9.883311672893821e-06,
      "p_html": 0.00014469451828561607,
      "p_java": 2.4349159373842034e-06,
      "p_javascript": 3.909931441424317e-06,
      "p_matlab": 0.6675472875217544,
      "p_python": 0.3321923541763461,
      "p_sql": 2.0019175824875133e-05,
      "p_typescript": 5.6742330941193794e-05
    },
    {
      "text": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00013113133814304038,
      "p_css": 0.015597875181183149,
      "p_html": 0.0128772386525721,
      "p_java": 0.1572328361646075,
      "p_javascript": 1.2016257827480556e-08,
      "p_matlab": 3.984042561278055e-06,
      "p_python": 0.8111791556861325,
      "p_sql": 0.0027812952931465357,
      "p_typescript": 0.00019647162539612745
    },
    {
      "text": "def compareLongestString(str1, str2):\n \n  if len(str1) > len(str2):\n   longestString = str1\n  elif len(str2) > len(str1):\n   longestString = str2\n  else:\n   longestString = \"Strings have the same length\"\n\n  return longestString\n\nprint(compareLongestString(\"Python\", \"C++\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.018023933047034122,
      "p_css": 0.0018105547348279377,
      "p_html": 1.0197093582596603e-05,
      "p_java": 4.242168481304442e-05,
      "p_javascript": 0.34530976984718864,
      "p_matlab": 0.0002699439354929154,
      "p_python": 0.6012980842372464,
      "p_sql": 0.026172040537439347,
      "p_typescript": 0.007063054882375082
    },
    {
      "text": "def replace_word(txt, replace_word, replace_with): \n    words = txt.split(\" \") \n    for i in range(0, len(words)): \n        if (words[i] == replace_word): \n            words[i] = replace_with\n    return \" \".join(words)\n\ns = \"Roses are red, violets are blue.\"\nprint(replace_word(s, \"blue\", \"red\")) # Roses are red, violets are red.",
      "y_true": "sql",
      "pred_label": "python",
      "p_bash": 0.0011829937889607986,
      "p_css": 0.005086730104239448,
      "p_html": 0.006541413772099311,
      "p_java": 0.00010973241869606027,
      "p_javascript": 0.00039782640220202884,
      "p_matlab": 0.01855858012519937,
      "p_python": 0.7337784476624715,
      "p_sql": 0.22951453381401515,
      "p_typescript": 0.004829741912116702
    },
    {
      "text": "def averageList(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)\n\nprint(averageList([10, 15, 20, 25]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.6948736903265636e-05,
      "p_css": 2.7853809469828523e-06,
      "p_html": 0.00022449016141469282,
      "p_java": 0.0013515013187811958,
      "p_javascript": 5.368310077667064e-05,
      "p_matlab": 0.00027408372071475133,
      "p_python": 0.9980458697823466,
      "p_sql": 1.7312664182829256e-05,
      "p_typescript": 1.3325133933121541e-05
    },
    {
      "text": "# This function prints the values 1 to 10\ndef print_numbers(): \n    for i in range(1,11): \n        print(\"The number is \" + str(i)) \n          \nprint_numbers()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0013148730853149572,
      "p_css": 1.2611133522347982e-05,
      "p_html": 0.0008029561618410378,
      "p_java": 3.2776220294398824e-06,
      "p_javascript": 0.05004058940516571,
      "p_matlab": 0.2028392325624828,
      "p_python": 0.7429683255382254,
      "p_sql": 0.0001613483549037832,
      "p_typescript": 0.0018567861365143465
    },
    {
      "text": "import requests\n\ndef getCurrentTemperature(location):\n  API_KEY = '<your API key>'\n  API_URL = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'.format(location, API_KEY)\n\n  response = requests.get(API_URL)\n  data = response.json()\n\n  # convert temperature from kelvin to Celsius\n  temperature_celsius = data['main']['temp'] - 273.15\n\n  return temperature_celsius\n\nlocation = \"London, UK\"\ntemperature = getCurrentTemperature(location)\nprint(temperature)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.001174956555702197,
      "p_css": 0.9183405641852209,
      "p_html": 0.031365048907059705,
      "p_java": 1.337911721732457e-05,
      "p_javascript": 0.000438053618884869,
      "p_matlab": 0.000371217012276637,
      "p_python": 0.04480099015493578,
      "p_sql": 0.0017874327543312247,
      "p_typescript": 0.0017083576943714863
    },
    {
      "text": "def generate_strings(alphabet, length):\n    lst = []\n    \n    for a in alphabet:\n        for b in alphabet:\n            for c in alphabet:\n                s = a + b + c\n                lst.append(s)\n                \n    return lst\n\nresult = generate_strings(alphabet, length)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004884132025757558,
      "p_css": 0.005360088897556219,
      "p_html": 0.001094045523231367,
      "p_java": 4.8837583736770394e-05,
      "p_javascript": 0.002920195892884029,
      "p_matlab": 0.11484135627683582,
      "p_python": 0.8607077485420178,
      "p_sql": 0.013907947933351,
      "p_typescript": 0.0006313661478111653
    },
    {
      "text": "def calculate_std_deviation(numbers):\n mean = sum(numbers) / len(numbers)\n \n variance = 0\n for num in numbers:\n variance += (num - mean)**2\n variance = variance/len(numbers)\n \n std_deviation = variance**0.5\n return std_deviation\n \n \nnumbers = [2, 4, 4, 4, 5, 5, 7, 9]\nstd_deviation = calculate_std_deviation(numbers)\nprint('The standard deviation is: {}'.format(std_deviation))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0006931555030127724,
      "p_css": 0.00010987359523517487,
      "p_html": 0.0016897931815696404,
      "p_java": 0.5008499696471852,
      "p_javascript": 0.006824671742581182,
      "p_matlab": 1.3254681287882221e-05,
      "p_python": 0.4881097857820815,
      "p_sql": 0.0005767362432519189,
      "p_typescript": 0.0011327596237948304
    },
    {
      "text": "# Python program to generate \n# a unique 6 digit number \nimport random \ndef generate_number(): \n      \n    # Choose a random number \n    # between 10000 and 99999 \n    random_number = random.randint(10000, 99999) \n  \n    # Return the random number \n    return random_number \n  \n# Driver Code \nif __name__ == \"__main__\": \n    print(generate_number())",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.20482615789680023,
      "p_css": 9.22043917372288e-05,
      "p_html": 9.678599276138959e-05,
      "p_java": 6.448981081061314e-07,
      "p_javascript": 0.00012732094679340555,
      "p_matlab": 1.0098582626643206e-06,
      "p_python": 0.7837933822240639,
      "p_sql": 0.010659438767202434,
      "p_typescript": 0.00040305502427063534
    },
    {
      "text": "def common_elements(list1, list2):\n    # Make a copy of list \n    list_copy = list2[:] \n\n    # Iterate the original list  \n    for item in list1: \n        if item in list_copy: \n            list_copy.remove(item) \n\n    # Return the common elements  \n    return list(set(list1) & set(list2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0024201523031728445,
      "p_css": 0.014941368374005311,
      "p_html": 0.020813574904948496,
      "p_java": 2.3082835784740943e-05,
      "p_javascript": 0.2125972639302146,
      "p_matlab": 0.0017066264955631768,
      "p_python": 0.7407812983248339,
      "p_sql": 0.005139378699204142,
      "p_typescript": 0.0015772541322729323
    },
    {
      "text": "def factorial(num): \n    if num == 0: \n        return 1\n    else: \n        return num * factorial(num-1) \n\nx = 5\nprint(factorial(x)) \n# 120",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.9293090230083946e-06,
      "p_css": 1.6209871101860382e-09,
      "p_html": 2.883678939797448e-06,
      "p_java": 1.2763400086423454e-07,
      "p_javascript": 6.665029099233328e-07,
      "p_matlab": 0.9754327248619502,
      "p_python": 0.024559481044903204,
      "p_sql": 1.246225186754637e-06,
      "p_typescript": 9.391220990405217e-07
    },
    {
      "text": "# -*- coding: utf-8 -*-\n\n# 1st-run initialisation\n\n# Set settings.base.prepopulate to 0 in Production\n# (to save 1x DAL hit every page).\npop_list = settings.get_base_prepopulate()\nif pop_list == 0:\n    pop_list = []\nelse:\n    table = db[auth.settings.table_group_name]\n    # The query used here takes 2/3 the time of .count().\n    if db(table.id > 0).select(table.id, limitby=(0, 1)).first():\n        pop_list = []\n    if not isinstance(pop_list, (list, tuple)):\n        pop_list = [pop_list]\n\nif len(pop_list) > 0:\n\n    # =========================================================================\n    # Populate default roles and permissions\n    #\n\n    # Allow debug\n    import sys\n\n    print >> sys.stdout, \"Please be patient whilst the database is populated\"\n\n    # Shortcuts\n    acl = auth.permission\n    sysroles = auth.S3_SYSTEM_ROLES\n    create_role = auth.s3_create_role\n    #update_acls = auth.s3_update_acls\n\n    # Do not remove or change order of these 5 definitions (System Roles):\n    create_role(\"Administrator\",\n                \"System Administrator - can access & make changes to any data\",\n                uid=sysroles.ADMIN,\n                system=True, protected=True)\n\n    create_role(\"Authenticated\",\n                \"Authenticated - all logged-in users\",\n                uid=sysroles.AUTHENTICATED,\n                protected=True)\n\n    create_role(\"Anonymous\",\n                \"Unauthenticated users\",\n                # Allow unauthenticated users to view the list of organisations\n                # so they can select an organisation when registering\n                dict(t=\"org_organisation\", uacl=acl.READ, entity=\"any\"),\n                # Allow unauthenticated users to see the list of sites for an\n                # org when registering\n                dict(c=\"org\", f=\"sites_for_org\", uacl=acl.READ, entity=\"any\"),\n                uid=sysroles.ANONYMOUS,\n                protected=True)\n\n    # Primarily for Security Policy 2\n    create_role(\"Editor\",\n                \"Editor - can access & make changes to any unprotected data\",\n                uid=sysroles.EDITOR,\n                system=True, protected=True)\n\n    # MapAdmin\n    map_admin = create_role(\"MapAdmin\",\n                            \"MapAdmin - allowed access to edit the MapService Catalogue\",\n                            dict(c=\"gis\", uacl=acl.ALL, oacl=acl.ALL),\n                            dict(c=\"gis\", f=\"location\", uacl=acl.ALL, oacl=acl.ALL),\n                            uid=sysroles.MAP_ADMIN,\n                            system=True, protected=True)\n\n    # OrgAdmin (policies 6, 7 and 8)\n    create_role(\"OrgAdmin\",\n                \"OrgAdmin - allowed to manage user roles for entity realms\",\n                uid=sysroles.ORG_ADMIN,\n                system=True, protected=True)\n\n    # Enable shortcuts (needed by default.py)\n    system_roles = auth.get_system_roles()\n    ADMIN = system_roles.ADMIN\n    AUTHENTICATED = system_roles.AUTHENTICATED\n    ANONYMOUS = system_roles.ANONYMOUS\n    EDITOR = system_roles.EDITOR\n    MAP_ADMIN = system_roles.MAP_ADMIN\n    ORG_ADMIN = system_roles.ORG_ADMIN\n\n    # =========================================================================\n    # Configure Scheduled Tasks\n    #\n\n    has_module = settings.has_module\n    if has_module(\"msg\"):\n\n        # Send Messages from Outbox\n        # SMS every minute\n        s3task.schedule_task(\"msg_process_outbox\",\n                             vars={\"contact_method\":\"SMS\"},\n                             period=120,  # seconds\n                             timeout=120, # seconds\n                             repeats=0    # unlimited\n                             )\n        # Emails every 5 minutes\n        s3task.schedule_task(\"msg_process_outbox\",\n                             vars={\"contact_method\":\"EMAIL\"},\n                             period=300,  # seconds\n                             timeout=300, # seconds\n                             repeats=0    # unlimited\n                             )\n        # Tweets every minute\n        #s3task.schedule_task(\"msg_process_outbox\",\n        #                     vars={\"contact_method\":\"TWITTER\"},\n        #                     period=120,  # seconds\n        #                     timeout=120, # seconds\n        #                     repeats=0    # unlimited\n        #                     )\n\n        # Subscription notifications\n        s3task.schedule_task(\"notify_check_subscriptions\",\n                             period=300,\n                             timeout=300,\n                             repeats=0)\n\n    # Daily maintenance\n    s3task.schedule_task(\"maintenance\",\n                         vars={\"period\":\"daily\"},\n                         period=86400, # seconds, so 1/day\n                         timeout=600,  # seconds\n                         repeats=0     # unlimited\n                         )\n\n    # =========================================================================\n    # Import PrePopulate data\n    #\n\n    # Override authorization\n    auth.override = True\n\n    # Load all Models to ensure all DB tables present\n    s3db.load_all_models()\n\n    # Shortcuts\n    path_join = os.path.join\n    request_folder = request.folder\n\n    if settings.get_auth_opt_in_to_email():\n        table = db.pr_group\n        for team in settings.get_auth_opt_in_team_list():\n            table.insert(name = team, group_type = 5)\n\n    # Synchronisation\n    db.sync_config.insert() # Defaults are fine\n\n    # Person Registry\n    tablename = \"pr_person\"\n    # Add extra indexes on search fields\n    # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL\n    field = \"first_name\"\n    db.executesql(\"CREATE INDEX %s__idx on %s(%s);\" % (field, tablename, field))\n    field = \"middle_name\"\n    db.executesql(\"CREATE INDEX %s__idx on %s(%s);\" % (field, tablename, field))\n    field = \"last_name\"\n    db.executesql(\"CREATE INDEX %s__idx on %s(%s);\" % (field, tablename, field))\n\n    # GIS\n    # Add extra index on search field\n    # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL\n    tablename = \"gis_location\"\n    field = \"name\"\n    db.executesql(\"CREATE INDEX %s__idx on %s(%s);\" % (field, tablename, field))\n\n    # Messaging Module\n    if has_module(\"msg\"):\n        update_super = s3db.update_super\n        # To read inbound email, set username (email address), password, etc.\n        # here. Insert multiple records for multiple email sources.\n        table = db.msg_email_channel\n        id = table.insert(server = \"imap.gmail.com\",\n                          protocol = \"imap\",\n                          use_ssl = True,\n                          port = 993,\n                          username = \"example-username\",\n                          password = \"password\",\n                          delete_from_server = False\n                          )\n        update_super(table, dict(id=id))\n        # Need entries for the Settings/1/Update URLs to work\n        table = db.msg_sms_outbound_gateway\n        id = table.insert(outgoing_sms_handler = \"WEB_API\")\n        update_super(table, dict(id=id))\n        table = db.msg_sms_modem_channel\n        id = table.insert(modem_baud = 115200)\n        update_super(table, dict(id=id))\n        table = db.msg_sms_webapi_channel\n        id = table.insert(to_variable = \"to\")\n        update_super(table, dict(id=id))\n        table = db.msg_sms_smtp_channel\n        id = table.insert(address=\"changeme\")\n        update_super(table, dict(id=id))\n        table = db.msg_tropo_channel\n        id = table.insert(token_messaging = \"\")\n        update_super(table, dict(id=id))\n        table = db.msg_twitter_channel\n        id = table.insert(enabled = False)\n        update_super(table, dict(id=id))\n\n    # Budget Module\n    if has_module(\"budget\"):\n        db.budget_parameter.insert() # Defaults are fine\n\n    # Climate Module\n    if has_module(\"climate\"):\n        s3db.climate_first_run()\n\n    # CAP module\n    if has_module(\"cap\"):\n        db.cap_alert.insert(template_title=\"Default\", is_template=True)\n\n    # Incident Reporting System\n    if has_module(\"irs\"):\n        # Categories visible to ends-users by default\n        table = db.irs_icategory\n        table.insert(code = \"flood\")\n        table.insert(code = \"geophysical.landslide\")\n        table.insert(code = \"roadway.bridgeClosure\")\n        table.insert(code = \"roadway.roadwayClosure\")\n        table.insert(code = \"other.buildingCollapsed\")\n        table.insert(code = \"other.peopleTrapped\")\n        table.insert(code = \"other.powerFailure\")\n\n    # Supply Module\n    if has_module(\"supply\"):\n        db.supply_catalog.insert(name = settings.get_supply_catalog_default())\n\n    # Ensure DB population committed when running through shell\n    db.commit()\n\n    # =========================================================================\n    # PrePopulate import (from CSV)\n    #\n\n    # Create the bulk Importer object\n    bi = s3base.S3BulkImporter()\n\n    s3.import_role = bi.import_role\n    s3.import_user = bi.import_user\n    s3.import_image = bi.import_image\n    s3.import_remote_csv = bi.import_remote_csv\n\n    # Relax strict email-matching rule for import updates of person records\n    email_required = settings.get_pr_import_update_requires_email()\n    settings.pr.import_update_requires_email = False\n\n    # Additional settings for user table imports:\n    s3db.configure(\"auth_user\",\n                   onaccept = lambda form: auth.s3_approve_user(form.vars))\n    s3db.add_components(\"auth_user\", auth_membership=\"user_id\")\n\n    # Flag that Assets are being imported, not synced\n    s3.asset_import = True\n\n    # Allow population via shell scripts\n    if not request.env.request_method:\n        request.env.request_method = \"GET\"\n\n    grandTotalStart = datetime.datetime.now()\n    for pop_setting in pop_list:\n        start = datetime.datetime.now()\n        # Clear Tasklist\n        bi.tasks = []\n        # Import data specific to the prepopulate setting\n        if pop_setting == 1:\n            # Populate with the default data\n            path = path_join(request_folder,\n                             \"private\",\n                             \"templates\",\n                             \"default\")\n            bi.perform_tasks(path)\n        else:\n            path = path_join(request_folder,\n                             \"private\",\n                             \"templates\",\n                             pop_setting)\n            if os.path.exists(path):\n                bi.perform_tasks(path)\n            else:\n                print >> sys.stderr, \"Unable to install data %s no valid directory found\" % pop_setting\n\n        grandTotalEnd = datetime.datetime.now()\n        duration = grandTotalEnd - grandTotalStart\n        try:\n            # Python 2.7\n            duration = '{:.2f}'.format(duration.total_seconds()/60)\n            print >> sys.stdout, \"Pre-populate task completed in %s mins\" % duration\n        except AttributeError:\n            # older Python\n            print >> sys.stdout, \"Pre-populate task completed in %s\" % duration\n        bi.resultList = []\n    for errorLine in bi.errorList:\n        try:\n            print >> sys.stderr, errorLine\n        except:\n            s3_unicode = s3base.s3_unicode\n            _errorLine = \"\"\n            for i in range(0, len(errorLine)):\n                try:\n                    _errorLine += s3_unicode(errorline[i])\n                except:\n                    pass\n            print >> sys.stderr, _errorLine\n\n    # Restore setting for strict email-matching\n    settings.pr.import_update_requires_email = email_required\n\n    # Restore Auth\n    auth.override = False\n\n    # Update Location Tree (disabled during prepop)\n    start = datetime.datetime.now()\n    gis.update_location_tree()\n    end = datetime.datetime.now()\n    print >> sys.stdout, \"Location Tree update completed in %s\" % (end - start)\n\n    # Countries are only editable by MapAdmin\n    db(db.gis_location.level == \"L0\").update(owned_by_group=map_admin)\n\n    if has_module(\"stats\"):\n        # Populate stats_demographic_aggregate (disabled during prepop)\n        # - needs to be done after locations\n        start = datetime.datetime.now()\n        s3db.stats_demographic_rebuild_all_aggregates()\n        end = datetime.datetime.now()\n        print >> sys.stdout, \"Demographic data aggregation completed in %s\" % (end - start)\n\n    if has_module(\"vulnerability\"):\n        # Populate vulnerability_aggregate (disabled during prepop)\n        # - needs to be done after locations\n        start = datetime.datetime.now()\n        s3db.vulnerability_rebuild_all_aggregates()\n        end = datetime.datetime.now()\n        print >> sys.stdout, \"Vulnerability data aggregation completed in %s\" % (end - start)\n\n    grandTotalEnd = datetime.datetime.now()\n    duration = grandTotalEnd - grandTotalStart\n    try:\n        # Python 2.7\n        duration = '{:.2f}'.format(duration.total_seconds()/60)\n        print >> sys.stdout, \"Pre-populate completed in %s mins\" % duration\n    except AttributeError:\n        # older Python\n        print >> sys.stdout, \"Pre-populate completed in %s\" % duration\n\n    # Restore view\n    response.view = \"default/index.html\"\n\n# END =========================================================================\n",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 0.0005783461183479315,
      "p_css": 0.031899545962208245,
      "p_html": 0.11122228089515737,
      "p_java": 0.001720355055347157,
      "p_javascript": 0.0108134745719782,
      "p_matlab": 0.00021024151640428634,
      "p_python": 0.0026640084468479547,
      "p_sql": 0.0415901989841966,
      "p_typescript": 0.7993015484495123
    },
    {
      "text": "def merge_sort(alist):\n    if len(alist)>1:\n        mid = len(alist)//2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i=0\n        j=0\n        k=0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                alist[k]=lefthalf[i]\n                i=i+1\n            else:\n                alist[k]=righthalf[j]\n                j=j+1\n            k=k+1\n\n        while i < len(lefthalf):\n            alist[k]=lefthalf[i]\n            i=i+1\n            k=k+1\n\n        while j < len(righthalf):\n            alist[k]=righthalf[j]\n            j=j+1\n            k=k+1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006635893259594536,
      "p_css": 0.016482912645417507,
      "p_html": 0.01467390366900585,
      "p_java": 0.0020746733004296278,
      "p_javascript": 0.00286608383737779,
      "p_matlab": 0.01880888967177303,
      "p_python": 0.9111485305803239,
      "p_sql": 0.004683476018221953,
      "p_typescript": 0.02262563701785577
    },
    {
      "text": "# Load libraries\nimport pandas as pd\nimport numpy as np\n\n# Load data\ndata = pd.read_csv(\"stockdata.csv\")\n\n# Split data\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Train/Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Decision Tree Model\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(criterion='entropy', random_state=0)\nclf.fit(X_train, y_train)\n\n# Model Accuracy\ny_pred = clf.predict(X_test)\nprint('Model accuracy: ',clf.score(X_test, y_test))",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9914825934240685,
      "p_css": 0.0038379300818525528,
      "p_html": 0.00018486141177368026,
      "p_java": 1.4664708248439023e-07,
      "p_javascript": 1.4818230981776841e-07,
      "p_matlab": 3.8526993159878117e-07,
      "p_python": 0.0044789398634039026,
      "p_sql": 5.382926925054518e-11,
      "p_typescript": 1.4995065748277775e-05
    },
    {
      "text": "if (5 > 7):\n    greater = 5\nelse:\n    greater = 7\n\nprint(\"The greater number is: \", greater)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.011411087435082654,
      "p_css": 0.03901153576756944,
      "p_html": 0.014191217030170376,
      "p_java": 0.001022583287824442,
      "p_javascript": 0.02123596913906616,
      "p_matlab": 0.08823888489717419,
      "p_python": 0.7757950409351332,
      "p_sql": 0.011504622100957873,
      "p_typescript": 0.03758905940702167
    },
    {
      "text": "def split_list(lst, size):\n    part1 = lst[:size]\n    part2 = lst[size:]\n    return part1, part2\n\n# example\nmy_list = [1, 2, 3, 4, 5, 6, 7]\npart1, part2 = split_list(my_list, 3)\nprint(part1) # [1, 2, 3]\nprint(part2) # [4, 5, 6, 7]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012266428682530777,
      "p_css": 0.012245522855976474,
      "p_html": 0.019383887503341878,
      "p_java": 0.002907843376345596,
      "p_javascript": 0.002184853940378454,
      "p_matlab": 0.0004776930829019086,
      "p_python": 0.9568966329292592,
      "p_sql": 0.002813063446534446,
      "p_typescript": 0.0018638599970090591
    },
    {
      "text": "def sort_list(a_list):\n '''\n Sort the given list of strings in alphabetical order\n\n Args:\n a_list (list): List of strings\n\n Returns:\n list: Returns the sorted list in alphabetical order\n '''\n\n return sorted(a_list)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0005408771759610058,
      "p_css": 0.0003523382724987744,
      "p_html": 0.0019177199528924082,
      "p_java": 0.0002451241147971485,
      "p_javascript": 0.7018386323898709,
      "p_matlab": 0.013409598464805312,
      "p_python": 0.2302216406221211,
      "p_sql": 0.0501126561980229,
      "p_typescript": 0.0013614128090304873
    },
    {
      "text": "def sort(arr): \n    n = len(arr) \n    \n    for i in range(n-1): \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n                  \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n        \n    return arr\n\nlist = [3, 5, 2, 1, 4] \nprint(sort(list)) # [1, 2, 3, 4, 5]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.0942159820332955e-06,
      "p_css": 6.748077550172268e-06,
      "p_html": 7.01339736185927e-06,
      "p_java": 1.1350978404122678e-06,
      "p_javascript": 1.1772785579438405e-06,
      "p_matlab": 0.9162458925839365,
      "p_python": 0.08372681130229517,
      "p_sql": 1.34735075490136e-06,
      "p_typescript": 5.7806957208681886e-06
    },
    {
      "text": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\np = Person(\"John\", 18)\nprint(p.name, p.age)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00019024985244121037,
      "p_css": 0.0022637631342626967,
      "p_html": 0.00843026385179777,
      "p_java": 0.7504754401256186,
      "p_javascript": 7.153606837199411e-08,
      "p_matlab": 2.099455538466221e-06,
      "p_python": 0.23810503039562342,
      "p_sql": 0.0004928239407088663,
      "p_typescript": 4.0257707940675474e-05
    },
    {
      "text": "import re\n\nstring = \"There are 45.8 apples and 12.3 oranges.\"\nnumbers = re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\", string)\nprint(numbers)\n\n# Output: ['45.8', '12.3']",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 8.421883192667651e-07,
      "p_css": 4.225097305748739e-05,
      "p_html": 0.0016672285994611335,
      "p_java": 0.975787061401319,
      "p_javascript": 1.86863367864733e-08,
      "p_matlab": 6.96000037684988e-09,
      "p_python": 0.02243322530527726,
      "p_sql": 4.380231462741118e-05,
      "p_typescript": 2.55635716010133e-05
    },
    {
      "text": "def filter_even(arr):\n    result = []\n    for i in arr:\n        if i % 2 != 0:\n            result.append(i)\n    return result",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.875615254027873e-10,
      "p_css": 1.2931884845660116e-07,
      "p_html": 4.186015409644437e-10,
      "p_java": 4.0744505496929705e-11,
      "p_javascript": 2.1546481472782865e-10,
      "p_matlab": 0.9999928617220545,
      "p_python": 7.0072804249198676e-06,
      "p_sql": 1.4248617597508628e-10,
      "p_typescript": 6.738135014313025e-10
    },
    {
      "text": "def factorial(n):\n    if n == 0:\n        return 1\n    \n    return n * factorial(n-1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.944839578745002e-05,
      "p_css": 7.498479524924585e-05,
      "p_html": 7.278192487355846e-05,
      "p_java": 6.1239539783890616e-06,
      "p_javascript": 6.940781765129698e-05,
      "p_matlab": 2.299286322905327e-05,
      "p_python": 0.9996402642098589,
      "p_sql": 3.141816132128325e-05,
      "p_typescript": 3.257787805101708e-05
    },
    {
      "text": "def removeDuplicates(arr):\n result = []\n for num in arr:\n  if num not in result:\n   result.append(num)\n return result\n \narr = [1, 2, 3, 2, 5, 4, 3, 1]\nprint(removeDuplicates(arr)) # should print [1, 2, 3, 5, 4]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.463353955368018e-11,
      "p_css": 1.810116508894358e-11,
      "p_html": 1.4626354706261711e-10,
      "p_java": 9.865682130472205e-12,
      "p_javascript": 4.4498979911317147e-11,
      "p_matlab": 0.9999992349621694,
      "p_python": 7.638162847276143e-07,
      "p_sql": 2.546583757745934e-11,
      "p_typescript": 9.227172672058718e-10
    },
    {
      "text": "x = False and False\n\n# Output\nprint(x)\n# False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.006692351258923942,
      "p_css": 0.04026720734265863,
      "p_html": 0.027585362890552623,
      "p_java": 0.0001883064713345997,
      "p_javascript": 0.002002428836518409,
      "p_matlab": 0.00013315242454685052,
      "p_python": 0.9161377970479111,
      "p_sql": 0.0007554015570096918,
      "p_typescript": 0.0062379921705442865
    },
    {
      "text": "def reverse_words(string):\n    words = string.split(' ')\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 2.669889497550611e-07,
      "p_css": 0.0005672292683968906,
      "p_html": 0.0006384918855396471,
      "p_java": 0.11727270152075298,
      "p_javascript": 7.267468619261318e-08,
      "p_matlab": 5.324272230794983e-06,
      "p_python": 0.032865576971030236,
      "p_sql": 0.8486191349297253,
      "p_typescript": 3.1201488688292986e-05
    },
    {
      "text": "def factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.24708610409622e-06,
      "p_css": 0.00010361078830339986,
      "p_html": 1.620692208644411e-05,
      "p_java": 8.608422614582561e-07,
      "p_javascript": 3.322531027299005e-06,
      "p_matlab": 7.038785709560307e-06,
      "p_python": 0.9998494073096397,
      "p_sql": 9.280305260182538e-06,
      "p_typescript": 5.0254296078907785e-06
    },
    {
      "text": "def most_frequent_words(string):\n    '''\n    Function to find the ten most frequent words in a given string\n    \n    Parameters\n    string: string\n    \n    Returns\n    list of the ten most frequent words\n    '''\n    string = string.lower()\n    words = string.split()\n    word_frequency = {}\n    # populate the word_frequency dictionary\n    for word in words:\n        if word in word_frequency.keys():\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    # sort the dictionary in descending order by frequency\n    sorted_words = sorted(word_frequency.items(), key=lambda kv: kv[1], reverse=True)\n    top_ten = sorted_words[:10]\n    return [word[0] for word in top_ten]",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 2.7463070963653223e-07,
      "p_css": 0.0033980480823486274,
      "p_html": 0.0008872243293090642,
      "p_java": 0.8557598525319935,
      "p_javascript": 3.837132923508595e-07,
      "p_matlab": 2.2203588997094947e-05,
      "p_python": 0.07315011752578368,
      "p_sql": 0.06671770188401853,
      "p_typescript": 6.419371354756333e-05
    },
    {
      "text": "# function to calculate GCD \ndef gcd(x, y): \n  \n    # This function implements the Euclidian \n    # algorithm to find GCD \n    while(y): \n        x, y = y, x % y \n  \n    return x \n\n# Driver program to test above function \nn1 = 28\nn2 = 56\nprint(\"GCD of\", n1, \"and\", n2, \"is\", gcd(n1, n2))",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 3.909017928662709e-05,
      "p_css": 1.9254158162158953e-05,
      "p_html": 2.7813405776199733e-05,
      "p_java": 5.56064292651064e-05,
      "p_javascript": 0.9994924329261775,
      "p_matlab": 0.00015919728185161594,
      "p_python": 1.1802820875488141e-05,
      "p_sql": 1.2410108991836359e-05,
      "p_typescript": 0.00018239268961345464
    },
    {
      "text": "def insertSort(sortedArray, x): \n    n = len(sortedArray) \n    sortedArray.append(x) \n    for i in range(n-1, -1, -1): \n        if sortedArray[i] > x: \n            sortedArray[i + 1] = sortedArray[i] \n            sortedArray[i] = x \n    return sortedArray\n\nprint(insertSort(sortedArray, x))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00836049291985393,
      "p_css": 0.011621232847760997,
      "p_html": 0.018057524659923874,
      "p_java": 0.001512817427091997,
      "p_javascript": 0.0034876986462963598,
      "p_matlab": 0.22151839158588393,
      "p_python": 0.7206509296992695,
      "p_sql": 0.0035942789228293557,
      "p_typescript": 0.011196633291090037
    },
    {
      "text": "import random\n\ndef random_walk(n_steps):\n    x = 0\n    y = 0\n\n    for _ in range(n_steps):\n        direction = random.choice([-1, 1])\n        x += direction * random.randint(1, 10)\n        y += direction * random.randint(1, 10)\n\n    return x, y",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.4504928075811248e-05,
      "p_css": 1.9876595531308933e-05,
      "p_html": 6.507746220446645e-05,
      "p_java": 5.834060375275135e-07,
      "p_javascript": 4.495891297834306e-06,
      "p_matlab": 0.00022969881198354946,
      "p_python": 0.9962490315327661,
      "p_sql": 0.003407484396241052,
      "p_typescript": 9.246975862388206e-06
    },
    {
      "text": "def is_palindrome(string_to_test):\n    reverse = reversed(string_to_test)\n    if list(string_to_test) == list(reverse):\n        return True\n    return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00020063680432445792,
      "p_css": 0.00044786828996294463,
      "p_html": 0.0016116033863894865,
      "p_java": 1.4064435648577359e-05,
      "p_javascript": 0.00014209939531980575,
      "p_matlab": 0.00014944462197936497,
      "p_python": 0.9964860819296197,
      "p_sql": 0.0008433867796536429,
      "p_typescript": 0.00010481435710227551
    },
    {
      "text": "import nltk\nfrom nltk.tokenize import word_tokenize\n\nsample_text = \"This painting is an amazing representation of the beauty of nature.\"\nwords = word_tokenize(sample_text)\ntags = nltk.pos_tag(words)\n\ngenerator_words = [\"Explore\",\"Discover\",\"Witness\",\"Captivate\", \"Embrace\"]\n\nfor tag in tags:\n    if tag[1] == 'JJ':\n        print(f'{tag[0]}, {generator_words[random.randint(0,4)]} the Wonder of Nature')",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.012820378461000165,
      "p_css": 0.025115403353428722,
      "p_html": 0.16680429612404188,
      "p_java": 0.001614790446370004,
      "p_javascript": 0.05386457255528414,
      "p_matlab": 0.0016683896144729085,
      "p_python": 0.0677744290780529,
      "p_sql": 0.03273107704842115,
      "p_typescript": 0.6376066633189282
    },
    {
      "text": "import random\n\ndef cost(x):\n    # compute the cost of x\n\ndef generate_population(size):\n    # generate a population of size 'size'\n\ndef mutation(x):\n    # randomize a single gene of x\n\ndef selection(population):\n    # select two elements from the population for crossover\n\ndef crossover(x1, x2):\n    # produce two offsprings using crossover\n\n# initialize population\npopulation = generate_population(50)\n\n# repeat until convergence (or until a maximum number of iterations is reached)\nwhile True:\n    # select two parents\n    x1, x2 = selection(population)\n      \n    # produce two offsprings by crossover\n    offspring1, offspring2 = crossover(x1, x2)\n          \n    # mutation\n    offspring1 = mutation(offspring1)\n    offspring2 = mutation(offspring2) \n          \n    # add offsprings to population\n    population.append(offspring1)\n    population.append(offspring2)\n\n# select best solution\nbest_x = min(population, key=cost)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.00439411097034971,
      "p_css": 0.010556686481083781,
      "p_html": 0.024113917542213512,
      "p_java": 0.05727978930668412,
      "p_javascript": 0.016515768670529122,
      "p_matlab": 2.3431641690685122e-05,
      "p_python": 0.043809388940756984,
      "p_sql": 0.7772345735884151,
      "p_typescript": 0.06607233285827713
    },
    {
      "text": "def sort_tuples_by_second_element(tuples):\n  return sorted(tuples, key=lambda tup: tup[1])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0028625194357660834,
      "p_css": 0.03997434208869736,
      "p_html": 0.008120184914540737,
      "p_java": 0.0007181735521138377,
      "p_javascript": 0.0032293288264382647,
      "p_matlab": 0.000888967922250592,
      "p_python": 0.9381836871165171,
      "p_sql": 0.0020118431383629814,
      "p_typescript": 0.004010953005312985
    },
    {
      "text": "class Car:\n  def __init__(self, make, model, year):\n    self.make = make\n    self.model = model\n    self.year = year\n\n  def get_make(self):\n    return self.make\n  \n  def get_model(self):\n    return self.model\n  \n  def get_year(self):\n    return self.year",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00041379882871738345,
      "p_css": 0.000914938285212489,
      "p_html": 0.01332125783029996,
      "p_java": 3.2098973217318906e-06,
      "p_javascript": 5.251374428900977e-07,
      "p_matlab": 2.835077255748441e-07,
      "p_python": 0.984593772183458,
      "p_sql": 0.00074140289768013,
      "p_typescript": 1.0811432141858927e-05
    },
    {
      "text": "def upper_string(str1):\n    upper_str = ''\n    for i in range(len(str1)):\n        if ord(str1[i]) in range(97, 123):\n            upper_str += chr(ord(str1[i]) - 32)\n        else:\n            upper_str += str1[i]\n    return upper_str",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004354545417753035,
      "p_css": 4.397707735863308e-05,
      "p_html": 2.5871164118732988e-05,
      "p_java": 2.4263104591832494e-05,
      "p_javascript": 0.001018020718364799,
      "p_matlab": 0.22953335390718052,
      "p_python": 0.7671779136853127,
      "p_sql": 0.0015340484603696824,
      "p_typescript": 0.0002070973409279467
    },
    {
      "text": "def Fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return Fibonacci(n-1) + Fibonacci(n-2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.3785920079166204e-06,
      "p_css": 7.931814103901814e-06,
      "p_html": 5.072867569979797e-06,
      "p_java": 4.034051151118403e-07,
      "p_javascript": 1.4727500908182625e-06,
      "p_matlab": 3.319625913221078e-07,
      "p_python": 0.9999787480362066,
      "p_sql": 2.5764372327806895e-06,
      "p_typescript": 1.0841350817234062e-06
    },
    {
      "text": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\ndef push(self, new_data):\n    new_node = Node(new_data)\n    new_node.next = self.head \n \n    if self.head is not None:\n        self.head.prev = new_node \n \n    self.head = new_node \n \ndef insertAfter(self, prev_node, new_data):\n \n    if prev_node is None:\n        print \"the given previous node must inLinked List.\"\n        return\n \n    new_node = Node(new_data)\n    new_node.next = prev_node.next\n    prev_node.next = new_node\n    new_node.prev = prev_node\n \n    if new_node.next is not None:\n        new_node.next.prev = new_node",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.00015720998702510667,
      "p_css": 0.017579567085631284,
      "p_html": 0.4627505068701086,
      "p_java": 6.350266200080429e-05,
      "p_javascript": 0.0002458386958144148,
      "p_matlab": 6.891260457721427e-05,
      "p_python": 0.23770778913519355,
      "p_sql": 0.279800918514154,
      "p_typescript": 0.00162575444549505
    },
    {
      "text": "def FibonacciSeries(n): \n      \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    Fibonacci = [0, 1] \n      \n    # Adding previous two numbers in the series \n    # and storing it \n    while len(Fibonacci) < n: \n        Fibonacci.append(sum(Fibonacci[-2:])) \n      \n    return Fibonacci[:n] \n  \n# Driver code \nn = 8\nFibonacci = FibonacciSeries(n) \nprint(Fibonacci)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 3.780372127245515e-05,
      "p_css": 0.00018088108072572724,
      "p_html": 0.00026055719440826175,
      "p_java": 0.34153787948040404,
      "p_javascript": 0.00014328607644390298,
      "p_matlab": 4.193313847076359e-08,
      "p_python": 0.2660718343304536,
      "p_sql": 9.18963855263098e-05,
      "p_typescript": 0.39167581979762733
    },
    {
      "text": "def find_similar_LCS_strings(strings):\n    d = {}\n    for i in range(len(strings)):\n        for j in range(len(strings)):\n            if i == j:\n                continue\n            else:\n                x = strings[i]\n                y = strings[j]\n                m = [[0 for k in range(len(y)+1)] for l in range(len(x)+1)]\n                \n                # build the dynamic programming lookup table\n                for i in range(1, len(x)+1):\n                    for j in range(1, len(y)+1):\n                        if x[i-1] == y[j-1]:\n                            m[i][j] = m[i-1][j-1] + 1\n                        else:\n                            m[i][j] = max(m[i][j-1], m[i-1][j])\n\n                d[(x, y)] = m[len(x)][len(y)]\n    \n    result = []\n    # build the result list\n    while d:\n        key = max(d, key=lambda k: d[k])\n        x, y = key[0], key[1]\n        del d[key]\n        tmp = [x, y]\n        for k in d.keys():\n            if x in k or y in k:\n                if d[k] == d[key]:\n                    del d[k]\n                    if k[0] == x:\n                        tmp.append(k[1])\n                    else:\n                        tmp.append(k[0])\n        result.append(tmp)\n\n    final_result = []\n    for entry in result:\n        if entry not in final_result:\n            final_result.append(entry)\n            \n    return final_result\n\nstrings = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\nres = find_similar_LCS_strings(strings)\nprint(res) # Output: [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.076727143701543e-06,
      "p_css": 1.1571360262922413e-06,
      "p_html": 2.1269138703339166e-07,
      "p_java": 8.242012284069436e-10,
      "p_javascript": 1.3665776156577762e-08,
      "p_matlab": 0.9997971952339414,
      "p_python": 0.00019871186109192274,
      "p_sql": 1.5004021837186681e-06,
      "p_typescript": 1.314582484225387e-07
    },
    {
      "text": "import re\n\ndef tokenize(s):\n    tokens = re.findall(r'\\w+|[^\\w\\s]', s, flags=re.UNICODE)\n    return tokens\n\nprint(tokenize(\"This is a sentence\"))",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.002509800789398677,
      "p_css": 0.000729226189559428,
      "p_html": 0.5105359759792495,
      "p_java": 0.00017428662794310968,
      "p_javascript": 0.000248526252638457,
      "p_matlab": 9.119555737389014e-05,
      "p_python": 0.4828869001898059,
      "p_sql": 0.002341510601327337,
      "p_typescript": 0.00048257781270383537
    },
    {
      "text": "# Check if point p3 lies on the line joining p1 and p2\ndef checkCollinearity(p1, p2, p3): \n    x1 = p1[0]\n    y1 = p1[1]\n    x2 = p2[0]\n    y2 = p2[1]\n    x3 = p3[0]\n    y3 = p3[1]\n  \n    # Calculating position of the point wrt the line joining the other two points. \n    position = ((y2 - y1) * (x3 - x1)) - ((y3 - y1) * (x2 - x1))\n\n    # Checking if collinear. If position is 0 then points are collinear.\n    if (position == 0): \n        return True\n    else: \n        return False\n\n# Counting collinear point pairs \ncollinear_pairs = 0\nfor i in range(len(points)): \n    for j in range(i+1, len(points)): \n        for k in range(j+1, len(points)): \n            p1 = points[i]\n            p2 = points[j]\n            p3 = points[k]\n\n            # Checking condition \n            if checkCollinearity(p1, p2, p3): \n                collinear_pairs = collinear_pairs + 1\n\nprint(\"Collinear Pairs = \", collinear_pairs)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0019262454329109226,
      "p_css": 0.001920055046225247,
      "p_html": 0.0028986698943206705,
      "p_java": 0.00026160055760316814,
      "p_javascript": 0.001426811555287251,
      "p_matlab": 0.029961847686828264,
      "p_python": 0.9448783609029038,
      "p_sql": 0.0022954713462135334,
      "p_typescript": 0.014430937577707121
    },
    {
      "text": "# Python code\n\n# define keywords\nkeywords = {\n    'star wars': ['release date', 'when released'],\n    'next': ['when', 'release date', 'when released'],\n    'movie': ['what', 'when', 'release date', 'when released']\n}\n\n# define answers\nanswers = {\n    'star wars': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',\n    'next': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',\n    'movie': 'The next movie in the Star Wars franchise is scheduled to be released on December 16, 2022.'\n }\n\n# code to identify the query\ndef identify_query(query):\n    words = query.lower().split(' ')\n    for word in words:\n        if word in keywords:\n            return keywords[word]\n    return []\n\n# code to respond to the query\ndef respond(query):\n    for keyword in identify_query(query):\n        if keyword in answers:\n            return answers[keyword]\n\n# Main\t\nquery = input('Ask me anything about Star Wars movies: ')\t\nanswer = respond(query)\t\n\nif answer:\n print(answer)\t\n else:\n print('Sorry, I do not understand your query.')",
      "y_true": "css",
      "pred_label": "typescript",
      "p_bash": 2.4781284668084368e-05,
      "p_css": 0.0004534863507346151,
      "p_html": 1.727129068934676e-05,
      "p_java": 2.398008491305107e-07,
      "p_javascript": 0.0014813587017475118,
      "p_matlab": 1.773705466391963e-05,
      "p_python": 0.0005070322282048192,
      "p_sql": 8.711706123404308e-05,
      "p_typescript": 0.9974109762272086
    },
    {
      "text": "import string\nimport random\n\ndef generate_random_string(length):\n chars = string.ascii_lowercase + string.digits\n  return ''.join(random.choice(chars) for _ in range(length))\n\nresult = generate_random_string(10)\nprint(result)\n\n# Output : 'n5z5hp5d5v'",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 1.995656534906563e-10,
      "p_css": 2.6519862535750186e-07,
      "p_html": 7.520176804587794e-08,
      "p_java": 0.00013031318552601532,
      "p_javascript": 2.2305439177227145e-11,
      "p_matlab": 3.1554690982758154e-09,
      "p_python": 0.000757323326425908,
      "p_sql": 0.9991120179674531,
      "p_typescript": 1.7428613930666575e-09
    },
    {
      "text": "\n#\n# Copyright 2009 Eigenlabs Ltd.  http://www.eigenlabs.com\n#\n# This file is part of EigenD.\n#\n# EigenD is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# EigenD is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with EigenD.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nfrom pisession import session\nfrom pi import index,async,timeout,proxy,resource\n\nimport optparse\nimport sys\nimport piw\nimport picross\nimport traceback\n\nclass Connector(proxy.AtomProxy,async.Deferred):\n\n    monitor = set()\n\n    def __init__(self,address):\n        async.Deferred.__init__(self)\n        proxy.AtomProxy.__init__(self)\n        self.__anchor = piw.canchor()\n        self.__anchor.set_client(self)\n        self.__anchor.set_address_str(address)\n\n    def close_client(self):\n        proxy.AtomProxy.close_client(self)\n\n    def cancel(self):\n        self.__anchor.set_address_str('')\n        self.__anchor.set_client(None)\n        self.__anchor=None\n\n    def node_ready(self):\n        self.succeeded()\n\nclass RpcAdapter(async.DeferredDecoder):\n    def decode(self):\n        if self.deferred.status() is False:\n            return async.Coroutine.failure(self.deferred.args()[0])\n        return self.deferred.args()[0]\n\ndef coroutine(lang,script,ctimeout=3000,rtimeout=3000,verbose=True):\n\n    connector = Connector(lang)\n    timer = timeout.Timeout(connector,ctimeout,False,'cant connect to language agent')\n\n    yield timer\n    if not timer.status():\n        yield async.Coroutine.failure(*timer.args())\n        return\n\n    if verbose:\n        print 'connected to',lang,connector.status()\n\n    for line in script_reader(script):\n        rpc = connector.invoke_rpc('exec',line,time=rtimeout)\n        yield rpc\n\n        if not rpc.status():\n            print line,'failed:',rpc.args()[0]\n            return\n\n        if verbose:\n            print line,'ok'\n\ndef script_reader(fp):\n    for line in fp:\n        line = line.strip()\n        if not line or line.startswith('#'): continue\n        yield line\n\ndef open_script(name):\n    if name == '-':\n        return sys.stdin\n\n    try:\n        return resource.file_open(name,\"r\")\n    except:\n        return None\n\ndef main():\n    parser = optparse.OptionParser(usage=sys.argv[0]+' [options] agent script')\n    parser.add_option('--quiet',action='store_true',dest='quiet',default=False,help='quiet')\n    parser.add_option('--ctimeout',action='store',type='int',dest='ctimeout',default=5000,help='con timeout (5000 ms)')\n    parser.add_option('--rtimeout',action='store',type='int',dest='rtimeout',default=300000,help='rpc timeout (300000 ms)')\n    parser.add_option('--verbose',action='store_true',dest='verbose',default=False,help='verbose')\n\n    (opts,args) = parser.parse_args(sys.argv)\n\n    if len(args) != 3:\n        parser.error('wrong number of arguments')\n\n    lang = args[1]\n    script = args[2]\n\n    fp = open_script(script)\n\n    if fp is None:\n        parser.error('cant open %s' % script)\n\n    def handler(ei):\n        traceback.print_exception(*ei)\n        return async.Coroutine.failure('internal error')\n\n    def failed(msg):\n        if opts.verbose:\n            print 'script failed:',msg\n        picross.exit(-1)\n\n    def succeeded():\n        if opts.verbose:\n            print 'script finished'\n        picross.exit(0)\n\n    def startup(dummy):\n        result = async.Coroutine(coroutine(lang,fp,opts.ctimeout,opts.rtimeout,opts.verbose),handler)\n        result.setErrback(failed).setCallback(succeeded)\n        return result\n\n    picross.pic_set_interrupt()\n    session.run_session(startup,clock=False)\n",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.02315808096804616,
      "p_css": 0.17689815924144453,
      "p_html": 0.7509505631436384,
      "p_java": 0.009592773726746195,
      "p_javascript": 1.4157491238394963e-05,
      "p_matlab": 1.0486571887346234e-07,
      "p_python": 0.009294220442497038,
      "p_sql": 0.0038457673197650347,
      "p_typescript": 0.0262461728009054
    },
    {
      "text": "class Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def reverseList(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n  \n    def compareLists(self, head1, head2): \n        while(head1 and head2): \n            if head1.data != head2.data: \n                return 0\n            head1 = head1.next\n            head2 = head2.next\n        if (head1 and not head2) or (head2 and not head1): \n            return 0\n        return 1\n  \n    def checkPalindrome(self): \n        slow_ptr = self.head \n        fast_ptr = self.head \n        count = 0\n        while(fast_ptr is not None and fast_ptr.next is not None): \n            fast_ptr = fast_ptr.next.next\n            slow_ptr = slow_ptr.next\n            count+=1\n        second_half = self.reverseList() \n        isPalindrome = self.compareLists(self.head, second_half) \n        \n        self.reverseList() \n        if isPalindrome: \n            return True\n        else: \n            return False\n  \nllist = LinkedList() \nllist.push(3)\nllist.push(5)\nllist.push(6)\nllist.push(6)\nllist.push(5)\nllist.push(3)\nllist.checkPalindrome()  # Output: True",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 7.009919631514079e-05,
      "p_css": 0.00981820053480137,
      "p_html": 0.7565544699031954,
      "p_java": 1.3381802555275245e-05,
      "p_javascript": 6.455655447017753e-05,
      "p_matlab": 7.244635782732874e-06,
      "p_python": 0.16615366922882238,
      "p_sql": 0.06655304761853628,
      "p_typescript": 0.0007653305255213485
    },
    {
      "text": "def generate_primes(n):\n  prime_list = []\n  for n in range(1, n + 1):\n    for i in range(2,n):\n      if n % i == 0:\n        break\n    else:\n      prime_list.append(n)\n  return prime_list\n\nprime_list = generate_primes(500)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.147004600137662e-05,
      "p_css": 1.4622619352790534e-05,
      "p_html": 8.553493579435304e-05,
      "p_java": 3.893937587529264e-06,
      "p_javascript": 5.628017480747653e-06,
      "p_matlab": 0.9476991050599912,
      "p_python": 0.052085620218880586,
      "p_sql": 4.3616934801533216e-05,
      "p_typescript": 3.0508230110001532e-05
    },
    {
      "text": "def is_reverse(string1, string2):\n    return string1[::-1] == string2",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0010618295329643881,
      "p_css": 0.0023586658670716435,
      "p_html": 0.00256977234081746,
      "p_java": 0.0003638702224173834,
      "p_javascript": 0.0009571994913753991,
      "p_matlab": 0.0002506751941137236,
      "p_python": 0.9893928182809495,
      "p_sql": 0.0014056692132376149,
      "p_typescript": 0.00163949985705289
    },
    {
      "text": "def permutations(string):\n  # base case\n  if len(string) <= 1:\n    return set([string])\n\n  # recursive case\n  else:\n    perms = permutations(string[1:])\n    char = string[0]\n    result = set()\n    for perm in perms:\n      for i in range(len(perm)+1):\n        result.add(perm[:i] + char + perm[i:])\n    return result\n\nprint(permutations(\"ABC\"))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.336362167742721e-09,
      "p_css": 1.5534480492616412e-05,
      "p_html": 5.579357913264647e-06,
      "p_java": 0.9336562021928875,
      "p_javascript": 6.771536832937289e-11,
      "p_matlab": 2.958617303597807e-07,
      "p_python": 0.06556103168287,
      "p_sql": 0.000760267759762795,
      "p_typescript": 1.0872602657285243e-06
    },
    {
      "text": "class Movie:\n    def __init__(self, title, actor, release_date):\n        self.title = title\n        self.actor = actor\n        self.release_date = release_date",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 3.6101729802303305e-05,
      "p_css": 0.0022341540115452855,
      "p_html": 0.9906345371599301,
      "p_java": 7.876068263536686e-06,
      "p_javascript": 2.5483300562397653e-05,
      "p_matlab": 3.584607034689843e-06,
      "p_python": 0.006212610692145668,
      "p_sql": 0.0007374450965239082,
      "p_typescript": 0.00010820733419214449
    },
    {
      "text": "def countPairs(a, b, c):\n    count = 0\n    for x in range(0, c + 1):\n        for y in range(0, c + 1):\n            if a * x + b * y == c:\n                count += 1\n    return count\n\na = 2\nb = 2\nc = 4\nprint(countPairs(a, b, c))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.5507732119858487e-08,
      "p_css": 6.500701541010729e-09,
      "p_html": 2.1550539877282975e-07,
      "p_java": 9.103996497464598e-10,
      "p_javascript": 1.2878090611333335e-09,
      "p_matlab": 0.3458213405272573,
      "p_python": 0.6541780788542794,
      "p_sql": 3.0691081116366187e-07,
      "p_typescript": 2.3995610901248476e-08
    },
    {
      "text": "def cosine_similarity(list1, list2):\n sum1, sum2, sum_sq1, sum_sq2, p_sum = 0, 0, 0, 0, 0\n for i in range(len(list1)):\n sum1 += list1[i]\n sum2 += list2[i]\n sum_sq1 += list1[i]**2\n sum_sq2 += list2[i]**2\n p_sum += list1[i] * list2[i]\n num = p_sum - (sum1 * sum2 / len(list1))\n den = (sqrt(sum_sq1 - pow(sum1, 2) / len(list1)) * (sqrt(sum_sq2 - pow(sum2, 2) / len(list1))))\n if den == 0:\n return 0\n return num/den",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.92238015004512e-05,
      "p_css": 3.403842477377753e-05,
      "p_html": 0.00017605750247191493,
      "p_java": 1.3035824237098144e-05,
      "p_javascript": 1.783828161742666e-05,
      "p_matlab": 0.004782529693503496,
      "p_python": 0.9947707280901457,
      "p_sql": 9.120206360520683e-05,
      "p_typescript": 7.53463181450207e-05
    },
    {
      "text": "class Robot:\n    \"\"\"This class describes a robot\"\"\"\n    def __init__(self, name, characteristics):\n        self.name = name\n        self.characteristics = characteristics\n\n    def move(self):\n        return \"Robot is moving.\"\n\n    def speak(self):\n        return \"Robot is speaking.\"",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0021639236458308206,
      "p_css": 0.0013698781883264002,
      "p_html": 0.02201132316504431,
      "p_java": 0.19773644719412822,
      "p_javascript": 1.7315841734561204e-06,
      "p_matlab": 7.2999845281549615e-06,
      "p_python": 0.7639754705412097,
      "p_sql": 0.011919461244013876,
      "p_typescript": 0.0008144644527448934
    },
    {
      "text": "def get_binary(num):\n    return bin(num)[2:]\n\nres = get_binary(num)\nprint(res)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.02973470116896121,
      "p_css": 8.697623489351443e-07,
      "p_html": 0.000236385742715545,
      "p_java": 3.241451459653632e-06,
      "p_javascript": 2.742353553322601e-05,
      "p_matlab": 0.804393346644927,
      "p_python": 0.1654635214912914,
      "p_sql": 0.00013116469225469296,
      "p_typescript": 9.345510508257083e-06
    },
    {
      "text": "def longest_common_subsequence(s1, s2):\n    n1 = len(s1)\n    n2 = len(s2)\n\n    dp_table = [[0]*(n2+1) for _ in range(n1+1)]\n    for i in range(n1):\n        for j in range(n2):\n            if s1[i] == s2[j]: \n                dp_table[i+1][j+1] = dp_table[i][j] + 1\n            else:\n                dp_table[i+1][j+1] = max(dp_table[i][j+1], \n                                        dp_table[i+1][j])\n    lcs_length = dp_table[-1][-1]\n    lcs_string = \"\" \n    i, j = n1, n2\n    while i > 0 and j > 0: \n        if dp_table[i][j] == dp_table[i-1][j]: \n            i -= 1\n        elif dp_table[i][j] == dp_table[i][j-1]: \n            j -= 1\n        else: \n            lcs_string = s1[i-1] + lcs_string \n            i -= 1\n            j -= 1\n    \n    return lcs_string, lcs_length",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.891860829411821e-05,
      "p_css": 2.4305286765431563e-05,
      "p_html": 0.00015406775021662355,
      "p_java": 4.968760950300417e-06,
      "p_javascript": 5.8058294511278e-06,
      "p_matlab": 0.6547757840239802,
      "p_python": 0.34473057031077536,
      "p_sql": 0.00010907297351171947,
      "p_typescript": 0.0001565064560551209
    },
    {
      "text": "def is_palindrome(word):\n    # reverse word\n    reverse_word = word[::-1]\n    # Compare reverse word and original word\n    if reverse_word == word:\n        return True\n    else:\n        return False\n\n# main\nwords = ['malayalam', 'rotator', 'civic']\n\nfor word in words:\n    if is_palindrome(word):\n        print(f'{word} is a palindrome.')\n    else:\n        print(f'{word} is not a palindrome.')",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1085804976832071,
      "p_css": 0.0018019635854569036,
      "p_html": 0.010069714627364758,
      "p_java": 3.970000124869599e-06,
      "p_javascript": 0.00014716544719907157,
      "p_matlab": 9.148141141223097e-05,
      "p_python": 0.8766701944703175,
      "p_sql": 0.0024172527447612144,
      "p_typescript": 0.0002177600301563067
    },
    {
      "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the dataset\ndata=pd.read_csv(\"data.csv\")\n\n# Extract the features and labels\nfeatures = data.iloc[:, :-1].values\nlabels = data.iloc[:, -1].values\n\n# splitting of training and testing data\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size = 0.2, random_state = 0)\n\n# Feature extraction\nvect = CountVectorizer()\nX_train_dtm = vect.fit_transform(X_train)\nX_test_dtm = vect.transform(X_test)\n\n# Building and training the model\nmodel = LogisticRegression()\nmodel.fit(X_train_dtm,y_train)\n\n# Predictions\npredictions = model.predict(X_test_dtm)\n\n# Evaluating the model\nprint('accuracy score:', accuracy_score(y_test, predictions)*100)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.1594555734947327,
      "p_css": 0.25819962352371073,
      "p_html": 0.0035040684814736946,
      "p_java": 3.732784139471083e-06,
      "p_javascript": 0.00010861503687794006,
      "p_matlab": 9.037926958354054e-06,
      "p_python": 0.5483073971291811,
      "p_sql": 4.361992609951081e-06,
      "p_typescript": 0.03040758963031613
    },
    {
      "text": "def max_min(arr):\n  max = arr[0]\n  min = arr[0]\n  \n  for i in range(1, len(arr)):\n    if arr[i] > max:\n      max = arr[i]\n    if arr[i] < min:\n      min = arr[i]\n  \n  return max, min\n\nmax, min = max_min(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.3623172866991417e-06,
      "p_css": 3.0505052033237578e-06,
      "p_html": 1.592755482052413e-06,
      "p_java": 3.8108144740660835e-07,
      "p_javascript": 3.1636286946909784e-07,
      "p_matlab": 0.984139587074692,
      "p_python": 0.01585199600476112,
      "p_sql": 1.1337441415555563e-07,
      "p_typescript": 1.6005238436917082e-06
    },
    {
      "text": "function say_hello(name) {\n return `Hello, ${name}!`;\n}\n\nfunction add_two(num) {\n return num + 2;\n}",
      "y_true": "javascript",
      "pred_label": "javascript",
      "p_bash": 4.377619949381331e-06,
      "p_css": 7.715336977802768e-11,
      "p_html": 2.676717218877825e-07,
      "p_java": 2.6992845775129676e-08,
      "p_javascript": 0.9999617017281361,
      "p_matlab": 3.0155729812110513e-05,
      "p_python": 3.4652817722342377e-06,
      "p_sql": 4.01763920435689e-09,
      "p_typescript": 8.809697680405437e-10
    },
    {
      "text": "def sum_dict_values(dict):\n  result = 0\n  for key in dict:\n    result += dict[key]\n\n  return result\n\ndict = {'a': 4, 'b': 2, 'c': 1}\nsum = sum_dict_values(dict)\nprint(sum) # 7",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 0.00012476664556975076,
      "p_css": 0.6037423182395392,
      "p_html": 0.0008915635084684014,
      "p_java": 0.00014779953138816597,
      "p_javascript": 0.0004576188071290006,
      "p_matlab": 0.0001140373297573327,
      "p_python": 0.3935776136362488,
      "p_sql": 0.0006683493885745067,
      "p_typescript": 0.00027593291332486555
    },
    {
      "text": "def isAnagram(string1, string2):\n s1 = sorted(string1.lower())\n s2 = sorted(string2.lower())\n\n if s1 == s2:\n return True\n else:\n return False\n\nstring1 = \"pizza\";\nstring2 = \"appaiz\";\n\nisAnagram(string1, string2); // True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0012421264439870475,
      "p_css": 0.0036965864365785866,
      "p_html": 0.004231760974522119,
      "p_java": 0.00010881580179073432,
      "p_javascript": 0.0005770414804771752,
      "p_matlab": 0.00019829519560741148,
      "p_python": 0.9887687494128696,
      "p_sql": 0.0006561860818184624,
      "p_typescript": 0.0005204381723487524
    },
    {
      "text": "def edit_distance(string1, string2):\n m = len(string1)\n n = len(string2)\n\n dp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n for i in range(m+1):\n dp[i][0] = i\n\n for j in range(n+1):\n dp[0][j] = j\n\n for i in range(1, m+1):\n for j in range(1, n+1):\n if string1[i-1]==string2[j-1]:\n dp[i][j] = dp[i-1][j-1]\n else:\n dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])\n\n return dp[m][n]\n\nstring1 = 'kitten'\nstring2 = 'sitting'\n\nprint(edit_distance(string1, string2))\n# Output: 3",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.130597725886023e-05,
      "p_css": 9.84357921999213e-06,
      "p_html": 0.00023497013054443416,
      "p_java": 6.9590321065386486e-06,
      "p_javascript": 7.40657574909839e-06,
      "p_matlab": 0.37418718582020577,
      "p_python": 0.6241134223044483,
      "p_sql": 0.0013131810423621631,
      "p_typescript": 4.5725538104628415e-05
    },
    {
      "text": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 3.5768766579531895e-05,
      "p_css": 0.002599387899705283,
      "p_html": 0.004177552588069747,
      "p_java": 0.7568595298102329,
      "p_javascript": 1.383287857301322e-10,
      "p_matlab": 4.214728044302216e-07,
      "p_python": 0.23584031612192202,
      "p_sql": 0.00044109124951352313,
      "p_typescript": 4.593195284374217e-05
    },
    {
      "text": "#!/usr/bin/env python\n# Copyright 2012-2013 Xiangfu\n# Copyright 2012-2013 Andrew Smith\n# Copyright 2013 Luke Dashjr\n#\n# This program is free software; you can redistribute it and/or modify it under\n# the terms of the GNU General Public License as published by the Free Software\n# Foundation; either version 3 of the License, or (at your option) any later\n# version.  See COPYING for more details.\n\n# Linux usage: ./usbtest.py /dev/ttyUSB0 0xhexcodes|string|icarus\n#  OR          python usbtest.py /dev/ttyUSB0 0xhexcodes|string|icarus\n#\n# Windows usage: ./usbtest.py COM1 0xhexcodes|string|icarus\n#\n#   sends the data sepcified to the USB device and waits\n#   for a reply then displays it\n#\n#   the data can be:\n#\t0xhexcodes: e.g. 0x68656c6c6f20776f726c640a\n#\t\t\twould send \"hello world\\n\"\n#\n#\tstring: e.g. sendsometext\n#\n#\ticarus: sends 2 known block payloads for an icarus device\n#\t\tand shows the expected and actual answers if it's\n#\t\ta working V3 icarus\n\nimport sys\nimport serial\nimport binascii\n\nif len(sys.argv) < 2:\n\tsys.stderr.write(\"Usage: \" + sys.argv[0] + \" device strings...\\n\")\n\tsys.stderr.write(\" where device is either like /dev/ttyUSB0 or COM1\\n\")\n\tsys.stderr.write(\" and strings are either '0xXXXX' or 'text'\\n\")\n\tsys.stderr.write(\" if the first string is 'icarus' the rest are ignored\\n\")\n\tsys.stderr.write(\"  and 2 valid icarus test payloads are sent with results displayed\\n\")\n\tsys.stderr.write(\"\\nAfter any command is sent it waits up to 30 seconds for a reply\\n\");\n\tsys.exit(\"Aborting\")\n\n# Open with a 10 second timeout - just to be sure\nser = serial.Serial(sys.argv[1], 115200, serial.EIGHTBITS, serial.PARITY_NONE, serial.STOPBITS_ONE, 10, False, False, 5)\n\nif sys.argv[2] == \"icarus\":\n\n\t# This show how Icarus use the block and midstate data\n\t# This will produce nonce 063c5e01\n\tblock = \"0000000120c8222d0497a7ab44a1a2c7bf39de941c9970b1dc7cdc400000079700000000e88aabe1f353238c668d8a4df9318e614c10c474f8cdf8bc5f6397b946c33d7c4e7242c31a098ea500000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000\"\n\tmidstate = \"33c5bf5751ec7f7e056443b5aee3800331432c83f404d9de38b94ecbf907b92d\"\n\n\trdata2  = binascii.a2b_hex(block.encode('ascii'))[95:63:-1]\n\trmid    = binascii.a2b_hex(midstate.encode('ascii'))[::-1]\n\tpayload = rmid + rdata2\n\n\tprint(\"Push payload to icarus: \" + binascii.hexlify(payload).decode('ascii'))\n\tser.write(payload)\n\n\tb=ser.read(4)\n\tprint(\"Result:(should be: 063c5e01): \" + binascii.hexlify(b).decode('ascii'))\n\n\t# Just another test\n\tpayload2 = \"ce92099c5a80bb81c52990d5c0924c625fd25a535640607d5a4bdf8174e2c8d500000000000000000000000080000000000000000b290c1a42313b4f21b5bcb8\"\n\tprint(\"Push payload to icarus: \" + payload2)\n\tser.write(binascii.a2b_hex(payload2.encode('ascii')))\n\n\tb=ser.read(4)\n\tprint(\"Result:(should be: 8e0b31c5): \" + binascii.hexlify(b).decode('ascii'))\nelse:\n\tdata = b\"\"\n\tfor arg in sys.argv[2::]:\n\t\tif arg[0:2:] == '0x':\n\t\t\tdata += binascii.a2b_hex(arg[2::].encode('ascii'))\n\t\telse:\n\t\t\tdata += arg.encode('latin-1')\n\n\tprint(\"Sending: 0x\" + binascii.hexlify(data).decode('ascii'))\n\tser.write(data)\n\n\t# If you're expecting more than one linefeed terminated reply,\n\t# you'll only see the first one\n\t# AND with no linefeed, this will wait the 10 seconds before returning\n\tprint(\"Waiting up to 10 seconds ...\")\n\tb=ser.readline()\n\tprint(\"Result: hex 0x\" + binascii.hexlify(b).decode('ascii'))\n\n\tprint(\"Result: asc %s\" % (repr(b),))\n\nser.close()\n",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 5.629274240775672e-06,
      "p_css": 1.6051775893094795e-05,
      "p_html": 1.0206559539119089e-05,
      "p_java": 3.991993055601846e-06,
      "p_javascript": 1.9983102893233354e-07,
      "p_matlab": 7.258651806299124e-08,
      "p_python": 2.166355642938665e-05,
      "p_sql": 4.83716736175808e-06,
      "p_typescript": 0.9999373472559332
    },
    {
      "text": "def product(x, y):\n    return x * y",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009088027321257457,
      "p_css": 0.011285969049130744,
      "p_html": 0.0017757321155485023,
      "p_java": 0.00014565277789443042,
      "p_javascript": 0.00039844044475542055,
      "p_matlab": 4.5818153386862186e-05,
      "p_python": 0.9841551322992219,
      "p_sql": 0.0005050714854841813,
      "p_typescript": 0.0007793809424522068
    },
    {
      "text": "def min_steps(arr):\n    min_step = 0\n    min_val = min(arr)\n    for i in range(len(arr)):\n        min_step += arr[i] - min_val \n    \n    return min_step",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.7416985425945921e-06,
      "p_css": 2.923990669757032e-06,
      "p_html": 2.745764630274964e-06,
      "p_java": 5.028239395913539e-07,
      "p_javascript": 2.6217257368137145e-07,
      "p_matlab": 0.7116230237027527,
      "p_python": 0.2883662568926438,
      "p_sql": 4.1725583690898383e-07,
      "p_typescript": 2.125698410614052e-06
    },
    {
      "text": "import graphene\n\nclass Query(graphene.ObjectType):\n    # An endpoint to fetch all books\n    books = graphene.List(BookType)\n\n    def resolve_books(self, info):\n        return books\n\n\nclass Mutation(graphene.ObjectType):\n    # An endpoint to add a book\n    add_book = graphene.Field(BookType, title=graphene.String(), author=graphene.String(), )\n\n    def mutate(self, info, title, author):\n        book = Book(title=title, author=author)\n        book.save()\n\n        return book\n\nschema = graphene.Schema(query=Query, mutation=Mutation)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.0009698720402533218,
      "p_css": 0.16319471931513108,
      "p_html": 0.41366729325924717,
      "p_java": 0.07340180394047661,
      "p_javascript": 0.001167497812097222,
      "p_matlab": 0.00012177733921667744,
      "p_python": 0.2759508676024095,
      "p_sql": 0.03090836519001618,
      "p_typescript": 0.040617803501152204
    },
    {
      "text": "import matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\n\nplt.title(\"Popular Programming Languages\")\nplt.ylabel(\"Percentage of Use\")\nplt.xlabel(\"Languages\")\n\nplt.show()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 9.215027992411593e-05,
      "p_css": 8.428702045476522e-05,
      "p_html": 0.04560538351695446,
      "p_java": 1.615142289253585e-05,
      "p_javascript": 0.0011625599313107313,
      "p_matlab": 0.00599860519036602,
      "p_python": 0.002828289878835578,
      "p_sql": 0.0003706188667124565,
      "p_typescript": 0.9438419538925494
    },
    {
      "text": "import math          \n\ndef generate_table(): \n \n # headers \n print (\"angle (in degrees) sin(angle) cos(angle)\") \n \n # values \n for angle in range(0, 370, 10): \n  print(\"{:7} {:15.4f} {:15.4f}\".format(angle,math.sin(math.radians(angle)),math.cos(math.radians(angle)))) \n\nif __name__ == \"__main__\": \n generate_table()",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0050449654317618,
      "p_css": 0.049865473215038376,
      "p_html": 0.016205409019554064,
      "p_java": 0.0006400385850294311,
      "p_javascript": 0.001853006974498145,
      "p_matlab": 0.08887277032718398,
      "p_python": 0.8253669788397096,
      "p_sql": 0.0054139607534651,
      "p_typescript": 0.006737396853759409
    },
    {
      "text": "def sum_dict(dict):\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n\ndictionary = { 'a': 1, 'b': 2, 'c': 3 }\nprint(sum_dict(dictionary)) # 6",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 7.213769696569692e-05,
      "p_css": 0.9914576727102972,
      "p_html": 0.0007884504040872252,
      "p_java": 0.000525261884412658,
      "p_javascript": 0.000137578995107345,
      "p_matlab": 0.0008228715973482138,
      "p_python": 0.005648331055195056,
      "p_sql": 0.00028588373397958004,
      "p_typescript": 0.00026181192260705627
    },
    {
      "text": "import time\n\ndef display_time():\n    time_string = time.strftime('%I:%M%p', time.localtime())\n    return f'It is currently {time_string}'",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0023224715304236065,
      "p_css": 0.052610079352571566,
      "p_html": 0.007725696933014093,
      "p_java": 0.0018109678189360198,
      "p_javascript": 0.04887400636168382,
      "p_matlab": 0.0011522386718160345,
      "p_python": 0.828997549123661,
      "p_sql": 0.02901520893036789,
      "p_typescript": 0.027491781277526058
    },
    {
      "text": "\"\"\"\nWrite a python code to a randomly select a number of items, but with a given algorithm\n\"\"\"\n\nimport random\n\ndef select_with_algorithm(items, size):\n    # Create a list from 0 to len(items)-1\n    item_indices = list(range(len(items)))\n    # Create a list of size 0\n    selection = []\n    # Iterate for the size desired\n    for _ in range(size):\n        # Select one of the indices randomly\n        index = random.choice(item_indices)\n        # Store it in the selection list\n        selection.append(items[index])\n        # Then remove it from the item_indices list\n        item_indices.remove(index)\n    # Return the selection\n    return selection\n\nif __name__ == '__main__':\n    items = [1, 2, 3, 4, 5, 6, 7]\n    size = 5\n    selection = select_with_algorithm(items, size)\n    print(selection)",
      "y_true": "sql",
      "pred_label": "typescript",
      "p_bash": 0.0016301895901317885,
      "p_css": 0.0013356013167728283,
      "p_html": 0.004794150108423607,
      "p_java": 6.724357672554765e-06,
      "p_javascript": 0.047941503807599664,
      "p_matlab": 0.0010786191743923834,
      "p_python": 0.05254598285562623,
      "p_sql": 0.2863540927836221,
      "p_typescript": 0.6043131360057588
    },
    {
      "text": "def sum_numbers(n):\n    \"\"\"\n    Computes the sum of the first `n` natural numbers\n    \"\"\"\n    s = 0\n    for i in range(n):\n        s += i+1\n    return s\n\nprint(sum_numbers(100))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0004671467592552365,
      "p_css": 0.00016853517536830095,
      "p_html": 0.004315791635086974,
      "p_java": 0.025142350107576414,
      "p_javascript": 0.005185772613861643,
      "p_matlab": 4.202514238244665e-05,
      "p_python": 0.9486288940229344,
      "p_sql": 0.000977810361507781,
      "p_typescript": 0.01507167418202702
    },
    {
      "text": "def is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp //= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.5207432076937843e-08,
      "p_css": 1.1068776597093892e-09,
      "p_html": 1.1753226424394758e-06,
      "p_java": 3.3041499573994884e-07,
      "p_javascript": 1.4874572636435661e-06,
      "p_matlab": 0.9999948677017657,
      "p_python": 1.5810863574227128e-06,
      "p_sql": 2.480002573053863e-08,
      "p_typescript": 5.069026397556217e-07
    },
    {
      "text": "def keep_even_only(arr):\n    return [n for n in arr if n%2 == 0]\n\narr = [2, 5, 8, 9, 10, 13, 11]\neven_arr = keep_even_only(arr)\n\nprint(even_arr)\n\n# Output:\n# [2, 8, 10]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.16008349657841e-09,
      "p_css": 1.2002294816658457e-08,
      "p_html": 2.734064491006966e-09,
      "p_java": 2.2152140239272366e-10,
      "p_javascript": 4.0258104515706425e-10,
      "p_matlab": 0.9999832859450435,
      "p_python": 1.6692252429149468e-05,
      "p_sql": 4.60130905111566e-12,
      "p_typescript": 2.7738107166966566e-10
    },
    {
      "text": "def capitalized(string): \n\toutput = []\n\t# Split the input string into list of words \n\twords = string.split()   \n\tfor word in words: \n\t\t# Capitalize the first letter\n\t\tfirst_letter = word[0] \n\t\tword = first_letter.upper() + word[1:] \n\t\toutput.append(word) \n        \n\treturn \" \".join(output) \n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(capitalized(string))",
      "y_true": "sql",
      "pred_label": "java",
      "p_bash": 1.000908495968931e-06,
      "p_css": 3.9080975172531774e-05,
      "p_html": 0.00044034157576337623,
      "p_java": 0.6494148451437096,
      "p_javascript": 4.026142353789562e-10,
      "p_matlab": 4.190157635567169e-08,
      "p_python": 0.007913664473392376,
      "p_sql": 0.34218989631456814,
      "p_typescript": 1.128304707522173e-06
    },
    {
      "text": "import scrapy\n\nclass ArticleSpider(scrapy.Spider):\n name = 'articles'\n start_urls = ['https://www.some-website.com/latest']\n \n def parse(self, response):\n for article in response.css('article'):\n yield {\n 'title': article.css('h2 ::text').extract_first(),\n 'url': article.css('a ::attr(href)').extract_first(),\n }\n\nnext_page = response.css('li.next a ::attr(href)').extract_first()\nif next_page is not None:\n yield response.follow(next_page, callback=self.parse)",
      "y_true": "css",
      "pred_label": "html",
      "p_bash": 1.126366660867507e-06,
      "p_css": 0.004499501381333014,
      "p_html": 0.9816138200760746,
      "p_java": 0.00954697185690905,
      "p_javascript": 3.695747984699252e-05,
      "p_matlab": 0.0009294268389678643,
      "p_python": 0.0012584042217912497,
      "p_sql": 3.6130520905557785e-05,
      "p_typescript": 0.0020776612575109975
    },
    {
      "text": "def func(a, b, c):\n    return a*b + a*c + b*c    # Use an optimized expression for lowest execution time",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.007206361614697714,
      "p_css": 0.017570663474201276,
      "p_html": 0.016409899411548075,
      "p_java": 0.000565796400529662,
      "p_javascript": 0.015871335468497862,
      "p_matlab": 0.008096428234787343,
      "p_python": 0.8964365375514148,
      "p_sql": 0.01335897243869702,
      "p_typescript": 0.024484005405626154
    },
    {
      "text": "class Example:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    \n    def print_values(self):\n        print(self.a, self.b, self.c)\n\nexample = Example(10, 20, 30)\nexample.print_values()",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 2.3939765035908896e-06,
      "p_css": 0.013239042943821257,
      "p_html": 0.7307153879113691,
      "p_java": 0.006333623421294133,
      "p_javascript": 8.950091874719386e-05,
      "p_matlab": 2.0225133843600225e-07,
      "p_python": 0.15025985013825005,
      "p_sql": 0.09935843648132175,
      "p_typescript": 1.561957354347579e-06
    },
    {
      "text": "import random\n\nfor x in range(5):\n print(random.randint(5, 15))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.452594235781083e-05,
      "p_css": 1.4746074080230253e-05,
      "p_html": 9.41690507962822e-05,
      "p_java": 4.4238588200563057e-07,
      "p_javascript": 2.6625766362093943e-06,
      "p_matlab": 0.05361314956308349,
      "p_python": 0.9402519935132119,
      "p_sql": 0.0059793432381610835,
      "p_typescript": 8.96765579118256e-06
    },
    {
      "text": "import random\n\n# function to calculate the value of a function\ndef func(x): \n  return x**2 - 4*x + 3\n\n# population size\npop_size = 50\n\n# range of initial values of x\nx_range = [-20, 20]\n\n# mutation rate\nmutation_rate = 0.02\n\n# maximum generation allowed\nmax_generation = 100\n\n# function to generate a random population\ndef initial_population(pop_size, x_range):\n  population = []\n  for _ in range(pop_size): \n    x = random.randint(*x_range)\n    population.append(x)\n  return population\n\n# function to calculate the current fitness of a given population\ndef calculate_fitness(population): \n  fitness = []\n  for x in population:\n    fx = func(x)\n    fitness.append(fx)\n  return fitness\n\n# function to evolve the population to the next generation\ndef evolve_population(population, mutation_rate): \n  population_fitness = calculate_fitness(population)\n  idx_max_fit = population_fitness.index(max(population_fitness))\n\n  new_population = []\n  for idx, x in enumerate(population):\n    if idx == idx_max_fit: \n      new_population.append(x)\n    else:\n      mutation_chance = random.random()\n      if mutation_chance <= mutation_rate: \n        new_x = x + random.randint(-1, 1)\n        new_population.append(new_x)\n      else: \n        new_population.append(x)\n  return new_population\n\n# generate the population\npopulation = initial_population(pop_size, x_range)\n\n# main loop of the genetic algorithm\nfor i in range(max_generation):\n  population = evolve_population(population, mutation_rate)\n\n# obtain the fittest solution\npopulation_fitness = calculate_fitness(population)\nidx_max_fit = population_fitness.index(max(population_fitness))\nmax_fitness_solution = population[idx_max_fit]\n\n# print out the fittest solution\nprint(\"Max fitness: \", max(population_fitness))\nprint(\"Max fitness solution: \", max_fitness_solution)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.0022888148572192952,
      "p_css": 0.0061690895211190125,
      "p_html": 0.003978650099915518,
      "p_java": 0.00014743142408799425,
      "p_javascript": 0.677662497029854,
      "p_matlab": 0.017064905540542998,
      "p_python": 0.00903639368620261,
      "p_sql": 0.2782496588891098,
      "p_typescript": 0.005402558951948798
    },
    {
      "text": "import re\n\ntext = \"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\",\n                    text)\n\nprint(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 2.7485523030437716e-20,
      "p_css": 5.396624299329547e-09,
      "p_html": 6.497690341658959e-08,
      "p_java": 0.9999999294225183,
      "p_javascript": 4.324484458087916e-11,
      "p_matlab": 4.4692981510472803e-14,
      "p_python": 1.2886179954299847e-10,
      "p_sql": 3.087969384679172e-11,
      "p_typescript": 9.228072173854963e-13
    },
    {
      "text": "# Calculate the average\ndef avg(lst): \n    sum = 0\n    count = 0\n    for num in lst:\n        if num is not None:\n            sum += num\n            count += 1\n    return sum / count\n\n# Create list of numbers\nlst = [30, 28, 40, 10, 0, None, 33, None]\n\n# Print average\nprint(avg(lst))\n\n# Output: 25.5",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00011242076570166024,
      "p_css": 3.1724553178940775e-05,
      "p_html": 0.00031311369604813407,
      "p_java": 0.0001391783854750637,
      "p_javascript": 0.0005653783625185016,
      "p_matlab": 0.9671549385704225,
      "p_python": 0.031220002458674782,
      "p_sql": 0.0003486767361365417,
      "p_typescript": 0.000114566471843992
    },
    {
      "text": "category = \"medium\"\n\ndef classify(salary):\n if salary <= 10000:\n return \"low\"\n elif salary <=30000:\n return \"medium\"\n else:\n return \"high\"\n\nresult = classify(30000)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00034821428826754564,
      "p_css": 0.020727547691500092,
      "p_html": 0.0004165302132155082,
      "p_java": 6.407412599093556e-05,
      "p_javascript": 0.0002296817358851505,
      "p_matlab": 0.00015546693099064958,
      "p_python": 0.9760013618585455,
      "p_sql": 0.0011829890187300268,
      "p_typescript": 0.0008741341368746589
    },
    {
      "text": "def compute_product(arr1, arr2):\n     result = []\n     for i in range(len(arr1)):\n          result.append(arr1[i] * arr2[i])\n     return result\n\ndef foo(arr1,arr2):\n return compute_product(arr1,arr2)\n\ndef bar(arr1,arr2):\n return compute_product(arr1,arr2)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00025024479654898617,
      "p_css": 0.0014429031454672838,
      "p_html": 0.0009304110799669052,
      "p_java": 6.0183908815104535e-05,
      "p_javascript": 0.00017659318407720883,
      "p_matlab": 0.0004721812562375249,
      "p_python": 0.9953357178937348,
      "p_sql": 0.0008823853956107993,
      "p_typescript": 0.00044937933954129967
    },
    {
      "text": "def remove_occurences(letter, string):\n\treturn string.replace(letter, '')",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.0066770745818274e-13,
      "p_css": 1.8162890945170529e-07,
      "p_html": 1.6741376279535466e-08,
      "p_java": 0.9997897148392502,
      "p_javascript": 3.9796754070489274e-15,
      "p_matlab": 3.4322596664181846e-11,
      "p_python": 0.00020723732041541776,
      "p_sql": 2.844852816790243e-06,
      "p_typescript": 4.582804840804854e-09
    },
    {
      "text": "def palindromeInRange(start, end):\n  for num in range(start, end + 1):\n    rev = 0\n    n = num\n    while num > 0:\n      r = num % 10\n      rev = (rev * 10) + r\n      num = num // 10\n    if rev == n and num > 10:\n      print(n, end=\" \")\n\nstart = 100\nend = 500\npalindromeInRange(start, end)\n\nOutput:\n101 111 121 131 141 151 161 171 181 191 202 212 222 232 242 252 262 272 282 292 303 313 323 333 343 353 363 373 383 393 404 414 424 434 444 454 464 474 484 494",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.997010374220912e-07,
      "p_css": 1.3124986578696793e-09,
      "p_html": 1.1497877762065751e-06,
      "p_java": 3.988160224038955e-08,
      "p_javascript": 8.297066023837328e-08,
      "p_matlab": 0.9975535446395069,
      "p_python": 0.0024436746764452716,
      "p_sql": 6.116497272539875e-08,
      "p_typescript": 7.458655004790735e-07
    },
    {
      "text": "import statistics\n\n# Store the list of numbers \nnumber_list = [3, 8, 19, 24, 7, 50]\n \n# Calculate the standard deviation  \nstdev = statistics.stdev(number_list) \n \n# Print the standard deviation \nprint(stdev)",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 0.03934990282092752,
      "p_css": 0.07005667779577486,
      "p_html": 0.050187140328985864,
      "p_java": 0.002325787029514903,
      "p_javascript": 0.7043276784372952,
      "p_matlab": 0.0020911081470482962,
      "p_python": 0.033906362982842324,
      "p_sql": 0.01145543253814705,
      "p_typescript": 0.08629990991946423
    },
    {
      "text": "def sort_nums(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.839415760716035e-06,
      "p_css": 1.0463703583382171e-05,
      "p_html": 1.4727592722040292e-05,
      "p_java": 1.1417201377549034e-06,
      "p_javascript": 1.4445721841073388e-06,
      "p_matlab": 0.0001929129356608366,
      "p_python": 0.9997392121389613,
      "p_sql": 2.1068827776080658e-05,
      "p_typescript": 1.1189093213786969e-05
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com/\"\nr  = requests.get(url)\ndata = r.text\nsoup = BeautifulSoup(data, 'html.parser')\n\nphone_numbers = []\nfor tag in soup.find_all('a'):\n text = tag.text.replace(\" \", \"\").replace(\"-\",\"\")\n if (text.isdigit() and len(text) == 10):\n phone_numbers.append(text)\n\nprint(\"Phone Numbers: \", phone_numbers)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.773443440715612e-14,
      "p_css": 0.03693481560644651,
      "p_html": 0.0012817667063814162,
      "p_java": 0.9615524506335394,
      "p_javascript": 8.006674788460409e-07,
      "p_matlab": 3.097596253154941e-07,
      "p_python": 0.0001328236891409224,
      "p_sql": 8.629512092746616e-05,
      "p_typescript": 1.0737816402423518e-05
    },
    {
      "text": "def get_recommendations(books):\n  recommendations = []\n  for book in books:\n    # Mapping books to a vector for comparison\n    vector_book = [book['author'], book['title'], book['publisher']]\n    # Iterating through the list of books to check similarities\n    for other_book in books:\n      # Mapping other books in the list books to a vector for comparison\n      other_vector_book = [other_book['author'], other_book['title'], other_book['publisher']]\n      # Check similarity\n      if other_vector_book != vector_book and evaluate_similarity(vector_book, other_vector_book):\n        recommendations.append(other_book['id'])\n  return recommendations\n  \ndef evaluate_similarity(vector_book1, vector_book2):\n  # Perform algorithm for checking the similarity of two books\n  # e.g. Pearson correlation\n  return True # or False",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0022752359248873004,
      "p_css": 0.14597788146180135,
      "p_html": 0.02394993369568594,
      "p_java": 0.0008004989972313236,
      "p_javascript": 0.10859619891264574,
      "p_matlab": 0.02610401923320764,
      "p_python": 0.09829540558659533,
      "p_sql": 0.05459977358139636,
      "p_typescript": 0.539401052606549
    },
    {
      "text": "def reverse_list(lst):\n    return lst[::-1]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00013667601780456744,
      "p_css": 0.0005738329319185861,
      "p_html": 0.0003289158337020638,
      "p_java": 2.7576313863089996e-05,
      "p_javascript": 6.335503887163237e-05,
      "p_matlab": 8.775139798908067e-06,
      "p_python": 0.9984593264667052,
      "p_sql": 0.00021269656625370455,
      "p_typescript": 0.0001888456910823226
    },
    {
      "text": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nbubble_sort(arr)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.1025285868709665e-08,
      "p_css": 4.007740272894458e-08,
      "p_html": 4.515593101483276e-08,
      "p_java": 1.0875713942043915e-08,
      "p_javascript": 1.1910034782947283e-08,
      "p_matlab": 0.9917734194186094,
      "p_python": 0.008226374311741272,
      "p_sql": 2.9468288239477757e-09,
      "p_typescript": 5.427845215583208e-08
    },
    {
      "text": "def selection_sort(arr):\n    for i in range(0, len(arr)-1):\n        min = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min]:\n                min = j\n        arr[i], arr[min] = arr[min], arr[i]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 5.674790000989434e-07,
      "p_css": 8.428157916800442e-07,
      "p_html": 7.489883238013848e-07,
      "p_java": 1.4647584593989893e-07,
      "p_javascript": 1.0767748990615031e-07,
      "p_matlab": 0.9870507402562999,
      "p_python": 0.012946055642870529,
      "p_sql": 6.851013163206605e-08,
      "p_typescript": 7.221542467484576e-07
    },
    {
      "text": "# Import the necessary libraries\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Load in the feature values and labels\nX = np.array([1.0472, 2.1930, 1.6025, 0.8886, 2.5850, 1.4692, 1.2548, 0.8496]).reshape(-1, 1)\ny = np.array([0, 0, 1, 0, 0, 0, 0, 1])\n\n# Create the logistic regression model\nmodel = LogisticRegression(solver='liblinear').fit(X, y)\n\n# Evaluate the model\nscore = model.score(X, y)\nprint('Model accuracy is:', score) # Output: 0.75",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.992629689239651,
      "p_css": 0.0011104444324214952,
      "p_html": 0.0001521024001263276,
      "p_java": 4.2990550437683264e-07,
      "p_javascript": 6.150678944157013e-06,
      "p_matlab": 2.7497067918419917e-06,
      "p_python": 0.004644557801617439,
      "p_sql": 1.6517271251952462e-09,
      "p_typescript": 0.001453874183216273
    },
    {
      "text": "import numpy as np\n\n#solve a sudoku puzzle\ndef solve(puzzle):\n    #create a puzzle matrix\n    puzzle_matrix=np.array(puzzle).reshape(9,9)\n    \n    #check if the empty cell is in the row\n    def row(row_index,num):\n        return num in puzzle_matrix[row_index]\n    \n    #check if the empty cell is in the column\n    def col(col_index,num):\n        return num in puzzle_matrix[:,col_index]\n    \n    #check if the empty cell is in the 3x3 grid\n    def grid(row_index,col_index,num):\n        row_start,row_end=row_index//3*3,row_index//3*3+3\n        col_start,col_end=col_index//3*3,col_index//3*3+3\n        return num in puzzle_matrix[row_start:row_end,col_start:col_end]\n    \n    #find the empty cell\n    for row_index in range(9):\n        for col_index in range(9):\n            if puzzle_matrix[row_index][col_index]==0:\n                #check numbers from 1-9\n                for num in range(1,10):\n                    if not row(row_index,num) and not col(col_index,num) and not grid(row_index,col_index,num):\n                        puzzle_matrix[row_index][col_index]=num\n                        solve(puzzle_matrix)\n                        puzzle_matrix[row_index][col_index]=0 #backtrack if no valid solution is found\n                return\n    print(puzzle_matrix)\n\n#input a sudoku puzzle\npuzzle = [[8,0,0,0,0,0,0,0,0],\n            [0,0,3,6,0,0,0,0,0],\n            [0,7,0,0,9,0,2,0,0],\n            [0,5,0,0,0,7,0,0,0],\n            [0,0,0,0,4,5,7,0,0],\n            [0,0,0,1,0,0,0,3,0],\n            [0,0,1,0,0,0,0,6,8],\n            [0,0,8,5,0,0,0,1,0],\n            [0,9,0,0,0,0,4,0,0]]\n\nsolve(puzzle)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.206432277760547e-05,
      "p_css": 8.564397645927999e-07,
      "p_html": 6.443630743474711e-05,
      "p_java": 2.281430646333655e-06,
      "p_javascript": 3.9568381780577324e-05,
      "p_matlab": 0.9890487732322344,
      "p_python": 0.010474755816608358,
      "p_sql": 1.657991513283716e-05,
      "p_typescript": 0.0002906841536203976
    },
    {
      "text": "from flask import Flask\nfrom flask_restplus import Api, Resource, reqparse\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(name)\napi = Api(app)\nparser = reqparse.RequestParser()\n\n\n@api.route('/date-time')\nclass DateTime(Resource):\n    @api.doc(security='basicAuth')\n    def get(self):\n        if not api.user.verified:\n            api.abort(401)\n        else:\n            import datetime\n            return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif name == 'main':\n app.run(debug=True)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.024212570946250442,
      "p_css": 0.8962643371281205,
      "p_html": 0.009324402853556823,
      "p_java": 0.00021834378841792485,
      "p_javascript": 2.206220550727887e-05,
      "p_matlab": 0.00010423198410891179,
      "p_python": 0.06589250765565453,
      "p_sql": 0.003794009769004045,
      "p_typescript": 0.00016753366937942614
    },
    {
      "text": "def find_unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0007564209406955036,
      "p_css": 0.00836991203285127,
      "p_html": 0.016953976809103342,
      "p_java": 5.330364834814993e-05,
      "p_javascript": 0.005380370085389032,
      "p_matlab": 0.015831913671204147,
      "p_python": 0.9519953267971648,
      "p_sql": 0.0002954724315028431,
      "p_typescript": 0.0003633035837407922
    },
    {
      "text": "divisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0]\nprint(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.002010973399585555,
      "p_css": 0.0025030233475851985,
      "p_html": 0.0057744843319111365,
      "p_java": 9.110809164740415e-05,
      "p_javascript": 0.0001862148619577857,
      "p_matlab": 0.805693561913032,
      "p_python": 0.18149779855528808,
      "p_sql": 0.00016902607394488878,
      "p_typescript": 0.002073809425047972
    },
    {
      "text": "def sum_list(input_list):\n  sum = 0\n  for i in input_list:\n    sum += i\n  return sum",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0013729105361476174,
      "p_css": 0.005480934411202876,
      "p_html": 0.014124828939014166,
      "p_java": 0.03816919525873401,
      "p_javascript": 0.0021015383066744385,
      "p_matlab": 0.8189999238148683,
      "p_python": 0.11104107213390049,
      "p_sql": 0.004997370626700447,
      "p_typescript": 0.0037122259727575607
    },
    {
      "text": "import random\n\ndef generate_random_list():\n    random_list = []\n    while len(random_list) < 5:\n        new_number = random.randint(1, 30)\n        if new_number not in random_list:\n            random_list.append(new_number)\n    return random_list",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004579801151411311,
      "p_css": 0.014592255787544034,
      "p_html": 0.0093077316814006,
      "p_java": 0.00041556187967144913,
      "p_javascript": 0.0015291001205461128,
      "p_matlab": 0.015101334439712026,
      "p_python": 0.9289986148231693,
      "p_sql": 0.021385063029664482,
      "p_typescript": 0.004090537086880659
    },
    {
      "text": "import xlrd\n\ndef extract_bold_strings(filename):\n strings = []\n workbook = xlrd.open_workbook(filename)\n sheet = workbook.sheet_by_index(0)\n for row in range(sheet.nrows):\n  for col in range(sheet.ncols):\n   cell_value = sheet.cell(row, col).value\n   font_style = sheet.cell_xf_index(row, col).font_record.weight\n   if font_style == 700:\n    strings.append(cell_value)\n return strings\n \n strings = extract_bold_strings('test.xlsx') \n print(strings) # prints ['STRING1', 'STRING2']",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.004406716674110981,
      "p_css": 0.01103882546001792,
      "p_html": 0.004751869744821394,
      "p_java": 6.612018182753901e-05,
      "p_javascript": 0.00048317807272951025,
      "p_matlab": 0.4652338037480019,
      "p_python": 0.5030762442276081,
      "p_sql": 0.008549007332925492,
      "p_typescript": 0.002394234557957078
    },
    {
      "text": "def largest_palindrome(arr):\n    max_palindrome = 0\n    for item in arr:\n        temp = str(item)\n        if temp == temp[::-1] and max_palindrome < item:\n            max_palindrome = item\n    return max_palindrome\n\nprint(largest_palindrome([12, 521, 1212, 84561, 91332]))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.490207535707042e-06,
      "p_css": 7.818733370044541e-05,
      "p_html": 0.00020824802315029198,
      "p_java": 1.1619243749160928e-06,
      "p_javascript": 0.00029622919089610764,
      "p_matlab": 0.9993387242465464,
      "p_python": 6.253411778456198e-05,
      "p_sql": 7.908880910313106e-07,
      "p_typescript": 9.634067920526865e-06
    },
    {
      "text": "def generate_message(name, message):\n    print(name + ' said: ' + \"'\" + message + \"'\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00010394205306144675,
      "p_css": 0.0006757436545653431,
      "p_html": 0.00017083516368346583,
      "p_java": 0.9942891193367502,
      "p_javascript": 2.4551328847328545e-09,
      "p_matlab": 2.74488639652964e-06,
      "p_python": 0.004728243870031032,
      "p_sql": 2.1170294834067732e-05,
      "p_typescript": 8.198285544969875e-06
    },
    {
      "text": "# Finding smallest number\nlist_of_nums = [2, 5, 3, 8, 10, 11, 9]\nsmallest_num = min(list_of_nums)\nprint('The smallest number is:', smallest_num)\n\n# Finding largest number\nlist_of_nums = [2, 5, 3, 8, 10, 11, 9]\nlargest_num = max(list_of_nums)\nprint('The largest number is:', largest_num)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005556531938522016,
      "p_css": 0.0015603337598873303,
      "p_html": 0.002856375739932834,
      "p_java": 0.00010613023197694025,
      "p_javascript": 0.001575095141479191,
      "p_matlab": 0.0009280820192860808,
      "p_python": 0.9894001338319671,
      "p_sql": 0.0003098719825617452,
      "p_typescript": 0.0027083240990566186
    },
    {
      "text": "def is_anagram(str1,str2):\n  # remove all white space\n  str1 = str1.replace(' ','')\n  str2 = str2.replace(' ','')\n\n  # check if length of strings are equal\n  if len(str1) != len(str2):\n    return False\n\n  # create a dictionary to store the frequency of each letter\n  freq_dict = {}\n\n  # calculate of each letter in the first string to the dictionary\n  for letter in str1:\n    if letter in freq_dict:\n      freq_dict[letter] += 1\n    else:\n      freq_dict[letter] = 1\n\n  # check if the frequency of each letter in the second string is in the dictionary\n  for letter in str2:\n    if letter not in freq_dict:\n      return False\n    else:\n      freq_dict[letter] -= 1\n\n  # check if each letter in the dictionary has a frequency of zero\n  for letter in freq_dict:\n    if freq_dict[letter] != 0:\n      return False\n\n  return True\n\nstring1 = \"star\" \nstring2 = \"rats\"\n\nprint(is_anagram(string1, string2))\n# Output : True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002897833595986401,
      "p_css": 0.015510626298517686,
      "p_html": 0.0003974323255113067,
      "p_java": 0.0004953287494651877,
      "p_javascript": 0.05645568885693234,
      "p_matlab": 0.004041651709741567,
      "p_python": 0.8079240226005772,
      "p_sql": 0.08872707377961254,
      "p_typescript": 0.026158392320043522
    },
    {
      "text": "def count_distinct_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n\nresult = count_distinct_substrings(\"abcd\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.171044117456292e-13,
      "p_css": 7.479941669102516e-08,
      "p_html": 2.832331923253187e-08,
      "p_java": 0.005152247523975173,
      "p_javascript": 5.8040716549667725e-15,
      "p_matlab": 3.500195330067254e-07,
      "p_python": 0.9948367185474452,
      "p_sql": 1.057809007483073e-05,
      "p_typescript": 2.695712979533467e-09
    },
    {
      "text": "import math\nmyString = \"Python Rocks!\"\nnumRounds = math.floor(len(myString) / 2)\nfor i in reversed(range(1, numRounds+1)):\n    print(myString[i-1::-1] + myString[i::])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.24978064987036827,
      "p_css": 0.009279040442575636,
      "p_html": 0.013708441009151905,
      "p_java": 9.827623994970883e-05,
      "p_javascript": 0.003244744305504532,
      "p_matlab": 0.09263257800247016,
      "p_python": 0.6138965555273986,
      "p_sql": 0.007259193048672976,
      "p_typescript": 0.010100521553908191
    },
    {
      "text": "def longestIncreasingSubsequence(list):\n n = len(list)\n maxLength = 0\n\n# Create a list to store the maximum length \n# of the increasing subsequence ending at 'i' \nlengthList = [1] * n\n\n# Compute optimized values in bottom up manner \nfor i in range(1, n):\n for j in range(0, i):\n  if (list[i] > list[j] and lengthList[i] < lengthList[j] + 1):\n   lengthList[i] = lengthList[j] + 1\n\n# Pick maximum of all computed values \nmaxLength = max(lengthList)\n\nreturn maxLength",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002901716875558446,
      "p_css": 0.00035712715582777245,
      "p_html": 0.0013521901834111856,
      "p_java": 4.3890211896902106e-05,
      "p_javascript": 0.003847193465082471,
      "p_matlab": 0.3106278147243994,
      "p_python": 0.5241820214882768,
      "p_sql": 0.01641824563413347,
      "p_typescript": 0.14288134544941627
    },
    {
      "text": "import itertools\n \ndef permutations(characters):\n permut = itertools.permutations(characters)\n\n for p in list(permut): \n print(\"\".join(p))\n\n# Usage\ncharacters = ['A', 'B', 'C']\npermutations(characters)\n\n# Output\nABC\nACB\nBAC\nBCA\nCAB\nCBA",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.01039255382868068,
      "p_css": 0.006304476718621751,
      "p_html": 0.013564569281519898,
      "p_java": 0.0002181612248863169,
      "p_javascript": 0.0022891542327920338,
      "p_matlab": 0.03324195963667481,
      "p_python": 0.13633704597403384,
      "p_sql": 0.7958029371262113,
      "p_typescript": 0.0018491419765792332
    },
    {
      "text": "from bs4 import BeautifulSoup\nimport requests\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nlinks = soup.select('a[href]')\nfor link in links:\n    print(link['href'])",
      "y_true": "sql",
      "pred_label": "html",
      "p_bash": 3.7402020471182975e-05,
      "p_css": 0.002258602359165156,
      "p_html": 0.955576730589865,
      "p_java": 2.360456623918323e-06,
      "p_javascript": 8.29467830685086e-05,
      "p_matlab": 0.012666566214610158,
      "p_python": 0.02398515746901168,
      "p_sql": 0.00533582476007003,
      "p_typescript": 5.440934711428905e-05
    },
    {
      "text": "def sort_tuples(a):\n    return sorted(a, key = lambda x: x[1])\n\na = [(1, 2), (4, 1), (9, 10), (13, -3)]\nprint(sort_tuples(a))\n\n# Output: [(13, -3), (4, 1), (1, 2), (9, 10)]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.001770007787703741,
      "p_css": 0.021699002085197688,
      "p_html": 0.002650513506392654,
      "p_java": 7.347488705544221e-05,
      "p_javascript": 0.0004641208874193977,
      "p_matlab": 7.20490832913935e-05,
      "p_python": 0.9730438852674513,
      "p_sql": 0.00012754860482727643,
      "p_typescript": 9.939789066093675e-05
    },
    {
      "text": "n = 20\n\n# prime number is greater than 1\nif n > 1:\n    # create an empty list\n    prime_numbers = []\n    # 2 is the smallest prime number\n    i = 2\n\n    while i < n:\n        # check if the number is divisible by any number\n        # less than it\n        for j in range(2,i):\n            # if yes, then it's not a prime number\n            if i % j == 0:\n                break\n        else:\n            # append the prime number to the list\n            prime_numbers.append(i)\n        i += 1\n\n# print the list of prime numbers\nprint(prime_numbers)\n# Output: [2, 3, 5, 7, 11, 13, 17, 19]",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.00022515708662875148,
      "p_css": 0.0016692097454943503,
      "p_html": 0.0015865183985521263,
      "p_java": 8.11809778651138e-05,
      "p_javascript": 0.012832529746560298,
      "p_matlab": 0.05822266840718623,
      "p_python": 0.41635560394392473,
      "p_sql": 0.022790032326396984,
      "p_typescript": 0.48623709936739135
    },
    {
      "text": "def binary_search(arr, x): \n    # Set the initial midpoint\n    start = 0\n    end = len(arr) - 1 \n    mid = 0\n  \n    while (start<=end): \n  \n        mid = (start + end) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] < x: \n            start = mid + 1\n  \n        # If x is greater, ignore left half \n        elif arr[mid] > x: \n            end = mid - 1 \n  \n        # If x is present at mid \n        else: \n            return mid \n  \n    # If we reach here, then the element \n    # was not present \n    return -1",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000519870389516247,
      "p_css": 0.0007971358253238473,
      "p_html": 0.0008168241042825324,
      "p_java": 8.719645994608818e-05,
      "p_javascript": 0.0004479365889511819,
      "p_matlab": 0.026490869478763623,
      "p_python": 0.9687057418395352,
      "p_sql": 0.00037376444090580347,
      "p_typescript": 0.0017606608727754336
    },
    {
      "text": "def assign_customers(customers, max_capacity):\n # Initialize an output array\n assigned = []\n\n # Keep track of the current capacity\n current_capacity = 0\n\n # Iterate over the customers\n for customer in customers:\n # Check if the current capacity + the customer size is less than or equal to the max capacity\n if current_capacity + customer <= max_capacity:\n # If it is, add the customer to the output array and increment the current capacity\n assigned.append(customer)\n current_capacity += customer\n else:\n # If it is not, break from the loop\n break\n\n return assigned\n\nprint(assign_customers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\n# Outputs: [1, 2, 3, 4, 5, 6, 7, 8]",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0027920024225361333,
      "p_css": 0.003045381629095008,
      "p_html": 0.0011569186928152145,
      "p_java": 0.0006291155423200902,
      "p_javascript": 0.03492175790076097,
      "p_matlab": 3.908382820792034e-05,
      "p_python": 0.001510191785322637,
      "p_sql": 0.0021974931145374217,
      "p_typescript": 0.9537080550844046
    },
    {
      "text": "import re\n\ndef search_string(search, string_list):\n    \"\"\"Search for a given string in a list of strings.\"\"\"\n    matches = []\n    for s in string_list:\n        if re.search(search, s):\n            matches.append(s)\n    return matches\n\n# Usage Example\nstring_list = [\"example1\", \"example2\", \"example3\", \"other1\", \"other2\"]\nmatches = search_string(\"example\", string_list)\nprint(matches)  # ['example1', 'example2', 'example3']",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 5.307414241705855e-08,
      "p_css": 0.0008193548314411652,
      "p_html": 0.005067110380041049,
      "p_java": 0.9754297115322034,
      "p_javascript": 7.858645924608578e-05,
      "p_matlab": 0.004729187221995975,
      "p_python": 0.012553532020941588,
      "p_sql": 0.0010534292090937218,
      "p_typescript": 0.0002690352708946875
    },
    {
      "text": "def average(arr):\n    return sum(arr) / len(arr)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.7767346355584324e-05,
      "p_css": 0.00024722569405081823,
      "p_html": 3.0951425856979626e-05,
      "p_java": 6.231891115511866e-05,
      "p_javascript": 6.139487888296601e-06,
      "p_matlab": 0.015559545467331638,
      "p_python": 0.9840491229450331,
      "p_sql": 3.255591645653565e-06,
      "p_typescript": 2.3673130682860683e-05
    },
    {
      "text": "def calculateSum(a, b):\n    return a + b\n\nsum = calculateSum(5, 6)\nprint(sum)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0027308343810706097,
      "p_css": 0.010746426774125994,
      "p_html": 0.01464279991793524,
      "p_java": 0.016549554174788112,
      "p_javascript": 0.002293125593394273,
      "p_matlab": 0.001456919165015097,
      "p_python": 0.9439923073235366,
      "p_sql": 0.0037256397408297814,
      "p_typescript": 0.0038623929293043454
    },
    {
      "text": "# Create Python scripts to automate law office workflow\n\n# Import libraries\nimport pandas as pd\nimport datetime \n\n# Create dataframe to hold initial project details\ndf = pd.DataFrame(columns=[\"Task Name\", \"Due Date\", \"Assigned To\"])\n\n# Create functions to store and retrieve workflow data\ndef store_data(name, due_date, assigned_to):\n  df.loc[len(df)] = ([name, due_date, assigned_to])\n  \n  # Store data in a CSV file\n  df.to_csv(\"law_office_workflow.csv\")\n  \ndef retrieve_data():\n  data = pd.read_csv(\"law_office_workflow.csv\")\n  return data\n\n# Set variables to store user input\ninput_name = input(\"What is the task name? \")\ninput_duedate = input(\"What is the due date? \")\ninput_assignee = input(\"Who is the assignee? \")\n\n# Store user input data\nstore_data(input_name, input_duedate, input_assignee)\n\n# Use the retrieve_data() function to get the stored data\nmy_data = retrieve_data()\n\n# Print the stored data\nprint(my_data)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0003330269644640606,
      "p_css": 0.020955443427434533,
      "p_html": 0.0007146891741182621,
      "p_java": 1.7196670691110572e-05,
      "p_javascript": 9.166669255784351e-05,
      "p_matlab": 4.5942222573536276e-07,
      "p_python": 0.0015772359753310965,
      "p_sql": 0.0016792943317713203,
      "p_typescript": 0.974630987341406
    },
    {
      "text": "def classify_strings(words):\n    classified_words = {\n        'plants': [],\n        'animals': [],\n        'minerals': []\n    } \n    for word in words:\n        if word.lower() in ('plants', 'plant'):\n            classified_words['plants'].append(word)\n        elif word.lower() in ('animals', 'animal'):\n            classified_words['animals'].append(word)\n        elif word.lower() in ('minerals', 'mineral'):\n            classified_words['minerals'].append(word)\n    return classified_words",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 0.07921310817928397,
      "p_css": 0.04076756900898143,
      "p_html": 0.03602485055898027,
      "p_java": 5.839321706686253e-05,
      "p_javascript": 0.001116486145304805,
      "p_matlab": 0.6007854472871754,
      "p_python": 0.21515087790193796,
      "p_sql": 0.025836297040077495,
      "p_typescript": 0.0010469706611919382
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\n# Send a request to the URL\nres = requests.get(\"https://www.example.com\")\n\n# Parse the response\nsoup = BeautifulSoup(res.text, 'html.parser')\n\n# Extract the data\ndata = soup.find_all('div')",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.4887885659881206e-12,
      "p_css": 0.15125267327746153,
      "p_html": 0.6561172338656434,
      "p_java": 0.19225381661059018,
      "p_javascript": 1.2787230398814003e-05,
      "p_matlab": 5.957497356592949e-09,
      "p_python": 1.9633679479222596e-05,
      "p_sql": 5.206263171240914e-05,
      "p_typescript": 0.0002917867457282605
    },
    {
      "text": "import keras\nfrom keras.datasets import mnist\nfrom keras.layers import Dense, Activation\nfrom keras.models import Sequential\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Initializing the model\nmodel = Sequential()\n\n# Input and hidden Layer\nmodel.add(Dense(units=32, input_shape=(784, )))\nmodel.add(Activation('relu'))\n\n# Output Layer\nmodel.add(Dense(units=10))\nmodel.add(Activation('softmax'))\n\n# Compiling the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n# Train the model\nhistory = model.fit(x_train, \n                    y_train, \n                    epochs=25, \n                    batch_size=200, \n                    validation_data=(x_test ,y_test ))\n\n# Evaluate the model\nscores = model.evaluate(x_test, y_test)",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.4828832938338117,
      "p_css": 0.003620263051478078,
      "p_html": 0.04498530888343577,
      "p_java": 0.000652905413712334,
      "p_javascript": 0.00017402299858027098,
      "p_matlab": 3.6671775094666295e-06,
      "p_python": 0.4664613720658406,
      "p_sql": 1.9139005596841113e-06,
      "p_typescript": 0.0012172526750721113
    },
    {
      "text": "name = input(\"Enter your name:\") \n \nprint(\"Welcome to my program \" + name + \"!\")",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.4250216769813626,
      "p_css": 9.262837251847221e-05,
      "p_html": 0.004438245104741764,
      "p_java": 0.5647803935622423,
      "p_javascript": 1.2778724140683784e-07,
      "p_matlab": 1.0090855442772211e-05,
      "p_python": 0.005564816795162699,
      "p_sql": 8.158214803463894e-05,
      "p_typescript": 1.0438393253411122e-05
    },
    {
      "text": "def sort_ascending(array):\n  array.sort()\n  return array\n\nsort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.02497600945242699,
      "p_css": 0.03224388097444478,
      "p_html": 0.012550558080189239,
      "p_java": 0.0010826827561420142,
      "p_javascript": 0.0021287543494150326,
      "p_matlab": 0.8717284357186756,
      "p_python": 0.05209001697815564,
      "p_sql": 0.00035245667232570896,
      "p_typescript": 0.002847205018225048
    },
    {
      "text": "import math\n \ndef is_prime(num):\n    # Check if the number is 1 or less than 1\n    if num <= 1:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n \ndef sum_primes(n):\n    prime_sum = 0\n    count = 0\n \n    i = 2\n    while count < n:\n        if is_prime(i):\n            prime_sum += i\n            count += 1\n        i += 1\n \n    return prime_sum\n\nsum_primes(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.54826991866434e-05,
      "p_css": 5.849595146868493e-07,
      "p_html": 5.885643652874967e-05,
      "p_java": 1.4482370505480679e-05,
      "p_javascript": 3.377755088078923e-05,
      "p_matlab": 0.021283087906494018,
      "p_python": 0.9772667048605131,
      "p_sql": 2.6163644161317288e-05,
      "p_typescript": 0.001300859572215175
    },
    {
      "text": "def quicksort(arr):\n if len(arr) <= 1:\n return arr\n pivot = arr[len(arr) // 2]\n less_than_pivot = [x for x in arr if x < pivot]\n equal_to_pivot = [x for x in arr if x == pivot]\n greater_than_pivot = [x for x in arr if x > pivot]\n return quicksort(less_than_pivot) + equal_to_pivot + quicksort(greater_than_pivot)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.0415186790020145e-09,
      "p_css": 2.9629446710627327e-09,
      "p_html": 6.235230126044517e-10,
      "p_java": 2.0331454519255746e-10,
      "p_javascript": 1.343653428973909e-10,
      "p_matlab": 0.9999997058015555,
      "p_python": 2.8793914185102234e-07,
      "p_sql": 2.955220693335934e-11,
      "p_typescript": 1.264084344162062e-09
    },
    {
      "text": "def permutations(string): \n    if string == \"\": \n        return [''] \n          \n    prev_list = permutations(string[1:]) \n    next_list = [] \n    char = string[0] \n    for word in prev_list: \n        for j in range(len(word) + 1): \n            next_list.append(word[:j] + char + word[j:]) \n    return next_list \n\nstring = \"abc\"\nperm_list = permutations(string) \nprint (perm_list)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 8.44900574520397e-11,
      "p_css": 9.133245702911644e-07,
      "p_html": 6.992078010270411e-07,
      "p_java": 0.9981918894701767,
      "p_javascript": 7.329327705043446e-14,
      "p_matlab": 3.0957052781104267e-07,
      "p_python": 0.0017392156681242485,
      "p_sql": 6.693331600069103e-05,
      "p_typescript": 3.9358235709327955e-08
    },
    {
      "text": "x = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nif x > y:\n result = x-y\nelse:\n result = y-x\n \nprint(\"The result of the operation is:\", result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0009913356749341167,
      "p_css": 0.0029299717364391622,
      "p_html": 0.0008589248877403187,
      "p_java": 0.022015604868879386,
      "p_javascript": 0.0016300972963888868,
      "p_matlab": 6.455336503699233e-10,
      "p_python": 0.9689260992115605,
      "p_sql": 0.0005309501569878518,
      "p_typescript": 0.0021170155215361366
    },
    {
      "text": "def find_index_and_value(my_list):\n    for i, num in enumerate(my_list):\n        print(\"Element with index %d has value %d\" % (i, num))\n\nmy_list = [2,4,6,8,10]\nfind_index_and_value(my_list)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.75515733456819e-09,
      "p_css": 8.013687420896506e-10,
      "p_html": 4.92936118868212e-08,
      "p_java": 1.3862234422660805e-09,
      "p_javascript": 3.4628834504972296e-09,
      "p_matlab": 0.9999993284111125,
      "p_python": 5.440085483150181e-07,
      "p_sql": 1.891224428703833e-09,
      "p_typescript": 6.098986990149315e-08
    },
    {
      "text": "import random \n\ndef random_array(N): \n \n    result = [] \n  \n    for i in range(N): \n  \n        # Stores the number in result after checking for its presence. \n        data = random.randint(1, 100) \n  \n        if data not in result: \n            result.append(data) \n          \n    return result \n\n# Driver Code \nN = 10\nres = random_array(N) \nprint(res)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.314699452682717e-06,
      "p_css": 0.0014302732274719331,
      "p_html": 4.729256853662549e-05,
      "p_java": 2.434316741450117e-07,
      "p_javascript": 4.4189132557944115e-06,
      "p_matlab": 8.228649798618193e-05,
      "p_python": 0.9962849864077742,
      "p_sql": 0.002001369211467973,
      "p_typescript": 0.00014681504238025657
    },
    {
      "text": "def is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp //= 10\n  if num == sum:\n    return True  \n  else:\n    return False",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 8.017329291460433e-11,
      "p_css": 3.2891573292549433e-12,
      "p_html": 2.6654494165117314e-09,
      "p_java": 3.6669114617147866e-10,
      "p_javascript": 6.322702030062384e-10,
      "p_matlab": 0.999999996158331,
      "p_python": 4.920972513901223e-11,
      "p_sql": 6.721109900897814e-12,
      "p_typescript": 3.786491529861615e-11
    },
    {
      "text": "def filter_greater_than_5(arr):\n    new_arr = []\n    for x in arr:\n        if x <= 5:\n            new_arr.append(x)\n    return new_arr\n\narr = [3, 4, 6, 1, 8, 9]\nprint(filter_greater_than_5(arr))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.5284329047388276e-14,
      "p_css": 3.115462127388453e-13,
      "p_html": 4.937028784272744e-15,
      "p_java": 1.2705621219249982e-14,
      "p_javascript": 1.2949148944121394e-14,
      "p_matlab": 0.9999999999956604,
      "p_python": 3.8991607832383386e-12,
      "p_sql": 3.702959762925393e-19,
      "p_typescript": 7.318074157707059e-14
    },
    {
      "text": "def getIndex(arr, item):\n    for i in range(len(arr)):\n        if arr[i] == item:\n            return i\n    return -1\n\narr = [1,2,3,4,5,6]\nitem = 5\nindex = getIndex(arr, item)\nprint('Index of', item, 'is', index) # index is 4",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0002265125791988166,
      "p_css": 0.00022751438291648997,
      "p_html": 0.003002232636885468,
      "p_java": 1.5433572440464984e-05,
      "p_javascript": 0.008767325808952156,
      "p_matlab": 0.12287876045072456,
      "p_python": 0.8648415520733905,
      "p_sql": 2.799195510599852e-06,
      "p_typescript": 3.786929998085508e-05
    },
    {
      "text": "import webbrowser\nfrom bs4 import BeautifulSoup\n\nxml_doc = \"<xml><people><person><name>John Doe</name><age>30</age></person><person><name>Jane Smith</name><age>25</age></person></people></xml>\"\nsoup = BeautifulSoup(xml_doc, 'xml')\n\nhtml = \"\"\"\n<html>\n <head>\n  <title>People</title>\n </head>\n <body>\n  <h1>People</h1>\n  <table>\n   <thead>\n    <tr>\n     <th>Name</th>\n     <th>Age</th>\n    </tr>\n   </thead>\n   <tbody>\n\"\"\"\n\nfor person in soup.find_all('person'):\n name = person.find('name').text\n age = person.find('age').text\n html += f\"    <tr><td>{name}</td><td>{age}</td></tr>\"\n\nhtml += \"\"\"\n   </tbody>\n  </table>\n </body>\n</html>\n\"\"\"\n\nwith open('file.html', 'w') as f:\n f.write(html)\n\nwebbrowser.open('file.html')",
      "y_true": "html",
      "pred_label": "html",
      "p_bash": 1.3770502421153366e-13,
      "p_css": 6.024927806723693e-12,
      "p_html": 0.9999999999906628,
      "p_java": 3.109246158172884e-12,
      "p_javascript": 1.4016954693744597e-14,
      "p_matlab": 2.4155574893544552e-15,
      "p_python": 2.9778683157142175e-14,
      "p_sql": 1.7350698674652372e-14,
      "p_typescript": 1.8183964061681677e-15
    },
    {
      "text": "list = [1,2,3,4,5]\nfor i in reversed(list):\n    print(i)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00011409716594419021,
      "p_css": 0.0006940128493800238,
      "p_html": 0.0007868954187438162,
      "p_java": 1.6727138673530264e-05,
      "p_javascript": 0.0003268382313835618,
      "p_matlab": 0.9172200493388322,
      "p_python": 0.07367184272350184,
      "p_sql": 0.0068988176478472696,
      "p_typescript": 0.0002707194856937977
    },
    {
      "text": "import requests\nimport csv\nimport os\n\n# Get the latest COVID-19 data from Github repository\nurl = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/04-01-20",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 1.5444789755341768e-05,
      "p_css": 0.7721201606870707,
      "p_html": 0.00685443926144404,
      "p_java": 0.18294568124407432,
      "p_javascript": 0.0008848123259768635,
      "p_matlab": 0.0001669827908336958,
      "p_python": 0.02791366744617726,
      "p_sql": 0.0072969500341791005,
      "p_typescript": 0.0018018614204885232
    },
    {
      "text": "import random\n\n# Create an empty array\narray = []\n\n# Fill the array with random numbers\nfor i in range(10):\n    array.append(random.randrange(10))\n\n# Generate a random index\nindex = random.randrange(10)\n\n# Print the numbers and the index\nprint(array)\nprint(\"Random Index:\", index)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.03980066499357845,
      "p_css": 0.0010477002948984732,
      "p_html": 0.012199527164613378,
      "p_java": 0.00012208146690037252,
      "p_javascript": 0.004139037347659322,
      "p_matlab": 0.008630676072688123,
      "p_python": 0.9068190094413487,
      "p_sql": 0.002332748034994583,
      "p_typescript": 0.024908555183318585
    },
    {
      "text": "def most_common_element(lst):\n count_dict = {}\n \n for num in lst:\n if num in count_dict:\n count_dict[num] += 1\n else:\n count_dict[num] = 1\n\n max_count = -1\n max_element = None\n \n for key in count_dict.keys():\n if count_dict[key] > max_count:\n max_count = count_dict[key]\n max_element = key\n \n return max_element\n \nprint(most_common_element([1, 2, 3, 1, 3, 2, 2, 3, 3]))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 4.4586941696503955e-05,
      "p_css": 1.520232254288398e-05,
      "p_html": 9.3310929950646e-05,
      "p_java": 4.4617412147548535e-06,
      "p_javascript": 2.5293100092575697e-05,
      "p_matlab": 0.9958496263053994,
      "p_python": 0.0038835428193303044,
      "p_sql": 3.659854740938041e-05,
      "p_typescript": 4.737729236350159e-05
    },
    {
      "text": "def longestPalindrome(str):\n    length = len(str)\n    max_length = 0\n    start = 0\n\n    # check all possible substrings\n    for i in range(length):\n        for j in range(i, length):\n            # find longest palindrome with center i, j\n            if str[i] == str[j] and isPalindrome(str, i, j):\n                if (j - i + 1) > max_length:\n                    max_length = j - i + 1\n                    start = i\n    \n    return str[start:start + max_length]\n\ndef isPalindrome(str, left, right):\n\t# check palindrome\n\twhile left < right:\n\t\tif str[left] != str[right]:\n\t\t\treturn False\n\t\tleft += 1\n\t\tright -= 1\n\treturn True\n \n# Driver code \nstr = \"abracadabra\"\nprint(longestPalindrome(str))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 8.027863276342405e-06,
      "p_css": 3.955152799141407e-06,
      "p_html": 0.00021767519619570356,
      "p_java": 2.03577179831167e-06,
      "p_javascript": 0.005811009398105764,
      "p_matlab": 0.00013836279747895977,
      "p_python": 0.9927621940556466,
      "p_sql": 0.001053949841181703,
      "p_typescript": 2.7899235174606566e-06
    },
    {
      "text": "# Function to calculate GCD and LCM of two numbers\ndef gcd_lcm(a, b): \n    if a > b:\n        small = b\n    else:\n        small = a\n    for i in range(1, small+1):\n        if((a % i == 0) and (b % i == 0)): \n            gcd = i \n              \n    lcm = int(a*b)/int(gcd) \n    return gcd, lcm\n\n# Driver Code\na = 8\nb = 12\n\ngcd, lcm = gcd_lcm(a, b)\nprint(\"GCD:\", gcd)\nprint(\"LCM:\", lcm)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 7.291299195186595e-06,
      "p_css": 3.6007935103802207e-06,
      "p_html": 3.492425454146319e-05,
      "p_java": 0.9995946476677682,
      "p_javascript": 6.391253354711774e-05,
      "p_matlab": 6.227152705939116e-07,
      "p_python": 9.114192303149744e-05,
      "p_sql": 1.7909745112646076e-06,
      "p_typescript": 0.0002020678386241217
    },
    {
      "text": "def pig_latin(sentence):\n words = sentence.split()\n translated_words = []\n for word in words:\n translated_words.append(word[1:] + word[0] + \"ay\")\n return \" \".join(translated_words)\n \nsentence = input(\"Enter a sentence to translate: \")\nprint(pig_latin(sentence))",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 0.0008176887554140871,
      "p_css": 0.0016715159385772397,
      "p_html": 0.0034416239588786895,
      "p_java": 1.804468257163287e-06,
      "p_javascript": 7.08316887565848e-05,
      "p_matlab": 0.00012682735557485806,
      "p_python": 0.05472445133373202,
      "p_sql": 0.9391229227582878,
      "p_typescript": 2.233374252168886e-05
    },
    {
      "text": "class Temperature:\n def __init__(self, value):\n self.value = value\n\ndef to_fahrenheit(self):\n return (self.value * 9/5) + 32\n\ndef to_celsius(self):\n return (self.value - 32) * 5/9\n\ntemp = Temperature(212)\nprint(temp.to_celsius())\nprint(temp.to_fahrenheit())",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 9.275759148341747e-06,
      "p_css": 0.004898325822094314,
      "p_html": 0.0026373914225197013,
      "p_java": 9.716514838080201e-07,
      "p_javascript": 4.486770781080284e-06,
      "p_matlab": 0.9874288624553578,
      "p_python": 3.206272198984918e-07,
      "p_sql": 0.005000537791549323,
      "p_typescript": 1.9827699845646423e-05
    },
    {
      "text": "\"\"\"\nDevelop a Python code to generate the nth number in the Fibonacci series.\n\"\"\"\n\ndef generate_fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        a = 1\n        b = 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b\n    \nif __name__ == '__main__':\n    n = 8\n    print(generate_fibonacci(n))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.02269895054143222,
      "p_css": 6.71471349105243e-05,
      "p_html": 0.0004885909903695549,
      "p_java": 1.2041217246730669e-06,
      "p_javascript": 0.003431025794121102,
      "p_matlab": 0.05522406060706521,
      "p_python": 0.519987828294098,
      "p_sql": 0.00010041915820606927,
      "p_typescript": 0.3980007733580727
    },
    {
      "text": "def sum_list(arr):\n    \"\"\"Finds the sum of a given list of numbers.\n    \n    Args:\n        arr (list): List of numbers.\n        \n    Returns:\n        int: Sum of list elements.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 4.974587163376052e-07,
      "p_css": 1.0056146152543442e-08,
      "p_html": 4.435331970457035e-06,
      "p_java": 0.9918147397363234,
      "p_javascript": 0.007281619163620391,
      "p_matlab": 0.0008821830610387595,
      "p_python": 2.3143865146159728e-06,
      "p_sql": 4.246479603638356e-06,
      "p_typescript": 9.954326066236638e-06
    },
    {
      "text": "def calculate_sum(numbers):\n    return sum(numbers)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.00013914892310363822,
      "p_css": 0.0004096711141866784,
      "p_html": 0.0009749955716413681,
      "p_java": 0.6270610180631482,
      "p_javascript": 0.001163707635314576,
      "p_matlab": 1.9311945654403216e-08,
      "p_python": 0.3698384870224505,
      "p_sql": 0.0001984753506543955,
      "p_typescript": 0.00021447700755500325
    },
    {
      "text": "def compare_strings(str1, str2):\n  if len(str1) == len(str2):\n    for char in str1:\n      if not char in str2:\n        return False\n    return True\n  else: \n    return False\n  \nstr1 = \"foo\"\nstr2 = \"bar\"\nprint(compare_strings(str1, str2))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000265942690357269,
      "p_css": 0.0008750453847919514,
      "p_html": 4.3728249461956785e-06,
      "p_java": 1.2894936323987357e-05,
      "p_javascript": 0.06319856247941728,
      "p_matlab": 0.00019380783676912583,
      "p_python": 0.9308566508169832,
      "p_sql": 0.004455540938990169,
      "p_typescript": 0.0001371820914209607
    },
    {
      "text": "def max_three_nums(arr):\n    max_three = []\n\n    for i in range(3):\n        max_element = 0 \n        for j in range(len(arr)): \n            if max_element < arr[j]:\n                max_element = arr[j] \n        arr.remove(max_element) \n        max_three.append(max_element) \n    return max_three \n    \narr = [7, 9, 15, 10, 11] \nprint(max_three_nums(arr))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 3.521298498473063e-08,
      "p_css": 3.288339950609843e-08,
      "p_html": 4.713279726196316e-08,
      "p_java": 6.352125211381345e-09,
      "p_javascript": 5.43623508190401e-09,
      "p_matlab": 0.9997665948615941,
      "p_python": 0.00023324455790552892,
      "p_sql": 2.288382294569638e-09,
      "p_typescript": 3.1274576267431864e-08
    },
    {
      "text": "class Item(object):\n    # create the item with its associated values\n    def __init__(self, n, v, w):\n        self.name = n\n        self.value = v\n        self.weight = w\n\n    # Evaluate the items by their value density\n    def getValue(self):\n        return self.value/self.weight\n\ndef knapsack(items, maxWeight):\n    # sort items by value density in descending order\n    items.sort(key=Item.getValue, reverse=True)\n    totalValue = 0\n    # iterate over the items\n    for i in range(len(items)):\n        if(maxWeight - items[i].weight >= 0):\n            totalValue += items[i].value\n            maxWeight -= items[i].weight\n    return totalValue",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.0008891289342394703,
      "p_css": 0.7928460019184166,
      "p_html": 0.11020444906909829,
      "p_java": 3.5780529680403874e-05,
      "p_javascript": 0.05802031297749481,
      "p_matlab": 0.02270262840779903,
      "p_python": 0.005541406675275074,
      "p_sql": 0.009696563462090234,
      "p_typescript": 6.37280259061495e-05
    },
    {
      "text": "def printEvenNumbers(num):\n for n in range(2, num+1):\n if n%2 == 0:\n print(n)\n\nprintEvenNumbers(50)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.5004017548415675e-16,
      "p_css": 1.0144127822575545e-21,
      "p_html": 6.9651749227273496e-15,
      "p_java": 2.0679288795339746e-17,
      "p_javascript": 1.7572495094251836e-17,
      "p_matlab": 0.9999999999412525,
      "p_python": 5.873735983267095e-11,
      "p_sql": 2.3517798837766516e-15,
      "p_typescript": 1.479049348706798e-16
    },
    {
      "text": "def functionA_opt(n):\n s = 0\n s = n*(n+1)*(n+2) // 6\n return s",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.0458681726310896e-12,
      "p_css": 2.5489143973834694e-10,
      "p_html": 2.7598246867965498e-11,
      "p_java": 8.025231839209999e-13,
      "p_javascript": 3.049889349032867e-12,
      "p_matlab": 3.595677408560778e-18,
      "p_python": 0.9999999972484059,
      "p_sql": 2.461794976084354e-09,
      "p_typescript": 4.1123042603913176e-13
    },
    {
      "text": "class VendingMachine:\n    def __init__(self):\n        self.items = []\n        self.balance = 0\n\n    def insert_coin(self, amount):\n        self.balance += amount\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        self.items.remove(item)\n\n    def purchase_item(self, item):\n        if self.balance >= item.price:\n            self.items.remove(item)\n            self.balance -= item.price\n\n    def return_change(self):\n        change = self.balance\n        self.balance = 0\n        return change",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001945466333158863,
      "p_css": 0.04655312157341228,
      "p_html": 0.12371241955828215,
      "p_java": 3.1352456661028323e-06,
      "p_javascript": 0.0016843901379867056,
      "p_matlab": 6.203129884232126e-06,
      "p_python": 0.7817402055686575,
      "p_sql": 0.0460833437300121,
      "p_typescript": 2.2634422782913388e-05
    },
    {
      "text": "def print_perfect_numbers(N):\n for val in range(1, N + 1):\n   sum = 0\n   for testval in range(1, val):\n       if (val % testval) == 0:\n           sum += testval\n   if (sum == val):\n       print(val)",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 6.097742686124469e-06,
      "p_css": 7.37047245066496e-06,
      "p_html": 4.178700516258036e-05,
      "p_java": 1.946378901685356e-05,
      "p_javascript": 1.4873586259668975e-06,
      "p_matlab": 0.99609114990262,
      "p_python": 0.0038180388290207454,
      "p_sql": 9.496284634914168e-06,
      "p_typescript": 5.108615782118524e-06
    },
    {
      "text": "try:\n  user_input = int(input(\"Please enter an integer: \"))\nexcept ValueError:\n  print(\"That's not an integer!\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01874823769110253,
      "p_css": 0.0029270041417800226,
      "p_html": 0.04134771866027209,
      "p_java": 0.08192497782218917,
      "p_javascript": 0.039084707654233636,
      "p_matlab": 3.8605811216658924e-05,
      "p_python": 0.7984403494444372,
      "p_sql": 0.006609354201996535,
      "p_typescript": 0.010879044572772356
    },
    {
      "text": "s = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = set()\n    for c in s:\n        s_list.add(c)\n    \n    return list(s_list)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.008867203452817787,
      "p_css": 0.004041435073734805,
      "p_html": 0.007809837239107141,
      "p_java": 0.023685142743500177,
      "p_javascript": 0.00222708682717665,
      "p_matlab": 0.0019815892284102857,
      "p_python": 0.9214447585244643,
      "p_sql": 0.027971811685073796,
      "p_typescript": 0.001971135225715063
    },
    {
      "text": "string = \"Hello World !\"\n\nresult = \"\" \nfor char in string:\n    if char not in result: \n        result += char\n\nprint(\"String after removing duplicate characters:\", result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.6715692037621712e-07,
      "p_css": 0.0022562956397405146,
      "p_html": 2.3262673265441263e-05,
      "p_java": 6.9185230717279954e-06,
      "p_javascript": 3.964446466019365e-09,
      "p_matlab": 6.057526104876634e-07,
      "p_python": 0.9953758719932834,
      "p_sql": 0.0023341774603115118,
      "p_typescript": 2.6968363500818633e-06
    },
    {
      "text": "# import the necessary libraries\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# Create the dataset \nx = np.array([1, 2, 3, 4, 5]) \ny = np.array([1, 2, 3, 4, 5]) \n\n# Create the model \n# Fit the data \ncoeff = np.polyfit(x, y, 1) \n\n# Generate the prediction \npredict = np.poly1d(coeff)\n\n# Plot the regression line\nplt.plot(x, y, 'o')\nplt.plot(x, predict(x), 'x')\nplt.xlabel('x-axis')\nplt.ylabel('y-axis')\nplt.show()",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.901858013016701,
      "p_css": 0.00018873583353287877,
      "p_html": 0.0005870122589623984,
      "p_java": 6.738309468226843e-07,
      "p_javascript": 6.588430651950148e-06,
      "p_matlab": 4.274097595512877e-06,
      "p_python": 0.005028758231644896,
      "p_sql": 3.5626250651492325e-08,
      "p_typescript": 0.09232590867371389
    },
    {
      "text": "import numpy as np\nimport matplotlib.pyplot as plt \n\ndef mandelbrot(width, height):\n    # Super sample size (larger number of iterations for high-quality image)\n    ssample = 4\n    # Width and height of the image\n    width *= ssample\n    height *= ssample\n    # Maximum iterations for each point on the complex plane.\n    max_iteration = 100\n\n    # Initialize an empty array for storing the iteration count.\n    cmap = np.zeros([height, width])\n    x0, x1 = -2., 1.\n    y0, y1 = -1.5, 1.5\n\n    # Loop over a grid of points on the complex plane.\n    for y in range(height):\n        zy = y * (y1 - y0) / (height - 1) + y0\n        for x in range(width):\n            zx = x * (x1 - x0) / (width - 1) + x0\n            z = zx + zy * 1j\n            c = z\n\n            # Iterate until the iteration count exceeds the maximum.\n            for n in range(max_iteration):\n            \t# Calculate the next value in the sequence\n                z = z * z + c\n                # Check if the absolute value of 'z' has exceeded 2\n                if abs(z) > 4:\n                    break\n            # Set the iteration count (cmap) for the current point.\n            cmap[y, x] = n\n\n    cmap = cmap / (np.max(cmap) / 255.) # Rescale for better visibility\n    cmap = cmap[::ssample, ::ssample] # Resize\n    plt.imsave('mandelbrot.png', cmap, cmap='nipy_spectral')\n\nmandelbrot(800, 600)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.005393048772838098,
      "p_css": 0.012126342691999583,
      "p_html": 0.007483527179305605,
      "p_java": 5.290745992451181e-05,
      "p_javascript": 0.005034337797052608,
      "p_matlab": 0.31226426616284314,
      "p_python": 0.031687517514673344,
      "p_sql": 0.01310642254794457,
      "p_typescript": 0.6128516298734186
    },
    {
      "text": "from sklearn.tree import DecisionTreeClassifier\n\nX = [['basketball'],[‘tennis ball']]\ny = ['ball', 'ball']\n\nclf = DecisionTreeClassifier()\nclf.fit(X,y)\n\nprediction = clf.predict([['basketball']])\nprint(prediction)\n# Output: ['ball']",
      "y_true": "python",
      "pred_label": "bash",
      "p_bash": 0.9973562771555781,
      "p_css": 0.0003654040588831064,
      "p_html": 4.682724924463013e-05,
      "p_java": 2.2635579631253163e-06,
      "p_javascript": 9.408696852309638e-06,
      "p_matlab": 6.540544709608871e-06,
      "p_python": 0.0022097116293911647,
      "p_sql": 3.27285403211477e-10,
      "p_typescript": 3.566780092775472e-06
    },
    {
      "text": "class TreeIterator:\n    def __init__(self, root):\n        self.root = root\n        self.stack = []\n        self.current = None\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        # Case 1: there is a left-subtree\n        if self.current is None:\n            if self.root is not None:\n                self.stack.append(self.root)\n                self.current = self.root.left\n            else:\n                # Tree is empty\n                raise StopIteration\n        # Case 2: there is a right-subtree\n        elif self.current.right is not None:\n            self.stack.append(self.current.right)\n            self.current = self.current.right.left\n        # Case 3: there is no right-subtree and no left-subtree\n        elif self.stack:\n            self.current = self.stack.pop()\n        else:\n            # It's the end of the traversal\n            self.current = None\n            raise StopIteration\n        return self.current.value",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 0.0004752685038534784,
      "p_css": 0.0393143458338766,
      "p_html": 0.048554433210513684,
      "p_java": 2.9678858451355482e-05,
      "p_javascript": 0.000522717892923712,
      "p_matlab": 6.455753949178738e-05,
      "p_python": 0.07609420141965179,
      "p_sql": 0.8334002890287913,
      "p_typescript": 0.0015445077124462323
    },
    {
      "text": "def num_of_days(month): \n\tif month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\": \n\t\treturn \"31 days\"\n\telif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n\t\treturn \"30 days\"\n\telif month == \"February\":\n\t\treturn \"28 or 29 days\"\n\telse:\n\t\treturn \"Invalid input\"\n\nmonth = \"January\"\nprint(num_of_days(month))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06150564895183607,
      "p_css": 0.05644384335262449,
      "p_html": 0.029798009699369448,
      "p_java": 0.0007475529859486175,
      "p_javascript": 0.016236422954097315,
      "p_matlab": 0.0048990783451735844,
      "p_python": 0.7863954028174756,
      "p_sql": 0.00013308355895968194,
      "p_typescript": 0.043840957334515214
    },
    {
      "text": "def multiply_list(l): \n\tfrom functools import reduce\n\treturn reduce((lambda x, y: x * y), l)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.07358040865771077,
      "p_css": 0.08006416672056525,
      "p_html": 0.031250519802281704,
      "p_java": 0.0015506843887407686,
      "p_javascript": 0.030558047418335288,
      "p_matlab": 0.0022937923983037973,
      "p_python": 0.7685243008647927,
      "p_sql": 0.005673503084527535,
      "p_typescript": 0.006504576664742245
    },
    {
      "text": "# Python\ndef matrixMultiplication(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrix multiplication not possible\"\n\n    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]\n\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C\n\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\nC = matrixMultiplication(A, B)\n\nprint(C) # Output = [[21, 17], [0, 2]]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.21587678065151e-06,
      "p_css": 1.6438253482767324e-08,
      "p_html": 1.6143867885062583e-06,
      "p_java": 2.051268427012301e-09,
      "p_javascript": 1.4005935801906002e-09,
      "p_matlab": 0.47418401047833947,
      "p_python": 0.5258055892296514,
      "p_sql": 4.438778547806731e-06,
      "p_typescript": 1.1135977659203193e-07
    },
    {
      "text": "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"This product is simply incredible!\"]\n\nanalyzer = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    scores = analyzer.polarity_scores(sentence)\n    print(\"{:-<40} {}\".format(sentence, str(scores)))",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.009836393116117682,
      "p_css": 0.08115223170797337,
      "p_html": 0.016133033442413944,
      "p_java": 0.0012560160147611758,
      "p_javascript": 0.000293629174771477,
      "p_matlab": 0.0030834055377339563,
      "p_python": 0.824275436654948,
      "p_sql": 0.022460899854872377,
      "p_typescript": 0.041508954496408054
    },
    {
      "text": "def filter_prime_numbers(l):\n    result = []\n    for num in l:\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.400317459937809e-07,
      "p_css": 9.551152593135765e-10,
      "p_html": 1.8451777662579706e-06,
      "p_java": 2.126081870721451e-06,
      "p_javascript": 5.219396273932835e-08,
      "p_matlab": 0.4642197286407978,
      "p_python": 0.5357755285279867,
      "p_sql": 4.1219303644955367e-07,
      "p_typescript": 6.61977180521648e-08
    },
    {
      "text": "# Create a dictionary to record the frequency of words in a given string\n\n# Split the string into words\nwords = \"this is a test string\".strip().split()\n\n# We use a dictionary to store the frequency of the words\nfreq = {}\n\n# Iterate through the words and count their frequency\nfor word in words:\n    if word in freq:\n        freq[word] += 1\n    else:\n        freq[word] = 1\n\nprint(freq)",
      "y_true": "python",
      "pred_label": "sql",
      "p_bash": 3.794532658596187e-05,
      "p_css": 0.03330949399961995,
      "p_html": 0.015945527887892108,
      "p_java": 0.006268082335980109,
      "p_javascript": 2.5683624226801323e-05,
      "p_matlab": 4.188352147827928e-05,
      "p_python": 0.3230109455670011,
      "p_sql": 0.5536127643184526,
      "p_typescript": 0.06774767341876298
    },
    {
      "text": "def count_even_numbers(list1):\n    count = 0\n    for item in list1:\n        if item % 2 == 0:\n            count += 1\n    return count\n\nprint(count_even_numbers(list1))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0522253488394793e-05,
      "p_css": 0.0006723112170912081,
      "p_html": 0.0003501300483064578,
      "p_java": 7.342917996706764e-07,
      "p_javascript": 0.00013347932517381183,
      "p_matlab": 2.8271346903609467e-05,
      "p_python": 0.9987847674902584,
      "p_sql": 1.4930688789958617e-05,
      "p_typescript": 4.85333818860649e-06
    },
    {
      "text": "import sys\n\ndef main():\n try:\n number = int(sys.argv[1])\n except (IndexError, ValueError):\n number = int(input('Please enter a number: '))\n\n prime_list = []\n for num in range(2, number + 1):\n for i in prime_list:\n if num % i == 0:\n break\n else:\n prime_list.append(num)\n\nprint(prime_list)\n\nif __name__ == '__main__':\n main()",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.004382826402965444,
      "p_css": 2.9353590005917632e-05,
      "p_html": 0.0012371902949742592,
      "p_java": 0.005195234683077574,
      "p_javascript": 5.08399050311306e-05,
      "p_matlab": 0.5392233261660772,
      "p_python": 0.4484935576247747,
      "p_sql": 0.0012608261874860948,
      "p_typescript": 0.00012684514560767777
    },
    {
      "text": "def area_triangle(side1, side2, side3):\n    # calculate the semi-perimeter\n    s = (side1 + side2 + side3) / 2\n    # calculate the area\n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    \n    return area",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.015041002793529977,
      "p_css": 0.025672740753768783,
      "p_html": 0.008415186349772534,
      "p_java": 0.001055625286288796,
      "p_javascript": 0.008707551750652744,
      "p_matlab": 0.0019744096208413465,
      "p_python": 0.9049425149605824,
      "p_sql": 0.002797442207352711,
      "p_typescript": 0.03139352627721082
    },
    {
      "text": "def lambda_handler(event, context):\n    numbers = event['numbers']\n    result = [num ** 2 for num in numbers if num % 2 == 0]\n    return {'result': result}",
      "y_true": "css",
      "pred_label": "matlab",
      "p_bash": 4.75107004276942e-06,
      "p_css": 5.890270182284544e-08,
      "p_html": 2.3794181941422617e-05,
      "p_java": 0.000748528967356314,
      "p_javascript": 4.570100031955423e-05,
      "p_matlab": 0.937008830289283,
      "p_python": 0.06210477839931697,
      "p_sql": 5.497386761370772e-05,
      "p_typescript": 8.583321424408891e-06
    },
    {
      "text": "from collections import defaultdict\n\ndef index_strings(strings):\n    index = defaultdict(list)\n    for string in strings:\n        for i, char in enumerate(string):\n            index[char].append((i, string))\n    return index\n\nstrings = [\"I am learning python\", \"I love coding\", \"Coding is awesome\"]\nprint(index_strings(strings))\n# {\n#     'I': [(0, 'I am learning python'), (0, 'I love coding')], \n#     'a': [(2, 'I am learning python')],\n#     'm': [(3, 'I am learning python')],\n#     'l': [(5, 'I am learning python'), (4, 'I love coding')],\n#     'e': [(7, 'I am learning python'), (6, 'I love coding')],\n#     'r': [(8, 'I am learning python'), (7, 'I love coding')],\n#     'n': [(10, 'I am learning python'), (9, 'I love coding'), (5, 'Coding is awesome')],\n#     'i': [(12, 'I am learning python'), (13, 'I love coding'), (6, 'Coding is awesome')],\n#     'g': [(14, 'I am learning python'), (15, 'I love coding'), (7, 'Coding is awesome')],\n#     'p': [(17, 'I am learning python')],\n#     'y': [(19, 'I am learning python')],\n#     't': [(20, 'I am learning python')],\n#     'h': [(21, 'I am learning python')],\n#     'o': [(16, 'I love coding'), (8, 'Coding is awesome')],\n#     'c': [(4, 'I love coding'), (0, 'Coding is awesome')],\n#     'd': [(5, 'I love coding'), (1, 'Coding is awesome')],\n#     's': [(2, 'Coding is awesome')],\n#     'a': [(3, 'Coding is awesome')],\n#     'w': [(4, 'Coding is awesome')],\n#     'e': [(5, 'Coding is awesome')],\n# }",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.8397687678606466,
      "p_css": 0.014961116522814217,
      "p_html": 0.015354388897610066,
      "p_java": 0.00048055427663158294,
      "p_javascript": 0.004467097296011377,
      "p_matlab": 0.004761408096842341,
      "p_python": 0.04150492658185859,
      "p_sql": 0.004763617302103613,
      "p_typescript": 0.07393812316548176
    },
    {
      "text": "\"\"\"\nSuggest a code snippet to generate a histogram in Python\n\"\"\"\n\n# import the required libraries\nimport matplotlib.pyplot as plt\n\n# set the data to plot\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# generate the histogram\nplt.hist(data, bins=7, color='blue', edgecolor='black')\nplt.title('A Histogram')\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\n# show the plot\nplt.show()",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.0042263058625198364,
      "p_css": 0.003390755157372599,
      "p_html": 0.03425254975279614,
      "p_java": 0.0009415915778980929,
      "p_javascript": 4.288818350514835e-06,
      "p_matlab": 4.769780900109428e-05,
      "p_python": 0.005556879300996655,
      "p_sql": 0.0007435229717307968,
      "p_typescript": 0.9508364087493343
    },
    {
      "text": "def third_largest(arr): \n    first = arr[0] \n    second = -float(\"inf\") \n    third = -float(\"inf\") \n  \n    for num in arr[1:]: \n        if (num > first): \n            third = second \n            second = first \n            first = num\n  \n        elif (num > second):              \n            third = second \n            second = num \n  \n        elif (num > third):               \n            third = num \n                               \n    return third",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.4877835963873089e-07,
      "p_css": 3.225995155533585e-10,
      "p_html": 3.4110883720556963e-07,
      "p_java": 1.8363028027788338e-08,
      "p_javascript": 3.4716819265627545e-08,
      "p_matlab": 0.9999864717233546,
      "p_python": 1.282761369460407e-05,
      "p_sql": 4.261976465115034e-08,
      "p_typescript": 1.1475354249759386e-07
    },
    {
      "text": "largestNum = lambda a: max(a)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.012343240382351144,
      "p_css": 0.0384214336025816,
      "p_html": 0.030011118681042788,
      "p_java": 0.002802979801487617,
      "p_javascript": 0.0068433962520964954,
      "p_matlab": 0.007045705099583146,
      "p_python": 0.8779942635825678,
      "p_sql": 0.005570805882720265,
      "p_typescript": 0.018967056715569107
    },
    {
      "text": "def most_frequent(list): \n  return max(set(list), key = list.count)\n  \nmost_frequent([3,4,3,4,3])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016991190465942977,
      "p_css": 0.013578801751741929,
      "p_html": 0.003836336794079686,
      "p_java": 0.00027954314924721175,
      "p_javascript": 0.0027528240511918768,
      "p_matlab": 0.0013572600481657174,
      "p_python": 0.9508222830866488,
      "p_sql": 0.02331906833592082,
      "p_typescript": 0.002354763736409548
    },
    {
      "text": "def find_divisble_numbers(start, end):\n    divisible_numbers = []\n    for i in range(start, end + 1):\n        if i % 5 == 0 and i % 7 == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers\n\ndivisible_numbers = find_divisble_numbers(1000, 2000)\nprint(divisible_numbers)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.000831947636396782,
      "p_css": 0.0029087274214304633,
      "p_html": 0.003253108477563105,
      "p_java": 0.00014528304645653023,
      "p_javascript": 0.0002800834500639595,
      "p_matlab": 0.1140467208067032,
      "p_python": 0.8711398334862013,
      "p_sql": 0.0010741075290368284,
      "p_typescript": 0.00632018814614785
    },
    {
      "text": "import datetime\n\ndef diff_in_days(date1, date2):\n    d1 = datetime.datetime.strptime(date1, \"%d %B %Y\")\n    d2 = datetime.datetime.strptime(date2, \"%d %B %Y\")\n    delta = d2 - d1\n    return delta.days\n\ndate1 = \"29 June 1999\"\ndate2 = \"29 July 1999\"\n\ndifference = diff_in_days(date1, date2)\nprint(\"Difference is\", difference, \"days\")",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.003225706710901311,
      "p_css": 0.028420286033667766,
      "p_html": 0.008002403476417496,
      "p_java": 0.000962549072832537,
      "p_javascript": 0.00418937915779106,
      "p_matlab": 0.00160545272174633,
      "p_python": 0.9468500719423619,
      "p_sql": 0.0018396282056068714,
      "p_typescript": 0.004904522678674817
    },
    {
      "text": "def pig_latin(sentence):\n  words = sentence.split(' ')\n  result = \"\"\n  for word in words:\n    result += word[1:] + word[0] + \"ay\" + \" \"\n  return result\n\nprint(pig_latin(\"Hello world\"))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.01704835012311514,
      "p_css": 0.0011502458596718392,
      "p_html": 0.0007171445867099824,
      "p_java": 1.613511460966748e-11,
      "p_javascript": 0.00023053038195573535,
      "p_matlab": 1.6767157994266598e-06,
      "p_python": 0.9725682147694821,
      "p_sql": 0.00828063008264072,
      "p_typescript": 3.207464490103291e-06
    },
    {
      "text": "class Customer:\n\ndef __init__(self, name, email, phone_number):\n self.name = name\n self.email = email\n self.phone_number = phone_number\n\ndef getName(self):\n return self.name\n\ndef getEmail(self):\n return self.email\n\ndef getPhoneNumber(self):\n return self.phone_number",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 4.753948066982671e-05,
      "p_css": 0.0016087753300077431,
      "p_html": 0.009390569210146459,
      "p_java": 0.003516397007750858,
      "p_javascript": 1.9520882919715444e-08,
      "p_matlab": 2.6016918347009834e-07,
      "p_python": 0.9696275509382621,
      "p_sql": 0.015784258480567203,
      "p_typescript": 2.4629862529380788e-05
    },
    {
      "text": "# Read two integer values\na = int(input())\nb = int(input())\n\n# Swap their values\ntemp = a\na = b\nb = temp\n\n# Print the variables\nprint(\"a =\", a)\nprint(\"b =\", b)",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 0.0003372772914524574,
      "p_css": 8.767141331496102e-06,
      "p_html": 3.666434840303649e-05,
      "p_java": 0.9996097594872766,
      "p_javascript": 4.481502114435473e-07,
      "p_matlab": 6.814037795118154e-08,
      "p_python": 1.0848521776113566e-07,
      "p_sql": 1.175336248790314e-06,
      "p_typescript": 5.731619480604505e-06
    },
    {
      "text": "def sum_sq_list(lst): \n    sum = 0  \n    for i in lst: \n        sum += i * i \n    return sum",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0015032689810835296,
      "p_css": 0.006277575625558446,
      "p_html": 0.015933469142110152,
      "p_java": 0.04620873362376837,
      "p_javascript": 0.0018590002982172115,
      "p_matlab": 0.5304390407735455,
      "p_python": 0.38882336341822243,
      "p_sql": 0.005344352448850763,
      "p_typescript": 0.003611195688643439
    },
    {
      "text": "def count_occurences(s1, s2):\n    count = 0\n    for i in range(len(s2) - len(s1) + 1):\n        if s2[i:i + len(s1)] == s1:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    s1 = 'aa'\n    s2 = 'aaaaaa'\n    count = count_occurences(s1, s2)\n    print(count)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 3.485790296758812e-05,
      "p_css": 0.0002903543985930856,
      "p_html": 0.00011813799178708559,
      "p_java": 3.0226288788719866e-06,
      "p_javascript": 9.654723807356312e-06,
      "p_matlab": 0.00019508570386634502,
      "p_python": 0.999089578463778,
      "p_sql": 0.00021619193225964604,
      "p_typescript": 4.311625406213802e-05
    },
    {
      "text": "def print_dict_alphabetically(dictionary):\n    sorted_keys = sorted(dictionary.keys())\n    for key in sorted_keys:\n        print(f\"{key}: {dictionary[key]}\")\n\nprint_dict_alphabetically({\n 'Mark': '68',\n 'Carol': '35',\n 'John': '42'\n})",
      "y_true": "css",
      "pred_label": "css",
      "p_bash": 5.343848243789541e-05,
      "p_css": 0.9951118288317852,
      "p_html": 0.0001637528064150621,
      "p_java": 3.923309746854381e-06,
      "p_javascript": 2.7508292984755883e-05,
      "p_matlab": 3.460359623569346e-05,
      "p_python": 0.004396845490859161,
      "p_sql": 9.082813987019653e-05,
      "p_typescript": 0.00011727104966507186
    },
    {
      "text": "# Function to get the middle of the linked list \ndef getmiddle(head): \n    if(head == None): \n        return head \n  \n    slow_ptr = head \n    fast_ptr = head \n  \n    while(fast_ptr != None and fast_ptr.next != None): \n        slow_ptr = slow_ptr.next\n        fast_ptr = fast_ptr.next.next\n  \n    return slow_ptr",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 0.0001873867783929255,
      "p_css": 0.0029457522643676526,
      "p_html": 0.9745376191809986,
      "p_java": 0.0002044114774238163,
      "p_javascript": 0.00864315371276316,
      "p_matlab": 0.00019634784169336259,
      "p_python": 0.008862181598578656,
      "p_sql": 0.000716402508415384,
      "p_typescript": 0.003706744637366267
    },
    {
      "text": "text_cleaned = \"This is the text for processing!\nSome punctuation must be removed.\nLets Trim the whitespace too.\nPlease preserve the cases as is.\"",
      "y_true": "typescript",
      "pred_label": "typescript",
      "p_bash": 6.756051109421167e-06,
      "p_css": 8.02138278968785e-06,
      "p_html": 2.67850894837637e-05,
      "p_java": 2.1175909528032977e-06,
      "p_javascript": 2.8361958594262143e-05,
      "p_matlab": 1.5640201471202807e-06,
      "p_python": 4.5266913613587205e-05,
      "p_sql": 1.0601957234340581e-05,
      "p_typescript": 0.9998705250360751
    },
    {
      "text": "def login(username, password):\n    hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()\n    if username in users and users[username] == hashed_password:\n        return True\n    else:\n        return False",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.0631556769255827e-05,
      "p_css": 0.0691978888163331,
      "p_html": 0.0066979765821813825,
      "p_java": 0.03743138889046607,
      "p_javascript": 0.001127310410491748,
      "p_matlab": 0.002884835319518363,
      "p_python": 0.8366208757782294,
      "p_sql": 0.0344635188634698,
      "p_typescript": 0.011565573782540766
    },
    {
      "text": "num = 15\nwhile num >= 10:\n    print(num)\n    num -= 1",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.4802289397017448e-09,
      "p_css": 7.897587721926221e-13,
      "p_html": 1.1839985279000871e-08,
      "p_java": 9.141373171276467e-10,
      "p_javascript": 1.0331071136239212e-09,
      "p_matlab": 0.9999984704389487,
      "p_python": 1.5083169834945968e-06,
      "p_sql": 6.478724775391738e-10,
      "p_typescript": 4.3279466366432966e-09
    },
    {
      "text": "def generate_invoice(customer_info):\n  items = customer_info['items']\n  total = sum(item['price'] * item['quantity'] for item in items)\n  subtotal = total - (total * customer_info['discount'])\n  tax = subtotal * 0.15\n  invoice = {\n    'name': customer_info['name'],\n    'items': items,\n    'discount': customer_info['discount'],\n    'total': total,\n    'subtotal': subtotal,\n    'tax': tax\n  }\n \n  return invoice",
      "y_true": "css",
      "pred_label": "python",
      "p_bash": 0.0010885083070088064,
      "p_css": 0.16405592956088613,
      "p_html": 0.02324371982627916,
      "p_java": 0.010272874556784089,
      "p_javascript": 0.0032070984287314247,
      "p_matlab": 0.0003958432888113226,
      "p_python": 0.797393443373814,
      "p_sql": 0.0002772029362552686,
      "p_typescript": 6.537972142977018e-05
    },
    {
      "text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\n\n# Fetch the html page\npage = requests.get(url)\n\n# Parse the HTML page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the product names and prices\nproduct_names = soup.find_all('div', class_='name')\nproduct_prices = soup.find_all('div', class_='price')\n\n# Print the results\nfor i in range(len(product_names)):\n print(product_names[i].text, product_prices[i].text)",
      "y_true": "python",
      "pred_label": "html",
      "p_bash": 1.718370930613581e-13,
      "p_css": 4.881702066891889e-06,
      "p_html": 0.9999894154475197,
      "p_java": 5.482500792379235e-06,
      "p_javascript": 2.795410322648802e-09,
      "p_matlab": 1.629923519556765e-10,
      "p_python": 4.5418958431643805e-08,
      "p_sql": 5.565948665945849e-08,
      "p_typescript": 1.1631260145336533e-07
    },
    {
      "text": "def calculate_sum_divisors(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total_sum += i\n    return total_sum\n \nprint(calculate_sum_divisors(90))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.0001301162477968693,
      "p_css": 0.00015548132346449747,
      "p_html": 0.0004878854024020511,
      "p_java": 1.960816645452014e-05,
      "p_javascript": 3.487841487504921e-05,
      "p_matlab": 0.8427855073324654,
      "p_python": 0.15610783443110787,
      "p_sql": 0.00012263813096930173,
      "p_typescript": 0.00015605055046434327
    },
    {
      "text": "def identifyElements(list1, list2):\n  \n  # create a set from list1\n  set1 = set(list1)\n  \n  # create a set from list2\n  set2 = set(list2)\n  \n  # store the common elements in result\n  result = []\n  \n  # check for each element of list2 if it is present in set1 \n  for element in set2:\n    if element in set1:\n      result.append(element)\n  \n  return result\n\nlist1 = [1, 4, 5, 6, 7] \nlist2 = [2, 3, 5, 6, 7]\n\nresult = identifyElements(list1, list2)\nprint(\"Common Elements :\",result)\n\n# Output: Common Elements: [5, 6, 7]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00028085613762108717,
      "p_css": 0.011959952798595035,
      "p_html": 0.00032660339250075197,
      "p_java": 1.7302628008324988e-05,
      "p_javascript": 0.00047187829438394117,
      "p_matlab": 0.27515161614470374,
      "p_python": 0.710423778014417,
      "p_sql": 1.7858065770550065e-05,
      "p_typescript": 0.0013501545239996005
    },
    {
      "text": "def maxDifference(arr): \n    n = len(arr) \n    max_diff = arr[1] - arr[0] \n  \n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (arr[j] - arr[i] > max_diff): \n                max_diff = arr[j] - arr[i] \n    return max_diff \n  \narr = [3, 8, 9, 6, 4, 10] \nprint( maxDifference(arr))",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 2.1562292422242494e-07,
      "p_css": 3.991134143812205e-07,
      "p_html": 2.956208345581822e-07,
      "p_java": 5.788180850823894e-08,
      "p_javascript": 5.486117478777691e-08,
      "p_matlab": 0.9657751394602168,
      "p_python": 0.03422355795405587,
      "p_sql": 1.5607929064628316e-08,
      "p_typescript": 2.638776416336553e-07
    },
    {
      "text": "import tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(128, activation='relu', input_shape=(5,)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.06300095438399803,
      "p_css": 0.006345329494240662,
      "p_html": 0.014144061792080354,
      "p_java": 3.3502464129111824e-05,
      "p_javascript": 5.946803693354917e-05,
      "p_matlab": 0.0004262995197732023,
      "p_python": 0.8372999007829273,
      "p_sql": 1.324437430217375e-05,
      "p_typescript": 0.07867723915161559
    },
    {
      "text": "def longest_word(string):\n    words = string.split(\" \")\n    max_length = 0\n    longest_word = \"\"\n    for word in words:\n        if(len(word) > max_length):\n            max_length = len(word)\n            longest_word = word\n    print(\"Longest word is {} with length {}\".format(longest_word,max_length))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0006117874232287585,
      "p_css": 0.004354355041734528,
      "p_html": 0.004296442141552278,
      "p_java": 0.006772212801277852,
      "p_javascript": 1.2637368139706852e-05,
      "p_matlab": 0.00018806143785988222,
      "p_python": 0.9538227557401737,
      "p_sql": 0.029718751452488902,
      "p_typescript": 0.00022299659354430148
    },
    {
      "text": "def reverseLinkedList(head):\n    curr = head \n    prev = None\n    while (curr != None): \n        temp = curr.next\n        curr.next = prev \n        prev = curr \n        curr = temp\n    head = prev\n    return head\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Create a Linked list \nhead1 = Node(3)\nhead1.next = Node(5)\nhead1.next.next = Node(7)\nhead1.next.next.next = Node(8)\n\nhead1 = reverseLinkedList(head1)\n\ntemp = head1\nwhile(temp != None):\n    print temp.data,\n    temp = temp.next",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00015892391993022964,
      "p_css": 0.01685633918575363,
      "p_html": 0.4601918997060288,
      "p_java": 0.0004901450623807195,
      "p_javascript": 0.0005364430390275855,
      "p_matlab": 0.4641866131034257,
      "p_python": 0.005584406321699326,
      "p_sql": 0.04496689223527531,
      "p_typescript": 0.007028337426478735
    },
    {
      "text": "import numpy as np\n\n#Numpy array of the board\nboard = np.zeros((3, 3))\n\n#List to keep track of all the moves made\nmoves_made = []\n\n#Available actions\nactions = ['up', 'down', 'left', 'right']\n\n#Target reward\ntarget = 100\n\n# Learning rate\nrate = 0.2\n\n# Discount factor\ngamma = 0.7\n\n# Maximum Episodes\nmax_episodes = 10000\n\n#This function will evaluate the board and choose the best move\ndef choose_action(state):\n  if np.random.uniform(0, 1) < rate:\n    action = np.random.choice(actions)\n  else:\n    values = []\n    # Evaluate all possible moves\n    for a in actions:\n      values.append(evaluate_board(state, a))\n\n    # Choose the action with the maximum value\n    action = values.index(max(values))\n  \n  return action\n\n#This function evaluates the board state for a given action\ndef evaluate_board(state, action):\n  next_state = make_move(state, action)\n  reward = check_win(next_state)\n  value = reward + gamma * get_values_actions(next_state)\n  return value\n\n#This function makes a move on the board\ndef make_move(state, action):\n  next_state = np.copy(state)\n  if action == 'up':\n    if np.any(next_state[0] == 0):\n      next_state[0][np.argwhere(next_state[0] == 0)] = 1\n  elif action == 'down':\n    if np.any(next_state[2] == 0):\n      next_state[2][np.argwhere(next_state[2] == 0)] = 1\n  elif action == 'left':\n    for row in next_state:\n      if 0 in row:\n        row[np.argwhere(row == 0)] = 1\n        break\n  elif action == 'right':\n    for row in reversed(next_state):\n      if 0 in row:\n        row[np.argwhere(row == 0)] = 1\n        break\n  \n  return next_state\n\n#This function checks the board to see if there is a winner\ndef check_win(next_state):\n  win = False\n  for row in next_state:\n    if np.all(row == 1):\n      win = True\n  for col in range(3):\n    if np.all(next_state[:,col] == 1):\n      win = True\n\n  diag1 = np.array(next_state[0][0] == next_state[1][1] == next_state[2][2] == 1)\n  diag2 = np.array(next_state[0][2] == next_state[1][1] == next_state[2][0] == 1)\n\n  if np.any(diag1):\n    win = True\n  elif np.any(diag2):\n    win = True\n\n  return win\n\n#This function gets the values of each action for a given board\ndef get_values_actions(state):\n  current_val = 0\n  for move in moves_made:\n    current_val += evaluate_board(state, move)\n\n  return current_val\n\n#Game Loop\nfor i in range(max_episodes):\n  state = board\n  print('Episode:', i)\n  done = False\n\n  while not done:\n    action = choose_action(state)\n    moves_made.append(action)\n\n    state = make_move(state, action)\n    done = check_win(state)\n\n    if done:\n      reward = target\n      print('Reward:', reward)\n      break;",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.06980281427649068,
      "p_css": 0.0735333680468911,
      "p_html": 0.02703165722839327,
      "p_java": 0.0005923184616007044,
      "p_javascript": 0.08009436379057772,
      "p_matlab": 0.3412449568034967,
      "p_python": 0.1203426753954872,
      "p_sql": 0.21423166910120334,
      "p_typescript": 0.07312617689585928
    },
    {
      "text": "import time\n\nclass Timer:\n    # Constructor\n    def __init__(self, duration):\n        self.duration = duration\n        self.start_time = time.time()\n        self.end_time = self.start_time + self.duration\n\n    # Methods\n    def start(self):\n        while time.time() < self.end_time:\n            minutes, seconds = divmod((self.end_time - time.time()), 60)\n            print(f'{int(minutes)} minutes and {int(seconds)} seconds left')\n            time.sleep(1)\n        print('Timer completed')\n        \nif __name__ == '__main__':\n    timer = Timer(300) # Timer duration in seconds (5-minute timer in this example)\n    timer.start()",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0005401642403195082,
      "p_css": 0.004143036058049084,
      "p_html": 0.31868995849644055,
      "p_java": 0.026556146317934327,
      "p_javascript": 0.00017879419809886107,
      "p_matlab": 2.231943147318792e-05,
      "p_python": 0.577161592615392,
      "p_sql": 0.07150247792374387,
      "p_typescript": 0.0012055107185485827
    },
    {
      "text": "number = int(input(\"Please enter a number: \"))\n\nfor n in range(2, number + 1):\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        print(n)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.332344463200342e-06,
      "p_css": 4.07175954937824e-07,
      "p_html": 1.3889402545371025e-05,
      "p_java": 8.694520989999535e-06,
      "p_javascript": 1.2061572532214154e-07,
      "p_matlab": 0.002832398726137436,
      "p_python": 0.9971376719353316,
      "p_sql": 1.0384111206151153e-06,
      "p_typescript": 4.4686773131608925e-07
    },
    {
      "text": "def is_anagram(s1, s2): \n    s1 = s1.replace(\" \", \"\").lower()\n    s2 = s2.replace(\" \", \"\").lower()\n\n    if len(s1) != len(s2):\n        return False\n    \n    count = {}\n\n    for letter in s1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    \n    for letter in s2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n           return False\n    \n    for letter in count:\n        if count[letter] != 0:\n            return False\n\n    return True",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0001553169180846844,
      "p_css": 0.0022776030004029732,
      "p_html": 0.0009186288274250911,
      "p_java": 1.410291949510558e-05,
      "p_javascript": 0.0001123153564535422,
      "p_matlab": 0.0015286753873208268,
      "p_python": 0.9936332811638122,
      "p_sql": 0.0011458994019479247,
      "p_typescript": 0.0002141770250576548
    },
    {
      "text": "import random\n\n# Representing the problem\n# The algorithm is applied to this\ngraph = { \n 'A': ['B', 'C', 'D'], \n 'B': ['A', 'C',  'E'], \n 'C': ['A', 'B', 'D', 'E'], \n 'D': ['A', 'C'], \n 'E': ['B', 'C']\n}\n\ndef findBestRoute(graph):\n  # randomly select starting node \n  currentNode = random.choice(list(graph.keys()))\n \n  # the shortest route needs at least \n  # length = number of nodes in the graph\n  bestRoute = [currentNode] \n  min_length =  len(graph)\n \n  # Loop until length is same as min_length\n  while len(bestRoute) < min_length: \n \n    # Find neighbors of the current node\n    nbrs = graph[currentNode] \n \n    # Find a neighbor \n    # with minimum distance\n    nextNode = None\n    minDist = float('Inf')\n \n    # Check for each neighbor \n    for node in nbrs: \n        if node not in bestRoute: \n            dist = 0\n            for i in range(len(bestRoute)-1): \n                dist += graph[bestRoute[i]][node] \n            if dist < minDist : \n                minDist = dist\n                nextNode = node\n \n    # Append the neighbor to bestRoute \n    bestRoute.append(nextNode) \n    currentNode = nextNode \n   \n  return bestRoute \n  \n# Driver program \nprint(findBestRoute(graph))",
      "y_true": "css",
      "pred_label": "bash",
      "p_bash": 0.7066441984099221,
      "p_css": 0.007341466376125373,
      "p_html": 0.0013768710983607002,
      "p_java": 6.054249614095954e-05,
      "p_javascript": 0.012093557586127289,
      "p_matlab": 0.009393879275388687,
      "p_python": 0.15199898080982266,
      "p_sql": 0.002884221791786249,
      "p_typescript": 0.10820628215632595
    },
    {
      "text": "from flask import Flask, request\nimport sqlite3\n\napp = Flask(name)\n\n@app.route('/form', methods=['POST'])\ndef save_form():\n conn = sqlite3.connect('data.db')\n c = conn.cursor()\n c.execute(\"INSERT INTO submission VALUES ('name': ?, 'email': ?, 'phone': ?)\", (request.json['name'], request.json['email'], request.json['phone'])\n conn.commit()\n conn.close()\n return {'message': 'Successfully saved data'}\n \nif name == 'main':\n app.run(debug=True)",
      "y_true": "css",
      "pred_label": "sql",
      "p_bash": 0.003446327345442817,
      "p_css": 0.2994392411810803,
      "p_html": 0.00042632400849918823,
      "p_java": 0.0005747281278383263,
      "p_javascript": 2.1594369764894313e-07,
      "p_matlab": 2.792247763479372e-06,
      "p_python": 0.00033958932452277975,
      "p_sql": 0.6957597986498911,
      "p_typescript": 1.098317126410497e-05
    },
    {
      "text": "import requests\n \n# Make a get request to get the latest position of the International Space Station\nresponse = requests.get(\"http://api.open-notify.org/iss-now.json\")\n \n# Print the status code of the response\nprint(response.status_code)",
      "y_true": "python",
      "pred_label": "css",
      "p_bash": 0.043187961292609836,
      "p_css": 0.7178159705826309,
      "p_html": 0.0006512715188688541,
      "p_java": 3.4484941426904367e-07,
      "p_javascript": 0.00670229028390877,
      "p_matlab": 2.427532406678779e-06,
      "p_python": 0.02817685954399603,
      "p_sql": 0.002155285256834591,
      "p_typescript": 0.20130758913933017
    },
    {
      "text": "words = [\"Hello\",\"World!\",\"Good\",\"Morning\"]\n\nwords.sort(key=len)\n\nprint(words)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0733082886814265,
      "p_css": 0.002924637559836608,
      "p_html": 0.008919589269079013,
      "p_java": 5.027453281697921e-12,
      "p_javascript": 0.0088055213819889,
      "p_matlab": 7.906394111614246e-06,
      "p_python": 0.8945531133822686,
      "p_sql": 0.01147096476240398,
      "p_typescript": 9.978563857172648e-06
    },
    {
      "text": "import json\n\ndef findLongWords(words):\n    result = []\n    for word in words:\n        if len(word) > 7:\n            result.append(word)\n    return result\n\ndata = json.loads(input_data)\nwords = data[\"words\"]\n\nprint(findLongWords(words)) // [\"catastrophe\", \"accelerate\"]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.9948784530489966e-05,
      "p_css": 0.07539418141317397,
      "p_html": 0.0008703565523152547,
      "p_java": 7.911075525099615e-08,
      "p_javascript": 3.0134850719991035e-06,
      "p_matlab": 1.7361251491117e-05,
      "p_python": 0.8968860335362157,
      "p_sql": 0.02676761474418983,
      "p_typescript": 1.4111222564526158e-06
    },
    {
      "text": "def print_roman_numeral(num):\n    if num == 1:\n        return \"I\"\n    elif num == 2:\n        return \"II\"\n    elif num == 3:\n        return \"III\"\n    elif num == 4:\n        return \"IV\"\n    elif num == 5:\n        return \"V\"\n    else:\n        return \"invalid number\"\n\nnumber = int(input(\"Enter a number between 1 and 5: \"))\nprint(print_roman_numeral(number))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 2.2392853436894156e-06,
      "p_css": 5.709081995840872e-08,
      "p_html": 7.751882126786648e-06,
      "p_java": 4.587914220494736e-06,
      "p_javascript": 4.909956255027276e-07,
      "p_matlab": 0.00031627491661429625,
      "p_python": 0.9996641212119203,
      "p_sql": 3.080762026665482e-06,
      "p_typescript": 1.3959413023675822e-06
    },
    {
      "text": "def celsius_to_fahrenheit(celsius):\n\tfahrenheit = celsius * 9/5 + 32\n\treturn fahrenheit",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.012319334203658931,
      "p_css": 0.014520396522004188,
      "p_html": 0.011578587439826333,
      "p_java": 0.0011258383094487681,
      "p_javascript": 0.00284613603025773,
      "p_matlab": 0.0019182078400334461,
      "p_python": 0.9460343510893153,
      "p_sql": 0.0018852782827411408,
      "p_typescript": 0.007771870282714174
    },
    {
      "text": "def order_items_by_popularity(items):\n    \"\"\"Function to order items by their popularity.\"\"\"\n    items_dict = {}\n \n    # Create a dictionary of item and its count\n    for item in items:\n        if item in items_dict:\n            items_dict[item] += 1\n        else:\n            items_dict[item] = 1\n \n    # Sort the items by their count in descending order\n    sorted_items = sorted(items_dict.items(), key=lambda i: i[1], reverse=True)\n \n    # Store the sorted items in a list\n    sorted_items_list = [item[0] for item in sorted_items]\n \n    return sorted_items_list",
      "y_true": "python",
      "pred_label": "javascript",
      "p_bash": 6.119664461289828e-07,
      "p_css": 0.004464171192468912,
      "p_html": 8.370220552015556e-05,
      "p_java": 2.2379529206444622e-08,
      "p_javascript": 0.9951100226272953,
      "p_matlab": 4.009330378627634e-06,
      "p_python": 0.0003357952613437298,
      "p_sql": 1.6356162857300668e-06,
      "p_typescript": 2.9420732324859115e-08
    },
    {
      "text": "def generate_dict(keys, values):\n n = len(keys)\n if n != len(values):\n  return None\n\n dct = {}\n for i in range(n):\n  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])\n\n return dct\n\nkeys = [‘a’, ‘b’, ‘c’, ‘d’]\nvalues = [1, 2, 3, 4]\nresult = generate_dict(keys, values)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0011872206593990442,
      "p_css": 0.19199326685827073,
      "p_html": 0.00845355738323235,
      "p_java": 0.00019721416579479039,
      "p_javascript": 8.703930291184963e-05,
      "p_matlab": 0.008030917018929851,
      "p_python": 0.7763619642474066,
      "p_sql": 0.006257247254433137,
      "p_typescript": 0.007431573109621644
    },
    {
      "text": "def add_numbers(a, b):\n    \"\"\"Returns the sum of two numbers\"\"\"\n    return a + b\n\nif __name__ == '__main__':\n    print(add_numbers(2, 3))",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.8454223455002565e-07,
      "p_css": 1.1409968088688111e-07,
      "p_html": 3.0174441827078753e-06,
      "p_java": 0.9991986291072144,
      "p_javascript": 2.806661306991221e-06,
      "p_matlab": 3.045668929050358e-13,
      "p_python": 0.0007907588125962429,
      "p_sql": 1.9903762341794596e-06,
      "p_typescript": 2.498956245719232e-06
    },
    {
      "text": "# Python program for implementation of Bubble Sort \ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 0.00016809813741725202,
      "p_css": 1.192931361714758e-07,
      "p_html": 1.3246376515866768e-07,
      "p_java": 3.4051343885461868e-09,
      "p_javascript": 6.098488438451189e-07,
      "p_matlab": 0.9990813459140031,
      "p_python": 0.0007479289528917812,
      "p_sql": 2.3672126220424478e-08,
      "p_typescript": 1.7383126820145664e-06
    },
    {
      "text": "def sortSentence(sentence):\n    words = sentence.split(\" \")\n    words.sort()\n    return words\n\nresult = sortSentence(\"This is a great day\")\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 5.2079991014752574e-06,
      "p_css": 0.00033558024560851913,
      "p_html": 0.0006030340704820179,
      "p_java": 4.631523476772428e-06,
      "p_javascript": 3.3707373278197332e-06,
      "p_matlab": 2.1196036873696277e-07,
      "p_python": 0.9354240222444075,
      "p_sql": 0.06362262762316163,
      "p_typescript": 1.3135960656820771e-06
    },
    {
      "text": "def get_primes(n):\n primes = []\n for num in range(2, n + 1):\n is_prime = True\n for divisor in range(2, num):\n if num % divisor == 0:\n is_prime = False\n break\n \n if is_prime:\n primes.append(num)\n \n return primes\n \nprimes = get_primes(25)\nprint(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23]",
      "y_true": "python",
      "pred_label": "matlab",
      "p_bash": 1.5614941531356795e-07,
      "p_css": 9.722581767559684e-11,
      "p_html": 1.1920027930304825e-07,
      "p_java": 1.0660395253742523e-09,
      "p_javascript": 8.468856713787789e-09,
      "p_matlab": 0.9999220473859971,
      "p_python": 7.762078478410793e-05,
      "p_sql": 1.5849207866757593e-08,
      "p_typescript": 3.099819426990181e-08
    },
    {
      "text": "def longest_color_name(colors): \n longest_name = 0 \n longest_color = None\n for color in colors: \n  if len(color) > longest_name: \n   longest_name = len(color) \n   longest_color = color\n return longest_color",
      "y_true": "python",
      "pred_label": "java",
      "p_bash": 1.3695404932675176e-14,
      "p_css": 6.476644396904225e-14,
      "p_html": 9.723953167672232e-14,
      "p_java": 0.9999999999965261,
      "p_javascript": 3.802966388783363e-30,
      "p_matlab": 5.09088889767468e-14,
      "p_python": 3.2282263165843426e-12,
      "p_sql": 6.9895812290939515e-15,
      "p_typescript": 1.2117779453757044e-14
    },
    {
      "text": "def find_median(arr):\n    n = len(arr) \n    arr.sort() \n  \n    if n % 2 != 0: \n        return arr[n//2] \n  \n    return (arr[(n-1)//2] + arr[n//2]) / 2.0",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 1.2826457717769679e-05,
      "p_css": 9.889198078544055e-05,
      "p_html": 9.711164350494657e-06,
      "p_java": 6.320538512701055e-06,
      "p_javascript": 8.40018649379305e-06,
      "p_matlab": 0.06988426603583146,
      "p_python": 0.9299670771595886,
      "p_sql": 9.75061029648904e-07,
      "p_typescript": 1.1531415690087516e-05
    },
    {
      "text": "import pandas as pd\n\n# Load data\nmovies = pd.read_csv('dataset/movies.csv')\n\n# Create recommendations based on user interests\ndef recommend_movies(interests):\n # Create a list of movies based on user interests\n recommended_movies = movies[movies['Genre'].isin(interests)]\n # Sort movies by popularity\n recommended_movies = recommended_movies.sort_values('Popularity', ascending=False)\n \n return recommended_movies[['Title', 'Rating', 'Genre']]\n\n# Use the function to get recommendations\nrecommend_movies(['Sci-Fi', 'Horror'])",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.002138934021174537,
      "p_css": 0.1778965859536643,
      "p_html": 0.04467909681910134,
      "p_java": 0.000678227936177927,
      "p_javascript": 0.07932207467311445,
      "p_matlab": 0.0023305734649939477,
      "p_python": 0.3875191045607115,
      "p_sql": 0.02641673606440096,
      "p_typescript": 0.27901866650666096
    },
    {
      "text": "import tweepy\n\nconsumer_key = ''\nconsumer_secret = ''\naccess_token = ''\naccess_token_secret = ''\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\npublic_tweets = api.search('python')\nfor tweet in public_tweets:\n    print(tweet.text)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00019582649775117225,
      "p_css": 0.05115716203145147,
      "p_html": 0.011956420793639434,
      "p_java": 0.1969198188584391,
      "p_javascript": 0.008282182102999415,
      "p_matlab": 0.02025670704172548,
      "p_python": 0.6813856350210098,
      "p_sql": 0.004603764046758429,
      "p_typescript": 0.0252424836062259
    },
    {
      "text": "def combine_list(list1, list2):\n    if len(list1) > len(list2):\n        longest_list = list1\n        shortest_list = list2\n    else:\n        longest_list = list2\n        shortest_list = list1\n        \n    combined_list = []\n    i = 0\n\n    for el in longest_list:\n        combined_list.append(el)\n        if i < len(shortest_list):\n            combined_list.append(shortest_list[i])\n        i += 1\n    return combined_list\n\nlist1 = [1, -2, 3]\nlist2 = [4, 5, -6]\ncombine_list(list1, list2)  # [1, 4, -2, 5, 3, -6]",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.0016636568304278594,
      "p_css": 0.018212445892270165,
      "p_html": 0.005023735556152887,
      "p_java": 0.00036818776114491485,
      "p_javascript": 0.0010773894290716905,
      "p_matlab": 0.04969823776379206,
      "p_python": 0.9194188543185998,
      "p_sql": 0.0018590741859925075,
      "p_typescript": 0.0026784182625481396
    },
    {
      "text": "import cv2\n\n# Create the classifier\nclassifier = cv2.CascadeClassifier(\"haarcascade.xml\")\n\n# Load the image\nimg = cv2.imread(\"image.jpg\")\n\n# Detect objects in the image\nobjects = classifier.detectMultiScale(img)\n\n# Loop through the objects and identify it\nfor (x,y,w,h) in objects:\n    cv2.rectangle(img,(x,y),(x+w,y+h), (255,0,0), 2)\n    cv2.putText(img, \"Object\", (x,y-10), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2)\n\n# Display the resulting frame\ncv2.imwrite(\"result.jpg\", img)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.02615033627629009,
      "p_css": 0.049546203614666655,
      "p_html": 0.0019871803921817583,
      "p_java": 0.00018944367983768498,
      "p_javascript": 0.03521476179249389,
      "p_matlab": 0.003196983792735893,
      "p_python": 0.11833785751226789,
      "p_sql": 0.00044991696428311697,
      "p_typescript": 0.764927315975243
    },
    {
      "text": "def capitalize_words(string):\n  words = string.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return ' '.join(capitalized_words)",
      "y_true": "sql",
      "pred_label": "sql",
      "p_bash": 3.538560462569214e-07,
      "p_css": 0.00010221238378517938,
      "p_html": 0.0001771967322844868,
      "p_java": 0.0053532533589650206,
      "p_javascript": 7.673231773516072e-09,
      "p_matlab": 2.8366957158938113e-06,
      "p_python": 0.006896809898965327,
      "p_sql": 0.9874639454228261,
      "p_typescript": 3.3839781799140128e-06
    },
    {
      "text": "def calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum / len(numbers)\n    return mean\n\nprint(calculate_mean([10, 20, 30]))",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 0.00045121348660799376,
      "p_css": 0.00013766750809103795,
      "p_html": 0.0019553621974967104,
      "p_java": 0.008989746123613253,
      "p_javascript": 0.0011025660382034746,
      "p_matlab": 0.0035943798535997646,
      "p_python": 0.9828485864404037,
      "p_sql": 0.00040422082239740636,
      "p_typescript": 0.0005162575295866527
    },
    {
      "text": "def isPerfectSquare(n):\n    root =  n ** 0.5\n    return root == int(root)\n\nresult = isPerfectSquare(36)\nprint(result)",
      "y_true": "python",
      "pred_label": "python",
      "p_bash": 7.961198511198262e-05,
      "p_css": 0.0011604951790047397,
      "p_html": 0.00014545588755872992,
      "p_java": 0.02164038670557794,
      "p_javascript": 8.3042170259746e-05,
      "p_matlab": 1.0223029740441103e-08,
      "p_python": 0.9756457734275756,
      "p_sql": 0.0011845014777954403,
      "p_typescript": 6.0722944086232495e-05
    },
    {
      "text": "# Importing the required libraries\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the iris dataset\niris = datasets.load_iris()\nX = iris.data[:, :2] #take only first 2 features\ny = iris.target\n\n# Create an instance of Logistic Regression Classifier and fit the data.\nlogreg = LogisticRegression()\nlogreg.fit(X, y)",
      "y_true": "python",
      "pred_label": "typescript",
      "p_bash": 0.18093299181158884,
      "p_css": 0.06814727283234764,
      "p_html": 0.010529230417011527,
      "p_java": 5.2162099305812406e-05,
      "p_javascript": 0.0009384934408821219,
      "p_matlab": 0.00012424150443810468,
      "p_python": 0.32371990171105086,
      "p_sql": 3.466421158218217e-05,
      "p_typescript": 0.41552104197179296
    }
  ],
  "summary": {
    "total": 2723,
    "pred_counts": {
      "python": 1250,
      "matlab": 460,
      "java": 216,
      "css": 171,
      "typescript": 155,
      "bash": 146,
      "sql": 139,
      "html": 117,
      "javascript": 69
    }
  }
}