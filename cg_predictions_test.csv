text,y_true,pred_label,p_bash,p_css,p_html,p_java,p_javascript,p_matlab,p_python,p_sql,p_typescript
"def group_by_length(lst):
 res = {}
 for x in lst:
 length = len(x)
 if length not in res:
 res[length] = [x]
 else:
 res[length].append(x)
 return res
 
input = ['word', 'sentence', 'hello', 'programming']
output = group_by_length(input)
print(output) // {4: ['word', 'hello'], 8: ['sentence'], 11: ['programming']}",css,python,0.028881442761165214,0.0012610324010883603,0.00017343306808346578,1.8964742332266407e-08,0.013656072934606432,0.0003364972621300359,0.9523654449600983,0.0033136529828767004,1.2404665209113267e-05
"import random
import string

def generate_string():
    chars = string.ascii_letters + string.digits
    string = ''.join(random.choice(chars) for _ in range(8))
    return string",sql,java,1.7156424544833947e-15,1.4682311633814538e-09,1.3468542883471009e-09,0.8222435917303285,4.280562819076442e-18,5.0231303022760437e-11,2.0588908041357726e-06,0.177754346446682,6.686666704026548e-11
"# Game script
import random

# Welcome message
print(""Welcome to the guessing game!"")

# Generate a random number
target_number = random.randint(1, 10)

# Initialise variables and flags
guessed = False
attempts = 0

while not guessed:
 attempts += 1
 guess = int(input(""Guess a number (1-10): ""))

 if guess < target_number:
  print(""That's too low. Try again!"")
 elif guess > target_number:
  print(""That's too high. Try again!"")
 else:
  guessed = True

# Congratulations message
if guessed:
 print(""Congratulations! You guessed the number in {} attempts"".format(attempts))",python,python,0.010852236324740585,0.026828983493904047,0.01216884486891362,0.00044433876309123345,0.0021837624979785864,0.001255841512825727,0.9089733332097117,0.0026624217544967367,0.03463023757433784
"""""""
A function to print out a Pascal triangle
""""""

def pascal_triangle(n): 
    # Initialize the row
    row = [1]

    # Calculate each successive row 
    y = [0] 
    for x in range(max(n, 0)): 
        print(row)
		# Compute the next row
        row = [sum(i) for i in zip(row + y, y + row)] 
        # Copy the row
        y = row[:] 
		
if __name__ == '__main__':
    n = 5
    pascal_triangle(n)",python,python,0.0006255356651029241,0.031028030939649762,0.00671440523389378,0.006398949152431792,0.10578261090715275,0.028779191165442933,0.7818477316805765,0.031448245325739164,0.007375299930010393
"import numpy as np
import tensorflow as tf

# Define inputs and outputs
X = tf.placeholder(tf.float32, shape=[3, 4])
y = tf.placeholder(tf.float32, shape=[3, 1])

# Define weights and biases
W = tf.Variable(tf.random_normal([4, 1]))
b = tf.Variable(tf.random_normal([1]))

# Define model
model = tf.sigmoid(tf.matmul(X, W ) + b)

# Define cost and optimizer
cost = tf.reduce_mean(-y * tf.log(model) - (1-y) * tf.log(1-model))
optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(cost)

# Train model
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(1000):
        sess.run(optimizer, feed_dict={X:[[0,0,1,0],[1,0,0,0],[1,1,0,0]], y:[[0],[1],[1]]})

# Print results
print(""Final weights"", sess.run(W))
print(""Final bais: "", sess.run(b))",css,python,0.022372923273286948,0.2949012320032223,0.006725524840635367,0.00028214031081622953,0.00592616901556115,0.006869693107120176,0.6031513579079187,0.0006627182007888694,0.059108241340650104
"def filter_words_with_one_vowel(sentence):
    num_words = 0
    for word in sentence.split():
        vowels = 0
        for char in word:
            if char in 'aeiou':
                vowels += 1
        if vowels == 1:
            num_words += 1
    return num_words

sentence = 'I hardly ever go out and I hate taking pictures.'
num_words = filter_words_with_one_vowel(sentence)

print('Number of words with one vowel:', num_words)",python,python,0.0001612999458282861,0.005891837854742439,0.0016398540848247738,0.00020194139202618644,0.0003500654257524581,0.0029417881801134995,0.9712048568754839,0.016272325535940005,0.001336030705288544
"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
    
    def find_fifth_from_end(self):
        if self is None:
            return None
        curr = self
        prev = self
        count = 0
        while curr.next is not None:
            count += 1
            if count >= 5:
                prev = prev.next
            curr = curr.next
        if count < 5:
            return None
        else:
            return prev.data
        
# Example
n1 = Node(1)
n2 = Node(2)
n3 = Node(3)
n4 = Node(4)
n5 = Node(5)
n6 = Node(6)
n7 = Node(7)

# Linked list setup
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n5
n5.next = n6
n6.next = n7

# Find 4th element from the end
print(n1.find_fifth_from_end())",python,python,3.0825373941410284e-05,0.011168696427933913,0.0019064550739742445,2.5937344678424697e-05,4.0965993449151466e-05,3.0631517817806786e-05,0.9250780752937399,0.061103646014874856,0.0006147669595904455
"def merge_sort(arr):
 if len(arr) >1: 
 mid = len(arr)//2  #Finding the mid of the array 
 L = arr[:mid]   # Dividing the array elements  
 R = arr[mid:] # into 2 halves 
  
 merge_sort(L) # Sorting the first half 
 merge_sort(R) # Sorting the second half 
  
 i = j = k = 0
  
 # Copy data to temp arrays L[] and R[] 
 while i < len(L) and j < len(R): 
 if L[i] < R[j]: 
 arr[k] = L[i] 
 i+=1
 else: 
 arr[k] = R[j] 
 j+=1
 k+=1
  
 # Checking if any element was left 
 while i < len(L): 
 arr[k] = L[i] 
 i+=1
 k+=1
  
 while j < len(R): 
 arr[k] = R[j] 
 j+=1
 k+=1
  
def print_list(arr): 
 for i in range(len(arr)):         
 print(arr[i],end="" "") 
 print() 
  
# Driver code to test above 
if __name__ == '__main__': 
 arr = [5,3,6,8,10,1,4,7] 
 print (""Given array is"", end=""\n"")  
 print_list(arr) 
 merge_sort(arr) 
 print(""Sorted array is: "", end=""\n"") 
 print_list(arr)",python,matlab,1.7903265950015697e-05,5.4699527302319145e-05,2.1642831189432146e-05,3.969648572594425e-06,1.8473445730089656e-05,0.7452589276521047,0.24968464798361545,6.718337085005441e-06,0.004933017308450403
"#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os
from setuptools import setup

try:
    long_description = open(""README.rst"").read()
except IOError:
    long_description = """"

LOCALEDIR = os.path.join('share', 'locale')

setup(
    name=""pygiftparser"",
    version=""1.1"",
    url=""https://github.com/mtommasi/pygiftparser"",
    description=""GIFT parser in python that parses a Gift source code and loads data in a Question/Answer model for further use in an application"",
    license=""MIT"",
    author=""Marc Tommasi - UdL/INRIA"",
    author_email=""first.last@univ-lille.fr"",
    py_modules=['pygiftparser.parser',
                'pygiftparser.i18n',
                'pygiftparser.answer',
                'pygiftparser.question',
                'pygiftparser.utils'],
    install_requires=['yattag', 'markdown', 'MarkdownSuperscript'],
    long_description=long_description,
    classifiers=[
        ""Programming Language :: Python"",
        ""Programming Language :: Python :: 3.4"",
        ""Topic :: Text Processing""
    ],
    data_files=[(os.path.join('share',
                              'locale',
                              lang,
                              'LC_MESSAGES'),
                 [os.path.join('share',
                               'locale',
                               lang,
                               'LC_MESSAGES',
                               'pygiftparser.mo')])
                for lang in os.listdir(LOCALEDIR)]
)
",sql,css,0.08685928301594988,0.4719817584132836,0.02706445694101328,0.008885137098007805,0.012534062336102242,0.014667418322026103,0.0009875290998548802,0.13693185381409775,0.24008850095966458
"my_list = list(range(0, 30, 5))
print(my_list)",python,python,0.0005105768300457524,0.002523861848102401,0.00175667277356535,0.00013464523484079993,0.0002443583249092195,0.003684530411739244,0.9890876625987579,0.001154414612208341,0.0009032773658312124
"numbers = [i for i in range(0, N+1)]
unique_numbers = list(set(numbers))

print(unique_numbers)",python,python,2.6898255020567098e-05,9.689376856194822e-06,0.00024296208438505788,0.011148748385161986,6.595188595785847e-05,0.0002644282064706348,0.9877658094618966,0.00044065567819339004,3.485666605782142e-05
"def first_last(lst):
    first_element = lst[0]
    last_element = lst[-1]
    return [first_element, last_element]

print(first_last([5,3,1,7,9]))",python,python,7.836105875990522e-05,0.0006448912525127697,0.00022802691386729804,1.2712590961666919e-05,4.1975810192781846e-05,3.975240975961875e-06,0.9987582519237734,0.00013327741498220897,9.852779397401964e-05
"import numpy as np

array = np.random.randint(1, 10, size=(10, 7))
print(array)",python,python,0.27862861843861464,0.0039522653076184255,0.0021957214041176303,1.966414027575013e-05,1.2530191130871555e-05,0.000604773358059237,0.7130459880683115,3.116236397262753e-06,0.0015373228554744426
"import requests
from bs4 import BeautifulSoup

# Set the URL
url = 'https://www.instagram.com/{username}'

# Make a request
response = requests.get(url)

# Parse the response
soup = BeautifulSoup(response.text, 'lxml')

# Extract the followers
followers = soup.find('span', {'class': 'g47SY'}).next_sibling.text

# Print the followers
print(f'Number of followers of the user: {followers}')",css,css,2.4195386629881196e-11,0.9860664518572061,0.00031002633496939107,0.011828722841804976,1.0280592885629067e-05,7.030609344363063e-09,0.0006467973623609781,0.0001882329256810467,0.0009494810302871037
"largest = 0
list = [3, 6, 8, 11, 12]

for i in list:
  if i > largest:
    largest = i

print(largest)",python,matlab,0.00011418081831111255,6.932067235373022e-05,0.0011204528779095264,1.0239797061799056e-05,4.856676515344156e-05,0.997672183484377,0.0008029179140570248,3.770958076497356e-05,0.00012442809001171596
"def insertion_sort(arr): 
    #Iterationg through the array 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        
        while j >= 0 and arr[j] > key: 
            arr[j + 1] = arr[j] 
            j -= 1
        arr[j + 1] = key 
  
    return arr",python,matlab,1.2556373647233618e-05,0.0001480017144052441,4.317059456442022e-06,2.2497068231701347e-06,8.213088932457153e-06,0.7649148714734142,0.23481004452361978,1.4775479986836141e-06,9.826851170261617e-05
"def str_to_list(string):
    return string.split(' ')",python,java,1.1040111542913217e-12,4.214747239176482e-07,5.2029512426411414e-08,0.9997828634505806,1.47181573407041e-14,9.865680820072872e-11,0.00021316265050876494,3.4916883859908427e-06,8.606512770740351e-09
"def combine_string_lengths(word1, word2): 
  return len(word1) + len(word2)",python,python,0.0011350656644406227,0.0027774733675249735,0.0020369714281019574,0.00021678572038401212,0.00045532536871914183,0.00012745538934871053,0.9911444106929799,0.0008429121723518255,0.0012636001961490759
"data = {
    'height': '150cm',
    'age': 20,
    'name': 'John'
}",css,css,0.0007937058319600839,0.9838758800176552,0.005275456417495217,0.006756620747339984,2.4393115454822556e-06,4.563990203819328e-05,0.0027576237503429426,0.00012306265403406994,0.00036957136758879286
"def sort_strings(s):
    return sorted(s)

print(sort_strings(['apple', 'banana', 'pear', 'mango']))",python,python,0.001356050776830061,0.03911021228362321,0.00366308475020072,0.00025983540419513004,0.0010905057166967378,0.0002758471544736751,0.9517766570204276,0.0011954237762670107,0.0012723831172857727
"string_list = string.split(substring,1)
print(string_list)",python,python,4.604141426199175e-05,0.020611667435204258,0.0066873311730417054,0.43631032989618046,6.466136099343661e-06,0.0002835946389423327,0.4539490824404425,0.08037596897062653,0.001729517895201007
"def fibonacci(n): 
 a = 0
 b = 1
 if n < 0:
 print(""Incorrect input"")
 elif n == 0:
 return a 
 elif n == 1:
 return b
 else:
 for i in range(2,n+1): 
 c = a + b 
 a = b 
 b = c 
 return b 

n = 10
print(fibonacci(n))

# Output: 55",python,python,3.1925612555351176e-06,9.483339801124614e-07,3.1498315398571047e-06,1.295552021233126e-08,4.595620697528553e-08,5.3695316703757395e-06,0.9999868023169185,4.6758494026146936e-07,1.092796793293348e-08
"def permutations(string):
 perms = []
 if len(string) == 1:
 perms.append(string)
 return perms
 
 for i in range(len(string)):  
 substring = string[:i] + string[i+1:]
 for permutation in permutations(substring):  
 perms.append(string[i] + permutation)
 return perms

permutations('ABC')",python,java,1.1262752211985762e-11,5.1493850942348e-07,2.8283347543221964e-07,0.9997871261226222,2.495314112362758e-13,5.72917332358176e-07,0.00018665285378807677,2.479103694009998e-05,5.9285820219264756e-08
"sentence = ""This is a sentence""
sentence_list = sentence.split()
frequency_list = []

for word in sentence_list:
    frequency_list.append(sentence_list.count(word))
    
frequency_dict = dict(zip(sentence_list, frequency_list))

print(frequency_dict)",python,python,0.0404286086523656,0.1577798629923162,0.06989361547006381,0.001481756685741523,0.0036871814347509773,0.03579014170979238,0.6181720341262613,0.062401184812564646,0.010365614116143522
"def str_to_int(lst):
  int_lst = []
  for i in lst:
    int_lst.append(int(i))
  return int_lst",python,java,8.242738286693453e-06,3.203503301648264e-06,8.553673137164694e-06,0.999377428335419,1.6920693244298927e-06,5.044991532435317e-08,0.0005960057971640299,1.5700327259737449e-06,3.2534007256011143e-06
"def list_average(numbers):
    total = sum(numbers)
    length = len(numbers)
    return total/length",python,python,4.5313706485868035e-05,0.00010085385578215166,0.00018349221521342154,0.05279849892519938,0.00924428097831088,1.9747453615455845e-09,0.9373052495840646,0.0003012871973512113,2.102156284711103e-05
"import http.server

server_address = ('', 8000) 
httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
httpd.serve_forever()",python,html,0.0008845130500681091,0.00048440098212637806,0.971923556568014,5.339561995327293e-05,0.0002073301086247608,3.160314707533479e-07,0.02494281338329007,3.666564872755578e-05,0.001467008607725132
"import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
 
# Load the dataset
df = pd.read_csv(‘data.csv’)
 
# Create feature and target matrices
X = df.drop(‘Accepted’, axis=1).values
y = df[‘Accepted’].values
 
# Create and train model
model = RandomForestClassifier()
model.fit(X, y)

# New data
new_data =np.array([[x1, x2, x3, x4]]) 
 
# Predict
model.predict(new_data)",python,python,0.26070096735974424,0.07195824184175112,0.0034603574447181797,2.728754480496719e-05,8.561093637560999e-06,6.674217098524455e-05,0.5987286371466236,3.1650269130726914e-06,0.065046040370822
"class MinHeap:
    def __init__(self):
        self.heap_list = [0]
        self.current_size = 0

    def insert(self, item):
        self.heap_list.append(item)
        self.current_size += 1
        self.fix_new_item()

    def fix_new_item(self):
        idx = self.current_size
        while idx // 2 > 0:
            if self.heap_list[idx] < self.heap_list[idx // 2]:
                temp = self.heap_list[idx // 2]
                self.heap_list[idx // 2] = self.heap_list[idx]
                self.heap_list[idx] = temp
            idx = idx // 2",sql,sql,0.00018272583277613417,0.04511872307940717,0.3392790355365986,1.3485926233699438e-05,0.00023951639241701498,0.0003413278174308711,0.07192565217765276,0.5423955934870156,0.0005039397504680746
"def reverse_string(my_str): 
  rev_str = """" 
  
  for i in my_str: 
    rev_str = i + rev_str
  
  return rev_str

my_str = 'Hello World'

reverse_string(my_str)",python,python,0.15513481987769825,0.009929270077999871,0.017191552490944593,5.063630462062585e-07,0.032315858239251996,0.014572143863981766,0.7635527856564145,0.0013573914059567857,0.005945672024705964
"class Employee:
 def __init__(self, name, age, salary):
 self.name = name
 self.age = age
 self.salary = salary

class Company:
 def __init__(self, name):
 self.name = name
 self.employees = []
 
 def add_employee(self, employee):
 self.employees.append(employee)
 
employee1 = Employee('John Doe', 30, 25000)
employee2 = Employee('Jane Doe', 28, 30000)

company = Company('ACME Inc.')
company.add_employee(employee1)
company.add_employee(employee2)",python,java,0.005496365248580959,0.3300530287157207,0.11996354200158472,0.35870712308573666,4.011399628753556e-07,0.00016739431430805196,0.16406445582607473,0.020351260729048845,0.0011964289389825684
"def find_longest_substring(s, characters):
    longest_length = 0
    longest_substring = """"
    for i in range(len(s)):
        for j in range(i, len(s)):
            substring = s[i:j+1]
            if set(substring).issubset(characters):
                if len(substring) > longest_length:
                    longest_length = len(substring)
                    longest_substring = substring

    return longest_substring",python,python,0.0002768759433702984,0.00013197817971973298,0.0005792356985080907,1.4714403565080762e-05,3.132392806790148e-05,0.07355215786628955,0.9244310794681061,0.0007695875188690807,0.0002130469935042354
"def differentiate(equation):
    # Get the coefficient and exponent of all terms
    terms = equation.split(""+"")
    coefficient = []
    exponents = []

    for term in terms:
        coef, exp = term.split(""x"")
        coef = int(coef)
        if exp == """":
            exp = 1
        else:
            exp = int(exp)
        coefficient.append(coef)
        exponents.append(exp)

    # Calculate the differentiated equation 
    for i in range (len(coefficient)):
        coefficient[i] = coefficient[i] * exponents[i]
        exponents[i] -= 1

    # Format the new equation 
    result = """"
    for i in range(len(coefficient)):
        if coefficient[i] == 0:
            continue
        else:
            if coefficient[i] > 0:
                result += ""+""
            result += str(coefficient[i])
            if exponents[i] != 0:
                result += ""x""
                if exponents[i] != 1:
                    result += ""^"" + str(exponents[i])
    return result",python,python,0.0038358765686209943,0.013085008835822204,0.004181172193453049,0.002877483771023629,0.002943037399301884,0.037592954461470186,0.9188331891260834,0.01030813380389274,0.006343143840332126
"#Import libraries 
import requests 
from bs4 import BeautifulSoup 

#Make a request to the url 
url = 'http://www.example.com'

r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser') 

#Extract data 
data = [] 

for x in soup.find_all('div', class_=""data-cell""): 
 data.append(x.text.strip()) 

#Print the data 
print(data)",python,html,1.9081742537819655e-13,0.1697102848539815,0.8288872746063657,0.0013354636337723866,3.5354318097241306e-07,6.617118053857918e-08,6.366840398688624e-06,3.649291346456777e-05,2.3697437464710013e-05
"def binarySearch(arr, start, end, x): 
    if end >= start:  
        mid = start + (end - start) // 2 
        if arr[mid] == x: 
            return mid  
        elif arr[mid] > x: 
            return binarySearch(arr, start, mid - 1, x)  
        else: 
            return binarySearch(arr, mid + 1, end, x)  
    else: 
        return -1",python,python,0.00011969521366155221,0.0006268711509321773,0.00012660613689533372,1.9476660326216535e-05,3.697346567231772e-05,0.0020581666502272325,0.9968221815767017,5.5959073644723075e-05,0.00013407007193873613
"import psycopg2
import sys

try:
 conn = psycopg2.connect(""dbname = 'books' user = 'postgres' host = 'localhost' password = 'password'"")
except psycopg2.Error as e:
 print e

try:
 cur = conn.cursor()
except psycopg2.Error as e:
 print e

def createTable():
 query = ""CREATE TABLE books(title text, author text);""
 try:
 cur.execute(query)
 except psycopg2.Error as e:
 print e

def addBook(title, author):
 query = ""INSERT INTO books (title, author) VALUES (%s, %s);""
 try:
 cur.execute(query, (title, author))
 conn.commit()
 except psycopg2.Error as e:
 print e

def viewBooks():
 query = ""SELECT * FROM books;""
 try:
 cur.execute(query)
 results = cur.fetchall()
 print results
 except psycopg2.Error as e:
 print e

def viewBook(title):
 query = ""SELECT * FROM books WHERE title = '%s';"" % title
 try:
 cur.execute(query)
 results = cur.fetchone()
 print results
 except psycopg2.Error as e:
 print e

if __name__ == ""__main__"":
 createTable()
 addBook(""The Catcher in the Rye"", ""J.D. Salinger"")
 viewBooks()
 viewBook(""The Catcher in the Rye"")",sql,typescript,0.00023740751337139124,0.014877404335334958,0.07999692461697493,3.6506848181401334e-06,0.0005808669579258357,4.145010239494772e-05,0.008520804137777317,0.20643128429142338,0.6893102073599792
"class StudentDetails:
 def __init__(self):
  self.students=[]
 
 def add_student(self,name,age,roll):
  self.students.append({""name"":name,""age"":age,""roll"":roll})
 
 def print_table(self):
  print(""Name\tAge\tRoll"")
  for s in self.students:
   print(""{}\t{}\t{}"".format(s['name'],s['age'],s['roll']))",css,python,0.0011703990888027149,0.14189768176722956,0.0940499100821758,0.2177445061566573,4.3727454744375694e-07,0.0004002749996829065,0.5301188592269751,0.014041601864974869,0.0005763295389542938
"The class Stopwatch is used to measure elapsed time. The __init__ method initializes two variables, self._start_time and self._end_time which are used to store the start and end times of the elapsed time measurement. The methods start() and stop() are then used to mark the beginning and end of the measurement respectively. The get_elapsed_time() method then calculates the elapsed time by subtracting the start time from the end time.",python,typescript,1.631123399045895e-06,3.9246588944164217e-07,4.293924048381697e-07,9.559336951001519e-07,0.0071276122275354984,2.8597152360941893e-10,5.397749988025923e-06,9.269051052900604e-07,0.9928626539160113
"def solve(eq):
    lhs_x = eq.split(""="")[0]
    rhs = float(eq.split(""="")[1])
    x = float(lhs_x.split(""+"")[0].split(""x"")[0])
    constant = float(lhs_x.split(""+"")[1])
    return (rhs - constant) / x

if __name__ == ""__main__"":
    eq = ""2x + 3 = 5""
    print(solve(eq))",python,python,0.17447453412051417,0.13829843429398367,0.06589862109516627,0.0028048732546661153,0.24623044413976133,0.0258374826546206,0.2788284983522558,0.050532904639889464,0.017094207449142456
"def print_string(text):
    if len(text) > 0:
        print(text)
    else:
        raise Exception('The input string is empty')",python,python,0.00012029262415749604,0.06493920385733104,0.0006418385635609258,0.01780804709898072,2.8711599552722925e-05,0.00015733077369367303,0.826861432784897,0.08373899426079662,0.005704148437029967
"def fibonacci_sequence(num): 
 
    a = 0
    b = 1
 
    if num < 0: 
        print(""Incorrect input"") 
    elif num == 0: 
        return a 
    elif num == 1: 
        return b 
    else: 
        for i in range(2,num): 
            c = a + b 
            a = b 
            b = c 
        return b 
 
print(fibonacci_sequence(num))",python,matlab,1.1407142951252343e-07,2.929174677685477e-11,2.47851281634644e-07,3.7409619318332365e-09,8.003826753936035e-09,0.9934363392879064,0.006563181593216307,9.025623235128478e-08,1.5165853468262787e-08
"def sum_digits(num):
    total = 0
    while num > 0:
        digit = num % 10
        total += digit
        num = num // 10
    return total",python,matlab,2.5282349561354333e-06,1.311251988892571e-08,3.557353265537443e-05,8.693189882630018e-07,1.2440992696861243e-06,0.9873593068398039,0.01259667821965027,4.0310479439824533e-07,3.383537362305442e-06
"words1 = [""Hello"",""World"",""My"",""Name"",""Is""]
words2 = [""John"", ""Smith"", ""Where"", ""Are"", ""You""]

for i in range(len(words1)):
    print(words1[i], words2[i])",sql,bash,0.5872762533426381,5.699065705201144e-05,0.003519940205657602,6.568165001204803e-10,0.06466147822792671,0.014238260099439551,0.3254363222740236,0.0022287724184909016,0.0025819821179550078
"def find_duplicates(lst):
    seen = set()
    duplicates = []
    for elem in lst:
        if elem in seen:
            duplicates.append(elem)
        else:
            seen.add(elem)
    return duplicates",python,python,0.003130190297563692,0.008605210983865064,0.006083639512314868,0.0026994086367289707,0.0015419072257844045,0.00672653033220893,0.9665410250902957,0.0013875430121306658,0.0032845449091075856
"def last_occurrence(arr, item):
    for i in range(len(arr)-1,-1,-1):
        if arr[i] == item:
            return i
    return -1",python,matlab,3.4143683980058943e-07,1.1035205131119755e-06,3.531172935376533e-06,5.9554490995721226e-08,5.396859042297407e-07,0.8911790862717743,0.10881517544090097,3.9708773077437875e-08,1.232078678739774e-07
"word_dict = {'Python': 1, 'is': 2, 'an': 3, 'interpreted': 4, 'high-level': 5, 'programming': 6, 'language': 7, 'for': 8, 'general-purpose': 9, 'programming': 10 }",css,typescript,0.0008361620005371475,0.01663191774925164,0.0016916239443387207,3.376582635475141e-05,0.2313192042121161,0.0035404286820719098,0.001936308676105334,8.180197878492454e-05,0.7439287869304395
"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com'
response = requests.get(url)
html = response.content
soup = BeautifulSoup(html, 'html5lib')

links = []
for link in soup.find_all('a', href=True):
 links.append(link['href'])
 
print(links)",python,java,2.2468499119763137e-15,3.66821447245982e-05,0.05072803405154624,0.9491565604514582,2.7294526790855343e-07,5.375427265547115e-05,2.3245565777911163e-05,1.4128566961070992e-06,3.7711871386886695e-08
"def reverseList(list):
    start = 0
    end = len(list) - 1
  
    while start < end:
        list[start], list[end] = list[end], list[start]
        start += 1
        end -= 1
  
    return list

list = [1, 2, 4, 7, 9]

reverseList(list)
# Output: [9, 7, 4, 2, 1]",python,python,0.00044967480599286637,0.001638139258459014,0.0012513952761440666,5.9003202399269366e-05,0.00041942161753999945,0.0005611221999430509,0.9820311233070709,0.013014967989697087,0.0005751523427538377
"#!/usr/bin/env python

import immlib
from immlib import LogBpHook, BpHook


class ReturnBP(BpHook):
    def __init__(self):
        BpHook.__init__(self)
        
    def run(self, regs):
        imm = immlib.Debugger()
        eip = regs[""EIP""]
        imm.log(""bp, EIP is 0x%08X "" % eip)
        imm.addKnowledge(""0x%08X"" % eip, eip)
        #self.UnHook()
        imm.deleteBreakpoint(eip, eip+4)
        imm.run()
        
class ReturnLog(LogBpHook):
    def __init__(self):
        LogBpHook.__init__(self)
    
    def run(self, regs):
        imm = immlib.Debugger()
        eip = regs[""EIP""]
        imm.log(""log, EIP is 0x%08X "" % eip)
        imm.addKnowledge(""0x%08X"" % eip, eip)
        self.UnHook()
        imm.deleteBreakpoint(eip, eip+4)

def main(args):    
    imm = immlib.Debugger()    
    module = imm.getModule(imm.getDebuggedName())
    imm.log(""module %s at 0x%08X"" % (module.getName(), module.getBase()))
    use_log_bp = True

    if len(args) > 0 and args[0] == ""false"":
        imm.log(""Using non logging bp"")
        use_log_bp = False
    
    
    # make sure module is analysed
    if not module.isAnalysed():
        module.Analyse()
    knowledge = imm.listKnowledge()
    hooked = 0
    not_hooked = 0
    
    for f in imm.getAllFunctions(module.getBase()): 
        for ret in imm.getFunctionEnd(f):
            if ""0x%08X"" % ret not in knowledge:
                #imm.log(""function 0x%08X ret at 0x%08X"" % (f, ret))
                if use_log_bp:
                    hook = ReturnLog()
                    hook.add(""ReturnLog 0x%08X""%f, ret)                
                    hooked +=1
                else:
                    hook = ReturnBP()
                    hook.add(""ReturnBP 0x%08X""%f, ret)                
                    hooked +=1
                    
                # i think fasthook because fast hook is over writing rets, getFunctionEnd is having trouble
                #fast = immlib.FastLogHook(imm)
                #fast.logFunction(ret)
                #fast.logRegister(""EIP"")
                #fast.Hook()
            else:
                not_hooked += 1
        
    
    imm.log(""Hooked %i, skipped %i"" % (hooked, not_hooked))             
    return ""Found returns, attached hooks""
",python,javascript,0.00046651245683407245,0.0014449309983871645,0.02018673483275627,0.00016647152743767734,0.9170627958675283,0.00014678268824642736,0.051448713697660915,0.00647810730011912,0.002598950631029957
"import requests
import pymongo

# Establish connection to MongoDB
client = pymongo.MongoClient('mongodb://localhost:27017/')
db = client['aggregated_data']

# Make a request to each API and aggregate the data
data_points = []
for url in ['url_1', 'url_2', etc.]:
 req = requests.get(url)
 data_points.append(req.json())

# Store the data in the MongoDB database
db.aggregated_data.insert_many(data_points)",python,css,2.4103254089517496e-05,0.8708239535865524,0.0009798557873316829,5.370005317672091e-05,0.002073228495920817,0.0003997514285344679,0.004997340746846454,0.0006592597063671787,0.11998880694118068
"def find_prime_number(n):
    number = n + 1
    while True:
        counter = 0
        for i in range(2, number):
          if number % i == 0:
            counter = 1
        if counter == 0:
            break
        number += 1
    return number

num = int(input(""Enter a number:""))
prime = find_prime_number(num)

print(prime)",python,python,2.433974111407894e-06,4.2171388363910784e-07,1.3072850225864854e-05,6.811005398636221e-06,1.146937885053052e-07,0.0004801476477857668,0.999494207699482,2.4174836791769904e-06,3.7293164495507557e-07
"sequence = [3, 2, 5, 1, 9]

# finding the largest number
max_num = max(sequence)

# finding the index of the largest number in the sequence
index = sequence.index(max_num)

print(""The largest number in the sequence is:"", max_num)
print(""The position of the largest number in the sequence is:"", index)",python,typescript,0.007877472913477072,0.003245911239563264,0.1086038777817456,0.00010814938803431262,0.260957163278044,4.93710168577431e-05,0.2686117824511662,0.00031044387778653653,0.3502358280533253
"def findPairs(nums, t_sum):
    '''Function to find all the unique pairs of numbers 
    that add up to the target sum.'''
    num_set = set(nums)
    found_pairs = []
    for num in nums:
        if (t_sum - num) in num_set:
            found_pair = (min(num, t_sum - num), max(num, t_sum - num))
            if found_pair not in found_pairs:
                found_pairs.append(found_pair)
    return found_pairs
    
nums = [2, 3, 5, 7]
t_sum = 10
print(findPairs(nums, t_sum))",python,matlab,1.554125160376546e-06,2.9798790505105553e-09,2.194625144731273e-06,3.18015670248177e-06,0.002377672478522111,0.9973630004278778,0.0002329619057569097,9.810266422530851e-06,9.623034533845226e-06
"# Python3 program to find LCM of two numbers 

# method to return gcd of a and b 
def gcd(a, b): 
    if a == 0 : 
        return b 
          
    return gcd(b % a, a) 
      
# method to return LCM of two numbers 
def lcm(a, b): 
    return (a*b) // gcd(a, b)",python,java,3.2256182694397572e-06,8.780119021195481e-07,4.302396202974869e-06,0.9995725867964608,7.142321032783349e-05,9.789707662204147e-12,0.00031278453297057157,1.7939646746991764e-06,3.3005459402024716e-05
"def median(nums):
    nums.sort()
    mid = len(nums) // 2
    
    if len(nums) % 2 == 0:
        return (nums[mid] + nums[mid-1]) / 2
    else:
        return nums[mid]",python,python,6.158403846581548e-05,0.00022330607538301607,6.179776401259991e-05,8.853261200729797e-06,1.952307976839953e-05,4.815307619416649e-06,0.9995097059216553,5.790907167081588e-05,5.250548022415499e-05
"formatted = '{\n  ""name"":""John"",\n  ""age"":30,\n  ""city"":""New York""\n}'",css,css,0.00014253773772140464,0.9988769193132616,0.00013733507039854315,0.0005648870223657133,7.321023768275956e-07,1.2229493118932363e-05,0.00024011557418885496,8.507099588447167e-06,1.6736586979782346e-05
"def edit_distance(str1, str2):
    matrix = []
    for i in range(len(str1) + 1):
        matrix.append([0] * (len(str2) + 1))
        
    for i in range(len(str1) + 1):
        matrix[i][0] = i
    for j in range(len(str2) + 1):
        matrix[0][j] = j
        
    for i in range(1, len(str1) + 1):
        for j in range(1, len(str2) + 1):
            if str1[i-1] == str2[j-1]:
                matrix[i][j] = matrix[i-1][j-1]
            else:
                matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])
    
    return matrix[len(str1)][len(str2)]",python,python,1.382714503617545e-05,3.933597450199809e-06,6.210755009621575e-07,1.7855666737911635e-06,0.00013407151673633762,0.02047037089745456,0.9789923230527979,0.00036916657624746276,1.3900572102526357e-05
"#importing libraries
import pulp

#creating array
stocks = [""a"", ""b"", ""c""]

#creating problem
prob = pulp.LpProblem(""Maximise Profit"", pulp.LpMaximize)

#creating variables
x = pulp.LpVariable.dicts(""number of stocks"", stocks, lowBound=0)

#creating objective function
prob += pulp.lpSum([200*x[""a""], 150*x[""b""], 250*x[""c""]]), ""Maximizing Profit""

#constraints
prob += x[""a""] + x[""b""] + x[""c""] <= 4, ""Total Cost""
prob += x[""a""] * 300 + x[""b""] * 250 + x[""c""] * 250 <= 1000, ""Investment Cost""

#solving problem
prob.solve()

#printing results
for stock in stocks:
 print(""Number of"", stock, ""stocks bought:"", pulp.value(x[stock]))

#printing total profit
print(""Total Profit:"", pulp.value(prob.objective))",python,css,0.03188937222754369,0.41549403400940993,0.0319292396496766,0.003658039922043201,0.10385306954907159,0.11819391120162628,0.1511207590503351,0.01646335970191478,0.12739821468837886
"def generateTable(num):
    htmlTable = """"

    htmlTable += ""<table border=\""1\"">\n""
    htmlTable += ""<tr>\n""
    htmlTable += ""<th>Number</th>\n""
    htmlTable += ""<th>Multiple</th>\n""
    htmlTable += ""</tr>\n""

    for i in range(1, 11):
        htmlTable += ""<tr>\n""
        htmlTable += ""<td>"" + str(num) + ""</td>\n""
        htmlTable += ""<td>"" + str(num * i) + ""</td>\n""
        htmlTable += ""</tr>\n""

    htmlTable += ""</table>""

    return htmlTable",python,matlab,1.9053350735124732e-05,4.290881523134953e-07,0.3203936152862471,3.6346504643218657e-06,6.015888224978911e-05,0.6360696540594711,0.04341954958888008,3.389915504092505e-05,5.93875905794711e-09
"def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return False
        else:
            chars.add(char)
    return True

print(is_unique(string))",python,java,1.988180775125417e-08,0.0002920867796824099,3.666368097452238e-05,0.9715545060444823,1.3075012638238232e-09,2.565352383323482e-07,0.027072462299774475,0.0010417462850360636,2.2571855028695444e-06
"#import libraries 
import pandas as pd
import numpy as np
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split

#import dataset 
df = pd.read_csv('stock_data.csv')

#divide the data into independent and dependent variables 
X = df.drop('target_stock', axis=1).values
y = df['target_stock'].values
  
# Split the data into training and test set 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) 
  
#Define the model 
model = SVR() 
  
#Train the model 
model.fit(X_train, y_train) 
  
# Test the model 
model.score(X_test, y_test)",python,bash,0.876644501231115,0.03370119946161617,0.0008028765815914275,7.224183975364585e-07,6.009654773411224e-06,1.6522067386394215e-06,0.051533765726479684,5.14062834313938e-07,0.037308758656453694
"import nltk
from nltk.stem import WordNetLemmatizer
from nltk.corpus import wordnet

# Define a function to get the simple POS tag
def get_simple_pos(tag):
 
    if tag.startswith('J'):
        return wordnet.ADJ
    elif tag.startswith('V'):
        return wordnet.VERB
    elif tag.startswith('N'):
        return wordnet.NOUN
    elif tag.startswith('R'):
        return wordnet.ADV
    else:
        return wordnet.NOUN

# Create a lemmatizer object 
lemmatizer = WordNetLemmatizer()

def lemmatize_sentence(sentence):
    #tokenize the sentence and find the POS tag for each token
    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  
    #tuple of (token, simple POS tag)
    nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged]
    lemmatized_sentence = []
    for word, tag in nltk_tagged:
        lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))
    return "" "".join(lemmatized_sentence)

# Create the chatbot
def create_bot():
    print(""Hello! I am a customer service chatbot. How can I help you?"")
    response = input()
    response = lemmatize_sentence(response)
    # Perform actions based on the response
    if response == ""quit"":
        return
    else:
        print(""Thank you for your question. I will get back to you shortly with an answer."")
        create_bot()

create_bot()",sql,css,0.026823904045507784,0.4487559786103983,0.13300897529248532,1.747687597548322e-05,0.015586431909092688,0.0015934222209787387,0.08742939209019336,0.17455791018445618,0.11222650877091213
"def sum_range(start, end):
    total = 0
    for i in range(start,end + 1):
        total += i
    return total

# Test the function
print(sum_range(1, 10)) # Output: 55",python,python,3.7884820769161774e-05,4.3399064294938564e-05,9.659235950683634e-05,3.659790710141673e-07,0.0004040159942364322,3.7260179591322485e-05,0.9993631377142604,1.2080431091139034e-05,5.263457178808756e-06
"def capitalize_string(str):
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)

capitalized_string = capitalize_string(""this is an example"")
print(capitalized_string)",sql,sql,0.0005825867905105945,0.0005444052384134018,0.041700703942433824,0.0004846543704659569,0.0026853291524275135,0.00015499824552327412,0.07331806252207523,0.8804321294814321,9.713025671813387e-05
"def is_palindrome(s):
  #reverse string and compare 
  rev = s[::-1]
  if (s == rev): 
    return True
  else: 
    return False",python,python,1.317638546535408e-05,0.0022609065791414805,0.0014687776566128417,0.017735127198995913,1.2980388243852339e-06,2.12936088059311e-05,0.9757309818291275,0.0013407948151938748,0.001427643887832604
"def calculate_total(order_items, tax_rate):
    total = 0.00
    for item in order_items:
        total += (item[""Price""] * item[""Qty""])
    total += total * tax_rate
    return total

order_items = [{""Name"":""Apples"",""Price"":2.00,""Qty"":2},{""Name"":""Milk"",""Price"":2.50,""Qty"":1},{""Name"":""Eggs"",""Price"":3.00,""Qty"":6}]
tax_rate = 0.08

total = calculate_total(order_items, tax_rate)
print(total)",css,python,0.0010790957097229956,0.04377259768636964,0.01145407643314101,0.008517647043871483,6.805024963577416e-05,0.00013215255946325948,0.9346475248596964,9.500431960533229e-05,0.00023385113849398688
"import json

data = json.loads(data_json)

# Output:
data = {
 ""name"": ""John Doe"",
 ""age"": 18,
 ""hobbies"": [""reading"", ""swimming"", ""gaming""],
 ""contact"": {
  ""email"": ""johndoe@example.com"",
  ""mobile"": ""+1900000000""
 }
}",css,css,1.0688227063449457e-07,0.9495356220393402,0.0006722655992421631,0.04975980594132749,1.006667795909861e-06,2.354408939714423e-07,2.540356794986159e-05,4.319261550258148e-06,1.2345996295356664e-06
"#!/bin/bash

# OS check
if [ $(uname) == 'Darwin' ];
then
    echo ""Mac OS detected""
elif [ $(uname) == 'Linux' ];
then
    echo ""Linux OS detected""
fi

# install homebrew
/bin/bash -c ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)""

# install git
brew install git

# install node
brew install node

# install nvm
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash

# install yarn
brew install yarn

# install postgres
brew install postgres

# create local postgres database
createdb your_dbname

# install python
brew install python

# start postgres server
pg_ctl -D /usr/local/var/postgres start",bash,bash,0.9999999999999445,7.037002283771948e-15,3.2411225302918326e-14,2.871797174411275e-22,3.0733925670708368e-15,6.638090122886361e-16,5.014023372660116e-16,1.1748475868693049e-14,8.769796837227135e-18
"def find_closest_value(list_values, target_value):
 closest_value = None
 min_diff = float('inf')
 for value in list_values:
 diff = abs(target_value - value)
 if diff < min_diff:
 min_diff = diff
 closest_value = value
 return closest_value

print(find_closest_value(list_values, target_value)) # Output: 4",python,matlab,2.4829014702369024e-05,0.00035533794077153376,3.161768163406689e-05,1.0443955589779793e-06,4.135479650026431e-06,0.999567372301128,8.550577123740115e-08,1.0513540999012177e-05,5.064139784827962e-06
"# import necessary libraries
from sklearn import svm

# define the model
model = svm.SVC(kernel='rbf', gamma=1.0, C=1.0)

# fit the model
model.fit(X, y)

# make predictions
y_pred = model.predict(X)",python,bash,0.9954084060946411,0.00016609235913985212,1.676954869819108e-05,2.5393304010156175e-07,2.9022610733878834e-06,7.050302864417964e-07,0.004390133345492604,2.77655257813808e-10,1.4737149973175832e-05
"def classify(input):
    if input == ""apple"":
        label = ""fruit""
    else:
        label = ""not fruit""
    return label",python,python,0.06629548985457416,0.15539122774654282,0.06052543650570604,0.0008361089655781862,0.002538755862434546,0.009894240335953795,0.6945423198968809,0.007723791021379739,0.002252629810949785
"import re

def convert_to_identifier(input_string):
    # Replace all non-alphanumeric characters
    output_string = re.sub(r'\W+', '', input_string)
    
    # If the first character is non-alphabetic, prepend an underscore
    if not output_string[0].isalpha(): 
        output_string = ""_"" + output_string
        
    return output_string

identifier = convert_to_identifier(""hello-world"")
print(identifier)",python,python,0.14479438066294822,0.0032826158438670682,0.08632744285500271,8.655499039079012e-08,0.023352265958197567,0.0011034882751482808,0.731915832281461,0.004935909292506504,0.004287978275878165
"# Generate a Fibonacci sequence

# Function to generate Fibonacci sequence
def Fibonacci(n):
    if n < 0:
        print(""Incorrect input"")
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return Fibonacci(n-1) + Fibonacci(n-2)

# Print the sequence upto n terms
terms = 10
print(""Fibonacci sequence:"")
for num in range(1, terms + 1):
    print(Fibonacci(num))",python,python,0.0001091218622010862,1.5921902097041356e-05,0.00017213632917180665,3.1307829134283953e-06,0.0012765185498536432,0.006708538605262336,0.9915618678576393,0.00011404302310200697,3.8721087759233404e-05
"from datetime import date 
  
# Function to calculate number of days between two dates 
def getNumberOfDays(date1, date2): 
    return (date2 - date1).days 
  
# Driver program 
date1 = date(2020, 8, 18) 
date2 = date(2020, 9, 1) 
print(getNumberOfDays(date1, date2))",python,python,0.01968207212947898,0.0253953817680918,0.0038157782039588686,0.0017592212762610122,0.030605534959584728,4.955749942514054e-05,0.9140615829344281,0.0028834432853928455,0.001747427943378672
"def new_string(s1, s2):
    new_str = """"
    for char in s2:
        if char not in s1:
            new_str += char

    return new_str

print(new_string(""Python"", ""Programming"")) # Output: ""roammig""",python,python,0.03998733316868658,0.01111245243082935,0.0033319524100401308,1.6829961630406995e-05,0.001546927274688043,0.0055885484764055604,0.930442842189007,0.0027378446758292963,0.005235269412883689
"def is_anagram(word1, word2):
    word1 = word1.replace(' ', '').lower()
    word2 = word2.replace(' ', '').lower()

    if len(word1) != len(word2):
        return False

    count = {}
    for letter in word1:
        if letter in count:
            count[letter] += 1
        else:
            count[letter] = 1

    for letter in word2:
        if letter in count:
            count[letter] -= 1
        else:
            count[letter] = 1

    for k in count:
        if count[k] != 0:
            return False

    return True",python,python,0.0003791529305437892,0.0034073291854489988,0.0016770270165882822,3.532911337841983e-05,0.00021812024302217536,0.01037761502130077,0.9821081800428074,0.0012904120585237344,0.0005068343883862382
"def reverse(s):
    if len(s) == 0: 
        return s 
    else: 
        return reverse(s[1:]) + s[0]",python,python,0.0003660679466494841,0.0008770368310042077,0.00040049033570231906,1.55942526902711e-05,6.882957012782866e-05,0.00018079715679494127,0.9975630630969292,0.00044023140752859986,8.788940257300015e-05
"import json
import requests
 
def search_engine(query):
 
 # Make a request to the search engine API
 r = requests.get('http://search-engine.com/api/search', params={'query': query})
 
 # Parse the response
 response = json.loads(r.text)
 
 # Return the most relevant result
 return response['results'][0]
 
search_engine('python programming')",css,css,1.5991828400120305e-06,0.7751717018261101,0.00013486353026113344,6.715629630913363e-05,0.001707768382041742,1.532107198804129e-06,0.01731880468348353,0.00017644818498230568,0.2054201258067731
"def edit_distance(str1, str2):
    m = len(str1)
    n = len(str2)

    dp = [[ 0 for x in range(n+1)] for x in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
    
    return dp[m][n]",python,python,0.0002197626459962545,5.737435918157952e-05,4.297461601135149e-05,3.0479949818957796e-05,0.0006483855469633391,0.11071870674521307,0.8704719628798206,0.017546116041043412,0.0002642372159514284
"def find_longest_sequence(arr):
    max_length = 0
    start_index = 0

    # find first non-matching element
    while start_index < len(arr) - 1 and arr[start_index] + 1 == arr[start_index + 1]:
        start_index += 1

    # compare subsequent elements
    for i in range(start_index + 1, len(arr)):
        prev = arr[i-1]
        curr = arr[i]

        # count length of consecutive sequence
        if prev + 1 == curr:
            length = i - start_index + 1

            # update max length
            if  length > max_length:
                max_length = length
        else:
            # current sequence ended, reset
            start_index = i
    return max_length",sql,python,0.000321054802898352,0.0008456373504000623,0.0002704410229448138,9.510297637868833e-05,0.003634197377791651,0.49232155415881934,0.5011920752076104,0.0006566280359487738,0.0006633090672077498
"def fibonacci(n):
 a, b = 0, 1
 for i in range(n):
  a, b = b, a + b
 return a

for i in range(51):
 print(fibonacci(i))",python,matlab,2.1424916657694844e-07,2.2630377473433415e-08,2.028706151014955e-06,2.4837617183019743e-08,2.5725278208710208e-08,0.7857585656039923,0.21423795855592706,8.739570175376127e-07,2.8573447278782384e-07
"class Node:
 def __init__(self, state, parent_node = None, cost_to_start = 0):
 self.state = state
 self.parent_node = parent_node
 self.cost_to_start = cost_to_start
 self.total_cost = 0

def set_total_cost(self, total_cost):
 self.total_cost = total_cost

def get_path_from_root(self):
 path = [self]
 node = self
 while node.parent_node:
 node = node.parent_node
 path.append(node)
 return path[::-1]

def get_states_from_root(self):
 return list(map(lambda node: node.state, self.get_path_from_root()))

def __str__(self):
 return str(self.state)

def __repr__(self):
 return str(self.state)

class AStar:
 def __init__(self, start_state, expand_edge, heuristic_cost, goal_test):
 self.start_node = Node(start_state)
 self.expand_edge = expand_edge
 self.heuristic_cost = heuristic_cost
 self.goal_test = goal_test

def search(self):
 open_list = [self.start_node]
 closed_list = []

 while open_list:
 node = self.select_node_for_expansion(open_list)
 if self.goal_test(node.state):
 return node.get_path_from_root()
 open_list.remove(node)
 closed_list.append(node)
 child_nodes = self.expand_edge(node)
 
 for child_node in child_nodes:
 self.update_costs(child_node, node, open_list, closed_list)

 open_list.sort(key=lambda x: x.total_cost)
 
 raise Exception('Goal not reachable')

def select_node_for_expansion(self, open_list):
 node = open_list[0]
 for n in open_list:
 if n.total_cost < node.total_cost:
 node = n
 return node

def update_costs(self, child_node, parent_node, open_list, closed_list):
 cost_from_start_to_child = parent_node.cost_to_start + self.expand_edge(parent_node, child_node)
 total_cost = cost_from_start_to_child + self.heuristic_cost(child_node)
 in_open_list = any(map(lambda x: x.state == child_node.state, open_list))
 in_closed_list = any(map(lambda x: x.state == child_node.state, closed_list))

 if not in_open_list and not in_closed_list:
 child_node.cost_to_start = cost_from_start_to_child
 child_node.set_total_cost(total_cost)
 child_node.parent_node = parent_node
 open_list.append(child_node)
 elif in_open_list and total_cost < open_list[0].total_cost:
 node = list(filter(lambda x: x.state == child_node.state, open_list))[0]
 node.cost_to_start = cost_from_start_to_child
 node.set_total_cost(total_cost)
 node.parent_node = parent_node
 elif in_closed_list and total_cost < closed_list[0].total_cost:
 node = list(filter(lambda x: x.state == child_node.state, open_list))[0]
 node.cost_to_start = cost_from_start_to_child 
 node.set_total_cost(total_cost)
 node.parent_node = parent_node 
 open_list.append(node)
 closed_list.remove(node)",python,python,0.0004888018424031118,0.046600501651408645,0.04218814305624926,9.242621821016057e-05,0.000221338869638255,0.0005535658429344883,0.7313551332972184,0.1641100971287132,0.014389992093224483
"def find_longest_increasing_subarray(arr): 
    n = len(arr) 
  
    # Initialize overall max 
    max_len = 1
  
    # Initialize starting point of current subarray 
    start_index = 0
  
    # Initialize ending point of current subarray 
    end_index = 0
  
    # Initialize current max 
    curr_max = 1
  
    # Traverse array elements 
    for i in range(1, n): 
  
        # If element is greater than previous one 
        if arr[i] > arr[i - 1]: 
            curr_max += 1
              
        # Else Reset current max and 
        # starting point of current subarray 
        else: 
            if curr_max > max_len: 
                max_len = curr_max 
                start_index = i - curr_max 
                end_index = i - 1
            curr_max = 1
          
    # Compare the last maximum length with 
    # overall maximum length 
    if curr_max > max_len: 
        max_len = curr_max 
        start_index = n - curr_max 
        end_index = n - 1
          
    # Print starting and ending index of longest 
    # increasing contiguous subarray 
    print(""Longest increasing contiguous "" + 
          ""subarray is ["",  
          arr[start_index], "".."", arr[end_index], 
          ""] of length"", max_len)
          
# Driver code
arr = [2, 6, 4, 8, 10]
find_longest_increasing_subarray(arr)",python,python,0.002010667509056477,0.0033699625057360665,0.0015956079186347405,0.0012622892109938881,0.005959182285646672,0.45172665588057803,0.5122202385216111,0.0016047473289046484,0.020250648838838398
"class Student:
    def __init__(self, name, age, gender):
        self.name = name
        self.age =  age
        self.gender = gender",python,python,0.00013113133814304038,0.015597875181183149,0.0128772386525721,0.1572328361646075,1.2016257827480556e-08,3.984042561278055e-06,0.8111791556861325,0.0027812952931465357,0.00019647162539612745
"def remove_longest_string(list_strings):
    longest_string = """"
    for string in list_strings:
        if len(string) > len(longest_string):
            longest_string = string
    list_strings.remove(longest_string)
    return list_strings

print(remove_longest_string(list_strings))",python,java,6.530932951706805e-06,0.0032141507575313747,0.0010050113282476032,0.6222360387475481,5.740802390095875e-07,0.0002101923723198454,0.36940725280403297,0.0034667187693693128,0.00045353020776003867
"from collections import Counter

def word_frequency(paragraph): 
  words = paragraph.split()
  counts = Counter(words)
  return counts.most_common()

paragraph = ""This is a sample sentence to try out the program.""
print(word_frequency(paragraph))",python,python,0.011614093594060619,0.011374534823162398,0.030227483632475266,0.004145047905202864,0.0018633555825638397,5.892911409173318e-05,0.9195970772942489,0.019597758935285675,0.001521719118908651
"""""""
Write a python code to generate a random password with at least 8 characters that includes at least one lower case letter, one upper case letter and one number
""""""

import string
import random

def generate_password():
    letters = string.ascii_letters
    digits = string.digits
    symbols = string.punctuation
    all_chars = letters + digits + symbols

    password = """".join(random.choice(all_chars) for i in range(8))
    lower_count = 0
    upper_count = 0
    digit_count = 0

    for char in password:
        if char.islower():
            lower_count += 1
        elif char.isupper():
            upper_count += 1
        elif char.isdigit():
            digit_count += 1

    while lower_count == 0 or upper_count == 0 or digit_count == 0:
        password = """".join(random.choice(all_chars) for i in range(8))
        lower_count = 0
        upper_count = 0
        digit_count = 0
        for char in password:
            if char.islower():
                lower_count += 1
            elif char.isupper():
                upper_count += 1
            elif char.isdigit():
                digit_count += 1
    return password

if __name__ == '__main__':
    print(generate_password())",sql,sql,2.1882228764911153e-07,1.7714599494633493e-07,1.0186660113247915e-05,1.2199553421041166e-05,3.724794216771154e-08,0.002338980559746427,0.0029495921677001272,0.994646628851113,4.1978991681182346e-05
"#! /usr/bin/env python3
""""""
 services-wrapper A small tool which wraps around check-services.php and tries to
                guide the services process with a more modern approach with a
                Queue and workers.

 Based on the original version of poller-wrapper.py by Job Snijders

 Author:        Neil Lathwood <neil@librenms.org>
                Orsiris de Jong <contact@netpower.fr>
 Date:          Oct 2019

 Usage:         This program accepts one command line argument: the number of threads
                that should run simultaneously. If no argument is given it will assume
                a default of 1 thread.

 Ubuntu Linux:  apt-get install python-mysqldb
 FreeBSD:       cd /usr/ports/*/py-MySQLdb && make install clean
 RHEL 7:        yum install MySQL-python
 RHEL 8:        dnf install mariadb-connector-c-devel gcc && python -m pip install mysqlclient

 Tested on:     Python 3.6.8 / PHP 7.2.11 / CentOS 8

 License:       This program is free software: you can redistribute it and/or modify it
                under the terms of the GNU General Public License as published by the
                Free Software Foundation, either version 3 of the License, or (at your
                option) any later version.

                This program is distributed in the hope that it will be useful, but
                WITHOUT ANY WARRANTY; without even the implied warranty of
                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
                Public License for more details.

                You should have received a copy of the GNU General Public License along
                with this program. If not, see http://www.gnu.org/licenses/.

                LICENSE.txt contains a copy of the full GPLv3 licensing conditions.
""""""

import LibreNMS.library as LNMS

try:

    import json
    import os
    import queue
    import subprocess
    import sys
    import threading
    import time
    from optparse import OptionParser

except ImportError as exc:
    print('ERROR: missing one or more of the following python modules:')
    print('threading, queue, sys, subprocess, time, os, json')
    print('ERROR: %s' % exc)
    sys.exit(2)


APP_NAME = ""services_wrapper""
LOG_FILE = ""logs/"" + APP_NAME + "".log""
_DEBUG = False
servicedisco = False
real_duration = 0
service_devices = 0

""""""
 Threading helper functions
""""""
# (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC0
def memc_alive():
    try:
        global memc
        key = str(uuid.uuid4())
        memc.set('poller.ping.' + key, key, 60)
        if memc.get('poller.ping.' + key) == key:
            memc.delete('poller.ping.' + key)
            return True
        else:
            return False
    except:
        return False


def memc_touch(key, time):
    try:
        global memc
        val = memc.get(key)
        memc.set(key, val, time)
    except:
        pass


def get_time_tag(step):
    ts = int(time.time())
    return ts - ts % step
#EOC0


""""""
    A seperate queue and a single worker for printing information to the screen prevents
    the good old joke:

        Some people, when confronted with a problem, think,
        ""I know, I'll use threads,"" and then they two they hav erpoblesms.
""""""


def printworker():
    nodeso = 0
    while True:
        # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC4
        global IsNode
        global servicedisco
        if servicedisco:
            if not IsNode:
                memc_touch('service.master', 10)
                nodes = memc.get('service.nodes')
                if nodes is None and not memc_alive():
                    print(""WARNING: Lost Memcached. Taking over all devices. Nodes will quit shortly."")
                    servicedisco = False
                    nodes = nodeso
                if nodes is not nodeso:
                    print(""INFO: %s Node(s) Total"" % (nodes))
                    nodeso = nodes
            else:
                memc_touch('service.nodes', 10)
            try:
                worker_id, device_id, elapsed_time = print_queue.get(False)
            except:
                pass
                try:
                    time.sleep(1)
                except:
                    pass
                continue
        else:
            worker_id, device_id, elapsed_time = print_queue.get()
        # EOC4
        global real_duration
        global per_device_duration
        global service_devices
        real_duration += elapsed_time
        per_device_duration[device_id] = elapsed_time
        service_devices += 1
        if elapsed_time < 300:
            print(""INFO: worker %s finished device %s in %s seconds"" % (worker_id, device_id, elapsed_time))
        else:
            print(""WARNING: worker %s finished device %s in %s seconds"" % (worker_id, device_id, elapsed_time))
        print_queue.task_done()

""""""
    This class will fork off single instances of the check-services.php process, record
    how long it takes, and push the resulting reports to the printer queue
""""""


def poll_worker():
    while True:
        device_id = poll_queue.get()
        # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC5
        if not servicedisco or memc.get('service.device.' + str(device_id)) is None:
            if servicedisco:
                result = memc.add('service.device.' + str(device_id), config['distributed_poller_name'], 300)
                if not result:
                    print(""This device (%s) appears to be being service checked by another service node"" % (device_id))
                    poll_queue.task_done()
                    continue
                if not memc_alive() and IsNode:
                    print(""Lost Memcached, Not service checking Device %s as Node. Master will check it."" % device_id)
                    poll_queue.task_done()
                    continue
            # EOC5
            try:
                start_time = time.time()

                output = ""-d >> %s/services_device_%s.log"" % (log_dir, device_id) if debug else "">> /dev/null""
                # TODO replace with command_runner
                command = ""/usr/bin/env php %s -h %s %s 2>&1"" % (service_path, device_id, output)
                subprocess.check_call(command, shell=True)

                elapsed_time = int(time.time() - start_time)
                print_queue.put([threading.current_thread().name, device_id, elapsed_time])
            except (KeyboardInterrupt, SystemExit):
                raise
            except:
                pass
        poll_queue.task_done()


if __name__ == '__main__':
    logger = LNMS.logger_get_logger(LOG_FILE, debug=_DEBUG)

    install_dir = os.path.dirname(os.path.realpath(__file__))
    LNMS.check_for_file(install_dir + '/config.php')
    config = json.loads(LNMS.get_config_data(install_dir))

    service_path = config['install_dir'] + '/check-services.php'
    log_dir = config['log_dir']

    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC1
    if 'distributed_poller_group' in config:
        service_group = str(config['distributed_poller_group'])
    else:
        service_group = False


    if ('distributed_poller' in config and
        'distributed_poller_memcached_host' in config and
        'distributed_poller_memcached_port' in config and
        config['distributed_poller']):
        try:
            import memcache
            import uuid
            memc = memcache.Client([config['distributed_poller_memcached_host'] + ':' +
                                    str(config['distributed_poller_memcached_port'])])
            if str(memc.get(""service.master"")) == config['distributed_poller_name']:
                print(""This system is already joined as the service master."")
                sys.exit(2)
            if memc_alive():
                if memc.get(""service.master"") is None:
                    print(""Registered as Master"")
                    memc.set(""service.master"", config['distributed_poller_name'], 10)
                    memc.set(""service.nodes"", 0, 300)
                    IsNode = False
                else:
                    print(""Registered as Node joining Master %s"" % memc.get(""service.master""))
                    IsNode = True
                    memc.incr(""service.nodes"")
                servicedisco = True
            else:
                print(""Could not connect to memcached, disabling distributed service checks."")
                servicedisco = False
                IsNode = False
        except SystemExit:
            raise
        except ImportError:
            print(""ERROR: missing memcache python module:"")
            print(""On deb systems: apt-get install python3-memcache"")
            print(""On other systems: pip3 install python-memcached"")
            print(""Disabling distributed discovery."")
            servicedisco = False
    else:
        servicedisco = False
    # EOC1

    s_time = time.time()
    real_duration = 0
    per_device_duration = {}
    service_devices = 0

    """"""
        Take the amount of threads we want to run in parallel from the commandline
        if None are given or the argument was garbage, fall back to default of 16
    """"""
    usage = ""usage: %prog [options] <workers> (Default: 1 (Do not set too high)""
    description = ""Spawn multiple check-services.php processes in parallel.""
    parser = OptionParser(usage=usage, description=description)
    parser.add_option('-d', '--debug', action='store_true', default=False,
                      help=""Enable debug output. WARNING: Leaving this enabled will consume a lot of disk space."")
    (options, args) = parser.parse_args()

    debug = options.debug
    try:
        amount_of_workers = int(args[0])
    except (IndexError, ValueError):
        amount_of_workers = 1

    devices_list = []

    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC2
    if service_group is not False:
        query = ""SELECT DISTINCT(`services`.`device_id`) FROM `services` LEFT JOIN `devices` ON `services`.`device_id` = `devices`.`device_id` WHERE `devices`.`poller_group` IN("" + service_group + "") AND `devices`.`disabled` = 0""
    else:
        query = ""SELECT DISTINCT(`services`.`device_id`) FROM `services` LEFT JOIN `devices` ON `services`.`device_id` = `devices`.`device_id` WHERE `devices`.`disabled` = 0""
    # EOC2

    db = LNMS.db_open(config['db_socket'], config['db_host'], config['db_port'], config['db_user'], config['db_pass'], config['db_name'])
    cursor = db.cursor()
    cursor.execute(query)
    devices = cursor.fetchall()
    for row in devices:
        devices_list.append(int(row[0]))
    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC3
    if servicedisco and not IsNode:
        query = ""SELECT MAX(`device_id`), MIN(`device_id`) FROM `services`""
        cursor.execute(query)
        devices = cursor.fetchall()
        maxlocks = devices[0][0] or 0
        minlocks = devices[0][1] or 0
    # EOC3
    db.close()

    poll_queue = queue.Queue()
    print_queue = queue.Queue()

    print(""INFO: starting the service check at %s with %s threads"" % (time.strftime(""%Y-%m-%d %H:%M:%S""),
                                                                      amount_of_workers))

    for device_id in devices_list:
        poll_queue.put(device_id)

    for i in range(amount_of_workers):
        t = threading.Thread(target=poll_worker)
        t.setDaemon(True)
        t.start()

    p = threading.Thread(target=printworker)
    p.setDaemon(True)
    p.start()

    try:
        poll_queue.join()
        print_queue.join()
    except (KeyboardInterrupt, SystemExit):
        raise

    total_time = int(time.time() - s_time)

    print(""INFO: services-wrapper checked %s devices in %s seconds with %s workers"" % (service_devices, total_time, amount_of_workers))

    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC6
    if servicedisco or memc_alive():
        master = memc.get(""service.master"")
        if master == config['distributed_poller_name'] and not IsNode:
            print(""Wait for all service-nodes to finish"")
            nodes = memc.get(""service.nodes"")
            while nodes is not None and nodes > 0:
                try:
                    time.sleep(1)
                    nodes = memc.get(""service.nodes"")
                except:
                    pass
            print(""Clearing Locks"")
            x = minlocks
            while x <= maxlocks:
                memc.delete('service.device.' + str(x))
                x = x + 1
            print(""%s Locks Cleared"" % x)
            print(""Clearing Nodes"")
            memc.delete(""service.master"")
            memc.delete(""service.nodes"")
        else:
            memc.decr(""service.nodes"")
        print(""Finished %s."" % time.time())
    # EOC6

    show_stopper = False

    if total_time > 300:
        print(""WARNING: the process took more than 5 minutes to finish, you need faster hardware or more threads"")
        print(""INFO: in sequential style service checks the elapsed time would have been: %s seconds"" % real_duration)
        for device in per_device_duration:
            if per_device_duration[device] > 300:
                print(""WARNING: device %s is taking too long: %s seconds"" % (device, per_device_duration[device]))
                show_stopper = True
        if show_stopper:
            print(""ERROR: Some devices are taking more than 300 seconds, the script cannot recommend you what to do."")
        else:
            recommend = int(total_time / 300.0 * amount_of_workers + 1)
            print(
                ""WARNING: Consider setting a minimum of %d threads. (This does not constitute professional advice!)"" % recommend)

        sys.exit(2)
",sql,typescript,0.4215611003605952,0.021316479488827898,0.0026237980257382875,2.016345130970896e-06,0.0001360475520972145,2.1757356387024627e-06,0.0008133474717642236,0.026913264822425894,0.5266317701977815
"class MyClass:

    def __init__(self):
        self.name = None",python,python,0.0006317871313575393,0.004341516558857667,0.027661004903519856,0.017051407728191446,1.135879163436573e-06,5.388734989754887e-06,0.9285572115985703,0.021259113572104305,0.0004914338932459388
"def print_sum(a, b):
    print(a + b)",python,python,0.0023515384333333837,0.013940280807173328,0.006153839310028727,0.0003074183046865665,0.0012881298337424412,0.0008542369787324888,0.969805187414222,0.002158288340253575,0.0031410805778273065
"def sum_of_min_max(lst):
    """"""
    Function to take a list of integers and returns the summation of the largest and smallest numbers
    Arguments:
    lst -- list -- list of integers
    Output:
    summation -- int -- summation of the largest and smallest numbers
    """"""
    min_val = min(lst)
    max_val = max(lst)
    summation = min_val + max_val
    return summation",python,javascript,0.0004412142485910814,0.0006034093332437802,0.002352513775094159,0.010446382917006126,0.8164997745185694,5.770275447951553e-07,0.11703186011629055,0.0005182368896617627,0.052106031173998556
"import random

def generate_sequence():
    sequence = """"
    for _ in range(20):
        char = chr(random.randint(97, 122))
        sequence += char
    return sequence

output = generate_sequence()
print(output)",python,python,0.0011793772865283999,0.0002208005760113806,0.0004105536873430481,2.3498615231247794e-06,2.2454692136697194e-05,0.00015803857638559878,0.996977361929392,0.0010249108546802705,4.152535999308079e-06
"def fibonacci_sequence(n):
    if n == 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        fib_numbers = [0, 1]
        for i in range(2, n):
            fib_numbers.append(fib_numbers[i-2] + fib_numbers[i-1])
        return fib_numbers",python,python,8.500944897591499e-06,1.1690256973090805e-05,4.3011740737420016e-05,1.436531582859891e-06,2.090146889005376e-06,0.09306726337500092,0.9068217292402876,4.056118715189615e-05,3.716576479813722e-06
"def remove_duplicates(list):
  new_list = []
  for item in list:
    if item not in new_list:
      new_list.append(item)
  return new_list",python,matlab,0.0006111373028402367,0.006318253599649576,0.020322625600485086,5.376358576914718e-05,0.007861583043945651,0.8631778268465734,0.10023220086339747,0.0010489140201995026,0.00037369513713992036
"class Foo:
    def __init__(self, private_var, public_var):
        # Private members
        self.__private_var = private_var
        # Public members
        self.public_var = public_var
        
    # Private method
    def __private_method(self):
        return self.__private_var
    
    # Public method
    def public_method(self):
        return self.public_var",python,java,1.9326885810046413e-13,1.5229545632509575e-12,3.298549025086995e-11,0.9999999997400237,4.2721029954191145e-23,5.383134776772219e-19,1.3228968221356816e-10,9.294550942695171e-11,3.955148383677357e-14
"import numpy as np
import tensorflow as tf

# Define the model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(10, input_dim=5, activation='relu'))
model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=2)

# Evaluate the model
scores = model.evaluate(X_test, y_test, verbose=2)
print(""Accuracy: %.2f%%"" % (scores[1]*100))",python,python,0.3357073230292128,0.00628342978356858,0.02634217087001165,0.0006658102504179434,2.101928083960411e-05,5.135470461845099e-06,0.5929531891670993,2.0262547687556375e-07,0.03802171952291145
"for i in range(0, 5):
    for j in range(0, i+1):
        print(""* "",end="""")
    print(""\r"")",python,matlab,5.085710486787063e-10,3.4472827714954125e-11,1.1914268772471904e-08,1.9935629881057275e-11,1.2584729498205393e-11,0.7300602322514775,0.2699397370667598,1.7424357356820615e-08,7.67572288627541e-10
"from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)

class Task(db.Model):
 id = db.Column(db.Integer, primary_key=True)
 description = db.Column(db.String(120), unique=True)

db.create_all()

@app.route('/tasks', methods=['POST'])
def create_task():
 task = Task(description=request.json['description'])
 db.session.add(task)
 db.session.commit()
 return jsonify(task.id)

@app.route('/tasks', methods=['GET'])
def get_tasks():
 tasks = Task.query.all()
 return jsonify([task.description for task in tasks])

@app.route('/tasks/int:id', methods=['PUT'])
def update_task(id):
 task = Task.query.get(id)
 task.description = request.json['description']
 db.session.commit()
 return jsonify({'message': 'Task updated'})

@app.route('/tasks/int:id', methods=['DELETE'])
def delete_task(id):
 Task.query.filter_by(id=id).delete()
 db.session.commit()
 return jsonify({'message': 'Task deleted'})

if __name__ == '__main__':
 app.run(debug=True)",css,html,0.0004069237283436883,0.0031061803081059917,0.9941149633637855,0.0004157811181021378,5.567570666140019e-05,1.6013545774395283e-06,0.0004255786405097675,0.0012851276605296779,0.00018816811938430288
"import string
import random

def generate_password(length):
 # Create all strings
 lowercase_letters = string.ascii_lowercase
 uppercase_letters = string.ascii_uppercase
 numbers = string.digits
 # Empty string to store password
 password = ''
 # Generate random singles strings and add to password
 for i in range(length):
 random_lowercase = random.choice(lowercase_letters)
 random_uppercase = random.choice(uppercase_letters)
 random_number = random.choice(numbers)
 password += random_lowercase + random_uppercase + random_number
 # Shuffle the password
 password_list = list(password)
 random.shuffle(password_list)
 password = ''.join(password_list)
 return password

password_length = 8
password = generate_password(password_length)
print(password)",sql,sql,7.801032540889332e-10,9.504162265881196e-07,3.747919902912365e-07,0.0007617915603574194,1.636770068365851e-09,1.5917076960731182e-09,0.0002747624007389762,0.9989609977023218,1.119119783853971e-06
"#Function for splitting a given string by every nth character
def splitStringByN(string, n): 
    res = [string[i:i+n] for i in range(0, len(string), n)] 
    return res

# Driver code
string = ""Hello World!""
n = 3
splitString = splitStringByN(string, n)
print(splitString)",python,java,1.8625419134768766e-12,1.0503206739056964e-06,2.6328354016046466e-07,0.9973525964203976,2.213366330433846e-12,1.3374434789864185e-09,0.002478810934340586,0.00016724575187145534,3.1947657037504735e-08
"count = 0
for row in arr:
    for col in row:
        if col > 5:
            count += 1
print(count)",python,matlab,8.882061268629232e-05,0.0028407789881311637,0.00016806825456073672,9.979376722962198e-06,9.656280527400862e-05,0.8448056502923589,0.15165446210696978,0.00014149678984422845,0.00019418077345192505
"def isPrime(num):
    if num < 2:
        return False
    for i in range(2,num):
        if num % i == 0:
            return False
    return True

num_list = [12, 23, 7, 8, 10, 15]

prime_numbers = []
for n in num_list:
    if isPrime(n):
        prime_numbers.append(n)

print(prime_numbers) #[23, 7]",python,matlab,1.9360344739192143e-08,9.952134188125176e-11,1.3315728938195097e-07,9.298023803980586e-10,2.633701040850513e-09,0.9998809525013262,0.00011887978088945344,5.021314747010679e-09,6.51581060183924e-09
"import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

# Read data
data = pd.read_csv('news.csv', encoding='utf-8')

# Vectorize data
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data['headline'])

# Train the model
model = LinearSVC()
model.fit(X, data['tags'])

# Test the model
predicted = model.predict(X)
print(accuracy_score(data['tags'], predicted))",python,python,0.05949815259592249,0.12104905495227242,0.002876562985311964,3.917236201059676e-05,4.4400946412605865e-05,1.0749871908546485e-05,0.8132418450076374,1.3838022794644192e-06,0.003238677476244519
"# Function to find the sum of digits
def sum_digits(num):
 # Variable to store the sum of digits
 sum = 0
 
 while num > 0:
  digit = num % 10
  sum = sum + digit
  num = num // 10
 
 return sum
 
num = 1234
sum = sum_digits(num)
print(""Sum of digits of %d is %d"" % (num, sum))
# Output: Sum of digits of 1234 is 10",python,matlab,0.00013417323947971602,1.956051548891519e-06,0.00215046176476109,0.15418645573607406,0.20656113554396396,0.6321713513820828,0.0017161595063580656,0.0005134010870263013,0.002564905688705242
"import numpy as np 
from scipy.optimize import curve_fit

# Define the x-coordinate values 
xData = np.arange(-5, 5, 0.1) 

# Define the y-coordinate values
yData = 3*xData**2 + 2*xData + 3 

# Define the polynomial function 
def func(x, a, b, c): 
    return a*x**2 + b*x + c 

# Fit the polynomial 
params, params_covariance = curve_fit(func, xData, yData) 

# Extract parameters from the params array 
a = params[0] 
b = params[1] 
c = params[2]

print('Fitted polynomial: {0:.2f}x^2 + {1:.2f}x + {2:.2f}'.format(a, b, c))

Output: Fitted polynomial: 3.00x^2 + 2.00x + 3.00",css,css,0.005122855491282601,0.9167853168992586,0.0021593291839697507,0.0062393706666143516,0.011217077624061095,0.00022594871109419515,0.04116849557303659,0.0004035070606072298,0.016678098790075282
"def quick_sort(arr):
 if len(arr) == 0:
 return arr
 
 pivot = arr[len(arr) // 2]
 left_arr, right_arr = [], []
 
 for i in range(len(arr)):
 if arr[i] < pivot:
 left_arr.append(arr[i])
 elif arr[i] > pivot:
 right_arr.append(arr[i])
 
 return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)",python,matlab,3.592139059474154e-06,1.2281157301921077e-05,3.276223177117619e-06,9.368868664042308e-07,5.381640601596029e-07,0.9904882700653169,0.00948713984404784,4.2623832040000213e-07,3.5392818497023795e-06
"def power_of_integer(x, n):
    if n == 0:
        return 1
    
    if n % 2 == 0:
        return power_of_integer(x*x, n//2)
    else:
        return x * power_of_integer(x*x, (n-1)//2)",python,python,3.597065936728295e-05,4.960474453871232e-05,3.498172367255708e-05,6.1023588060407805e-06,7.4287902476166415e-06,0.0005743311898694385,0.9992516475743248,3.624806692720296e-05,3.6848922463092967e-06
"import http.server
import socketserver

PORT = 8080

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("""", PORT), Handler) as httpd:
 print(""Serving at port"", PORT)
 httpd.serve_forever()",python,html,0.0058754923040180975,0.008579727244493627,0.5331597911043543,0.0004031581934359526,0.0009349743130631519,4.449942500299855e-05,0.4195600298748273,0.0011386884058406412,0.030303639134963888
"import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression

# Load training data
train_data = pd.read_csv(""train.csv"")
X_train = train_data[""Name""].values
y_train = train_data[""Gender""].values

# Create the vectorizer
vectorizer = CountVectorizer()

# Fit the vectorizer
vectorizer.fit(X_train)

# Transform the vectorizer
X_train_vectorized = vectorizer.transform(X_train)

# Create a model
model = LogisticRegression()

# Fit the model
model.fit(X_train_vectorized, y_train)",python,python,0.4142282849311052,0.046224459830500955,0.005506378853300974,0.00018654635623589907,0.00010235251950304727,8.821556596574008e-05,0.5005364295792101,6.57836067150281e-06,0.033120754003506545
"# Using for loop 
for num in range(0, 51): 
 if num % 2 != 0: 
 print(num, end = "" "") 

# Output: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49",python,matlab,1.1541183867951738e-07,2.561227863202698e-10,1.0768997114598181e-07,2.7652082534568023e-09,6.672640615399807e-09,0.9999974828662429,2.2414063410059244e-06,5.227744642288571e-09,3.7703890147008136e-08
"objects = [
    {'name': 'a', 'value': None},
    {'name': 'b', 'value': None},
    {'name': 'c', 'value': None}
]",css,matlab,0.0019936597919016567,0.03594554846068164,0.0011436284488638895,0.3105603138523196,7.905797223221007e-06,0.6481142382614117,2.3327055102916162e-05,0.0005438133148015406,0.0016675650176938585
"def check_for_int(lst, int):
    if int in lst:
        return True
    else:
        return False
    
lst = [2, 4, 6]
int = 4

is_found = check_for_int(lst, int)
print(is_found)",python,java,7.201054172867216e-08,3.415465413252682e-09,9.360737990209278e-09,0.9999821308668445,6.987055041259172e-10,2.7486939678023557e-18,1.7783091643672606e-05,6.850569915047516e-11,4.875556054459568e-10
"""""""Module containing python functions, which generate first order Redfield kernel.
   For docstrings see documentation of module neumann1.""""""

import numpy as np
import itertools

from ...wrappers.mytypes import doublenp
from ...wrappers.mytypes import complexnp

from ..aprclass import Approach
from .neumann1 import Approach1vN


# ---------------------------------------------------------------------------------------------------
# Redfield approach
# ---------------------------------------------------------------------------------------------------
class ApproachRedfield(Approach):

    kerntype = 'pyRedfield'

    def prepare_arrays(self):
        Approach1vN.prepare_arrays(self)

    def clean_arrays(self):
        Approach1vN.clean_arrays(self)

    def generate_fct(self):
        Approach1vN.generate_fct(self)

    def generate_coupling_terms(self, b, bp, bcharge):
        Tba, phi1fct = self.leads.Tba, self.phi1fct
        si, kh = self.si, self.kernel_handler
        nleads, statesdm = si.nleads, si.statesdm

        acharge = bcharge-1
        ccharge = bcharge+1

        # --------------------------------------------------
        for a, ap in itertools.product(statesdm[acharge], statesdm[acharge]):
            if kh.is_included(a, ap, acharge):
                bpap = si.get_ind_dm1(bp, ap, acharge)
                ba = si.get_ind_dm1(b, a, acharge)
                fct_aap = 0
                for l in range(nleads):
                    fct_aap += (+ Tba[l, b, a]*Tba[l, ap, bp]*phi1fct[l, bpap, 0].conjugate()
                                - Tba[l, b, a]*Tba[l, ap, bp]*phi1fct[l, ba, 0])
                kh.set_matrix_element(fct_aap, b, bp, bcharge, a, ap, acharge)
        # --------------------------------------------------
        for bpp in statesdm[bcharge]:
            if kh.is_included(bpp, bp, bcharge):
                fct_bppbp = 0
                for a in statesdm[acharge]:
                    bppa = si.get_ind_dm1(bpp, a, acharge)
                    for l in range(nleads):
                        fct_bppbp += +Tba[l, b, a]*Tba[l, a, bpp]*phi1fct[l, bppa, 1].conjugate()
                for c in statesdm[ccharge]:
                    cbpp = si.get_ind_dm1(c, bpp, bcharge)
                    for l in range(nleads):
                        fct_bppbp += +Tba[l, b, c]*Tba[l, c, bpp]*phi1fct[l, cbpp, 0]
                kh.set_matrix_element(fct_bppbp, b, bp, bcharge, bpp, bp, bcharge)
            # --------------------------------------------------
            if kh.is_included(b, bpp, bcharge):
                fct_bbpp = 0
                for a in statesdm[acharge]:
                    bppa = si.get_ind_dm1(bpp, a, acharge)
                    for l in range(nleads):
                        fct_bbpp += -Tba[l, bpp, a]*Tba[l, a, bp]*phi1fct[l, bppa, 1]
                for c in statesdm[ccharge]:
                    cbpp = si.get_ind_dm1(c, bpp, bcharge)
                    for l in range(nleads):
                        fct_bbpp += -Tba[l, bpp, c]*Tba[l, c, bp]*phi1fct[l, cbpp, 0].conjugate()
                kh.set_matrix_element(fct_bbpp, b, bp, bcharge, b, bpp, bcharge)
        # --------------------------------------------------
        for c, cp in itertools.product(statesdm[ccharge], statesdm[ccharge]):
            if kh.is_included(c, cp, ccharge):
                cpbp = si.get_ind_dm1(cp, bp, bcharge)
                cb = si.get_ind_dm1(c, b, bcharge)
                fct_ccp = 0
                for l in range(nleads):
                    fct_ccp += (+ Tba[l, b, c]*Tba[l, cp, bp]*phi1fct[l, cpbp, 1]
                                - Tba[l, b, c]*Tba[l, cp, bp]*phi1fct[l, cb, 1].conjugate())
                kh.set_matrix_element(fct_ccp, b, bp, bcharge, c, cp, ccharge)
        # --------------------------------------------------

    def generate_current(self):
        E, Tba = self.qd.Ea, self.leads.Tba
        phi1fct, phi1fct_energy = self.phi1fct, self.phi1fct_energy

        si = self.si
        ncharge, nleads, statesdm = si.ncharge, si.nleads, si.statesdm

        phi1 = self.phi1
        current = self.current
        energy_current = self.energy_current

        kh = self.kernel_handler
        for charge in range(ncharge-1):
            ccharge = charge+1
            bcharge = charge
            for c, b in itertools.product(statesdm[ccharge], statesdm[bcharge]):
                cb = si.get_ind_dm1(c, b, bcharge)

                for l in range(nleads):
                    current_l, energy_current_l = 0, 0

                    for bp in statesdm[bcharge]:
                        if not kh.is_included(bp, b, bcharge):
                            continue
                        phi0bpb = kh.get_phi0_element(bp, b, bcharge)

                        cbp = si.get_ind_dm1(c, bp, bcharge)
                        fct1 = phi1fct[l, cbp, 0]
                        fct1h = phi1fct_energy[l, cbp, 0]

                        phi1[l, cb] += Tba[l, c, bp]*phi0bpb*fct1
                        current_l += Tba[l, b, c]*Tba[l, c, bp]*phi0bpb*fct1
                        energy_current_l += Tba[l, b, c]*Tba[l, c, bp]*phi0bpb*fct1h

                    for cp in statesdm[ccharge]:
                        if not kh.is_included(c, cp, ccharge):
                            continue
                        phi0ccp = kh.get_phi0_element(c, cp, ccharge)

                        cpb = si.get_ind_dm1(cp, b, bcharge)
                        fct2 = phi1fct[l, cpb, 1]
                        fct2h = phi1fct_energy[l, cpb, 1]

                        phi1[l, cb] += Tba[l, cp, b]*phi0ccp*fct2
                        current_l += Tba[l, b, c]*phi0ccp*Tba[l, cp, b]*fct2
                        energy_current_l += Tba[l, b, c]*phi0ccp*Tba[l, cp, b]*fct2h

                    current[l] += -2*current_l.imag
                    energy_current[l] += -2*energy_current_l.imag

        self.heat_current[:] = energy_current - current*self.leads.mulst
# ---------------------------------------------------------------------------------------------------
",python,matlab,0.001407087812934418,0.0025369612836889897,0.01873885906610152,1.5057429466925586e-05,0.00013630229769440335,0.7205552154865288,0.2384176023621347,0.016891217324375908,0.0013016969370744425
"def mergeSortedArrays(arr1, arr2):
    l1 = len(arr1)
    l2 = len(arr2)
    l = l1 + l2
    arr = [0] * l

    i = 0
    j = 0
    k = 0

    while (i < l1 and j < l2):
        if (arr1[i] < arr2[j]):
            arr[k] = arr1[i]
            k = k + 1
            i = i + 1
        else:
            arr[k] = arr2[j]
            k = k + 1
            j = j + 1

    while (i < l1):
        arr[k] = arr1[i]
        k = k + 1
        i = i + 1

    while (j < l2):
        arr[k] = arr2[j]
        k = k + 1
        j = j + 1

    return arr

arr1 = [3, 5, 7] 
arr2 = [1, 2, 4] 

print(mergeSortedArrays(arr1, arr2))",python,python,0.0012606804074462058,0.007216099215572147,0.0021652985534227525,0.0007960944078436217,0.0010231118260555431,0.05676841285493429,0.923384669382042,0.000550242278033924,0.006835391074649378
"def find_max_element(arr):
  
  max = arr[0]
  
  for i in range(1, len(arr)):
    # compare current max with the next array element
    if arr[i] > max:
      max = arr[i]
  
  return max

arr = [2, 7, 1, 6, 5]
max_element = find_max_element(arr)
print(""Max element in the array:"", max_element)",python,matlab,9.311506838879529e-06,6.4119592126553355e-06,4.3870471072116324e-06,4.7503122970627407e-07,2.7529903593617936e-06,0.9540322618503208,0.04592977797744233,2.2169580834075195e-07,1.4399941680779258e-05
"a, b = 0, 1
 
# print the first 100 Fibonacci numbers
for i in range(100):
    print(a, end=' ')
    a, b = b, a + b",python,python,8.285451414057783e-05,3.272088539160589e-05,0.0004250393738750145,2.923050088684034e-05,0.000190900594890913,0.0005184894349052615,0.9984290135369251,0.00014823196731380214,0.0001435191916710097
"import requests
from bs4 import BeautifulSoup

def crawl(url):
 page = requests.get(url)
 soup = BeautifulSoup(page.text, ""html.parser"")
 with open(""document.txt"", ""w"") as f:
 f.write(soup.prettify())

crawl(""https://www.example.com"")",python,java,3.194310524507589e-16,0.0005392933960709099,0.002175269355593859,0.9972729974796877,2.1262245995391066e-08,1.08320612950206e-09,1.0179560607669507e-05,4.2687852487055385e-07,1.8109840624466798e-06
"class TreeNode:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

class TreeEncoder:
    def encode(self, root):
        if root is None: 
            return ""None""
        else: 
            left_tree = self.encode(root.left)
            right_tree = self.encode(root.right)
            return str(root.value) + ""("" + left_tree + "", "" + right_tree + "")""",python,sql,2.0147086053381836e-07,0.016032608424273207,0.0179516912821084,0.009531888659181791,5.081263953130701e-05,0.0031340459689301664,0.0010824513476743118,0.9521292640647776,8.703614266259555e-05
"#Function to check if a number is prime
def checkPrime(num):
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False
        return True
    else:
        return False

#Function to find prime numbers in given range
def getPrimeNumbersInRange(low,high):
    if low < high:
        for i in range(low,high + 1):
            if checkPrime(i):
                print(i,"" is a prime number"")

#Call the function
low = 30
high = 50
getPrimeNumbersInRange(low, high)",python,matlab,7.032040381477066e-07,4.539780248389701e-08,5.236469771667152e-06,2.5035330208707777e-07,0.0010294872587079428,0.982911744278939,0.016040026405014264,1.1353109605510175e-05,1.1535228189666673e-06
"def select_approved_rows():
   sql = ""SELECT * FROM table WHERE status = 'approved'""
   cur.execute(sql)
   return cur.fetchall()",sql,sql,0.0017128703627078926,0.0028965759251305574,0.002000794977966712,0.00013477191116166142,0.0011374862074789074,0.00017785420104256117,0.012847284554848086,0.9781249985847646,0.0009673632748988032
"import os
import sys
import argparse
import paddle.fluid as fluid


def Transpile(src_dir, dst_dir, model_filename, params_filename):
    place = fluid.CPUPlace()
    exe = fluid.Executor(place)

    inference_scope = fluid.core.Scope()
    with fluid.scope_guard(inference_scope):
        print ""Loading inference_program from "", src_dir
        [inference_program, feed_target_names,
         fetch_targets] = fluid.io.load_inference_model(src_dir, exe, model_filename, params_filename)

        inference_transpiler_program = inference_program.clone()
        # NOTE: Applying the inference transpiler will change the inference_transpiler_program.
        t = fluid.InferenceTranspiler()
        # Under the with statement, inference_scope is the global scope.
        t.transpile(inference_transpiler_program, place)

        #print inference_transpiler_program

        print ""Saving the optimized inference_program to "", dst_dir
        # There is a bug in fluid.io.save_inference_model, so we can use the following code instead.
        if not os.path.isdir(dst_dir):
            os.makedirs(dst_dir)
        model_path = os.path.join(dst_dir, model_filename)
        with open(model_path, ""wb"") as f:
            f.write(inference_transpiler_program.desc.serialize_to_string())
        fluid.io.save_persistables(exe, dst_dir, inference_transpiler_program, params_filename)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--src_dir', help='Source directory of inference model')
    parser.add_argument('--dst_dir', help='Dstination directory of inference model')
    parser.add_argument('--model_filename', default=None, help='The name of model file')
    parser.add_argument('--params_filename', default=None, help='The name of params file')
    args = parser.parse_args()
    Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename)


if __name__ == '__main__':
    main()
",sql,bash,0.4623262028273727,0.09108424456644593,0.009147539052287183,0.00014300862847787813,0.003993562421440202,2.560284250833583e-06,0.003862256352373959,0.08399985258269546,0.3454407732846559
"import random

def get_available_positions(Board):
    available_positions = []
    for i in range(3):
        for j in range(3):
            if Board[i][j] == ' ':
                available_positions.append((i, j))
    return available_positions

def is_game_over(Board, depth):
    if depth == 0:
        return True

    for i in range(3):
        if (Board[i][0] == Board[i][1] == Board[i][2] and Board[i][0] != ' '):
            return True
        elif (Board[0][i] == Board[1][i] == Board[2][i] and Board[0][i] != ' '):
            return True
    if (Board[0][0] == Board[1][1] == Board[2][2] and Board[0][0] != ' ') or (Board[2][0] == Board[1][1] == Board[0][2] and Board[2][0] != ' '):
        return True

    available_positions = get_available_positions(Board)
    if len(available_positions) == 0:
        return True

    return False

def get_next_move(Board, player, depth):
    best_position = None
    best_score = float('-inf')
    if player == 'X':
        player2 = 'O'
    else:
        player2 = 'X'

    available_positions = get_available_positions(Board)

    for position in available_positions:
        Board[position[0]][position[1]] = player
        score = minimax(Board, player2, depth-1)
        Board[position[0]][position[1]] = ' '
        if score > best_score:
            best_score = score
            best_position = position
    return best_position

def minimax(Board, player, depth):
    if is_game_over(Board, depth):
        if player == 'X':
            return -1
        elif player == 'O':
            return 1
        else:
            return 0

    best_score = float('-inf')
    if player == 'X':
        player2 = 'O'
    else:
        player2 = 'X'
    available_positions = get_available_positions(Board)
    for position in available_positions:
        Board[position[0]][position[1]] = player
        score = minimax(Board, player2, depth-1)
        Board[position[0]][position[1]] = ' '
        best_score = max(score, best_score)
    return best_score

board = [[' ', ' ', ' '],
 [' ', ' ', ' '],
 [' ', ' ', ' ']]
player = 'X'
depth = 5

next_move = get_next_move(board, player, depth)
print(next_move)",python,python,0.0026520373278510474,0.007958257326230067,0.0056296987271373675,0.00023898483827910848,0.0013399494734086111,0.033728661668325846,0.9104039163007938,0.03447334467685365,0.0035751496611204814
"def main():
 print(""Hello World"")
 
if __name__ == ""__main__"":
 main()",python,bash,0.9983838318297841,2.460160708333138e-06,2.9039777054931493e-06,1.8976853598935865e-17,3.2254970852775715e-05,2.4496226049242307e-09,0.0015772391169291123,1.1799048604117313e-06,1.2758953715019266e-07
"import string
import random

def generate_random_string(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))

random_string = generate_random_string(10)
print(random_string)",sql,sql,1.1303939997385984e-08,5.136205414871233e-07,8.290158664487783e-07,2.4736986764543497e-05,4.116554097401026e-09,2.4627524663118467e-07,0.0007418390750477861,0.9992317282021231,9.140391607776855e-08
"def hex_to_binary(hex_str):
    # convert hex to int 
    num = int(hex_str, 16)
    # convert int to binary string
    bin_str = bin(num)[2:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""10100010""",python,java,1.2443469316347125e-06,3.2869235315692488e-09,6.419683700760145e-08,0.9999929537902128,1.5537835612722533e-09,5.873245864339109e-13,5.693149371493004e-06,2.253687263994709e-08,1.713848003193234e-08
"def print_square(size): 

    # loop to print size number of lines 
    for _ in range(size): 

        # print stars on each line 
        print(""*"" * size) 

if __name__ == '__main__':
    size = 8
    print_square(size)",python,python,0.0005119692272330369,0.002222792275721703,0.014182585370549335,6.501137156429758e-05,0.0007010207348552954,0.020043973681800383,0.9476557377346504,0.011235305653173261,0.0033816039504524584
"#
# A module capable of changing alphabet letter cases.
#
# It uses very generic Python functionality to ensure
# backward compatibility.
#
#
# The programme processes a set of characters by default
# If no character is entered for processing, the programme
# simply exists. This can be turned off by setting 'a' to 1
# (for all vowels) or 2 (for all consonants).
# 
#
#

import os;
import sys;
import re;
import string;
from re import sub;


#
#! Get parsed arguments
#
def get_parsed_args():
        
    # Pre-allocate
    parser = """";
    args = """";
    if sys.version_info < (2,7):
        from optparse import OptionParser
        parser = OptionParser();
        parser.add_option(""-i"", ""--input_path"", type=str, help=""Input file path with extension"");
        parser.add_option(""-o"", ""--output_path"", type=str, help=""Output file path with extension"");
        parser.add_option(""-a"", ""--all_chars"", type=int, help=""Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2"", default=0);
        parser.add_option(""-c"", ""--c"", type=str, help=""Characters to process (comma-separated list, no whitespace)"", default="""");

    else:
        from argparse import ArgumentParser
        parser = ArgumentParser();
        parser.add_argument(""-i"", ""--input_path"", type=str, help=""Input file path with extension"");
        parser.add_argument(""-o"", ""--output_path"", type=str, help=""Output file path with extension"");
        parser.add_argument(""-a"", ""--all_chars"", type=int, help=""Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2"", default=0);
        parser.add_argument(""-c"", ""--c"", type=str, help=""Characters to process (comma-separated list, no whitespace)"", default="""");
    
    args = parser.parse_args();
    args = vars(args);

    ##print(option)
    ##print(args)
    ##print(type(option))
    ##print(option.c)
    ##print(option.all_chars)
    ##print(option.input_path)
    ##print(option.output_path)

    # Safety assertions
    assert (args['all_chars'] >= 0 and args['all_chars'] <= 2), \
           ""Invalid value! programme exiting!\n type python switchLetterCase.py -h for information on arguments""

    # If nothing to process, programme will exit
    if (args['all_chars'] == 0) and \
       ((args['c'] == """") or \
        (args['c'] == "" "") or \
        args['all_chars'] is None or \
        all([x is ',' for x in args['c']])):
        
        print("".....Nothing to process, programme exiting.\n\n"");
        sys.exit(0);

    return args;


#
#! Main processor function
#

def process_files(args):

    
    try:
        # Get handlers
        f1 = open(args['input_path'], 'r')
        f2 = open(args['output_path'], 'w');

        # Initial setup
        line_to_write = """"       
        if (args['all_chars'] == 0):    # process characters in the list

            gg = """".join(args['c'])

            for line in f1:
                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];
                line_to_write = """".join(g);
                f2.write(line_to_write);

        elif (args['all_chars'] == 1):    # process vowels only

            vowels = sub('[^aeiou]+','',string.ascii_lowercase)

            for line in f1:
                g = [y.upper() if y in vowels else y.lower() if y.upper() in vowels else y for y in line];
                line_to_write = """".join(g);
                f2.write(line_to_write);       

        elif (args['all_chars'] == 0):    # process consonants in the list

            consonants = sub('[aeiou]+','',string.ascii_lowercase)

            for line in f1:
                g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line];
                line_to_write = """".join(g);
                f2.write(line_to_write);

        # Print some INFO    
        print(""All characters toggled! Terminating programme......\n\n"");

        f1.close();
        f2.close();
          
    except (Exception, BaseException, IOError, ValueError, WindowsError) as e:        
        print(e);

    finally:
        del f1, f2

",sql,sql,0.13753010731123966,0.049760518797712525,0.11305875967355916,0.0030072550403137817,0.005126206237293512,0.00018063036391618184,0.00551138113361071,0.6743160134691881,0.011509127973166403
"def get_strings_with_prefix(strings, letter):
    result = []

    for string in strings:
        if string.startswith(letter):
            result.append(string)
    return result

data = [""apple"", ""banana"", ""kiwi"", ""melon""]

result = get_strings_with_prefix(data, ""a"")
print(result)",python,python,7.48740932457326e-09,0.04475633921700128,5.8607261696874196e-05,0.12985938444743997,1.866810586322224e-09,3.3222435432529696e-06,0.8198149400385595,0.005479612681722854,2.7784755816135346e-05
"my_list = [1, 2, 3, 4, 5] 
new_list = [x**2 for x in my_list if x % 2 == 0]",matlab,matlab,0.0002977466677345736,0.0005021917087849384,0.0007239441744845439,4.315902969070516e-05,8.649449389482073e-05,0.9054096558065826,0.09217696725136704,0.0002712262216365907,0.0004886146458239908
"import random 
 
num = random.randint(1,10)
guess = 0
attempts = 0
 
while guess != num and attempts < 3:
    guess = int(input(""Guess a number between 1 and 10: ""))
    attempts += 1
    if guess == num:
        print(""You guessed correctly in"", attempts, ""attempts"")
    elif guess > num:
        print(""Too High"")
    else:
        print(""Too Low"")
if guess != num:    
    print(""You failed to guess the number"")",python,python,0.0006166767531847223,0.00023575836192483716,0.00185416802125351,0.00030495946339129375,0.00013422905503426922,0.03351333952168604,0.9575309425400047,0.0011052408188235348,0.004704685464696881
"import sys

arg1 = sys.argv[1]
arg2 = sys.argv[2]

if arg1 == arg2:
 print('equal')
else:
 print('not equal')",python,python,0.013868928970115676,0.1647771989709936,0.019580505732210974,0.00046374388925981603,0.003005131369167404,0.01586130384590351,0.7548650133187892,0.02071031727819993,0.006867856625359737
"def max_min(list):  
    max_element = 0
    min_element = list[0] 
     
    for num in list:
        if num > max_element: 
            max_element = num 
        if num < min_element:
            min_element = num 
     
    print(""Max element is: "" + str(max_element)) 
    print(""Min element is: "" + str(min_element)) 
     
#test list 
list = [23, 12, 56, 72, 9, 10]
max_min(list)",python,matlab,1.1092207487708655e-09,8.838645728575116e-12,5.254408313519779e-09,3.366313454186824e-10,7.874973569655287e-09,0.9999999478545833,3.372140663021917e-08,2.0778678544304436e-09,1.7620692446459156e-09
"class Fibonacci:
    def __init__(self, n):
        self.n = n
        self.fib = []
    
    def generate_list(self):
        if self.n <= 0:
            print('Invalid input.')
        elif self.n == 1:
            self.fib = [0]
        else:
            self.fib = [0,1]
            for i in range(2,self.n):
                self.fib.append(self.fib[i-2] + self.fib[i-1])
        return self.fib",python,python,0.0002245531979017757,0.006609630685328797,0.19430924048631332,3.212104663068515e-06,2.2372818994497703e-05,0.00012605462304643902,0.6069738911253196,0.1916049584517536,0.00012608650667911706
"dict = {
    ""car"" : ""Ford"", 
    ""bike"" : ""Honda""
}",css,java,0.0010053756783183793,0.022959725476107664,0.0046037545643256095,0.898680968570332,2.7724742169676604e-06,0.00234891324474707,0.06626596071418939,0.0005321381885074329,0.0036003910892554894
"list_nums = [1, 2, 3, 4, 5]

average = lambda list_nums: sum(list_nums) / len(list_nums)

print(average(list_nums))",python,python,0.008744764161935628,0.03688592796641441,0.024361323447283374,0.004783150771710863,0.0055428756711070545,0.006547449348030058,0.8953678444403051,0.004095659440894329,0.013671004752319105
"def factorial(n):
    if n < 0:
        return None
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

num = 7
print('factorial of {} is {}'.format(num, factorial(num)))",python,python,6.570763001365499e-07,1.5294407697396137e-07,1.2759512740929051e-06,4.901431422314718e-08,1.3233553468405975e-06,0.01411776772341783,0.9858713786204165,6.453508315059848e-06,9.418065382195771e-07
"def get_min_max(numbers):
 max_num = max(numbers)
 min_num = min(numbers)
 new_list = []
 for i in numbers:
  if i == max_num or i == min_num:
   new_list.append(i)
 return new_list",python,python,0.0005775668950447055,0.0006961779205981295,0.0077060300397396465,0.05081351213521288,0.0018869352932213324,6.139602716674409e-06,0.9373449543763342,8.942815105015146e-05,0.0008792555860821936
"total = 0
for number in range(1, 21, 2):
    total += number    
print(f""Sum of the first 10 odd numbers is {total}"")",python,python,8.17458608503548e-06,2.3095964585891763e-05,0.0005674316063098892,0.1151807564583013,7.315473231514087e-07,6.591914339776365e-05,0.8837410836455929,1.9959900391854536e-05,0.0003928471480124307
"import random

def generate_random_number(number):
    random.seed(number)
    rand_number = random.randint(1, number**2)
    return rand_number",python,python,1.0352521691967764e-05,4.212669443005702e-05,1.2528323515596227e-05,2.414997911433683e-07,2.1816519277238434e-06,1.0953926524519116e-07,0.9985308812933443,0.001398590568106769,2.9879079272243615e-06
"def sort_list(numbers):
    for i in range(len(numbers)-1):
        for j in range(i+1, len(numbers)):
            if numbers[i] > numbers[j]:
                numbers[i], numbers[j] = numbers[j], numbers[i]
    return numbers",python,python,4.452961978546761e-06,2.397598176487909e-06,4.822859696985603e-05,0.3096062871708791,5.364247550386507e-05,3.996642791248822e-09,0.6902619780063036,1.6768638779461668e-05,6.240554766347005e-06
"def length_longest_word(s):
    longest_word = """"
    longest_len = 0
  
    words = s.split()
    for word in words:
        if len(word) > longest_len:
            longest_len = len(word)
            longest_word = word
  
    return len(longest_word)
  
result = length_longest_word(string)
print(result)",python,python,0.00012020667024826579,0.0005756151918087165,0.0003487684953935925,3.0050744212017785e-05,8.092496179849601e-07,9.146515888545762e-06,0.9965466419688337,0.0023591281425851453,9.633021411912322e-06
"#!/usr/bin/env python3
#
#   Copyright (c) 2014 Shubham Chaudhary <me@shubhamchaudhary.in>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import os.path
import platform
import random
import re
import sys
import time

if sys.version_info >= (3,):
    import urllib.request as urllib2
    import urllib.parse as urlparse
    import urllib.error as urlerror
else:
    import urllib2
    import urlparse


def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''
    return [atoi(c) for c in re.split('(\d+)', text)]

def notify_user(message=None):
    ''' Notify the user about a particular event with given message
    '''
    if not message:
        message = 'Notification!!!'
    #print('-'*len(message))
    print('-'*int((len(message)-6)/2), 'NOTIFICATION', '-'*int((len(message)-6)/2))
    print(message)

def get_page_data():
    ''' Get page data as string from server
    '''
    print('Sending request to servers of Colors . . .')
    full_url = 'http://colors.in.com/in/biggboss'
    full_url = 'http://colors.in.com/in/biggboss/videos/episodes'
    # Send request
    try:
        #res.geturl(), .url=str, .status=200, .info=200, .msg=OK,
        response = urllib2.urlopen(full_url)
    except urlerror.HTTPError as exep:
        print('The server couldn\'t fulfill the request.',
              'Error code: ', exep.code)
    except urlerror.URLError as exep:
        print('We failed to reach a server.')
        print('Reason: ', exep.reason)
    else:
        # everything is fine
        #if verbose:
        print('Data received, Decoding . . .')
        web_page = str(response.read()) # More pythonic than .decode('utf-8')
        return web_page

def get_link(web_page):
    ''' Get Latest episode link
    '''
    month = time.strftime('%B')
    new_link_pattern = r'http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episode\d\d-' + month.lower() + r'-\d+\w\w-2014.*?.html'
    #print('Checking: ', new_link_pattern)
    link_reg = re.findall(new_link_pattern, web_page)
    if link_reg:
        #print(link_reg.group())
        success_set = sorted(set(link_reg), key=natural_keys)
        return success_set[-1]

def get_episode_list(web_page, new_episode_pattern=None):
    ''' Get latest episode list from webpage
    '''
    if not new_episode_pattern:
        ### PATTERN used by colors
        #<li><a title=""Bigg Boss 8, Full Episode-8, 29th September, 2014""
        #href=""http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episode8-29th-october-2014-69087-2.html#nav"">
        #http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episode23-november-14th-2014-10101036-2.html#nav
        #Bigg Boss 8, Full Episode-8, 29th September, 2014</a></li>
        #Bigg Boss 8, Full Episode-10, October 1st, 2014</a></li>
        new_episode_pattern = time.strftime(r'%B-\d+\w\w').lower()
        month = time.strftime('%B')
        new_episode_pattern = r'Bigg Boss \d+, Full Episode-\d+, ' + month + r' \d+\w\w, 2014';
        #new_episode_pattern = r'Bigg Boss \d+, Full Episode-\d+'

    print('Checking for new episode with pattern:', new_episode_pattern)
    success = re.findall(new_episode_pattern, web_page)
    success_set = sorted(set(success), key=natural_keys)
    return success_set


def check_biggboss_episode(new_episode_pattern=None, verbose=False):
    ''' Check for the latest bigg boss episode
    '''
    web_page = get_page_data()
    if verbose:
        print('Page Received:\n', web_page)
    success_set = get_episode_list(web_page, new_episode_pattern)
    # Parse for success or failure
    print('Found:')
    for item in success_set:
        print('\t', item)
    current_date = int(time.strftime('%d'))
    current_hour = int(time.strftime('%H'))
    current_month = time.strftime('%B')

    if (current_month.lower() in success_set[-1].lower() and (
                (str(current_date) in success_set[-1] and
                    (current_hour >= 20)) or
                (str(current_date-1) in success_set[-1] and
                    (current_hour >= 0 and current_hour < 20))
                )
            ):
        msg = 'Found new episode online'
        notify_user(msg)
        latest_link = get_link(web_page)
        if latest_link:
            print('Here\'s the link: ', latest_link)
    else:
        print('No new episode right now')

def main():
    ''' Main function - Parse command line arguments
    '''
    from argparse import ArgumentParser
    parser = ArgumentParser(prog='BiggBoss-checker')
    parser.add_argument(""-p"", ""--pattern"", type=str, dest=""pattern"",
                        help=""Search for this pattern instead of default"")
    parser.add_argument(""-v"", ""--verbose"", dest=""verbosity"",
            action='store_true', default=False, help='Show verbose output')
    args = parser.parse_args()

    # Check input
    try:
        check_biggboss_episode(args.pattern, verbose=args.verbosity)
    except:
        raise
    return 0

if __name__ == '__main__':
    try:
        main()
        if os.name == 'nt' or platform.system() == 'Windows':
            input('Press Enter or Close the window to exit !')
    except KeyboardInterrupt:
        print('\nClosing garacefully :)', sys.exc_info()[1])
    except urlerror.HTTPError:
        print('HTTP Error:', sys.exc_info()[1])
    except SystemExit:
        pass
    except:
        print('Unexpected Error:', sys.exc_info()[0])
        print('Details:', sys.exc_info()[1])
        raise
",python,html,0.00014813538420090273,0.007003252606001938,0.9782495248837476,0.0008402183303158818,1.9062963768924814e-06,5.713469419948106e-09,0.0007463154052452679,0.000687237162526898,0.012323404218115251
"words = [""carpet"", ""chair"", ""table"", ""floor""]

categories = {}
for word in words:
    if word in [""carpet""]:
        categories[""furnishing""] = categories.get(""furnishing"", []) + [word]
    elif word in [""chair"", ""table""]:
        categories[""furniture""] = categories.get(""furniture"", []) + [word]
    elif word in [""floor""]:
        categories[""flooring""] = categories.get(""flooring"", []) + [word]
    else:
        categories[""other""] = categories.get(""other"", []) + [word]

print(categories)",python,python,0.03315337706619925,0.08385160865954758,0.00038926914302165184,8.144375803716273e-05,0.0046806802523855625,0.013466074628530347,0.7929030386178054,0.01130138348421738,0.06017312439025569
"import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Embedding, GRU, Dropout

def build_model(vocab_size, embedding_dim):
    model = tf.keras.Sequential()
    # Embedding layer
    model.add(Embedding(vocab_size, embedding_dim, input_length=500))
    # GRU layer
    model.add(GRU(128, dropout=0.25))
    # Dropout layer
    model.add(Dropout(0.5))
    # Output layer
    model.add(Dense(vocab_size, activation='softmax'))
    return model",python,python,0.0847721762809541,0.00529931385375145,0.06988329310016224,0.026399501541169615,0.0004513958883401367,6.641921657054772e-06,0.8119450925505338,4.144715070315921e-05,0.001201137712728352
"def delete_divisible_by_5(my_list):
  new_list = []
  for i in my_list:
    if i % 5 != 0:
      new_list.append(i)
  return new_list

# Test
my_list = [1, 10, 15, 20, 25]

new_list = delete_divisible_by_5(my_list)

print(""List after deletion: "" + str(new_list))",python,python,0.00044657698872716195,0.003767047390907935,0.0024587675310367373,9.481455036917037e-05,0.00035305639934061594,0.024071047012854237,0.9671925919540677,0.001091554578469694,0.0005245435942267627
"def substrings(input_string): 
    # Get the length of the string 
    length = len(input_string) 
    # List of all substrings  
    substrings = []
    # Iterate over the length of the input string
    for i in range(length): 
        # Iterate over the length of the input string 
        # minus the start index
        for j in range(i, length): 
            # Get substring
            sub = input_string[i:j + 1] 
            # Add substring to the list
            substrings.append(sub) 

    return substrings

if __name__ == '__main__':
    output = substrings(""abcde"")
    print(output)",python,python,9.866693282909341e-05,0.0006449973086859197,0.0020270858034437647,0.038930930651988556,0.006428792503037697,9.685666817995495e-05,0.802493548740589,0.1428197794802313,0.006459341911014832
"def find_max_min(lst):
    if len(lst) == 1:
        return lst[0], lst[0]
    
    elif len(lst) == 2:
        return max(lst), min(lst)
    
    mid = len(lst)//2
    left_max, left_min = find_max_min(lst[:mid])
    right_max, right_min = find_max_min(lst[mid:])

    return max(left_max, right_max), min(left_min, right_min)

max_num, min_num = find_max_min([5, 3, 8, 2, 10, 1])

print(""The maximum number is"", max_num)
print(""The minimum number is"", min_num)",python,python,1.3464996032859689e-05,0.00010037989664947892,6.643151324475773e-05,1.6478145523169862e-06,1.800107055240482e-05,2.6303616542757727e-07,0.9997459517182119,2.323855450330211e-05,3.062140008753956e-05
"def confidence_voting(predictions):
 classifier_sum = 0
 total_confidence = 0
 for classifier, prediction in predictions.items(): 
     classifier_sum += prediction 
     total_confidence += (classifier_sum * prediction)
 return total_confidence/classifier_sum",python,python,0.011165080945779083,0.03491600133895277,0.004957396536350223,0.0003752256855476255,0.005389531895715225,0.008506929339114401,0.9336364083705612,0.00024283031208672404,0.0008105955758928128
"# Frequency of each character in the string

string = ""Code Generation Task""

for i in string:
    print(""Number of Occurrence of"", i, ""is"", string.count(i))",python,java,4.681570058731535e-13,1.5489837456815666e-07,1.75264814589417e-07,0.999900054394552,1.4454921103532473e-11,3.785711523379329e-09,7.032492938326306e-05,2.7843090799393707e-05,1.4436214416165646e-06
"def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

arr = [7, -3, 10, 13, -6]
target = -3
print(""Index of"", target, "" is "", linear_search(arr, target)) # 1",python,python,1.3099880777948323e-05,4.006945329812665e-05,3.989831009065274e-05,7.704120940146396e-06,2.2941181605860493e-05,0.21939008099090337,0.780454476670735,5.5344190598929325e-06,2.6194972589017024e-05
"import random 
  
def shuffle_list(arr): 
      
    # Shuffle given list 
    random.shuffle(arr) 
    return arr 
  
# Driver function 
arr = [1,2,3,4,5]

print(""Initial list: \n"",arr)
print(""\nFinal list: \n"",shuffle_list(arr))",python,python,7.624863763065703e-05,0.0007151165102980115,0.00013132495919428438,4.118464606432339e-05,0.002240257930946848,0.028348078202159708,0.9670874786068442,0.0012838338805697105,7.647662629226537e-05
"""""""
Generate a visual ASCII art in Python
""""""

def generate_ascii(drawing): 
    height = len(drawing) + 2
    width = len(drawing[0]) + 2

    def get_ascii_cell(cell):
        # Define the character in the ASCII art
        if cell == '*':
            return '*'
        if cell == ' ':
            return ' '
        if cell == '.':
            return '.'

    # Render the picture as ASCII
    result = ''
    for row in range(height):
        for col in range(width):
            if row == 0 or row == height - 1 or col == 0 or col == width - 1:
                result += '*'
            else:
                result += get_ascii_cell(drawing[row-1][col-1])
        result += '\n'
    return result

if __name__ == '__main__':
    drawing = [['*', ' ', '*'],
               [' ', '*', ' '],
               ['*', ' ', '*']]
    print(generate_ascii(drawing))",python,python,0.005339155014389537,0.0023730545362711125,0.0005296201523733489,6.825659020297182e-06,0.0006612537475081188,0.007213944352395571,0.9728618952697035,0.00035133060795355497,0.010662920660385058
"# define the algorithm 
def find_min_num(nums):
 # declare a variable to hold the minimum number
 min_num = float('inf')

 # iterate over the numbers 
 for num in nums: 
 # if the number is smaller than the current minimum 
 if num < min_num: 
 # replace it 
 min_num = num
 
 # once out of the loop, return the minimum number 
 return min_num

# call the algorithm 
min_num = find_min_num([12, 24, 9]) 
print(min_num) # output: 9",python,typescript,0.003190463986372912,0.0006144838318847244,0.0047615942750245345,0.0031706388316919847,0.38208117451964263,0.024061046810160778,0.06055896431515925,0.00816185514596612,0.513399778284097
"""""""
Write a Python program to parse a given string and extract the domain name
""""""

import re

def extract_domain_name(string):
    domain_name = ''
    matches = re.findall(r""://([^/]+)/?"", string)
    if len(matches) > 0:
        domain_name = matches[0]
    return domain_name

string = 'https://www.google.com/search?q=google+search'
domain_name = extract_domain_name(string)

print(""The domain name extracted is:"", domain_name)",python,java,1.044680103852065e-13,4.197097520754269e-09,1.3658687400830099e-08,0.9999997029026865,5.6178670016003665e-14,1.961574544105018e-11,2.5665082549008414e-07,1.6205870910390814e-08,6.365055665948521e-09
"import numpy as np
import matplotlib.pyplot as plt

from keras.models import Sequential
from keras.layers import Dense

# create model
model = Sequential()
model.add(Dense(units=200, input_dim=2, activation='relu'))
model.add(Dense(units=200, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))

# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Fit the model
model.fit(X, y, epochs=1500, batch_size=128)

# evaluate the model
scores = model.evaluate(X, y)
print(""\n%s: %.2f%%"" % (model.metrics_names[1], scores[1]*100))",python,bash,0.727786680615067,0.0010044206244626793,0.03059607935443461,0.0007783837288708821,6.4734293691688576e-06,9.003207288090631e-07,0.23564252915016964,2.8724832421340737e-08,0.004184504052064829
"import requests

url = 'https://www.nytimes.com/2020/11/19/us/denver-police-protest.html'
response = requests.get(url)

if response.status_code == 200:
 title = response.text.split(""<title>"")[1].split(""</title>"")[0]
 print(title)",python,html,4.800644047591107e-14,0.017220662006725222,0.9558110516984638,0.026940329393461627,2.5218440586417236e-07,1.8257554476564046e-07,2.5535709436255624e-05,1.7889604637830305e-06,1.974714505288244e-07
"import requests

api_url = 'http://example.com/api'

# Make a get request
response = requests.get(api_url)

# Check status code
if response.status_code == 200:
 # Get the response data as JSON
 data = response.json()

 # Do something with the data
 print(data)

# Make a post request
data = {
 'name': 'John Doe'
}

response = requests.post(api_url, data=data)

# Check status code
if response.status_code == 201:
 # Get the reponse data as JSON
 data = response.json()

 # Do something with the data
 print(data)",css,css,8.996339827230084e-07,0.9984349178139295,6.06967783404048e-05,1.3625784209283932e-06,2.40213757149229e-06,2.709717306023308e-07,0.0001521267863439694,2.0746277202504194e-05,0.0013265770224777076
"def lcs(X , Y): 
    # find the length of the strings 
    m = len(X) 
    n = len(Y) 
  
    # declaring the array for storing the dp values 
    L = [[None]*(n+1) for i in range(m+1)] 
  
    """"""Following steps build L[m+1][n+1] in bottom up fashion 
    Note: L[i][j] contains length of LCS of X[0..i-1] 
    and Y[0..j-1]""""""
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0 : 
                L[i][j] = 0
            elif X[i-1] == Y[j-1]: 
                L[i][j] = L[i-1][j-1]+1
            else: 
                L[i][j] = max(L[i-1][j] , L[i][j-1]) 
  
    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] 
    return L[m][n] 
  
# Driver program to test the above function 
X = ""abcdaf""
Y = ""zbcdf""

print(""The length of LCS is "", lcs(X, Y))",python,javascript,0.0038921822844845888,0.00012371692719165603,0.0006202942829569622,4.885701357246132e-05,0.665894430597156,0.002479761976979022,0.2459722227162425,0.030759349849139316,0.0502091843522774
"def sort_list(numbers): 
 numbers.sort()
 return numbers

print(sort_list([4, 3, 2, 5, 1]))",python,python,6.375821491406064e-05,0.00031938895424980074,0.00039359509434654067,0.06444907099016255,0.0006600999296331297,2.691077165557219e-09,0.9339062931603889,0.000129454940807382,7.833602442068392e-05
"def merge_unique_sorted_lists(list1, list2):
	merged_list = list1+list2
	unique_list = list(set(merged_list))
	unique_list.sort()
	return unique_list",python,python,0.0007600982686289737,0.004149455402289974,0.0019552416264822666,0.00022134564365942566,0.0006146374800618426,0.00034825429953546055,0.9895641835025475,0.0010580215521404188,0.0013287622246541302
"from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Product(Base):
 __tablename__ = 'product'
 id = Column(Integer, primary_key=True)
 name = Column(String)

class Employee(Base):
 __tablename__ = 'employee'
 id = Column(Integer, primary_key=True)
 name = Column(String)

class Customer(Base):
 __tablename__ = 'customer'
 id = Column(Integer, primary_key=True)
 name = Column(String)

class Purchase(Base):
 __tablename__ = 'purchase'
 id = Column(Integer, primary_key=True)
 product_id = Column(Integer, ForeignKey('product.id'))
 employee_id = Column(Integer, ForeignKey('employee.id'))
 customer_id = Column(Integer, ForeignKey('customer.id'))",python,java,0.00020636853188372257,0.01111116345316656,0.058476343637380815,0.8655064980832327,6.865362459046743e-07,2.502549298145592e-05,0.0621303814891422,0.001958026962012184,0.0005855058139544206
"def populateDict(lst):
    my_dict = {}
    for i in lst:
        my_dict[i] = i
    return my_dict

my_numbers = [1, 2, 3, 4, 5]
my_dict = populateDict(my_numbers)
print(my_dict)",python,python,0.0007347093096245534,0.41797758949337893,0.0007101087999729077,0.00013681130475090393,0.00028661113848399693,0.000920688293368164,0.5776453061990018,0.0004237596317208302,0.0011644158296979232
"def findLongestWord(string):
 # Split the string into an array of words
 words = string.split("" "")

 # Initialize the longest word as empty string
 longestWord = """"

# Iterate over the words and keep track of the longest one
 for word in words:
 if len(word) > len(longestWord):
 longestWord = word

 # Return the longest word
 return longestWord

# Test
string = ""I love learning new things""
longestWord = findLongestWord(string)
print(""Longest word is "" + longestWord)",python,java,3.1569386263286055e-06,7.44123257075395e-05,0.0018258112585232533,0.7188067060438296,1.740649773064683e-05,1.7642991528864256e-06,0.20943185908069462,0.06972346968219634,0.00011541387353896024
"# Function to reverse each word
def word_reverse(s) : 
    # Splitting each word
    words = s.split() 
    rev_str = """" 
    for word in words: 
        # Reversing each word
        rev_str += word[::-1] + "" ""
    return rev_str",python,python,0.04506067427722694,0.012996940674769883,0.022120800311179724,4.409540264511851e-05,0.152391815881585,0.0013783299193572754,0.7125065296704493,0.05323695401969954,0.0002638598430872231
"def remove_duplicates(lst): 
  non_duplicate_lst = [] 

  for i in lst: 
    if i not in non_duplicate_lst: 
      non_duplicate_lst.append(i) 

  return non_duplicate_lst 

lst = [1, 4, 2, 5, 6, 4, 1, 5]
print(remove_duplicates(lst))",python,python,0.00012886147182678248,0.0008845131627965693,0.0005836228467839256,7.613648687631326e-06,3.537885020837121e-05,0.019112242319960875,0.978647462872878,0.0004368115151953408,0.00016349331166261142
"import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# load the dataset
sentiments = pd.read_csv('sentiment_data.csv')

# define the input data
X = sentiments['text']

# define the labels
y = sentiments['sentiment']

# vectorize the words
cv = CountVectorizer()
X = cv.fit_transform(X)

# create and train the model
model = MultinomialNB()
model.fit(X, y)

# test the input
input = 'The movie was great'
input = cv.transform([input])
result = model.predict(input)[0]

# print the result
print(result)",python,bash,0.7573599461332486,0.010491394616962432,0.00010752075660056391,1.8355177293944013e-07,2.3115925185304234e-05,1.3314533116389204e-07,0.23116879023082854,1.0128426786021084e-06,0.0008479027973919486
"def findMode(arr): 
 max_count = 1 
 mode = arr[0] 
 count = 1 
  
 for i in range(1,len(arr)): 
 if (arr[i] == arr[i - 1]): 
 count = count + 1 # increment count
 if (count > max_count): 
 max_count = count # update max_count 
 mode = arr[i] 
 else: 
 count = 1 # reset count 
  
 return mode 

# Driver program 
arr = [2, 4, 3, 3, 5, 3, 7] 
print(findMode(arr)) # prints 3",sql,python,0.0007496427323830639,0.00028352356173838784,4.7349779726865936e-05,1.8111588089480797e-06,9.509764520576139e-06,0.17529552963682102,0.8235752862923112,2.0036214188459445e-05,1.7310859501331654e-05
"def find_longest_common_subsequence(s1, s2):
    # Create a two dimensional array 
    arr = [[0 for i in range(len(s2) + 1)]  
           for j in range(len(s1) + 1)] 
    
    # Iterate over the strings 
    for i in range(1, len(s1) + 1): 
        for j in range(1, len(s2) + 1): 
    
        # if the characters are same, update the 
        # value at current index by adding 1 to 
        # value at the diagonal left 
            if s1[i - 1] == s2[j - 1]: 
                arr[i][j] = arr[i - 1][j - 1] + 1
            else: 
        # If not same, take the maximum 
        # value of the cell to the left 
        # and cell above 
                arr[i][j] = max(arr[i - 1][j], 
                                arr[i][j - 1])

    # return the last element of the 
    # table which is our result 
    return arr[len(s1)][len(s2)]",sql,matlab,8.631838808790668e-06,2.5762250140977876e-05,1.0825521100942316e-05,7.738175657670542e-07,4.881569608831016e-05,0.9638109234566067,0.014110320426789981,0.00012612321555940297,0.021857823777338983
"for i in range(1, 11):
    print(i)",python,matlab,1.2415972227325905e-13,1.6911048586434646e-18,1.1057399553217356e-12,5.510266050076294e-15,7.48076876636178e-15,0.999998444523721,1.5554749300339005e-06,3.862174504852572e-14,6.723799180726865e-14
"def removeVowels(inputString):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

    outputString = """"
    for char in inputString:
        if char not in vowels:
            outputString += char
    
    return outputString",python,python,0.0019472845191757721,0.009896916057973108,0.005143151574761951,9.958637237833045e-05,0.0010343854064894145,0.020942693838189846,0.9549125576326394,0.0036472370484252233,0.002376187549966865
"def gcd(a, b): 
 if(b == 0): 
  return a 
 return gcd(b, a%b) 

def main():
 a = 28 
 b = 15 
 print(gcd(a,b)) 

if __name__ == ""__main__"": 
 main() 

# Output
3",python,matlab,0.07120064622478835,0.013859191375682143,0.009280858243809965,0.0003414961633652833,0.0009904506973152927,0.8469444486937323,0.054921334505597136,0.002040432269410693,0.0004211418262989982
"def is_valid_mul_table(matrix):
 num_list = set()
 for row in matrix:
 for item in row:
 num_list.add(item)
 
 length = int(len(matrix) ** 0.5)
 if len(num_list) != (length ** 2):
 return False 
 for num in range(1,length ** 2 + 1):
 if num not in num_list:
 return False
 
 return True",python,python,6.0243235572870305e-05,1.036949166171173e-06,0.00022170896630512425,0.0003175173097234896,0.0012652161876071319,0.006233928554393337,0.9915605689624097,0.0003356572512576025,4.122583564649079e-06
"def remove_item(items, target):
    return [i for i in items if i != target]",python,python,0.00031421785223596804,0.04061960658292125,0.0018989938700359533,8.057715414344669e-05,0.002236399362840871,0.07465228583252559,0.8778013586562908,0.002323343818615563,7.321687039072328e-05
"def sort_list(lst):
  lst.sort(key = lambda x: x[1])
  return lst",python,python,7.043748704872782e-05,0.0017490544353031695,0.00018263382696846687,1.240863616274388e-05,4.7235343997108926e-05,2.974415981497881e-06,0.9977711406225934,0.00010759826858829652,5.651696335681675e-05
"import unittest

class TriangleTestCase(unittest.TestCase):
    def setUp(self):
        self.triangle1 = Triangle(2,3,4)
        self.triangle2 = Triangle(3,4,5)

    def test_area_triangle1(self):
        self.assertEqual(self.triangle1.area(), 2.9047)
        
    def test_area_triangle2(self):
        self.assertEqual(self.triangle2.area(), 6.0000)",python,python,0.00022270759637480286,0.02809066226954597,0.25280099842248094,4.891630174889735e-06,3.4922088367193095e-05,2.7261385814176975e-06,0.48465674202705594,0.23396780128867126,0.0002185485387475804
"def evaluate_expression(expression):
    try:
        result = eval(expression)
        print(result)
    except:
        print(""Error: invalid expression"")

evaluate_expression(""1+1"")",python,python,0.0002733236830374354,0.008052428991808986,0.002731887328936036,6.284434521749453e-05,0.00044727545916961185,0.00015344057599877387,0.9828602648411227,0.0029062992495399887,0.002512235525168942
"my_list = [x for x in range(0, 51) if x % 3 == 0]",matlab,matlab,1.0915556812076982e-08,2.6974340355221624e-10,3.49467722388427e-08,1.155293329279215e-09,9.960431830064298e-10,0.9999980952211216,1.8381630414650356e-06,5.02599754532178e-09,1.3306430398963288e-08
"""""""
Find the k-nearest neighbors of a given point
""""""
import numpy as np 
  
def knn(point, k, points): 
    distances = []
    for p in points:
        distances.append((((point[0] - p[0]) ** 2 + (point[1] - p[1]) **2) ** 0.5, p))
    distances.sort()
    neighbors = []
    for i in range(k): 
        neighbors.append(distances[i][1]) 
    return neighbors
  
if __name__ == ""__main__"": 
    # Array of points   
    points = np.array([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) 
    # Provided point 
    point = (1, 2)
    k = 3 
    print(knn(point, k, points))",python,matlab,0.012877839950130745,0.014663741691283087,0.00857973238826911,0.0002877202240476392,0.001081704605761939,0.4875645254073264,0.4574401827343522,0.0023359337580707903,0.015168619240758128
"from random import randint

class TicTacToeAgent:
 
 board = [[0,0,0],
 [0,0,0],
 [0,0,0]]
 
 def __init__(self):
 self.turn = 1
 
 def checkpattern(self):
 for i in range(3):
 if self.board[i][0]==self.board[i][1] and \
 self.board[i][1]==self.board[i][2] and \
 self.board[i][0]!=0:
 return True
 
 for j in range(3):
 if self.board[0][j]==self.board[1][j] and \
 self.board[1][j]==self.board[2][j] and \
 self.board[0][j]!=0:
 return True
 
 if self.board[0][0]==self.board[1][1] and \
 self.board[1][1]==self.board[2][2] and \
 self.board[0][0]!=0:
 return True
 
 if self.board[2][0]==self.board[1][1] and \
 self.board[1][1]==self.board[0][2] and \
 self.board[2][0]!=0:
 return True
 return False
 
 def turn(self,x,y):
 self.board[x][y] = self.turn
 self.turn = -self.turn
 
 def play(self):
 flag = 1
 while flag ==1:
 #user move
 i=int(input(""input row: ""))
 j=int(input(""input col: ""))
 self.turn(i,j)
 if self.checkpattern():
 print(""user won"")
 flag = 0
 
 else:
 #AI move
 i = randint(0,2)
 j = randint(0,2)
 self.turn(i,j)
 if self.checkpattern():
 print(""computer won"")
 flag = 0",python,python,0.0008285993211384325,0.01265300419955621,0.056237777628329884,4.578993898580823e-05,0.00010613308268884943,7.636272973316887e-05,0.5784844872571089,0.34954131618162754,0.0020265296608312842
"import pyswarms as ps
 
def optimize(model, X, y):
    # Configure hyperparameters
    options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
 
    # Compute the hyperparameters
    optimizer = ps.single.LocalBestPSO(n_particles=10, 
                                       dimensions=X.shape[1], 
                                       options=options)
 
    # Perform the search
    cost, pos = optimizer.optimize(model, X, y)
 
    # Create and return the optimized model
    hyperparameters = {'bias': pos[0],
                       'weights': pos[1:]}
 
    optimized_model = model(**hyperparameters)
 
    return optimized_model",css,typescript,0.05738160215924013,0.078446334254837,0.027347138986619977,0.00021589626391046204,0.0009846179448990107,0.00024231355875557834,0.13984228269125062,8.269782880049701e-05,0.6954571163116868
"def average(a, b, c):
    return (a+b+c)/3",python,python,0.000400320005749689,0.002663831498550027,0.001072731410488919,0.00010427946431280566,0.00031186302476806,4.497056627414336e-05,0.9945872100164365,0.0003221691236123356,0.0004926248898075376
"#!/usr/bin/env python
# MusicPlayer, https://github.com/albertz/music-player
# Copyright (c) 2012, Albert Zeyer, www.az2000.de
# All rights reserved.
# This code is under the 2-clause BSD license, see License.txt in the root directory of this project.

import sys, os, random, fnmatch

# Our parent path might contain a self-build musicplayer module. Use that one.
sys.path = [os.path.abspath((os.path.dirname(__file__) or ""."") + ""/.."")] + sys.path

import musicplayer
print ""Module:"", musicplayer.__file__

# ffmpeg log levels: {0:panic, 8:fatal, 16:error, 24:warning, 32:info, 40:verbose}
musicplayer.setFfmpegLogLevel(20)

try:
	import better_exchook
	better_exchook.install()
except ImportError: pass # doesnt matter

try:
	import faulthandler
	faulthandler.enable(all_threads=True)
except ImportError:
	print ""note: module faulthandler not available""
	
class Song:
	def __init__(self, fn):
		self.url = fn
		self.f = open(fn)
		
	def __eq__(self, other):
		return self.url == other.url
	
	def readPacket(self, bufSize):
		s = self.f.read(bufSize)
		#print ""readPacket"", self, bufSize, len(s)
		return s

	def seekRaw(self, offset, whence):
		r = self.f.seek(offset, whence)
		#print ""seekRaw"", self, offset, whence, r, self.f.tell()
		return self.f.tell()

files = []
def getFiles(path):
	for f in sorted(os.listdir(path), key=lambda k: random.random()):
		f = os.path.join(path, f)
		if os.path.isdir(f): getFiles(f) # recurse
		if len(files) > 1000: break # break if we have enough
		if fnmatch.fnmatch(f, '*.mp3'): files.append(f)
getFiles(os.path.expanduser(""~/Music""))
random.shuffle(files) # shuffle some more
files = sys.argv[1:] + files
assert files, ""give me some files or fill-up ~/Music""

i = 0

def songs():
	global i, files
	while True:
		yield Song(files[i])
		i += 1
		if i >= len(files): i = 0

def peekSongs(n):
	nexti = i + 1
	if nexti >= len(files): nexti = 0
	return map(Song, (files[nexti:] + files[:nexti])[:n])

player = musicplayer.createPlayer()
player.outSamplerate = 48000
player.queue = songs()
player.peekQueue = peekSongs
player.playing = True

def formatTime(t):
	if t is None: return ""?""
	mins = long(t // 60)
	t -= mins * 60
	hours = mins // 60
	mins -= hours * 60
	if hours: return ""%02i:%02i:%02.0f"" % (hours,mins,t)
	return ""%02i:%02.0f"" % (mins,t)

import termios

def prepareStdin():
	fd = sys.stdin.fileno()
	
	if os.isatty(fd):		
		old = termios.tcgetattr(fd)
		new = termios.tcgetattr(fd)
		new[3] = new[3] & ~termios.ICANON & ~termios.ECHO
		# http://www.unixguide.net/unix/programming/3.6.2.shtml
		new[6][termios.VMIN] = 0
		new[6][termios.VTIME] = 1
		
		termios.tcsetattr(fd, termios.TCSANOW, new)
		termios.tcsendbreak(fd, 0)

		import atexit
		atexit.register(lambda: termios.tcsetattr(fd, termios.TCSANOW, old))	

		print ""Console control:""
		print ""  <space>:        play / pause""
		print ""  <left>/<right>: seek back/forward by 10 secs""
		print ""  <return>:       next song""
		print ""  <q>:            quit""

def getchar():
	fd = sys.stdin.fileno()
	ch = os.read(fd, 7)
	return ch

prepareStdin()

while True:
	sys.stdout.write(""\r\033[K"") # clear line
	if player.playing: sys.stdout.write(""playing, "")
	else: sys.stdout.write(""paused, "")
	curSong = player.curSong
	if curSong:
		url = os.path.basename(curSong.url)
		if len(url) > 40: url = url[:37] + ""...""
		sys.stdout.write(
			url + "" : "" +
			formatTime(player.curSongPos) + "" / "" +
			formatTime(player.curSongLen))
	else:
		sys.stdout.write(""no song"")
	
	ch = getchar()
	if ch == ""\x1b[D"": # left
		player.seekRel(-10)
	elif ch == ""\x1b[C"": #right
		player.seekRel(10)
	elif ch == ""\x1b[A"": #up
		pass
	elif ch == ""\x1b[B"": #down
		pass
	elif ch == ""\n"": # return
		player.nextSong()
	elif ch == "" "":
		player.playing = not player.playing
	elif ch == ""q"":
		print
		sys.exit(0)
	sys.stdout.flush()
",css,sql,0.00015403470197285327,0.14410972658836108,0.04811454498579557,0.00033895100152330214,0.0006909737466069124,0.00041449638332626486,0.09063954707442017,0.707481083165196,0.008056642352797887
"def sum_prime_numbers(start, end):
  total = 0
  for num in range(start, end + 1):
    if is_prime(num):
      total += num
  return total

def is_prime(num):
  for i in range(2, num):
    if num % i == 0:
      return False
  
  return True",python,matlab,1.0234460508862737e-10,1.208205269251995e-15,1.0090176947732798e-09,4.780687151462289e-12,7.338188908313057e-12,0.9997958081366284,0.00020419057329940758,9.818839479060719e-11,6.840156808227179e-11
"import time
import random

questions = [...List of questions]

def start_game():
    score = 0
    start_time = time.time()
    for i in range( len(questions) ):
        print(f'Question {i+1}:')
        question = random.choice(questions)
        print(question['text'])
        print('Options:')
        for j, option in enumerate(question['options'], start=1):
            print(f""{j}. {option}"")
        answer = int(input('Answer: '))
        if answer == question['answer']:
            score += 1
            print('Correct!\n')
        else:
            print('Incorrect!\n')
        elapsed_time = time.time() - start_time
        print(f'Time remaining: {30 - int(elapsed_time):02} seconds\n')
        if elapsed_time >= 30:
            break
    print(f'Your score is {score}/{len(questions)}')

if __name__ == '__main__':
    start_game()",css,python,0.0005982528482402177,0.06888950672327847,0.0030577048336415703,0.0012455357220755394,0.0003001558587039913,0.00023795467951041052,0.8938348034139162,0.031738713114566844,9.737280606675053e-05
"import requests
from bs4 import BeautifulSoup

# make the request
URL = ""https://example.com/product-list""
response = requests.get(URL)

# parse the HTML
soup = BeautifulSoup(response.content, 'html.parser')

# find all product prices on the page
prices = soup.find_all('span', class_=""price"")

# print out all the prices
for price in prices:
 print(price.text)",python,css,1.0070652322198734e-10,0.6505629983798435,0.2606551087619712,0.08814987367750929,8.651821693100769e-05,1.3540432005337457e-07,0.0003258283417284317,0.00018138326605433624,3.815385093563123e-05
"def count_occurrences(arr): 
    # Initialize a new dictionary 
    count_dict = {} 
  
    # Iterate through all the elements of arr
    for row in arr: 
        for ele in row: 
  
            # If element exists in the dictionary 
            if ele in count_dict.keys(): 
                count_dict[ele] += 1
            else: 
                count_dict[ele] = 1
  
    return count_dict

arr = [['a', 'a', 'b', 'c', 'c'], ['c', 'b', 'a', 'a', 'b']]
print(count_occurrences(arr)) # prints {'a': 4, 'b': 3, 'c': 3}",css,matlab,0.00013663701365546662,0.0030782191357802816,9.684742521408844e-05,3.5806652202935777e-06,7.947879497382229e-05,0.9796982303553475,0.01648747959005062,1.4749052846382336e-05,0.00040477796691140537
"myDict = {
 'name': 'John',
 'age': 25,
 'height': 6.1,
 'city': 'New York',
 'job': 'Developer'
}",css,css,0.00012201129118595943,0.9989605344602183,0.0002489232386063687,0.00030975151233638966,9.395473654389178e-07,7.106931488153369e-06,0.00032367092366719614,1.3124662475417861e-05,1.393743265683376e-05
"import requests

url = 'https://www.example.com/'

response = requests.get(url)

if response.status_code == 200:
    print('Success!')
else:
    print('An error has occurred.')",python,java,3.1244431404458706e-23,9.587543255370093e-08,8.874332501105722e-10,0.9999998830392044,2.5762584118153528e-11,1.2043431493354279e-11,1.9852612637832437e-08,2.5474561610319577e-10,5.276536830972639e-11
"#!/usr/bin/python
#coding:utf-8

j = '{""action"": ""print"", ""method"": ""onData"", ""data"": {""key1"" : 1, ""key2"":""value2""} }'
import json

class Payload(object):
    def __init__(self, j):
        self.__dict__ = json.loads(j)

p = Payload(j)
print '-' * 30
print dir(p)
print '-' * 30
print p.action
print p.method
print p.data
print type(p.data)
data = dict(p.data)
print 'new data:', data

j2 = '{ ""identity"" :  ""dafei"", ""alert"" : ""you have message"", ""badge"":1, ""payload"": { ""k1"":""v1"", ""k2"" : ""v2""} }'
p2 = Payload(j2)
print dir(p2)
print type(p2.payload)
print p2.payload

print '-' *50

class ParseBase(object):
    """"""docstring for ParseBase""""""
    def __init__(self):
        super(ParseBase, self).__init__()
        self.http_status_code = 0

    def parse(self, j):
        dict_data = json.loads(j)
        for key in self.__dict__:
            print 'key:{}'.format(key)
            if not key.startswith('http'):
                value = dict_data.get(key)
                self.__dict__[key] = value

class Http(ParseBase):
    """"""docstring for Http""""""
    def __init__(self):
        super(Http, self).__init__()
        self.name = None
        self.id = None
    
h = Http()
h.parse('{ ""name"" : ""大飞"", ""id"":1 }')
print dir(h)
print h.http_status_code
print h.name
print h.id

",css,css,1.4956021186812588e-05,0.9712522762583299,0.0070583561819275355,2.4283868314271694e-06,5.75939445770947e-07,8.493223041930513e-08,0.014293700863956838,0.007373576978856577,4.044437234924038e-06
"def sort_array(array):
    for i in range(len(array)): 
        min_idx = i 
        for j in range(i+1, len(array)): 
            if array[min_idx] > array[j]: 
                min_idx = j       
        array[i], array[min_idx] = array[min_idx], array[i]
    return array
result = sort_array(array)
print(result) // Output: [1, 2, 3, 4, 5, 7]",python,matlab,0.0016210643659708714,0.00011645914576852359,0.0002076374771644159,1.0866892552349112e-05,1.5251384696415714e-05,0.9931939119376035,0.004760232025994511,3.0063501651602545e-05,4.451326859766669e-05
"import tkinter as tk

root = tk.Tk()

def displayMessage():
    print(""Button was pressed!"")

button = tk.Button(root,text=""Press Me"",width=25,command=displayMessage)
button.pack()

root.mainloop()",python,python,0.004463106897569931,0.014775015413647952,0.011389226407139295,0.0007060811145021928,0.0012490166389782145,0.0020798811899693306,0.8965424021113916,0.04052465647056401,0.028270613756237715
"import re

# Representation of tokens
tokens = [
 ['NUMBER',        r'\d+(\.\d+)?'],
 ['OPEN_BRACE',    r'\['],
 ['CLOSE_BRACE',   r'\]'],
 ['TEXT',          r'[a-zA-Z]+']
]

# List of tokens
token_list = []
for token, pattern in tokens:
 token_list.append(token)

# Dictionary of tokens
token_dict = {token: pattern for token, pattern in tokens}

def lex(string):
 token_list = []
 char_list = list(string)
 while char_list:
 for token, regex in token_dict.items():
 matchObj = re.match('^' + regex, ''.join(char_list))
 if matchObj:
 token_list.append((token, matchObj.group()))
 char_list = char_list[matchObj.end():]
 break
 else:
 raise SyntaxError
 return token_list

print(lex('[10.5 hello]'))
# Output: [('OPEN_BRACE', '['), ('NUMBER', '10.5'), ('TEXT', 'hello'), ('CLOSE_BRACE', ']')]",css,python,0.0018984452493410258,0.14161654156844988,0.07600215245366118,0.000918230246180885,0.00254168291114894,0.046251439625884266,0.6141603518091896,0.10839079265574803,0.008220363480396295
"from paginator import Paginator

def page_items(items, page_number):
    p = Paginator(items, 3) # items per page
    return p.page(page_number).object_list

page_1 = page_items([""apple"", ""banana"", ""carrot"", ""date"", ""elderberry"", ""fig"", ""grape"", ""honeydew"", ""iceberg lettuce""], 1)
print(page_1) # [""apple"", ""banana"", ""carrot""]

page_2 = page_items([""apple"", ""banana"", ""carrot"", ""date"", ""elderberry"", ""fig"", ""grape"", ""honeydew"", ""iceberg lettuce""], 2)
print(page_2) # [""date"", ""elderberry"", ""fig""]",python,css,0.0015416756820005372,0.8535804672448822,0.0035549194348949782,9.383912711725611e-05,0.0011881238961092098,8.181575778927579e-05,0.13925418525360675,0.0004953241680748312,0.00020964943552476112
"def encode(text):
 # Create an empty string
 encoded_string = ''
 # Iterate over every character
 for i in text:
     # Convert it to the ASCII value
     n = ord(i)
     # Add +1 to each Character
     n += 1
 
     # Convert it back to character
     c = chr(n)
 
     # Append it to the result
     encoded_string += c
 
 # Return the result
 return encoded_string

def decode(encoded_text):
 # Create an empty string
 decoded_string = ''
 # Iterate over every character
 for i in encoded_text:
     # Convert it to the ASCII value
     n = ord(i)
     # subtract -1 from each Character 
     n -= 1
 
     # Convert it back to character
     c = chr(n)
 
     # Append it to the result
     decoded_string += c
 
 # Return the result
 return decoded_string

# Test the code
text = 'Python'
encoded_text = encode(text)
 decoded_text = decode(encoded_text)
 
 print ( text == decoded_text )  #True",python,typescript,3.4791254917094023e-07,0.0017918279842495163,4.436003310187802e-05,0.00021829550027136285,0.00015626644852954677,3.23983438979371e-05,0.0007725149110845864,0.004836117774681859,0.9921478710916342
"def delete_last_char(string):
    """"""Delete the last character of a given string.

    Args:
        string (str): The string to remove the last character from. 

    Returns:
        str: The string with the last character removed.
    """"""
    return string[:-1]

if __name__ == '__main__':
    string = ""Hello World!""
    result = delete_last_char(string)
    print(result)",sql,java,4.2929611233953123e-11,2.0593786853787044e-06,2.419275562557882e-07,0.9987502179430832,3.1448044441923312e-12,6.523505170030151e-12,0.0008538256091551377,0.0003929720601700314,6.830287521412288e-07
"#!/usr/bin/python

import sys
import os
from subprocess import call
from Bio import SeqIO

print ""Usage: mitobim_run.py NumberOfReads ListOfFiles Reference [miramito/quickmito/seedmito] missmatch""

try:
    nreads = sys.argv[1]
except:
    nreads = raw_input(""Introduce number of reads: "")

try:
    lista = sys.argv[2]
except:
    lista = raw_input(""Introduce list of files: "")

try:
    ref = sys.argv[3]
except:
    ref = raw_input(""Introduce Fasta file as reference: "")

try:
    prot = sys.argv[4]
except:
    prot = raw_input(""Introduce protocol name (miramito/quickmito/seedmito): "")

try:
    mism = sys.argv[5]
except:
    mism = ""15""

manifest = """"""echo ""\n#manifest file for basic mapping assembly with illumina data using MIRA 4\n\nproject = initial-mapping-testpool-to-Salpinus-mt\n\njob=genome,mapping,accurate\n\nparameters = -NW:mrnl=0 -AS:nop=1 SOLEXA_SETTINGS -CO:msr=no\n\nreadgroup\nis_reference\ndata = reference.fa\nstrain = Salpinus-mt-genome\n\nreadgroup = reads\ndata = reads.fastq\ntechnology = solexa\nstrain = testpool\n"" > manifest.conf""""""

miramito = """"""mira manifest.conf && MITObim_1.8.pl --missmatch %s --clean -start 1 -end 1000 -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq -maf initial-mapping-testpool-to-Salpinus-mt_assembly/initial-mapping-testpool-to-Salpinus-mt_d_results/initial-mapping-testpool-to-Salpinus-mt_out.maf > log"""""" % mism

quickmito = """"""MITObim_1.8.pl -start 1 -end 1000 -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq --missmatch %s --quick reference.fa --clean > log"""""" % mism

seedmito = """"""MITObim_1.8.pl -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq --quick reference.fa --missmatch %s -end 1000 --clean > log"""""" % mism

miramitoout = """"""/testpool-Salpinus_mt_genome_assembly/testpool-Salpinus_mt_genome_d_results/testpool-Salpinus_mt_genome_out_testpool.unpadded.fasta""""""

pairs = open(lista).readlines()

npairs = len(pairs)/2

for npair in range(0,npairs):
    pairone = pairs[npair*2][:-1]
    pairtwo = pairs[(npair*2)+1][:-1]
    name = """"
    paironesplit = pairone.split(""."")
    if paironesplit[-1] == ""gz"":
        name = ""."".join(paironesplit[0:-2])
    elif paironesplit[-1] == ""fastq"" or paironesplit[-1] == ""fq"":
        name = ""."".join(paironesplit[0:-1])
    name = name[:-2]
    foldername = ""%s_%s"" % (name,prot)
    call(""mkdir %s"" % foldername , shell=True)
    os.chdir(foldername)

    print ""\nStarting with "" + name

    call(""seqtk sample -s100 ../%s %s > %s"" % (pairone,nreads,name+"".fq.subset1""), shell=True)
    call(""seqtk sample -s100 ../%s %s > %s"" % (pairtwo,nreads,name+"".fq.subset2""), shell=True)
    call(""shuffleSequences_fastq.pl %s %s %s"" % (name+"".fq.subset1"",name+"".fq.subset2"",name+"".shuffled.fastq""), shell=True)
    call(""ln -sf %s reads.fastq"" % (name+"".shuffled.fastq""), shell=True)
    call(""ln -sf ../%s reference.fa"" % ref, shell=True)
    if prot == ""miramito"":
        call(manifest, shell=True)
        call(miramito, shell=True)
    elif prot == ""quickmito"":
        call(quickmito, shell=True)
    elif prot == ""seedmito"":
        call(seedmito, shell=True)
    else:
        break
    list_dir = os.listdir(""."")
    list_dir.sort()
    iterations = []
    for dir in list_dir:
        if dir.startswith(""iteration""):
            iterations.append(dir)
    os.chdir(""../"")
    consensus = ""%s/%s"" % (foldername,iterations[-1]+miramitoout)
    secus = SeqIO.parse(open(consensus), ""fasta"")
    out = open(""%s_%s.fa"" % (name,prot), ""w"")
    i = 0
    for secu in secus:
        i+=1
        s = str(secu.seq)
        s = s.replace(""x"",""n"")
        out.write("">%s_%s_%s\n%s\n"" % (name,prot,i, s))
    out.close()

    print name + "" finalized!!!""
",sql,java,0.09430041878874816,0.016516153665897617,0.021339313734714992,0.8294272586382602,0.00024317573316912417,0.0013072388412638941,0.03136915026416832,0.003474048235833749,0.0020232420979439166
"# Calculating frequency of each word in the given string
 
string = 'This is a simple sentence containing multiple words.'
 
# Splitting the string into words 
words = string.split()
 
# Initializing a dictionary
count = {} 

# Mapping every word with its frequency in counts
for word in words:
 count[word] = count.get(word, 0) + 1
 
# Printing the frequency each word
for word, frequency in count.items():
 print(f'{word}: {frequency}')

Output:
This: 1
is: 1
a: 1
simple: 1
sentence: 1
containing: 1
multiple: 1
words: 1",python,python,3.692467232237708e-05,0.005881448154819836,0.002794620533372335,0.01426516659084931,4.4886258075289307e-07,5.405606858214363e-06,0.7264802840290653,0.25044968040137594,8.60211487560769e-05
"def group_equal_sum(arr):
    result = []
    arr.sort()

    while len(arr) > 0:
        group = [arr[0]]
        arr.remove(arr[0])

        sum_ = group[0]
        while sum_ in arr:
            group.append(sum_)
            arr.remove(sum_)
            sum_ += 1

        result.append(group)
    return result",python,matlab,7.333837281391263e-05,0.0013830814457109443,0.0004429941134249671,3.905809054349251e-05,6.1902272081885e-05,0.9578089780264039,0.040081241425719456,1.978801995423423e-05,8.961823334724686e-05
"def findCommonSubstring(str1, str2):
    common_substring = """"
    for i in range(len(str1)): 
        for j in range(len(str2)): 
            for k in range(min(len(str1) - i, len(str2) - j)): 
                if str1[i + k] != str2[j + k]: 
                    break
            if k > len(common_substring): 
                common_substring = str1[i:i+k] 
    return common_substring 
 
result = findCommonSubstring(""alexandra"", ""andromeda"")
print(result)",python,python,8.924037141906088e-07,2.89332913538986e-07,4.0762828212149125e-09,6.79262734107689e-08,0.0001031573498542454,0.013775327002180407,0.9858300813881685,0.0002893650713626242,8.154492503898454e-07
"import random

def game():
 num = random.randint(0, 10)
 num_guesses = 0

 while True:
 guesses = int(input('Guess a number between 0 and 10: '))
 num_guesses += 1

 if guesses == num:
 print(f'You guessed correctly in {num_guesses} guesses! The number was {num}')
 break
 else:
 print('Wrong guess. Try again.')
 
game()",python,python,0.00038735502217273466,0.00012964260284484012,0.0006848669144256816,0.00019659328100717432,3.287879239450996e-05,0.0027279885662966122,0.994965426889157,0.00045594695277460334,0.00041930097892685207
"from datetime import date, timedelta

def next_day(old_date):
 d = date.fromisoformat(old_date)       
 new_date = d + timedelta(1) 
 return new_date.isoformat() 

next_day(""2020-06-20"")",python,python,0.013908170078613162,0.10874370105439879,0.006867524436134907,0.0004346619354222982,0.0015586902356898393,0.0005662791871961233,0.8646191783808618,0.0013532231249505503,0.0019485715667325004
"import numpy as np

def minimize(x):
  return np.power(x,4) + 7 * np.power(x,3) + 6 * np.power(x,2) - 6 * x

def optimize(f, x):
  best_x = x 
  best_val = f(x)

  while True:
    new_x = x - 1e-3 
    new_val = f(new_x)
    if new_val < best_val: 
      best_x = new_x 
      best_val = new_val 
      x = new_x
    else:
      break
  return best_x, best_val

x = 0 
x_min, val_min = optimize(minimize, x)
print(f'Minimum of function ""f(x)"" is at x={x_min}, with value {val_min}.')",python,python,0.043127258979178844,0.1824219109282201,0.025282937249936726,0.002758919839466698,0.20367364927972384,0.03179806218106117,0.4870155817118276,0.010610039638931397,0.013311640191653509
"def gcf(a, b):
    if (a == 0):
        return b
    if (b == 0):
        return a

    if (a == b):
        return a

    if (a > b):
        return gcf(a-b, b)
    return gcf(a, b-a)",python,python,0.0010162051815506945,0.00116563954118169,0.001793679675646696,0.000504197259228334,0.0005189686161752333,0.00991655774317598,0.9838755265714028,0.0005782406593263662,0.0006309847523122896
"class Person:
  def __init__(self, name, age, area):
    self.name = name
    self.age = age
    self.area = area",python,python,0.0001406740427853864,0.0022544215897071355,0.016972951067705792,0.1777389104632777,1.6045450833289827e-07,3.0749400253330722e-06,0.800043117767405,0.002770235096480605,7.645457810481132e-05
"import pandas as pd
from sklearn.ensemble import RandomForestRegressor

# Create
data = {'Size': [500], 
'Rooms': [4]}

df = pd.DataFrame(data)

# Train
X = df[['Size','Rooms']] 
Y = df['Price'] 

regressor = RandomForestRegressor(n_estimators = 10, random_state = 0) 
regressor.fit(X, Y)

# Predict
regressor.predict([[500,4]]) # Predicted price: 1716.275",css,css,0.002139425290032982,0.7791191422113808,0.012211562346382482,0.00016567479556062718,0.00020205745098033801,0.0005982499638906942,0.19504944837620206,0.0024782736318188603,0.008036165933751059
"import sys

def get_object_size(obj):
    #Return the size of the object in bytes
    return sys.getsizeof(obj)",python,python,0.008440053175974153,0.11708881926694373,0.006876535978527535,0.0005473581038514967,0.07609330320648697,0.0001425400957275197,0.4637032968677075,0.008988038405463073,0.318120054899318
"def binary_to_string(b_string):
 s = """" 
 for i in range(0, len(b_string), 8):
 byte = b_string[i: i + 8]
 s += chr(int(byte, 2))
 return s

b_string = ""0100100001100101011011000110110001101111""
print(binary_to_string(b_string))
# Output: Hello",python,python,0.002784219741207742,1.896176289592319e-06,5.347627303238401e-05,4.649869936039626e-06,8.781559803492915e-06,3.341934269081543e-07,0.9971407580091204,5.657571729588758e-06,2.266054539867192e-07
"def findLongestIncreasingSubsequence(sequence): 
    n = len(sequence) 
  
    # LIS[i] stores the length of the longest increasing 
    # subsequence upto index i 
    # Initialize the sequence as 1
    LIS = [1 for i in range(n)] 
  
    # Compute LIS values for all indexes  
    for i in range (1 , n): 
        for j in range(0 , i): 
            if sequence[i] > sequence[j] and LIS[i]< LIS[j] + 1 : 
                LIS[i] = LIS[j]+1
  
    # Return  the maximum value 
    return max(LIS)",python,python,0.0014157673251789318,0.000964778509551892,0.004288520440549487,0.0001310611190422566,0.0013313835536376544,0.4478091642462433,0.4901131439835577,0.002256405244377963,0.05168977557786076
"# import necessary libraries
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
 
# Load the data
iris = datasets.load_iris()
 
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(iris.data, 
iris.target, random_state=0)
 
# Initialize the model
knn = KNeighborsClassifier(n_neighbors=1)
 
# Train the model
knn.fit(X_train, y_train)
 
# Generate predictions
y_pred = knn.predict(X_test)
 
# Compute accuracy
accuracy = knn.score(X_test, y_test)
 
# Print accuracy
print(""Accuracy: {}"".format(accuracy))",python,python,0.111969280483668,0.2583343877168786,0.04696582233971865,4.001167536966355e-05,0.0006661247934500473,0.00012360356159543524,0.5454435811090055,0.00013988432232975816,0.036317303997984184
"def permutations(arr):
    if len(arr) == 0:
        return []

    if len(arr) == 1:
        return [arr]

    l = []
    for i in range(len(arr)):
        m = arr[i]
        remL = arr[:i] + arr[i+1:]
        for p in permutations(remL):
            l.append([m] + p)
    return l

permutations([1, 2, 3])",python,matlab,3.6191759092645476e-08,7.23111178927426e-08,3.404554880523818e-08,8.128999748841339e-09,4.702985048362043e-09,0.9950345831656985,0.0049652295555653305,9.1446614702444e-09,2.2753664099299997e-08
"def find_sublists(my_list):
 # Initialize result 
 res = [[]]  
 # Consider each element of the original list  
 for elements in my_list: 
  # Initialize temp 
  temp = []  
  
  # Store current element in temp 
  temp.append(elements) 
  
  # For every element in the result, add the 
  # current element - temp 
  for r in res: 
   new_r = r + temp 
   res.append(new_r) 
   
  # Print the result 
  for r in res: 
   print(r)          

# Driver code 
my_list = [1, 2, 3, 4] 

find_sublists(my_list)",python,matlab,1.2188055813652728e-08,2.3255888336338953e-07,4.45072188065937e-08,3.440755270197842e-08,1.1889931351529248e-07,0.9999988554019421,5.0965807815961035e-08,7.499716549057672e-09,6.435715092172012e-07
"def split_list(string_list):
    mid = len(string_list) // 2
    return string_list[:mid], string_list[mid:]",python,python,0.003482416062775324,0.01300363541413938,0.008891646937188451,0.0006120611781104478,0.0026013906859612412,0.0013147117631001426,0.9452261568400022,0.019233057681132697,0.005634923437590204
"from flask import Flask, jsonify, request
from flask_mysqldb import MySQL

app = Flask(name)

# Mysql configuration
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'password'
app.config['MYSQL_DB'] = 'users'
app.config['MYSQL_CURSORCLASS'] = 'DictCursor'

mysql = MySQL(app)

@app.route('/users', methods=['POST'])
def create_user():
 name = request.json['name']
 email = request.json['email']

 cur = mysql.connection.cursor()
 cur.execute(""INSERT INTO users (name, email) VALUES (%s, %s)"", (name, email))
 mysql.connection.commit()
 cur.close()

 return jsonify({'message': 'User created'})

@app.route('/users', methods=['GET'])
def get_users():
 cur = mysql.connection.cursor()
 cur.execute(""SELECT * FROM users"")
 users = cur.fetchall()
 cur.close()

 return jsonify(users)

@app.route('/users/int:id', methods=['GET'])
def get_user(id):
 cur = mysql.connection.cursor()
 cur.execute(""SELECT * FROM users WHERE id=%s"", (id))
 user = cur.fetchone()
 cur.close()

 return jsonify(user)

if name == ""main"":
 app.run(debug=True)",css,sql,0.0010642048538120463,0.123912497874564,0.0014221738699419768,0.0007805747537742162,1.4382648309286066e-06,2.2558123276649357e-06,0.0006981178490104174,0.8720553583285239,6.337839321500835e-05
"def base_conversion(n, from_base, to_base):
    # convert from base-10 to from_base
    rems = []
    while n > 0:
        rem = n % from_base
        rems.append(rem)
        n //= from_base

    # convert from from_base to to_base
    result = 0
    for rem in rems[::-1]:
        result *= from_base
        result += rem 
    return result",python,python,0.003253213789849029,0.07443147217136838,0.00788707032170146,0.0007177852768126887,0.006558193575525456,0.009589446530745425,0.8650763930219713,0.00476709405495797,0.027719331257068325
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble  import RandomForestClassifier

# read in the data
df = pd.read_csv('loan_data.csv')

# split features and target
X = df.drop(columns='default').values
y = df['default'].values

# split dataset into training and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# build the model
model = RandomForestClassifier(n_estimators=500)
model.fit(X_train, y_train)

# predict
y_pred = model.predict(X_test)

# calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print('Model accuracy is: ', accuracy)",python,python,0.12095637944900182,0.18855073550878823,0.012973964102059643,2.1983081389486143e-05,0.00020158346374898287,5.893746547302864e-05,0.6719967298305786,3.703460809987105e-05,0.0052026524908604915
"import requests

def http_request(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        return None

http_result = http_request('https://www.example.com/')",python,java,1.478020819470454e-22,7.789593270514647e-06,1.6074022058313126e-09,0.9999920748134026,2.8590934877772893e-11,6.296742066991405e-12,1.3248767181636947e-07,1.4592117560779702e-09,4.1535717191567455e-12
"def descendingSort(nums):
    # sort list in reverse order
    nums.sort(reverse=True)
    return nums

print(descendingSort([2, 4, 1, 6, 9, 8]))",python,python,0.00015318651055702508,0.0014540157628382371,0.00035409273766910215,1.3904423083472894e-05,0.00015200484288104333,2.1132572769182967e-05,0.9974655347514388,0.0003410064398412688,4.512195892168801e-05
"elements = [""A"", ""B"", ""C"", “D”] 
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

mydict = dict()

for i in range(len(elements)): # iterate through elements
 mydict[elements[i]] = numbers[i:i+3] # assign each element the next three numbers

print(mydict) 
# {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9], 'D': [7, 8, 9]}",css,python,0.00021133906257312195,0.003949563001969064,0.0013650089175365875,0.004489456937628704,0.0009684346619868396,6.0225410718251435e-05,0.9880233883098394,0.000403463801747786,0.0005291198960002632
"class Vector2D:
  def __init__(self, x, y):
    self.x = x
    self.y = y
  
  def add(self, other):
    self.x += other.x
    self.y += other.y

  def subtract(self, other):
    self.x -= other.x
    self.y -= other.y",python,python,0.0009447928007106552,0.01669456342665201,0.04648270651966348,0.00020720939773434733,0.0028933587045416698,1.5824049103385088e-05,0.8365125813551653,0.09583292899541455,0.00041603475101472265
"import dash
import dash_cytoscape as cyto
import plotly.graph_objects as go

app = dash.Dash(__name__)

# create 3D line chart using Plotly
x_values = [0,0.2,0.4,0.6,0.8,1] # just example values
y_values = [0,0.5,1,2,1.5,3] # just example values
z_values = [0,1,2,3,4,4] # just example values

trace1 = go.Scatter3d(x = x_values,
 y = y_values,
 z = z_values,
 mode = 'lines',
 line = dict(
 color = 'red',
 width = 5
 )
)

layout= go.Layout(scene=dict(aspectmode='cube'))

# create Dash Cytoscape component
cyto_comp = cyto.Cytoscape(
 id='dash-cyto',
 elements=[],
 stylesheet=[],
 layout={'name': 'preset'}
)

# display elements
app.layout = dash.Div([
 dash.Div([
 trace1
 ], style={'width': '50%'}),
 cyto_comp
 ])

if __name__ == '__main__':
 app.run_server(debug=True)",css,html,0.001992840546447794,0.011988830466626264,0.923765150674959,0.05725231555888215,6.662948873316534e-07,7.993511736075076e-05,0.0027613975685483023,5.269725931913673e-05,0.002106166512969312
"def merge_sort(arr):
 
 if len(arr) > 1:
 
 mid = len(arr) // 2
 left = arr[:mid]
 right = arr[mid:]
 
 merge_sort(left)
 merge_sort(right)
 
 i = j = k = 0
 
 while i < len(left) and j < len(right):
 if left[i] < right[j]:
 arr[k] = left[i]
 i += 1
 else:
 arr[k] = right[j]
 j += 1
 k += 1
 
 while i < len(left):
 arr[k] = left[i]
 i += 1
 k += 1
 
 while j < len(right):
 arr[k] = right[j]
 j += 1
 k += 1
 
arr = [8, 4, 14, 1, 9]
 
merge_sort(arr)
 
print(arr) # prints [1, 4, 8, 9, 14]",python,python,0.0004505433880117497,0.000982579173439674,0.0002323249518153749,3.692068672379353e-05,5.159340471457539e-05,0.23053599560203625,0.7672240110176933,7.548755427098396e-05,0.00041054422129435675
"class Circle:
    def __init__(self, radius):
        self.radius = radius 
 
    def area(self):
        return 3.14 * self.radius * self.radius
 
    def circumference(self):
        return 2 * 3.14 * self.radius
 
# Driver code 
c = Circle(2)
print('Area = ', c.area())
print('Circumference = ', c.circumference())",python,python,0.00011846076157813226,0.002032819665940868,0.006885956807728444,2.8913650784280973e-05,5.9547631191162506e-05,4.974967741207735e-06,0.983380601495143,0.006998874191780761,0.0004898508281123386
"def sort_list(mylist):
 for i in range(len(mylist)):
 
 min_index = i
 temp = mylist[i]
 
 for j in range(i + 1, len(mylist)):
 
  if mylist[min_index] > mylist[j]:
   min_index = j
 
 mylist[i] = mylist[min_index]
 mylist[min_index] = temp
 
 return mylist
 
mylist = [1, 5, 7, 8, 4, 10, 2]
 
print(""Sorted list is:"")
print(sort_list(mylist))",python,matlab,1.4104394100785398e-15,7.210104916454194e-17,9.145585603828984e-17,4.1669386175910043e-16,1.172797574957096e-15,0.9999999999999951,5.3858170925279466e-18,2.6876745468327157e-18,1.810560926344221e-15
"def merge_two_lists(list1, list2):
 return list1 + list2",python,python,9.493716184263394e-05,0.001657314335794629,0.0004654495599492402,5.403063551080097e-05,0.00013209855125309833,2.7417410192007993e-05,0.9971677551741369,0.00012296776493642093,0.00027802940638420694
"def find_substrings(string): 
  
    # Create an empty list to store all the possible substrings
    substrings = [] 
  
    # Iterate through each character of the string
    for i in range(len(string)): 
        for j in range(i, len(string)): 
            substrings.append(string[i: j + 1]) 
  
    return substrings",python,java,1.6076120494714876e-10,4.880281465338521e-06,5.247201935271928e-06,0.9844784295131125,1.1381674184148507e-10,8.363473164286399e-06,0.014957579984155967,0.0005318572396625535,1.3642031926082933e-05
"def currency_converter(input_currency, output_currency, exchange_rate):
amount = float(input('Enter the amount to convert: '))
total_amount = amount * exchange_rate

print('{} {} = {} {}'.format(amount, input_currency, total_amount, output_currency))",python,bash,0.6364626915833477,0.12817147107862756,0.001105711276761745,0.00025192090028675583,0.06289725836708585,0.0005866595302945962,0.14668494569263968,0.0013159218641138994,0.02252341970684222
"import nltk 
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = [""I am happy."", ""I am not happy."", ""This is great!""]

analyzer = SentimentIntensityAnalyzer()

for sentence in sentences:
    scores = analyzer.polarity_scores(sentence)
    print(f""{sentence} : {scores}"")

# Output: 
# I am happy. : {'neg': 0.0, 'neu': 0.357, 'pos': 0.643, 'compound': 0.6249}
# I am not happy. : {'neg': 0.504, 'neu': 0.496, 'pos': 0.0, 'compound': -0.5859}
# This is great! : {'neg': 0.0, 'neu': 0.312, 'pos': 0.688, 'compound': 0.6249}",css,python,0.02825883843192131,0.11481158972998241,0.042117303831384914,0.003629459792057944,0.0010771312681818585,0.004277833653226515,0.751743910900542,0.03544171834106364,0.01864221405163916
"def concat_lists(list_1, list_2):
    return list_1 + list_2

list_1 = [1, 2, 3]
list_2 = [4, 5, 6]

concatenated_list = concat_lists(list_1, list_2)
print(concatenated_list) # [1, 2, 3, 4, 5, 6]",python,matlab,2.9651910438358758e-08,2.4075395307951376e-07,1.2754006948979786e-07,1.2830396785801998e-08,4.019439964783666e-08,0.9999939371505449,5.519582412627033e-06,1.5993913647617663e-15,9.22963114659691e-08
"def is_sorted(lst):
 # base case: if the list is empty then it is sorted
 if not lst:
  return True
 # compare the first two element
 if lst[0] > lst[1]:
  return False
 # recursively call the function with the remaining elements in the list
 return is_sorted(lst[1:])",python,javascript,0.00035475167489282115,0.0004880253235751884,0.002730562273211047,6.686268040574753e-05,0.5138558592899434,7.689277251204208e-05,0.46133557363577365,0.002401622545786474,0.018689849803899608
"def cube_volume(side_length):
    return side_length ** 3

volume = cube_volume(side_length)
print(f""Volume of cube is {volume}"")",python,python,0.005954285531212268,0.028118601722108155,0.017194420053536084,0.002837641958365377,0.022117533137160417,0.003029905277764754,0.893452033651647,0.004959719949327934,0.022335858718878002
"import random 

my_array = [random.randint(1, 100) for _ in range(100)]",python,python,0.0010711467566631733,0.0001886172039693609,0.0007177742796860098,7.879967483992168e-06,0.00022551435567975356,0.23973072539395096,0.7428039140408034,0.01514677185410548,0.00010765614765772699
"def find_sum_in_list(numbers_list, target_num):
 for num1 in numbers_list:
 for num2 in numbers_list:
 if num1 + num2 == target_num:
 return (num1, num2)

find_sum_in_list(numbers_list, target_num)",python,python,0.0012995766357900718,0.005504131530502418,0.0025874527872988555,7.097077319395749e-05,0.0012779517450939837,0.048001355666490664,0.9375449817557603,0.0018849756118400817,0.0018286034940298403
"def long_function(lst):
    counter = 0
    for i in lst:
        counter += i
    return counter",python,python,0.000520319406092245,0.0020180366512501545,0.0033962295166130876,7.016488328180585e-05,0.00026305230444654426,0.0041503500926838325,0.9884065850319687,0.0005118747238518123,0.0006633873898116823
"def gcd(num_1, num_2):
  if num_2 == 0:
    return num_1
  return gcd(num_2, num_1 % num_2)",python,python,0.016047561775821395,0.030946677588209667,0.04061501254090741,0.005041492618433356,0.013124471112894538,0.33909403555307216,0.5245470882144722,0.004497278719813101,0.026086381876376116
"def prime_factorize(x):
 if x == 1:
 return []
 i = 2
 prime_factors = []
 while x > 1:
 if x % i == 0:
 prime_factors.append(i)
 x= x / i
 else:
 i += 1
 return prime_factors

prime_factorize(10) # Output: [2, 5]",python,matlab,0.00053797247615901,0.00047066706450565464,0.0004372779027211851,2.9872731526997717e-05,7.445923052061131e-05,0.9982489261098964,0.0001298940175062278,2.450032379435826e-05,4.643014336986111e-05
"from xhtml2pdf import pisa
 
# open the page
with open('input.html', 'r') as f:
    html = f.read()
 
# convert to PDF
pdf = pisa.CreatePDF(html, open('output.pdf', 'wb'))
 
# print the result
if not pdf.err:
    print('PDF created successfully')
else:
    print('Error creating PDF')",python,html,0.010423849179880438,0.003037075333354847,0.9610985559301937,5.40032015190473e-06,0.0003876079013128778,3.597308108887267e-05,0.00634805768067963,8.278780514844788e-05,0.018580692768189525
"def is_palindrome(string): 
    left, right = 0, len(string) - 1
 
    while right >= left: 
        if not string[left] == string[right]: 
            return False
        left += 1
        right -= 1
    return True",python,java,1.748813595931606e-09,1.083013671596537e-05,9.707159000094688e-06,0.9868075783122537,3.8343178526127743e-11,3.260717996816813e-08,0.01299285272563701,0.0001779745394631989,1.0227325934011672e-06
"import subprocess

command = 'ls'
process = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)

for line in process.stdout.splitlines():
    print( line )",python,bash,0.9996283583039546,5.2657213961635905e-05,9.773381853925399e-05,1.0356423252585816e-06,6.947142798817395e-06,4.2010183407895716e-05,0.00013753047609899808,5.098367253526728e-07,3.321738218816044e-05
"import random
for i in range(10):
    print(random.randint(0, 9))",python,python,1.0391748703094457e-06,3.245551230787971e-07,3.0572093668526175e-06,7.2783942238338385e-09,4.3755594762359703e-08,0.014552671596954937,0.9854361629048412,6.48353978555198e-06,2.0998506902922634e-07
"To estimate the relative performance of the JavaScript operation compared to the Python operation, we can use benchmarking or algorithmic analysis. Specifically, we can compare the running time complexity of the two algorithms. If one algorithm is more complex than the other, it will likely have greater relative performance overhead. To make the comparison more accurate, we can also consider the implementation of the algorithms, such as the data structure and language-specific optimization techniques used.",typescript,typescript,9.778005738950166e-12,3.8400132484404686e-13,2.9123181547298974e-10,1.0512119226903247e-12,6.968471783390201e-08,2.1931385241664838e-14,5.449266831533889e-12,2.3964012803587407e-12,0.9999999300049696
"def selection_sort(array):
    for i in range(len(array)):
        # Find the minimum element in remaining  
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(array)): 
            if array[min_idx] > array[j]: 
                min_idx = j 
	
        # Swap the found minimum element with  
        # the first element         
        array[i], array[min_idx] = array[min_idx], array[i] 

# Driver code to test above 
arr = [3, 42, 1, 9, 20]
selection_sort(arr)
print(""Sorted Array: "", end=""\n"")  
print(arr)",python,matlab,3.0766092053824676e-05,1.9923180024980294e-06,4.787430470963048e-06,3.9859424794040035e-07,2.316935178073568e-06,0.9996013498623431,0.00030486767526446756,1.8383783060263191e-07,5.3337254608445514e-05
"# To create a Django project, run the following command:
$ django-admin startproject projectname

# To create an app inside the project (e.g. accounts app):
$ python manage.py startapp accounts
```
# In accounts/views.py
from django.shortcuts import render
from django.contrib.auth import authenticate, login
from .forms import RegisterForm

def register_view(request):
    if request.method == 'POST':
        forms = RegisterForm(request.POST)
        if forms.is_valid():
            user = forms.save()
            user.refresh_from_db()  # load the profile instance created by the signal
            user.save()
            raw_password = forms.cleaned_data.get('password1')
            user = authenticate(username=user.username, password=raw_password)
            login(request, user)
            return redirect('index')
    else:
        forms = RegisterForm()
    return render(request, 'accounts/register.html', {'forms': forms})
```",css,bash,0.9999999820703563,1.5643324472991344e-08,5.519455198964256e-11,1.7797906227617139e-12,2.5290397328397256e-10,7.847396928769984e-11,8.834522216179384e-11,2.4995595215029404e-11,1.784625915391068e-09
"from flask import Flask

app = Flask(__name__)

@app.route(""/"")
def greet():
    return ""Hello world!""

if __name__ == ""__main__"":
    app.run()",python,bash,0.5946259316484246,0.03172214344335259,0.04196503972025141,6.559457088311054e-11,0.199167380827858,8.037244998731082e-05,0.11443196065737293,0.017876969732100085,0.00013020145505863138
"print(""Hello, World!"")",python,bash,0.9999734119020168,9.96764694856539e-10,8.203989019786867e-09,1.3871331484896268e-31,2.3140070270935628e-05,1.5029167266270406e-12,3.438768591603071e-06,1.5910552505341453e-11,4.0953400341391626e-11
"def most_common_word(string):
    string_list = string.split()
    word_dict = {}
    for word in string_list:
        word_dict[word] = word_dict.get(word, 0) + 1
    max_count = 0
    most_common_word = None
    for word, count in word_dict.items():
        if count > max_count:
            max_count = count
            most_common_word = word
    return most_common_word

print(most_common_word(string))
# Output: the",python,python,0.0006764217765862446,0.018928506513093794,0.02482246250718679,0.02587207534430057,9.146753692943975e-06,0.0005080126364274956,0.9187592757052329,0.009886816064750172,0.0005372826987291033
"if A > B:
    print(""A is greater than B"")
else:
    print(""B is greater than A"")",python,matlab,0.002689561665256033,0.06133614813940189,0.017080486032863017,0.004408665853094017,0.056768058289154225,0.3547217022577421,0.33305034448948917,0.039965960979348805,0.12997907229365074
"def calculate_average(numbers):
    total = 0
    for n in numbers:
        total += n
    return float(total) / len(numbers) if len(numbers) > 0 else 0",python,python,7.55209575445947e-05,0.00028051650070058816,0.00021173009582979498,0.008705126754267474,0.0001349335084978048,1.3129244693417084e-07,0.9904862273476774,6.973101585316829e-05,3.608252718236967e-05
"def anagramCheck(word1, word2):
    # Removing whitespace characters
    w1 = word1.replace("" "", """")
    w2 = word2.replace("" "", """")
    
    # Check lengths
    if len(w1) != len(w2):
        return False
    
    # Convert to lowercase
    w1 = w1.lower()
    w2 = w2.lower()
    
    # Create dictionary to count frequency of each character
    count_dict1 = dict()
    count_dict2 = dict()
    for ch in w1:
        count_dict1[ch] = count_dict1.get(ch, 0) + 1
    for ch in w2:
        count_dict2[ch] = count_dict2.get(ch, 0) + 1
    
    # Check if character frequencies are equal
    if count_dict1 != count_dict2:
        return False        
    return True

word1 = 'rat'
word2 = 'art'
result = anagramCheck(word1, word2)
if result:
    print('The words are anagrams.')
else:
    print('The words are not anagrams.')",python,python,0.00020734334897993926,0.014298848107352019,0.0017415177419930134,1.8558252815220694e-05,0.0004980510658208123,0.0011281780671735912,0.9649697356519413,0.010139051133081093,0.006998716630843047
"Create a Python program to implement a reinforcement learning agent that utilizes Q-learning for solving an environment with sparse rewards. The algorithm should keep the learning agent in a continuous loop of taking actions, observing rewards and updating the Q-value function to reach the outcome desired.",javascript,bash,0.46156103271755655,0.00012213745556968815,7.366567490234543e-05,2.672502945799944e-07,0.11681874730652086,0.00022617624183698877,1.392334350631471e-06,3.9803812315701735e-05,0.4211567772066526
"# Constants for the game
X = ""X""
O = ""O""
EMPTY = None

class NoughtsAndCrosses: 
 def __init__(self):
 self.board = [[EMPTY, EMPTY, EMPTY],
 [EMPTY, EMPTY, EMPTY],
 [EMPTY, EMPTY, EMPTY]]
 
 # Player X goes first
 self.turn = X
 
 # Total number of moves played
 self.count = 0
 
 def move(self, row, col):
 # Validate move
 if self.board[row][col] != EMPTY:
 return
 
 # Apply move
 self.board[row][col] = self.turn
 
 # Update turn and move count
 if self.turn == X:
 self.turn = O
 else:
 self.turn = X
 self.count += 1
 
 def game_over(self):
 # Check for a draw
 if self.count == 9:
 return True
 
 # Check for a winner
 for i in range(0, 3):
 # Check Horizontal 
 if self.board[i][0] == self.board[i][1] == self.board[i][2] != EMPTY:
 return True
 # Check Vertical 
 if self.board[0][i] == self.board[1][i] == self.board[2][i] != EMPTY:
 return True
 # Check Diagonal
 if self.board[0][0] == self.board[1][1] == self.board[2][2] != EMPTY:
 return True
 if self.board[0][2] == self.board[1][1] == self.board[2][0] != EMPTY:
 return True
 
 return False
 
 # Print board
 def display_board(self):
 print('---' * 3)
 for row in self.board:
 print('|', end="" "")
 for cell in row:
 if cell == EMPTY:
 print(' ', end="" | "")
 elif cell == X:
 print('X', end="" | "")
 else:
 print('O', end="" | "")
 print('')
 print('---' * 3)

game = NoughtsAndCrosses()

# Game loop
while not game.game_over():
 game.display_board()
 row = int(input(""Row: ""))
 col = int(input(""Column: ""))
 game.move(row, col)

print(""Game over!"")
game.display_board()",sql,python,0.00017545703715339162,0.006857212450606053,0.013646027519399301,4.305517335726924e-06,2.8225436055937494e-05,8.160239305031852e-06,0.7251892807060156,0.25402696660297164,6.436449115709782e-05
"import collections 

def calculate_price(items): 
    items_dict = collections.Counter(items) 
    total_price = 0
    # Iterate through each item
    for item in items_dict: 
        price = items_dict[item] * prices[item] 
        total_price += price 
    # Return the total price
    return total_price 

# Mapping of item and its price 
prices = { 
    'apple': 2, 
    'banana': 4, 
    'orange': 6
    } 
# List of items to buy
items = ['apple', 'apple', 'orange', 'banana', 'apple'] 

# Calculate total price
price = calculate_price(items) 
print(""Total Price is"", price)",css,css,6.762265308757927e-05,0.6114991086617202,0.0011521944643016302,1.3427332961200493e-05,0.0256952380373666,1.3509300610608863e-05,0.36119286703835196,0.0002866741969959426,7.935831460430358e-05
"SELECT COUNT(mycolumn)
    FROM mytable
    WHERE mycolumn = 'myvalue'",sql,sql,0.01953558388044196,0.028589784579288523,0.012727002439784623,0.0008950165735633642,0.003392538850145791,0.0025085191475480734,0.2190426507901883,0.7075579767851103,0.005750926953929081
"for i in range(10, 0, -1):
    print(i)",python,matlab,5.9656415838442685e-12,9.24345959966392e-13,1.3906781818842273e-10,2.382126516031233e-13,1.6979731962244342e-13,0.9998352021961047,0.00016479765204655716,3.2524040295583e-14,5.450371823541461e-12
"def is_anagram(str1, str2):
    if len(str1) != len(str2):
        return False
        
    hashmap = {}
    
    for letter in str1:
        if letter in hashmap:
            hashmap[letter] += 1
        else:
            hashmap[letter] = 1
    
    for letter in str2:
        if letter not in hashmap or hashmap[letter] == 0:
            return False
        else:
            hashmap[letter] -= 1
            
    for key in hashmap:
        if hashmap[key] != 0:
            return False
            
    return True",python,python,0.0018299857887435654,0.008407203106415743,0.0009788817946314282,0.00016333512255523408,0.011855616220576985,0.027114589382022606,0.9412380659734434,0.006162918123933364,0.0022494044876775654
"def printSubstrings(s): 
    n = len(s) 
      
    for i in range(n):
        for j in range(i+1, n+1):
            print(s[i:j])
  
# Driver code 
s = ""Hello World""
printSubstrings(s)",python,python,0.001573041108445698,9.961421013046562e-10,1.9386736449804337e-06,2.878262949544741e-17,1.9678577374366537e-06,0.021438791327058046,0.9769821978823905,5.219978863370759e-07,1.5401566949120234e-06
"import hashlib
def encode_string_sha256(string):
  return hashlib.sha256(string.encode('utf-8')).hexdigest()",python,java,6.482306891578693e-15,8.897376800100874e-08,2.308057789604587e-08,0.9999966093278606,8.503253764208887e-13,2.2611994024792217e-10,2.7899514669189747e-06,4.851579583984949e-07,3.2813915848190632e-09
"from flask import Flask, jsonify, request

app = Flask(name)

@app.route('/api/customers/<int:id>', method=['GET'])
def get_customer(id):
    # your code here
    customer = Customer.query.filter_by(id=id).first()
    if customer:
        return jsonify({
            'id': customer.id,
            'name': customer.name,
            'email': customer.email,
            'address': customer.address
        })
    else:
        return jsonify({'error': 'customer not found'}), 404

if name == 'main':
    app.run(debug=True)",css,css,0.023135219210851193,0.8535750176234962,0.04852819483317254,0.04992471862947613,4.46286555589613e-05,1.5051737849468917e-05,0.020785922166521257,0.0033310568460042395,0.0006601902970701056
"# Check to make sure the length of the phone number is 10
def check_phone_number(phone_number):
    if len(phone_number) != 10:
        return False

    # Check to make sure all characters are digits
    for c in phone_number:
        if c < '0' or c > '9':
            return False

    # Phone number is valid
    return True

# Test the function
print(check_phone_number('8888881111')) # True",python,javascript,0.00018974510086001615,0.0012530820249392885,0.00029571329514729193,1.8267800082024253e-06,0.6081390195066569,2.8681756394017328e-05,0.3890629711407006,0.0005861605449773571,0.0004427998503161888
"import datetime
date_string = input(""Enter date in mm/dd/yyyy format:"")
date = datetime.datetime.strptime(date_string, ""%m/%d/%Y"")
weekday = date.strftime(""%A"")
print(""The day for the date"",date_string,""is"",weekday)",python,python,0.044414201535760096,0.16084162897145696,0.012015807582194038,0.0005049721629607261,0.016396143318994298,0.007718393104761704,0.7338233605112239,0.003230434078527797,0.02105505873412062
"def reverseArray(arr): 
    return arr[::-1] 
  
arr = [1,2,3,4,5] 
reverseArr = reverseArray(arr) 
  
print(""Reversed array is"", reverseArr)",python,python,0.0004789048504719592,0.002645271960802506,0.00032093011790378096,0.00017898699071437993,0.0005885098227687542,0.18715021764878106,0.8081283731310558,4.384047682474074e-05,0.0004649650006769738
"def count_characters(string, character):
    count = 0
    for c in string:
        if c == character:
            count += 1
    return count

count_characters(""abracadabra"", 'a')  # 5",python,python,9.103825348884656e-07,0.0025660471046549415,0.00036293451989886824,0.3476803112861711,8.659842827522743e-08,0.0006612030361604958,0.6450951179901403,0.0034914583355847347,0.0001419307464264696
"def sort_names(names):
    # sorted() returns an alphabetically sorted list
    return sorted(names)

unsorted_names = [""John"", ""Jack"", ""Joan"", ""Adam"", ""Elena"", ""Mia""]

print(sort_names(unsorted_names)) # ['Adam', 'Elena', 'Jack', 'Joan', 'John', 'Mia']",python,python,0.011096353658581531,0.143571559012762,0.04809734771664405,0.0005745686633150907,0.005529978959456828,0.0028823313657026957,0.7649405812902308,0.008470152600520047,0.014837126732787058
"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# =============================================================================
#     FileName: api.py
#         Desc: 2015-15/4/16:下午5:54
#       Author: 苦咖啡
#        Email: voilet@qq.com
#     HomePage: http://blog.kukafei520.net
#      History: 
# =============================================================================

from django.shortcuts import render_to_response, HttpResponseRedirect, HttpResponse
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
import commands, json, yaml
from assets.models import Project
from mysite.settings import auth_key
from assets.models import Host, IDC
import hashlib, time
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import redirect
# 登录
from users.models import CustomUser
from assets.models import project_swan
from assets.ztree.service import ztree_tag
from django.shortcuts import get_object_or_404
from assets.models import Host, IDC, Service, Line, Project, HostRecord
from cmdb_auth.models import AuthNode


# songxs add
@login_required
def ztree_project(request):
    line_list = Line.objects.filter()
    business = Project.objects.filter(line__isnull=False)
    no_business = Project.objects.filter(line__isnull=True)
    ztree_data = ztree_tag(request.user.username)

    return render_to_response('default/default.html', locals(), context_instance=RequestContext(request))


@login_required
def ztree_business(request):
    """"""
    树请求验证
    :param request:
    :return:
    """"""
    business_name = request.GET.get(""uuid"", False)
    get_token = str(request.GET.get(""token"", False))
    ztree_data = ztree_tag(request.user.username)

    try:
        sum_token = str(hashlib.sha1(request.user.username + auth_key + business_name +
                                     time.strftime('%Y-%m-%d', time.localtime(time.time()))).hexdigest())
    except TypeError:
        sum_token = False

    if request.GET.get(""options"") == ""host"":
        uuid = request.GET.get('uuid', '')
        ip = request.GET.get('ip', '')
        if uuid:
            host = get_object_or_404(Host, uuid=uuid)
        elif ip:
            host = get_object_or_404(Host, eth1=ip)
        host_record = HostRecord.objects.filter(host=host).order_by('-time')
        user_audit = AuthNode.objects.filter(node=host)
        audit_count = user_audit.count()
        return render_to_response('ztree/host_detail.html', locals(), context_instance=RequestContext(request))


    content_status = True
    idle = request.GET.get(""idle"", False)

    if get_token != sum_token:
        content_status = False
        return render_to_response('ztree/ztree_service.html', locals(), context_instance=RequestContext(request))

    if business_name != u""未分类"":
        try:
            bus_data = Project.objects.get(uuid=request.GET.get(""uuid""))
            if not idle:
                server_list = Host.objects.filter(business=bus_data, idle=True).order_by(""create_time"")
            else:
                server_list = Host.objects.filter(business=bus_data, idle=False).order_by(""create_time"")
        except:
            pass

    else:
        bus_data = u'未分类'
        idc_data = IDC.objects.filter(type=1)
        if not idle:
            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=True).order_by(""create_time"")
        else:
            server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=False).order_by(""create_time"")

    if request.GET.get(""options"") == ""swan_push"":
        s = Ztree_class(business_name, request.user.first_name)
        rst = s.swan()
        rst_data = rst.get(""swan_name"")
        status = len(rst_data)
        return render_to_response('ztree/swan.html', locals(), context_instance=RequestContext(request))

    if request.GET.get(""options"") == ""doc"":
        data = Project.objects.get(pk=business_name)
        # return render_to_response('ztree/swan.html', locals(), context_instance=RequestContext(request))
        return render_to_response('markdown/index.html', locals(), context_instance=RequestContext(request))

    if request.GET.get(""options"") == ""highstate"":
        project = Project.objects.get(uuid=business_name)
        host_list = Host.objects.filter(business=project)
        return render_to_response('ztree/highstate.html', locals(), context_instance=RequestContext(request))

    if request.GET.get(""options"") == ""monitor"":
        return render_to_response('ztree/zabbix_count.html', locals(), context_instance=RequestContext(request))

    if request.GET.get(""options"") == ""salt"":
        return render_to_response('ztree/saltstack.html', locals(), context_instance=RequestContext(request))


    if request.GET.get(""options"") == ""project"":
        ip_list = []
        server_list = {}
        line_name = Line.objects.get(pk=business_name)
        business_data = Project.objects.filter(line=business_name)

        for i in business_data:
            node = Host.objects.filter(business=i, idle=True)
            for k in node:
                if k.eth1 not in ip_list:
                    ip_list.append(k.eth1)
                    server_list[str(k.uuid)] = k.eth1
        count = len(ip_list)
        return render_to_response('ztree/project.html', locals(), context_instance=RequestContext(request))

    if request.GET.get(""options"") == ""types"":
        get_env = request.GET.get(""name"")
        business_data = Project.objects.filter(pk=business_name)
        server_list = Host.objects.filter(business=business_data, env=get_env).order_by(""-create_time"")

        count = server_list.count()
        return render_to_response('ztree/ztree.html', locals(), context_instance=RequestContext(request))

    if request.GET.get(""options"") == ""service"":
        s = []
        bus_data = Project.objects.get(uuid=business_name)
        server_list = Host.objects.filter(business=bus_data, idle=True).order_by(""create_time"")

        for i in server_list:
            t = i.service.all()
            for b in t:
                if b not in s:
                    s.append(b)

        tag = request.GET.get(""tgt"", False)

        if tag:
            service_all = Service.objects.get(name=tag)
            server_list = Host.objects.filter(service=service_all, business=bus_data)

        return render_to_response('ztree/ztree_service.html', locals(), context_instance=RequestContext(request))

    count = server_list.count()
    return render_to_response('ztree/ztree.html', locals(), context_instance=RequestContext(request))


@login_required
def CdnCache(request):
    """"""
    树请求验证
    :param request:
    :return:
    """"""
    service = request.GET.get(""services"")
    get_token = str(request.GET.get(""token""))
    uuid = str(request.GET.get(""uuid""))

    sum_token = str(hashlib.sha1(request.user.username + auth_key + service + time.strftime('%Y-%m-%d', time.localtime(
            time.time()))).hexdigest())

    content_status = True
    if get_token != sum_token:
        content_status = False

    idc_data = IDC.objects.get(uuid=uuid)
    service_all = Service.objects.get(name=service)
    server_list = Host.objects.filter(idc=idc_data, service=service_all)
    business_name = idc_data.name
    service_tag = service

    return render_to_response('ztree/service.html', locals(), context_instance=RequestContext(request))


@login_required
def CdnIdc(request):
    """"""
    树请求验证
    :param request:
    :return:
    """"""
    get_token = str(request.GET.get(""token""))
    uuid = str(request.GET.get(""uuid""))
    idc_data = IDC.objects.get(uuid=uuid)

    sum_token = str(hashlib.sha1(request.user.username + auth_key + idc_data.name + time.strftime('%Y-%m-%d',
                                                                                                  time.localtime(
                                                                                                          time.time()))).hexdigest())

    content_status = True
    if get_token != sum_token:
        content_status = False

    server_list = Host.objects.filter(idc=idc_data)
    business_name = idc_data.name

    return render_to_response('ztree/idc.html', locals(), context_instance=RequestContext(request))


class Ztree_class(object):
    """"""
    ztree 类
    """"""

    def __init__(self, project_name, user):
        self.project_name = project_name
        self.user = user

    def monitor(self):
        return True

    def swan(self):
        rst_data = {}

        user_info = CustomUser.objects.get(first_name=self.user)

        myform_rst = Project.objects.get(uuid=self.project_name)

        rst = project_swan.objects.filter(project_name_id=myform_rst.uuid)

        """"""
        所有当前项目发布名称放到一个list中
        """"""

        swan_name_list = [i.swan_name for i in rst]
        swan_push = user_info.project_swan_set.all()
        user = CustomUser.objects.get(first_name=self.user)

        if user.is_superuser:

            for i in rst:
                rst_data[str(i.uuid)] = i.swan_name

        else:
            swan_push = user_info.project_swan_set.all()
            for i in swan_push:
                if i.swan_name in swan_name_list:
                    rst_data[str(i.uuid)] = i.swan_name

        host_list = myform_rst.host_set.all()
        content = {""swan_name"": rst_data, ""host"": host_list}

        return content

    def highstate(self):
        project = Project.objects.get(service_name=self.project_name)
        # server_list = project.host_set
        host_list = Host.objects.filter(business=project)

        return True


@csrf_exempt
def ZtreeIndex(request):
    """"""

    :param request:
    :return:
    """"""
    if request.method == 'POST':
        otherParam = request.POST.get(""otherParam"")
        status = request.POST.get(""status"")
        line_id = request.POST.get(""line_id"")

        try:
            name = request.POST.get(""name"")
            id = request.POST.get(""id"")

        except:
            name = False

        if not name:
            ztree = ztree_tag(request.user.username)
            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))

        elif int(status[0]) == 1:
            ztree = []
            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))

        else:
            ztree = []
            bus_data = Project.objects.get(service_name=name)
            server_list = Host.objects.filter(business=bus_data).order_by(""create_time"")

            s = []
            for i in server_list:
                t = i.service.all().values()
                for b in t:
                    if b not in s:
                        s.append(b)
            tree_id = 0
            for i in s:
                tree_id += 1

                token = hashlib.sha1(request.user.username + auth_key + i.get(""name"") + time.strftime('%Y-%m-%d',
                                                                                                      time.localtime(
                                                                                                              time.time()))).hexdigest()

                ztree.append({""id"": tree_id, ""status"": 3, ""line_id"": line_id, ""name"": i.get(""name""), ""token"": token,
                              ""t"": i.get(""name""), ""business"": bus_data.service_name})

            return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4))
    content = {""status"": 403, ""message"": ""auth error""}
    return HttpResponse(json.dumps(content, ensure_ascii=False, indent=4))
",css,bash,0.9200737502992833,0.07867746419970366,0.00019869188081459357,1.5812080899346867e-05,3.057715234467082e-05,9.274039767741564e-05,0.000624921230227088,0.00025618602735408736,2.9856731695812575e-05
"import requests
from bs4 import BeautifulSoup 

def scrap_cnn():
 #make a request to CNN's homepage
 response = requests.get('https://cnn.com')

 # parse the html content
 soup = BeautifulSoup(response.text,'html.parser')
 
 # extract all the headline elements
 headlines = soup.find_all('h3', class_ = 'cd__headline')

 # scrape the text from the elements
 news_headlines = [headline.text for headline in headlines]
 
 # return the list of headlines
 return news_headlines


if __name__ == ""__main__"":
 headlines = scrap_cnn()
 
 for headline in headlines:
 print(headline)",python,html,0.00014980104184096496,0.33460878282148143,0.6103764373806045,2.005156344289842e-05,0.004484192284433088,0.00011480268900332282,0.01633045045708006,0.018868902868408,0.01504657889370569
"# code to display the result of a mathematical expression

expr = '(3 + 4) * 5'

# Evaluate the expression
result = eval(expr)

# Print the result
print(""Result of the expression: "" + str(result))",python,typescript,0.00020223666844905057,0.006479627945978933,0.0006587559449685906,1.67412284778508e-05,0.023878094347055435,3.0046591004204507e-06,0.45669048958754854,0.0027340094728200855,0.509337040145601
"import re
import nltk
from sklearn.feature_extraction.text import TfidfVectorizer

# Preprocess the tweet
def preprocess(text):
  text = text.lower() 
  text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
  tokens = nltk.word_tokenize(text)
  tokens = [token for token in tokens if token not in stopwords.words('english')]
  text = "" "".join(tokens)
  return text

# Create TF-IDF vectorizer
tfidf_vectorizer = TfidfVectorizer()

# Vectorize the sample tweet
vectorized_text = tfidf_vectorizer.fit_transform(preprocess(tweet)).todense()

from sklearn.cluster import KMeans

# Create a cluster of tweets
number_of_clusters = 3
clusters = KMeans(n_clusters=number_of_clusters, random_state=0).fit(vectorized_text)

# Print the cluster for the sample tweet
print(clusters.predict(vectorized_text))",sql,python,0.010905872065205704,0.2114624066203791,0.004773667529398792,1.502938998969671e-05,0.0011119783043822427,0.0004602432828407617,0.6272974541599218,0.1081438521647143,0.03582949648316768
"string = ""abcabc""

# To store unique substring
list_unique_substrings = []
# Iterating through the length of string
for index_i in range(len(string)):
    # Iterating through the range of index_i and string length
    for index_j in range(index_i, len(string)):
        # Slice the substring from index_i to index_j
        substr = string[index_i: index_j + 1]
        # check if substring is already in list
        if substr not in list_unique_substrings:
            list_unique_substrings.append(substr)

# Print the list of unique substrings
print(list_unique_substrings)",python,java,1.5886172365170066e-10,2.6831772503860423e-06,6.491842303937139e-07,0.9931574096009573,5.677308376409077e-09,0.000224672466597076,0.0034022187017046152,0.002974345725428125,0.00023801530766190217
"import jsonrpclib

from flask import Flask

app = Flask(__name__)

@app.route(""/api"", methods=['POST'])
def handle():
    # Decode and parse the request
    req = jsonrpclib.loads(request.data)

    # Call the correct method
    method = req['method']
    params = req['params']
    result = globals()[method](*params)

    # Encode and return the response
    response = jsonrpclib.dumps({'result': result})
    return response

def reduce(words):
    return ''.join(words)",css,css,3.932176563746298e-05,0.9561132284651607,0.0005667481435139216,0.0008701813715249434,0.0012469198053558033,2.4399851865765407e-08,0.013991922240751081,0.027042211360090898,0.00012944244811338213
"def bubbleSort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]",python,matlab,8.703703230280418e-08,6.747735962266248e-08,2.3995393034894098e-08,4.679856968559074e-09,7.797916446144237e-08,0.9993346972707106,0.0006631145532550117,3.965256934520777e-09,1.9230419712837462e-06
"def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
 if rev == s:
 return True
 return False

if isPalindrome(""racecar""):
 print('String is a palindrome')
else:
 print('String is not a palindrome')",sql,java,4.6315114426308683e-07,0.0007401518001284692,0.0007470614521235366,0.8509131542026422,7.562276658377769e-08,5.916163534968714e-06,0.1019307140017937,0.04562038015327141,4.2083452594706996e-05
"import random
import time

# Create classes
class Player:
    def __init__(self, name):
        self.name = name
        self.hp = 100
        self.position = [0, 0]

class Enemy:
    def __init__(self, name):
        self.name = name
        self.hp = random.randint(50, 100)

# Initialize globals
player = Player(input(""What is your name? ""))
enemies = []
done = False

# Game loop
while not done:
    print(""You are in room ({}, {})"".format(player.position[0], 
                                            player.position[1]))
    print(""1. Move"")
    print(""2. Check HP"")
    print(""3. Exit Game"")
    action = int(input(""What do you want to do? ""))

if action == 1:
    # Movement
    x = int(input(""Move how many units on the x-axis? ""))
    y = int(input(""Move how many units on the y-axis? ""))
    player.position[0] += x
    player.position[1] += y

elif action == 2:
    # Check HP
    print(""Your HP is {}"".format(player.hp))

elif action == 3:
    # Exit Game 
    done = True

# Generate enemies randomly
if random.random() < 0.1:
    enemies.append(Enemy(""Rat""))
    print(""An enemy appeared!"")

# Combat
for enemy in enemies:
    print(""A {} approaches!"".format(enemy.name))
    print(""What do you do? 1. Fight 2. Flee"")
    action = int(input("">""))

    if action == 1:
        fight(player, enemy)",python,java,0.008428920247513749,0.026003784214977895,0.004940057682024046,0.7912145181369612,1.2273408523453949e-06,4.199916449497112e-07,0.13743571820907682,0.030911108771106692,0.001064245405842182
"def powersOfTwo(n):
    powers = []
    for i in range(n + 1):
        powers.append(2**i)
    return powers

n = 8
print(powersOfTwo(n))",python,matlab,0.0002409279899024816,0.0002780706363647356,0.001016421167660237,3.5736976271240686e-05,6.664447835137492e-05,0.7628890734607169,0.23488907972362158,0.0002866009198718407,0.00029744464723947085
"def binary_search(arr, num):
    # define start and end point
    start = 0 
    end = len(arr)-1

    while start <= end:
        mid = (start + end)//2

        # check if num is present at mid 
        if arr[mid] == num: 
            return mid 

        # If num is greater, ignore left half 
        elif arr[mid] < num: 
            start = mid + 1

        # If num is smaller, ignore right half 
        else: 
            end = mid - 1
  
    # If we reach here, then the element was not present 
    return -1",python,matlab,3.994330095365586e-06,1.0466606794221025e-07,5.851750996048449e-06,8.629467509127016e-07,2.4119996035805054e-06,0.9857434385184615,0.014220694304327342,3.3167620586011668e-06,1.9324721638723692e-05
"class Calculator:
    def __init__(self):
        pass
    
    def add(self, a, b):
        return a + b
    
    def subtract(self, a, b):
        return a - b
    
    def multiply(self, a, b):
        return a * b
    
    def divide(self, a, b):
        if b == 0:
            raise ValueError(""Cannot divide by zero."")
        else:
            return a/b",python,python,0.0025424274520789623,0.0006510245572295836,0.0002620766772720953,2.5002128336542997e-05,2.2888983758529162e-05,2.1799932674107893e-07,0.9925521164100438,0.0039006731696379668,4.3572622315684785e-05
"import re

url_pattern = re.compile(
    r'^(?:http|ftp)s?://' # http:// or https://
    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
    r'localhost|' #localhost...
    r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
    r'(?::\d+)?' # optional port
    r'(?:/?|[/?]\S+)$', re.IGNORECASE)",python,html,0.05253915828235563,0.015492402662150496,0.4585911496417222,0.0006221014374444856,0.0067907816533840735,0.0016997972280705736,0.44229189004233305,0.0011166318803587012,0.020856087172180886
"import flask
from flask import jsonify, request

#creating a Flask app
app = flask.Flask(__name__)

#creating an array of courses
courses = [
    {   ""id"":1, ""topic"":""Web Development"", ""language"":""Python"",""price"":50},
    {   ""id"":2, ""topic"":""AI & ML"", ""language"":""R"",""price"":150},
    {   ""id"":3, ""topic"":""Data Science"", ""language"":""Python"",""price"":100},
    {   ""id"":4, ""topic"":""Machine Learning"", ""language"":""Python"",""price"":200}
]

#creating a search API
@app.route(""/search/"", methods=[""GET""])
def search():
    #returning all courses
    if request.args:
        data = []
        topic = request.args.get('topic')
        language = request.args.get('language')
        price_range = request.args.get('price')
        for course in courses:
            if topic == course['topic'] and language == course['language'] and (int(price_range) >= int(course['price'])):
                data.append(course)
        return jsonify({""data"": data})
    else:
        return jsonify({""data"": courses})

#running the API
if __name__ == ""__main__"":
    app.run()",css,css,0.00034132754886214496,0.9609473815613333,0.005360551780878966,0.0007931591782632921,0.00010508517988153508,4.017603192908535e-06,0.0018287442474463167,0.0002456319616660242,0.030374100938475472
"def dec_to_bin(num):
    binary = """"
    while num > 0:
        remainder = num % 2
        binary = str(remainder) + binary
        num = num // 2
    return binary",python,matlab,1.3809622193001259e-05,5.071174811901672e-08,5.40926595961215e-05,5.169439096470512e-06,1.520404312296428e-05,0.9876232297910938,0.012253000202809762,1.4248090439135356e-05,2.1195439900554913e-05
"def filter_numeric(input_list): 
    
    num_list = [] 
  
    for item in input_list:
        if type(item) == int or type(item) == float: 
            num_list.append(item) 
   
    return num_list 
  
input_list = [4, 2, 1, 15.6, 'p', 'y', 5.8] 
print(filter_numeric(input_list)) 
#Output: [4, 2, 1, 15.6, 5.8]",python,python,0.025831169211132533,0.0961128090172675,0.24601181054713792,0.008385636559516926,0.07134234726661527,0.002055951010024712,0.5496963764096474,0.0003478140016364326,0.00021608597702120307
"def triangle_area(A, B, C): 
    return abs((A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0) 
  
# Driver Code 
A = (2, 0) 
B = (-2, 0) 
C = (0, 4) 
  
print(""Area of Triangle is"", triangle_area(A, B, C))",python,python,0.0022751242068007565,0.011330340885023972,0.005303305197753698,0.007579809497915275,0.02355782556011827,8.38091461850303e-05,0.8540496597440143,0.004361341699060755,0.0914587840631281
"# Program to print the squares of all 
# the numbers from 1 to the given number 
  
# Positive number taken as an input 
num = 5
  
# Iterate from 1 to num 
for i in range(1, num+1): 
  
    # Calculate the square 
    value = i**2
      
    # Print the value 
    print(value)

# Output:
# 1
# 4
# 9
# 16
# 25",python,matlab,0.0010346381904540129,5.711657052634762e-06,4.546140731387977e-05,1.2422334780039396e-07,0.022073928841721074,0.9728818262744853,9.061924049100778e-06,8.697342441534901e-06,0.003940550139134582
"def factorial(n):
  if n <= 1:
    return 1
  else:
    return n * factorial(n-1)

print(factorial(5)) # 120",python,python,6.287172337316154e-05,0.0001881700615639214,7.812266996712142e-05,2.6971381796844124e-06,5.742937956081616e-05,2.7273884302655253e-05,0.9995097845882682,4.6581101841926826e-05,2.7069452942537394e-05
"def is_substring(s1, s2):
 # check for empty strings 
 if s1 == '' or s2 == '':
 return False
 
 # check if s2 is a substring of s1
 if s1.find(s2) > -1:
 return True
 
 return False",python,python,0.0004959329644608906,0.00271762587485962,0.0023417594709212153,5.085216316102859e-05,0.0011124754455991367,0.0004598310459350655,0.9913679931369913,0.0005335929130388996,0.0009199369850330454
"from org.myrobotlab.service import Arduino
from org.myrobotlab.service import Servo

# Create serial connection to Arduino
arduino = Arduino(""Arduino1"", ""COM6"") # COM6 is the serial port

# Connect servos to arduino 
baseServo = Servo(arduino, ""baseServo"")
armServo = Servo(arduino, ""armServo"")

# Move servos
baseServo.moveTo(90)
armServo.moveTo(180)

# Move to a specific point
baseServo.moveTo(10)
armServo.moveTo(20)",python,python,0.22578484872424395,0.14328911602850913,0.032667635369442415,0.0004096506269169048,0.058115648120917324,0.015893781374253606,0.31969584414774666,0.02400923832556676,0.18013423728240321
"def levenshtein_distance(s1, s2):
    n = len(s1)
    m = len(s2)

    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        dp[i][0] = i
    for j in range(1, m + 1):
        dp[0][j] = j

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            cost = 0 if s1[i - 1] == s2[j - 1] else 1
            dp[i][j] = min(dp[i - 1][j] + 1, 
                            dp[i][j - 1] + 1, 
                            dp[i - 1][j - 1] + cost)
    return dp[-1][-1]",python,matlab,2.6731125912476025e-05,6.35294025487158e-06,0.00011927888985585703,3.190927451229904e-06,2.7573774551244216e-06,0.6709131274955191,0.3278706322068073,0.0010220754052873125,3.585363145661618e-05
"def sum_of_divisors(n): 
    divisors = [i for i in range(1,n+1) if n%i == 0] 
    return sum(divisors) 
  
n = 24
print(""Sum of the positive divisors of 24 is:"",sum_of_divisors(n))",python,matlab,0.002446963404578457,0.0020746433146551866,0.022035370797329926,0.11190087667704765,0.03112444797699983,0.49019655416599506,0.260809240330872,0.006800415356567207,0.0726114879759547
"def is_in_range(n, lower, upper):
    return lower <= n <= upper",python,python,0.002440111509645928,0.007355501571981467,0.008711630554595649,0.0005564611666161402,0.001944662312997844,0.0007690892831718813,0.972920472023909,0.0017669105224735354,0.00353516105460859
"import requests
from bs4 import BeautifulSoup

# Specify a list of keywords
keywords = [""web crawler"", ""python"", ""programming""]

# Loop through the list of keywords
for keyword in keywords:
    page = requests.get(f""https://www.google.com/search?q={keyword}"")

    # Parse the response using BeautifulSoup
    soup = BeautifulSoup(page.content, 'html.parser')

    # Search for the given keyword
    result_div = soup.find_all('div', attrs = {'class': 'g'}) 

    # Print the results
    for item in result_div:
        title = item.find(""h3"").text
        link = item.find(""a"").get(""href"")

        print(f""Title: {title}"")
        print(f""Link: {link}"")
        print()",css,html,8.753705074896413e-10,0.013855785610537436,0.9218483195836618,0.000240761922002651,0.006993178046445093,4.266764928326307e-06,5.106617839466476e-05,8.43089210610696e-05,0.05692231209759842
"import random

random_number = random.uniform(1, 2)
print(random_number)",python,python,0.0025181977046415936,0.0054085821382799885,0.0030408165821930095,7.70700220907171e-05,0.0006715496311865884,0.00016165576947867763,0.9507377742251784,0.036364227194291415,0.0010201267326595885
"def insert_element(list, index, element):
    list.insert(index + 1, element)
    return list",sql,matlab,0.0033794718977745593,0.0004960582101618241,0.005604029251392638,0.00023502207064105912,0.002945880557477243,0.8208100622384135,0.1644141592894619,0.0003588047578641217,0.0017565117268134227
"def find_common_elements(lst1, lst2):
    result = []
    set_2 = set(lst2)
    for elem1 in lst1:
        if elem1 in set_2:
            result.append(elem1)
    return result",python,python,0.0037273448500964577,0.057336642689976534,0.007408407733884163,0.0005135016420210704,0.0033798238988713156,0.10323394300968017,0.8112241377625221,0.0066843334883195295,0.006491864924628718
"from collections import defaultdict

text = 'The quick brown fox jumps over the lazy dog. The fox barked at the dog.'

words = defaultdict(int)

 for word in text.split():
  if len(word) >= 3:
   words[word] += 1

print(words)",python,python,0.08364927221834897,0.028885913137483163,0.0058050303283827,0.0002598794304183256,0.0018988394849965818,3.459320967454691e-05,0.8225593045877704,0.04120274045450069,0.01570442714842472
"def quick_sort(array):
    if len(array) <= 1:
        return array

    pivot = array[0]
    left = []
    right = []

    for element in array[1:]:
        if element <= pivot:
            left.append(element)
        else:
            right.append(element)

    return quick_sort(left) + [pivot] + quick_sort(right)",python,matlab,5.928577446398967e-09,1.2984282183161977e-09,7.860782135824755e-10,1.5018857703650066e-10,1.9188942766291447e-10,0.9999999909964657,6.102362053541149e-11,5.70508825430885e-12,5.816438237898718e-10
"# Import the necessary libraries
import json 
from collections import OrderedDict 
import pandas as pd

# Load the data 
with open('collection1.json') as json_file:
    collection1 = json.load(json_file)

with open('collection2.json') as json_file:
    collection2 = json.load(json_file)

# Create a DataFrame from both collections
df1 = pd.DataFrame(collection1)
df2 = pd.DataFrame(collection2)

# Calculate the probability of matching items
match_probs = {}

for item1 in df1.item.unique():
    for item2 in df2.item.unique():
        item1_obs = df1.loc[df1['item'] == item1]
        item2_obs = df2.loc[df2['item'] == item2]
        match_prob = (len(item1_obs) * len(item2_obs)) / (len(df1) * len(df2))
        match_probs[(item1,item2)] = match_prob

# Print the results
match_probs = OrderedDict(sorted(match_probs.items(), key=lambda x: x[1], reverse=True))
print(match_probs)",python,css,0.0005518168802428323,0.9298061803846086,0.00079843778004317,4.357583243933888e-07,0.00017416538748341078,4.5302517658503405e-06,0.061311320191117145,6.269757597328277e-05,0.007290415790441344
"def is_rotation(str1, str2):
    return len(str1) == len(str2) and str2 in str1 + str1

# testing
print(is_rotation('hello', 'lohel'))  # prints True",python,python,0.010253223856520804,0.0009392060558339798,5.610991486955906e-06,7.307238742865334e-07,0.20887404587724742,7.614104263371739e-05,0.7752698870451379,0.0027017719196390007,0.001879382487625726
"def find_largest_two(input_array):
    largest1, largest2 = -float(""inf""), -float(""inf"")
    if len(input_array)<2:
        return
    for el in input_array:
        if el > largest1:
            largest2 = largest1
            largest1 = el
        elif el > largest2:
            largest2 = el
    return largest1,largest2",python,python,0.011780804114487375,0.02625243292068593,0.007788556830918659,0.0007158409421409461,0.0025080395837022767,0.026496317588285984,0.9137953317128169,0.004908992707536906,0.005753683599424909
"string1 = ""Hello""
string2 = ""World""

concatenatedString = string1 + string2

print(concatenatedString) # ""HelloWorld""",python,python,0.14119064151031901,0.0032634927041347837,0.0080095932566496,1.6597523745085227e-08,0.049667323116526,0.000397401040126133,0.794400040226647,0.0009201142752727896,0.002151377272801005
"def countCharacters(string): 
    # Create dictionary to return  
    # count of each character 
    str_dict = {} 
  
    # Count frequency of each 
    # character of the string 
    for i in string: 
        if i in str_dict: 
            str_dict[i] += 1
        else: 
            str_dict[i] = 1
  
    return str_dict 

# Driver code 
string = ""String Counting""

# Print result 
print(countCharacters(string))",python,java,7.660883434189346e-17,2.1626591067823494e-08,2.442301135063556e-10,0.9999946359205331,8.190731793176138e-17,3.9237987141086223e-13,3.6605513717359836e-06,1.6758024224425485e-06,5.854458999855877e-09
"def reverse_array(arr):
    return arr[::-1]",python,python,0.00018764107703423658,0.0011453120463082382,0.00022144022327544546,7.48911265115973e-05,0.00011559648347594524,0.019919328413906125,0.9780683147912096,2.124182895352122e-05,0.00024623400932541074
"lastTwoElements = [1, 2, 3, 4, 5][-2:]

print(lastTwoElements)
#Output: [4, 5]",python,bash,0.8026236146074905,0.0008397749900409352,0.0005062829531843107,1.291344181867039e-08,1.1834082335103283e-06,8.397797041716557e-10,0.19602821362538622,9.166516547547818e-07,1.078817363680664e-11
"def letterToNumber(input_string):
    result_string = """"
    for letter in input_string:
        result_string += str(ord(letter)-64)
    return result_string

input_string  = ""Data Science""
substituted_string = letterToNumber(input_string)
print(""Substituted string : "",substituted_string)",python,python,6.365839328242966e-05,0.006502476187611736,0.006052958442870374,0.009339937014429625,0.00010560701612779038,0.0007829454460255195,0.9694261071873038,0.006267953756441416,0.0014583565559073378
"import requests
from bs4 import BeautifulSoup
 
# Target page
url = 'https://example.com/products.html'
 
# Get page content
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')
 
# Scrape product details
items = soup.find_all(class_='item')
 
for item in items:
 # Title
 title = item.find(class_='title').get_text()
 
 # Price
 price = item.find(class_='price').get_text()
 
 # Description
 description = item.find(class_='description').get_text()
 
 # Image URL
 image_url = item.find('img', src=True)['src']
 
 # Print details
 print(title)
 print(price)
 print(description)
 print(image_url)
 print('\n')",python,css,1.1316383521883293e-10,0.6978659584736865,0.30198436709819965,7.150456206546965e-05,5.687113314219364e-06,7.790707519315719e-09,7.156963451101342e-05,8.679639964122804e-07,3.7250355356432195e-08
"from sklearn.cluster import KMeans

# create KMeans object
kmeans = KMeans(n_clusters=3)

# fit the data
kmeans.fit(data)

# predict the clusters
predicted_clusters = kmeans.predict(data)",python,python,0.03436610196033344,0.17041747205585148,0.02807264209447994,0.0003094438255608762,0.004413868942946582,0.001055066497841865,0.5157431673578172,0.00026559223926231465,0.24535664502590637
"def Fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
# First Fibonacci number is 0 
   elif n==1: 
      return 0
# Second Fibonacci number is 1 
   elif n==2: 
      return 1
   else: 
      return Fibonacci(n-1)+Fibonacci(n-2) 

# Input number of terms in the Fibonacci sequence
nterms = 10

# Check if the input number is valid
if nterms <= 0:
   print(""Incorrect input"")
else:
   print(""Fibonacci sequence:"")
   for i in range(nterms):
       print(Fibonacci(i))
       
# This can be used to solve the Fibonacci Sequence puzzle
# The puzzle is -
# Given a number n, find the nth Fibonacci number
# That can be easily done using the above code",python,python,0.0001275755012784568,7.946313147141952e-05,0.00010032565673859405,5.897526582919305e-06,0.012632793805329626,4.577659991922937e-05,0.6189830512038209,0.00015244704177506656,0.36787266953308373
"list = [(""a"", 1), (""b"", 2), (""c"", 3), (""d"", 4)]

d = dict(list)

print(d)
# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}",css,python,0.026524928532700394,0.07480408174419366,0.023832227095625755,0.0001629995982535313,0.003497238318294518,0.0027642525566971394,0.8563867586724317,0.011906780251529463,0.00012073323027375397
"def longestConsecutive(string):
 max_consecutive = """"
 current_consecutive = """"

 for char in string:
 if current_consecutive == """" or current_consecutive[-1] == char:
 current_consecutive += char
 else:
 if len(current_consecutive) > len(max_consecutive):
 max_consecutive = current_consecutive
 
 current_consecutive = char

 if len(current_consecutive) > len(max_consecutive):
 max_consecutive = current_consecutive

 return max_consecutive

string = ""aaaaaaabbbccdddee""

print(longestConsecutive(string))",python,java,6.709540178594706e-14,2.9570936691500075e-07,1.1623914794902805e-08,0.9992087909598781,1.6390045130195108e-16,3.25765867425201e-09,0.00078636977391591,4.5277058650064115e-06,9.693331132253987e-10
"pattern = ""ca*""

found_words = []

for word in words:
    if fnmatch.fnmatch(word, pattern):
        found_words.append(word)

print(found_words)

# Output: [""cat"", ""camel""]",python,matlab,0.20617459489706025,0.025139166293926873,0.14473003242386323,2.373533222723665e-05,0.0005745572871477324,0.3449543305867281,0.25873564469552673,0.01950732163109453,0.0001606168524251906
"def bits_required(num):
    num_bits = 0
    if num == 0:
        num_bits = 1
    else:
        while num > 0:
            num_bits += 1
            num >>= 1
    return num_bits",python,matlab,6.483829616138416e-13,1.7338342782539242e-18,1.7970584928155714e-12,1.6384602890203429e-13,1.527339963762991e-13,0.9999999998065527,1.896342290119894e-10,3.727472018995243e-13,6.783198809733302e-13
"import numpy as np

# Calculate the soil moisture
def calculate_soil_moisture(temperature, humidity, soil_type):
    # Calculation for sandy soil
    moisture = 0
    if soil_type == ""sandy"":
        moisture = (temperature - 10) * humidity * 0.5
    # Calculation for loamy soil
    elif soil_type == ""loamy"":
        moisture = (temperature - 20) * humidity * 0.6
    # Calculation for clay soil
    elif soil_type == ""clay"":
        moisture = (temperature - 30) * humidity * 0.8
    # Other types
    else:
        moisture = 10
    # Calculate irrigation amount
    if moisture > 4:
        # No irrigation needed
        irrigation_amount = 0
    else:
        # Irrigate the land
        irrigation_amount = np.abs(4 - moisture)
    return irrigation_amount",python,python,0.11189304810335973,0.2581254275936658,0.005060260380569421,0.0002496039530999427,0.007305938280925581,0.08810828789816756,0.5032539213217387,0.0017651493760987421,0.024238363092374628
"import re

def generate_question(sentence):
 tokens = re.findall('\w+', sentence)
 if tokens[0] == 'The':
  question = 'What is' + ' ' + ' '.join(tokens[1:]) + '?'
 else:
  question = 'What is the' + ' ' + ' '.join(tokens) + '?'
  
 return question",sql,sql,0.007161061278606702,0.019162562110647707,0.26440666733607726,0.00022066122943949578,0.00939905866774853,0.001707678615262499,0.11502022823333115,0.5774099511443646,0.005512131384522126
"from html.parser import HTMLParser

class LinkParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        if tag == 'a':
            for (attrs,value) in attrs:
                if attrs=='href':
                    print(value)

parser = LinkParser()
parser.feed(html)",python,html,4.044994187243173e-05,0.002414884905446824,0.9768975174626755,9.049834941835934e-07,7.10906071822847e-06,0.020575088564109452,6.405063019588431e-07,3.850167960623091e-05,2.490289577519564e-05
"for i in range(len(numbers)-1, -1, -1):
    print(numbers[i])",python,python,2.318680834048131e-07,1.00033377420532e-07,3.79790946541136e-06,0.0003971452820214563,3.652954190053656e-07,3.144996459397836e-07,0.999593672645428,4.110992752087813e-06,2.614738074319439e-07
"def add_numbers(a, b):
 return a + b",python,python,0.0012301944068195585,0.003987747991535325,0.002902158679459525,0.00031218867602005957,0.000913777784127995,0.00021648270223205662,0.9879523945636358,0.000831341461703893,0.0016537137344656732
"import sqlite3

# create connection
conn = sqlite3.connect(""example.db"")
c = conn.cursor()

# create table
c.execute("""""" CREATE TABLE IF NOT EXISTS example (
              id INTEGER PRIMARY KEY,
              title TEXT,
              content TEXT
            ) """""")

# insert row
c.execute(""INSERT INTO example(title, content) VALUES (?,?)"", (title, content))

# edit row
c.execute(""UPDATE example SET content=? WHERE id=?"", (new_content, id))

# commit changes
conn.commit()

# close connection
conn.close()",sql,sql,8.723070712774096e-08,0.00014214546127647938,0.01038359935128886,1.8886539070939822e-05,2.9828264985241552e-06,9.654607904367007e-08,1.155006014737403e-06,0.9894504011086486,6.459304158720135e-07
"class Die:
    def __init__(self):
        self.faces = [1, 2, 3, 4, 5, 6]

    def roll(self):
        return random.choice(self.faces)",python,python,3.008856413980039e-05,0.0017198362867252893,0.015156551794260696,3.784975984716303e-06,8.880060622574267e-06,3.625927323867159e-07,0.6969670697615664,0.2860320509115998,8.137505236850812e-05
"def initialize_dict(size):
    my_dict = {}
    for i in range(size):
        my_dict[i] = None
    return my_dict",python,python,0.0005903178780391882,0.02898920611723703,0.0033065210728196255,0.00013653269842460556,0.00011307339203694103,0.10322505403716051,0.8615154982794578,0.00122567848175662,0.0008981180430674689
"def gradient_descent(lr, x, y):
    m_curr = b_curr = 0 
    iterations = 10000
    n = len(x)

    for i in range(iterations): 
        y_predicted = m_curr*x + b_curr
        cost = (1/n) * sum([val**2 for val in (y-y_predicted)]) 
        md = -(2/n)*sum(x*(y-y_predicted))  
        bd = -(2/n)*sum(y-y_predicted) 
        m_curr = m_curr - lr * md 
        b_curr = b_curr - lr * bd 

    return m_curr, b_curr",python,python,0.002680310315371372,0.00724526528105306,0.01871598490491675,0.006298452150532375,0.002117737742688385,0.2874651143675369,0.6607971745771521,0.009873315818604246,0.004806644842144704
"def simple_calculator():
    num1 = float(input(""Enter the first number: "")) 
    num2 = float(input(""Enter the second number: ""))  
    oper = input(""Enter your operation (+, -, *, /): "")  
      
    if oper == ""+"":
        print(""Result:"", num1 + num2)  
    elif oper == ""-"":
        print(""Result:"", num1 - num2)  
    elif oper == ""*"":
        print(""Result:"", num1 * num2)  
    elif oper == ""/"":
        print(""Result:"", num1 / num2)  
    else:
        print(""Invalid operation"")

simple_calculator()",python,python,2.327887603189298e-05,0.000730474326933896,3.9722628535261486e-05,5.189375760684592e-08,4.804851461270752e-06,5.027084014370286e-07,0.9990368248614043,0.00016089678460363358,3.443068870593599e-06
"import json
from flask import Flask, request

app = Flask(name)

@app.route('/webhook', methods=['POST'])
def webhook():
 payload = json.loads(request.data)
 print(payload)
 return ""OK""

if name == 'main':
 app.run(debug=True)",python,css,0.008315678098334231,0.9894862281280078,0.00039567165865495593,0.0001056386678724824,6.361585454776652e-07,2.75403315631291e-06,0.0014916978093527423,0.0001917974283310697,9.89801774501744e-06
"# Import libraries
import pandas as pd
from sklearn.svm import SVC

# Set up data
data = pd.DataFrame({
    'features': [0.24, 0.34, 0.37],
    'label': ['spam']
})

# Separate data into training and testing
X_train = data.drop('label', axis=1)
y_train = data.label

# Train the model
model = SVC()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_train)

# Print accuracy
print(accuracy_score(y_train, predictions))",css,css,0.03479426410489456,0.7571112361302513,0.03337969177294967,1.3901029776983703e-05,8.573169147879613e-05,0.00012491117188573837,0.1591753313946684,0.00019525719066080263,0.015119675513433715
"num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))

if (num1 % num2 == 0):
    print(""The number %s is divisible by %s."" % (num1, num2))
else:
    print(""The number %s is not divisible by %s."" % (num1, num2))",python,python,0.0005445977424794198,0.0014854499866529818,0.00033045065129809606,0.0013623273568048786,0.00087760560329932,8.973341955956248e-07,0.9947395592533547,0.0005976751518204182,6.143692009462991e-05
"def print_pattern(n): 
      
    k = 0
    for i in range(1, n+1): 
        # logic to print pattern
        for j in range(i, n+1): 
            print(""* "", end="""") 
        k = 0
        for j in range(1, i*2): 
            if k == 0: 
                print(i, end="""")
                k += 1
            else: 
                print(""$"", end="""")
        print() 
   
if __name__ == '__main__':
    print_pattern(4)",python,python,1.8173632299498648e-07,3.0237069513245934e-07,3.469375274359376e-06,1.1628918889832423e-08,7.698890848331778e-08,0.15005233685190592,0.8499291770559189,1.4049508842282763e-05,3.944832130712738e-07
"def find_most_frequent(lst):
    max_count = 0
    most_frequent = None
    count_dict = {}
    for elem in lst:
        if elem not in count_dict:
            count_dict[elem] = 1
        else:
            count_dict[elem] += 1
            
        if count_dict[elem] > max_count:
            most_frequent = elem
            max_count = count_dict[elem]
            
    return most_frequent, max_count",python,python,0.005709523894078166,0.024500020685206875,0.012427276196814772,0.0008305651135096559,0.0027376136624539735,0.033902912754017675,0.9081388725620669,0.0025822273151292026,0.009170987816722603
"def is_palindrome(text):
    return text == text[::-1]",python,python,0.00016631889551910593,0.013943223129659024,0.00011585069659293006,3.692554802120396e-05,0.00019444150974860794,4.104110084217038e-05,0.9665489997973497,0.007778517292851515,0.011174682029415938
"def int_to_roman(num):
    roman_numerals = {
        1000: 'M',
        900: 'CM',
        500: 'D',
        400: 'CD',
        100: 'C',
        90: 'XC',
        50: 'L',
        40: 'XL',
        10: 'X',
        9: 'IX',
        5: 'V',
        4: 'IV',
        1: 'I'
    }
    roman = ''
    for value, symbol in roman_numerals.items():
        while num >= value:
            roman += symbol
            num -= value
    return roman",css,matlab,1.6328295974494081e-06,5.412087792965652e-06,1.7081675234837666e-06,4.291704801836459e-08,5.666167398354028e-07,0.9999901266554364,1.2764994886566086e-08,1.367660169446719e-07,3.6119485007443766e-07
"def calculate_total_tax(cost, rate):
 """"""Calculate the total amount of taxes to be paid""""""
 tax = cost * rate/100
 total = cost + tax

 return total

total_amount = calculate_total_tax(700, 10)
print(f""The total amount, including taxes, is {total_amount}"") # 770",python,python,0.003241630063515202,0.025969191434860175,0.0022371093776540145,0.00024736684199505636,0.025940740633515563,0.00015908735415706544,0.7087937304580884,0.0021665146765914513,0.2312446291596232
"""""""
Calculating the distance between two points with latitude and longitude
""""""
import math

def calc_dist(x1,y1,x2,y2):
    """"""
    Calculates the distance between two points given their latitude and longitude.
    Input: 
        x1, y1 - the latitude and longitude of the first point
        x2, y2 - the latitude and longitude of the second point
    Output:
        distance - the distance between the two points
    """"""
    # convert the latitude and longitude to radians
    x1, y1, x2, y2 = map(math.radians, [x1, y1, x2, y2])
    
    # calculate the great circle distance
    dlon = y2-y1
    dlat = x2-x1
    a = math.sin(dlat/2)**2 + math.cos(x1) * math.cos(x2)* math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    r = 6371 # radius of Earth in kilometers
    return c * r

# the coordinates of point A and point B
x1 = 51.509865
y1 = -0.118092
x2 = 40.730610
y2 = -73.935242

# calculate the distance between the two points
dist = calc_dist(x1, y1, x2, y2)
print(""The distance between two points is "" + str(dist) + "" kilometers"")",python,typescript,0.0018955840689682934,0.00648682558535461,0.0034819280823135358,0.005186699285082075,0.005929569399161778,4.175481818156646e-06,0.23154726794804603,0.007075150410203525,0.738392799739052
"def selection_sort(arr): 
    for i in range(len(arr)): 
  
        # Find the minimum element in remaining 
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
  
        # Swap the found minimum element with  
        # the first element         
        arr[i], arr[min_idx] = arr[min_idx], arr[i]",python,matlab,3.064151747706383e-07,2.0626048066031344e-07,2.1940831892494655e-07,2.0934195318341296e-08,1.2066388508130996e-07,0.9980848942340521,0.001913224559089699,2.29143904126361e-09,1.005233364384985e-06
"import requests

url = 'https://example.com'

# Set the form data  
data = {
  'field1': 'value1',
  'field2': 'value2',
  'field3': 'value3',
  'field4': 'value4'
}

# Send a POST request to the URL with the form data  
r = requests.post(url, data=data)

# Check the response code 
if r.status_code == 200: 
  print('Form submitted successfully.') 
else:
  print('Error submitting form.')",css,java,1.4982890734806142e-11,0.22174627400848895,0.011934860940955782,0.7567560692580793,0.0002222752124152661,3.6578209815745528e-06,0.0010449134819311657,0.0006907144536288347,0.007601234808536523
"def longestSubstring(str) : 
 n = len(str) 
  
 # Create a map of distinct characters 
 distinct_char = {}  
 for i in range(n) : 
 distinct_char[str[i]] = i 
  
 cur_start = 0
 cur_end = 0
 max_start = 0
 max_end = 0
 max_len = 0
  
 # Iterate through all characters and check   
 # if it forms a valid substring or not 
 for i in range(n) : 
  
 # If character is already present 
 if (str[i] in distinct_char) : 
  
 # Reset the cur_end to recent position 
 cur_end = i 
  
 # If character is not present in the  
 # already formed substring, then 
 # update max_len if required  
 if (cur_end - cur_start + 1 > max_len) : 
 max_len = cur_end - cur_start + 1
 max_start = cur_start 
 max_end = cur_end 
  
 # Update cur_start for next iteration 
 cur_start += 1
  
 # Store last occurrence of current  
 # character in the map 
 distinct_char[str[i]] = i 
  
 print(str[max_start : max_end + 1]) 
  
# Driver 
str = ""abcabcbb""
longestSubstring(str) # Prints ""abc""",sql,python,0.0005543702831214669,0.0002581295631931662,0.003400289955258749,1.127408286953729e-05,0.09950684853896609,0.28889590356533945,0.5517644767911374,0.030585380494653196,0.02502332672546094
"def quickSort(arr): 
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        lessThanPivot = [x for x in arr[1:] if x < pivot]
        moreThanPivot = [x for x in arr[1:] if x >= pivot]
        sortedArray = quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)
        return sortedArray",python,matlab,6.029746363360273e-09,1.8151157962573643e-08,3.5303983421950286e-09,1.0772548143589501e-09,7.633020588428216e-10,0.999998347017855,1.6171453602456683e-06,2.3923477891815157e-10,6.045690462195475e-09
"str = ""Hello World!""
chars = list(str)

# initialize counts as empty dictionary
char_counts = {}

for char in chars:
    if char in char_counts:
        char_counts[char] += 1
    else:
        char_counts[char] = 1

# printing result
for char, count in char_counts.items():
    print(""{} : {}"".format(char, count))",python,python,0.005189759083524386,0.06227231027141594,0.002123821148038403,3.9341762388127e-09,0.0023138203579391005,0.0014823105668594666,0.9245996962499354,0.0016622624866803387,0.0003560159014308755
"A Python list is an ordered collection of objects, stored in memory and indexed by number that can contain items of different types such as numbers, strings, and other lists.",typescript,typescript,4.743940585407781e-09,1.6214735760060025e-09,2.7734091034644497e-10,2.3247143740857343e-09,4.35940270905189e-06,4.183104844588744e-09,9.485544562892968e-08,2.3263401793842473e-10,0.999995532358637
"def extract_substring(string, start, end):
    '''This function will extract the substring between two given key words'''
    
    if start in string and end in string:
        start_index = string.find(start) + len(start)
        end_index = string.find(end)
        extracted_string = string[start_index:end_index]
        return extracted_string",python,java,3.512578491777848e-12,7.168624451464987e-07,4.9998219243971915e-08,0.9995851343771077,3.3390934491065255e-13,8.950750903516435e-11,0.0004019675360119306,1.1931314912180425e-05,1.9981794987752576e-07
"import json

data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'

data_dict = json.loads(data)

for key, value in data_dict.items():
    print(f'{key}: {value}')",css,css,1.6930322375584342e-08,0.9999953662688431,1.0775985354524146e-07,5.475496494117866e-09,3.298754483253019e-09,4.479020059773553e-06,1.3335343812107603e-09,1.5710489482326024e-08,4.202646552993504e-09
"def diff_in_list(input_list):
    """"""This function takes a list of integers and returns a dictionary with the input number as key and the difference between two immediate numbers as value.""""""
    
    output_dict = {}
  
    # Iterate over the list and create a dictionary with the 
    # input number as key and the difference between
    # two immediate numbers as value
    for i in range(len(input_list) - 1):
        output_dict[input_list[i]] = input_list[i + 1] - input_list[i]
    
    return output_dict
    
# Sample Input
input_list = [1, 2, 4, 7, 11]

# Print the output
print(diff_in_list(input_list))",python,typescript,0.00020487406564865762,0.0024911873656383353,0.0007566715259405804,0.0002486134125845493,0.0008510726020811027,4.51340391224878e-05,0.018795687025793845,0.00014703552777309997,0.9764597244354174
"import flask from flask
import sqlite3

app = flask.Flask(__name__)

# create the database
conn = sqlite3.connect('data.db')
cur = conn.cursor()

# create the table for your data
cur.execute('''CREATE TABLE IF NOT EXISTS search 
(query TEXT, results TEXT)''')

@app.route('/search', methods = ['GET', 'POST'])
def search():
 if flask.request.method == 'POST':
 # get the search term from the form
 query = flask.request.form['query']

 # search the database for the query
 cur.execute('''SELECT results FROM search 
 WHERE query=?''', (query,))
 results = cur.fetchall()

 # return the results
 return flask.render_template('results.html', 
query = query, results = results)

# the search form
@app.route('/')
def index():
 return flask.render_template('search.html')

if __name__ == '__main__':
 app.run(debug = True)",sql,typescript,5.405419617965339e-06,0.1468555395462942,0.05585172737041274,0.0005757853962628826,0.019968633026616223,8.031741135767948e-06,0.0018280570758264479,0.12742242715864482,0.6474843932651889
"import random
import string

def generate_password(length):
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(length))

print(generate_password(8))",sql,sql,2.8096666849369088e-14,3.0723850794375736e-10,4.111831887522193e-10,0.00021071438448722632,3.059225712987672e-15,3.931267866229464e-11,5.028087842769551e-07,0.9997887820275521,2.141077546102211e-11
"import lxml.html

def parse_table(html_str):
    root = lxml.html.fromstring(html_str)

    # locate the table
    table = root.xpath('//table')[0]

    # collect header names
    header_names = [th.text_content() for th in table.xpath('//th')]

    # collect data rows
    data_rows = table.xpath('//tr')[1:]
    data_rows = [[td.text_content().strip() for td in row.xpath('td')]
                    for row in data_rows]

    # print the result
    print(header_names)
    print(data_rows)",python,html,1.2555599733316014e-05,0.0007446165458010507,0.994857579975136,9.714081842594152e-07,0.0002647588990314252,1.3540764111413607e-05,0.004006554459342219,9.592179521352843e-05,3.5005534471464687e-06
"def generate_strings(characters, length):
    if length == 0:
        return [""""]

    result = []
    for char in characters:
        for string in generate_strings(characters, length-1):
            result.append(char + string)

    return result

strings = generate_strings([""A"", ""B"", ""C""], 3)
print(""Strings:"", strings)",python,python,2.5016984970860114e-07,0.002218941115262625,1.271735506527897e-05,0.0017518008359068277,5.012469985576484e-06,4.4758235385566515e-05,0.9664221759358045,0.029536880409979174,7.463472760550218e-06
"num1 = 3
num2 = 5

result = num1 + num2

print(f'The sum of {num1} and {num2} is {result}')",python,python,6.775694612038662e-05,0.003384813876092001,0.00016989339245595376,0.00014042573329088332,0.0013240189982905589,6.546769216926628e-06,0.9887403560185734,0.0007577121314286157,0.005408476134531435
"def find_smaller_elements(nums, target):
  indices = []
  for i, num in enumerate(nums):
    if num < target:
      indices.append(i)
  return indices
  
result = find_smaller_elements([2, 3, 4, 5, 6], 4)
print(result) # [0, 1]",python,matlab,9.89453260184e-07,1.299468888857212e-07,3.5130054782090836e-06,1.8962093327321635e-07,8.849353344455979e-07,0.9956862504411066,0.0042953450551929066,1.0885564517801621e-05,1.8119772878819462e-06
"import random

# Simulate a dice roll
result = random.randint(1,6)
print(""Result of the dice roll:"", result)",python,python,0.0003185101932950642,0.008705901170379619,0.0007695894204283153,4.2447072497739124e-05,0.0010140455760085283,4.9606581888651266e-06,0.9792070156361083,0.007110571865862288,0.002826958407230989
"import matplotlib.pyplot as plt 

x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

plt.plot(x, y)
plt.title('Line Chart') 
plt.xlabel('X-Axis') 
plt.ylabel('Y-Axis') 
plt.show()",python,html,0.005081958519946075,0.0052140544107164835,0.8109153760341509,0.00035302762677073536,0.0004049935425250114,0.0010184909346627404,0.1669129251057894,0.0007427446536953606,0.009356429171743256
"for i in range(1,11):
    print(i)",python,matlab,1.2415972227325905e-13,1.6911048586434646e-18,1.1057399553217356e-12,5.510266050076294e-15,7.48076876636178e-15,0.999998444523721,1.5554749300339005e-06,3.862174504852572e-14,6.723799180726865e-14
"from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
 
# Load the input data
X = ...
y = ...
 
# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)
 
# Create and fit the Naive Bayes model
clf = GaussianNB().fit(X_train, y_train)
 
# Use the model to make predictions
predictions = clf.predict(X_test)",python,bash,0.4334567364366595,0.09792517728676917,0.010425148730269927,5.261418518840154e-06,0.0012358715009355844,2.786031399982208e-05,0.22412916165226815,2.9829852811144845e-05,0.23276495280776796
"net_energy_charge = 0

for carbohydrate in list_of_carbohydrates:
 if carbohydrate == 'glucose':
  net_energy_charge += -2.3
 elif carbohydrate == 'fructose':
  net_energy_charge += -2.5
 elif carbohydrate == 'galactose':
  net_energy_charge += -3

print(net_energy_charge)",python,matlab,1.1870337272846572e-06,5.616186314884708e-05,1.1183432679619043e-05,2.1283338558124403e-08,1.0711526233446958e-06,0.9976782872657733,0.002150678985888442,0.0001006292097422356,7.79773078372205e-07
"def normalize(nums):
  min_num = min(nums)
  max_num = max(nums)

  for i, n in enumerate(nums):
    if n > min_num and n < max_num:
      if n - min_num > max_num - n:
        nums[i] = max_num
      else:
        nums[i] = min_num

  return nums

print(normalize([5, 4, 3, 4, 8, 6, 7]))
# [5, 4, 3, 5, 8, 6, 7]",python,python,0.00022245330518917298,0.0015366442143913632,0.0023048378352514692,3.78071614851927e-05,9.386640477938208e-05,0.0002508614937922666,0.994553412396881,7.766304922054991e-05,0.0009224541390095714
"import pandas as pd

df = pd.DataFrame({'Name': ['John', 'James', 'John'],
                   'Age': [27, 25, 27],
                   'City': ['London', 'Tokyo', 'Tokyo']})

# identify all duplicates in the 'Name' column
duplicates = df[df.duplicated(['Name'], keep=False)]
print(duplicates)

# output
    Name  Age    City
0   John   27  London
2   John   27   Tokyo",css,css,0.0023124761123276627,0.9680478171588889,0.0035483338869660703,0.017096260243223367,1.7592537730735449e-06,3.5178492942435624e-05,0.008402025141782255,0.0003253429837490422,0.00023080672634728173
"def increasing_diagonal(grid):
 # Get the number of rows and columns in the grid
 num_rows = len(grid)
 num_cols = len(grid[0])

 # Loop through the elements of the array
 for i in range(num_rows):
  for j in range(num_cols):
   # Check that the adjacent elements in the diagonal line
   # are increasing
   if i + 1 < num_rows and j + 1 < num_cols:
    if grid[i][j] >= grid[i + 1][j + 1]:
     return False
 
 return True
 
# Test array
grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 
# Print solution
print(increasing_diagonal(grid))",python,python,0.0025374744685850515,0.00135857941518646,0.0014282128021144605,3.352162077680911e-05,0.004924439093403737,0.034536387296496565,0.7074319956068145,0.004382339532228347,0.243367050164394
"def average_height(lst):
    total = 0
    for height in lst:
        total += height
    
    return total / len(lst)

result = average_height([1.78, 1.90, 1.75, 1.82])
print(result)",python,python,9.175026621585544e-06,0.0007133212857593854,9.567642072651489e-05,1.5422735891245812e-06,1.0317236067659162e-05,8.90349879691058e-06,0.9990926356413754,5.418624071380448e-05,1.4242376349563125e-05
"import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Read in csv data
data = pd.read_csv('stock_data.csv')

# Split our data into testing and training sets
X_train = data[data['date'] < '2014-01-01']
X_test = data[data['date'] >= '2014-01-01']

# Extract our feature and target columns
X_train = X_train.drop(['date', 'price'], axis=1)
X_test = X_test.drop(['date', 'price'], axis=1)
y_train = data[data['date'] < '2014-01-01']['price']
y_test = data[data['date'] >= '2014-01-01']['price']

# Fit our Linear Regression Model
linear_regression = LinearRegression()
linear_regression.fit(X_train, y_train)
y_preds = linear_regression.predict(X_test)

# Print out our predictions
for i in range(1, len(y_preds)):
 print(f""Predicted: {y_preds[i]}, Actual: {y_test.iloc[i]}"")",python,python,0.0001677202916291826,0.271847817249215,0.011336982446528903,8.612927387982762e-05,5.1089457552411634e-05,0.0002958012788063388,0.709701406984205,0.0027392410295841306,0.0037738119885991446
"# Create a matrix using a list of lists
matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

# Create a matrix using Numpy
import numpy as np 
matrix = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])",python,typescript,0.015392573269023779,0.0008049501484074142,0.0007375805705361888,1.7221143708024515e-05,8.045999121240553e-05,0.00020951587281206797,0.01007880599125398,3.430960780859679e-06,0.9726754620522654
"def calculate(expr):
    return eval(expr)

result = calculate(""4 + 7"")
print(result)",python,python,0.0001403862149433836,0.0035771028173097576,0.0001744299337978939,2.09974083396377e-05,0.00010141043787309714,1.3287281759823086e-05,0.9952746798333278,0.0005491371180153544,0.0001485689546332145
"class Queue:
 def __init__(self):
 self.queue = []

 def push(self, item):
 self.queue.append(item)

 def pop(self):
 return self.queue.pop(0)

 def peek(self):
 return self.queue[0]

# Usage example
q = Queue()
q.push(1)
q.push(2)
q.push(3)

print(q.pop()) # 1 
print(q.peek()) # 2",python,python,8.433674350484371e-05,0.008463407406777756,0.04849433980196999,5.233925532795203e-05,0.0004153906529935598,1.3790843086632525e-05,0.7008540286305966,0.24150023161511652,0.0001221350506260688
"for i in range(1, 11):
 print(5, 'X', i, '=', 5*i)",python,matlab,1.2415972227325905e-13,1.6911048586434646e-18,1.1057399553217356e-12,5.510266050076294e-15,7.48076876636178e-15,0.999998444523721,1.5554749300339005e-06,3.862174504852572e-14,6.723799180726865e-14
"def add_two_numbers(a, b, x=0):
    return a + b + x",python,javascript,0.0019570213590397235,0.003742014558601787,0.0022154520175463963,0.0003486538216099747,0.9750500586716987,0.00018289236633118995,0.013345837177905112,0.0009317164225004256,0.0022263536047667887
"def missingNumbers(arr):
        start = arr[0]
        end = arr[len(arr)-1]
        
        result = []
        
        for i in range(start, end+1):
            if i not in arr:
                result.append(i)
                
        return result

# Test Case
arr = [2, 3, 5, 6, 7, 8, 10]
print(missingNumbers(arr))

# Output:
# [4, 9]",python,python,6.315529209991596e-07,1.2752428696923915e-05,7.799212911854258e-07,2.6571630175605788e-08,4.079500985613756e-08,0.456274042197317,0.5437112861920789,2.0735803134774589e-07,2.32983023723671e-07
"class Node:
 def __init__(self, data):
 self.data = data
 self.next = None

class CircularLinkedList:
 def __init__(self):
 self.head = None

 def append(self, data):
 if not self.head:
 self.head = Node(data)
 self.head.next = self.head
 else:
 cur = self.head
 while cur.next != self.head:
 cur = cur.next

 new_node = Node(data)
 new_node.next = self.head
 cur.next = new_node
 
 def remove(self, key):
 cur = self.head
 prev = None
 while cur.next != self.head:
 if cur.data == key:
 if cur == self.head:
 prev.next = cur.next
 self.head = cur.next
 else:
 prev.next = cur.next
 return 
 else:
 prev = cur.next
 cur = cur.next
 
 print(""Element not found"")

def print_list(self):
 cur = self.head
 while cur:
 print(cur.data)
 cur = cur.next
 if cur == self.head:
 break",python,html,1.8387108100409214e-05,0.002920256813450507,0.9490385139665725,6.288147289162966e-06,1.904430101877268e-05,1.7736467610465507e-05,0.004108682380991529,0.04380243728860944,6.865352635730934e-05
"def permutation(lst): 
  
    # If lst is empty then there are no permutations 
    if len(lst) == 0: 
        return [] 
  
    # If there is only one element in lst then, only 
    # one permuatation is possible 
    if len(lst) == 1: 
        return [lst] 
  
    # Find the permutations for lst if there are 
    # more than 1 characters 
  
    l = [] # empty list that will store current permutation 
  
    # Iterate the input(lst) and calculate the permutation 
    for i in range(len(lst)): 
       m = lst[i] 
  
       # Extract lst[i] or m from the list.  remLst is 
       # remaining list 
       remLst = lst[:i] + lst[i+1:] 
  
       # Generating all permutations where m is first 
       # element 
       for p in permutation(remLst): 
           l.append([m] + p) 
    return l 
  
# Driver program to test above function 
data = list('123') 
for p in permutation(data): 
    print (p)",sql,python,0.0013821449393287006,0.0006885007985790441,0.0004906063115692449,4.69552802930735e-05,0.012528941437615168,0.04751837497403896,0.9208295203331838,0.005211984583075005,0.011302971342316986
"#!/usr/bin/env python2
# Copyright (c) 2015 The Deuscoin Core developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
#

from test_framework.test_framework import ComparisonTestFramework
from test_framework.util import *
from test_framework.mininode import CTransaction, NetworkThread
from test_framework.blocktools import create_coinbase, create_block
from test_framework.comptool import TestInstance, TestManager
from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP
from binascii import hexlify, unhexlify
import cStringIO
import time
import itertools

'''
This test is meant to exercise BIP forks
Connect to a single node.
regtest lock-in with 108/144 block signalling
activation after a further 144 blocks
mine 2 block and save coinbases for later use
mine 141 blocks to transition from DEFINED to STARTED
mine 100 blocks signalling readiness and 44 not in order to fail to change state this period
mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)
mine a further 143 blocks (LOCKED_IN)
test that enforcement has not triggered (which triggers ACTIVE)
test that enforcement has triggered
'''



class BIP9SoftForksTest(ComparisonTestFramework):

    def __init__(self):
        self.num_nodes = 1

    def setup_network(self):
        self.nodes = start_nodes(1, self.options.tmpdir,
                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],
                                 binary=[self.options.testbinary])

    def run_test(self):
        self.test = TestManager(self, self.options.tmpdir)
        self.test.add_all_connections(self.nodes)
        NetworkThread().start() # Start up network handling in another thread
        self.test.run()

    def create_transaction(self, node, coinbase, to_address, amount):
        from_txid = node.getblock(coinbase)['tx'][0]
        inputs = [{ ""txid"" : from_txid, ""vout"" : 0}]
        outputs = { to_address : amount }
        rawtx = node.createrawtransaction(inputs, outputs)
        tx = CTransaction()
        f = cStringIO.StringIO(unhexlify(rawtx))
        tx.deserialize(f)
        tx.nVersion = 2
        return tx

    def sign_transaction(self, node, tx):
        signresult = node.signrawtransaction(hexlify(tx.serialize()))
        tx = CTransaction()
        f = cStringIO.StringIO(unhexlify(signresult['hex']))
        tx.deserialize(f)
        return tx

    def generate_blocks(self, number, version, test_blocks = []):
        for i in xrange(number):
            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)
            block.nVersion = version
            block.rehash()
            block.solve()
            test_blocks.append([block, True])
            self.last_block_time += 1
            self.tip = block.sha256
            self.height += 1
        return test_blocks

    def get_bip9_status(self, key):
        info = self.nodes[0].getblockchaininfo()
        for row in info['bip9_softforks']:
            if row['id'] == key:
                return row
        raise IndexError ('key:""%s"" not found' % key)


    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):
        # generate some coins for later
        self.coinbase_blocks = self.nodes[0].generate(2)
        self.height = 3  # height of the next block to build
        self.tip = int (""0x"" + self.nodes[0].getbestblockhash() + ""L"", 0)
        self.nodeaddress = self.nodes[0].getnewaddress()
        self.last_block_time = int(time.time())

        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')

        # Test 1
        # Advance from DEFINED to STARTED
        test_blocks = self.generate_blocks(141, 4)
        yield TestInstance(test_blocks, sync_every_block=False)

        assert_equal(self.get_bip9_status(bipName)['status'], 'started')

        # Test 2
        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1
        # using a variety of bits to simulate multiple parallel softforks
        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)
        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)
        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)
        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)
        yield TestInstance(test_blocks, sync_every_block=False)

        assert_equal(self.get_bip9_status(bipName)['status'], 'started')

        # Test 3
        # 108 out of 144 signal bit 1 to achieve LOCKED_IN
        # using a variety of bits to simulate multiple parallel softforks
        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)
        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)
        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)
        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)
        yield TestInstance(test_blocks, sync_every_block=False)

        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')

        # Test 4
        # 143 more version 536870913 blocks (waiting period-1)
        test_blocks = self.generate_blocks(143, 4)
        yield TestInstance(test_blocks, sync_every_block=False)

        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')

        # Test 5
        # Check that the new rule is enforced
        spendtx = self.create_transaction(self.nodes[0],
                self.coinbase_blocks[0], self.nodeaddress, 1.0)
        invalidate(spendtx)
        spendtx = self.sign_transaction(self.nodes[0], spendtx)
        spendtx.rehash()
        invalidatePostSignature(spendtx)
        spendtx.rehash()
        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)
        block.nVersion = activated_version
        block.vtx.append(spendtx)
        block.hashMerkleRoot = block.calc_merkle_root()
        block.rehash()
        block.solve()

        self.last_block_time += 1
        self.tip = block.sha256
        self.height += 1
        yield TestInstance([[block, True]])

        assert_equal(self.get_bip9_status(bipName)['status'], 'active')

        # Test 6
        # Check that the new sequence lock rules are enforced
        spendtx = self.create_transaction(self.nodes[0],
                self.coinbase_blocks[1], self.nodeaddress, 1.0)
        invalidate(spendtx)
        spendtx = self.sign_transaction(self.nodes[0], spendtx)
        spendtx.rehash()
        invalidatePostSignature(spendtx)
        spendtx.rehash()

        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)
        block.nVersion = 5
        block.vtx.append(spendtx)
        block.hashMerkleRoot = block.calc_merkle_root()
        block.rehash()
        block.solve()
        self.last_block_time += 1
        yield TestInstance([[block, False]])

        # Restart all
        stop_nodes(self.nodes)
        wait_deuscoinds()
        shutil.rmtree(self.options.tmpdir)
        self.setup_chain()
        self.setup_network()
        self.test.clear_all_connections()
        self.test.add_all_connections(self.nodes)
        NetworkThread().start() # Start up network handling in another thread



    def get_tests(self):
        for test in itertools.chain(
                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),
                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),
                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)
        ):
            yield test

    def donothing(self, tx):
        return

    def csv_invalidate(self, tx):
        '''Modify the signature in vin 0 of the tx to fail CSV
        Prepends -1 CSV DROP in the scriptSig itself.
        '''
        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +
                                      list(CScript(tx.vin[0].scriptSig)))

    def sequence_lock_invalidate(self, tx):
        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)
        '''
        tx.vin[0].nSequence = 0x00FFFFFF
        tx.nLockTime = 0

    def mtp_invalidate(self, tx):
        '''Modify the nLockTime to make it fails once MTP rule is activated
        '''
        # Disable Sequence lock, Activate nLockTime
        tx.vin[0].nSequence = 0x90FFFFFF
        tx.nLockTime = self.last_block_time

if __name__ == '__main__':
    BIP9SoftForksTest().main()",css,sql,0.01216505291812501,0.000297936017069556,0.005519876179595482,8.727317599816219e-07,0.00024085512724262325,5.658793995580017e-07,0.029993005907340185,0.5765015640893725,0.3752802711500952
"import tweepy

# authentication for twitter api
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_secret)

# create an API instance
api = tweepy.API(auth)

# search for posts with the hashtag
for tweet in tweepy.Cursor(api.search, q='#news').items(10):
 # like post
 api.create_favorite(tweet.id)
 # follow the author
 api.create_friendship(tweet.user.id)",python,python,0.001082073441528085,0.3908220763624752,0.021713919776464138,0.0037600517887064993,0.012715591429872651,0.017279677424214775,0.451273965701299,0.006225047056240143,0.0951275970191997
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Read in data
data = pd.read_csv(""data.csv"")

# Split into train and test
X = data.drop(""target_column"", axis=1)
y = data[""target_column""]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a binary classification model 
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate model
y_pred = model.predict(X_test)
accuracy = (y_pred == y_test).mean() 
print(""Model accuracy:"", accuracy)",python,python,0.019643422370291718,0.17467842170039247,0.02002840800015624,1.0878213478063794e-05,3.094244995964623e-05,4.4710562746277166e-05,0.7841726565908922,1.841262982361042e-05,0.0013721474822599384
"import random

def generate_account_number():
    # Generate a random Account number
    account_number = '00' 
    nums = [str(random.randint(0, 9)) for _ in range(7)]
    account_number += """".join(nums)
    checksum = get_checksum(account_number)
    account_number += str(checksum)
    return account_number

def get_checksum(account_number):
    n = 0
    for i, num in enumerate(account_number):
        n += int(num) * (i % 6 + 2)

    checksum = 11 - (n % 11)
    if checksum == 10:
        return 0
    elif checksum == 11:
        return 5
    else:
        return checksum",sql,python,0.0003464046428066581,4.7919621263835095e-06,0.0007191586986456431,0.00016233827071920122,0.00021067930064580997,0.37546696535807417,0.6214253386365987,0.0015378838750506026,0.00012643925533298634
"import json
 
# parse json file
data = json.loads(<input>)
 
# print key-value pairs for each item in json string
for item in data['data']:
    print('ID:', item['id'])
    print('Name:', item['name'])
    print('Age:', item['age'])",python,css,1.0127241575102195e-06,0.9963878783632389,0.0021463425505474586,2.807732557836943e-05,2.2635011529629947e-06,3.2160259299394097e-06,0.001422422165081472,8.632680228756905e-06,1.546640845025525e-07
"def bubble_sort(list):
    for i in range(len(list)):
        for j in range(len(list)-1):
            if list[j]>list[j+1]:
                list[j],list[j+1] = list[j+1],list[j]
    return list

if __name__ == '__main__':
    list = [3,5,2,4,7,5]
    print(bubble_sort(list))",python,matlab,2.460606080535882e-06,3.273201216621056e-06,2.375856092447463e-05,5.387635388680971e-07,3.602695111542432e-06,0.9849173812116135,0.013090163683617971,0.0019531146984998876,5.706579396683553e-06
"import base64

def encode_string(string):
    encoded_string = base64.b64encode(string.encode('utf-8'))
    return encoded_string",python,java,4.087452710681401e-12,2.1693468889695e-06,1.1644860225226328e-06,0.9998178065761465,2.5777148373171874e-10,2.104745494231693e-08,0.00017641520204182926,2.1772854959932858e-06,2.457940900568021e-07
"for i in range(1, 11):
    if i % 2 != 0:
        print(i)",python,matlab,5.379839654179141e-21,6.1351192684115876e-30,2.130406467552319e-20,1.2326546456504435e-22,3.330245168218143e-22,0.9999999999999998,1.5817524948768142e-16,8.900544194337892e-23,1.5276440602791175e-21
"def extract_numbers(s): 
    return [int(el) for el in s.split(',') if el.lstrip('-').isnumeric()]",python,python,0.047072085887586504,0.03488107748639124,0.024868666523362525,0.25666714857527695,0.008559772224728972,0.00230138365813145,0.60834863233673,0.004464179268647721,0.012837054039144764
"class DecimalToBinary:
  def __init__(self, num):
    self.num = num

  def convert(self):
    if self.num > 1:
      self.convert(self.num // 2)
    print(self.num % 2, end='')

number = DecimalToBinary(14)
number.convert()",python,python,9.409971865444836e-05,2.190042680547054e-05,0.015045912002157347,9.066286635548653e-06,2.386284121232278e-05,0.3254420233968784,0.6410541135581557,0.018110736457856134,0.00019828531164477105
"def diff(a, b): 
   return abs(a - b) 
  
a = 21
b = 49
  
print(diff(a, b)) # Output 28",python,python,0.03574254013261036,0.0767584506799904,0.0306919339626958,0.0014198743753200736,0.0007114979758232462,0.1398500399272176,0.7097126175193451,0.0027869508726929655,0.0023260945543043046
"def sum_list(numbers):
  summed_value = 0
  for num in numbers:
    summed_value += num
  return summed_value",python,matlab,1.0348052060181456e-05,2.020754857958724e-09,7.299441946029062e-05,0.008040237939905923,0.00011649203386481874,0.9040655493731294,0.08765219319100746,2.6213606028666718e-05,1.596936378840098e-05
"def find_unique_combos(lst):
    combos = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            combos.append(lst[i:j])
    return list(set(tuple(x) for x in combos))

print(find_unique_combos([1,2,3,4]))",python,python,6.659477588787252e-06,8.089008019903789e-06,3.527059991228636e-05,4.7336310600634527e-07,8.332190536489726e-07,0.3081893574444026,0.691644671336261,0.00010712263240921433,7.522919246602039e-06
"class VendingMachine:
    def __init__(self):
        self.coins_inserted = 0

    def insert_coins(self, quarters, dimes):
        self.coins_inserted += quarters * 25 + dimes * 10

    def get_coins_inserted(self):
        return self.coins_inserted",python,python,1.1631627114421125e-06,0.001214634910913333,0.03269751043769618,5.499607596182869e-08,1.7448533401008677e-07,2.8199553247651634e-09,0.8538463316803248,0.11223722551819715,2.9019887918712386e-06
"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def detect_loop(head):
    slow_ptr = head
    fast_ptr = head

    #check if the linked list is empty
    if head is None:
        return False

    #iterate over the list
    while fast_ptr is not None and fast_ptr.next is not None:
        slow_ptr = slow_ptr.next
        fast_ptr = fast_ptr.next.next
       
        #if the slow and fast pointer are pointing to the same node, then there is a loop
        if slow_ptr == fast_ptr:
            return True
    
    return False",python,html,0.00034972344270992886,0.022536808685773804,0.48596275592921756,0.00018967503078791778,0.003718380904333185,0.00023380082540409996,0.297277354471648,0.0743432011490367,0.11538829956108886
"def find_binary_representation(num):
    # base case 
    if num == 0: 
        return 0
  
    # stores the binary representation
    bin_rep = """"  
  
    # to store the remainder 
    rem = 0
  
    while (num != 0): 
        # calculate remainder
        rem = num % 2
        bin_rep += str(rem)
        num //= 2
  
    # reverse the string and return it
    bin_rep = bin_rep[::-1]
    return bin_rep


# Main program
num = 42
binary_rep = find_binary_representation(num)
print(binary_rep)",python,matlab,0.00024070736463491482,2.609472829905442e-07,0.00012102653367452573,4.873670882558708e-05,6.222081334934564e-05,0.9618647176069407,0.030243722497789848,0.00010707238259510829,0.007311535144907109
"def generate_prime_sequence(length):
 prime_sequence = []
 prime_number = 2
 while len(prime_sequence) < length:
  is_prime = True
  for i in range(2, int(prime_number/2) + 1):
    if prime_number % i == 0:
      is_prime = False
      break
  if is_prime:
    prime_sequence.append(prime_number)
  prime_number += 1
 return prime_sequence

print(generate_prime_sequence(8))",python,python,0.001889996695297675,0.0004952800150697417,0.001933565993900187,0.004322936507686273,0.002439791908292485,0.01791164612800831,0.9697837784070903,0.0006624675896745883,0.0005605367549804759
"def average_list_items(list_items):
  list_length = len(list_items)
  list_sum = sum(list_items)
  average = list_sum/list_length
  return average",python,python,0.006272173392943834,0.030717659699880967,0.01522611722118319,0.004233585569552911,0.0031573929271925248,0.0027832651039420594,0.9256515349410077,0.003134499698808411,0.00882377144548845
"d = {'Name': 'John', 'Age': 30, 'City': 'New York'}
 
for key, value in d.items():
    print(f'{key}: {value}')",css,css,2.1550724462796512e-07,0.9995502088559007,7.06289285322482e-07,2.534228197629295e-07,4.535994099070456e-08,0.00044842705051188845,2.263600875061957e-09,1.1649324754984843e-07,2.475744804766735e-08
"def pounds_to_kilos(pounds):
  return pounds * 0.453592

while True:
  pounds = float(input(""Enter a weight in pounds: ""))
  print(f""{pounds} lbs = {pounds_to_kilos(pounds)} kgs"")",python,python,0.0033760616546078294,0.002454706203032819,0.002764068204129417,1.3196699257708504e-05,5.992300808261256e-05,6.868795268347096e-05,0.9910462910374492,0.00019479018536604524,2.2275055390986827e-05
"def longest_word(list_words):
    longest_word = max(list_words, key=len)
    print(""Length of longest word: "" + str(len(longest_word)))
    print(""Longest Word: "" + longest_word)

list_words = [""laptop"", ""computer"", ""keyboard""]
longest_word(list_words)",python,python,0.002283144624594214,0.002129091369999227,0.0023339204622618375,5.428157480010393e-05,0.002795281860341589,7.04548193839439e-05,0.988207126205902,0.0016436204136229997,0.00048307866909391066
"import json
import requests

def lambda_handler(event, context):

# Get the city name from the event
 city_name = event['request']['intent']['slots']['city']['value']

# Make an API call for weather data
 response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid=<your_app_id_here>')
 response_json = response.json()

# Get temperature, humidity, and wind speed
 temp = response_json['main']['temp']
 humidity = response_json['main']['humidity']
 wind_speed = response_json['wind']['speed']

# Create the response
 response = {
 'version': '1.0',
 'response': {
 'outputSpeech': {
 'type': 'PlainText',
 'text': f'The temperature is {temp}, the humidity is {humidity}, and the wind speed is {wind_speed} in {city_name}.'
 }
 }
 }

return response",css,css,0.00038136854722191116,0.9771854302457637,0.0003537886559013851,1.4746485505707718e-05,0.0005021279086475117,0.0004135856522202052,0.000920557225830536,0.0005952413447076575,0.019633153934201706
"def convert_list_to_dict(list):
    final_dict = {}

    for index, value in enumerate(list):
        final_dict.update({index: value})

    return final_dict

list = [1,2,3,4,5,6]
list_dict = convert_list_to_dict(list)
print(list_dict)",css,matlab,8.44219274236374e-06,0.00012198494447549865,8.004016844406909e-05,4.6918244716158197e-07,2.0557978529024285e-05,0.9993988309221129,2.4453854044449657e-07,0.00036125918248285224,8.170890225644753e-06
"strings = [""string1"", ""string2"", ""string3""]
for s in strings:
    print(s)",python,python,0.0011366731866035487,0.011998611009824994,0.0041714144512546465,0.00012637231963505055,0.0006628133419517156,0.14778821984612306,0.8247568579133627,0.00635521871528733,0.0030038192159570535
"def count_words(sentence):
  words = sentence.split()
  num_words = len(words)
  total_len = 0
  for word in words:
    total_len += len(word)
  avg_word_len = total_len / num_words
  return (num_words, avg_word_len)",python,python,0.00224549292255238,0.004662822891499649,0.008425368786080889,2.805270651500796e-05,0.00024254860827154778,0.00022989793145763304,0.9518612429921401,0.03219590082550885,0.00010867233597390678
"def get_largest_diff(list_of_numbers):
  max_number = list_of_numbers[0]
  min_number = list_of_numbers[0]
  
  for num in list_of_numbers:
    if num > max_number:
      max_number = num
    if num < min_number:
      min_number = num
  
  return (max_number - min_number)
  
list_of_numbers = [1,2,5,4,10,8]
print(get_largest_diff(list_of_numbers)) # 9",python,matlab,5.0756915737822e-07,2.449551170149967e-09,1.0361981379430749e-06,7.715850795443309e-08,1.9637917145552773e-07,0.9999876686512307,9.78656913440673e-06,1.3132982114399892e-07,5.936952878436786e-07
"# import necessary libraries
from pyswarms.single.global_best import GlobalBestPSO
from sklearn.base import BaseEstimator

class PSOOptimizer(BaseEstimator):
    def __init__(self, n_particles=10, dimensions=3, options=None):
        self.n_particles = n_particles
        self.dimensions = dimensions
        self.options = options
        
    def optimize(self, obj_func, iters, lb, ub):
        # Set-up optimizer
        optimizer = GlobalBestPSO(n_particles=self.n_particles, dimensions=self.dimensions, 
                                    options=self.options)
                
        # Perform optimization
        cost, pos = optimizer.optimize(obj_func, iters, lb, ub)
        
        # Return optimized parameters
        return cost, pos",python,html,0.01057461063463436,0.3262851904816519,0.4063387688025405,6.197430611508855e-05,0.000116263064278242,4.6983084982250065e-05,0.10806727965415391,0.14557017207264522,0.002938757898998581
"def is_in_range(num, a, b):
    if num >= a and num <= b:
        return True
    else:
        return False

result = is_in_range(4, 2, 4)
print(result)",python,python,7.936879929498318e-06,4.039394246024761e-07,4.806735687688135e-05,5.540114657509596e-07,2.8957186560418942e-06,0.14038239818421458,0.8595033823153776,9.979538401068907e-06,4.4382055654162976e-05
"def get_common_elements(list_of_lists): 
    commons = []
    for i in range(len(list_of_lists)): 
        commons = list(set(commons).intersection(list_of_lists[i]))
    return commons",python,python,0.0003545015642448545,0.0001996786035865563,0.0008343978822216962,3.929810894785485e-05,6.93444935581862e-05,0.0680124756593128,0.9288830310759572,0.0012435362165446136,0.0003637363956262221
"import cv2
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
 
#Creating the model
model = Sequential()
 
#Adding the first layer
model.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
#Adding the second layer
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
#Adding the third layer
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
 
#Flattening Layer
model.add(Flatten())
model.add(Dense(128))
model.add(Activation('relu'))
 
#Output Layer
model.add(Dense(1))
model.add(Activation('sigmoid'))
 
#Compiling the model
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
 
#Train the model
model.fit_generator(training_set,
                         steps_per_epoch=1000,
                         epochs=25,
                         validation_data=test_set,
                         validation_steps=200)
 
#Prediction
def predict(path):
 img_array = cv2.imread(path)
 img_array = cv2.resize(img_array, (64, 64))
 img_array = np.array(img_array).reshape(-1, 64, 64, 3)
 predicted_array = model.predict(img_array)
 if predicted_array[0][0] == 1:
  print('Face Detected')
 else:
  print('Face not detected')",python,bash,0.6408046958483217,0.0007475887210980812,0.0254853083596727,0.07175081175236059,0.00022136100132643462,8.360838291289742e-08,0.2603248746865901,9.90308164537467e-07,0.0006642857140829862
"# Imports
import requests
from bs4 import BeautifulSoup

# Function to crawl the website
def crawl_website(url):
	# Make a request to the website
	r = requests.get(url)

	# Parse the html
	soup = BeautifulSoup(r.content)

	# Retrieve all the text
	text = soup.get_text()

	# Count the number of words
	word_count = len(text.split())
	
	return word_count",python,css,3.1282826445131604e-06,0.4343822361153312,0.056718524875443245,1.1343014930829696e-05,0.12026948789495338,1.1733821240043178e-06,0.04319102644323598,0.019356618946640775,0.32606646104469605
"# Python program to print the first 10 Fibonacci numbers
    
def Fibonacci(n): 
  f1 = 0
  f2 = 1
  if (n < 1): 
    return
  for x in range(0, n): 
    print(f2, end = "" "") 
    next = f1 + f2 
    f1 = f2 
    f2 = next
    
Fibonacci(10)",python,python,0.1776668338025007,0.0005289008843300111,0.0014145190210270548,2.8127732838650597e-05,0.0007584110343614018,0.0008653186201882796,0.8176517724610151,0.0008712496396463329,0.00021486680409243969
"def starPattern(n):
    # outer loop to handle number of rows
    for i in range(0, n):
        # inner loop to handle number of columns
        for j in range(0, i + 1):
            # printing stars
            print(""* "", end="""")
        # ending line after each row
        print(""\r"")

# Driver code
n = 5
starPattern(n)",python,python,5.052157696777654e-05,7.680842701472419e-05,0.00016110021888319126,1.924122089076366e-05,0.00021165951060320167,0.0033930679566976352,0.9936381711458435,0.0005110173806126237,0.0019384125624867527
"def fibonacci_numbers(n):
 result = []
 a, b = 0, 1
 while a < n:
 result.append(a)
 a, b = b, a+b
 return result

n = 10
fibonacci = fibonacci_numbers(n)

print(fibonacci)

# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",python,python,0.00010018279702072893,0.00351940347773526,0.00019424410508900276,1.0603318736331352e-05,1.1649326715769515e-05,0.00018885387484317566,0.9958866437234899,6.0325700864264156e-05,2.80936755053825e-05
"def get_nth_item(lst, n):
  """"""
  This function returns the nth item of a given list.
  """"""
  return lst[n]",python,javascript,0.0003175022883644637,0.00024249402769966307,0.0015791726838575461,0.00012074639412760493,0.6444067382250699,3.589971730092929e-05,0.351679056577839,0.0005760360422689009,0.001042354043471865
"target_sum = 10

current_sum = 0
i = 0

while current_sum < target_sum:
  current_sum = current_sum + i
  i = i + 1

print(i - 1)",python,python,0.01301140444934898,0.048941982396202025,0.04023288209911014,0.004770656768017758,0.010994546832834483,0.02679915504249867,0.8202748130550571,0.004251967403847008,0.030722591953083873
"def prod(a, b):
    return a*b

def total(mylist):
    sum = 0
    for num in mylist:
        sum += num
    return sum",python,matlab,1.948847222475911e-15,2.2483160807219105e-18,2.1450098060571885e-15,2.879623564434897e-14,1.778036424252472e-15,0.9999999999999625,2.7632350889839058e-17,7.436147718358548e-17,2.8107243102253003e-15
"def filter_prime_numbers(numbers):
    primes = []
    for num in numbers:
        if is_prime(num):
            primes.append(num)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",python,python,1.9377376059233505e-05,2.2613972401610442e-08,0.00011326160353044551,0.0038170125503210685,7.955978178832092e-06,0.2737745259284711,0.7222580586957894,5.195518899219053e-06,4.589734778123585e-06
"String methods include capitalize(), count(), endswith(), find(), format(), index(), isalnum(), join(), lower(), replace(), split(), startswith(), strip(), title(), upper(), and zfill().",sql,html,0.010334698713211006,0.134420015091197,0.49522769824647334,0.11309153397438655,2.018010323564481e-05,0.00032205440534020693,0.10592635636660921,0.07447750898046955,0.06617995411907746
"def difference(string1, string2):
  new_string = ''
  
  for char in string2:
    if char not in string1:
      new_string += char
      
  return new_string

string1 = 'jello'
string2 = 'hello'

print(difference(string1, string2)) # Output: 'e'",python,python,0.003833298873419468,0.002680025015315033,0.002466459040424846,3.7785084426451285e-06,0.0011898484435584182,0.001480687830675779,0.9867418456045774,0.0012962224644469894,0.00030783421913940367
"# import libraries
import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression 

# read dataset
cancer_data = pd.read_csv(""cancer_data.csv"")

# split into train and test sets
x_train, x_test, y_train, y_test = train_test_split(cancer_data.iloc[:,:-1], cancer_data.iloc[:,-1], test_size=0.25, random_state=0)

# create the model 
lr_model = LogisticRegression() 
lr_model.fit(x_train,y_train)

# accuracy
accuracy = lr_model.score(x_test,y_test)
print(accuracy)",python,python,0.024382821578840985,0.33344890717398334,0.016484959064899905,1.6598307521493113e-05,5.86568685467305e-05,0.0001037336334656705,0.5820735691316664,0.0006049264314833123,0.04282582780959241
"def concatenate_strings(string1, string2):
    return string1 + string2",python,python,0.0014804413987537315,0.0027050874713556473,0.003373558562067482,0.00048191482253153047,0.0012129851629098124,0.0004019308619565074,0.9859865143156761,0.002046218507830767,0.0023113488969184826
"def add(nums):
    return nums[0] + nums[1]

print(add([5, 10]))  #Prints 15",python,python,0.001569115156369311,0.0005334131326360103,0.0003928267237245202,0.004456619649187982,6.673139525392267e-05,1.3616968792208432e-08,0.9927787722786509,0.00014075502636995546,6.175302083864303e-05
"def calc_avg(nums):
    total = 0
    for n in nums:
        total += n
 
    return total/len(nums)
 
avg = calc_avg([5, 10, 15, 20, 25])
print(avg)",python,python,2.1326985826011182e-05,0.0006144152345794985,0.0001231613820683782,2.368704942955994e-06,8.580905916646343e-06,2.827318267884439e-05,0.9991619848617539,1.9246202901759506e-05,2.064253933190679e-05
"def encrypt_message(message, key): 
    encrypted_message = """" 
      
    for i in range(len(message)): 
        x = (ord(message[i]) + 
             ord(key[i % len(key)])) % 26
        x += ord('A') 
        encrypted_message += chr(x) 
          
    return encrypted_message",python,python,0.00042570753181717157,0.005040419610899154,0.0015049184834978867,7.29354074662264e-05,0.000229994490147142,0.0028027673232315256,0.9868306089768544,0.0027048441894225454,0.0003878039866638713
"import requests

# send the request 
response = requests.get(""http://example.com"")

# get the source code of the website
data = response.text 

# write the source code into a file
with open('example_source.txt', 'w') as file:
 file.write(data)",python,typescript,8.509459444206351e-06,0.018783946364026718,0.0008514810990942344,8.506677430355954e-05,8.011404929683468e-05,2.8186409808049677e-07,0.0009026658606643759,0.00027740219071817156,0.9790105323383539
"string = ""Hello, World, I am here""

list = string.split("", "")
print(list)

# Output
['Hello', 'World', 'I am here']",python,python,0.3514585008393823,0.006914991583947159,0.013174879846080166,2.442332552727591e-09,0.0008436737817570139,4.2375821406689655e-05,0.6166234859014885,0.010789057356533181,0.0001530324270725216
"import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Load the data
data = pd.read_csv('data.csv')

# Define the inputs and labels
X = data[['square_feet', 'beds', 'baths']]
y = data['price']

# Create and train the model
model = LinearRegression()
model.fit(X, y)

# Test the model
predictions = model.predict(X)",python,typescript,0.16178361247198284,0.05163994087647819,0.0005448583755130143,8.470719693031564e-07,4.457490498170887e-06,8.825321240586468e-07,0.15765956798463823,6.707886976665099e-08,0.6283657661179264
"import os

# Create the root directory
os.mkdir(""root"")

# Switch to the root directory
os.chdir(""root"")

# Create two child directories
os.mkdir(""child_dir_1"")
os.mkdir(""child_dir_2"")",python,typescript,0.29076825760264546,0.05738769014838299,0.015303900965549528,0.0003562739205500299,0.005613662175319627,0.0004168631429437769,0.03762793488236693,0.07258018397633108,0.5199452331859106
"import pyautogui

def get_mouse_pos():
    x, y = pyautogui.position()
    return (x, y)",python,python,0.011289872089589896,0.034743847176351116,0.010079637960149991,0.0006485182660201507,0.003586131202711916,0.0008851911727901879,0.9333203883774245,0.001888604230578316,0.0035578095243840044
"""""""
Write a class in Python to validate a given password
""""""

class PasswordValidator:
    def __init__(self, password):
        self.password = password

    def validate(self):
        is_valid = True
        # Add code to check length, special characters, etc.
        if len(self.password) < 8:
            is_valid = False

        return is_valid

pwd = PasswordValidator(""12345"")

if pwd.validate():
    print(""The password is valid"")
else:
    print(""The password is invalid"")",python,sql,0.0037143787614507743,0.002660132003497577,0.005985739690301679,5.9983201035963326e-05,0.0047939416597597585,3.2236540959354495e-05,0.030425929462326706,0.8670521549910256,0.08527550368964264
"def sum_list(nums):
 return sum(nums)

nums = [1, 2, 3, 4, 5]",python,python,0.0001434198516227685,0.0008021978222305397,0.00032285776631120694,0.00018255716524770438,0.00010187923183881947,7.951008975697573e-06,0.9980184704199718,0.000176272957701895,0.0002443937760996625
"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/'
headers = {'User-Agent': 'Mozilla/5.0'}

response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, 'lxml')

data = []
for item in soup.find_all('div', class_='blog-post'):
    post_data = {
        'title': item.h2.text,
        'body': item.p.text,
        'url': item.find('a')['href']
    }
    data.append(post_data)",css,css,5.264785985583909e-13,0.6293259528274187,0.35967474062430876,0.010984329139216879,3.128226050730517e-06,8.75234645669306e-08,8.48971122798782e-06,3.1153064206785632e-06,1.5664136530727818e-07
"import tensorflow as tf

# Create example deep learning model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Conv2D(32, (3,3), input_shape=(300, 300, 3)))
model.add(tf.keras.layers.MaxPool2D(2, 2))
model.add(tf.keras.layers.Conv2D(64, (3,3), input_shape=(150, 150, 3)))
model.add(tf.keras.layers.MaxPool2D(2, 2))

# Optimize model for size
model.add(tf.keras.layers.Conv2D(32, (3,3), input_shape=(50, 50, 3), activation='relu'))
model.add(tf.keras.layers.MaxPool2D(2, 2))
model.add(tf.keras.layers.BatchNormalization())
model.add(tf.keras.layers.Conv2D(64, (3,3), input_shape=(25, 25, 3),activation=""relu""))
model.add(tf.keras.layers.MaxPool2D(2, 2))
model.add(tf.keras.layers.BatchNormalization())
model.add(tf.keras.layers.Flatten())",python,python,0.020436181372052473,0.004188591784458842,0.04652053561372221,0.1262142285009494,0.0001112097650966864,5.240556878870538e-06,0.7935919341437837,3.1584758700578255e-05,0.008900493504357258
"def minValue(root):
  if root is None: # check if tree is empty
   return -1
  curr = root         
  while curr.left:   # until we reach the leftmost leaf
   curr = curr.left
  return curr.data

# Driver Program 
if __name__ == '__main__':  
  
   root = Node(4) 
   root.left = Node(2) 
   root.right = Node(7) 
   root.left.left = Node(1) 
   root.left.right = Node(3) 
   root.right.left = Node(6) 
   root.right.right = Node(8) 
  
   print ""Minimum Element in BST is %d"" %(minValue(root))",python,python,0.005923961880938051,0.0037150063313246212,0.00413516356492415,0.000555429762364887,0.0025133108855807836,0.00332491270205906,0.9493603661318183,0.026846978503399357,0.0036248702375907276
"class FrequencyTracker:
    def __init__(self):
        self.dictionary = {}
    
    def add_word(self,word):
        if word in self.dictionary:
            self.dictionary[word] += 1
        else:
            self.dictionary[word] = 1
    
    def get_frequency(self,word):
        if word in self.dictionary:
            return self.dictionary[word]
        else:
            return 0",python,python,0.0054338173094835625,0.2526428492248933,0.09587947956857987,7.358121426920083e-06,4.963403035473466e-05,0.00017151045602484605,0.562772176822962,0.08220494818974598,0.0008382262765289002
"# Function to print the minimum number in a list 
def min_in_list(list): 
    # Inialise minimum to first element in the list 
    min = list[0] 
  
    # Traverse through the list from 1st index 
    # and update minimum if found 
    for i in range(len(list)): 
        if list[i] < min: 
            min = list[i] 
  
    return min
  
# Driver Code 
list = [5, 12, 3, 1, 8] 
print (""Minimum in the list is "", min_in_list(list))",sql,matlab,0.0002065434098351922,0.0002001904909859033,0.00043920866938340896,1.1802207375133287e-05,0.27883062667934416,0.6126433633620537,0.05495147646308986,0.026971696588541944,0.0257450921293907
"def longest_common_substring(strs):
 substr = strs[0]
 for s in strs[1:]:
 i = 0
 while i < min(len(substr), len(s)) and substr[i] == s[i]:
 i += 1
 substr = substr[:i]
 
 return substr

print(longest_common_substring([""hello"", ""hi"", ""hell""])) # Prints ""hell""",python,python,0.024493123027056835,0.013813027992230435,0.010612548610138516,5.3522093497922844e-05,0.005286728482351276,0.010537912715299382,0.9147999592213226,0.002121102040511437,0.018282075817591597
"# Define a function to get recommendations for a given user 
def get_recommendations(user): 
    # Get the user preferences 
    user_preferences = user.get_preferences() 
  
    # Initialize an empty list for recommendations 
    recommendations = [] 
    
    # Get all products of type 'clothing' 
    clothing_products = get_all_products('clothing') 
  
    # Iterate over the clothing products 
    for product in clothing_products: 
        # Calculate the similarity score 
        score = calculate_similarity_score(product, user_preferences) 
  
        # If the score is greater than 0, add the product to the list of recommendations 
        if score > 0: 
            recommendations.append(product) 
  
    # Return the list of recommendations 
    return recommendations",python,javascript,0.0021095058139707985,0.22926646504703532,0.006840082352108006,0.00031927348627317664,0.4728708033162598,0.0028353650419151947,0.051149757825959485,0.06357089623353089,0.17103785088294732
"def classify_sentence(sentences):
    
    labels = []
    for sentence in sentences:
        # add code to classify the sentence
        # e.g. using a sentiment classifier
        labels.append(""positive"" if is_positive(sentence) else ""negative"")
    
    return labels",python,typescript,0.0008748166762782912,0.0069047083415484,0.0010271664775879765,0.0011127856727800825,0.006906957968197967,0.0025906828659515995,0.024171179520109602,0.006545446469163338,0.9498662560083828
"import sys

# collect the user's input
user_input = input('Enter your command: ')

# process the user's input and execute the corresponding command
if user_input == 'exit':
    sys.exit()
elif user_input == 'help':
    print('This is a helpful message.')
else:
    print('Command not recognized, try again.')",python,typescript,0.2844712605707156,0.11815682342028161,0.041991343658910336,0.0002448244784589706,0.0013798317534797879,0.00078817517150532,0.22534507829761588,0.023558618370934276,0.30406404427809824
"def pow(num, pow):
    result = 1
    for i in range(pow):
        result *= num
    return result",python,python,1.3352574188396581e-06,3.2516607289434316e-07,6.2134104510407995e-06,1.909209319635572e-07,7.351518947911309e-07,0.22007761355649302,0.7798973183565571,1.2990229562077312e-05,3.2779506183239465e-06
"#Python

def remove_duplicates(arr):
    new_arr = []
    for i in arr:
        if i not in new_arr:
            new_arr.append(i)
    return new_arr

arr = [1, 2, 3, 1, 4, 2, 3]
print(""The array without duplicates is:"", remove_duplicates(arr))",python,matlab,5.669328662949928e-10,9.536200858733832e-11,5.717506024330417e-12,1.3047451759658579e-12,5.281819923131562e-11,0.9999999980856202,1.055276661513947e-09,2.3966918233377454e-15,1.3696564171389637e-10
"class Stack:

    def __init__(self):
        self.items = []
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        if self.items:
            return self.items.pop()
        else:
            return None
    
    def peek(self):
        if self.items:
            return self.items[-1]
        else:
            return None
    
    def size(self):
        return len(self.items)",python,python,1.9819610028074236e-05,0.01649230619111155,0.01946940952817529,1.0519789942760924e-06,0.00017975225309601857,1.947554600685899e-06,0.7369308826563463,0.2269017091510405,3.121076607365902e-06
"class Singleton:
    _instance = None

    def __new__(cls):
        if not cls._instance:
            cls._instance = super(Singleton, cls).__new__(cls)
        return cls._instance",python,python,0.02929720378672421,0.06661744746035057,0.049855279071786954,0.00848329160568625,0.006553198711212768,0.018622546558649786,0.77890826975364,0.010243362822538082,0.03141940022941124
"def sort_strings(strings):
    strings.sort()
    return strings",python,python,0.0016441029153717046,0.012639813929575585,0.003304645954925261,0.000299133023803001,0.0008072776270690021,0.00031826175956035094,0.9754293807670154,0.00279417055661568,0.002763213466064238
"#!/usr/bin/python2
#
#~~Player Functions~~

from superRandom import superRandint, superChoice
from time import sleep
import actions
import monsters

class CreatePlayer(object):
  
    def __init__(self, name):
        self.health = 125
        self.xp = 0 #TODO: use gained XP to gain levels
        self.potions = 0
        self.gold = 0
        self.weapons = [""dagger""]
        self.name = name
        self.steps = 0
        self.damage_dealt = 12 #not needed
        self.current_weapon = ""dagger""
        self.dragon_attack = False
        self.basilisk_attack = False
        self.has_sword = False
        self.has_pistol = False
        self.has_rifle = False
        self.run_away = 0
        self.has_key = False
	self.turns = 0
        
    def __repr__(self):
        return (""\nName: %s\nHealth: %d\nXP: %d\nPotions: ""
                ""%d\nGold: %d\nWeapons: %s\nSteps: %d\nCurr""
                ""ent Weapon: %s\nDragon Attack: %s\nBasili""
                ""skAttack: %s\nHas Sword: %s\nHas Pistol: ""
                ""%s\nHas Rifle: %s\nTimes Run Away: %d\nHa""
                ""s Key: %s\nTurns: %s"" % (self.name,self.health,self.xp,
                    self.potions,self.gold,self.weapons,
                    self.steps,self.current_weapon,
                    self.dragon_attack,self.basilisk_attack,
                    self.has_sword,self.has_pistol,self.has_rifle,
                    self.run_away,self.has_key,self.turns)
                )

    def find_gold(self):
        amount = superRandint(1,25)
        self.gold += amount
        print ""\nYou found %d gold coins, which brings you to a total of %d coins!"" % (amount, self.gold)
        sleep(2)
        return self
    
    def find_gold_debug(self,amount):
        self.gold += amount
        print ""\nYou found %d gold coins, which brings you to a total of %d coins!"" % (amount, self.gold)
        sleep(2)
        return self
    
    def find_potions(self):
        self.potions += 1
        print ""\nYou found a health potion! You now have %d potions in your inventory."" % self.potions
        sleep(2)
        return self
    
    def find_weapon(self):
        #TODO: add more weapons
        weapons = [""sword"",""pistol"",""rifle""]
        found = superChoice(weapons)
        print ""\nYou found a %s!"" % found
        if found == ""sword"":
            self.has_sword = True
        elif found == ""pistol"":
            self.has_pistol = True
        else:
            self.has_rifle = True
        return self     
    
    def buy_potions(self):
        print ""\nGold: %d"" % self.gold
        print ""Each potion costs 20 gold pieces and restores 25 HP.""
        amount = raw_input(""\nHow many would you like to purchase? "")
        cost = int(amount) * 20
        if self.gold >= int(cost):
            self.gold = self.gold - int(cost)
            self.potions += int(amount)
            print ""\n%d potions have been added to your inventory."" % int(amount)
            sleep(2)
            return self
        else:
            print ""\nSorry you don't have enough gold for %d potions!"" % int(amount)
            sleep(2)
            actions.visit_shop(self)
    
    def use_potion(self):
        if self.potions > 0 and self.potions < 2:
            self.potions -= 1
            self.health += 25
            print ""\nYour health is now at %d"" % self.health
        elif self.potions > 1:
            print ""\nYou currently have %d potions"" % self.potions
            amount = int(raw_input(""\nHow many? ""))
            raise_health = amount * 25
            self.health += raise_health
            self.potions -= amount
            print ""\nYour health is now at %d"" % self.health
        else:
            print ""\nSorry you don't have any more potions!""
        sleep(2)
        return self
        
    def list_inventory(self):
        actions.clearscreen()
        print (""\nName: %s\n""
                ""Exp. Points: %d\n""
                ""Potions Held: %d\n""
                ""Gold: %d pieces\n""
                ""Current Weapon: %s"" %(self.name, self.xp,
                    self.potions, self.gold, self.current_weapon)
                )
        
        if self.has_pistol is True and ""pistol"" not in self.weapons:
            self.weapons.append(""pistol"")
        elif self.has_rifle is True and ""rifle"" not in self.weapons:
            self.weapons.append(""rifle"")
        elif self.has_sword is True and ""sword"" not in self.weapons:
            self.weapons.append(""sword"") 
        print ""Weapons: %s"" % "", "".join(str(weapon) for weapon in self.weapons)
        sleep(4)
        
    def low_health(self):
        if self.health <= 60 and self.potions > 0:
            print ""\n*****DANGER*****\n""
            choice = raw_input(""\nYour health is currently at %d, a""
                    ""nd you currently have %d potions in your inven""
                    ""tory. \nWould you like to use one? "" % (self.health,self.potions)
                    )
            choice.lower()
            if choice == 'y' or choice == 'yes':
                self.use_potion()
                return self
            else:
                print ""\nOk tough guy.""
                sleep(2)
                return self
    
    def set_health(self, newHealth):
        self.health = newHealth
        print ""\nHealth set to %d"" % self.health
        sleep(2)
        return self
    
    def take_damage(self, damage):
        self.health -= damage
        print ""\nYour health is now at %d"" % self.health
        if self.health < 0:
            print ""\nYou were slain! Maybe you should carry more health potions with you next time!\n""
            exit(0)
        sleep(2)
        return self
    
    def deal_damage(self,Monster):
        if self.current_weapon == ""sword"":
            damage_dealt = superRandint(13,30)
        elif self.current_weapon == ""pistol"":
            damage_dealt = superRandint(31,60)
        elif self.current_weapon == ""rifle"":
            damage_dealt = superRandint(61,120)
        else: 
            damage_dealt = superRandint(1,12)
        
        Monster.take_damage(damage_dealt,self)
        
    def gain_xp(self,monster_name):
        if monster_name == ""Dragon"":
            gained = superRandint(40,150)
        elif monster_name == ""Gremlin"":
            gained = superRandint(1,35)
        elif monster_name == ""Demon"":
            gained = superRandint(15,50)
        elif monster_name == ""Zombie"":
            gained = superRandint(16,75)
        else:
            gained = superRandint(1,30)
        self.xp += gained
        print ""\nYou gained %d XP!"" % gained
        return self

    def buy_weapon(self):
        print ""\nS)word:   25 Gold""
        print ""P)istol:  60 Gold""
        print ""R)ifle:   120 Gold""
        choice = raw_input(""\nWhich one would you like to purchase? "").lower()
        if choice == 's'and self.gold >= 25:
            self.gold -= 25
            self.has_sword = True 
            print ""\nA sword has been added to your inventory.""
            sleep(2)
        elif choice == 'p' and self.gold >= 60:
            self.gold -= 60
            self.has_pistol = True
            print ""\nA pistol has been added to your inventory.""
            sleep(2)
        elif choice == 'r' and self.gold >= 120:
            self.gold -= 120
            self.has_rifle = True
            print ""\nA rifle has been added to your inventory.""
            sleep(2)
        else:
            print ""\nSorry you don't have enough gold for that purchase.""
            sleep(2)
            actions.visit_shop(self)
        return (self)
    
    def set_current_weapon(self): 
        print ""\nCurrent Weapon: "" + self.current_weapon
        #doesn't show correct weapons after a new weapon is found
        #even if weapon is in inventory, method itself works perfectly.
        print ""Available Weapons: %s"" % "", "".join(str(weapon) for weapon in self.weapons) 
        choice = raw_input(""\nUse weapon: "").lower()
        if choice == ""sword"" and self.has_sword is True:
            self.current_weapon = ""sword""
        elif choice == ""pistol"" and self.has_pistol is True:
            self.current_weapon = ""pistol""
        elif choice == ""rifle"" and self.has_rifle is True:
            self.current_weapon = ""rifle""
        elif choice == ""dagger"":
            self.current_weapon = ""dagger""
        else:
            print ""\nSorry you don't currently have that weapon in your inventory.""
        print ""\nCurrent weapon has been changed to: %s"" % self.current_weapon
        sleep(2)
        return self
",sql,sql,2.304517065703061e-05,0.024168419418026294,0.02991099854262178,1.8676912100981277e-06,3.895953458022596e-06,8.203352609150459e-08,0.06741146013175596,0.8781745838475523,0.00030564721119240556
"import datetime
import tkinter

root=tkinter.Tk()
root.title(""Date"")

# gets current date
today = datetime.datetime.now()
# formats date
date_string = today.strftime(""%d/%m/%Y"")

# creates label with date
current_date_label=tkinter.Label(root, text=date_string, fg=""blue"")
# pack/add label to app
current_date_label.pack()

# run application
root.mainloop()",python,python,0.011062730639492441,0.1513373742516797,0.06961268021634373,0.0028150544750984306,0.005233923022145874,0.00045327950789571914,0.6864820754738183,0.047830766638839034,0.02517211577468671
"class FindMostFrequentWords:
    def __init__(self, sentence):
        self.sentence = sentence
    
    def find_most_frequent_words(self):
        # Split the sentence into words 
        words = self.sentence.split()
        
        # Create a list of words and their frequencies
        frequency_list = [[word, words.count(word)] 
        for word in set(words)] 
        
        # Sort the list by frequency
        frequency_list.sort(key=lambda x: x[1], reverse=True) 
        
        # Return the top 5 most frequent words in the sentence
        return frequency_list[:5] 

sentence = 'The the quick brown fox jumped over the lazy dog'

fmf_words = FindMostFrequentWords(sentence) 
top_5_words = fmf_words.find_most_frequent_words() 
print(top_5_words) 

# Output:
# [['the', 2], ['quick', 1], ['brown', 1], ['fox', 1], ['jumped', 1]]",python,sql,0.000520031679513933,0.007264850245729583,0.017597397004752685,2.8277029251924664e-07,0.0007309632265377269,1.4159194328086908e-06,0.3962777475152069,0.577223934835096,0.00038337680343774585
"def optimize(list1, list2):
    best_combination = (0, 0)
    best_value = -float('inf')
    for x in list1:
        for y in list2:
            value = x + y
            if value > best_value:
                best_value = value
                best_combination = (x, y)
    return best_combination

list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]
best_combination = optimize(list1, list2)
print(best_combination)",python,matlab,4.37256791867215e-07,6.3267418874558e-05,3.447787253312783e-06,1.151605127231465e-07,3.3002188977686946e-07,0.9999276777121288,6.582843431784969e-07,2.7291628455471124e-06,1.337195360316646e-06
"def remove_extras(lst):
    # Create a new list with unique items
    unique_items = []
    for item in lst:
        if item not in unique_items:
            unique_items.append(item)

    # Return the list with unique items
    return unique_items

test = [""Apple"", ""Banana"", ""Orange"", ""Apple"", ""Banana""]
print(remove_extras(test))",python,python,0.0004968970862563386,0.08880683094740169,0.015559717484213753,4.391220849291251e-05,0.010220896718906613,0.0028921683290443687,0.877678751766013,0.003062077147848448,0.001238748311823001
"def area_of_circle(radius):
    return 3.14 * (radius ** 2)

if __name__ == '__main__':
    radius = 5
    print(area_of_circle(radius)) # 78.5",python,python,0.0013773068203384883,0.00566880791520979,0.004519355188960125,0.0003329492955532589,0.0010297739931375627,0.00250700244124828,0.9800185004513183,0.002503663151489965,0.002042640742744325
"import requests
from bs4 import BeautifulSoup

# define url
url = ""https://www.example.com/news""

# send GET request to the specified url
page = requests.get(url)

# create BeautifulSoup object for parsing
soup = BeautifulSoup(page.text, 'html.parser')

# extract all article titles, publication dates, and authors
items = soup.find_all('article')
for item in items:
    title = item.find('h2').text
    pub_date = item.find('time').text
    author = item.find('span').text
    print(title + ' | ' + pub_date + ' | ' + author)",python,css,3.4227307339687704e-13,0.7527918995315367,0.1175434013883049,0.1292698449381842,3.154688390965991e-05,8.401740958638262e-08,0.00033562167810041645,2.2736143713168075e-05,4.865418499173208e-06
"from sklearn.naive_bayes import GaussianNB

# Create Gaussian Naive Bayes classifier with built-in datasets
gnb = GaussianNB()
# Train the model using the training sets
gnb.fit(X_train, y_train)
# Predict the output using the test set
y_pred = gnb.predict(X_test)",python,typescript,0.43307513190821906,0.002787020123653706,0.0013768303532974357,2.814924340609605e-06,0.002998339125754788,2.4889003807599457e-05,0.0011336567796407652,3.146984826362605e-07,0.5586010030828035
"# define the substring array
substrings = []

# loop through the length of the string
for i in range(len(string)):
    # create a loop to start with character 0 and end at character i
    for j in range(i + 1):
        # add all subsequences to the substring array
        substrings.append(string[j:i + 1])

# print the list of all possible subsequences
print(substrings)",python,python,3.2396329097780744e-06,0.00046438227445453505,0.00017151272147838427,0.308717288457665,1.3684543432930642e-05,0.0022650543466479736,0.46238925618310234,0.08918466172386393,0.13679092011644517
"x = 5

def evaluate_expression(x):
    y = (1 / x) + (x ** 2)
    return y",python,python,0.001281678734368022,0.004467575099351219,0.0027522328425783676,0.0002772760234901933,0.0009061138879367185,0.0001607131107963322,0.9877550881203316,0.0009403722690247907,0.0014589499121228176
"import concurrent.futures

def thread_function(script):
  // Code to run the given script in parallel

with concurrent.futures.ThreadPoolExecutor() as executor:
  executor.map(thread_function, scripts)",python,typescript,0.004748312327314512,0.00019864268387742852,0.002080483151667322,4.666453703865654e-07,0.00015670449422337823,7.306592185750631e-05,0.0020472535914629756,5.557904642173905e-06,0.9906895132795844
"def normalize_vector(values):
    length = 0
    for v in values:
        length += (v ** 2)
    length = pow(length, 0.5)
    if length == 0:
        return [0 for v in values]
    return [v / length for v in values]",python,javascript,0.0003920381816464935,0.001625646228758083,0.00010631354925552084,3.973409764597808e-05,0.41440326220504237,0.2733302018150269,0.2747665252477147,0.03517945266504553,0.00015682600986447913
"class Student():
    
    def __init__(self, name, grade):
        self.name = name 
        self.grade = grade
    
    def get_name(self):
        return self.name
    
    def get_grade(self):
        return self.grade
    
    def set_grade(self, grade):
        self.grade = grade",python,python,0.0007903140658549313,0.017868517546614487,0.04296016215945017,0.014014158341623797,1.5057741971800798e-06,1.585154174712449e-05,0.9016579682876623,0.021925541752831564,0.0007659805300184137
"from flask import Flask
 
app = Flask(__name__)
 
@app.route('/', methods=['GET', 'POST'])
def handle_request():
 if request.method == 'POST':
 # Handles post request
 elif request.method == 'GET':
 # Handles get request
 
 if __name__ == '__main__':
 app.run(debug=True)",python,css,0.4044494149486249,0.5909644050762105,0.00012335831708436016,7.629890001989678e-05,0.0001487319078221203,9.743323022233744e-06,0.0023773442790309234,0.0018355093746070523,1.5193873577884945e-05
"def test_gt_5(num):
    return num > 5",python,matlab,2.0895688162122836e-07,1.3724191129003904e-11,5.440912640978321e-07,3.380466683029909e-08,6.25905646624962e-08,0.9868827224012863,0.013115997402454015,2.539469474629826e-07,1.7679221110513745e-07
"from sklearn import tree
from sklearn.model_selection import train_test_split

# Create the Decision Tree classifier 
clf = tree.DecisionTreeClassifier()

# Train the classifier
clf = clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate model
accuracy = clf.score(X_test, y_test)",python,bash,0.9576578885584556,0.020681160076631525,0.0009479398237315289,4.3507584390966605e-06,0.0001234200173145814,2.810427378950511e-05,0.02011508091364691,4.4120877348720115e-08,0.0004420114571139123
"# get 3 numbers
num1 = int(input(""Please enter number 1: ""))
num2 = int(input(""Please enter number 2: ""))
num3 = int(input(""Please enter number 3: ""))

# sort numbers
sorted_nums = sorted([num1, num2, num3])

# print sorted numbers
print(*sorted_nums, sep=', ')",python,python,0.00019742029385400202,0.00035360888778421956,0.00016660039516968008,0.25978946051124857,3.840236594052882e-05,9.866701254814452e-11,0.7394042256965186,4.61170957744349e-05,4.164655042826362e-06
"def search(list, query): 
    return query in list",python,typescript,6.843975624964145e-05,0.03475218214956626,0.022196990024449737,0.010614482820321972,0.020984298469411477,0.2195411980039457,0.14012021571969213,0.004750959204915564,0.5469712338514475
"def merge_sort(nums):
    if len(nums) > 1:
        mid_index = len(nums) // 2
        left_half = nums[:mid_index]
        right_half = nums[mid_index:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                nums[k] = left_half[i]
                i += 1
            else:
                nums[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            nums[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            nums[k] = right_half[j]
            j += 1
            k += 1",python,python,0.0012196912266913412,0.004706645458226088,0.0022025997034932315,0.0003704670197613861,0.0005541355848058847,0.0008666882669695797,0.9853929500317077,0.0007996969233643952,0.003887125784980269
"#!/usr/bin/env python

from __future__ import division
import optparse, os

#This script uses an aligned fasta file and a tab deliminted file containing CDS coordinates to create a nexus input for BEAST

#In version 2.0, added a flag to throw if you only want coding sequence to be included in the nexus file

def main():
    usage = '%prog [options]'
    p = optparse.OptionParser()
    p.add_option('-f', '--fasta',  help='Aligned fasta. [None]')
    p.add_option('-c', '--coords', help='Tab delimited file with coordinates of CDS. Should have at least 3 tab delimited columns. The first is not used, will probably have some sort of CDS name. The next two have start and stop base positions.[None]')
    p.add_option('-o', '--out',  help='Name for output nexus file. [None]')
    p.add_option('--onlyCDS', default=False, action=""store_true"",  help='Use this flag if you only want coding regions to be included in the output nexus file. [None]')
    opts, args = p.parse_args()
    
    make_beast_nexus(opts)
        
#----------------------End of main()

def make_beast_nexus(opts):
    fout=open(opts.out, 'w')

    #Read in seqs
    names, seqs = read_fasta_lists(opts.fasta)
    #Get coding coordinates
    coding_coords=get_coords(opts.coords)
    
    #Make concatenated coding seqs
    coding_seqs=['']*len(seqs)
    for start, end in coding_coords:
        for i in range(len(seqs)):
            coding_seqs[i]+=seqs[i][start-1:end]
    
    
    if opts.onlyCDS:
        fout.write(""#NEXUS\n[File created using beast_nexus_prep.py using %s and %s]\n\nBEGIN TAXA;\n"" % (opts.fasta, opts.coords))
        fout.write(""DIMENSIONS NTAX=%d;\n\nTAXLABELS\n%s\n;\n\nEND;\n"" % (len(names), '\n'.join(names)))
        fout.write(""BEGIN CHARACTERS;\nDIMENSIONS NCHAR=%d;\nFORMAT DATATYPE=DNA MISSING=N GAP=-;\nMATRIX\n\n%s\n;\n\nEND;\n\n"" % (len(coding_seqs[0]), '\n'.join(['%s %s' % (names[x], coding_seqs[x]) for x in range(len(names))])))    
        fout.write(""BEGIN ASSUMPTIONS;\n\tcharset coding = 1-%d;\nend;\n"" % (len(coding_seqs[0])))

    else:
        #Get non-coding coordinates
        noncoding_coords=extrap_noncoding(coding_coords, len(seqs[0]))
    
        #Make concatenated noncoding seqs
        noncoding_seqs=['']*len(seqs)
        for start, end in noncoding_coords:
            for i in range(len(seqs)):
                noncoding_seqs[i]+=seqs[i][start-1:end]
    
        concat_seqs=[coding_seqs[i]+noncoding_seqs[i] for i in range(len(seqs))]
    
        coding_start=1
        coding_end=len(coding_seqs[0])
        noncoding_start=coding_end+1
        noncoding_end=len(concat_seqs[0])
    
        fout.write(""#NEXUS\n[File created using beast_nexus_prep.py using %s and %s]\n\nBEGIN TAXA;\n"" % (opts.fasta, opts.coords))
        fout.write(""DIMENSIONS NTAX=%d;\n\nTAXLABELS\n%s\n;\n\nEND;\n"" % (len(names), '\n'.join(names)))
        fout.write(""BEGIN CHARACTERS;\nDIMENSIONS NCHAR=%d;\nFORMAT DATATYPE=DNA MISSING=N GAP=-;\nMATRIX\n\n%s\n;\n\nEND;\n\n"" % (len(concat_seqs[0]), '\n'.join(['%s %s' % (names[x], concat_seqs[x]) for x in range(len(names))])))    
        fout.write(""BEGIN ASSUMPTIONS;\n\tcharset coding = %d-%d;\n\tcharset noncoding = %d-%d;\nend;\n"" % (coding_start, coding_end, noncoding_start, noncoding_end ))



    fout.close()
    
def extrap_noncoding(coding_coords, seq_len):
    non_coords=[]
    #To handle noncoding at the very beginning of the sequence
    if coding_coords[0][0] != 1:
        non_coords.append((1,coding_coords[0][0]-1))    
        
    #To handle noncoding regions in between coding seqs
    coding_sorted=sorted(coding_coords[:])
    for i in range(len(coding_sorted[:-1])):
        if coding_sorted[i+1][0]-coding_sorted[i][1]>0:
            non_coords.append((coding_sorted[i][1]+1,coding_sorted[i+1][0]-1))

    #To handle non-coding at the very end of the sequence
    if coding_coords[-1][1] != seq_len:
        non_coords.append((coding_coords[-1][1]+1, seq_len))

    print non_coords
    return non_coords

def get_coords(c_file):
    fin=open(c_file, 'r')
    coords=[]
    for line in fin:
        cols=line.strip().split('\t')
        coords.append((int(cols[1]), int(cols[2])))
    return coords

# Extracts data from a fasta sequence file. Returns two lists, the first holds the names of the seqs (excluding the '>' symbol), and the second holds the sequences
def read_fasta_lists(file):
	fin = open(file, 'r')
	count=0
	
	names=[]
	seqs=[]
	seq=''
	for line in fin:
		line=line.strip()
		if line and line[0] == '>':                #indicates the name of the sequence
			count+=1
			names.append(line[1:])
			if count>1:
				seqs.append(seq)
			seq=''
		else: seq +=line
	seqs.append(seq)
	
	return names, seqs

###------------------------------------->>>>    

if __name__ == ""__main__"":
    main()
",sql,typescript,0.11192324052437447,0.0004342945998507409,0.0019575445016526203,2.409715082011983e-05,2.334674434961221e-05,0.00046892124936141045,0.009018627643795156,0.001341974778798009,0.8748079528069979
"# Print all prime numbers up to 100

for num in range(2,101):  
   if all(num%i!=0 for i in range(2,num)):
      print(num)",python,matlab,6.893970875592629e-16,1.8957138961772476e-24,2.1484129043901174e-15,2.651147911196449e-16,8.029360230612621e-16,0.999999999999664,3.29085684624068e-13,2.4211578723677314e-15,4.445585769232972e-16
"list_of_names= [""Asher"", ""Aster"", ""Athena"", ""Robert""]
list_of_names.sort()

print(list_of_names)",python,python,0.0023787555907480366,0.02059917884746065,0.007327868886228502,0.0003936242595084538,0.0012682260834329954,0.0010883438851459987,0.9615303430703502,0.0031860541505069947,0.002227605226617948
even_arr = [x for x in arr if x % 2 == 0],matlab,matlab,4.891697756674816e-21,8.868018763277773e-21,2.294781780145474e-21,5.46606090376973e-22,7.585213748875264e-22,1.0,1.1351720507578218e-21,2.7984362552686077e-24,1.1387250775006292e-20
"def double_list(list_nums):
 for num in list_nums:
 print(num * 2)
 
list_nums = [4, 6, 2, 8]
double_list(list_nums)",python,matlab,0.00013001101317197786,5.058926829452741e-06,0.00030672118980262905,2.112607852238109e-05,8.498324715658435e-05,0.9889671570053215,0.010208330432811594,6.626487763491289e-05,0.00021034722874905962
"def expression(x):
    return 3 * x + 5

print(expression(7))",python,python,0.00011483411375945646,0.0031969369950747588,0.0007739370725505938,3.5339937902132533e-05,0.00013090491883645597,2.7278917323936286e-05,0.9943236358015032,0.0011637274731341395,0.00023340476991528673
"def compare_string_length(str1, str2):
    if len(str1) > len(str2):
        return str1
    else:
        return str2",python,python,0.0004096045312847343,0.0004044230164011407,5.532380041963458e-07,4.009729115752479e-05,0.14137614742202692,0.00010555059101283255,0.8517775207478266,0.005691295900111684,0.00019480726217430773
"word_count = {}

for word in words:
    if word not in word_count:
        word_count[word] = 1
    else:
        word_count[word] += 1

print(word_count) # output: {'Hello': 2, 'World': 1, 'again': 1}",css,bash,0.7941495541273941,0.004532833383809149,0.006460478855148055,1.918999975798305e-09,0.001748620863022787,0.0016813689236930844,0.19087704588176027,0.0004538502140156251,9.624583215697236e-05
"def html_from_dict(data):
    '''
    This function creates an HTML table from list of dictionaries.
    Each dictionary represents one row in the table.
    '''

    html = '<table>'
    html += '<tr>'
    
    # table headings
    data_keys = list(data[0].keys())
    for key in data_keys:
        html += '<th>' + str(key) + '</th>'
    html += '</tr>'

    # table content
    for row in data:
        html += '<tr>'
        for key in data_keys:
            html += '<td>' + str(row[key]) + '</td>'
        html += '</tr>'
    
    html += '</table>'
    
    return html",python,html,1.1974618306719967e-11,7.411608380039879e-10,0.9999999654339243,7.393839265482547e-12,3.3278302411988844e-08,1.6724105983002143e-11,3.809313325264686e-10,1.1775831395879393e-10,1.1830036436704719e-11
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Read IMDB data
data_df = pd.read_csv('imdb_data.csv')

# Create input data
X = data_df[['director_name', 'num_critic_for_reviews', 'duration', 'gross']]
y = data_df['imdb_score']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Train model
regressor = LinearRegression()  
regressor.fit(X_train, y_train)

# Predict rating for movie 'Grey Island'
grey_island_X = [['Grey Island', 2, 101, 1607800]]

print(regressor.predict(grey_island_X)) # Output: [3.6]",python,python,0.03262094272169959,0.08685558519263573,0.11288790455996711,4.9082992732333765e-05,0.0001580985080792867,0.0014050131010985838,0.7542532137392899,0.00448222243912767,0.007287936745369836
"def is_prime(n):
    if n==2 or n==3: return True
    if n%2==0 or n<2: return False
 
    for i in range(3,int(n**0.5)+1,2):
        if n%i==0:
            return False
    return True

def find_prime_numbers(start, end):
    primes = []
    for num in range(start,end + 1):
        if is_prime(num):
            primes.append(num)
    return primes

print(find_prime_numbers(1100, 1300)) # Output: [1103, 1105, 1107, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297]",python,python,3.3994577054158045e-05,2.9672648091585448e-08,4.819329394801769e-05,4.522257730387149e-06,7.533439817155066e-07,0.18110913306634446,0.818801112235255,5.154605656764535e-07,1.7460924723282466e-06
"def digit_sum(n):
    if n == 0:
        return 0

    return (n % 10) + digit_sum(n // 10)

n = 123
print(digit_sum(n))",python,python,1.2452216718623767e-05,0.000337431535584948,7.344559309900399e-05,3.5031113063281034e-06,7.326501609470192e-06,2.5915044841051064e-05,0.9995303159269925,2.942441307133386e-06,6.667628541119289e-06
"def quadratic(a, b, c):
    # calculate the discriminant
    d = (b**2) - (4*a*c)

    # find the two roots
    root1 = (-b-d**0.5)/(2*a)
    root2 = (-b+d**0.5)/(2*a)
    return root1, root2",python,python,0.015547740778461288,0.013886988412226178,0.012986437736607173,0.09073030961753942,0.010031802093207013,1.581486434368874e-05,0.7473727533067615,0.0034482853509734657,0.10597986783988018
"def num_squares():
  squares_dict = {}
  for i in range(1,11):
    squares_dict[i] = i*i 
  return squares_dict",python,matlab,3.7780549331140856e-16,1.5099600865564368e-22,3.456340717067845e-15,2.201929673352401e-17,1.858166694468247e-17,0.9999999460417763,5.395821946896584e-08,1.506054145212628e-16,1.4167526327513303e-16
"# A class to represent a stack 
class Stack:
	def __init__(self):	
		self.stack = []
		
	def push(self, data):
		self.stack.append(data)
		
	def pop(self):
		return self.stack.pop()
		
	def peek(self):
		return self.stack[-1]	

# Create a stack of characters
string = 'Hello World!'
char_stack = Stack()

# Push every character in the string to the stack
for i in string:
	char_stack.push(i)

# Pop and print each character from the stack
while len(char_stack.stack) > 0:
	print(char_stack.pop())",python,python,3.1516683194763045e-05,0.02230302451348826,0.009900205329268285,2.4906154170693585e-05,1.3956321373387662e-05,4.889554019127825e-06,0.853972905133722,0.11091000719660468,0.0028385891141588762
"def remove_duplicates(lst):
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result",python,python,8.287412150243003e-06,0.0008784473333711349,0.00038057726980478295,5.174410651400043e-06,0.0001709109598354692,1.8072075166712099e-06,0.9985329923536913,1.8680479316649675e-05,3.122573662496497e-06
"from flask import Flask
from flask_restful import Resource, Api
from dialogflow import detect_intent_texts

app = Flask(__name__)
api = Api(app)


@app.route('/', methods=['GET', 'POST'])
def detect_intent_text():
    IF session_id NOT present
        PLEASE create session_id
    request = detect_intent_texts(session_id, text)
    response = request.fulfillment_text
    return response


if __name__ == '__main__':
    app.run()",python,css,0.008459879148718421,0.975608735039684,0.002117565759540905,2.312762972281234e-06,1.1528844479488156e-05,6.063936647503433e-05,0.010027472172626185,0.003590257324095973,0.00012160958140757545
"def print_conditions():
    print(""Hello World"")
    print(""Goodbye World"")

print_conditions()",python,bash,0.9978606983577211,3.1738505951481578e-06,3.3618099078868983e-06,3.7038351202524786e-22,0.0001549399164011686,3.4690181581920588e-09,0.001977662812969906,7.568219478655225e-08,8.410119178889751e-08
"def remove_divisible(lst, n):
    new_list = []
    for item in lst:
        if item % n != 0:
            new_list.append(item)
    return new_list

mylist = [7, 8, 15, 21, 24]
num = 3

print(remove_divisible(mylist, num)) # [7, 8, 21]",python,matlab,6.332798567309659e-10,2.9823238896608644e-10,3.8183608897011554e-09,5.903918534048434e-11,2.711889355610535e-10,0.9999999836569144,1.1031303694221897e-08,2.7934295039709783e-11,2.037464291185265e-10
"import nltk
nltk.download('vader_lexicon')

from nltk.sentiment.vader import SentimentIntensityAnalyzer 

sid = SentimentIntensityAnalyzer() 
  
text = ""This movie was truly amazing""

sentiment_scores = sid.polarity_scores(text) 

if sentiment_scores['compound'] >= 0.05 : 
    print(""Positive"") 
elif sentiment_scores['compound'] <= - 0.05 : 
    print(""Negative"")
else : 
    print(""Neutral"")",python,python,0.01361726689766173,0.047551643995113066,0.004008698677634487,0.00023616993011583808,0.000485621304996878,0.002090804972044072,0.9175043801653389,0.010568210925679571,0.003937203131415586
"import numpy as np 
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt 

# define training data
x = np.array([i for i in range(len(stock_prices))]).reshape(-1,1)
y = np.array(stock_prices)

# create and train model 
model = LinearRegression()
model.fit(x, y)

# make predictions 
y_pred = model.predict(x)

# plot results
plt.plot(x, y, 'o-')
plt.plot(x, y_pred, 'x-')
plt.title('Stock Prices with Linear Regression Model')
plt.xlabel('Day')
plt.ylabel('Price')
plt.show()",python,python,0.17984795457541083,0.0035924329106247774,0.01525416500960908,1.206305587736033e-05,1.2189841655423393e-05,0.0005542148975963395,0.7997936483753271,3.435530487591873e-06,0.0009298958034115923
"print(""Hello, World!"")",python,bash,0.9999734119020168,9.96764694856539e-10,8.203989019786867e-09,1.3871331484896268e-31,2.3140070270935628e-05,1.5029167266270406e-12,3.438768591603071e-06,1.5910552505341453e-11,4.0953400341391626e-11
"from collections import Counter

string = ""The quick brown fox jumped over the lazy dog.""
words = string.split()
word_counts = Counter(words)

unique_words = set(words)

for word in unique_words:
    print(f""{word:15} {word_counts[word]:3}"")",css,python,0.00068198426203468,0.060867953400142664,0.015149149495772465,0.018480222944964396,8.07349423638351e-06,0.00026812107906947153,0.7717322946637657,0.13220338266905404,0.0006088179909601682
"import datetime
date_str = '2020-01-31'

def add_three_months(date_str):
    d = datetime.datetime.strptime(date_str, '%Y-%m-%d')
    d = d + datetime.timedelta(days=90)
    date_str = d.strftime('%Y-%m-%d')
    return date_str",python,python,0.009350227617492187,0.06921895292735751,0.022223353232979623,0.002035782043121838,0.006168844937277515,0.01157332223650925,0.8665815666357825,0.0029940363119885815,0.009853914057490976
"import speech_recognition as sr

r = sr.Recognizer()

words = ['happy', 'sad', 'angry']

with sr.Microphone() as source:
    print(""Say a word."")
    audio = r.listen(source)

try:
    word = r.recognize_google(audio).lower()
    if word in words:
        print(""The emotion of the word is:"", word)
    else:
        print(""The word is unknown."")
except:
    print(""Sorry could not recognize"")",python,python,0.03337226824102582,0.015229956831368833,0.024258806748682568,3.93185086382644e-05,0.0011988611955414995,0.0005836800144240065,0.7488867903001344,0.017958835189610656,0.15847148297057378
"class Person:
  def __init__(self, name, age, gender):
    self.name = name
    self.age = age
    self.gender = gender
    
    def display_person(self):
      print(""Name: "" + self.name + ""\nAge: "" + str(self.age) + ""\nGender: "" + self.gender)

person = Person(""John"", 28, ""Male"")
person.display_person()",python,python,0.0002833384028729077,0.005826892739658912,0.054752823713487365,0.04960044391644508,3.07998856111501e-06,1.3392242115126206e-05,0.8768846868735135,0.012530600995412103,0.00010474112793395009
"def sort_list(list):
    list.sort()
    return list

sorted_list = sort_list([""Banana"", ""Apple"", ""Orange"", ""Pear""])
print(sorted_list)",python,python,0.0007141955510369023,0.014853373800319756,0.0034211712755569685,0.00018676157860372369,0.0008040320506985841,0.001106469003244616,0.9716312469223791,0.006147762338388511,0.0011349874797718731
"import numpy as np
arr = np.zeros(4, dtype=int)
 
for i in range(len(arr)):
    arr[i] = i",python,python,0.0006573782002596685,5.1024535934238955e-05,4.836466345473868e-05,0.002399820940733146,6.236304732317338e-07,0.002933212420508261,0.9937432637781468,1.802659655104996e-06,0.00016450917083480013
"my_dict = {}
for item in my_list:
    my_dict[item] = None

print(my_dict)",python,css,0.0006578434383487263,0.7252141794738719,0.006028879872384542,9.433113525055059e-05,0.0038717965730976534,0.0006442435929362549,0.2628765345044507,0.00023907143063863393,0.00037311997902113466
"def purchase_item():
  print(""Hello! Let's purchase an item!"")
  name = input(""Please enter your name: "")
  address = input(""Please enter your address: "")
  item = input(""What would you like to purchase? "")
  quantity = input(""How many of that item would you like? "")

  print(""Thank you for your order!"")
  print(""Name: {}"".format(name))
  print(""Address: {}"".format(address))
  print(""Item: {}, Quantity: {}"".format(item, quantity))

purchase_item()",python,python,0.014235658323938683,0.08252056584303319,0.09858009822635172,0.0014312891995319162,0.20088783075415645,0.00011590222846085374,0.5998613579388824,0.00018337047325965017,0.0021839270123852916
"# Python code for Quick Sort
def quickSort(arr):
    less = []
    pivots = []
    more = []
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        for i in arr:
            if i < pivot:
                less.append(i)
            elif i > pivot:
                more.append(i)
            else:
                pivots.append(i)
        less = quickSort(less)
        more = quickSort(more)
        return less + pivots + more
 
# Driver Code to test above
arr = [3, 4, 7, 1, 8, 5]  
  
# Function call 
sorted_array = quickSort(arr)  
  
# Print the sorted array  
print(sorted_array)",python,matlab,3.2813786877788293e-06,1.098840000188227e-05,4.214768785158113e-06,3.325682280459705e-07,4.5744778942461105e-05,0.9994320776553923,1.1215912552815779e-05,1.5341979924598383e-06,0.0004906103394171215
"def smallest_of_list(nums):
    smallest = float(""inf"")
    for num in nums:
        if num < smallest:
            smallest = num
    return smallest

def largest_of_list(nums):
    largest = float(""-inf"")
    for num in nums:
        if num > largest:
            largest = num
    return largest

def avg_of_list(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum/len(nums)",python,matlab,1.457571564078336e-08,3.746956363872443e-12,4.299482198867409e-08,5.5560876755787655e-09,3.4267019827094647e-09,0.9999878354665874,1.2073933912357546e-05,1.2253619103011527e-08,1.178880668883074e-08
"def sort_by_length(arr): 
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if len(arr[i]) < len(arr[j]): 
                arr[i], arr[j] = arr[j], arr[i] 
    return arr
  
print(sort_by_length(arr))",python,matlab,5.5325867390514617e-08,1.3525783517357004e-07,5.447738390315506e-08,1.2690751291599722e-08,6.513826427256465e-09,0.9391005791425414,0.06089909665056753,7.272974264024056e-09,5.266825250349398e-08
"def scaleArray(arr, s1, s2):
  scaledArr = []
  for x in arr:
    scaledArr.append((x + s1) / s2)
  return scaledArr

arr = [1,2,3] 
scaledArr = scaleArray(arr, 2, 2)
print(scaledArr)",python,matlab,8.407454659796978e-08,2.765527010339186e-06,1.28633288336361e-07,2.2692582379588987e-08,4.4439712936818076e-08,0.9998698023215141,0.00012698538453085584,1.0429306740345277e-08,1.5649750756772348e-07
"def sortByLength(strings):
    """"""Sort a list of strings according to their lengths""""""
    # Sort the list using a key function
    return sorted(strings, key=len)

if __name__ == '__main__':
    strings = [""Python"", ""is"", ""a"", ""programming"", ""language""]
    print(sortByLength(strings))",python,javascript,0.0004777434562056567,0.005465441855501701,0.00023074794333571578,3.953717317167709e-06,0.9349365591873708,8.993628479586731e-05,0.015510593099701792,0.002913672310022271,0.04037135214574898
"import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Read the csv file and parse the data
df = pd.read_csv('iris.csv')
x = df.drop('species', axis=1).values
y = df['species'].values

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)

# Train the Decision Tree
model = DecisionTreeClassifier(criterion='entropy', max_depth=3)
model.fit(X_train, y_train)

# Make predictions and evaluate the accuracy
y_pred = model.predict(X_test)
score = accuracy_score(y_test, y_pred)

# Visualize the decision tree
export_graphviz(model, 
out_file='iris_tree.dot',
feature_names=['sepal length', 'sepal width', 'petal length', 'petal width'],
class_names=['setosa', 'versicolor', 'virginica'],
filled=True)",bash,bash,0.999999979293313,7.49961909028728e-09,1.3558675401779366e-10,1.933389975396326e-13,3.2293496320368416e-11,7.464096889738968e-13,1.2230216422453385e-08,1.197746539167119e-20,8.080316137160257e-10
"def is_prime(n):
    if n <= 1:
        return False
    i = 2
    while i*i <= n:
        if n % i == 0:
            return False
        i += 1
    return True
    
if __name__ == ""__main__"":
    num = int(input(""Enter a number: ""))
    if is_prime(num):
        print(""The number is a prime number."")
    else:
        print(""The number is not a prime number."")",python,python,1.1499597084280807e-06,4.915208113317981e-07,4.3328191904391855e-06,1.264244587181335e-06,7.230036205097071e-07,8.847103428245439e-07,0.9999868863656608,3.85080407718925e-06,4.165720013318217e-07
"import numpy as np

def fourierTransform(signal):
    N = signal.shape[0]
    W = np.exp(2j * np.pi * np.arange(N) / N)
    fourier = np.dot(signal, W)
    return fourier",python,python,0.03608635562140438,0.014119971242471297,0.006641904491420739,0.00032440066151268835,0.00017791923990797723,0.00045481339287124686,0.9341131523925922,0.0014712483654629484,0.006610234592356552
"import numpy as np
class LinearRegressionModel:
    def __init__(self, input_dim, output_dim):
        ''' Initialises the weights and bias of the linear regression model
        Arguments:
            input_dim {int} -- Number of input features
            output_dim {int} -- Number of outputs
        '''
        self.weights = np.zeros((input_dim, output_dim))
        self.bias = np.zeros((1, output_dim))

    def forward(self, x):
        ''' Calculates the forward pass of the linear regression model
        Arguments:
            x {numpy array} -- Input data of size (N, input_dim)
        Returns:
            out {numpy array} -- Output of the linear regression model of size (N, output_dim)
        '''
        out = np.dot(x, self.weights) + self.bias
        return out",python,java,0.0007408568551658855,0.005882640897151576,0.05491932029684343,0.7446926834533135,0.0032239511989218908,6.290549499136691e-08,0.17592898751413447,0.0008637136944310422,0.013747783184543066
"try:
    a = 5 / 0
except ZeroDivisionError as error:
    print(error)
except Exception as error:
    print(error)",python,typescript,0.00013738963056559065,0.0001833971615896144,0.0027852653082978303,5.2464121585096955e-05,4.9830810529410417e-05,0.00023368533589365794,0.038796871190606645,0.00024562904493589217,0.9575154673959962
"class Animal:
 def __init__(self, name, age):
  self.name = name
  self.age = age
 
 def speak(self):
  print(""My name is"", self.name)",python,java,3.8424291613177755e-05,0.00011991676692916938,0.004281443871111827,0.903705009285442,1.9438886003447437e-08,2.800944893523812e-07,0.09097623304738445,0.0008683212138718873,1.0351990272303967e-05
"def string_to_shell_command(string):
    split_string = string.split()
    command_name = split_string[0]
    input_args = split_string[1:]
    command_args = ''
    for arg in input_args:
        command_args += f'""{arg}""' + ' '
    return f'{command_name} {command_args}'",python,java,1.8801199384745196e-06,0.0022859753353208613,0.0007015078960002334,0.905483639329253,2.3820218262536242e-07,0.00016550654343195213,0.0862140407170134,0.004873173449975514,0.00027403840688397264
"def get_intersection(list_1, list_2):
    return [elem for elem in list_1 if elem in list_2]",python,matlab,5.434340054417953e-07,2.261268043077119e-06,1.7076560616603536e-06,1.1920162127666327e-07,6.022099104007726e-07,0.9999072654167391,8.623195773081135e-05,8.333458060206218e-12,1.2688475549127643e-06
"def selection_sort(arr):
    # traverse through all array elements
    for i in range(len(arr)):
        # find the minimum element in the remaining unsorted array
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[min_idx] > arr[j]:
                min_idx = j
        # swap the found minimum element
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

arr = [5, 8, 10, 15, 2] 
selection_sort(arr)
print(""Sorted array: "", arr)

Output: Sorted array:  [2, 5, 8, 10, 15]",python,matlab,8.105218442767366e-07,7.437944914679439e-07,2.360838271694289e-07,2.05717493989925e-08,1.348496267076453e-07,0.9988860057426461,0.00111175692713394,2.5645363086638992e-09,2.8894414453234373e-07
"user_input = input(""Enter a string: "")

char_list = []

for char in user_input:
 char_list.append(char)

print(char_list)",python,python,0.0006604603432586817,0.04932299799828042,0.015632242946910745,0.043566052505651015,7.592162632370825e-05,0.023147497486979106,0.8367060086092224,0.029329677972571258,0.0015591405108026151
"def evaluate(expression): 
    expression = expression.replace("" "", """")
    tokens = list(expression)
    
    a = tokens.pop(0)
    while len(tokens) > 0: 
        op = tokens.pop(0)
        b = tokens.pop(0)
        if op == '+':
            a = int(a) + int(b)
        elif op == '-':
            a = int(a) - int(b)
        elif op == '*':
            a = int(a) * int(b)
        elif op == '/':
            a = int(a) / int(b)
        else: 
            return False
    
    return a

result = evaluate(expression)
print(result)",python,java,4.052492728619189e-12,1.5652219032861936e-12,2.789158487677626e-12,0.9999999996015336,7.313432708673694e-13,1.6735920010575475e-23,3.877865189692927e-10,8.167118138544404e-13,7.249493533716013e-13
"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# load dataset
df = pd.read_csv('sales_data.csv')

# features and target values
X = df.drop(['Weekly_Sales'], axis = 1)
y = df.Weekly_Sales

# split into train and test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# train the model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# predict values
y_pred = regressor.predict(X_test)

# model evaluation
from sklearn.metrics import mean_squared_error, r2_score
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

# print results
print(""Root Mean Squared Error: {}"".format(rmse))
print(""R2 Score: {}"".format(r2))",python,python,0.024819745961766306,0.13406772460751218,0.005812054461294189,1.625099598151913e-05,4.484034857169818e-05,3.386687548599909e-05,0.8302339136568543,0.0005465944401178617,0.004425008652416121
"def create_list(string):
    entries = string.split("";"")
    result = []
    for entry in entries:
        info = entry.split("", "")
        person = {
            'name': info[0],
            'surname': info[1],
            'age': info[2],
        }
        result.append(person)
    return result

string = ""John, Smith, 25; Polly, King, 22""

result = create_list(string)
print(result)",css,java,9.969632413160708e-10,0.0007232977250106243,1.4157554224449137e-05,0.9888624043597858,4.7515576185235963e-11,1.4009880537773677e-08,0.010042281943869883,0.0003573451651818296,4.981975681733289e-07
"def replace_all_occurrences(str, char, replacement):
  return str.replace(char, replacement)

print(replace_all_occurrences(""Hello World!"", 'l', 'X'))",python,python,0.058434797986578385,0.0017318299131660192,0.004215096858302845,8.174252477431423e-10,0.04007244178269421,3.072460261151404e-05,0.894943807957503,0.00042813858535945524,0.00014316149635953338
"import numpy as np

# Define the function
def function(x):
    return x**2 - 6*x + 9

# Calculate the roots
roots = np.roots([1, -6, 9])

print(""The solutions for the equation are: x={} and x={}"".format(roots[0], roots[1]))",python,javascript,0.03212285931629605,0.011273039896837369,0.0005316554996122197,2.7267952100371055e-05,0.8198090079673452,0.00020181544054477844,0.026519932415291433,0.0002663906955740044,0.1092480308163985
"def diffMaxMin(arr):
    maxVal = arr[0]
    minVal = arr[0]
    
    for num in arr:
        if num > maxVal:
            maxVal = num
        elif num < minVal:
            minVal = num
            
    return maxVal - minVal

arr = [1, 8, 4, 5, 9]
result = diffMaxMin(arr)
print(result)",python,matlab,3.1970812060589415e-09,1.1065738601771704e-10,4.399352565006824e-09,8.678921300201404e-10,1.7276003046740424e-09,0.999997291658525,2.6918263192651256e-06,4.4850175097275126e-10,5.76407058890806e-09
"import numpy as np
from scipy.optimize import minimize

# Define the objective function
def objective(allocation):
    # Calculate portfolio return on investment
    portfolio_return = np.sum(allocation * stock_return)
    return -portfolio_return

# Set the bounds and constraints
bounds = [(0, n) for n in available_stocks]
constraints = [{'type': 'eq', 'fun': lambda x: np.sum(x)-1}]

# Initialize the starting allocations
starting_allocations = np.array([1/len(available_stocks)]*len(available_stocks))

# Optimize
result = minimize(objective, starting_allocations, bounds=bounds, constraints=constraints)
allocation = result.x

# Print the optimal portfolio allocation
print(allocation)",css,css,0.12529065991852717,0.7060781449370199,0.0058085555127287015,0.00023942185029033426,0.00826229320680846,0.0005375535950099563,0.1275227537817926,0.0008584756092441217,0.025402141588578713
"def get_longer_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

longer_string = get_longer_string(""Hello"", ""World"")
print(longer_string)",python,python,0.056862795367188794,0.0006918203836401429,0.0009054171723599582,7.387743105823864e-10,0.00188018114781131,4.234501830721859e-05,0.9391743984586287,0.0003274986161042708,0.00011554309718526418
"def add_fifteen(num):
    return num + 15",python,matlab,1.5233578417761248e-06,3.3522050881876355e-09,4.177477689760218e-06,2.9081561830057345e-07,5.854227171194932e-07,0.9986925988936454,0.0012984466311138224,1.1063198476436148e-06,1.2677293210851854e-06
"def get_pairs(list, k):
 pairs = []
 for i in range(len(list)):
 for j in range(i+1, len(list)):
 if list[i] + list[j] == k:
 pairs.append( [list[i], list[j]] )
 return pairs

print(get_pairs([1, 2, 3, 4, 5], 5))

# Output: [[1, 4], [2, 3]]",python,matlab,1.348601527759879e-06,4.6627147062307584e-07,4.783129258011085e-06,6.247580524101119e-08,9.39724859287546e-07,0.9955884953955945,0.004366732349357275,3.688826779836984e-05,2.837843292595094e-07
"# Python program to print all  
# prime number in an interval 

start = 1
end = 100

for val in range(start, end + 1): 
    if val > 1: 
        for n in range(2, val//2 + 2): 
            if (val % n) == 0: 
                break
            else: 
                if n == val//2 + 1: 
                    print(val)",python,python,0.1993690885934114,0.00020846885399415264,0.00034977703671433807,7.58760280309587e-07,0.00012924408095051844,0.2833027243374742,0.5159185546226888,0.0007091336796770622,1.2250034809339814e-05
"import numpy as np 
import pandas as pd 
from sklearn.linear_model import LinearRegression 
  
#read the dataset
data = pd.read_csv('house_data.csv') 
  
#split features and target
X = data.iloc[:, :-1].values 
y = data.iloc[:, 3].values 
  
#initialize the linear regression model  
model = LinearRegression() 
  
# fit the model with the data 
model.fit(X, y) 
  
#make predictions on the test set
predicted_price = model.predict([[square_footage, num_bedrooms, num_bathrooms]]) 
  
print('The expected price for the house is: $',predicted_price)",python,typescript,0.2821430980216474,0.08067284844422468,0.002061079503255453,2.9529103499650393e-06,0.00012484722858586408,5.857225854876103e-06,0.14509159884549064,2.898566031549941e-06,0.4898948192545596
"def count_element(list, element):
    count = 0
    for i in list:
        if i == element:
            count += 1
    return count",python,matlab,1.2993006700253814e-08,5.3149853979911544e-08,1.949156973612501e-08,1.7072085756017438e-09,1.0814163438826656e-08,0.9999979020055625,1.971594757543358e-06,4.859780321886835e-10,2.7757899366024894e-08
"name = input(""Enter your name: "")
print(""Hello "" + name + ""!"")",python,bash,0.8811172815877356,0.0006648907667306777,0.00852651292548568,0.01374583533036293,7.618062136367426e-07,2.579181055732017e-05,0.09584196744774694,4.68658104975327e-05,3.0092514669832556e-05
"FROM python:3.7

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .
EXPOSE 5000

CMD [""python"", ""app.py""]

# File app.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
 return 'Hello world!'

if __name__ == '__main__':
 app.run(host='0.0.0.0', debug=True)",python,bash,0.9999994125645257,1.5406501089901018e-07,2.1409368142696754e-07,5.025038344154309e-16,1.681184511660256e-07,5.895219244971888e-10,3.083099979106105e-08,1.956314794980534e-08,1.7466059902054066e-10
"#!/usr/bin/env python

""""""
  diff_controller.py - controller for a differential drive
  Copyright (c) 2010-2011 Vanadium Labs LLC.  All right reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
      * Neither the name of Vanadium Labs LLC nor the names of its 
        contributors may be used to endorse or promote products derived 
        from this software without specific prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL VANADIUM LABS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
""""""

import rospy

from math import sin,cos,pi

from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from diagnostic_msgs.msg import *
from tf.broadcaster import TransformBroadcaster

from ax12 import *
from controllers import *
from struct import unpack

class DiffController(Controller):
    """""" Controller to handle movement & odometry feedback for a differential 
            drive mobile base. """"""
    def __init__(self, device, name):
        Controller.__init__(self, device, name)
        self.pause = True
        self.last_cmd = rospy.Time.now()

        # parameters: rates and geometry
        self.rate = rospy.get_param('~controllers/'+name+'/rate',10.0)
        self.timeout = rospy.get_param('~controllers/'+name+'/timeout',1.0)
        self.t_delta = rospy.Duration(1.0/self.rate)
        self.t_next = rospy.Time.now() + self.t_delta
        self.ticks_meter = float(rospy.get_param('~controllers/'+name+'/ticks_meter'))
        self.base_width = float(rospy.get_param('~controllers/'+name+'/base_width'))

        self.base_frame_id = rospy.get_param('~controllers/'+name+'/base_frame_id', 'base_link')
        self.odom_frame_id = rospy.get_param('~controllers/'+name+'/odom_frame_id', 'odom')

        # parameters: PID
        self.Kp = rospy.get_param('~controllers/'+name+'/Kp', 5)
        self.Kd = rospy.get_param('~controllers/'+name+'/Kd', 1)
        self.Ki = rospy.get_param('~controllers/'+name+'/Ki', 0)
        self.Ko = rospy.get_param('~controllers/'+name+'/Ko', 50)

        # parameters: acceleration
        self.accel_limit = rospy.get_param('~controllers/'+name+'/accel_limit', 0.1)
        self.max_accel = int(self.accel_limit*self.ticks_meter/self.rate)

        # output for joint states publisher
        self.joint_names = [""base_l_wheel_joint"",""base_r_wheel_joint""]
        self.joint_positions = [0,0]
        self.joint_velocities = [0,0]

        # internal data            
        self.v_left = 0                 # current setpoint velocity
        self.v_right = 0
        self.v_des_left = 0             # cmd_vel setpoint
        self.v_des_right = 0
        self.enc_left = None            # encoder readings
        self.enc_right = None
        self.x = 0                      # position in xy plane
        self.y = 0
        self.th = 0
        self.dx = 0                     # speeds in x/rotation
        self.dr = 0
        self.then = rospy.Time.now()    # time for determining dx/dy

        # subscriptions
        rospy.Subscriber(""cmd_vel"", Twist, self.cmdVelCb)
        self.odomPub = rospy.Publisher(""odom"", Odometry, queue_size=5)
        self.odomBroadcaster = TransformBroadcaster()
		
        rospy.loginfo(""Started DiffController (""+name+""). Geometry: "" + str(self.base_width) + ""m wide, "" + str(self.ticks_meter) + "" ticks/m."")

    def startup(self):
        if not self.fake:
            self.setup(self.Kp,self.Kd,self.Ki,self.Ko) 
    
    def update(self):
        now = rospy.Time.now()
        if now > self.t_next:
            elapsed = now - self.then
            self.then = now
            elapsed = elapsed.to_sec()

            if self.fake:
                x = cos(self.th)*self.dx*elapsed
                y = -sin(self.th)*self.dx*elapsed
                self.x += cos(self.th)*self.dx*elapsed
                self.y += sin(self.th)*self.dx*elapsed
                self.th += self.dr*elapsed
            else:
                # read encoders
                try:
                    left, right = self.status()
                except Exception as e:
                    rospy.logerr(""Could not update encoders: "" + str(e))
                    return
                rospy.logdebug(""Encoders: "" + str(left) +"",""+ str(right))

                # calculate odometry
                if self.enc_left == None:
                    d_left = 0
                    d_right = 0
                else:
                    d_left = (left - self.enc_left)/self.ticks_meter
                    d_right = (right - self.enc_right)/self.ticks_meter
                self.enc_left = left
                self.enc_right = right

                d = (d_left+d_right)/2
                th = (d_right-d_left)/self.base_width
                self.dx = d / elapsed
                self.dr = th / elapsed

                if (d != 0):
                    x = cos(th)*d
                    y = -sin(th)*d
                    self.x = self.x + (cos(self.th)*x - sin(self.th)*y)
                    self.y = self.y + (sin(self.th)*x + cos(self.th)*y)
                if (th != 0):
                    self.th = self.th + th

            # publish or perish
            quaternion = Quaternion()
            quaternion.x = 0.0 
            quaternion.y = 0.0
            quaternion.z = sin(self.th/2)
            quaternion.w = cos(self.th/2)
            self.odomBroadcaster.sendTransform(
                (self.x, self.y, 0), 
                (quaternion.x, quaternion.y, quaternion.z, quaternion.w),
                rospy.Time.now(),
                self.base_frame_id,
                self.odom_frame_id
                )

            odom = Odometry()
            odom.header.stamp = now
            odom.header.frame_id = self.odom_frame_id
            odom.pose.pose.position.x = self.x
            odom.pose.pose.position.y = self.y
            odom.pose.pose.position.z = 0
            odom.pose.pose.orientation = quaternion
            odom.child_frame_id = self.base_frame_id
            odom.twist.twist.linear.x = self.dx
            odom.twist.twist.linear.y = 0
            odom.twist.twist.angular.z = self.dr
            self.odomPub.publish(odom)

            if now > (self.last_cmd + rospy.Duration(self.timeout)):
                self.v_des_left = 0
                self.v_des_right = 0

            # update motors
            if not self.fake:
                if self.v_left < self.v_des_left:
                    self.v_left += self.max_accel
                    if self.v_left > self.v_des_left:
                        self.v_left = self.v_des_left
                else:
                    self.v_left -= self.max_accel
                    if self.v_left < self.v_des_left:
                        self.v_left = self.v_des_left
                
                if self.v_right < self.v_des_right:
                    self.v_right += self.max_accel
                    if self.v_right > self.v_des_right:
                        self.v_right = self.v_des_right
                else:
                    self.v_right -= self.max_accel
                    if self.v_right < self.v_des_right:
                        self.v_right = self.v_des_right
                self.write(self.v_left, self.v_right)

            self.t_next = now + self.t_delta
 
    def shutdown(self):
        if not self.fake:
            self.write(0,0)

    def cmdVelCb(self,req):
        """""" Handle movement requests. """"""
        self.last_cmd = rospy.Time.now()
        if self.fake:
            self.dx = req.linear.x        # m/s
            self.dr = req.angular.z       # rad/s
        else:
            # set motor speeds in ticks per 1/30s
            self.v_des_left = int( ((req.linear.x - (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0)
            self.v_des_right = int( ((req.linear.x + (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0)

    def getDiagnostics(self):
        """""" Get a diagnostics status. """"""
        msg = DiagnosticStatus()
        msg.name = self.name
        msg.level = DiagnosticStatus.OK
        msg.message = ""OK""
        if not self.fake:
            msg.values.append(KeyValue(""Left"", str(self.enc_left)))
            msg.values.append(KeyValue(""Right"", str(self.enc_right)))
        msg.values.append(KeyValue(""dX"", str(self.dx)))
        msg.values.append(KeyValue(""dR"", str(self.dr)))
        return msg

    ###
    ### Controller Specification: 
    ###
    ###  setup: Kp, Kd, Ki, Ko (all unsigned char)
    ###
    ###  write: left_speed, right_speed (2-byte signed, ticks per frame)
    ###
    ###  status: left_enc, right_enc (4-byte signed)
    ### 
    
    def setup(self, kp, kd, ki, ko):
        success = self.device.execute(253, AX_CONTROL_SETUP, [10, kp, kd, ki, ko])

    def write(self, left, right):
        """""" Send a closed-loop speed. Base PID loop runs at 30Hz, these values
                are therefore in ticks per 1/30 second. """"""
        left = left&0xffff
        right = right&0xffff
        success = self.device.execute(253, AX_CONTROL_WRITE, [10, left%256, left>>8, right%256, right>>8])

    def status(self):
        """""" read 32-bit (signed) encoder values. """"""
        values = self.device.execute(253, AX_CONTROL_STAT, [10])
        left_values = """".join([chr(k) for k in values[0:4] ])        
        right_values = """".join([chr(k) for k in values[4:] ])
        try:
            left = unpack('=l',left_values)[0]
            right = unpack('=l',right_values)[0]
            return [left, right]
        except:
            return None

",sql,sql,4.732119554283439e-05,0.012241672175100304,0.18600957326951553,2.8811991833258885e-06,3.4940967678286866e-06,9.151133736362085e-07,0.012071706450644069,0.7893120806051831,0.0003103558946893882
"class Student:
    def __init__(self, course_name, grades):
        self.course_name = course_name
        self.grades = grades
        
    def get_grade(self):
        return sum(self.grades) / len(self.grades)",python,python,0.0006633459423632783,0.0503596616274014,0.10306329545452912,0.0001691781444719154,0.00012502489287364362,4.241044708034753e-05,0.7383108195930138,0.1042214842160049,0.0030447796822615286
"def character_count(text):
    char_dict = {}
    for char in text:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict

result = character_count(text)
print(result)",python,python,0.0010429421434632361,0.26658428248593746,0.00201609034977451,0.00010057615495939257,0.001225512266328668,0.0049332642907768,0.7119674837955862,0.0071150996904151146,0.005014748822758502
"removed_string = string[:1] + string[2:]
print(removed_string) # ""xample""",python,java,9.22753345226816e-23,7.44857195395343e-13,1.545071355857603e-14,0.9999999997575009,2.6352492226918604e-25,4.789181568366088e-18,1.9987781254498496e-10,4.1858780937164426e-11,1.8975648666343276e-15
"class TreeNode:
    def __init__(self, name, value, left=None, right=None):
        self.name = name
        self.value = value
        self.left = left
        self.right = right",python,sql,0.002116784913170741,0.06257802016654834,0.11538615770867411,0.36433381384507346,7.942394219895216e-07,0.02484749675764939,0.0025842883479647886,0.4273326943359321,0.0008199496855651673
"def count_pairs(numbers, x):
    count = 0
    i, j = 0, len(numbers) - 1
    while i < j: 
        sum = numbers[i] + numbers[j]
        if sum == x: 
            count += 1
            i += 1
        elif sum < x: 
            i += 1 
        else: 
            j -= 1
    return count",python,java,6.010196185987639e-05,0.00031706803477514283,0.00048384308095044293,0.7133394003613326,0.0003794081766090447,5.4646375629037526e-08,0.28519122208594627,0.00015225414849728274,7.664750365367297e-05
"def remove_vowels(string1, string2):
  res = ''
  vowels = 'aeiouAEIOU'

  for char in string1 + string2:
    if char not in vowels:
      res += char
  
  return res

print(remove_vowels(string1, string2))",python,python,0.00019941657897511555,0.003953242464720623,0.0007147151987603869,1.8892512095475794e-05,0.00013012219547833088,0.000616440748533802,0.9924681030936057,0.001614890232057505,0.00028417697577314953
"def sum_of_digits(n):
   """"""Find the sum of all the digits of an integer n""""""
   s = 0
   while n:
       s += n % 10
       n //= 10
   return s",python,javascript,0.0006126269459855845,0.002063338825863603,0.007983813493958448,0.003822249404721906,0.6153984098665137,2.5080550670766694e-05,0.3624322047377915,0.0003235576460741421,0.0073387185284202955
"def primeFactors(n): 
    pf = [] 
    i = 2
    while i * i <= n: 
        if n % i: 
            i += 1
        else: 
            n //= i 
            pf.append(i)
    if n > 1: 
        pf.append(n)
  
    return pf",python,matlab,3.1792224794253523e-06,1.3529100306923148e-05,7.463936203227295e-06,7.90086482454601e-07,1.0760555829355303e-06,0.9999637296598926,6.102242194033423e-06,1.4283891491250766e-06,2.7013077092763735e-06
"# Program to find the longest common subsequence between two strings 
def lcs(X, Y): 
    # find the length of the strings 
    m = len(X) 
    n = len(Y) 

    # declaring the array for storing the dp values 
    L = [[None]*(n+1) for i in range(m+1)] 

    # Following steps to build L[m+1][n+1] in bottom up manner 
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0 : 
                L[i][j] = 0
            elif X[i-1] == Y[j-1]: 
                L[i][j] = L[i-1][j-1]+1
            else: 
                L[i][j] = max(L[i-1][j] , L[i][j-1]) 

    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] 
    return L[m][n] 

# Driver program 
X = ""ABACEDF""
Y = ""ABDCF""

print(""Length of LCS is "", lcs(X, Y))",python,python,0.036232686606720015,0.00021116497334462564,0.0011040475902145833,0.00011335234939735321,0.04276502951027539,0.0010403666477248133,0.8380225375613038,0.060011613906662604,0.020499200854356782
"def quicksort(arr):
  if len(arr) <= 1:
    return arr
  pivot = arr[len(arr) // 2]
  left = [x for x in arr if x < pivot]
  middle = [x for x in arr if x == pivot]
  right = [x for x in arr if x > pivot]
  return quicksort(left) + middle + quicksort(right)

print(quicksort([3,6,8,10,1,2,1]))",python,matlab,2.9765850164487715e-09,1.0719138954215695e-08,2.163579895784466e-09,5.080810893188007e-10,2.850024762959677e-10,0.9999970636282284,2.916704641623668e-06,1.889470046110096e-10,2.8257955154914374e-09
"import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer

# Data
texts = ['This is an amazing day!', 'I am feeling sad today.']
labels = [1, 0] # 1 = positive sentiment and 0 = negative sentiment

# Vectorizing the texts
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(texts)

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size = 0.25, random_state = 0)

# Fitting the model
classifier = LogisticRegression()
classifier.fit(X_train, y_train)

# Predicting
y_pred = classifier.predict(X_test)
print(y_pred)",python,python,0.0656862105979932,0.05173677175385699,0.0016379994578697974,5.400106575100297e-05,0.00045153487322125655,4.7891241956077575e-05,0.7169503622784321,0.00010522522327349028,0.16333000350764612
"#Using Python

def max_frequency_element(data):
    # Create an empty dictionary to store the frequency of each element
    frequency = {}
    
    # Iterate over the list and fill in the frequency dictionary
    for x in data:
        if x in frequency:
            frequency[x] += 1
        else:
            frequency[x] = 1
            
    # Now find the key with the maximum frequency
    maximum_frequency = 0
    max_frequency_element = None
    
    for key, value in frequency.items():
        if value > maximum_frequency:
            maximum_frequency = value
            max_frequency_element = key
            
    return max_frequency_element

data = [1, 4, 2, 6, 2, 1, 2, 9]
max_frequency_element = max_frequency_element(data)
print(max_frequency_element)
# Output: 2",python,matlab,0.0004514514490251277,0.2744258181523311,0.0012930998274245386,3.411167300856885e-07,0.00740992523694721,0.6505236323020375,1.918222975069593e-05,0.0003502336656376319,0.06552631602011615
"x = 5
y = 7
sum = x + y

# Add the correct operator here
sum = x + y

print(""Sum="", sum)",python,java,0.00048379234533805197,0.0005940837756218424,0.0029617181991601813,0.9879053834338635,0.0036193283635657463,1.093885196528045e-05,0.0036020560663116534,0.0005784363262382589,0.0002442626379354486
"import random

# Define the board
board = ['_', '_', '_', 
         '_', '_', '_', 
         '_', '_', '_']

# Define the players
player = 'X'
ai = 'O'

# Define the rules of the game
def play_game():
 # Draw initial board
 draw_board(board)

 # Choose the player to start (randomly)
 choose_player()
 
 # Start playing the game
 game_state = 'Playing'
 while game_state == 'Playing':
  if player == 'X':
   # Ask the player to make a move
   make_move(player)
   # Check if anyone has won the game after the player's move
   game_state = check_game(board, player)
   # Change the player
   player = ai
  else:
   # Let the AI make a move
   make_move(ai)
   # Check if anyone has won the game after the AI's move
   game_state = check_game(board, ai)
   # Change the player
   player = 'X'
 

# Draw the board
def draw_board(board):
 print(""-----------------"")
 for i in range(3):
  print(""| "", board[i*3], "" | "", board[i*3 + 1], "" | "", board[i*3 + 2], "" |"")
  print(""-----------------"") 

# Choose the player to start (randomly)
def choose_player():
 global player
 random_num = random.randint(0,1)
 if random_num == 0:
  player = 'X'
 else:
  player = 'O'

# Make a move
def make_move(player):
 legal_moves = [i for i, x in enumerate(board) if x == '_']
 move = -1

 # Player is human
 if player == 'X':
  while move not in legal_moves:
     move = int(input(""Choose your move: (0-9)""))
 
 # Player is AI
 else:
  move = random.choice(legal_moves)

 # Make the move
 board[move] = player

# Check if anyone has won
def check_game(board, player):
 for row in range(3):
  if board[row*3] == board[row*3 + 1] and board[row*3 + 1] == board[row*3 + 2]:
   if board[row*3] == player:
    return 'Player ' + player + ' won the game!'

 for col in range(3):
  if board[col] == board[col + 3] and board[col + 3] == board[col + 6]:
   if board[col] == player:
    return 'Player ' + player + ' won the game!'

 if board[0] == board[4] and board[4] == board[8]:
  if board[0] == player:
   return 'Player ' + player + ' won the game!'

 if board[2] == board[4] and board[4] == board[6]:
  if board[2] == player:
   return 'Player ' + player + ' won the game!'

 # Check if all the squares are filled
 if board.count('_') == 0:
  return 'Draw!'

 return 'Playing'

# Execute the game
play_game()",python,python,0.062278464865816514,0.03337813271100301,0.00877388425698169,0.00012433616796644325,0.1004645340748511,0.02055202178571387,0.33506198757131067,0.27683921155455765,0.16252742701179906
"import random

items = ['a', 'b', 'c', 'd']
random.shuffle(items)

print(items)",python,python,0.00033144601338052737,0.05914167398168215,0.0010095800970019806,1.106825736844975e-05,0.0052060002106490465,6.242413166211592e-06,0.8926501331755792,0.041637256262653,6.599588519424352e-06
"for i in range(3, 11):
    if(i % 2 == 0):
        print(i)",python,matlab,5.379839654179141e-21,6.1351192684115876e-30,2.130406467552319e-20,1.2326546456504435e-22,3.330245168218143e-22,0.9999999999999998,1.5817524948768142e-16,8.900544194337892e-23,1.5276440602791175e-21
"import os

def get_filetype(filename):
 _, file_extension = os.path.splitext(filename)
 return(file_extension.lower()[1:])

filetype = get_filetype(""example.jpg"")
print(filetype)

# Output: jpg",python,python,0.031083588539124435,0.33982969274567676,0.03356342896478868,0.00612563896668215,0.005099379920269565,0.0003837273678924023,0.5204052088846634,0.0632307192176121,0.0002786153932905523
"prime_nos = {11, 13, 17, 19, 23, 29}

output_dict = {prime_no: prime_no**2 for prime_no in prime_nos}
print(output_dict)",css,python,0.005482334935176599,0.021919296345630685,0.013287570203335305,0.0008753405242169029,0.004971566205859991,0.07923654888576405,0.862096623416317,0.0036054111858529426,0.008525308297846694
"def sortList(input_list):
 # Create an empty list to store the sorted elements
 sorted_list = []
 
 while len(input_list) > 0:
 # Take the first element of the input list
 min_element = input_list[0]
 
 # Get the index of the minimum element
 min_index = 0
 
 # Iterate over the list to find the index of the minimum element
 for i in range(1, len(input_list)):
 # Check if the current element is the smallest
 if input_list[i] < min_element:
 min_element = input_list[i]
 min_index = i
 
 # After finding the minimum element, append it to the sorted list
 sorted_list.append(min_element)
 
 # Remove the minimum element from the input list
 del input_list[min_index]
 
 # Return the sorted list
 return sorted_list
 
# Test
input_list = [14, 2, 3, 12, 15, 8]

sorted_list = sortList(input_list)

print(sorted_list)
# Output: [2, 3, 8, 12, 14, 15]",python,javascript,0.007483580461944282,0.0034188249645002488,0.005144767720668605,3.684244399901895e-05,0.634932340377204,0.04174792541578343,0.11598648784363999,0.0005495166320658969,0.19069971414019463
"def last_elements(lst, n):
    return lst[-n:]",python,python,1.819192307854659e-05,0.00011738681098889915,4.769404209300214e-05,3.514819746534356e-06,1.003973904387956e-05,3.478468270202896e-07,0.999743966020612,3.781935866721665e-05,2.103943894269167e-05
"#import matplotlib.pyplot as plt 
import numpy as np 
import sympy as sym 
from scipy import optimize 

# define the function
def function(x, y):
	return 5*x + 3*y 

# define the inputs
x = sym.Symbol('x') 
y = sym.Symbol('y') 

# optimize the function
result = optimize.minimize(function, [0, 0]) 

# output the results
print('The optimal value of x is:', result.x[0]) 
print('The optimal value of y is:', result.x[1])",python,javascript,0.00043222338512496976,0.005132141664271983,4.50303428797234e-05,2.813051463158953e-07,0.9937897676652824,4.356961754217712e-06,9.099886000566031e-05,3.3886394401927655e-05,0.0004713134211326516
"# views.py
def search(request):
    query = request.GET.get('q')
    if query:
        results = MyModel.objects.filter(
            Q(title__icontains=query) # Search title field
            | Q(body__icontains=query) # Search body field
        ).distinct()
    else:
        results = []
    return render(request, 'results.html', {
        'results': results,
        'query': query
    })

# models.py
class MyModel(models.Model):
    title = models.CharField(max_length=100)
    body = models.TextField()
    
# results.html
<h1>Results</h1>
{% if results %}
    {% for result in results %}
        {{ result.title }}
    {% endfor %}
{% else %}
    <p>No results</p>
{% endif %}",css,html,0.0013612753898068811,0.0008732960483778144,0.9949418469106718,5.542609393556602e-06,0.0027746855353010806,3.459954549731949e-06,5.296966761327429e-06,7.83424533306656e-07,3.3813160604371764e-05
"class SpeciesClassifier():
    def __init__(self, species_list):
        self.species_list = species_list

    def classify_species(self, species_name):
        for name_from_list in self.species_list:
            if name_from_list == species_name:
                return self.species_list[name_from_list]['classification']
        return None",python,sql,6.106208195930669e-06,0.00354088215669442,0.02021642067561211,3.7031125234967984e-07,1.3647142383864207e-06,2.9653777175481984e-06,0.43857264245078276,0.5376290537820304,3.0194323476185026e-05
"def is_prime(n):
 if n <= 1:
 return False

 for i in range(2, n):

 if n % i == 0:
 return False

 return True",python,python,1.583796435139497e-07,2.829063375768894e-08,3.962396070607732e-06,9.785096474935669e-09,2.3007483727141916e-08,9.283407907303936e-05,0.9999028516607115,9.45152148318359e-08,3.78860726559015e-08
"import math

def generate_primes(n): 
    primes = []
    num = 2
    while len(primes) < n: 
        is_prime = True
        for i in range(2, int(math.sqrt(num)) + 1): 
            if num % i == 0: 
                is_prime = False
                break

        if is_prime: 
            primes.append(num)

        num += 1
    
    return primes

n = 8
primes = generate_primes(n)
print(primes)",python,matlab,2.782930020539034e-05,1.0848871992370977e-07,4.0766139266206086e-05,2.904748881258546e-05,2.8843047110024e-06,0.974149979744147,0.02573592739461514,3.7585705927838434e-06,9.698568929918636e-06
"class Vector3D:

 def __init__(self, x, y, z):
 self.x = x
 self.y = y
 self.z = z
  
 def dot_product(self, vec2):
 return (self.x * vec2.x + self.y * vec2.y + self.z * vec2.z)
  
 def cross_product(self, vec2):
 return Vector3D(
  self.y * vec2.z - self.z * vec2.y,
  self.z * vec2.x - self.x * vec2.z,
  self.x * vec2.y - self.y * vec2.x
 )
  
 def magnitude(self):
 return (self.x**2 + self.y**2 + self.z**2)**0.5",python,python,0.0003346398514429589,0.01943470450002516,0.1810594721377637,2.0201922295806942e-05,0.00017371395326956697,1.9866041856078762e-05,0.629778258228885,0.1684282369076487,0.0007509064568131483
"def count_words(text):
    ''' Counts the number of words in a text '''
    # Optimization #1: Replacing the loop and using Python's count method
    word_count = len(text.split(' ')) 
    return word_count",python,typescript,0.0055536295791740456,0.007595557587243985,0.00021610733421384957,7.396225762611152e-06,0.002992368453050244,3.4046975512336336e-06,0.1444855276956734,0.001705701213829536,0.8374403072135012
"def filter_x(list):
    new_list = []

    # iterate through the list 
    for i in list:
        if 'x' not in i:
            # add the string not containing x
            new_list.append(i)
    return new_list

list = ['abc', 'efg', 'X', 'xyz', 'xabc']
filtered_list = filter_x(list)
print(""The list after filtering: "", filtered_list)",python,sql,0.00046260719176772233,0.00580381735316474,0.005768503535036353,0.023071283411813033,0.000866411725859808,0.25016147326205906,0.15224829699632467,0.5414709112818167,0.020146695242157932
"import string
import random

def password_generator(length):
   password_characters = string.ascii_letters + string.digits + string.punctuation
   new_password = """".join(random.choice(password_characters) for i in range(length))
   return new_password",sql,sql,5.752697796988442e-13,9.273315141397717e-09,1.3434531183786398e-08,0.05629935946588396,5.05382495043141e-14,2.3265891962232473e-09,3.250377197890738e-05,0.9436681109875661,7.395094647429838e-10
"def generate_dict(list1):
    my_dict = {}
    for item in list1:
        my_dict[item] = item ** 2
    return my_dict",python,python,0.0005126391274171762,0.24869758685441407,0.009879336002659958,7.810234899324258e-05,0.009949491898759074,0.0002087169097981864,0.7303174700308049,0.0001162517595139272,0.00024040506763947254
"import math

num = float(input(""Enter a number: ""))

# checking if the number is negative
if num < 0:
    print(""The square root of the given number cannot be computed"")
else:
    print(""The square root of the given number is:"",math.sqrt(num))",python,python,0.00020053767165723307,4.267106474322489e-05,0.00039541442816774526,1.897444998759507e-05,0.0017142294216288326,0.019217892117468268,0.751536581437193,0.0009878119373998863,0.22588588747175425
"from sklearn.linear_model import LinearRegression
import numpy as np

# Load the data
X = np.array([[1000], [2000], [3000]])
y = np.array([20000, 40000, 60000])

# Create the linear regression model
model = LinearRegression()

# Train the model with the data
model.fit(X, y)

# Print the model parameters
print('Intercept:', model.intercept_) 
print('Coefficient:', model.coef_)",python,bash,0.9960073022639163,0.00021066486821534248,6.017706643332267e-05,9.128252093625482e-08,1.8426253733971417e-06,5.315508681162363e-07,0.0024163237319457472,8.163574641706948e-11,0.0013030665290909868
"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# CadQuery script to generate connector models

## requirements
## freecad (v1.5 and v1.6 have been tested)
## cadquery FreeCAD plugin (v0.3.0 and v0.2.0 have been tested)
##   https://github.com/jmwright/cadquery-freecad-module

## This script can be run from within the cadquery module of freecad.
## To generate VRML/ STEP files for, use export_conn_jst_xh
## script of the parent directory.

#* This is a cadquery script for the generation of MCAD Models.             *
#*                                                                          *
#*   Copyright (c) 2016                                                     *
#* Rene Poeschl https://github.com/poeschlr                                 *
#* All trademarks within this guide belong to their legitimate owners.      *
#*                                                                          *
#*   This program is free software; you can redistribute it and/or modify   *
#*   it under the terms of the GNU General Public License (GPL)             *
#*   as published by the Free Software Foundation; either version 2 of      *
#*   the License, or (at your option) any later version.                    *
#*   for detail see the LICENCE text file.                                  *
#*                                                                          *
#*   This program is distributed in the hope that it will be useful,        *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
#*   GNU Library General Public License for more details.                   *
#*                                                                          *
#*   You should have received a copy of the GNU Library General Public      *
#*   License along with this program; if not, write to the Free Software    *
#*   Foundation, Inc.,                                                      *
#*   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA           *
#*                                                                          *
#* The models generated with this script add the following exception:       *
#*   As a special exception, if you create a design which uses this symbol, *
#*   and embed this symbol or unaltered portions of this symbol into the    *
#*   design, this symbol does not by itself cause the resulting design to   *
#*   be covered by the GNU General Public License. This exception does not  *
#*   however invalidate any other reasons why the design itself might be    *
#*   covered by the GNU General Public License. If you modify this symbol,  *
#*   you may extend this exception to your version of the symbol, but you   *
#*   are not obligated to do so. If you do not wish to do so, delete this   *
#*   exception statement from your version.                                 *
#****************************************************************************

__title__ = ""model description for 4UCON 17809 series connectors""
__author__ = ""hackscribble""
__Comment__ = 'model description for 4UCON 17809 series connectors using cadquery'

___ver___ = ""0.3 18/06/2020""


import cadquery as cq
from Helpers import show
from collections import namedtuple
import FreeCAD
from conn_4ucon_17809_params import *

from ribbon import Ribbon


def generate_straight_pin(params, pin_1_side):
    foot_height = seriesParams.foot_height
    pin_width=seriesParams.pin_width
    pin_depth=seriesParams.pin_depth
    pin_height=seriesParams.pin_height
    pin_inside_distance=seriesParams.pin_inside_distance
    pin_thickness = seriesParams.pin_thickness
    chamfer_long = seriesParams.pin_chamfer_long
    chamfer_short = seriesParams.pin_chamfer_short
    sign = 1 if pin_1_side else -1
    pin=cq.Workplane(""YZ"").workplane(offset=-pin_width/2.0)\
        .moveTo(0, foot_height)\
        .line(sign*pin_thickness/2,0)\
        .line(sign*1.27,-foot_height)\
        .line(0, -2.54)\
        .line(sign*-pin_thickness,0)\
        .line(0, 2.54)\
        .line(sign*-1.27, foot_height)\
        .line(0,1)\
        .close()\
        .extrude(pin_width).edges(""|X"").fillet(0.07)
    return pin


def generate_2_pin_group(params, pin_1_side):
    pin_pitch=params.pin_pitch
    pin_y_pitch=params.pin_y_pitch
    num_pins=params.num_pins
    pin_a = generate_straight_pin(params, pin_1_side).translate((0, -pin_y_pitch/2, 0))
    pin_b = pin_a.translate((0, -2 * pin_y_pitch, 0))
    pin_group = pin_a.union(pin_b)
    return pin_group


def generate_pins(params):
    pin_pitch=params.pin_pitch
    num_pins=params.num_pins
    pins = generate_2_pin_group(params, pin_1_side=True)
    for i in range(1, num_pins // 2):
        pins = pins.union(generate_2_pin_group(params, i % 2 == 0).translate((i*pin_pitch,0,0)))
    return pins


def generate_2_contact_group(params):
    pin_y_pitch=params.pin_y_pitch
    foot_height = seriesParams.foot_height
    pin_thickness = seriesParams.pin_thickness
    pin_width=seriesParams.pin_width
    y_offset = -(2*pin_y_pitch)
    c_list = [
        ('start', {'position': (pin_y_pitch, foot_height), 'direction': 90.0, 'width':pin_thickness}),
        ('line', {'length': 4.5}),
        ('arc', {'radius': 0.2, 'angle': 35.0}),
        ('line', {'length': 3}),
        ('arc', {'radius': 2.0, 'angle': -70.0}),
        ('line', {'length': 2}),
        ('arc', {'radius': 0.2, 'angle': 35.0}),
        ('line', {'length': 2.8}),
    ]
    ribbon = Ribbon(cq.Workplane(""YZ"").workplane(offset=-pin_width/2.0), c_list)
    contact1 = ribbon.drawRibbon().extrude(pin_width)
    contact2 = contact1.mirror(""XZ"")
    contact1 = contact1.union(contact2).translate((0,-3*pin_y_pitch/2.0,0))
    return contact1


def generate_contacts(params):
    num_pins=params.num_pins
    pin_pitch=params.pin_pitch
    pair = generate_2_contact_group(params)
    contacts = pair
    for i in range(0, num_pins // 2):
        contacts = contacts.union(pair.translate((i*pin_pitch,0,0)))
    return contacts


def generate_body(params, calc_dim):
    pin_inside_distance = seriesParams.pin_inside_distance
    pin_width = seriesParams.pin_width
    num_pins = params.num_pins
    pin_pitch = params.pin_pitch
    pin_y_pitch=params.pin_y_pitch

    body_length = calc_dim.length
    body_width = seriesParams.body_width
    body_height = seriesParams.body_height
    body_fillet_radius = seriesParams.body_fillet_radius

    marker_x_inside = seriesParams.marker_x_inside
    marker_y_inside = seriesParams.marker_y_inside
    marker_size = seriesParams.marker_size
    marker_depth = seriesParams.marker_depth

    foot_height = seriesParams.foot_height
    foot_width = seriesParams.foot_width
    foot_length = seriesParams.foot_length
    foot_inside_distance = seriesParams.foot_inside_distance

    slot_length = calc_dim.slot_length
    slot_outside_pin = seriesParams.slot_outside_pin
    slot_width = seriesParams.slot_width
    slot_depth = seriesParams.slot_depth
    slot_chamfer = seriesParams.slot_chamfer

    hole_width = seriesParams.hole_width
    hole_length = seriesParams.hole_length
    hole_offset = seriesParams.hole_offset
    hole_depth = seriesParams.hole_depth

    top_void_depth = seriesParams.top_void_depth
    top_void_width = seriesParams.top_void_width
    bottom_void_width = calc_dim.bottom_void_width

    recess_depth = seriesParams.recess_depth
    recess_large_width = seriesParams.recess_large_width
    recess_small_width = seriesParams.recess_small_width
    recess_height = seriesParams.recess_height

    x_offset = (((num_pins // 2) - 1)*pin_pitch)/2.0
    y_offset = -(1.5*pin_y_pitch)

    # body
    body = cq.Workplane(""XY"").workplane(offset=foot_height).moveTo(x_offset, y_offset)\
        .rect(body_length, body_width).extrude(body_height)\
        .edges(""|Z"").fillet(body_fillet_radius).edges("">Z"").fillet(body_fillet_radius)

    # pin 1 marker
    body = body.faces("">Z"").workplane().moveTo(-(body_length/2)+marker_x_inside, (body_width/2)-marker_y_inside)\
        .line(-marker_size,-marker_size/2).line(0, marker_size).close().cutBlind(-marker_depth)

    # foot
    foot = cq.Workplane(""YZ"").workplane(offset=(body_length/2)-foot_inside_distance)\
        .moveTo(y_offset - foot_length/2, 0)\
        .line(foot_length*0.2,0)\
        .line(0,foot_height/2)\
        .line(foot_length*0.6,0)\
        .line(0,-foot_height/2)\
        .line(foot_length*0.2,0)\
        .line(0,foot_height)\
        .line(-foot_length,0)\
        .close()\
        .extrude(-foot_width)

    foot_mirror = foot.mirror(""YZ"")

    foot = foot.union(foot_mirror).translate((x_offset, 0, 0))

    body = body.union(foot)

    # slot
    body = body.faces("">Z"").workplane().rect(slot_length, slot_width).cutBlind(-slot_depth)

    chamfer = cq.Workplane(""XY"").workplane(offset=foot_height+body_height).moveTo(x_offset, y_offset) \
    .rect(slot_length+2*slot_chamfer, slot_width+2*slot_chamfer) \
    .workplane(offset=-slot_chamfer).rect(slot_length, slot_width) \
    .loft(combine=True)

    body = body.cut(chamfer)

    # contact holes
    body = body.faces("">Z"").workplane().center(0, hole_offset)\
        .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, hole_length)\
        .center(0, -2*hole_offset)\
        .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, hole_length)\
        .cutBlind(-2)

    # internal void
    body = body.faces("">Z"").workplane(offset=-hole_depth)\
        .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, top_void_width)\
        .cutBlind(-(top_void_depth-hole_depth))

    body = body.faces("">Z"").workplane(offset=-top_void_depth)\
        .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, bottom_void_width)\
        .cutBlind(-(body_height-top_void_depth))

    # body end recesses
    body = body.faces("">Z"").workplane().center(body_length/2.0-recess_depth/2.0, 0)\
        .rect(recess_depth, recess_small_width).cutBlind(-recess_height)

    recess = cq.Workplane(""XY"").workplane(offset=foot_height+body_height).center(x_offset-body_length/2.0+recess_depth/2.0, y_offset)\
        .rect(recess_depth, recess_large_width).extrude(-recess_height).edges("">X"").edges(""|Z"").fillet(0.3)

    body = body.cut(recess)

    return body


def generate_part(part_key):
    params = all_params[part_key]
    calc_dim = dimensions(params)
    pins = generate_pins(params)
    body = generate_body(params, calc_dim)
    contacts = generate_contacts(params)
    return (pins, body, contacts)


# opened from within freecad
if ""module"" in __name__:
    part_to_build = 'ucon_17809_02x10_1.27mm'

    FreeCAD.Console.PrintMessage(""Started from CadQuery: building "" +
                                 part_to_build + ""\n"")
    (pins, body, contacts) = generate_part(part_to_build)

    show(pins)
    show(body)
    show(contacts)


",css,html,0.01585574065368712,0.0021888936323081138,0.8948580810294471,0.0006841803078410181,5.025033408869947e-07,6.287689425874603e-08,2.692046336941604e-06,6.576596054098804e-07,0.08640918929053909
"# Function to check prime or not
def isPrime(n): 
    result = True
  
    # check if number is divisible from 2 to n-1 or not
    for i in range(2, n): 
        if n%i == 0: 
            result = False
            break
          
    return result 
  
# printing prime numbers between 1 to 50
for n in range(1, 51):
    if isPrime(n): 
        print(n)",python,python,3.3120393409844674e-05,3.908163359304527e-05,0.00012310131254185757,4.638846364600326e-06,0.002908839056853321,0.03198342133864837,0.9636503763363006,0.00029863685706737244,0.0009587842252211371
"from flask import Flask, request
from flask_restful import Resource, Api

app = Flask(__name__)
api = Api(app)

class Users(Resource):
    def get(self, userId):
        # return user object with userId
        pass

    def post(self):
        # create new user
        pass

    def put(self, userId):
        # update user object with userId
        pass

    def delete(self, userId):
        # delete user object with userId
        pass

class Courses(Resource):
    def get(self,courseId):
        # return course object with courseId
        pass

    def post(self):
        # create new course
        pass

    def put(self,courseId):
        # update course object with courseId
        pass

    def delete(self,courseId):
        # delete course object with courseId
        pass

class Grades(Resource):
    def get(self,courseId):
        # return grade object with courseId
        pass

    def post(self):
        # create new grade
        pass

    def put(self,courseId):
        # update grade object with courseId
        pass

    def delete(self,courseId):
        # delete grade object with courseId
        pass

api.add_resource(Users, '/users/<userId>')
api.add_resource(Courses, '/courses/<courseId>')
api.add_resource(Grades, '/courses/<courseId>/grades')

if __name__ == '__main__':
    app.run(debug=True)",sql,css,0.00038817566392387995,0.45301255317736494,0.013197083291775224,2.4180146024127725e-05,0.00018777117910651753,4.35670074599892e-05,0.13213276036510063,0.38906403426116876,0.011949874908076035
"import mysql.connector

# establish a database connection
mydb = mysql.connector.connect(
    host=""localhost"",
    user=""user"",
    password=""password"",
    database=""database""
)

# create a cursor object
cursor = mydb.cursor()

# execute the SQL query
cursor.execute(""SELECT * FROM table"")

# fetch the rows from the cursor object
rows = cursor.fetchall()

# print all the details
for row in rows:
    print(row)",sql,sql,9.691377156488379e-05,0.0007885773988947902,7.339022925145097e-05,1.4688622879967864e-06,0.00010232236240477664,8.720137374854046e-06,0.0008042808317861251,0.9938890640505109,0.00423526235592417
"class Laptop:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model",python,python,0.03271206196992043,0.006611428998242064,0.04046192976928964,0.00022259382285893725,0.0001826046569061294,8.175683040797807e-05,0.9183288185201338,0.0001450432153829347,0.001253762216858151
"student_grades = {
    ""Bob"": ""A"",
    ""Carol"": ""B"",
    ""Ted"": ""C"",
    ""Alice"": ""A""
}",css,python,0.03571322436530443,0.20928008360436984,0.04922030887118728,0.0075149946180420295,0.01780335427100742,0.035356876868542504,0.5845253146199166,0.007272632074099894,0.05331321070752995
"import tweepy
import time

consumer_key = 'your consumer key'
consumer_secret = 'your consumer secret'

access_token = 'your access token'
access_token_secret = 'your access token secret'

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

interests = ['computers', 'cricket', 'movies'] # interests of the user

while True:
 for interest in interests:
  search = '#' + interest
  tweets = api.search(search)
  for tweet in tweets:
   api.retweet(tweet.id)
  time.sleep(30) # sleep for 30 seconds",python,python,0.0013111656616849269,0.3436704037978113,0.057458457797288795,0.03274303177199142,0.009994798290594126,0.02496834276125349,0.46451461982530323,0.010019763141979719,0.05531941695209288
"def get_values(data):
    """"""
    Gets the values from a dictionary.
    
    Args:
        data (dict): The dictionary from which to get the values
        
    Returns:
        values (list): A list of the values from the dictionary
    """"""
    values = []
    for value in data.values():
        values.append(value)
    return values

if __name__ == ""__main__"":
    data = {
        ""key1"": ""value1"",
        ""key2"": ""value2"",
        ""key3"": ""value3""
    }
    print(get_values(data))",css,css,0.0001104064822906359,0.926355397192621,0.0051144449293443655,9.491665841100229e-06,0.00020171115478624307,0.00717403908476555,5.897744146819752e-05,0.0050101773471768,0.05596535470170587
"def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

num = int(input(""Enter an integer: ""))
print(""Factorial of "", num, ""is: "", factorial(num))",python,matlab,3.5724508881423496e-05,3.909128953197484e-09,4.9342398555156444e-05,6.606909055204043e-05,3.637973825734497e-05,0.8879575065283704,0.11183296629585594,1.0627654999374722e-05,1.137987539928502e-05
"class Interpreter:
 
    def __init__(self):
        self.opeartors = {
            '+':   self.add,
            '-':   self.sub,
            '/':   self.div,
            '*':   self.mul,
        }
 
    def parse(self, text):
        expressions = text.split(' ')
        return expressions
 
    def evaluate(self, expressions):
        operator = self.opeartors.get(expressions[1])
        if not operator:
            raise Exception('Invalid operator')
        return operator(expressions[0], expressions[2])
 
    def add(self, a, b):
        return int(a) + int(b)
 
    def sub(self, a, b):
        return int(a) - int(b)
 
    def div(self, a, b):
        return int(a) / int(b)
 
    def mul(self, a, b):
        return int(a) * int(b)",css,java,6.964251462650065e-11,8.323755934164918e-11,9.166922225951977e-08,0.9999998405447798,9.003019374050957e-12,5.543939083885876e-23,6.559976066738955e-08,1.981929316641805e-09,4.2425027372279066e-11
"def group_by_department(employees):
  result = {}
  for emp in employees:
    if emp[""department""] in result:
      result[emp[""department""]].append(emp)
    else:
      result[emp[""department""]] = [emp]
  return result

const result = group_by_department(employees);
console.log(result);",python,javascript,7.685949642545334e-07,0.00012989750314979783,1.2493123466057154e-05,5.239546627801871e-07,0.9981813699780052,0.00010962425074565814,0.001494198668217774,5.828634554129143e-05,1.283758124727483e-05
"strings = ['cat', 'dog', 'apple', 'banana']

strings.sort()

for string in strings:
    print(string)",python,java,1.7358889813590306e-07,0.017151141217173243,0.00016834245988564585,0.8796156492195287,1.7096412245633733e-08,2.7203969641285457e-05,0.10040111532600014,0.002540529721515519,9.582740094516302e-05
"import requests

# list of cities for which we want the weather forecast
cities = [""New York"", ""London"", ""Beijing"", ""Los Angeles"", ""Berlin"", ""Tokyo"", ""Mumbai"", ""Moscow""]

# api key
api_key = YOUR_API_KEY

# base url for the weather api
url = ""http://api.openweathermap.org/data/2.5/weather?q={}&APPID="" + api_key

# create an empty list to store weather data
weather_data = []

# loop through the cities and get the weather data
for city in cities:
	# make a request to the api
	r = requests.get(url.format(city)).json()
	# store the weather data in the list
	weather_data.append(r)

# print the weather data
print(weather_data)",python,css,6.017460027069953e-05,0.5493678921729541,0.014757714319308255,0.00011184418056474172,0.03025817096064511,0.001374438692518567,0.04223391324572527,0.008341640999878554,0.35349421082813476
"import numpy as np
from sklearn.svm import SVC 

# Dataset 
training_data = [
 {""label"": ""apple"", ""features"": [1, 1, 0]}, 
 {""label"": ""banana"", ""features"": [0, 1, 1]}, 
 {""label"": ""lemon"", ""features"": [0, 0, 1]}, 
 {""label"": ""orange"", ""features"": [1, 0, 0]}, 
 {""label"": ""pear"", ""features"": [0, 1, 0]}, 
]

# Feature extraction 
X = []
y = []
for data in training_data:
 X.append(data['features'])
 y.append(data['label'])

# Model 
clf = SVC()
clf.fit(X, y) 

# Prediction 
predict_data = [1, 0, 1]
predicted_label = clf.predict([predict_data])

print(predicted_label[0])",css,css,0.018983238551086752,0.7790409064896082,0.042448781368913835,0.0001451913247990266,0.0002840604079454889,0.008530555819006271,0.1284101421365914,4.785538168833684e-05,0.022109268520360645
"def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return True
    return False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")",python,python,2.4624711211835854e-05,0.0038292118959462147,0.001861027671753043,0.1619435379018494,9.421304694521504e-06,4.4825319947608194e-05,0.7290565183219623,0.06995561985829152,0.03327521301434353
"def has_special_characters(string):
    import re
    return bool(re.search('[^a-zA-Z0-9]', string))",python,java,3.653293801846968e-11,1.7853595235243832e-06,6.295442755803023e-05,0.9993212479715646,2.2400108443985816e-11,1.7283887178519445e-08,0.0006053449128863825,8.300313229399002e-06,3.4967241785825085e-07
"import random
import string

def generate_password():
 password_characters = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(8))
 print(password)

generate_password()",sql,sql,1.061687865924525e-12,1.5458841635016043e-08,2.6872861258841775e-08,0.003225320082734761,9.718303411573037e-15,2.4461429957415304e-09,8.148683784871787e-06,0.9967664845751895,1.879373464209712e-09
"def is_prime(list_of_numbers):
    # Iterate over the list of numbers
    for num in list_of_numbers:
        # Check if the number is divisible by any number
        # other than 1 and the number itself
        for divisor in range(2, num):
            if num % divisor == 0:
                # If there is any divisor, the
                # number is not a prime number
                return False
    # All the numbers in the list are prime numbers
    return True

list_of_numbers = [2, 3, 5, 7, 8, 11, 13, 15]
outcome = is_prime(list_of_numbers)
print(outcome)",python,matlab,0.00015684598007203112,8.578178176080772e-06,0.0005173148485544134,0.0001720688389754278,0.0636187282337146,0.6245840060824133,0.2877804875290476,0.0034335281389892016,0.019728442170057228
"import requests
from bs4 import BeautifulSoup

# URL of the S&P 500 Website
url = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'

# Send GET request 
resp = requests.get(url)

# Parse response as HTML
soup = BeautifulSoup(resp.text, 'html.parser')

# Find the table containing data
table = soup.find('table', {'class': 'wikitable sortable'})

# Extract the companies from the table
companies = []
for row in table.findAll(""tr""):
    # Skip the headers
    if not row.findAll(""th""): 
        tds = row.findAll(""td"")
        companies.append([td.text.strip() for td in tds[1:2]])

print(""List of S&P 500 Companies:"")
for company in companies:
    print(company[0])",css,html,7.396932026463211e-07,0.03467831667953123,0.9620704184329915,8.683766153723929e-05,0.0008792312342454761,7.721722285361814e-05,0.0015992952776703868,0.0004065887875416749,0.00020135501042639676
"def generate_numbers():
    numbers = []
    for i in range(10):
        numbers.append(random.randint(0,10))
    return numbers",python,python,6.746678752023468e-06,1.2819804976750312e-05,0.0001311697165177352,0.004587410311165976,3.840988146020566e-05,6.716336198127843e-05,0.99514110764493,3.853592871248135e-06,1.1319007344543974e-05
"class Vector:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    def magnitude(self):
        return (self.x**2 + self.y**2 + self.z**2)**0.5
    
    def dot_product(self, other):
        return self.x*other.x + self.y*other.y + self.z*other.z",python,python,7.488861832177447e-05,0.007196158047655206,0.06276461162313601,2.7046373334479882e-06,0.00014816935016387386,1.3733283909850596e-06,0.7395945989162601,0.1901505865023607,6.690897637778355e-05
"# anagram checker

def check_anagrams(str1, str2):
    if sorted(str1) == sorted(str2):
        return True 
    else: 
        return False 
  
# Driver code 
str1 = ""listen""
str2 = ""silent""

if(check_anagrams(str1, str2)): 
    print(""The strings are anagrams."")  
else: 
    print(""The strings aren't anagrams."")",python,python,0.0019766793270644145,0.002923879935163797,1.6663102004323946e-05,0.00014993208292638665,0.28378614673908314,0.0004619206149520195,0.6735762434572983,0.020972883970357025,0.01613565077115066
"import random
import string

def generate_password():
 password_length = 8
 chars = string.ascii_letters + string.digits 
 return ''.join(random.choice(chars) for i in range(password_length))

print(generate_password())",sql,sql,3.398176490367889e-11,3.626573050096055e-08,6.685569372318852e-08,0.00011388151633243067,6.04227635873466e-13,1.124182503041348e-08,1.2794834557152297e-05,0.999873203991229,5.260046101114047e-09
"class FlightSchedule:
    def __init__(self):
    self.airport_info ={}
    
    def add_flight(self,flight_name,source,destination,departure_time,arrival_time):
    self.airport_info[flight_name] = {
        'source': source,
        'destination': destination,
        'departure_time': departure_time,
        'arrival_time': arrival_time
    }
    
    def get_flight_info(self,flight_name):
    if flight_name in self.airport_info:
        return self.airport_info[flight_name]
    else:
        return 'Flight does not exist.'",css,python,0.000627655112372329,0.02301760906156705,0.08675607801883864,4.1110966251772345e-05,0.00010203196354780239,0.0001457626047229246,0.751357648913871,0.1345955900480273,0.0033565133108011554
"import tensorflow as tf

mnist = tf.keras.datasets.mnist

(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)",python,python,0.008174191830767773,0.033748259802423956,0.05709274399707153,0.0002048731676210519,0.00015268922393394548,0.008173740259156528,0.8600177665763012,0.00022743926900643235,0.03220829587371751
"def count_7(nums):
  count = 0
  for num in nums:
    if num == 7:
      count += 1
  return count",python,matlab,4.06814338954342e-08,1.0330995618196441e-10,8.294953773096557e-08,3.2961585322497474e-09,1.9483182045071386e-08,0.9997150845842926,0.0002846500171810897,6.839510443662373e-08,5.048979965131705e-08
"import datetime

# Function to convert the timestamp 
def getDateTime(timestamp):
 return datetime.datetime.fromtimestamp(timestamp).strftime(""%d-%m-%Y"")

# Driver program
timestamp = 1591123259
print(getDateTime(timestamp))
# Output: 17-06-2020",python,python,0.1713183621800795,0.04124035812216079,0.011967910683820204,0.000415551708239808,0.16578581235234988,0.00022113973483470326,0.6018430816327807,0.005511520455524889,0.0016962631302094812
"import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Read the dataset
dataset = pd.read_csv('dataset.csv')

# Define features and labels
X = dataset.iloc[:, :4]
y = dataset.iloc[:, -1]

# Split the dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

# Normalize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Test the model
accuracy = model.score(X_test, y_test)
print('Accuracy: ', accuracy)",python,bash,0.4332260362261572,0.13802371407212166,0.006021188739421334,9.662063918486125e-06,0.00017517889846664422,2.177692223636959e-05,0.3690838226991963,4.69696144799379e-06,0.05343392341703388
"def average(arr):
    return sum(arr) / len(arr)

mylist = [3, 5, 7, 9, 12]

print(""Average of mylist is:"", average(mylist))",python,matlab,7.369761397972966e-09,1.3614075832553448e-08,1.6575297042095226e-09,1.2673071497021432e-08,1.9855756033373413e-08,0.9999998709759634,5.465879968285103e-08,7.345821484875616e-11,1.9121584369687223e-08
"class PuzzleState:
    
    def __init__(self, puzz): 
        self.puzz = puzz
    
    
    def get_neighbors(self): 
        indices = [[i, j] for i in range(3) for j in range(3)] 
        neighbors = [] 
        for i, j in indices:
            if self.puzz[i][j] == 0:
                zero_list = [[i-1, j], [i+1, j], [i, j-1], [i, j+1]]
                for row, col in zero_list:
                    if 0<=row<3 and 0<=col<3:
                        neighbor = [list(x) for x in self.puzz] 
                        neighbor[i][j], neighbor[row][col] = neighbor[row][col], neighbor[i][j] 
                        neighbors.append(PuzzleState(neighbor))  
        return neighbors
    

def bfs(start_state): 
    visited = set()  # stores previously visited states 
    frontier = [start_state] 

    while frontier: 
        current = frontier.pop(0) 
        if current.puzz == [[1,2,3],[4,5,6],[7,8,0]]:
            return current
        visited.add(str(current.puzz)) 
        for nbr in current.get_neighbors():
            if str(nbr.puzz) not in visited: 
                frontier.append(nbr)

start_state = PuzzleState([[4,2,3],[1,0,5],[7,8,6]]) 
bfs(start_state)",python,matlab,0.00014626982107748322,0.0012493462888456906,0.00321591039825242,3.126493274620348e-05,5.0026394616104494e-05,0.7742264613923487,0.20065924483646388,0.020157614656286765,0.00026386127936283446
"#importing necessary libraries
from sklearn.feature_extraction.text import CountVectorizer 
from sklearn.metrics.pairwise import cosine_similarity

#Defining a function to calculate cosine similarity
def cosine_similarity(text):
   vectors = [t for t in text]
   cv = CountVectorizer()
   counts = cv.fit_transform(vectors)
   return cosine_similarity(counts)
   
#Declaring the corpus of documents
corpus = ['the goal of this search engine is to find documents similar to a query', 
          'the algorithm begins by vectorizing the query and the documents',
          'the query and documents are then compared using cosine similarity']
          
#Calculating similarity
similarity_matrix = cosine_similarity(corpus)

#Printing the cosine similarity matrix
print(similarity_matrix)",python,typescript,0.00040342059004375125,0.006082086307485746,0.00013285214551790568,1.0044493329443611e-05,0.009755412994709495,1.4772899796509276e-05,0.004432256534798203,5.479441734220059e-05,0.9791143596169768
"d = {} 
  
# Let us add 10 key-value pairs to dictionary 
for i in range(1,11): 
    d[i] = i ** 2 
  
# Print the dictionary items 
print(d.items())",python,javascript,3.662750146203484e-10,4.6913795200715993e-07,1.9211306084586748e-07,1.575399690503897e-08,0.9999670828087094,2.7172840492939983e-05,5.040268252179986e-06,2.2055009536362078e-10,2.649071068321024e-08
"from collections import Counter 

def most_common (collection): 
	data = Counter(collection) 
	return data.most_common(1)[0] 

collection = [1, 4, 5, 3, 4, 6, 5, 3, 4]
assert most_common(collection) == (4, 3) 
print (""Most Common element is: "",most_common(collection))",python,python,0.0016660420730729576,0.1065591699535782,0.007212665103930828,0.00035171822248675937,0.0047712692228089595,0.002201424198535191,0.8746655643836944,0.0008860179892016953,0.0016861288526911064
"import requests
import re

def scrape_phone_numbers(urls):
    phone_numbers = []
    for url in urls:
        response = requests.get(url)
        numbers = re.findall(""([+]\d{2}\s?0?\d{10})"", response.text)
        phone_numbers.extend(numbers)
    return phone_numbers",python,python,5.696463809342988e-06,0.03752988192884038,0.011895794193917238,0.011284569247839193,0.00026958965551746164,6.634652602442009e-06,0.9381372662136934,0.0007909229628426517,7.964468093772939e-05
"s = 'Google'
# improved code
# use of built-in functions to count the number of occurrences of 'o' in a string
count = s.count('o')

print('Number of occurrences of ""o"": {}'.format(count))",python,typescript,7.52398230585022e-06,0.001496707691027096,0.00013890367863537355,0.0010745144264221003,0.0005416107471381411,2.0215137065190356e-05,0.2908315364053167,0.002215502848163136,0.7036734850839264
"class TreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None",python,sql,1.7163067505885208e-05,0.015720589318809267,0.04071353334946222,5.470541704407709e-06,7.690643459085254e-06,1.025843019079505e-06,0.2194541503450088,0.7235332913888833,0.0005470855021478712
"def sort_string(string):
    # convert string to list
    chars = list(string)
    # sort the list 
    chars.sort()
    # return the sorted string
    return ''.join(chars)

sorted_string = sort_string('abzcdr')
print(sorted_string)",sql,java,4.61129948194798e-09,0.00010234914276384613,2.035514527403945e-05,0.5975773970653864,1.1159515134100287e-08,2.1371770730425599e-07,0.0030700451091786336,0.39921581293525243,1.3811113622587215e-05
"
# coding: utf-8

# In[1]:

import pandas as pd
import time
from sys import argv

logfile = argv[1]
filesize = argv[2]


# # Python Pandas Benchmark

# In[3]:


prefix = ""file:////Users/tony/Dropbox/Projects/UW/cse599c-17sp-projects/spark-advantage/data/""

if(filesize == 'original'):
    tairfname     = ""Tair_WA_nohead.csv""
    tsoilfname    = ""Tsoil_WA_nohead.csv""
    tsurfacefname = ""Tsurface_WA_nohead.csv""
elif (filesize == 'medium'):
    tairfname     = ""Tair_WA_nohead.MEDIUM.csv""
    tsoilfname    = ""Tsoil_WA_nohead.MEDIUM.csv""
    tsurfacefname = ""Tsurface_WA_nohead.MEDIUM.csv""
elif (filesize == ""small""):
    tairfname     = ""Tair_WA_nohead.SMALL.csv""
    tsoilfname    = ""Tsoil_WA_nohead.SMALL.csv""
    tsurfacefname = ""Tsurface_WA_nohead.SMALL.csv""



startTime = time.time()



tair = pd.read_csv(prefix+tairfname)
tsoil = pd.read_csv(prefix+tsoilfname)
tsurface = pd.read_csv(prefix+tsurfacefname)

joined = tair.merge(tsoil, on=[""datetime"", "" lat"", "" lon""]).merge(tsurface, on=[""datetime"", "" lat"", "" lon""])

joined.columns = [name.strip() for name in joined.columns]
joined[['lat', 'lon']] = joined[['lat', 'lon']].apply(pd.to_numeric)

seattle = joined[(joined['lon'] > -125.52) & \
                 (joined['lon'] < -120.2)  & \
                 (joined['lat'] > 49.0)    & \
                 (joined['lat'] < 51.0)]

seattle.groupby(by=['lat', 'lon'])['Tair'].mean()

exptime = time.time() - startTime
with open(logfile, 'a') as log:
    log.write(str(exptime)+'\n')",python,python,0.0038713721414639335,0.14022257696164428,0.028766639944818134,0.004225106218576424,0.017901535706494366,0.015596125583061896,0.7146436252894951,0.04559280269483027,0.029180215459615688
"def expression_evaluator(expr):
    expr_list = expr.split()
    stack = []

    for items in expr_list: 
        if items == '*':
            stack.append(int(stack.pop()) * int(stack.pop())) 
        elif items == '/':
            divider = int(stack.pop())
            stack.append(int(stack.pop()) / divider) 
        elif items == '+':
            stack.append(int(stack.pop()) + int(stack.pop())) 
        elif items == '-':
            substractor = int(stack.pop())
            stack.append(int(stack.pop()) - substractor) 
        else:
            stack.append(items)
           
    assert len(stack) == 1, 'Expression should contain a valid operator.'
    return stack[0]
    
expr = ""7 * 4 + 2 - 1""
result = expression_evaluator(expr)
print(result)",python,java,0.00037909831217492943,0.004546058382611047,0.00026254875937604857,0.9864000734260768,0.00020799534894294945,2.883762661951615e-07,0.008066629804319487,4.78636395303918e-05,8.944395070244715e-05
"from collections import defaultdict

strings = [""Apple"", ""Orange"", ""Banana"", ""Pineapple""]

dictionary = defaultdict(list)
for string in strings:
    char_count = len(string)
    dictionary[char_count].append(string)

print(dictionary)",python,java,1.2796600641237867e-07,0.24048990888408267,0.00013795265891892143,0.7309819796836582,2.5208367723293663e-09,3.0879150941044596e-05,0.02562390316980443,0.002679190781023004,5.6055184728417856e-05
"def concat_strings(a, b):
    return a + b

result = concat_strings(""Hello "", ""world!"")
print(result)",python,python,0.1360695695757054,0.001764485211721427,0.00036180710525754754,8.428125492042755e-13,0.004204779635711479,1.435985107637384e-06,0.857439949027018,0.00010731908420863814,5.0654374426988885e-05
"def is_palindrome(s):
    '''This function returns True if the string s is a palindrome and False if it isn't.''' 
    return s == s[::-1]  # Checks if s is the same as its reverse.",python,typescript,8.86899116190237e-06,0.00021554516045965003,0.00037252458935636666,0.006989599924132526,0.00041539390846674515,0.0002923019213515898,0.014299341007128392,0.00035946997954325116,0.9770469545183995
"def gcd(num1, num2):
    if num2 == 0:
        return num1
    return gcd(num2, num1 % num2)

print(gcd(num1, num2))",python,python,0.0006966252428471412,0.005074666225539531,0.0020211001257429205,5.484835096183823e-05,0.0006832894519261115,0.04572323351522038,0.9437672759660197,0.0010841066440723472,0.0008948544776698239
"config = {
 'templates': {
 'index': 'templates/index.html',
 'about': 'templates/about.html',
 'contact': 'templates/contact.html'
 },
 'static': {
 'css': 'static/css/main.css',
 'js': 'static/js/main.js'
 },
 'credentials': {
 'db_host': 'localhost',
 'db_port': 3306,
 'db_user': 'root',
 'db_pass': '123456'
 }
}",css,html,1.4633307626313986e-05,9.666127253189347e-09,0.9990738903393774,0.0009015084830659107,2.736386101644856e-07,1.139134305855206e-13,7.326043838069681e-08,4.805666265004391e-10,9.610824074140084e-06
"import itertools

words = [""cat"", ""dog"", ""pizza"", ""coffee""]
combinations = list(itertools.combinations(words, 2))

for i in range(len(combinations)):
    print(combinations[i])",python,python,0.00034416612503780403,0.0008204100714904283,0.002568771206015954,4.144842099089348e-05,9.642464726745404e-05,0.009344616308924048,0.9764023467953895,0.010187667499483046,0.0001941489254010625
"# Importing necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer

# Create a dataframe
df = pd.DataFrame({'Email':not_spam_emails + spam_emails, 
                      'label':['not_spam', 'not_spam', 'not_spam',
                               'spam', 'spam', 'spam']})

# Feature extraction
cv = CountVectorizer()
X = cv.fit_transform(df['Email'])

# Split the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, df['label'], 
                                            test_size=0.33, random_state=42)

# Create model
from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB()
clf.fit(X_train, y_train)

# Predict the results
y_pred = clf.predict(X_test)

# Calculate accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_pred))",css,python,0.015834305469080746,0.42667488628209177,0.006582900005698496,2.0779780241170937e-05,0.00023848652427443516,7.643854295991747e-05,0.5471117634427782,0.0005212533305258114,0.002939186622349409
"import matplotlib.pyplot as plt 
  
# Data to plot 
labels = 'My', 'name', 'is', 'John'
sizes = [1, 1, 1, 1]

# Plot
plt.pie(sizes, labels=labels, 
        autopct='%1.1f%%', shadow=True, startangle=90) 

plt.axis('equal') 

plt.show()",python,html,0.012376930598813257,0.018009250951420877,0.3571284687647012,0.024553895602260324,0.03440586503479734,0.011877969485572626,0.24761544687819215,0.031335276020596395,0.2626968966636459
"import random
import string

def random_string():
    chars = string.ascii_lowercase
    size = 16
    return ''.join(random.choice(chars) for _ in range(size))

print(random_string())",sql,sql,1.0346811398513165e-09,1.5859009990408216e-07,6.509088651510074e-07,2.0116046809742784e-05,2.6031689773331082e-11,7.229986397830837e-08,8.713545192081935e-05,0.9998918399127115,2.5729016293165713e-08
"def double(number):
    return number * 2

# Output 
6",python,python,0.00040625839527757976,0.001122913427857664,0.0003009484521517194,7.518332932001884e-06,2.832360191331179e-05,5.090111187975776e-06,0.9980887436027631,3.4997625669368444e-05,5.206450247221794e-06
"import tkinter as tk
from time import strftime

# Create the main root window
root = tk.Tk()

# Create the time label and add it to the root window
time_label = tk.Label(root, font=(""times"", 20, ""bold""), bg=""white"")
time_label.pack(side=""top"", fill=""both"", expand=True)

# Create a function to update the label with the current time
def update_label():
    time_string = strftime(""%H:%M:%S"")
    time_label.configure(text=time_string)
    time_label.after(1000, update_label)

# Update the root window every 1000 milliseconds (1 second)
update_label()

# Start the root window event loop
root.mainloop()",sql,typescript,0.0019743377716903683,0.0027416481530976866,0.002914317365565621,9.564799088017932e-06,0.005375361636132068,5.4500700613023385e-06,0.0028892120868768112,0.02616273381985703,0.9579273742976312
"""""""
Программа ищет оптимальное решение для задачи про два кувшина
Для работы требуется Python 3
""""""
from enum import Enum


class Action(Enum):
    """"""
    Действия с кувшинами
    """"""
    empty = 0
    fill = 1
    transfer = 2
    start = 3


def get_pitchers_volume():
    """"""
    Возвращает список из целочисленных значений объёмов кувшинов
    """"""
    while True:  # pitchers_volume это list из целых чисел, полученных разбиением вводимой строки
        pitchers_volume = list(int(pitcher) for pitcher in input(""Введите через пробел объёмы двух кувшинов: "").split())

        if len(pitchers_volume) != 2:  # Мы рассматриваем только случаи с двумя кувшинами
            print('Айайай! Попробуйте заново.')
        else:
            return pitchers_volume


def get_target():
    """"""
    Возвращает целочисленный желаемый объём
    """"""
    return int(input(""Введите желаемый объём: ""))


def greatest_common_divisor(a, b):
    """"""
    Считает наибольший общий делитель.
    """"""
    while b:
        a, b = b, a % b
    return a


def make_edges(i, j, i_max, j_max):
    """"""
    Создаёт список из всех исходящих ветвей графа в точке (i, j)
    Где i и j — наполненность первого и второго кувшинов
    """"""
    edges = dict()

    # Если кувшины не пусты, их можно опустошить
    if i != 0:
        edges[(0, j)] = Action.empty
    if j != 0:
        edges[(i, 0)] = Action.empty

    # Если кувшины не полные, их можно наполнить
    if i != i_max:
        edges[(i_max, j)] = Action.fill
    if j != j_max:
        edges[(i, j_max)] = Action.fill

    # Из непустого кувшина можно перелить в неполный
    if i != 0 and j_max-j >= i:
        edges[(0, j+i)] = Action.transfer
    if j != 0 and i_max-i >= j:
        edges[(i+j, 0)] = Action.transfer

    # Причем, если в неполном не хватит места,
    # то оба кувшина останутся непустыми
    if j != 0 and 0 < i_max-i < j:
        edges[(i_max, j - (i_max-i))] = Action.transfer
    if i != 0 and 0 < j_max-j < i:
        edges[(i - (j_max-j), j_max)] = Action.transfer
    return edges


def make_pitchers_graph(pitchers_volume):
    """"""
    Создаёт словарь, в котором ключи — все комбинации наполненности кувшинов,
    а значения — возможные переходы из каждой комбинации
    """"""
    pitchers_graph = dict()
    gcd = greatest_common_divisor(pitchers_volume[0], pitchers_volume[1])
    for i in range(0, int(pitchers_volume[0]/gcd)+1):      # Найдём наименьшее общее кратное у объёмов кувшинов
        for j in range(0, int(pitchers_volume[1]/gcd)+1):  # И поделим каждый из объёмов на него, для оптимизации
            pitchers_graph[(i*gcd, j*gcd)] = make_edges(i*gcd, j*gcd, pitchers_volume[0], pitchers_volume[1])
    return pitchers_graph


def dijkstra(graph, start_node, target):
    """"""
    Находит кратчайший путь в графе
    """"""
    distance = dict.fromkeys(graph, float('inf'))
    path = dict()
    path[start_node] = [[[start_node], [Action.start]]]  # Путь записывается в виде словаря, в котором к каждому из
    distance[start_node] = 0                           # имён узлов сосоставляется list из предыдущих узлов
    node_set = set(graph)                              # с добавлением типа действия с кувшинами
    targets_list = [node for node in node_set                   # Цели хранятся как list из всех узлов, которые
                    if node[0] == target or node[1] == target]  # подходят в качестве финиша

    while node_set:
        node = min(node_set, key=distance.get)
        if node in targets_list and node in path:  # Как только нашли подходящий узел — выходим. Поскольку мы ищем
            return path[node]                      # от точки (0, 0), а вес каждого ребра считаем одинаковым,
        node_set.remove(node)                      # то первый найденный узел и будет оптимальным
        for child_node in graph[node].keys():
            if distance[child_node] >= distance[node] + 1:  # Вес каждого ребра считаем за единицу
                distance[child_node] = distance[node] + 1
                path[child_node] = list()
                path[child_node].extend(path[node])     # Путь до нового узла состоит из пути до его родителя
                path[child_node].append([[child_node],  # плюс сам переход
                                         [graph[node].get(child_node)]])  # с добавлением типа действия


def show_answer(path, target):
    """"""
    Выводит ответ в человекочитаемом виде
    """"""
    if path is not None:
        print('Требуется шагов: {}'.format(len(path)-1))
        for node in path:
            print(node[0][0], end=' ')  # Состояние кувшинов
            print(node[1][0].name)      # Тип действия
    else:
        print('Нельзя получить {}л., имея только данные кувшины.'.format(target))


pitchers_volume = get_pitchers_volume()  # Получаем с клавиатуры объёмы кувшинов
target_node = get_target()               # И желаемый объём
start_node = (0, 0)  # Начинаем с пустых кувшинов
pitchers_graph = make_pitchers_graph(pitchers_volume)  # Создаём граф из всех состояний кувшинов
path = dijkstra(pitchers_graph, start_node, target_node)  # Находим кратчайший путь
show_answer(path, target_node)  # Выводим результат",python,python,0.08858732125265112,0.10845405356268105,0.004693589421294843,0.007992744529223836,0.000275395736343941,0.2737733843194782,0.4855766776820289,0.006775184906320594,0.023871648589977437
"import http.server

# Create the server object and set the port
server = http.server.HTTPServer(('localhost', 8080), http.server.BaseHTTPRequestHandler)

# Start listening for requests
server.serve_forever()",python,html,0.00028876960415019116,0.0005085598311867113,0.9103664747670261,8.97262740117466e-06,0.00027365672440865854,3.7303191758162725e-08,0.01105690816376896,2.117926884526331e-05,0.07747544171002123
"import requests
from bs4 import BeautifulSoup

url = 'http://example.com'

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

links = [link.get('href') for link in soup.find_all('a')]
print(links)",python,html,5.879191001250747e-10,0.012570639130886093,0.8338090986248352,0.11730707989093768,6.055242933035681e-05,0.0011263996949602351,0.033825506327676585,0.0012915294057344782,9.193907720167169e-06
"class Product:
    def __init__(self, name, price):
        self.name = name
        self.price = price
        
class Products:
    def __init__(self):
        self.products = []
 
    def add_product(self, product):
        self.products.append(product)
 
    def get_product(self, name):
        for product in self.products:
            if product.name == name:
                return product
        return None",python,python,0.0010803964765233895,0.1375488919289243,0.01590595650659385,0.17084387790518019,1.544480390651308e-07,3.382903910485183e-05,0.6619640004369548,0.012359595654729485,0.00026329760395008586
"def fill_missing_values(data):
    for column in data.columns:
        if data[column].isnull().any():
            mean = data[column].mean()
            data[column] = data[column].fillna(mean)
    return data",python,python,0.000918052880809145,0.10179441013506106,0.1758070896521921,0.0003848049717141806,0.0013371052277638402,0.0073818413073160095,0.6286571450016453,0.027127125867638813,0.056592424955859595
"nums = []
for i in range(5):
    nums.append(int(input(""Please enter number: "")))

#Calculate average
average = sum(nums) / len(nums)

#Print average
print(""The average is "", average)",python,python,0.00020113388483127348,0.0005605634950768455,0.00023488183877248071,0.0006544922624576518,5.5406463428724524e-05,5.685448514113738e-05,0.9980146242412303,0.0001213572127912515,0.00010068611627032498
"def start_vowel(input_string):
    vowel_list = [""a"", ""e"", ""i"", ""o"", ""u""] 
    if input_string[0] in vowel_list: 
      print(""String starts with a vowel"") 
    else:
      print(""String does not start with a vowel"")

start_vowel(""abc"")",python,java,5.407677318151251e-06,0.00725538587962254,0.0015326759121053986,0.6682537650965925,4.59869391143939e-07,0.0008575344212232957,0.28756102510279097,0.024328510223521824,0.010205235817434223
"import time
import threading
 
 
def do_something(seconds):
    print(""Sleeping for {} seconds"".format(seconds))
    time.sleep(seconds)
 
 
start = time.perf_counter()
 
t1 = threading.Thread(target=do_something, args=[1])
t2 = threading.Thread(target=do_something, args=[1])
t3 = threading.Thread(target=do_something, args=[1])
t4 = threading.Thread(target=do_something, args=[1])
 
t1.start()
t2.start()
t3.start()
t4.start()

t1.join()
t2.join()
t3.join()
t4.join()
 
finish = time.perf_counter()
 
print(f'Finished in {round(finish-start, 2)} second(s)')",sql,sql,0.0019675740876757934,0.005830607250802798,0.0108722032830448,0.0011773990786110092,0.0007612135236285189,0.00015512346438607466,0.09012423875491138,0.8883219935665385,0.0007896469904008794
"def search_substring(string, substring):
  if substring in string:
    return ""Substring found!""
  else:
    return ""Substring not found.""",python,python,7.826291850127467e-06,0.0038407413369546547,0.0011396735774682498,0.24742487969692467,8.030694652978102e-07,0.0002797458948174122,0.7429499238247089,0.003871932886149367,0.0004844734216613424
"class MyClass:
    def __init__(self):
        pass

    def method1(self):
        pass

    def method2(self):
        pass

    def method3(self):
        pass

    def method4(self):
        pass

    def method5(self):
        pass",python,python,0.0002423496981223658,0.018540961645467372,0.03617350846848008,8.476699158178712e-05,0.00028807723505683297,8.206365618565287e-05,0.8991171464216227,0.038701177315742456,0.006769948567740716
"class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None
  
class LinkedList:  
    def __init__(self):
        self.head = None
  
    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head
        self.head = new_node
  
    def print_list(self): 
        temp = self.head 
        while (temp): 
            print(temp.data) 
            temp = temp.next
  
list = LinkedList() 
list.push(1) 
list.push(2) 
list.push(3) 
list.push(4) 
list.print_list()",python,html,4.317043366641117e-06,0.00188896238928359,0.7481231565741666,5.731203118622651e-06,4.108138651235913e-05,0.017507131779075636,0.00046177279806494345,0.23181057615987902,0.00015727066653252537
"# -*- coding: utf-8 -*-
'''
Created on Jan 30, 2015
Modified on Jan 30, 2015
@author: rainier.madruga@gmail.com
A simple Python Program to scrape the ESPN FC website for content.
'''
'''
Version Number of Script
'''
version = '0.01.a'

# Import Libraries needed for Scraping the various web pages
from bs4 import BeautifulSoup
import urllib2
import datetime
import requests
import os
import platform
import sys
reload(sys)
sys.setdefaultencoding('utf-8')

# Establish the process Date & Time Stamp
ts = datetime.datetime.now().strftime(""%H:%M:%S"")
ds = datetime.datetime.now().strftime(""%Y-%m-%d"")
date = datetime.datetime.now().strftime(""%Y%m%d"")

# Updates the Time Stamp
def updateTS():
    update = datetime.datetime.now().strftime(""%H:%M:%S"")
    return update

# Download Image
def downloadImage(imageURL, localFileName):
    response = requests.get(imageURL)
    if response.status_code == 200:
        print 'Downloading %s...' % (localFileName)
    with open(localFileName, 'wb') as fo:
        for chunk in response.iter_content(4096):
            fo.write(chunk)
    return True

# Program Version & System Variables
parseVersion = 'ESPN Premier League Team News ' + version
print ds + ' :: ' + ts + ' :: ' + parseVersion

# Set Output Path for Windows or Mac environments
os_System = platform.system()
win_BasePath = ""C:/Users/Rainier/Documents/GitHub/python-soccer""

if os_System == ""Windows"":
    outputPath = win_BasePath + ""/PL-Data/""
    outputImgPath = win_BasePath + ""/PL-Data/imgs/""
    outputTeamPath = win_BasePath + ""/PL-Data/teams/""
    outputMatchPath = win_BasePath + ""/PL-Data/match/""
else:
    outputPath = 'PL-Data/'
    outputImgPath = 'PL-Data/imgs/'
    outputTeamPath = 'PL-Data/teams/'
    outputMatchPath = 'PL-Data/match/'

hr = "" >>> *** ====================================================== *** <<<""
shr = "" >>> *** ==================== *** <<<""

prefixBBC = ""http://www.bbc.com""
prefixESPN = ""http://www.espnfc.us""

teamURLs = ['/club/arsenal/359/index','/club/aston-villa/362/index','/club/burnley/379/index','/club/chelsea/363/index','/club/crystal-palace/384/index','/club/everton/368/index','/club/hull-city/306/index','/club/leicester-city/375/index','/club/liverpool/364/index','/club/manchester-city/382/index','/club/manchester-united/360/index','/club/newcastle-united/361/index','/club/queens-park-rangers/334/index','/club/southampton/376/index','/club/stoke-city/336/index','/club/sunderland/366/index','/club/swansea-city/318/index','/club/tottenham-hotspur/367/index','/club/west-bromwich-albion/383/index','/club/west-ham-united/371/index']

def teamNews(x):
	teamURL = x
	teamName = x
	teamName = teamName[6:len(teamName)-10]
	teamURL = prefixESPN + teamURL
	teamHTML = urllib2.urlopen(teamURL)
	teamSoup = BeautifulSoup(teamHTML)	
	recentNews = teamSoup.find(""div"", {""id"":""feed""})
	recentNewsItems = recentNews.find_all(""div"", {""class"":""feed-item-content""})
	recapOutput = []
	print ""Team News Parsed :: "" + teamName
	for i in recentNewsItems:
		recapPhotoItem = i.find(""div"", {""class"":""thumbnail picture""})

		if len(i) > 3:
			# recapPhotoItem = recapPhotoItem.find(""img"")
			# print recapPhotoItem[""src""]
			# with open(outputTxt, ""a"") as f:
			#	f.write('\n' + shr + '\n')
			#	f.write(i.prettify())
			#	f.write('\n' + shr + '\n')
			#	f.close()
			# print shr
			recapHeadline = i.find(""h2"")
			recapHeadlineDetails = recapHeadline.find(""a"")
			recapHeadlineDetails = recapHeadlineDetails[""href""]
			recapHeadline = recapHeadline.get_text(strip=True)
			recapAge = i.find(""span"", {""class"":""age""})
			recapAge = recapAge.get_text(strip=True)
			recapOutput.append(date + ""|"" + teamName + ""|"" + recapHeadline + ""|"" + recapHeadlineDetails + ""|"" + recapAge)
			#print shr
			# print i.prettify()
			#print recapHeadlineDetails 
			#print shr
			#recapDetails = recapHeadline.find(""a"")
			#recapDetails = recapDetails[""href""]
			#print recapDetails
			# print recapAge.get_text(strip=True)
			
			#print updateTS()
			#print shr
			# print i
		else:
			#print i
			#print shr
			recapGameOpponents = i.find_all(""div"", {""class"":""team-name""})
			recapGameScore = i.find_all(""div"", {""class"":""team-score""})
			recapGameStatus = i.find(""div"", {""class"":""game-info""})
			recapGameHome = recapGameOpponents[0].get_text(strip=True)
			recapGameAway = recapGameOpponents[1].get_text(strip=True)
			recapHomeScore = recapGameScore[0].get_text(strip=True)
			recapAwayScore = recapGameScore[1].get_text(strip=True)
			#recapGameInfo = i.find(""div"", {""clas="":""game-info""})
			recapOutput.append(date + ""|"" + teamName + ""|"" + recapGameHome + "" "" + recapHomeScore +  "" v. "" + recapAwayScore + "" ""+ recapGameAway + ""||"")
			# print i
	for i in recapOutput:
		print i
	print hr 
	return recapOutput

teamNewstxt = 'teamNews.txt'
with open(teamNewstxt, ""w"") as f:
   	f.write(ds + "" :: "" + updateTS() + "" :: "" + parseVersion + '\n' )
   	f.close()

for i in teamURLs:
	for x in teamNews(i):
		with open(teamNewstxt, ""a"") as f:
			f.write(x + '\n')
			f.close()
",css,html,0.000909371360477617,0.002064293382288971,0.996079359414807,4.650492791461747e-06,5.891842252457562e-06,2.556550250274293e-06,0.000773167665746837,6.257226585492008e-06,0.0001544520647998858
"def addNums(x, y):
    return x + y",python,python,3.0458681726310896e-12,2.5489143973834694e-10,2.7598246867965498e-11,8.025231839209999e-13,3.049889349032867e-12,3.595677408560778e-18,0.9999999972484059,2.461794976084354e-09,4.1123042603913176e-13
"def compound_interest(principal, rate, time):
    return principal * (1 + rate)**time

result = compound_interest(1000, 0.03, 5)
print(result)",python,python,0.000739898270235656,0.02011184789093587,0.0025849442944231777,0.0002544305590383882,0.0010593597058502556,0.0003813516100174088,0.9703999081688583,0.0031089505031336433,0.0013593089975073964
"def is_prime(num):
    if num < 2:
        return False
    if num == 2 or num == 3: 
        return True

    i = 2
    while i*i <= num: 
        if (num % i) == 0: 
            return False
        i += 1

    return True",python,matlab,1.057305881851221e-08,7.999694280543752e-14,5.389574364065108e-08,3.965109228152568e-10,1.6397437384348902e-09,0.9999187568507562,8.117276386740999e-05,2.808238127880225e-10,3.5994154951934385e-09
"def hourglass_sum(arr):
    max_sum = float(""-inf"")
    for row in range(4):
        for col in range(4):
            top = arr[row][col] + arr[row][col+1] + arr[row][col+2]
            middle = arr[row+1][col+1]
            bottom = arr[row+2][col] + arr[row+2][col+1] + arr[row+2][col+2]
            curr_sum = top + middle + bottom
            max_sum = max(max_sum, curr_sum)
    return max_sum",python,python,0.0004580146676407931,0.0015334833710569,0.000769455754610205,0.00013822999628584966,0.00022523979953269075,0.07762175786761344,0.9182480218971245,0.0002458036215902718,0.000759993024545186
"import random
import string

def generate_password():
 chars = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(chars) for i in range(12))
 return password

if name == 'main':
 password = generate_password()
 print(password)",sql,sql,8.29925621703512e-12,1.078008480936839e-08,1.1304287795391273e-08,0.0014167277674457708,5.389938141877097e-15,9.905732686841946e-10,1.2447858684081902e-06,0.9985820037179092,6.455260896170525e-10
"def most_frequent(sequence): 
    return max(set(sequence), key = sequence.count) 

print(most_frequent(sequence))",python,python,0.001728903891590502,0.023472863290554966,0.003257494177703329,0.00022016134778024378,0.0014906507380392205,0.0001398439101247166,0.9635371618535543,0.004846401475352659,0.0013065193152999816
"#!   /usr/bin/env   python3
# -*- coding: utf-8 -*
'''
Terminal tool to make Time Interval measures using the Tektronix FCA3103

@file
@date Created on Sep. 16, 2015
@author Felipe Torres (torresfelipex1<AT>gmail.com)
@copyright LGPL v2.1
'''

# ----------------------------------------------------------------------------|
#                   GNU LESSER GENERAL PUBLIC LICENSE                         |
#                 ------------------------------------                        |
# This source file is free software; you can redistribute it and/or modify it |
# under the terms of the GNU Lesser General Public License as published by the|
# Free Software Foundation; either version 2.1 of the License, or (at your    |
# option) any later version. This source is distributed in the hope that it   |
# will be useful, but WITHOUT ANY WARRANTY; without even the implied warrant  |
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser  |
# General Public License for more details. You should have received a copy of |
# the GNU Lesser General Public License along with this  source; if not,      |
# download it from http://www.gnu.org/licenses/lgpl-2.1.html                  |
# ----------------------------------------------------------------------------|

# -----------------------------------------------------------------------------
#                                   Import                                   --
# -----------------------------------------------------------------------------
import datetime
import argparse as arg
from subprocess import check_output

from FCA3103 import FCA3103


def main() :
    '''
    Tool for automatize the control of Tektronix FCA3103 Timer/Counter
    '''
    parser = arg.ArgumentParser(description='Tektronix FCA3103 tool')

    parser.add_argument('--function', '-f', help='Measuring Function', choices=['mtint','tint'],\
    required=True)
    parser.add_argument('--interval', '-t', help='Time between samples', type=int)
    parser.add_argument('--samples', '-s', help='Number of samples', type=int, \
    default=1)
    parser.add_argument('--debug', '-d', help=""Enable debug output"", action=""store_true"", \
    default=False)
    parser.add_argument('--device', '-l', help=""Device port"", type=int, default=1)
    parser.add_argument('--output', '-o', help='Output data file', type=str)
    parser.add_argument('--ref', '-r', help='Input channel for the reference',type=int, \
    choices=[1,2],default=1)
    parser.add_argument('--trigl','-g',help='Input trigger level', type=float, \
    default=1.5)
    parser.add_argument('--skip','-i',help='Ignore values far from mean  plus error',type=int, \
    default=0)
    parser.add_argument('--tstamp','-x', help='Add timestamping for each measure',action=""store_true"", \
    default=False)

    args = parser.parse_args()

    valid_port = False
    ports = check_output([""""""ls /dev | grep usbtmc""""""],shell=True)[:-1]
    for p in ports.splitlines():
        p = p.decode('utf-8')
        if int(p[-1]) == args.device:
            valid_port = True
    if not valid_port:
        print(""No device found at /dev/usbtmc%d"" % (args.device))
        exit(6)  # No such device or address

    device = FCA3103(args.device, args.ref, 2 if args.ref == 1 else 1)
    device.show_dbg = args.debug
    device.t_samples = args.interval
    device.n_samples = args.samples
    device.skip_values = True if args.skip > 0 else False
    device.error = args.skip
    # TODO: Add de posibility of using different trigger values for the inputs
    device.trig_level[0] = device.trig_level[1] = args.trigl
    # try:
    if args.function == 'mtint':
        print(""Measuring Mean Time Interval between the inputs (%d secs)..."" % (args.samples))
        mean = device.mean_time_interval(args.samples, args.interval)
        print(""Mean Time Interval for %d samples: %g"" % (args.samples, mean))

    elif args.function == 'tint':
        print(""Measuring Time Interval between the inputs (%d secs)..."" % (args.samples+10))
        values = device.time_interval(args.samples, tstamp=args.tstamp)
        if args.output:
            with open(args.output,'a+') as file:
                file.write(""# Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\n"" % args.samples)
                file.write(""# %s\n"" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))
                for v in values:
                    if args.tstamp:
                        file.write(""%g\t%g\n"" % (v[0], v[1]))
                    else:
                        file.write(str(v))
                        file.write(""\n"")
            print(""Output writed to '%s'"" % (args.output))
        else:
            print(""Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)"" % args.samples)
            print(""%s\n"" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))
            for v in values:
                print(v)

    # except Exception as e:
    #     print(e)

if __name__ == ""__main__"" :
    main()
",python,java,0.003964376992568863,0.056081108266802654,0.004780053635037096,0.929730597663681,0.00010931894009208175,3.4259830430287653e-09,0.00060838120173968,0.0011422638826861895,0.003583895991409335
"import nltk

tokenized = nltk.word_tokenize(""The cat sat on the mat."")
print(tokenized)
# Output: ['The', 'cat', 'sat', 'on', 'the', 'mat', '.']",python,typescript,0.015753154767919494,0.0732930767149445,0.01262385044210604,0.0003179981315249634,0.02337521409814716,0.0005537356492773246,0.23541598063701552,0.008598988003864983,0.6300680015552
"input_number = 123456 

def find_sum_of_digits(number): 
    n = number 
    sum = 0
    while n > 0:
        sum += n % 10
        n //= 10
    return sum 

sum_of_digits = find_sum_of_digits(input_number) 
print(""Sum of all digits in {} is {}."" .format(input_number,sum_of_digits))",python,python,0.0007013009543211377,0.009426722565824159,0.006746622819903426,0.12366834192181478,0.0045694695828541985,0.0008360510785136834,0.8514072122047247,0.0010823945253770279,0.0015618843466668666
"import xml.etree.ElementTree as ET

def parse_xml(xml_doc):
  # Parse the XML document
  tree = ET.parse(xml_doc)
  # Get the root element
  root = tree.getroot()
  # Iterate through children
  for child in root:
    print(child.tag, child.attrib)

# Function call 
parse_xml(""sample.xml"")",python,python,0.04413820105043206,0.0869697241079336,0.0639459232334407,0.0005526118567024548,0.19938154421255536,0.01978574796711891,0.528225069913848,0.000812152911557805,0.05618902474641104
"import numpy as np
def add_vector(a, b):
    return np.add(a,b)",python,python,0.01639082534064755,0.0012216240836718255,0.0010856367129062484,0.010636097431365048,5.134415669457198e-06,3.6118710735837606e-08,0.9678855102423777,4.696543153653072e-05,0.0027281702231149313
"def reverse(sentence):
 words = sentence.split(' ')
 words.reverse()
 
 return ' '.join(words)

print(reverse(""I love programming""))  // Output: ""programming love I""",sql,sql,4.612569205119272e-05,0.001400891298427016,0.0006309640251353601,6.440648921128396e-06,8.00095372526631e-05,5.463145145427525e-06,0.05799695273281621,0.939697304408889,0.00013584851136204715
"def compare_dicts(dict1, dict2):
  # Iterate through keys in both dictionaries and compare values
  for key, value in dict1.items():
    if key not in dict2 or dict2[key] != value:
      return False
 
  # If all elements matched
  return True",python,css,0.00019352529017820682,0.8571356604129857,0.0012781001186069625,1.6500903064819208e-05,0.0004737006914848126,0.1386907977784104,0.0009125187869834167,0.00041831610304969964,0.0008808799152356801
"def multiply_between(start, end):
    result = 1
    for i in range(start, end + 1):
        result *= i
    return result

print(multiply_between(2, 10))",python,python,4.202462260462189e-08,3.7840696093244014e-06,3.303279258364032e-07,3.81730346082181e-09,1.9744107535481106e-08,8.901557529592874e-07,0.999993365252986,1.4156910623546716e-06,1.4891663001507723e-07
"def max_of_two_values(val1, val2):
    if val1 > val2:
        return val1
    else:
        return val2

# Function call with two arguments
largest_one = max_of_two_values(38, 64)

# Print the largest number
print('The largest one is:', largest_one)",python,python,0.0023542468035769163,0.007759601194849928,0.011665994793046124,0.0010796925203374352,0.45155208959905274,0.00028063250426959343,0.5214450697299109,0.0013681969600491397,0.0024944758949071817
"def min(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2

print(min(2, 5))",python,python,5.981016101484064e-05,0.000500169927526745,0.00010131379712786782,1.823595587917713e-06,3.105841402980349e-05,5.6567976078858705e-05,0.9990548719290506,0.0001633112181481933,3.107298143523591e-05
"def last_n_numbers(myList, n):
  return myList[-n:]
  
res = last_n_numbers(myList, n)
print(res) 

# Output
[8, 9, 10]",python,matlab,2.7934209806179026e-07,1.9896211879667968e-07,2.0275032309659266e-08,1.3089895714763457e-08,4.07787732892725e-08,0.99999937969047,4.925612667029498e-08,4.6386290333969145e-10,1.8141622320078087e-08
"def printPrimeFactors(n):
    # Print the number of 2s that divide n
    while n % 2 == 0:
        print(2, end="" "")
        n = n/2
  
    # n must be odd at this point.  So we can skip
    # one element (note i = i + 2) 
    for i in range(3, int(math.sqrt(n))+1, 2):
        # While i divides n, print i and divide n
        while n % i == 0:
            print(i, end="" "")
            n = n/i
    # This condition is to handle the case when n
    # is a prime number greater than 2
    if n > 2:
        print(n, end="" "")",python,python,3.478198740273307e-05,4.742836955451243e-05,0.00043917184887026404,0.0015165158074019664,0.00038629058922542487,0.00071789007082945,0.8956821919752335,0.00028856626442177633,0.10088716308706039
"sorted_lst = sorted(lst, key=lambda x: x[key])",python,python,0.0031953811491228427,0.15319996188646703,0.006804486924196454,0.000475342335756475,0.00526069950580816,0.0005535693774914336,0.8260203999800727,0.002698504677885302,0.0017916541631997607
"class Player:
    
    def __init__(self):
        pass
    
    def attack(self):
        print(""The Player is attacking!"")
    
    def defend(self):
        print(""The Player is defending!"")",python,python,0.0010971725422810545,0.02709101481810376,0.02349282827442519,0.0001274750758095385,0.00350302217022998,5.508695056862278e-05,0.8323969595845259,0.09284187641723216,0.01939456416682411
"#Function to calculate the sum of the natural numbers 
def sumOfNaturals(n): 
  
    #using Gauss formula
    if n % 2 == 0: 
        sum = (n//2)*(n+1) 
    else: 
        sum = (n//2)*(n+1) + (n+1)//2
  
    return sum",python,javascript,9.797018828990882e-05,8.609495189806176e-05,0.00028713376679134945,0.10099458168370014,0.876238639468233,5.686945452839943e-07,0.0003499045865616192,4.795602408105862e-05,0.02189715063589986
"def print_table(n):
    for i in range(1, 11):
        print('{0} x {1} = {2}'.format(n ,i , n*i))

print_table(4)",python,matlab,9.109096648413972e-06,1.456925810772773e-07,1.7752368044916035e-05,3.2457363232594325e-07,7.324164434169241e-07,0.9363485810874876,0.06361659023911598,9.67379196684647e-07,5.797146849415634e-06
"class Book:
    def __init__(self, title, author, publication_year, number_of_pages):
        self.title = title
        self.author = author
        self.publication_year = publication_year
        self.number_of_pages = number_of_pages",python,html,1.9315703222515497e-06,0.002556091119879131,0.9938046118611776,3.180054620003861e-07,1.4328443959123384e-06,7.094474161901968e-08,0.002278018531112087,0.0013496298564165917,7.895266492859442e-06
"def hello(name):
    return ""Hello, ""+ name",python,bash,0.7913529896174895,8.881791425248943e-05,0.0025519981960142038,2.886855479128267e-07,0.08721317346538084,4.192314906897431e-05,0.11845998446349104,5.353238308745943e-05,0.00023729212566761857
"def add_arrays(arr1, arr2):
 if len(arr1) != len(arr2):
  raise Exception(""Arrays are not of the same size!"")
 return [x + y for x, y in zip(arr1, arr2)]

add_arrays(arr1, arr2)  # [4, 6, 8]",python,python,0.001991965248682116,0.0065253209197569505,0.003815066169427251,0.0005830580905354484,0.0017560496588908132,0.00189702697086882,0.8797676714811354,0.005824177356234989,0.0978396641044685
"def reverse_string(string): 
  rev_str = ''
  idx = len(string) 
  while idx > 0: 
    rev_str += string[idx-1] 
    idx -= 1
  return rev_str",python,java,4.052047240741391e-08,0.00019759984373430222,4.5436333571534974e-05,0.9799502223283335,4.923301932762118e-09,1.1283618249836143e-06,0.019562083019159474,0.0002199170275226264,2.3567642079450267e-05
"def count_greater_than_user(user_num, num_list):
    count = 0
    for number in num_list:
       if number > user_num:
           count += 1
    return count

user_num = int(input(""User input: ""))  
num_list = [6, 7, 8, 9, 10]

result = count_greater_than_user(user_num, num_list)
print(f""Number of numbers greater than {user_num}: {result}"")",python,python,3.1033812704067244e-05,0.0008120267699821082,7.631281263143791e-05,0.0003670018008364424,5.97183017618465e-05,1.0058033508453495e-07,0.9985983485624935,3.9083771115470277e-05,1.6373588140091486e-05
"import logging
import sys
from flask import Flask

app = Flask(name)

# Set up logging
app.logger.addHandler(logging.StreamHandler(sys.stdout))
app.logger.setLevel(logging.DEBUG)

@app.route('/')
def index():
 app.logger.info('Processing request to index')
 return 'Hello World!'",python,bash,0.8238116635996655,0.1345259180397507,0.029924619101963316,1.0693987392279793e-07,0.003168462826879979,2.3611025745542205e-05,0.005327133217036113,0.0029885855393945856,0.000229899709690371
"class Node:
    def __init__(self,value):
        self.left = None
        self.right = None
        self.value = value

class BinarySearchTree:
    def __init__(self):
        self.root = None
    
    # Insert nodes to the binary search tree.
    def insert(self,value):
        new_node = Node(value)
        if self.root == None:
            self.root = new_node
            return
        else:
            current_node = self.root
            while True:
                if value < current_node.value:
                    if current_node.left == None:
                        current_node.left = new_node
                        return
                    current_node = current_node.left
                else:
                    if current_node.right == None: 
                        current_node.right = new_node
                        return
                    current_node = current_node.right
                
    def printTree(self, node): 
        if node != None: 
            self.printTree(node.right)
            print(node.value)
            self.printTree(node.left)

# Test code
bst = BinarySearchTree()
nums = [10,4,2,15,14,16]
for num in nums:
    bst.insert(num)
bst.printTree(bst.root)",sql,matlab,0.0001846796983186679,0.01178729799468808,0.01327876372047533,5.5105222106368354e-05,8.401956947587115e-05,0.5994911673284489,0.0014521401546353772,0.37161871515165834,0.002048111160193032
"# Extract the name and phone number from a given string
def extract_name_phone(input_string):
    name_phone_dict = {}
    data = input_string.split(': ')
    
    name_phone_dict['name'] = data[0]
    name_phone_dict['phone'] = data[1]
    
    return name_phone_dict

result = extract_name_phone(""John Doe: (+1) 555-665-8877"")
print(result)",python,css,0.0009666834584214159,0.6729667205719777,0.0025942726884716073,0.03500676170556886,1.0707125059312904e-07,1.7189729517132341e-06,0.2573905739239455,0.007409178468710896,0.023663983138701734
"import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

data = pd.read_csv('data.csv')

X = data[['Age', 'Gender']]
y = data['Bought']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)

score = model.score(X_test, y_test)

print(score)",python,css,0.004577790127816015,0.5550253015893541,0.01392004270015992,1.1526007309586922e-05,2.982661114261348e-05,2.8603543408406367e-05,0.4261097254049799,3.583168028483102e-05,0.0002613523355446315
"def group_modulo(list_numbers, num):
    result = {i:[] for i in range(num)}
    for number in list_numbers:
        result[number % num].append(number)
    
    return result
    
result = group_modulo(list_numbers, num)
print(result)",css,matlab,2.5300644714422774e-08,6.478889704832991e-09,2.146741704031455e-07,5.246634787354987e-09,2.4577573859183148e-08,0.9543910232997974,0.045607651913908503,9.504012422591599e-07,9.810713822731892e-08
"nums = {x: x*x for x in range(1, n+1)}
print(nums)",css,python,1.0893289340277336e-06,6.934509378819896e-07,5.294759471759677e-06,1.2377373534838364e-07,1.519151016596075e-07,0.011197068290791388,0.9887894421859543,4.252997424277381e-06,1.883297649417866e-06
"def lowest_common_multiple(x, y): 
    if x > y:
        greater = x 
    else: 
        greater = y 

    while(True): 
        if((greater % x == 0) and (greater % y == 0)): 
            lcm = greater 
            break
        greater += 1

    return lcm 

print(lowest_common_multiple(x, y))",python,python,0.007785000088930954,0.025998430238682816,0.01325715924913592,0.001390559619927942,0.0029107996061685415,0.0804982284452097,0.8339098189658969,0.0028110722058452327,0.03143893158020196
"def sort_list(numbers):
    numbers.sort()
    return numbers

result = sort_list([2, 4, 5, 1, 3])
print(result)",python,python,8.380540759889843e-06,0.000287075826083929,5.852927273689397e-05,0.0038909976392075244,0.00012082212459069307,4.983447185217547e-10,0.9955453853614628,7.253638072351294e-05,1.6272356090147477e-05
"def findMinMax(list):
    min_list = []
    max_list = []
    
    for sublist in list: 
        min_list.append(min(sublist)) 
        max_list.append(max(sublist)) 
    return min_list, max_list 

list = [[8, 4], [6, 2, 3], [1, 9, 7]] 
min_list, max_list = findMinMax(list) 

print(""The min values of given sublist :"", min_list) 
print(""The max values of given sublist :"", max_list) 

# Output
# The min values of given sublist : [4, 2, 1]
#The max values of given sublist : [8, 6, 9]",python,python,0.011654249340487026,0.04459588181270611,0.03140549018898526,0.0010828513590043316,0.034054153769627116,0.03471675439754764,0.44360581039486047,0.051973502685690946,0.34691130605109094
"def fibonacci(n):
    if n == 1:
        return [1]
    elif n == 2:
        return [1, 1]
    else:
        fib_list = fibonacci(n - 1)
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fib_list",python,python,0.001347188197988688,0.004326142125128951,0.002763586561335407,0.0003153062376961158,0.0008274890623906215,0.002801902823085996,0.9855937764783057,0.0007009526113362192,0.001323655902732363
"def move_items(list1, list2): 
    for item in list1: 
        list2.append(item) 
    for i in range(len(list1)): 
        list1.pop() 

list1 = [2, 4, 6, 8, 10]
list2 = [1, 3, 5, 7, 9] 

move_items(list1, list2) 

print(""List 1 = "", list1) 
print(""List 2 = "", list2)",python,python,2.1518629471132235e-05,0.0007736520755794378,0.0005926127617952405,6.122842191005314e-06,8.348441040254354e-05,0.004098401928104422,0.9942728275739255,0.00011291057887943832,3.846919965129791e-05
"def classify_inputs(lst):
    result = []
    for num in lst:
        if num <= 0:
            result.append('negative')
        elif num > 0 and num <= 10:
            result.append('non-negative')
        else:
            result.append('positive')
    return result

print(classify_inputs([-2, 10, 11, 4, -1]))",python,matlab,3.1798986943975088e-09,1.070602498012645e-09,1.687280312016098e-08,5.185869380415967e-10,3.766797228327124e-09,0.999922551261977,7.737189926534237e-05,2.4240733676911564e-08,2.7189335176376553e-08
"for i in range(0,11):
    print(i)",python,matlab,1.2415972227325905e-13,1.6911048586434646e-18,1.1057399553217356e-12,5.510266050076294e-15,7.48076876636178e-15,0.999998444523721,1.5554749300339005e-06,3.862174504852572e-14,6.723799180726865e-14
"import math

def calculateArea(side): 
    area = (3 * math.sqrt(3) * (side * side)) / 2
    return area",python,python,0.0031080727526261354,0.013878861392704386,0.004505883706681018,0.00037805836863249813,0.0010555317699543578,0.0006115951273585328,0.945992069220813,8.071672744521877e-05,0.03038921093378503
"def add_without_plus_operator(a, b):
    # Iterate till there is no carry
    while (b != 0):
        # Carry now contains common set bits of x and y
        carry = a & b

        # Sum of bits of x and y where at least one of the bits is not set
        a = a ^ b

        # Carry is shifted by one so that adding it to x gives the required sum
        b = carry << 1

    return a

if __name__ == ""__main__"":
    a = 3
    b = 4
    print(add_without_plus_operator(a, b))",sql,typescript,0.00021245794893271774,0.00013741106575462683,0.0009406767265848323,0.00535719336869927,0.27173016696098906,0.00275216790653897,0.020920060790942132,0.030434097185113706,0.6675157680464446
"import base64 
def base64_encode(string):
    encodedBytes = base64.b64encode(string.encode(""utf-8""))
    return str(encodedBytes, ""utf-8"")",python,java,2.0136823022708867e-18,1.0610275916812432e-09,9.994019072464517e-10,0.999999772804128,5.521707346259856e-14,3.072243855924159e-12,2.2198549488746011e-07,3.101082599695999e-09,4.5737458225582216e-11
"def repopulate_missing(arr):
    # Iterate the array 
    for i in range(len(arr)):
        #Check if element is None
        if arr[i] is None:
            # Get neighbouring elements
            before = arr[i - 1] if i > 0 else 0
            after = arr[i + 1] if i < len(arr) - 1 else 0
            
            # Repopulate the element
            arr[i] = (before + after) // 2
       
    return arr",python,matlab,4.3651653950322164e-10,1.28082479035537e-09,8.647633636837875e-11,3.1268948283017636e-11,1.936269859436505e-10,0.9999994640208483,5.33332614972303e-07,4.688232529197138e-12,6.131349971571493e-10
"def find_index(arr, item):
    for i, value in enumerate(arr):
        if item == value:
            return i
    return -1",python,matlab,1.3121431417831393e-09,2.8595381253872375e-07,2.0523346468015474e-08,3.307830654709634e-10,9.47728950880116e-09,0.9999996808244229,2.1645939845154138e-11,2.37298724781019e-10,1.3192578131169644e-09
"def factorial(n):	
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)",python,python,4.1112715794483116e-05,7.136505564477444e-05,3.531836836023581e-05,1.2869066731951122e-06,3.5250645744119366e-05,2.5668894183900453e-05,0.9997573473952214,2.0337267220680918e-05,1.2312751157187427e-05
"import requests
from bs4 import BeautifulSoup

URL = ""https://www.nba.com/scores""
page = requests.get(URL)

soup = BeautifulSoup(page.content, 'html.parser')

results = soup.find_all('li', class_=""score"")

scores = []
for result in results:
    data=result.find_all(""span"", {'class': 'scoreboardScore'})
    scores.append([d.text for d in data])

with open(""scores.txt"", ""w"") as f:
    for score in scores:
        f.write("" "".join(score) + ""\n"")",css,css,9.85611378027373e-10,0.5965626386847881,0.39256212272600893,0.006351595520423514,1.1026474274993177e-06,7.993251507066551e-05,0.00024995598437202384,0.0021233354095016093,0.002069315526796316
"def to_uppercase(list):
  return [item.upper() for item in list]",python,python,0.001910632579487399,0.022695383859192335,0.14283995701521768,0.0002836482147310489,0.10134504437478725,0.28332975450813314,0.43872557180982436,0.007734824439644936,0.0011351831989818886
"def isPalindrome(n):
    temp = n
    rev = 0
    while(temp > 0): 
        rev = (rev * 10) + (temp % 10) 
        temp = temp // 10
    if n == rev:
        return True
    else:
        return False",python,matlab,6.77295861465821e-07,3.826487568595244e-06,8.679475559938406e-06,4.3898158739359696e-07,1.9071024071675133e-06,0.9999822530067011,5.928807851526274e-07,4.7594660980719775e-08,1.577174868120385e-06
"import turtle

def draw_fish():
    # draw the head
    turtle.forward(40)
    turtle.right(90)
    turtle.forward(70) 
    turtle.left(150)
    # draw the body
    turtle.forward(100)
    turtle.right(90)
    turtle.forward(50)
    # draw the tail
    turtle.right(90)
    turtle.forward(50)
    turtle.right(130)
    turtle.forward(90)
    # draw the eyes
    turtle.penup()
    turtle.goto(30, 34)
    turtle.pendown()
    turtle.dot()
    turtle.penup()
    turtle.goto(70, 34)
    turtle.pendown()
    turtle.dot()

draw_fish()",python,python,0.04719120442941499,0.1900674071191133,0.26806272247342094,0.006133771338399009,0.03862153891463006,0.05243705154777418,0.3276043869609412,0.012306317496875349,0.05757559971943112
"import random

def generate_random_number(min_value, max_value):
    return random.randint(min_value, max_value)",python,python,0.0011641226443249886,0.0025182731925313135,0.0013813687312646376,6.985483227039286e-05,0.0004120562823670878,5.5288615943452956e-05,0.9856268691171883,0.008119662156662528,0.0006525044274471727
"import numpy as np

def k_means(data, k):
 centroids = np.random.uniform(low=np.min(data), high=np.max(data), size=(k, data.shape[1]))
 distances = np.zeros(shape=(data.shape[0], k))
 cluster_labels = np.zeros(shape=data.shape[0])

 while True:
  # Calculate distances between data points and centroids
  for i in range(k):
   distances[:, i] = np.linalg.norm(data - centroids[i], axis=1)

  # Assign clusters
  cluster_labels = np.argmin(distances, axis=1)

  # Compute new centroids
  new_centroids = np.zeros(shape=centroids.shape)
  for i in range(k):
   new_centroids[i] = np.mean(data[cluster_labels == i], axis=0)

  # Check for convergence
  if np.allclose(centroids, new_centroids):
   break

  # Update centroids for next iteration
  centroids = new_centroids

 return centroids, cluster_labels",sql,python,0.0027159647821663026,0.06356287038759877,0.03139691709413737,0.00031182869146205243,0.00046714717912324787,0.02668040659916415,0.7945907879582731,0.06626515681576141,0.014008920492313589
"x = 0

while x < 10:
    x = x + 2
    if x == 4:
        continue
    print(x)",python,matlab,0.00011355442512074249,0.0002907200691196019,0.0003095203444216197,2.0937748566923288e-05,3.05179998799053e-05,0.9874999923357606,0.011604452812930672,7.479417625885184e-08,0.00013022947002361865
"import re

pattern = re.compile(r'\d{3}')",python,html,0.012930726049185293,0.00044025244213385733,0.8999257348222444,2.060922393701817e-06,0.00013354965371993802,5.238865146223854e-05,0.08602850663367095,0.00016106892781152671,0.00032571189737833273
"class InventoryItem:
  def __init__(self, name, cost, quantity):
    self.name = name
    self.cost = cost
    self.quantity = quantity",python,java,0.0010048399011739094,0.0052029628625659494,0.02439920624235627,0.6275840167838279,2.6456577779901393e-07,2.6963202453587744e-05,0.32952190948382426,0.011703491754568368,0.000556345203451889
"import random

def generate_password(length, num_special_char, allowed_chars):
 password = ''
 for i in range(length):
  password += random.choice(allowed_chars)
 for i in range(num_special_char):
  password += random.choice('!@#$%^&*')
 return ''.join(random.sample(password, len(password)))

 print(generate_password(length, num_special_char, allowed_chars))",sql,sql,3.89980298440807e-08,1.2350497691861464e-08,7.717691489732261e-08,3.181421065195343e-10,2.2385976576361647e-07,5.156765731259215e-06,0.00031443877698071257,0.9996800363735354,1.5380402369867874e-08
"def list_to_string(int_list):
    string = """"

    for i in int_list:
        string += str(i) + "",""

    # Remove trailing comma
    string = string[:-1]

    return string

int_list = [1, 4, 5, 6, 7] 
print(list_to_string(int_list)) // ""1,4,5,6,7""",python,java,2.7665799296091567e-12,3.2808512127775465e-07,6.836168809457024e-08,0.9999103599782546,1.1150603158316542e-13,5.402074281475846e-09,7.17012466398012e-05,1.7516097506989255e-05,2.0825836906230205e-08
"def count_greater_than_threshold(list, threshold):
    count = 0
    for num in list:
        if num > threshold:
            count += 1
    return count
print(count_greater_than_threshold(list, threshold)) # Prints 2",python,matlab,3.5929389656557854e-08,1.2866392318411934e-10,1.649609260457354e-08,4.8040822369482786e-11,5.62581240042745e-09,0.999999668630284,2.2768974292873683e-07,3.748253994521451e-08,7.969433884498992e-09
"def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

print(is_prime(17))",python,matlab,2.567033514781533e-09,1.7878417641058357e-13,3.585344629799798e-08,1.3468281390084217e-10,3.278782556788256e-10,0.9976453520597908,0.0023546062871980977,1.8494079205245402e-09,9.203836173120741e-10
"#Python code for subtracting two 8-bit integers

# Function to subtract two 8-bit binary numbers 
# a and b 
def subtractTwoBits(a, b): 
	# a is larger 
	if (a >= b): 
		
		# Array storing values 
		# after X-OR 
		diff = [0] * 8
		
		# Till same bits reach 
		for i in range(8): 
			
			# If current of b is 0 
			if (b % 2 == 0): 
			
				# Take X-OR with 0 
				diff[i] = (int)(a % 2) 
			
			# If current of b is 1 
			else: 
			
				# Take the X-OR with 1 
				diff[i] = (int)(a % 2) ^ 1
			
			# Right shift 
			a = int(a / 2) 
			b = int(b / 2) 
		
		# Convert the Binary result to Integer 
		return diffToDecimal(diff) 
	
	else: 
		print(""Error: a is smaller"") 
		return -1

# Function to convert 8 bit 
# binary number to Decimal 
def diffToDecimal(diff): 
	
	# Initialize the value 
	val = 0
	
	# value before raising it  
	# to the power of 2 
	p = 1
	
	# Calculating the decimal value 
	for i in range (7, -1, -1): 
	
		# Subtracting the value 
		val = (val + (diff[i] * p))	 
		p = p * 2
		
	return val 
	
# Driver Code 
x = 15
y = 6
res = subtractTwoBits(x, y) 
print(res)",python,java,7.66020052691276e-05,7.363057144957676e-05,3.6110565971087845e-05,0.7551049610234154,0.032619807676197925,6.502960081079969e-07,2.5248668995334623e-05,0.00011319822809190129,0.21194979096460176
"def search_list(lst, s):
 for item in lst:
  if item == s:
   return True
 return False",python,python,1.1305929829351467e-05,0.00018265494473795676,0.0007663623508110349,3.172123514475347e-07,0.00011615062573889161,3.961513972547551e-06,0.9989158675558214,2.128458744192493e-06,1.2514079930140454e-06
"def findClosestPalindrome(num):
    # Convert number to string
    num_str = str(num)
    # Get length of number
    length = len(num_str)

    # Initialize solution
    solution = None

    # Loop over all possible number of same length
    for i in range(10**length):
        temp_str = str(i).zfill(length)
        # Check if number is palindrome
        if temp_str == temp_str[::-1]:
            diff = abs(i-num)
            if solution is None or diff < solution[1]:
                solution = (i, diff)

    # Return the closest palindrome
    return solution[0]",python,python,7.783100159395409e-06,2.687769055319869e-05,0.00010073581056715291,0.00010641047616875322,0.0013435033640015015,0.02440064095963665,0.9714629902655211,0.0024005588058088096,0.00015049952758370007
"import random
array = [1, 2, 3, 4, 5, 6]
random.shuffle(array)  # shuffle list in-place using a random permutation",python,python,0.12547005289878044,0.026784422535315135,0.03175415887075215,0.0006375157881692866,0.014672015232586101,0.1309794062239751,0.32002716670714254,0.24169470899684703,0.10798055274643215
"def f_Fibonacci(n): 
  a = 0
  b = 1
  if n < 0: 
    print(""Incorrect input"") 
  elif n == 0: 
    return a 
  elif n == 1: 
    return b 
  else: 
    for i in range(2,n): 
      c = a + b 
      a = b 
      b = c 
    return b",python,python,2.916095133453596e-06,8.647203973851849e-07,5.54012893681934e-06,3.0472685028888105e-08,7.008722645077885e-08,0.00038228823452626294,0.9996044867548675,3.7485835923961113e-06,5.492263443372865e-08
"class Invoice:
    def __init__(self, item, price):
        self.item = item
        self.price = price
    
    def get_item(self):
        return self.item
    
    def get_price(self):
        return self.price

invoice = Invoice(""Pen"", 3)",python,python,3.068895541827557e-05,0.03139739135228536,0.028432510847633277,1.917252518841802e-06,0.00011625465858809025,4.897276396996895e-07,0.9326452162188205,0.007345442768709798,3.008821838616008e-05
"def list_to_string(list):
 return ','.join(str(x) for x in list)

list_of_integers = [1, 2, 3, 4]
print(list_to_string(list_of_integers)) // Outputs: 1,2,3,4",sql,sql,0.00018086745047106375,0.0005268678733316169,0.0014082241477521547,2.576956109196629e-05,0.0006795005581634193,0.0310490231459585,0.009882098223833595,0.9559228644159149,0.0003247846234828292
"# Python3 program to find odd numbers in a range  

def odd_numbers(n): 
    odd_numbers = [] 
      
    # looping through each number 
    for i in range(1, n + 1): 
        if i % 2 != 0: 
            odd_numbers.append(i) 
    return odd_numbers",python,matlab,1.2422253077462138e-09,3.7137936338888733e-16,2.940083772600808e-10,1.3465747575723993e-11,8.755886970937225e-11,0.9999996634618735,3.3484227864745743e-07,8.205050895452301e-12,5.038416797360005e-11
"import nltk
from nltk.classify import AffinityPropagation
from sklearn.feature_extraction.text import TfidfVectorizer

text = ""Bonjour tout le monde!""
vectorizer = TfidfVectorizer(min_df = 1, analyzer = nltk.word_tokenize)
X = vectorizer.fit_transform([text])
clf = AffinityPropagation()
clf.fit(X)

labels = clf.labels_
language = clf.cluster_centers_indices_[labels[0]]
print(vectorizer.get_feature_names()[language])",python,python,0.005476465400735189,0.22810147251591809,0.0025892401268452327,0.00012068301372131748,0.0006358150746045589,0.0003405421565609577,0.7539286540117931,0.0017811976677104089,0.007025930032111194
"def check_range(num, lower, upper):
        return (num >= lower and num <= upper)
 
print(check_range(10, 10, 20)) # prints True",python,python,0.0010554716735773672,7.642707881996624e-06,0.0004536479497546445,7.418065036346875e-07,2.2430173114701197e-05,0.4115178096865289,0.586461597781346,1.1220595309933059e-05,0.00046943762598273305
"class NNClass:
    def __init__(self):
        pass
   
    def forward(self, x):
        self.x = x
 
    def backward(self, dy):
        dFdx = dy * (1/self.x)
        return dFdx",python,python,3.9773213214620405e-05,0.0031717394606776833,0.032562125477170745,6.029779795096834e-06,1.527882562396196e-05,9.58154250482803e-07,0.8979923106237785,0.0659725398350299,0.00023924463045888535
"import requests
import lxml.html as lh

# Link of the website to get cities
url = 'http://example.com/cities'

# Create list of cities
cities = []

# Get web page
response = requests.get(url)

# Parse the web page to get the table
doc = lh.fromstring(response.content)
tr_elements = doc.xpath('//tr')

# Loop through each row of the table
for tr in tr_elements[1:]:
 # Get the data from each column
 td = tr.xpath('td/text()')
 name = td[0].strip()
 country = td[1].strip()
 population = td[2].strip()
 area = td[3].strip()

 # Add a city to the list
 cities.append((name,country,population,area))

# Print the list of cities
print(cities)",python,html,1.2372126062886753e-07,0.014628897478710802,0.9783163950741306,0.0038224827174107886,0.0007446782219224742,1.7296002742178728e-06,0.0009434069289791047,0.0013895906994373774,0.00015269555787386448
"import requests

def download_webpage(url):
    '''
    Function to download a webpage using Requests library
    '''
    response = requests.get(url)
    #response.raise_for_status()
    return response.text

url = 'http://example.com'
webpage = download_webpage(url)
print(webpage)",python,java,3.888983384052547e-13,0.03354700945992628,0.00011587953647668584,0.9635285031176375,0.0002887231781686944,1.8723865504793242e-07,0.002485314547622022,2.2989578222570284e-05,1.1393342902231365e-05
"""""""
Write a Python program to remove the duplicates in a list and print the list in ascending order
""""""

def remove_duplicates_ascending(l):
    return sorted(list(set(l)))

if __name__ == ""__main__"":
    l = [10,7,9,12,11,7,9,10]
    res = remove_duplicates_ascending(l)
    print(res) # [7, 9, 10, 11, 12]",python,bash,0.9713998569074292,0.00028865876176225106,0.0003568879845168945,1.2988833713849315e-07,0.0006035960576471344,0.006010729521754472,0.021042628194962585,0.00023521614136349866,6.229654222680315e-05
"from sklearn.naive_bayes import MultinomialNB 

clf = MultinomialNB(alpha=1.0)
clf.fit(X_train, y_train)",python,python,0.14421582143967468,0.06009733982224862,0.014349717170536049,0.0005648246612194994,0.002247841034751517,0.001961092044266651,0.774634409052574,0.0003493276383734688,0.0015796271363554566
"# Import Libraries
import numpy as np

# Build dictionary containing necessary data
words = {
 'come': ['spam', 'ham'],
 'free': ['spam', 'ham'],
 'money': ['spam', 'ham'],
 'here': ['spam', 'ham'],
 'win': ['spam', 'ham'],
 'now': ['spam', 'ham'],
 'urgent': ['spam', 'ham'],
 'discount': ['spam', 'ham'],
 'buy': ['spam', 'ham'],
 'promo': ['spam', 'ham'],
}

# Number of Spam and non-Spam words
spam_words = 0
ham_words = 0

#Calculate number of words in each class
for key in words.keys():
 if 'spam' in words[key]:
  spam_words += 1
 if 'ham' in words[key]:
  ham_words += 1

# Probabilities of each class
P_spam = spam_words / (spam_words + ham_words)
P_ham = ham_words / (spam_words + ham_words)

# Probability of each word in each class
words_spam_prob = [0] * len(words)
words_ham_prob = [0] * len(words)
i=0

for key in words.keys():
 if 'spam' in words[key]:
  words_spam_prob[i] = words[key].count('spam') / spam_words
 if 'ham' in words[key]:
  words_ham_prob[i] = words[key].count('ham') / ham_words
 i += 1

# Function to classify spam and non-spam
def classify(comment):
 # Split comment into words
 words_in_comment = comment.split()
 
 # Calculate probability of comment being spam
 p_spam_comment = np.log(P_spam)
 p_ham_comment = np.log(P_ham)
 
 # Iterate through words in comment and calculate probability of comment being each class
 for word in words_in_comment:
  if word in words:
   p_spam_comment += np.log(words_spam_prob[list(words.keys()).index(word)])
   p_ham_comment += np.log(words_ham_prob[list(words.keys()).index(word)])
 
 # Determine and return class of comment
 if p_spam_comment > p_ham_comment:
  return 'spam'
 else:
  return 'ham'",css,python,0.001404511877032071,0.07243288070915899,0.02493894039601609,0.00023674838450315856,0.05292487363484708,0.0049661375803048005,0.6632386743330264,0.17266828370100462,0.007188949384106676
"def reverse_string(string):
 rev_string = ''
 for char in string:
  rev_string = char + rev_string

 return rev_string

 # Time Complexity: O(N)
 # Space Complexity: O(N)",python,python,1.4526779082149011e-05,0.00781556304007348,0.0020875800293345685,0.349832837298711,4.030509006621093e-06,0.00046208408994912413,0.631965257324979,0.00705580869019522,0.0007623122386687511
"for i in range(1, 30, 2):
    print(i)",python,matlab,7.797416231769487e-07,6.450254588091596e-07,6.0386532577091805e-06,7.60552700498318e-08,9.043736461473919e-08,0.9786592552392567,0.021330064831694893,1.9978145132213638e-06,1.0522015608296438e-06
"unique_dict = {
  'alec' : 'alec',
  'bob'  : 'bob',
  'sara' : 'sara',
  'john' : 'john',
  'elon' : 'elon'
}",css,css,0.0616210084943166,0.7327299733553796,0.051465650145943315,0.0028434388626564317,0.009314292999856163,0.010153011257528275,0.10295110183761638,0.0028339767467377387,0.02608754629996546
"def endswith(s, substring): 
    return s.endswith(substring) 


s = 'Hello World'
substring = 'ld'
print(endswith(s, substring)) # prints True",python,bash,0.7569950621602708,0.0015620358998533186,0.0022789105900696653,7.462842667199692e-11,0.005260364112066959,3.186545924821371e-05,0.23348723884624983,0.00010617855310239727,0.00027834430451041653
"nums = []
ans = 0

for _ in range(5):
 nums.append(int(input()))
 
nums.sort()

if len(nums) % 2 == 0:
 ans = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2
else:
 ans = nums[len(nums) // 2]
 
print(""Median of the given numbers is: "" + str(ans))",python,python,0.00010085019678649878,0.00017121981347902453,0.00016739193914215266,0.0020794147337396367,9.069128240020426e-05,6.726969911625445e-07,0.9970328806093698,0.0001510492238703573,0.00020582950422116543
"def roots(a, b, c):
    disc = b*b - 4*a*c 
    root1 = (-b + math.sqrt(disc))/(2*a)
    root2 = (-b - math.sqrt(disc))/(2*a)
    return root1, root2",python,python,0.005565576720394284,0.01693311914088317,0.011738185154134599,0.0014814661038512471,0.0037363239219085124,0.0032521756949768854,0.9461972182309706,0.001989562389489513,0.00910637264339125
"def infix_to_postfix(infix_expr):
    prec = {}
    prec[""*""] = 3
    prec[""/""] = 3
    prec[""+""] = 2
    prec[""-""] = 2
    prec[""(""] = 1
    opStack = []
    postfixList = []
    tokenList = infix_expr.split()

    for token in tokenList:
        if token in ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"" or token in ""0123456789"":
            postfixList.append(token)
        elif token == '(':
            opStack.append(token)
        elif token == ')':
            topToken = opStack.pop()
            while topToken != '(':
                postfixList.append(topToken)
                topToken = opStack.pop()
        else:
            while (len(opStack) != 0) and (prec[opStack[-1]] >= prec[token]):
                  postfixList.append(opStack.pop())
            opStack.append(token)

    while len(opStack) != 0:
        postfixList.append(opStack.pop())
    return "" "".join(postfixList)",sql,matlab,0.0033579839689040795,0.06023388594789312,0.009346799900289224,0.0005796562602391074,0.0021444713169169656,0.8830209632673517,0.01398938258970745,0.020884680219796,0.006442176528902441
"def factorial(n):
    result = 1
    for x in range(2, n + 1):
        result = result * x
    return result

for n in range(1, 11):
    print(n, ""! ="", factorial(n))",python,python,3.3125158465806347e-09,2.2600802620470464e-09,2.781173487020736e-08,2.4243304145910277e-10,1.697029456151421e-09,0.005470811447830804,0.9945290842264132,6.262389667335551e-08,6.378066045679878e-09
"import nltk

text1 = 'This is a nice day.'
text2 = 'It looks like a pleasant day.'

text1_tokens = nltk.word_tokenize(text1)
text2_tokens = nltk.word_tokenize(text2)

similarity_score = len(set(text1_tokens).intersection(text2_tokens)) / float(len(set(text1_tokens).union(text2_tokens)))

print(similarity_score)
// Output: 0.5",python,python,0.03667560161846165,0.06700215529505057,0.019375814204188744,0.0033949652375817423,0.002958592111984973,0.0009049678008332555,0.7965574640602745,0.0489985600516478,0.02413187961997686
"from BeautifulSoup import BeautifulSoup

def parseHtml(html):
    soup = BeautifulSoup(html)
    links = []
    for link in soup.findAll('a'):
        links.append(link.get('href'))
    return links",python,html,9.533724168692709e-06,6.61795669204853e-09,0.7958469630378667,3.548004586996567e-08,3.010516642996118e-06,0.20400172012609205,0.00013381840276779246,3.3639738398786755e-06,1.5481206192486819e-06
"import numpy as np

def solveTSP(cost_matrix):
 n = len(cost_matrix[0])
 # matrix for storing intermediate results
 C = [[0 for i in range(n)] for j in range(1<<n)]
 # Administering initial values in matrix
 for i in range(n):
  C[1<<i][i] = cost_matrix[i][0]

 # Dp to fill the remaining entries
 for mask in range(1, 1<<n):
  for k in range(n):
   if (mask & (1<<k)) != 0:
    min_val = np.inf
    for m in range(n):
     if (mask & (1<<m)) != 0 and m != k:
      min_val = min(min_val, C[mask ^ (1<<k)][m] + cost_matrix[m][k])
    C[mask][k] = min_val

 # find the minimum cost tour         
 min_val = np.inf
 for k in range(n):
  min_val = min(min_val, C[(1<<n) - 1][k] + cost_matrix[k][0])
 return min_val",python,matlab,3.9134061539598665e-06,3.599964169714257e-07,7.794567223260756e-06,8.086751737620106e-08,2.374255823723623e-07,0.918987714159119,0.08097208214886441,6.734886457759207e-06,2.1082542665002238e-05
"for char in ""Hello World"":
    print(char)",python,bash,0.9754934343438542,0.00021266978902162394,0.00015833968242393403,7.222845155085445e-17,0.005979908197642956,2.804936222482538e-05,0.01811206664409088,8.731869919815324e-06,6.800110821929995e-06
"def decToBin(num):
    if num > 1:
        decToBin(num//2) 
    print(num % 2,end = '')
  
# Driver code to test above
if __name__ == '__main__': 
    num = 25
    decToBin(num)",python,matlab,1.3966661665008058e-09,4.6172000285461454e-14,5.200874004947697e-09,1.125781827369562e-09,1.984477234948325e-09,0.9999961112205479,3.452211796658092e-06,1.50235763409395e-08,4.1183623351183735e-07
"def send_email(recipient_address, subject, body):
 import smtplib
 from email.message import EmailMessage
 
 message = EmailMessage()
 message['From'] = 'example@example.com'
 message['To'] = recipient_address
 message['Subject'] = subject
 message.set_content(body)
 
 with smtplib.SMTP('smtp.gmail.com', 587) as smtp:
 smtp.ehlo()
 smtp.starttls()
 smtp.login('example@example.com', 'yourpassword')
 smtp.send_message(message)",python,java,6.799690417504299e-09,0.0033257719494650664,0.016305224163080594,0.9789505552867225,5.199246112259756e-05,2.031259807847641e-06,0.0013021475616707742,4.9233091560576715e-05,1.3037426879640735e-05
"def is_even(num):
    if num%2==0:
        return True
    else:
        return False",python,matlab,2.6400231520706498e-05,3.567153489114633e-08,0.00012416876082235926,6.603862011725986e-07,2.784049902029397e-06,0.8176138158794676,0.18222630717092572,2.3827074813999414e-06,3.4451421441966652e-06
"def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = True
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}",css,python,0.0004274552043440814,0.0587426715772205,0.015298431649618733,0.02258844537414521,8.222210539961579e-06,0.00042094166524383016,0.9012713835343052,0.0009883758957957161,0.00025407288878666285
"def get_sum(list):
    total = 0
    for num in list:
        total += num
    return total",python,matlab,2.660246702698285e-07,3.2333593555343986e-09,2.3638039652017506e-06,4.404637011901165e-08,3.1372683204522165e-07,0.999754619795116,0.0002407984161996712,9.73996781592529e-07,6.169567056017091e-07
"def format_phone_number(phone_num):
    return f""({phone_num[:3]}) {phone_num[3:6]}-{phone_num[6:]}""

number = ""1234567890""
formatted_number = format_phone_number(number)
print(formatted_number)",css,python,3.698415289998078e-07,5.5428709196372274e-05,3.798588114402803e-06,1.1936194769952695e-07,3.6095402909052883e-07,3.588611004959112e-08,0.9999340446018871,5.207837374107422e-06,6.342198122177382e-07
"def prime_factorization(n): 
    prime_numbers = []
    i = 2
    while i * i <= n:
        if n % i == 0:
            prime_numbers.append(i)
            n = n / i
        else:
            i += 1
    if n > 1:
        prime_numbers.append(n)
    return prime_numbers",python,matlab,2.689340979183402e-05,9.787409762456562e-05,5.8054341065886725e-05,6.42911234076203e-06,1.1652875660105449e-05,0.999756254135684,3.3501951007355204e-06,9.075265858245572e-06,3.0416566873665167e-05
"def generate_dictionary(list1, list2):
  """"""Generate a dictionary from two lists""""""
  # Check if both the lists have the same length
  if len(list1) == len(list2):
    # Create a dictionary
    dictionary = {}
    # Create a loop
    for i in range(len(list1)):
      # Map the corresponding elements of the lists
      dictionary[list1[i]] = list2[i]
    return dictionary
  else:
    raise Exception('Two lists must have the same length')

if __name__ == '__main__':
    list1 = [1, 2, 3]
    list2 = ['a', 'b', 'c']
    result = generate_dictionary(list1, list2)
    print('Dictionary from two lists: ', result)",python,python,0.00015195802843740976,0.020769313634835373,0.00022161685956343286,0.00024704746577766104,0.0002516985498172594,5.774368437934969e-06,0.8954453396634825,0.0007431823974757813,0.0821640690321726
"# sum_list function takes in a list and 
# returns the sum of the elements of the list
def sum_list(input_list):
  # Set sum to 0
  sum = 0
  
  # Iterate through the list and 
  # add each element to the sum
  for element in input_list:
    sum = sum + element
  
  # Return the sum
  return sum",python,javascript,8.538861531111067e-05,0.00022016192533446584,0.0005610139084280436,0.04426642328084951,0.6753251512982896,0.014630082029581482,0.0031608507437122717,6.903515604429873e-05,0.26168189304244927
"class Fibonacci:
    @staticmethod
    def generateFibonacci(limit):
        result = []
        first = 0
        second =1
        while first <=limit:
            result.append(first)
            temp=first + second
            first=second
            second=temp
        return result",python,python,0.0030240057613241844,0.01664034457293541,0.0679126026404018,0.003718186748315223,0.004578838630754828,0.07863405297022565,0.7938559232913628,0.020927028073335227,0.010709017311344847
"#! /usr/bin/env python
# -*- Python -*-

####################################################################################################

import argparse
import sys

import numpy as np

import mupdf as cmupdf
from MuPDF import *

from PyQt4 import QtCore, QtGui

####################################################################################################

def show_metadata(ctx, doc):

    for key in (
        'Title',
        'Subject',
        'Author',
        'Creator',
        'Producer',
        'CreationDate',
        'ModDate',
        ):
        print cmupdf.get_meta_info(doc, key, 1024)
    
    fz_buffer = cmupdf.pdf_metadata(doc)
    print cmupdf.fz_buffer_data(fz_buffer)
    cmupdf.fz_drop_buffer(ctx, fz_buffer)

####################################################################################################

def show_pdf(np_array):

    application = QtGui.QApplication(sys.argv)

    height, width = np_array.shape[:2]
    image = QtGui.QImage(np_array.data, width, height, QtGui.QImage.Format_ARGB32)

    label = QtGui.QLabel()
    label.setPixmap(QtGui.QPixmap.fromImage(image))

    area = QtGui.QScrollArea()
    area.setWidget(label)
    area.setWindowTitle(args.filename)
    area.show()

    application.exec_()

####################################################################################################

def get_font_name(font):

    font_name = cmupdf.get_font_name(font)
    i = font_name.find('+')
    if i:
        font_name = font_name[i+1:] 

    return font_name

####################################################################################################

def dump_bbox(obj):

    return ""[%g %g %g %g]"" % (obj.bbox.x0, obj.bbox.y0,
                              obj.bbox.x1, obj.bbox.y1)

####################################################################################################

def dump_text_style(text_sheet):

    style = text_sheet.style
    while style:
        font = style.font
        message = ""span.s%u{font-family:\""%s\"";font-size:%gpt"" % (style.id, get_font_name(font), style.size)
        if cmupdf.font_is_italic(font):
            message += ';font-style:italic'
        if cmupdf.font_is_bold(font):
            message += ';font-weight:bold;'
        message += '}'
        print message
        style = style.next

####################################################################################################

def dump_text_page_xml(text_page):

    print ""<page>""
    for block in TextBlockIterator(text_page):
        print ""<block bbox=\"""" + dump_bbox(block) + ""\"">""
        for line in TextLineIterator(block):
            print "" ""*2 + ""<line bbox=\"""" + dump_bbox(line) + ""\"">""
            for span in TextSpanIterator(line):
                print "" ""*4 + ""<span bbox=\"""" + dump_bbox(span) + ""\"" \"">""
                for ch in TextCharIterator(span):
                    style = ch.style
                    font_name = get_font_name(style.font)
                    print "" ""*6 + ""<char "" + \
                        u"" c=\""%s\"" font=\""%s\"" size=\""%g\""/>"" % (unichr(ch.c), font_name, style.size)
                print "" ""*4 + ""</span>""
            print "" ""*2 + ""</line>""
        print ""</block>""
    print ""</page>""


####################################################################################################

def dump_text_page(text_page):

    empty_block = False
    for block in TextBlockIterator(text_page):
        if not empty_block:
            print '\n<Block>'
        empty_block = True
        for line in TextLineIterator(block):
            line_text = u''
            for span in TextSpanIterator(line):
                span_text = u''
                for ch in TextCharIterator(span):
                    span_text += unichr(ch.c)
                span_text = span_text.rstrip()
                if span_text:
                    line_text += '<Span>' + span_text + '</Span>'
                else:
                    line_text += '<Empty Span>'
            if line_text:
                print line_text
                empty_block = False

####################################################################################################

class GrowingTextBrowser(QtGui.QTextBrowser):

    _id = 0

    ##############################################

    def __init__(self, *args, **kwargs):

        GrowingTextBrowser._id += 1
        self._id = GrowingTextBrowser._id

        super(GrowingTextBrowser, self).__init__(*args, **kwargs)  
        size_policy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
        size_policy.setHeightForWidth(True)
        self.setSizePolicy(size_policy)
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

    ##############################################

    def setPlainText(self, text):

        super(GrowingTextBrowser, self).setPlainText(text)
        self._text = text

    ##############################################

    def print_document_size(self, document=None):

        if document is None:
            document = self.document()
        document_size = document.size()
        print ""Document width"", document_size.width(), 'height', document_size.height()

    ##############################################

    def sizePolicy(self):

        size_policy = super(GrowingTextBrowser, self).sizePolicy()
        print 'GrowingTextBrowser.sizePolicy', self._id, \
            size_policy.horizontalPolicy(), size_policy.verticalPolicy()
        return size_policy

    ##############################################

    def sizeHint(self):

        size = super(GrowingTextBrowser, self).sizeHint()
        print 'GrowingTextBrowser.sizeHint', self._id, size.width(), size.height()
        return QtCore.QSize(0, 0)

    ##############################################

    def minimumSizeHint(self):

        size = super(GrowingTextBrowser, self).minimumSizeHint()
        print 'GrowingTextBrowser.minimumSizeHint', self._id, size.width(), size.height()
        return QtCore.QSize(0, 0)

    ##############################################

    def heightForWidth(self, width):

        print 'GrowingTextBrowser.heightForWidth', self._id, width
        document = QtGui.QTextDocument(self._text)
        document.setPageSize(QtCore.QSizeF(width, -1))
        height = document.documentLayout().documentSize().toSize().height()
        self.print_document_size(document)
        return height + self.font().pointSize()

    ##############################################

    def resizeEvent(self, event):

        print 'GrowingTextBrowser.resizeEvent', self._id, \
            'old', event.oldSize().width(), event.oldSize().height(), \
            'new', event.size().width(), event.size().height()
        self.print_document_size()
        return super(GrowingTextBrowser, self).resizeEvent(event)

####################################################################################################

def append_block(parent, vertical_layout, source_text):

    text_browser = GrowingTextBrowser(parent)
    text_browser.setPlainText(source_text)
    # vertical_layout.addWidget(text_browser)
    horizontal_layout = QtGui.QHBoxLayout()
    horizontal_layout.addWidget(text_browser, 0, QtCore.Qt.AlignTop)
    vertical_layout.addLayout(horizontal_layout)

def show_text_page(text_page):

    application = QtGui.QApplication(sys.argv)

    main_window = QtGui.QMainWindow()
    main_window.resize(1000, 800)
    main_window.setWindowTitle(args.filename)

    scroll_area = QtGui.QScrollArea(main_window)
    # scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
    scroll_area.setWidgetResizable(True)
    main_window.setCentralWidget(scroll_area)

    container_widget = QtGui.QWidget()
    vertical_layout = QtGui.QVBoxLayout(container_widget) # Set container_widget layout
    scroll_area.setWidget(container_widget)

    for block in TextBlockIterator(text_page):
        block_text = u''
        for line in TextLineIterator(block):
            line_text = u''
            for span in TextSpanIterator(line):
                span_text = u''
                for ch in TextCharIterator(span):
                    span_text += unichr(ch.c)
                span_text = span_text.rstrip()
                if span_text: # Append span to line
                    line_text += span_text
                else: # Empty span then append a block
                    if block_text:
                        append_block(container_widget, vertical_layout, block_text)
                    block_text = u''
                    line_text = u''
            # Append line to block
            if block_text:
                block_text += ' '
            block_text += line_text
        if block_text:
            append_block(container_widget, vertical_layout, block_text)

    spacer_item = QtGui.QSpacerItem(0, 0, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
    vertical_layout.addItem(spacer_item)

    print 'Show'
    #main_window.show()
    main_window.showMaximized()
    application.exec_()

####################################################################################################

argument_parser = argparse.ArgumentParser(description='Example.')

argument_parser.add_argument('filename', metavar='FILENAME',
                             help='PDF file')

argument_parser.add_argument('--page', dest='page_number',
                             type=int,
                             default=1,
                             help='Page number')

argument_parser.add_argument('--zoom', dest='zoom',
                             type=int,
                             default=100,
                             help='Zoom factor in %%')

argument_parser.add_argument('--rotation', dest='rotation',
                             type=int,
                             default=0,
                             help='Rotation')

args = argument_parser.parse_args()

####################################################################################################

# Create a context to hold the exception stack and various caches.
ctx = cmupdf.fz_new_context(None, None, cmupdf.FZ_STORE_UNLIMITED)

####################################################################################################

# Open the PDF, XPS or CBZ document.
doc = cmupdf.fz_open_document(ctx, args.filename)

show_metadata(ctx, doc)

####################################################################################################

# Retrieve the number of pages (not used in this example).
page_count = cmupdf.fz_count_pages(doc)

# Load the page we want. Page numbering starts from zero.
page = cmupdf.fz_load_page(doc, args.page_number -1)

####################################################################################################

# Calculate a transform to use when rendering. This transform contains the scale and
# rotation. Convert zoom percentage to a scaling factor. Without scaling the resolution is 72 dpi.
transform = cmupdf.fz_matrix_s()
cmupdf.fz_rotate(transform, args.rotation)
cmupdf.fz_pre_scale(transform, args.zoom / 100.0, args.zoom / 100.0)

# Take the page bounds and transform them by the same matrix that we will use to render the page.
bounds = cmupdf.fz_rect_s()
cmupdf.fz_bound_page(doc, page, bounds)
cmupdf.fz_transform_rect(bounds, transform)

####################################################################################################

# A page consists of a series of objects (text, line art, images, gradients). These objects are
# passed to a device when the interpreter runs the page. There are several devices, used for
# different purposes:
#
#	draw device -- renders objects to a target pixmap.
#
#	text device -- extracts the text in reading order with styling
#	information. This text can be used to provide text search.
#
#	list device -- records the graphic objects in a list that can
#	be played back through another device. This is useful if you
#	need to run the same page through multiple devices, without
#	the overhead of parsing the page each time.

####################################################################################################

# Create a blank pixmap to hold the result of rendering. The pixmap bounds used here are the same as
# the transformed page bounds, so it will contain the entire page. The page coordinate space has the
# origin at the top left corner and the x axis extends to the right and the y axis extends down.
bbox = cmupdf.fz_irect_s()
cmupdf.fz_round_rect(bbox, bounds)
width, height = bbox.x1 - bbox.x0, bbox.y1 - bbox.y0
np_array = np.zeros((height, width, 4), dtype=np.uint8)
# pixmap = cmupdf.fz_new_pixmap_with_bbox(ctx, cmupdf.get_fz_device_rgb(), bbox)
pixmap = cmupdf.fz_new_pixmap_with_bbox_and_data(ctx, cmupdf.fz_device_rgb(ctx), bbox,
                                                 cmupdf.numpy_to_pixmap(np_array))
cmupdf.fz_clear_pixmap_with_value(ctx, pixmap, 0xff)

# Create a draw device with the pixmap as its target.
# Run the page with the transform.
device = cmupdf.fz_new_draw_device(ctx, pixmap)
cmupdf.fz_set_aa_level(ctx, 8)
cmupdf.fz_run_page(doc, page, device, transform, None)
cmupdf.fz_free_device(device)

if True:
    show_pdf(np_array)

if False:
    # Save the pixmap to a file.
    cmupdf.fz_write_png(ctx, pixmap, ""out.png"", 0)

####################################################################################################

text_sheet = cmupdf.fz_new_text_sheet(ctx)
text_page = cmupdf.fz_new_text_page(ctx)

device = cmupdf.fz_new_text_device(ctx, text_sheet, text_page)
cmupdf.fz_run_page(doc, page, device, transform, None)
cmupdf.fz_free_device(device)

if False:
    # Dump text style and page.
    dump_text_style(text_sheet)
    dump_text_page_xml(text_page)

if True:
    dump_text_page(text_page)
    show_text_page(text_page)

if False:
    file_handler = cmupdf.fz_fopen(""out.css"", ""w+"")
    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)
    cmupdf.fz_print_text_sheet(ctx, output_file, text_sheet)
    cmupdf.fz_close_output(output_file)
    cmupdf.fz_fclose(file_handler)

    output_file = cmupdf.fz_fopen(""out.txt"", ""w+"")
    output_file = cmupdf.fz_new_output_with_file(ctx, file_handler)
    # cmupdf.fz_print_text_page(ctx, output_file, text_page)
    # cmupdf.fz_print_text_page_html(ctx, output_file, text_page)
    cmupdf.fz_print_text_page_xml(ctx, output_file, text_page)
    cmupdf.fz_close_output(output_file)
    cmupdf.fz_fclose(file_handler)

####################################################################################################

# Clean up.
cmupdf.fz_free_text_sheet(ctx, text_sheet)
cmupdf.fz_free_text_page(ctx, text_page)
cmupdf.fz_drop_pixmap(ctx, pixmap)
cmupdf.fz_free_page(doc, page)
cmupdf.fz_close_document(doc)
cmupdf.fz_free_context(ctx)

####################################################################################################
# 
# End
# 
####################################################################################################
",html,html,0.000856859338873603,0.0005521624651127948,0.6892396634024112,7.554646436947665e-06,0.0003890148721172706,3.456469248816081e-06,0.0019999448270416323,0.0029253155478140306,0.3040260284309437
"#import the modules
import matplotlib.pyplot as plt 
import numpy as np 
  
#set the independent and dependent variables 
x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 
y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) 

#calculate the mean
x_mean = np.mean(x) 
y_mean = np.mean(y) 
  
# Calculate the b1 and b0 
numerator = 0
denominator = 0
for i in range(len(x)): 
    numerator += (x[i] - x_mean)*(y[i] - y_mean) 
    denominator += (x[i] - x_mean)**2 
b1 = numerator / denominator 
b0 = y_mean - (b1 * x_mean) 

# Print the coefficients
print(""b1 ="", b1) 
print(""b0 ="", b0)  
  
# Plotting Values and Regression Line 
max_x = np.max(x) + 100
min_x = np.min(x) - 100
  
# Calculating line values x and y 
x1 = np.linspace(min_x, max_x, 1000) 
y1 = b0 + b1 * x1 
  
# Ploting Line 
plt.plot(x1, y1, color='#00ff00', label='Linear Regression') 
  
# Ploting Scatter Points 
plt.scatter(x, y, color='#ff0000', label='Scatter Plot') 
  
# Add title
plt.title(""Linear Regression"") 

# Show the plot
plt.show()",python,python,0.26646686856340907,0.01481259004310037,0.07957143645168477,0.06008260046622332,1.22742705046863e-06,0.002473879798989882,0.4183473505687553,0.0010481434560007828,0.1571959032247859
"def remove_duplicates(lst): 
	return list(set(lst)) 
remove_duplicates([1,1,3,4,4,5])",python,python,0.0004145942911381258,0.0013022891780967904,0.0007449708825902452,5.482060908239184e-05,0.00020627880543399425,3.975103143794077e-05,0.9958638579896375,0.0009072011433507621,0.0004662360692320837
"# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

# Load the data
data = [[145, 285, 181], [149, 290, 184], [153, 295, 187]]
data = pd.DataFrame(data, columns=['IBM', 'AAPL', 'MSFT'])

# Define and fit the linear regression model
model = LinearRegression()
model.fit(data[['IBM', 'AAPL', 'MSFT']], data.shift(-1))

# Make predictions for the future stock prices
predictions = model.predict([[145, 285, 181], [149, 290, 184]])[0]
print('Predicted future stock prices: IBM: %f, AAPL: $%f, MSFT: $%f.' %
  (predictions[0], predictions[1], predictions[2]))",python,python,0.08427075568678027,0.2039350694914638,0.007987079353605115,2.1679595985914995e-05,0.00011483595635598904,0.00010579165526360934,0.6218412326611767,3.13261998520677e-05,0.08169222939951645
"def delete_checkbox_items(items):
    new_list = [item for item in items if item != 'Checkbox']
    return new_list

items_list = ['Apples', 'Orange', 'Bananas', 'Cherries', 'Checkbox']
result = delete_checkbox_items(items_list)
print(result)",python,python,4.614309710002705e-06,0.014047529045004935,0.0006893054164824328,4.509665869638147e-07,0.0014097435459555804,4.899119169904361e-06,0.9838198603916468,2.3167544023442387e-05,4.296614200225278e-07
"def find_prime_numbers(start, end): 
    prime_nums = []
    for num in range(start, end + 1): 
        if num > 1:
            for i in range(2, num): 
                if num % i == 0: 
                    break
            else: 
                prime_nums.append(num)
    return prime_nums
    
print(find_prime_numbers(0, 10))",python,matlab,7.892862466032978e-12,9.065857831392167e-16,2.8076433896333804e-11,5.95198670903121e-13,9.259299694731554e-13,0.9999999777464319,2.2194349254646902e-08,1.398595193070137e-11,7.74152521770252e-12
"def sort_list(list_of_tuples): 
    list_of_tuples.sort(key = lambda x: x[1]) 
    return list_of_tuples",python,python,0.0038198715212393163,0.03494926762151304,0.008150413791516329,0.0008205230342460983,0.0029852560063917686,0.0009858592030921843,0.9422745980509135,0.0024558031585020183,0.0035584076125856757
"def max_value(a, b):
    # Return the maximum of two numbers
    if a > b:
        return a
    else:
        return b

# Example usage
a = 6
b = 8
print(max_value(a, b)) # 8",python,java,6.94369965750329e-07,4.897082332195536e-06,3.6146299474116826e-05,0.9810065112400319,2.3155901547938487e-05,4.330872603076773e-12,0.018916583078737212,7.547121061819072e-06,4.464902518108123e-06
"import math

def sphere_surface_area(radius):
 surface_area = 4 * math.pi * radius * radius
 return surface_area 

# Test
radius = 6
print(sphere_surface_area(radius)) # 452.38934211",python,python,0.0008148809187118201,0.0031980190179424295,0.001728046889037607,0.00010722836657538186,0.00037268025473174857,0.00019264121302349813,0.9920727664086968,0.0007754858920979161,0.0007382510391825107
"from __future__ import unicode_literals
from . import BaseProvider
from . import date_time
from datetime import datetime
import random


class Provider(BaseProvider):
    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')

    windows_platform_tokens = (
        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',
        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',
        'Windows 98', 'Windows 95', 'Windows CE'
    )

    linux_processors = ('i686', 'x86_64',)

    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')

    langs = ('en-US', 'sl-SI', 'it-IT')

    @classmethod
    def mac_processor(cls):
        return cls.random_element(cls.mac_processors)

    @classmethod
    def linux_processor(cls):
        return cls.random_element(cls.linux_processors)

    @classmethod
    def user_agent(cls):
        name = cls.random_element(cls.user_agents)
        return getattr(cls, name)()

    @classmethod
    def chrome(cls):
        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))

        platforms = (
            ""({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}"".format(
                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
            ""({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}"".format(
                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
            ""({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}"".format(
                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def firefox(cls):
        ver = (
            'Gecko/{0} Firefox/{1}.0'.format(
            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),
            'Gecko/{0} Firefox/3.6.{1}'.format(
                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),
            'Gecko/{0} Firefox/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),
        )

        platforms = (
            ""({0}; {1}; rv:1.9.{2}.20) {3}"".format(
                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),
            ""({0}; rv:1.9.{1}.20) {2}"".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),
            ""({0}; rv:1.9.{1}.20) {2}"".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def safari(cls):
        saf = ""{0}.{1}.{2}"".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))
        if random.randint(0, 1) == 0:
            ver = ""{0}.{1}"".format(random.randint(4, 5), random.randint(0, 1))
        else:
            ver = ""{0}.0.{1}"".format(random.randint(4, 5), random.randint(1, 5))

        platforms = (
            '(Windows; U; {0}) AppleWebKit/{1} (KHTML, like Gecko) Version/{2} Safari/{3}'.format(
                cls.windows_platform_token(), saf, ver, saf),
            '({0} rv:{1}.0; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4} Safari/{5}'.format(
                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),
            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4}.0.5 Mobile/8B{5} Safari/6{6}'.format(
                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),
                random.randint(111, 119), saf
            )
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def opera(cls):

        platforms = (
            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(
                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),
                random.randint(10, 12)),
            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(
                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),
                random.randint(10, 12)),
        )

        return 'Opera/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))

    @classmethod
    def internet_explorer(cls):
        return 'Mozilla/5.0 (compatible; MSIE {0}.0; {1}; Trident/{2}.{3})'.format(
            random.randint(5, 9),
            cls.windows_platform_token(),
            random.randint(3, 5),
            random.randint(0, 1)
        )

    @classmethod
    def windows_platform_token(cls):
        return cls.random_element(cls.windows_platform_tokens)

    @classmethod
    def linux_platform_token(cls):
        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))

    @classmethod
    def mac_platform_token(cls):
        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(
            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))

",python,python,0.0063357397439007,0.029192510817655868,0.0058917082178705235,0.00023910989207687956,0.0010110510274101553,0.00024995604009425145,0.9318411035224886,0.02218710756174211,0.0030517131767609116
"import requests
from bs4 import BeautifulSoup
import json

url = 'https://en.wikipedia.org/wiki/Bill_Gates'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

data = {
 'name': 'Bill Gates',
 'birth': soup.find_all('span', {'class': 'bday'})[0].text,
 'birth_location': soup.find_all('div', {'class': 'birthplace'})[0].text,
 'education': soup.find_all('span', {'class': 'education-degrees'})[0].text, 
 'alma_mater': soup.find_all('span', {'class': 'org'})[0].text
}

with open('bill_gates_data.json', 'w') as outfile:
 json.dump(data, outfile)",css,html,4.748427983765507e-06,0.42104979210004556,0.5769878073579723,0.0010053464578721814,1.4419207068994417e-06,6.515959185208625e-07,0.0006084509457059521,6.42134892425871e-05,0.0002775477045523404
"def compare_strings(first, second):
    return first == second

result = compare_strings('Apple', 'Orange')
print (result)",python,python,0.00022437374153644625,0.006224652445020941,0.002754334145362122,5.1244912950126656e-05,0.00020098945027667144,2.7915400674780043e-05,0.987889562125606,0.0021611008098391424,0.0004658269687336315
"from collections import Counter

def most_frequent_element(array):
  return Counter(array).most_common(1)[0][0]
  
# Driver code 
print(most_frequent_element([1, 3, 1, 4, 5, 3, 4, 3]))",python,python,0.07456774040148662,0.028878512853937402,0.011700995177235505,0.0020120830923193384,0.0019096892882795769,0.001252029086874839,0.8618524490502568,0.0026343002491080276,0.015192200800501968
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression

# read in the dataset
emails = pd.read_csv(""emails.csv"")

# split the emails into a training and testing set
X_train, X_test, y_train, y_test = train_test_split(emails[""message""], emails[""label""], test_size=0.2, random_state=0)

# extract features from the emails using a count vectorizer
vectorizer = CountVectorizer()
X_train_features = vectorizer.fit_transform(X_train)

# create and train a logistic regression model
model = LogisticRegression()
model.fit(X_train_features, y_train)

# test the model on the testing set
X_test_features = vectorizer.transform(X_test)
score = model.score(X_test_features, y_test)

print(""Test accuracy: "", score)",python,python,0.27109378443726706,0.18400406025880747,0.018760792187842226,9.31706543904372e-06,0.0003237636660894016,1.3045073434435695e-05,0.3993144650397333,3.112028617679849e-05,0.12644965198521008
"import re
import collections

def words(text): 
    return re.findall('[a-z]+', text.lower()) 

def train(features):
    model = collections.defaultdict(lambda: 1)
    for f in features:
        model[f] += 1
    return model

NWORDS = train(words(open('big.txt').read()))

def edits1(word):
    s = [(word[:i], word[i:]) for i in range(len(word) + 1)]
    deletes    = [a + b[1:] for a, b in s if b]
    transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]
    replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]
    inserts    = [a + c + b     for a, b in s for c in alphabet]
    return set(deletes + transposes + replaces + inserts)

def known_edits2(word):
    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)

def known(words): 
    return set(w for w in words if w in NWORDS)

def correct(word):
    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]
    return max(candidates, key=NWORDS.get)",python,matlab,0.010165572821587296,3.3859396641785425e-05,0.0010967632637785703,4.2496671123273705e-08,3.5603505181305385e-06,0.8660762026857919,0.12251098338077829,0.00010711187250280209,5.903731729999789e-06
"for x in range(3):
    print('\\    /' * x + '\\  ')",python,matlab,2.1370891400445182e-11,8.007936004238141e-13,6.832173677190107e-10,9.813795350342565e-13,6.166383762648635e-13,0.9982171889527836,0.0017828095830992661,7.273396179134729e-10,2.9790485620697413e-11
"import gzip
import os

# Walk through the source directory
for root, dirs, files in os.walk('example_dir'):
    # Gzip each file
    for file in files:
        with open(os.path.join(root, file), 'rb') as f_in:
            with gzip.open(os.path.join(root, file + '.gz'), 'wb') as f_out:
                f_out.writelines(f_in)",sql,sql,0.06513355912436246,0.024029876769065806,0.001113767204425612,3.8063849182696765e-06,0.0011961444557054587,0.0018510078768239112,0.006228294985975885,0.8477391997591016,0.052704343439621194
"def remove_duplicates(list1):
    # Function to remove duplicates from a list
    # convert the list into a set of unique elements
    list_unique = set(list1)
 
    # convert the set to a list
    list_unique = list(list_unique)
    return list_unique
 
# input list
list1 = [1, 4, 2, 6, 4, 1, 2]
 
# remove duplicates from the list
list1 = remove_duplicates(list1)
 
# print the new list
print(list1)",python,python,0.016727469751986933,0.027251334075438914,0.008046246053329202,8.83731694467367e-05,0.26983888223561886,0.0008364521930150647,0.4545500862829406,0.15949510483956406,0.06316605139865959
"def get_even_sum(nums):
    even_sum = 0
    for num in nums:
        if num % 2 == 0:
            even_sum += num
    return even_sum

nums = [2, 3, 6, 7, 13, 14]  
even_sum = get_even_sum(nums)
print(even_sum)",python,matlab,9.341491656157446e-05,2.876619828283875e-06,0.0001734954610634449,1.510251008633655e-05,4.8612579453679444e-05,0.94151999012735,0.05795277339411943,6.321916270912366e-05,0.0001305152288279065
"def generate_spiral_matrix(m, n):
    matrix = []
    r = 0
    c = 0
    while (r < m and c < n):
        # list to add elements of the first row
        for i in range(c, n): 
            matrix.append(r * n + i + 1) 
        r += 1
  
        # list to add elements of the last column
        for i in range(r, m): 
            matrix.append(i * n + n - 1 + 1)
        n = n - 1
  
        # if last row exist
        if ( r < m): 
                # list to add elements of the last row
                for i in range(n - 1, c - 1, -1): 
                    matrix.append((m - 1) * n + i + 1) 
                m -= 1
          
        # if first column exits
        if (c < n): 
            # list to add elements of the first column
            for i in range(m - 1, r - 1, -1): 
                matrix.append(i * n + c + 1) 
            c += 1

    return matrix",python,python,0.00037621320110863774,0.00022087615650994395,0.014565144505818417,0.026790768092804864,0.004990971986620638,0.3381008026615137,0.4398179070245272,0.020220146379751967,0.15491716999134447
"def createSubstrings(string): 
    length = len(string) 
    subString = []
    
    # Loops through the string  
    # and the length of substring to be formed 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            subString.append(string[i:j]) 
  
    return subString",python,java,1.1881237576310007e-09,5.428968485301625e-06,1.4189540475318602e-06,0.7817237026959692,2.4710595033310585e-08,0.00039444344744361066,0.20329496019242882,0.009910754537422429,0.0046692653054842635
"def is_palindrome(list_of_strings):
  palindrome_list = [string for string in list_of_strings if string == string[::-1]]
  if palindrome_list:
    return True
  return False",python,java,2.141378479475464e-15,1.2923353158379322e-08,2.6329196354956137e-09,0.9999901111333087,1.6660843759048794e-17,6.915176608538231e-11,9.770657753397699e-06,1.0247323940507609e-07,1.1027183319672116e-10
"def convert_pascal_to_hyphen(string):
    output_string = """"
    for char in string:
        if char.isupper():
            output_string += ""-""+char.lower()
        else:
            output_string += char
    return output_string[1:]
    
convert_pascal_to_hyphen(""HelloWorld"")",python,python,2.5065047251507233e-05,0.010469785268353226,0.002598489945403429,0.15629515166092708,4.58737475687393e-06,0.0018914961449889496,0.8199211025242896,0.00793478786501803,0.0008595341690114372
"class Employee:
  def __init__(self, id, name):
    self.id = id
    self.name = name

  def get_id(self):
    return self.id

  def get_name(self):
    return self.name",python,python,0.00030577084708806443,0.0049533294593169675,0.2559317907992925,0.04946212027846693,4.491266011120052e-08,9.00733550090927e-07,0.6662749369909715,0.023006130281648652,6.497569700503802e-05
"def sum_of_numbers(n):
    return int(n * (n + 1) / 2)",python,java,7.737698596312308e-05,2.4777165594038722e-05,2.7361031227869345e-05,0.9930503217386973,1.1968647263402882e-05,9.086138401434801e-11,0.0067910394580079575,2.738332983517633e-06,1.4416549401095258e-05
"import numpy as np
from sklearn.linear_model import LinearRegression

features = [[15000, 'Ford', 'Focus', 5, 20000]]

model = LinearRegression()

# Train the model with the given data
model.fit(features, [14500])

# Define the predict function
def predict(price, make, model, age, distance):
    inputs = [[price, make, model, age, distance]]
    return model.predict(inputs)[0]
    
net_price = predict(15000, 'Ford', 'Focus', 5, 20000)
print(net_price)   #14500",python,bash,0.7524387859657635,0.0297259365203313,0.0006626751774406963,2.2939781458691437e-06,0.0007922404128759473,5.654037934774373e-06,0.21534930734726773,1.4893631704061678e-07,0.0010229576239231643
"def double(value): 
    return value * 2

def triple(value): 
    return value * 3

def quad(value):
    return value * 4

def calculate_value(n): 
    if n > 10: 
        return double(n) 
    elif n > 5: 
        return triple(n) 
    else: 
        return quad(n) 
    
print(calculate_value(-2))
print(calculate_value(8)) 
print(calculate_value(13))",python,matlab,3.1509385892332357e-05,0.020997530318683164,0.0004167054174231718,6.730847562314212e-06,2.5087752165732607e-05,0.9782281404239245,1.6409874011060823e-05,0.00023373409217158618,4.4151888166147376e-05
"def concatenate_string(string1, string2):
    return string1 + string2

string1 = ""Hello ""
string2 = ""World!""

concatenated_string = concatenate_string(string1, string2)
print(concatenated_string)",python,python,0.01445933418217682,0.0023891449852342208,0.0037763518140015834,7.840511543314048e-07,0.005981904964564206,0.0002003537093660226,0.970818684537798,0.000994908539086046,0.0013785332166186247
"import string 
  
def rot13_encode(plaintext, key): 
    ciphertext = """" 
    for char in plaintext: 
        if char in string.ascii_lowercase: 
            ciphertext += chr((ord(char) - key - 97) % 26 + 97)
        elif char in string.ascii_uppercase: 
            ciphertext += chr((ord(char) - key - 65) % 26 + 65) 
        else: 
            ciphertext += char 
    return ciphertext 
  
print(rot13_encode(""attack at dawn"", 13))",python,python,3.12348948165018e-05,0.01932450017894058,0.001746836215485093,0.03238012686519943,5.401685360183819e-06,0.0005398059445790352,0.9329700934916006,0.012612403164321708,0.00038959755969671176
"def isDivisible(a, b):
  return a % b == 0

print(isDivisible(number1, number2)) #True",python,python,0.0037799058557693886,0.011175126517782942,0.007437875031955926,0.00028078002757957546,0.0011465599378722923,0.0003594314862239796,0.9730761865158873,0.000667580547097928,0.0020765540798306213
"import random

number = random.randint(10, 20)
while (number == 14):
  number = random.randint(10, 20)

print(number)",python,python,6.503555763896812e-06,0.00023533125139638242,2.4231269069406603e-05,7.31647846782214e-07,3.404196691758712e-06,1.1239604420800576e-06,0.999627309415696,9.461021585309507e-05,6.7544872404605265e-06
"import random

# A standard deck of cards with 52 cards
deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A', 
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A',
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A',
        2, 3, 4, 5, 6, 7, 8, 9, 10, 
        'J', 'Q', 'K', 'A']

# Shuffle the deck
random.shuffle(deck)
print(deck)",python,python,0.003685378069346386,0.023152995254788252,0.009744572088186187,0.00036576860953865147,0.0052947057649348934,0.0014277862883241108,0.9409987489955043,0.0026664187683244226,0.012663626161052783
"import requests

def main():
    url = 'https://www.example.com'
    
    r = requests.get(url)
    if r.status_code == 200:
        content = r.content
        print(content)
    else:
        print(""Failed to fetch data."")

if __name__ == ""__main__"":
    main()",python,java,7.638202851708599e-19,2.0562546318350985e-05,7.043152237617107e-07,0.9999782656453392,1.6422680399246928e-09,1.5041248974339172e-10,2.4438905223620597e-07,2.2014475707500263e-07,1.1666288660323631e-09
"def find_longest_common_sequence(string1, string2):
 
    m = len(string1)
    n = len(string2)
 
    # Create a matrix to store results of subproblems
    dp = [[0] * (n+1) for i in range(m+1)]
 
    max_length = 0
 
    # Fill d[][] in bottom up manner
    for i in range(m):
        for j in range(n):
            # If A[i] == B[j], include the character
            #   and take diagonal path
            if string1[i] == string2[j]:
                dp[i+1][j+1] = dp[i][j] + 1
                max_length = max(max_length, dp[i+1][j+1])
            # If not same, take max from 3 adjacent cells
            else:
                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1], dp[i][j])
 
    return max_length

string1 = ""ABAZA""
string2 = ""BAZAC""

print(""Length of Longest Common Sequence:"", find_longest_common_sequence(string1, string2))",python,python,0.0005983347464268027,0.0005390805643735643,0.0010411368702112952,2.642932825882908e-05,0.0009940966559143388,0.034501396887506974,0.9358631241871272,0.02262283172344368,0.003813569036737298
"# Accepting user input
name = input(""Please enter your name: "")

# Printing out the user input
print(""Hello, "",  name, ""!"")",python,java,0.1170702605910029,0.008001831510793225,0.024693399754499096,0.6363291431616495,1.3651587930428051e-05,1.1974370644249163e-05,0.2131409277232541,0.00041208620163054655,0.0003267250985959734
"import requests
from bs4 import BeautifulSoup

url = 'https://en.wikipedia.org/wiki/Web_crawler'
request = requests.get(url)
soup = BeautifulSoup(request.content, 'html.parser')
for link in soup.find_all('a', href=True):
  print(link['href'])",python,css,2.588634567335827e-07,0.6515971810511971,0.33807120040344285,0.0015937788807698816,5.808345248016029e-05,0.0001539447202298438,0.00793585823130529,0.0005499505520387105,3.9743845079310636e-05
"def multiply_matrix(A, B):
    n = len(A)
    C = [[0] * n for _ in range(n)]
 
    for i in range(n):
        for j in range(n):
            for k in range(n):
                C[i][j] += A[i][k] * B[k][j]
    return C
 
A = [[1, 2],
     [3, 4]]
B = [[1, 2],
     [2, 3]]
 
print(multiply_matrix(A,B))",python,matlab,1.0167840512565642e-09,2.1582366495281963e-11,1.2931202789720673e-08,7.052855090195781e-11,3.291578548143269e-11,0.9942079305540561,0.005792040361129852,1.371283834499325e-08,1.2989621970137247e-09
"def neighbor_product(arr):
    # loop through array elements in reverse order
    for i in range(len(arr)-1, 0, -1):
        # check if element is odd
        if arr[i] % 2 == 1:
            # replace element with product of the previous and next neighbors
            arr[i] = arr[i-1] * arr[i+1]
    return arr

arr = [1, 3, 5, 7, 9, 11, 13]

updated_arr = neighbor_product(arr)
print(updated_arr)",python,matlab,3.427280438600041e-08,2.4399128805051044e-07,3.834327652629523e-08,2.181275096544145e-08,1.0865466379851564e-07,0.9957126515722637,0.004286384159730126,1.139221969791693e-09,5.160540006351311e-07
"import nltk
from nltk.classify import NaiveBayesClassifier

# Corpus of Train Data
train_data = [(""This is a great day for a walk."", 'positive'), 
              (""Today's forecast looks horrible"", 'negative'),
              (""The weather is so beautiful."", 'positive')] 

# Tokenize words
words_list = [word_tokenize(sent[0]) for sent in train_data]

# Build a list of words
all_words = []
for word_list in words_list:
    for word in word_list:
        all_words.append(word.lower())

# Get the Frequency Distribution of the words
all_words_unique = nltk.FreqDist(all_words)

# Move the features to the word list
word_features = list(all_words_unique.keys())

# Function to extract features
def extract_features(sentence):
    tokenize_words = word_tokenize(sentence)
    features = {}
    for word in word_features:
        features[word] = (word in tokens)
    return features

# Train the model
training_set = nltk.classify.apply_features(extract_features, train_data)
classifier = NaiveBayesClassifier.train(training_set)   

# Predictions
sentence = ""This is a great day for a walk.""
pred = classifier.classify(extract_features(sentence))
print (pred)",python,sql,0.028064796672739274,0.11481853946181012,0.022643756662289037,8.650478977199831e-05,0.0989182523268682,0.006261219520585479,0.24975387226066895,0.2673641929978169,0.21208886530744997
"import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

# load data
train_data = [{'text': 'good morning', 'sentiment': 'positive'}, {'text': 'bad news', 'sentiment': 'negative'}] 

# process data
X_train = np.array([x['text'] for x in train_data]) 
y_train = np.array([x['sentiment'] for x in train_data])

# tokenize words
tokenizer = Tokenizer(num_words=1000) 
tokenizer.fit_on_texts(X_train) 
X_train = tokenizer.texts_to_sequences(X_train) 
X_train = pad_sequences(X_train, padding='post', maxlen=64) 

# create model
model = Sequential([
 Embedding(input_dim=1000, output_dim=128, input_length=64), 
 Bidirectional(LSTM(128)), 
 Dense(128, activation='relu'), 
 Dense(2, activation='softmax') 
]) 

# compile model
model.compile(
 optimizer=Adam(learning_rate=0.001), 
 loss='sparse_categorical_crossentropy', 
 metrics=['accuracy']
)

# fit model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# evaluate
loss, accuracy = model.evaluate(X_train, y_train)
print('Accuracy: %f' % (accuracy*100))",css,python,0.44039984688329803,0.05887505411084042,0.024082018893485487,1.9107106333493577e-05,2.0171013301877117e-05,0.0023914763217225774,0.4574697600136496,6.650189038357707e-05,0.016676063766984994
"def is_perfect_number(num):
    divs = []
    for i in range(1,num):
        if num % i == 0:
            divs.append(i)
    if num == sum(divs):
        return True
    else:
        return False",python,matlab,7.460030830759977e-12,1.260944926442959e-15,3.301986936760546e-11,1.009480020998947e-12,6.146184147311126e-13,0.9999999996992794,2.547499265967207e-10,1.7068345760455702e-12,2.158532484105852e-12
"# Load required modules
import pandas as pd
from sklearn.pipeline import make_pipeline
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer

# Load spam emails
spam_df = pd.read_csv(""spam.csv"")

# Split into independent and dependent features
X = spam_df['Email']
y = spam_df['Label']

# Create a pipeline
model = make_pipeline(CountVectorizer(),
                      TfidfTransformer(),
                      MultinomialNB())

# Fit the pipeline
model.fit(X, y)

# Resize the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the model
model.fit(X_train, y_train)

# Generate predictions
y_pred = model.predict(X_test)

# Generate accuracy score
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_pred))",python,bash,0.9215092412416451,0.014198340228583194,0.0005968038783117316,7.370745631758486e-07,9.017881459228845e-06,1.5763255045300932e-06,0.06354511130104004,3.000939097711175e-08,0.00013914205950199708
"def find_element(inputlist, element):
    for i, num in enumerate(inputlist):
        if element == num:
            return i",python,matlab,1.5018068712970496e-11,6.009937726963292e-14,1.1235209431720798e-11,2.6467320039112984e-12,5.210482282520865e-12,0.9999999943956026,5.5499307231646565e-09,6.781423339316585e-15,2.0289129408260962e-11
"def isPrime(x): 
	if x > 1: 
		for i in range(2,x): 
			if (x % i) == 0: 
				return False
		else: 
			return True
	else: 
		return False

num = 21
if(isPrime(num)) : 
	print(num, ""is a prime number"") 
else : 
	print(num, ""is a composite number"")",python,matlab,1.896176042386572e-08,4.6291238686387473e-10,1.3607454511409745e-07,1.8953313527156223e-09,2.925625007021131e-10,0.9970876897720253,0.002912102419736105,4.236668046139624e-08,7.754446211201772e-09
"def split_into_pairs(inputString):
    resultList = []
    counter = 0
    
    while counter < len(inputString):
        resultList.append(inputString[counter:counter + 2])
        counter += 2
    
    return resultList

pairs = split_into_pairs(""abcd"")

print(pairs)",python,python,0.003801994050330741,0.018346720151706988,0.02670658487944629,0.0010080049050811958,0.004138957192381923,0.008528803276563112,0.931345046074037,0.0012251293968685356,0.00489876007358421
"def add(x, y):
    return x + y",python,java,4.644166295168704e-05,3.0373726174217555e-05,0.0001836470763826539,0.7161181174906789,3.5323731553628805e-05,1.1044216229316879e-10,0.2834323043138984,0.00013554546581326585,1.8246422105049435e-05
"def print_fibonacci_sequence(n):
    # Initialize the first two numbers of the sequence
    num1 = 0
    num2 = 1
    # Use a for loop to print the the sequence in the right order
    for i in range(n):
        print(num1, end=' ')
        num3 = num1 + num2
        num1 = num2
        num2 = num3

# Test
print_fibonacci_sequence(10)",python,python,0.00011954630633170063,0.00013985059958881844,0.0005550315426879441,0.0014515285429297516,0.0031858488378158655,1.14322803671138e-06,0.9869824165874398,0.0011987353295146153,0.006365899025654776
"def pascal_triangle(n): 
    trow = [1] 
    y = [0] 
    for x in range(max(n, 0)): 
        print(trow) 
        trow=[l+r for l,r in zip(trow + y, y + trow)] 
    return n>=1

pascal_triangle(5)",python,matlab,1.2554335264806113e-05,1.1899921506801552e-05,7.881121703314436e-05,1.2919076974392621e-06,3.346799416810989e-06,0.764963303481401,0.23484866350117375,6.149048893541978e-05,1.863834757098104e-05
"class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)",python,python,1.1254747055251987e-05,0.005409334492987365,0.01785956760234939,7.356151706369012e-07,0.00010449325775886203,2.1878940066302704e-07,0.8047933542000973,0.17181801734174082,3.023953439666297e-06
"def factorial(num): 
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

num = 5
fact = factorial(num)
print(""Factorial of"", num,"" is"", fact)",python,matlab,3.892722045749194e-07,1.2399321493223745e-10,7.856742579744922e-07,1.553200519156884e-07,2.2201399824467453e-07,0.9988190132548308,0.0011766087460605107,3.744793765791292e-07,2.4511152262024427e-06
"def levenshtein_distance(str1, str2):
    """"""
    Write a python program to calculate the Levenshtein distance, which is a 
    measure of similarity between two strings.
    """"""
    m = len(str1)
    n = len(str2)
    # Create a matrix to store edit distances
    edit_distance = [[0 for i in range(n+1)] for j in range(m+1)]

    # Fill the matrix
    for i in range(m+1):
        for j in range(n+1):
            if i == 0:
                edit_distance[i][j] = j 
            elif j == 0:
                edit_distance[i][j] = i
            elif str1[i-1] == str2[j-1]:
                edit_distance[i][j] = edit_distance[i-1][j-1]
            else:
                edit_distance[i][j] = 1 + min(edit_distance[i-1][j], edit_distance[i][j-1], edit_distance[i-1][j-1])
    # Return the last element of the matrix
    return edit_distance[m][n]",python,python,0.02158369571903036,0.00014831717681086103,0.00010265063210126265,4.163880886241183e-05,0.011441829036705627,0.041483672038819995,0.9152681144781077,0.0021522109377065386,0.007777871171855163
"def sum_integers(a, b): 
    return a + b 
    
# Driver Program 
a = 4
b = 5

print(""Sum of {} and {} is: {}"".format(a, b, sum_integers(a, b)))",python,java,0.041020255604882025,4.560712026998833e-05,3.3253617368807296e-05,0.9190625907146003,0.0005152989416816092,2.5330976019468002e-11,0.03915239701749659,6.698821071574969e-05,0.00010360874765387727
"from datetime import datetime

def find_difference_in_days(date1, date2):
    date1 = datetime.strptime(date1, '%Y-%m-%d')
    date2 = datetime.strptime(date2, '%Y-%m-%d')
    return abs((date2 - date1).days)",python,python,0.006328419086255633,0.01835370868925059,0.007961883311125462,0.0007801053131921688,0.002321395467703225,0.001620214998578987,0.9565885161016859,0.0013281550098605708,0.004717602022347439
"import random

#create cards list
cards = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H""]*2

#shuffle cards
random.shuffle(cards)

#create a shuffled cards instance
cards_hand = set(cards)

#while loop 
while len(cards_hand) > 0:
    #my hand
    my_hand = set(random.sample(cards_hand, 2))
    #computer hand 
    comp_hand = set(random.sample(cards_hand, 2))

    #check if my hand and computer had matched 
    if my_hand == comp_hand:
        print(f""congratulation!!! you matched the cards.."")
    else:
        #break
        break

    #remove all cards from hand 
    cards_hand -= my_hand
    cards_hand -= comp_hand

#if the loop run out
if len(cards_hand) == 0:
    #print the result 
    print(""you won the game"")
else:
    print(""you lost the game"")",python,python,0.006637785866248643,0.0398149375020453,0.011880125668082695,0.0005941833079068171,0.003442382815287019,0.002941800331806989,0.6070128350216325,0.17031811714026834,0.15735783234672174
"command = input(""Please enter your command: "")
 
if command == ""Taking a break"":
 print(""Taking a five minute break"")
 # code to execute the taking a break command
else:
 print(""Invalid command"")",python,typescript,0.017997057771341193,0.02042548578583523,0.01598811732375864,0.000607079163401874,0.011658853689689507,0.008898068931735352,0.18747875598826844,0.024835911853714542,0.7121106694922552
"def calculateMedian(numbers):
    n = len(numbers)
    if n % 2 == 0:
        num1 = numbers[n//2]
        num2 = numbers[n//2 - 1]
        median = (num1 + num2)/2
    else: 
        median = numbers[n//2]
    return median
        
numbers = [2, 4, 3, 5, 7]
median = calculateMedian(numbers)
print(""Median of list is:"", median)",python,python,0.00010792450244191513,0.0004570955554439391,0.0006207035776234196,0.18660978793431734,0.010089977172473865,1.7169842853857717e-08,0.8014222946142324,0.00043794772710017906,0.00025425174652400645
"def compress(s): 
    # Initialize results 
    output = """" 
  
    # Initialize count 
    count = 1
  
    # Traverse the string 
    for i in range(len(s)): 
          
        # If the current character is same 
        # as next one, increment its count 
        if (i+1 < len(s) and s[i] == s[i+1]): 
            count += 1
          
        else: 
            # Append the count and character 
            outputo + = str(count) + s[i] 
          
            # Reset the  count  
            count = 1
          
    # Append the last obtained characters 
    # and their count 
    output += str(count) + s[i] 
  
    return output

s = ""aabbbbbbcccc""
print(compress(s))
# Output: 2a6b4c",python,python,0.0012777361934117818,0.006612951804620827,0.0010858728648791506,9.160669008546866e-05,6.293053493203187e-05,0.0007474360231482855,0.9768454563691711,0.002506496620212229,0.010769512899539218
"import numpy as np

def detect_outliers(data):
 q75, q25 = np.percentile(data, [75 ,25])
 iqr = q75 - q25
 
 cut_off = iqr * 1.5
 lower, upper = q25 - cut_off, q75 + cut_off
 
 outliers = [x for x in data if x < lower or x > upper]
 return outliers",python,python,0.009970211040931942,0.040617640213954836,0.04189552455351211,0.00035133453008849927,0.0010244407680204282,0.013716391063355513,0.8576237048260776,0.0015603595271463876,0.033240393476912655
"a, b = 0, 1
for i in range(10):
    print(a)
    a, b = b, a + b",python,matlab,5.9656415838442685e-12,9.24345959966392e-13,1.3906781818842273e-10,2.382126516031233e-13,1.6979731962244342e-13,0.9998352021961047,0.00016479765204655716,3.2524040295583e-14,5.450371823541461e-12
"num = int(input('Enter an integer: '))
factorial = 1

if num < 0:
   print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
   print(""The factorial of 0 is 1"")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print(""The factorial of"",num,""is"",factorial)",python,matlab,0.000598234842124226,2.1781944431174234e-06,0.0009366526453013412,0.0008022891640404109,0.0021235654836631573,0.5170768067804323,0.4737575994402147,0.0005965061031655568,0.004106167346614994
"class NaiveBayesClassifier:
    """"""
    A simple Naive Bayes classifier implementation
    """"""
    def __init__(self):
        self.classes = []
        self.word_counts = {}
        self.priors = {}

    def fit(self, X, y):
        """"""
        Train the classifier 
        X: List of documents
        y: List of labels
        """"""
        # compute class priors
        self.classes = list(set(y))
        for c in self.classes:
            self.priors[c] = (y.count(c) / len(y))

        # compute count of words
        for x, c in zip(X, y):
            words = x.split()
            for word in words:
                if (c, word) not in self.word_counts:
                    self.word_counts[(c, word)] = 0
                self.word_counts[(c, word)] += 1

    def predict(self, X):
        """"""
        Predict classes for a list of documents
        X: List of documents
        """"""
        pred_y = []
        for x in X:
            pred_classes = []
            # compute posterior for each class
            for c in self.classes:
                posterior = self.priors[c]
                for word in  x.split():
                    if (c, word) not in self.word_counts:
                        count = 0
                    else:
                        count = self.word_counts[(c, word)]
                    posterior *= (count + 1) / (sum([self.word_counts[(c, w)] for w in self.word_counts if w[0] == c]) +  len(self.word_counts))
                pred_classes.append((c, posterior))
            # select the most probable class
            p = max(pred_classes, key=lambda x: x[1])
            pred_y.append(p[0])

        return pred_y",sql,sql,0.0001213456343178834,0.004253113760437085,0.00897961934035174,1.1681656622069251e-06,0.00012122937354244898,0.003489871225924185,0.06453179829978138,0.918026122145859,0.0004757320541240358
"import unittest 

class TestMyClassOrFunction(unittest.TestCase):

    def test_something(self):
        # Setup 
        # Code to set up a value to test 
        
        # Exercise 
        # Code for the function to test 
        result = function_to_test(*args) 
        
        # Verify
        self.assertEqual(result, expected_result) 

if __name__ == ""__main__"":
    unittest.main()",python,typescript,0.004462756812284742,0.0033494356671529457,0.0021719069575045335,8.218077968408882e-05,0.07614176477701741,9.988356374367406e-05,0.0012294890616563617,0.04289356935516644,0.8695690130257899
"def compute_sum(array):
    sum = 0
    for element in array:
        sum += element
    return sum
    
if __name__ == '__main__':
    array = [1, 2, 3, 4, 5]
    print(compute_sum(array))",python,matlab,1.6550840548487892e-07,7.538440434030814e-08,7.866666473612948e-08,9.872342607086125e-08,1.2730271941656383e-08,0.9999995158637155,1.8429856882782844e-08,4.121571737013829e-10,3.4281097830865195e-08
"import random

# Create the list of possible values
cards = [""A"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K""] * 4

# Shuffle the cards
random.shuffle(cards)

# Create a variable to store the user's score
user_score = 0

# Initialize the game
# The user is shown a card, and asked if they remember what it is
while cards:
    current_card = cards.pop()
    print(f""What is the card? {current_card}"")
    answer = input()

    # Check the user's answer
    if answer == current_card:
        user_score += 1
        print(""Correct!"")
    else:
        print(""Incorrect."")
        break

print(f""Game over! Your score is {user_score}"")",python,typescript,0.00028583438549012886,0.01744633253194607,0.0005990313708738247,1.4164164584060785e-05,0.006661053620531078,7.229242200279997e-05,0.010801349144831964,0.007078840587493763,0.9570411017722462
"import random

# Create a list of 10 random numbers between 0 and 100
random_list = []
for i in range(10):
    random_list.append(random.randint(0,100))

# Print the list
print(random_list)",python,python,0.0003282019803220697,0.0012050692717970235,0.0011060466267567742,5.537853070294666e-05,0.0015951749709240725,0.021156057330749756,0.9661234548010983,0.0027771667949469097,0.005653449692702287
"import os
import dialogflow_v2 as dialogflow
from google.api_core.exceptions import InvalidArgument

os.environ[""GOOGLE_APPLICATION_CREDENTIALS""] = 'PATH_TO_CREDENTIALS_FILE'

DIALOGFLOW_PROJECT_ID = 'YOUR_PROJECT_ID'
DIALOGFLOW_LANGUAGE_CODE = 'en-us'
GOOGLE_APPLICATION_CREDENTIALS = 'PATH_TO_CREDENTIALS_FILE'
SESSION_ID = 'current-user-id'

def detect_intent_from_text(text, session_id, language_code=DIALOGFLOW_LANGUAGE_CODE):
 session_client = dialogflow.SessionsClient()
 session = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id)
 text_input = dialogflow.types.TextInput(text=text, language_code=language_code)
 query_input = dialogflow.types.QueryInput(text=text_input)
 try:
 response = session_client.detect_intent(session=session, query_input=query_input)
 return response.query_result
 except InvalidArgument:
 raise

# Create an intent in DialogFlow    
def intent_create():
 intents_client = dialogflow.IntentsClient()
 parent = intents_client.project_agent_path(DIALOGFLOW_PROJECT_ID)
 training_phrases = [
 dialogflow.types.Intent.TrainingPhrase(parts=[
 dialogflow.types.Intent.TrainingPhrase.Part(text='What is the weather like?'),
 ]),
]

message_text = dialogflow.types.Intent.Message.Text(text=['That\'s a great question!'])

response = intents_client.create_intent(
 parent,
 intent_name='[INTENT_NAME]',
 training_phrases=training_phrases,
 message=message_text
).per_response

# Retrieve a response to a user's query
query = 'What is the weather like in London?'
response = detect_intent_from_text(query, SESSION_ID)
print('Query text: {}'.format(response.query_text))
print('Detected intent: {} (confidence: {})\n'.format(
 response.intent.display_name, response.intent_detection_confidence))
print('Fulfillment text: {}'.format(response.fulfillment_text))",python,css,0.0015887049860682104,0.8036167764122348,0.0059905637934167325,4.537928658042747e-05,0.0009865033958981998,0.00037125954153250995,0.12004872528097069,0.005601266126463424,0.061750821176835086
"import smtplib

def send_notification(email):
    '''This function will send automated email notifications to customers when their orders have been delivered'''
    sender = eamil@example.com
    receiver = email
    message = f""Your order has been delivered. Thank you for choosing us. ""
    try:
        smtpObj = smtplib.SMTP('smtp.example.com', 587)
        smtpObj.login('email@example.com', 'password')
        smtpObj.sendmail(sender, receiver, message)
        print('Notification sent successfully')
    except Exception as e:
        print('Could not send notification.')
        print(e)",python,java,8.364354147536992e-11,0.0011777054777910047,0.00048683226863123887,0.9972336577651273,2.6441079211774787e-05,6.85246190428013e-07,0.0009706402025634963,6.838548933008225e-05,3.565238751099276e-05
"list.insert(index, item)",sql,html,0.02452954658066661,0.004235889170591528,0.45024822378621326,0.0005390051769351086,0.3024453284704353,0.006758316609003059,0.17139531058346502,0.037177844942121493,0.0026705346805686214
"import random

def randomize(arr):
  random.shuffle(arr)
  return arr",python,python,0.00014490337435534055,0.0004534344751566172,0.00010404856261012425,9.34870142859301e-06,3.9162549585602066e-05,0.0032182702966877816,0.9952592358440391,0.0007056574006774588,6.593879545950213e-05
"class Queue(object):
 def __init__(self):
  self.items = []

 def isEmpty(self):
  return self.items == []

 def enqueue(self, item):
  self.items.insert(0, item)

 def dequeue(self):
  return self.items.pop()

 def size(self):
  return len(self.items)",sql,python,1.0018344262296111e-05,0.0030634077270092477,0.0169452433209369,9.167122720492585e-07,0.00011039916967872932,1.0644627805918648e-07,0.5055926199936236,0.47427219295859996,5.095327339236724e-06
"def remove(arr, index): 
  
      # If the array is empty or index is not in array range 
      if len(arr) == 0 or index >= len(arr): 
          return arr 
  
      # Remove the element from the array 
      tempArr = arr[:index] + arr[index+1:] 
              
      return tempArr",python,matlab,0.0042118785180832756,2.0581289610905656e-05,0.0001328771576611119,1.649438648157808e-06,0.000472177120848945,0.9932762962035154,0.0016332443322981704,2.274075483896615e-07,0.000251068531785672
"# Function to find the maximum element in an array of integers
def findMax(arr): 
    maxEle = arr[0] 
    
    # Iterate through the array and find the maximum element 
    for i in range(1, len(arr)): 
        if arr[i] > maxEle: 
            maxEle = arr[i] 
    
    return maxEle 

# Driver code 
arr = [3, 17, 5, 19, 10] 
maxEle = findMax(arr) 

print(""The maximum element in the given array is:"", maxEle)",python,matlab,3.971586911842819e-07,4.2324483938591075e-07,9.882937467199229e-08,2.2789026980862894e-08,1.8776895335060206e-05,0.9994328371436585,0.00046671284093930575,1.1229466002736221e-09,8.072997518822193e-05
"def count_occurrence(string, character):
    count = 0
    for c in string:
        if c == character:
            count += 1
    return count",python,java,4.2611449602306565e-08,0.0007481656200764659,6.716691190343234e-05,0.6139703546953383,2.6189571073524277e-09,0.00016236462869136974,0.38304496136626376,0.00198619209491686,2.0749452403118474e-05
"import random

def generate_array_with_random_numbers(n, seed):
 random.seed(seed)
 return [random.randint(0, 100) for _ in range(n)]

n = 10
seed = 42
array = generate_array_with_random_numbers(n, seed)

print(array)
# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]",python,matlab,0.03248397613781814,0.004285380152616963,0.004157376701004641,8.546684795727147e-05,0.0004996656448538892,0.8068804796153816,0.14926713677342318,0.0015587790319951023,0.0007817390949491352
"dict1 = dict(zip(list1, list2)) 
print(dict1)",python,python,0.0009033189367888882,0.4317393589368679,0.004915804637479979,0.0004601253537106058,0.0015753607607383502,0.0009325669763147253,0.5546655329610309,0.001472813435495972,0.0033351180015727304
"if __name__ == '__main__':
    print('Hello World')",python,bash,0.9962500950842663,2.18631934676316e-06,7.361330812739089e-06,2.456318576840611e-22,0.0004369962072408918,3.4494407654652157e-07,0.0033022283711080075,7.10024410302372e-07,7.77187383485439e-08
"# Function to find the maximum and minimum of a list
def find_max_min(nums):
    max = nums[0]
    min = nums[0]
    for num in nums:
        if num > max:
            max = num
        if num < min:
            min = num
    return (max, min)

# Test program
nums = [3, 2, 8, 9, 5]
max, min = find_max_min(nums)
print('Maximum:', max)
print('Minimum:', min)",python,matlab,0.0006136728249913897,3.044364892796159e-06,0.0003517773325610808,7.117840525587166e-06,0.004268360958604456,0.6507202399072607,0.342941834247208,0.0006855773013206486,0.00040837522263530043
"# Print pattern
for i in range(1, 6):
 for j in range(0, i):
 print(""* "", end="""")
 print()

# Output
# * 
# * * 
# * * * 
# * * * * 
# * * * * *",python,python,2.8839782143518557e-07,1.6336540151585415e-08,3.1788574678114827e-06,1.48661634821714e-09,2.4527168566445905e-09,0.03160699911245188,0.9683890832433671,4.2302128208998987e-07,7.091736261964282e-09
"from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/users', methods=['GET', 'POST'])
def user_data():
 if request.method == 'GET':
 # Retrieve user data from the database
 return jsonify({'users': []})

 if request.method == 'POST':
 # Store user data in the database
 return jsonify({'message': 'success'})

if __name__ == '__main__':
 app.run(debug=True)",css,css,0.024531496540267674,0.9685088351400659,0.00011353141481657838,1.5114860141901948e-05,0.00018820816224779317,6.850934218625486e-06,0.0017775645052969758,0.004562730588897505,0.0002956678540471436
"import numpy as np
from keras.models import Sequential
from keras.layers import Embedding, Dense, LSTM

# For text data preprocessing
from keras.preprocessing.text import Tokenizer

# For splitting the data into train, test and validation sets
from sklearn.model_selection import train_test_split

# Initialize the tokenizer 
tokenizer = Tokenizer(num_words=None, lower=True)

# Tokenize the text data
tokenizer.fit_on_texts(tweets_data)

# Generate sequence data
sequences = tokenizer.texts_to_sequences(tweets_data)

# Get the max_length of the sequences
max_length = max([len(seq) for seq in sequences])

# Pad sequences
padded_seq = pad_sequences(sequences, maxlen=max_length, padding='post')

# Split data into train, test and validation sets
X_train, X_test, y_train, y_test = train_test_split(padded_seq, 
                                                    target, 
                                                    test_size=0.2,
                                                    random_state=42)

# Define the model
model = Sequential()
model.add(Embedding(vocab_size, 64, input_length=max_length))
model.add(LSTM(64))
model.add(Dense(vocab_size, activation='softmax'))

# Compile and fit the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=4, validation_data=(X_test,y_test))",python,bash,0.5551601336476184,0.03152442575815441,0.01252672897499837,3.1467374735136946e-05,9.213033266929504e-05,3.268094426416356e-06,0.21750487207876085,2.9875971457988476e-05,0.18312709776717906
"def convertFahrenheitToCelsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5/9
    print(""{}°F is {}°C"".format(fahrenheit,celsius))

convertFahrenheitToCelsius(100)",python,python,0.09230633605017032,0.136345567216466,0.023342928229449365,0.0033719345668389213,0.03312817800845039,0.007854577737423318,0.6683261440117707,0.0051195362439145535,0.030204797935516357
"from bs4 import BeautifulSoup

html_doc = """"""
<div>
	<p>This is some text.</p>
	<p>This is another text.</p>
	<div>
		<span>Some more text.</span>
	</div>
</div>
""""""

soup = BeautifulSoup(html_doc)

text = soup.get_text()

# Output
# This is some text.
# This is another text.
# Some more text.",html,html,2.1840549597113427e-06,2.3883587622297376e-07,0.999947245743569,1.2598396510933764e-06,2.2200012082132586e-07,6.107674880617278e-08,4.944609329384217e-06,2.7367897398635767e-06,4.110705000511729e-05
"def split_equal_sum(arr):
    n = len(arr) 
    leftsum = 0
    rightsum = sum(arr)
    
    for i in range(n): 
        rightsum -= arr[i]
        if leftsum == rightsum:
            return True 
        leftsum += arr[i] 
    return False",python,matlab,1.2582259802424898e-09,1.615075815092493e-09,4.061083732502095e-09,8.955425116987008e-10,7.427893221852992e-11,0.9992718551176172,0.0007281364422911929,1.99167307555348e-11,5.159680233507203e-10
"class Phone:
  def __init__(self, name):
    self.name = name
    self.owner = None

  def assign_owner(self, owner):
    self.owner = owner

  def use(self):
    print(f""{self.owner.name} is using {self.name}"")

class Person:
  def __init__(self, name):
    self.name = name
    self.phone = None

  def assign_phone(self, phone):
    self.phone = phone
    self.phone.owner = self

  def use_phone(self):
    if self.phone is not None:
      self.phone.use()",python,python,0.0008419272153748146,0.011216519660548055,0.06310776758535382,0.035332392586895876,4.333319693604674e-06,1.840539264788153e-05,0.7643788105444161,0.12419472816217882,0.0009051155328907884
"#!/usr/bin/env python
# coding: utf-8
import os
import re
import requests

from datetime import datetime
from bs4 import BeautifulSoup
from logya.core import Logya
from logya.path import slugify, target_file
from logya.writer import encode_content, write


logya = Logya()
logya.init_env()

url = 'https://en.wikipedia.org/wiki/Bodyweight_exercise'
html = requests.get(url).text
soup = BeautifulSoup(html, 'lxml')

replacements = {
    'bams': 'bam',
    'bodybuilders': 'bodybuilder',
    'boots': 'boot',
    'chairs': 'chair',
    'climbers': 'climber',
    'crosses': 'cross',
    'curls': 'curl',
    'darlings': 'darling',
    'dips': 'dip',
    'dogs': 'dog',
    'extensions': 'extension',
    'humpers': 'humper',
    'ins': 'in',
    'kicks': 'kick',
    'knives': 'knife',
    'lifts': 'lift',
    'little piggies': '3 little pigs',
    'lunges': 'lunge',
    'maybes': 'maybe',
    'mikes': 'mike',
    'mornings': 'morning',
    'offs': 'off',
    'plunges': 'plunge',
    'push exercises': 'push',
    'raises': 'raise',
    'rotations': 'rotation',
    'scissors': 'scissor',
    'spidermans': 'spiderman',
    'supermans': 'superman',
    'swimmers': 'swimmer',
    'squats': 'squat',
    'ups': 'up'
}

resources = '## Resources\n\n* [Wikipedia: Bodyweight exercise]({})'.format(url)


def canonical_name(name):
    name = name.strip().lower()
    if name.startswith('full body'):
        return ''

    for source, target in replacements.items():
        name = re.sub(r'\b{}\b'.format(source), target, name)
    return name.title()


def clean_text(text):
    return text.replace('[citation needed]', '').strip()


# Only interested in TOC numbers 4 to 8.
tocnumbers = range(4, 9)

toc1_items = soup.find(id='toc').find_all(class_='toclevel-1')
groups = [i for i in toc1_items if int(i.find('a').find(class_='tocnumber').text) in tocnumbers]

assert len(groups) == len(tocnumbers)

# Assemble exercise documents
for group in groups:
    group_name = group.find('a').find(class_='toctext').text.strip()
    for item in group.find('ul').find_all('a'):
        href = item.attrs['href']
        heading = soup.find(id=href.lstrip('#')).parent
        name = canonical_name(item.find(class_='toctext').text)
        groups = [canonical_name(group_name)]
        body = []
        variants = []
        muscles = []

        for sibling in heading.find_next_siblings():
            if sibling.name == 'p':
                body.append(clean_text(sibling.text))
            elif sibling.name == 'dl':
                dth = sibling.find('dt').text.strip().lower()
                if dth == 'common variants':
                    variants = list(filter(None, [canonical_name(i.text) for i in sibling.find_all('dd') if i.text != 'none']))
                elif dth == 'muscle groups':
                    muscles = list(filter(None, [canonical_name(i.text) for i in sibling.find_all('dd')]))
            elif sibling.name == 'h3':
                break

        if body:
            body.append(resources)

        doc = {
            'created': datetime.now(),
            'description': body[0].split('. ')[0] + '.',
            'groups': groups,
            'muscles': muscles,
            'template': 'exercise.html',
            'title': name,
            'variants': variants
        }
        # Files shall be saved as md files, so calling write_content directly
        # is not possible as it would save as html.
        filename = target_file(logya.dir_content, '/exercise/{}.md'.format(slugify(name)))
        if not os.path.exists(filename):
            write(filename, encode_content(doc, '\n\n'.join(body)))

        # Create stub files for variants
        for variant in variants:
            filename = target_file(logya.dir_content, '/exercise/{}.md'.format(slugify(variant)))
            if not os.path.exists(filename):
                ex_variants = list(set(variants).union(set([name])).difference(set([variant])))
                doc = {
                    'created': datetime.now(),
                    'description': '',
                    'groups': groups,
                    'muscles': muscles,
                    'template': 'exercise.html',
                    'title': variant,
                    'variants': ex_variants
                }
                write(filename, encode_content(doc, ''))


        # Create stub files for muscles
        for muscle in muscles:
            filename = target_file(logya.dir_content, '/muscle/{}.md'.format(slugify(muscle)))
            if not os.path.exists(filename):
                doc = {
                    'created': datetime.now(),
                    'description': '',
                    'template': 'muscle.html',
                    'title': muscle
                }
                write(filename, encode_content(doc, ''))",css,html,6.833569889516409e-07,0.0017510701353174118,0.9980150954267972,0.00018864967684297573,3.4927447432918907e-09,3.6655435593292803e-06,6.436563841383393e-06,1.80697140161385e-05,1.6326089891886465e-05
"def getAscii(string):
    result = []
    for char in string:
        result.append(ord(char))
    return result

print(getAscii('Hello'))
# Output: [72, 101, 108, 108, 111]",python,python,3.9579345737583706e-05,0.005492985092094775,0.001502437825265456,0.0071769538167882445,4.074009994008229e-06,0.008687466691273831,0.9696215362761267,0.00736813611519139,0.00010683082752828799
"total_age = 0

# open and read the file
with open('student.csv', 'r') as f:
    # read the file
    data = f.read().splitlines()

# loop through the rows
for row in data:
    # get the age from each row
    age = row.split(',')[1]
    # add the age to the total
    total_age = total_age + int(age)

# calculate the average age of all the students
avg_age = total_age / len(data)

# print the result
print('Average age of all students is: ', avg_age)",python,typescript,0.0019094143748259842,0.2199254957717763,0.0014408767766380802,4.535941716740945e-05,0.010008111961652369,4.6699203835325907e-07,0.1052203226574876,0.0046209736487520334,0.6568289783996618
"from datetime import date

def format_date(date_str, start_format, end_format):
    date_obj = date.strptime(date_str, start_format)
    return date_obj.strftime(end_format)",python,python,0.011028566431659281,0.04944136734017324,0.005641904561507159,0.0005235302179548388,0.0018045907700653026,0.0009431466487186275,0.9266300776439811,0.001409421828523696,0.002577394557416732
"def print_first_word(sentence):
    words = sentence.split(' ')
    print(words[0])

sentence = ""Hello, World!""
print_first_word(sentence)",python,python,0.06796978293850406,0.002269679921535004,0.008488598957643501,6.1601077837099885e-12,0.003943150410427541,4.919736666122975e-06,0.8581890100888865,0.059128823216010484,6.034724166791197e-06
"from collections import Counter

def count_letters(string):
    return Counter(string)

print(count_letters(""This is a sample string""))",python,java,2.595205690960315e-10,5.179656689272516e-06,1.1184217182856426e-06,0.9984958971069311,1.2473877071118554e-12,1.4224953547344414e-09,0.0014779847309922371,1.9660221359612824e-05,1.5817904624706867e-07
"import random 
import string 

length = 8
random_str = ''.join(random.choices(string.ascii_letters + string.digits, k = length)) 
print(random_str)",sql,sql,2.878177262152469e-10,9.673391349280833e-07,2.5955514898825367e-07,0.009705036492466252,1.1173670587437645e-10,1.4106817929105856e-09,3.518160520175747e-05,0.9902585157689787,3.7428833197699515e-08
"def int_to_binary(n):
    """""" Returns the binary representation of an integer. """"""
    return ""{0:b}"".format(n)",css,typescript,0.005292492206294874,0.0030655184078840687,0.010234025727225704,0.000297900881559367,0.21435203717727458,0.0004942727626518655,0.3167886888420554,4.2511975321683266e-05,0.4494325520197323
"# Merge two sorted lists
def merge_sorted_lists(lst1, lst2):
    i,j = 0, 0
    merged_list = []
    
    while i < len(lst1) and j < len(lst2):
        if lst1[i] < lst2[j]:
            merged_list.append(lst1[i])
            i += 1
        else:
            merged_list.append(lst2[j])
            j += 1
            
    merged_list += lst1[i:]
    merged_list += lst2[j:]
    
    return merged_list",python,python,0.012634353271971089,0.04313113635513081,0.033044819696540925,0.013268429294497107,0.005947147116958354,0.03924007526487712,0.7892425921338653,0.005851542272759992,0.057639904593399176
"from flask import Flask, request
import json

app = Flask(__name__)

@app.route(""/"", methods=['POST'])
def calc_sum_average():
  json_data = request.get_json()
  numbers = json_data.get('numbers')
  sum = 0
  for x in numbers:
    sum += x

  average = sum / float(len(numbers))
  result = {'sum' :sum, 'average': average}
  return json.dumps(result)
  
if __name__ == '__main__':
  app.run(debug=True)",css,css,0.0012815551628769571,0.9593475643116948,0.0011304445756254026,0.008443824349855503,0.00010353039086728298,1.6525210997680052e-06,0.027396106816305128,0.0022744762491819144,2.0845622493411202e-05
"class AddressBook:
 def __init__(self):
 self.people = {}

 def add_person(self, name):
 self.people[name] = { 'phone': None, 'email': None }
 
 def edit_person(self, name, phone=None, email=None):
 person = self.people[name]
 if phone: 
 person['phone'] = phone
 if email:
 person['email'] = email",css,python,0.0010392763679622,0.03397936906496706,0.019145604142923427,0.007782815586309417,1.3555812873849817e-05,0.00015192805394943917,0.9070139851055675,0.0303461791348271,0.0005272867306200633
"def findElement(arr, element):
    for i in range(0, len(arr)):
        if arr[i] == element:
            return True
    return False",python,matlab,1.5999688972561475e-10,9.210667693301597e-11,2.0288868310798063e-10,1.8421678421922547e-11,9.018286705668421e-12,0.9999402643217602,5.973512212170753e-05,2.8395345122963494e-14,7.365745460293183e-11
"def generate_combinations(nums): 
    result = [] 
    for x in range(0, len(nums)): 
        for y in range(x + 1, len(nums)): 
            result.append([nums[x], nums[y]]) 
    return result 

nums = [1, 2, 3, 4]

result = generate_combinations(nums)

for item in result:
    print(item)

# output
[1, 2]
[1, 3]
[1, 4]
[2, 3]
[2, 4]
[3, 4]",python,python,3.8410580113748904e-07,1.213257489042723e-05,3.534158902868612e-06,1.7712563322387583e-08,3.597648378073266e-07,1.0017435403150992e-05,0.999968694798983,4.735478652997506e-06,1.2396996526104742e-07
"class Employee:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def set_age(self, age):
        self.age = age",python,python,1.150304189591136e-05,0.010900948788572892,0.01123228255946795,0.000642127108908551,1.9467176235536174e-08,2.1947892092208534e-07,0.9735446974148182,0.0036554438722743634,1.2758267964944954e-05
"from flask import Flask, render_template
import pymysql

app = Flask(__name__)

@app.route('/')
def index():
    # Create connection to database
    connection = pymysql.connect(host='localhost',
                                 port=3306,
                                 user='user',
                                 password='P@ssw0rd',
                                 db='db')
    # Get all users from database
    with connection.cursor() as cursor:
        query = 'SELECT * FROM users'
        cursor.execute(query)
        result = cursor.fetchall()
    # Close connection
    connection.close()
    return render_template('index.html', users=result)

if __name__ == '__main__':
    app.run(debug=True)",sql,sql,0.0003152575128511011,0.014115726751147927,0.021093077492343272,1.419349285181248e-06,5.583872667110543e-05,7.745593114779268e-06,0.003992615600067833,0.9584044659946837,0.0020138529798352017
"import scipy.optimize

# define the black box function
def black_box(x):
    return x ** 2 + 40

# set the initial parameters 
start = (0, 0)

# minimize the black box function
res = scipy.optimize.minimize(black_box, start, method=""L-BFGS-B"")

# print the result
print(res.x) # prints [0.]",python,javascript,0.005560883166118528,0.053820436006243935,0.0003932425705860924,4.903492406390573e-06,0.9254462622944846,1.6809402399796974e-06,0.013226817725452884,0.0010837646530583978,0.0004620091514091398
"def words_dict(string):
    """"""This function returns a dictionary with words as keys and their count as values.""""""
    words = string.split()
    word_dict = {}
    
    for word in words:
        if word in word_dict:
            word_dict[word] += 1
        else: 
            word_dict[word] = 1
    
    return word_dict",python,python,0.00023309837400137032,0.024158286698492785,0.1280544105421897,0.009333010190143145,3.1635470545187248e-06,0.0018301579630340882,0.7323175326408845,0.007209198354163384,0.09686114169003643
"def binary_search(arr,target):
  low = 0
  high = len(arr) - 1
  while low <= high: 
    mid = (low + high) // 2
    if arr[mid] == target:
      return mid
    elif arr[mid] < target: 
      low = mid + 1
    else: 
      high = mid - 1
  return -1

arr = [2, 3, 4, 10, 40]
target = 10
index = binary_search(arr, target)
if index != -1: 
    print(""Element is present at index"", index)
else: 
    print(""Element is not present in the array"")",python,python,0.00037392698657502736,0.0006268315659877374,0.00038480118274611836,3.832637765516259e-05,0.00028001622046522427,0.11288554049265312,0.885173139855298,1.98607345087087e-05,0.00021755658411070093
"def hanoi(n, source, spare, target):
    if n == 1:
        disk = source.pop(0)
        print(""Moving disk {0} from {1} to {2}"".format(disk[0], disk[1], target[1]))
        target.insert(0, disk)
    else:
        hanoi(n-1, source, target, spare)
        disk = source.pop(0)
        print(""Moving disk {0} from {1} to {2}"".format(disk[0], disk[1], target[1]))
        target.insert(0, disk)
        hanoi(n-1, spare, source, target)

n = 8
source = [(i, ""A"") for i in range(1, n+1)]
target = []
spare = []

hanoi(n, source, spare, target)",sql,python,0.005824491522357807,0.01683622292379447,0.01206177328123781,0.0006353898461072168,0.0022748129970424184,0.022503058874187024,0.9072176951920923,0.023450437117649946,0.009196118245531164
"# Python Function
def printChars(string): 
    # Iterate over the string 
    for i in range(len(string)):  
        print(string[i]) 
  
# Test
string = ""Hello World!""
printChars(string)",python,java,3.327750770642909e-11,5.591275045222845e-07,9.63796089563555e-07,0.9973987732320692,5.2244493231530744e-14,2.3439741312089333e-09,0.0022548399846454167,0.0003448051012601391,5.638112714502154e-08
"def objective_function(x):
 return x**2 + 6*x - 4

def find_local_minima(func):
 x = 0
 delta = 0.01

while True:
 x_new = x + delta
 if objective_function(x_new) < objective_function(x):
 x = x_new
 else:
 return x

print('The local minima is', find_local_minima(objective_function))",python,python,0.01569336074736946,0.026445714667173693,0.018125737258636088,0.0005926198819792172,0.0058730744973106794,0.0065429248941802805,0.9097455368607855,0.00642194576294306,0.010559085429622117
"import nltk

def classify_book(title):
    # Tokenize the words in the title
    tokens = nltk.word_tokenize(title)

    # Create the tagger
    pos_tag = nltk.pos_tag(tokens)

    # Check for words that are commonly used in fiction titles
    fiction_words = [""Novel"", ""Novella"", ""Mystery"", ""Fantasy"", ""Adventure"", ""Thriller"", ""Paranormal"", ""Romance""]
    has_fiction_word = any([word in fiction_words for word in tokens])

    if has_fiction_word:
        return 'Fiction'
    else:
        return 'Non-Fiction'",python,html,0.007265046380844347,0.041463626532778394,0.5293783455243297,4.644448142745657e-05,0.09344019997427701,0.022072857246428094,0.1194537386013498,0.09138784167194958,0.09549189958661565
"a = int(input(""Enter first value: ""))
b = int(input(""Enter second value: ""))
c = int(input(""Enter third value: ""))

average = (a + b + c) / 3
print(""The average is: "" + str(average))",python,java,0.002459350372335725,0.0018849477650737972,0.0017302643861181466,0.9933038403714202,0.000298725527080009,1.0370382456352363e-06,0.00020390871168548196,7.464366733072327e-05,4.328216071059069e-05
"import re

text = ""The websites I like to visit are https://www.google.com and https://www.facebook.com""

url_list = re.findall(r'(https?://\S+)', text)

print(url_list)",python,java,2.2171763941380504e-18,2.0186971620780595e-07,7.571527308261836e-08,0.9999975214757704,4.23743666756497e-09,3.278594670198485e-10,2.217635276137695e-07,2.3064596051293326e-08,1.951545820505376e-06
"def max_min(lst):
  return max(lst), min(lst)",python,python,4.21314524383059e-05,0.0002123662485634755,0.0001195152922868712,7.918072606573041e-06,2.376667684480728e-05,1.3913963792472072e-06,0.9994625558220754,7.63298948500113e-05,5.402514395522546e-05
"import json

data = '{""type"": ""error"", ""message"": ""An error occurred""}'

json_data = json.loads(data)
print(json_data[""type""]) # prints ""error""
print(json_data[""message""]) # prints ""An error occurred""",css,python,0.04774105756778218,0.17120720378315243,0.1419922576121743,3.379167444025992e-05,0.013476958597533156,0.0018164793593077534,0.4892899040392613,0.006223902657619978,0.1282184447087287
"import os

def delete_empty_dirs(path):
    for root, directories, files in os.walk(path):
        for directory in directories:
            joined_path = os.path.join(root, directory)
            try:
                os.rmdir(joined_path)
            except OSError:
                # Directory not empty
                pass",sql,sql,0.17476003682990565,0.03231968340462647,0.003796442107727034,4.409024387304334e-06,0.00081579974116536,0.006452282321999401,0.004928972521741703,0.7725346336747317,0.004387740373715368
"def exclude_number(n):
  return [i for i in range(0,n) if i < n]",python,matlab,1.3986317687876747e-10,4.2420615375031176e-12,1.0324376671032139e-09,6.769877311465626e-12,3.410422369119774e-12,0.9992483966787893,0.0007516009500081156,1.1111634350501675e-09,7.331587573058824e-11
"def bubble_sort(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-1-i):
            if arr[j] > arr[j+1]:
                arr[j],arr[j+1] = arr[j+1],arr[j]
    return arr",python,matlab,1.1161979201073238e-08,1.7421808589737333e-08,1.0987936686240079e-08,3.384447458173244e-09,2.512011733088468e-09,0.9926778070237622,0.007322133604364945,8.128048694575268e-10,1.3090884290128975e-08
"from sklearn.datasets import load_iris
from sklearn import tree
import pandas as pd

# Import dataset
data = load_iris()

# Split dataset into features and labels
X = data.data
y = data.target

# Train decision tree model
clf = tree.DecisionTreeClassifier()
clf.fit(X, y)

# Make predictions
prediction = clf.predict(X)

# Print accuracy and confusion matrix
print(f'Accuracy: {clf.score(X, y)}')
pd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted'])",python,bash,0.7624410957305188,0.09947386632058489,0.0007002768203148094,1.1032122560780353e-06,8.26816865910762e-06,4.919210653866361e-06,0.13690115719364482,1.3419940093055547e-08,0.00046929992342756765
"""""""Write Python script to replace all occurrences of a given letter in a string with another.""""""

# Take a string as an input
string = ""fortnite""

# Replace the target letter with the replacement letter
new_string = string.replace(""t"", ""l"")

# Print the new string
print(new_string)",python,java,3.8830772250163444e-08,8.580929045306541e-05,6.680006052801971e-05,0.9657901175083314,2.722606169344017e-10,5.497665367755802e-08,0.0023009942241320816,0.00014230687176269488,0.031613877965106035
"def anagram_permutation(string1, string2):
    if sorted(string1) == sorted(string2):
        print(""The strings are anagrams."")
    elif sorted(string1) == sorted(string2[::-1]):
        print(""The strings are permutations."")
    else:
        print(""The strings are neither anagrams nor permutations."")

anagram_permutation(""algorithm"", ""logarithm"")",python,python,0.003200213705644048,0.029104189454518623,0.002466842980809191,0.0001604154875226717,0.005801978896419248,0.0027987252844736896,0.8155647477687615,0.03790850237188217,0.10299438404996898
"def fibonacci(num):
 a, b = 0, 1
 for _ in range(num):
  a, b = b, a + b
 return a",python,matlab,3.1920702821112846e-12,1.5144362906874578e-17,2.0333111147279862e-11,4.4713609494602473e-13,3.829879188953255e-13,0.9999970404793459,2.9594858393878756e-06,7.00814497755336e-12,3.4511842926739383e-12
"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string",python,python,7.154517268715791e-06,0.0054431071103042735,0.0015409692192618028,0.22540694648743687,1.5780847311046687e-06,0.00028337584757526127,0.7526962533422479,0.013917373055249913,0.0007032423359242141
"def create_squares_list():
    squares_list = []
    for i in range(1, 101):
        squares_list.append(i**2)
    return squares_list",python,matlab,1.0961048032832085e-16,8.026134705922529e-24,1.0085458976311037e-15,1.4475398215308306e-17,7.299535510645501e-18,0.9999999999978417,2.1570192127585165e-12,1.8869682651803925e-16,5.538704520005079e-17
"from scipy.optimize import minimize
def f(x):
    return x[0]**2 + 4*x[1]**2

res = minimize(f, [3, -2], method='nelder-mead')

print(res.x)",python,python,0.005019652477719419,0.3455744101095859,0.003479483743223615,0.0022249605381970327,0.0019142145610459259,3.7128101549472066e-05,0.6387604067242473,0.0024266366673621966,0.0005631070770691001
"def solution(coefficients):
	# get the coefficients of the equations
	a = coefficients[0][0] 
	b = coefficients[0][1] 
	c = coefficients[0][2] 
	d = coefficients[1][0] 
	e = coefficients[1][1] 
	f = coefficients[1][2] 

	# solve for x and y
	y = (a*f - c*d)/(a*e - b*d) 
	x = (c*e - b*f)/(a*e - b*d) 

	# return the solutions
	return x, y


# example
solution([[1, 2, 8], [3, -4, -2]])",python,python,0.010548247603226132,0.059384922767070566,0.05276769998440853,0.012327943360188257,0.09016184317427545,0.0034427249862599104,0.5522166574611249,0.010351502981530212,0.20879845768191596
"import requests
from bs4 import BeautifulSoup

url = 'https://www.youtube.com/watch?v=YAOm5YBT-Tk'
r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

likes = int(soup.find(""button"", attrs={""title"":""I like this""}).span.text)
dislikes = int(soup.find(""button"", attrs={""title"":""I dislike this""}).span.text)
views = int(soup.find(""span"", attrs={""class"":""view-count""}).text.strip())

print('Likes: {}, Dislikes: {}, Views: {}'.format(likes, dislikes, views))",css,java,1.2725220241810814e-09,0.0021193836991546663,0.002213344712146643,0.9956455454568931,6.032729538983751e-08,4.190448649271534e-11,1.8210498304652034e-05,6.49901117886304e-07,2.8040906608767257e-06
"def nthFibDivisibleBy3(n): 
    
    prev, curr = 0, 1
    i = 2
  
    while(i < n + 1):
 
        prev, curr = curr, prev + curr
  
        if curr % 3 == 0:
            nth = curr
        i+=1
  
    return nth",python,python,0.01553006782702465,0.022556566176714483,0.026035124693882153,0.004786103079249879,0.010460819918383636,0.03313456566757171,0.8553402248565427,0.0078698066145741,0.024286721166056797
"def increment(x): 
    return x + 1",python,python,0.0011085565934961458,0.004012796895103006,0.00375304235318577,0.0002770406127048949,0.000808155263109161,0.00012257128158757092,0.9877545024688245,0.000871842155178641,0.0012914923768103292
"class Student:
    def __init__(self, firstName, lastName, age):
        self.firstName = firstName
        self.lastName = lastName
        self.age = age",python,python,0.00048609317603302073,0.16184044985341547,0.08254187280105718,6.74487223411957e-05,0.0001163673813793933,0.00010563689594800673,0.7289850866453881,0.022061482025117353,0.0037955624993202598
"int_list = []

def add_element_to_list(element):
    int_list.append(element);

def remove_element_from_list(element):
    int_list.remove(element);",python,matlab,1.0700105096319223e-05,1.1614172360890891e-05,2.5333753728947507e-06,1.6047090822173984e-06,1.9358194848266755e-06,0.9993726640085474,0.0005882841298912037,9.98666946698857e-09,1.0653693494564556e-05
"import requests

API_ENDPOINT = 'https://imdb-api.com/'

# Sending get request and saving the response as response object
resp = requests.get(API_ENDPOINT + 'movie/{' + 'release_date:2020%2Creview:9:10' + '}')

# Extracting data in json format
data = resp.json()

# Printing the output
print(data)",css,css,3.9540837515398175e-06,0.9767163158410368,0.0002458528050513795,5.171804749028986e-05,1.8260509967757047e-05,7.80649317771898e-06,0.009292284086128545,4.493330537867491e-05,0.01361887482801727
"def sum_list(list):
 if not list:
  return 0

 return list[0] + sum_list(list[1:])",python,matlab,0.0045790665477455205,0.01053304753534265,0.017440537577267563,0.0008647259365954006,0.006378916176931076,0.4417208940047846,0.40456705955104144,0.10447944996224312,0.009436302708048511
"""""""
Write a Python program to parse a JSON data and print the values
""""""

import json

# Load the input data as a json string
data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'

# Parse the json string into a dictionary
parsed_data = json.loads(data)

# Print out the values
for key, value in parsed_data.items():
    print(f'{key}: {value}')",css,css,1.6480864047127655e-06,0.9999832457599525,2.6255387103889954e-06,3.7904223193956113e-06,1.3327535569442072e-09,2.393166169618466e-08,9.669292725455068e-08,5.820239406701459e-07,7.986211329803986e-06
"import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Create a data frame from the input data
df = pd.read_csv(""emails.csv"")
# Extract features and outputs
X = df['content'].values
y = df['label'].values
# Split the dataset into train & test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
# Count vectorizer
vectorizer = CountVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)
# Create & fit the model
model = MultinomialNB()
model.fit(X_train, y_train)
# Test the model
score = model.score(X_test, y_test)
print(score)",python,python,0.38069277649343713,0.22032158138953783,0.008154150505970395,2.048332069742334e-06,1.927658351917778e-05,3.6347449315961936e-06,0.3874902371755005,5.614841930131339e-06,0.003310679933103393
"class Sentence:
  def __init__(self, text):
    self.text = text
    self.words = self.text.split()
    
  def get_num_words(self):
    return len(self.words)",python,python,1.29355939033793e-05,0.0043473721282760195,0.004186051648949985,1.0679846333330513e-06,5.396321338282787e-06,3.8851052437296404e-07,0.5513885471577831,0.4399697286514794,8.851200311216192e-05
"def encrypt(message): 
 encrypted_message = """" 
 for character in message: 
 # increment the character number to get its encrypted form 
 encrypted_message += chr(ord(character) + 2) 
 return encrypted_message 
 
if __name__ == ""__main__"": 
 message = ""Hello World"" 
 encrypted_message = encrypt(message) 
 print(encrypted_message) 
 
 output:
 Jgnnq Yqtnf",python,python,0.03167328043520273,0.0447362912850017,0.017313769195434977,3.428501163554176e-07,0.012050693662805933,0.0018852682271251109,0.8757241564272341,0.013170188610980014,0.0034460093060991034
"# Define a function to find the paths from a given start point to end point
def maze_search(maze, start_point, end_point):
  # Get the size of the maze
  row_count = len(maze)
  col_count = len(maze[0])

  # Reject invalid start and end_points
  if start_point[0] < 0 or start_point[0] >= row_count or start_point[1] < 0 or start_point[1] >= col_count:
    return 'Invalid start point'
  if end_point[0] < 0 or end_point[0] >= row_count or end_point[1] < 0 or end_point[1] >= col_count:
    return 'Invalid end point'

  # Setup the stack for depth first search
  stack = [start_point]
  visited = set()

  while stack:
    # Take the last point from the stack and check if it is the end_point
    current_point = stack[-1]
    if current_point == end_point:
      break

    # Check surrounding points
    possible_points = [(current_point[0]+1, current_point[1]),
                       (current_point[0]-1, current_point[1]),
                       (current_point[0], current_point[1]+1),
                       (current_point[0], current_point[1]-1)]
    for point in possible_points:
      x, y = point
      # Check if the point is within the maze and is not a wall
      if 0 <= x < row_count and 0 <= y < col_count and maze[x][y] != '1' and point not in visited:
        stack.append(point)
        visited.add(point)
        break

    # Remove the current_point from the stack if there are no possible points
    else:
      stack.pop()

  # Return the path if the end_point is found
  if stack[-1] == end_point:
    return stack

  return 'End point is unreachable'

# Solve the maze
maze = [['0', '0', '0', '0'], 
        ['0', '0', '1', '0'], 
        ['1', '1', '1', '0'], 
        ['0', '1', '0', '0']]

start_point = (0, 0)
end_point = (3, 2)

path = maze_search(maze, start_point, end_point)
print(path)",python,typescript,0.004979803225516462,0.023667423817461276,0.002167531500742477,0.0001989001060584321,0.029471593610758413,0.00117843507645605,0.10069565307542264,0.0023532906216526387,0.8352873689659316
"import numpy as np

class L1Model:
    def __init__(self):
        self.coef_ = None
        
    def fit(self, X, y):
        n, m = X.shape
        w = np.random.randn(m)
        lr = 10e-5
        for t in range(1000):
            p = np.dot(X, w)
            grad = 2 * np.dot(X.T, p - y) + lr * np.sign(w)
            w = w - lr * grad
        self.coef_ = w",python,python,0.0035852292334152425,0.006094373089272005,0.02392317954963105,3.605637121963483e-05,1.5189711007033505e-05,0.0017218295771599587,0.903880808338337,0.05986937255041422,0.0008739615795438652
"# Fibonacci sequence generator
def fibonacci(n):
  a = 0
  b = 1
  if n < 0:
    print(""Incorrect input"")
  elif n == 1:
    return a
  elif n == 2:
    return b
  else:
    for i in range(2,n):
      c = a + b
      a = b
      b = c
    return b",python,python,4.7385652114675215e-06,2.5567293194776836e-06,1.0293055510752607e-05,1.2028177275759438e-07,4.716044036098749e-07,0.00010840821048260377,0.9998666312791165,6.526754807310615e-06,2.535193754354286e-07
"import jwt
 
@app.route('/auth', methods=['POST'])
def auth():
 username = request.form.get('username')
 password = request.form.get('password')
 
 # authenticate the user here
 
 token = jwt.encode({'username': username}, app.config['SECRET_KEY'])
 
 return token",css,css,0.0004652178870840652,0.8210824821156308,0.03935983380267483,0.002200951545653689,0.0005895862629922001,0.00048651897614086824,0.06605692672211855,0.0650377179424547,0.004720764745250129
"def fibonacci(n):
 # Initialize a memoization dictionary
 memo = {
 0: 0,
 1: 1
 }
 
 # If n is in the memoization dictionary, return the value
 if n in memo:
 return memo[n]
 
 # Calculate the Fibonacci number
 if n > 1:
 memo[n] = fibonacci(n-1) + fibonacci(n-2)
 
 return memo[n]

print(fibonacci(10))",css,python,0.003662446388246341,0.05074101171980629,0.006645269208687561,0.00038015450579539646,0.0075049836471644095,0.03483326908722452,0.8712325294112411,0.003098847447948016,0.021901488583886398
"import requests
from bs4 import BeautifulSoup

# The list of URLs
urls = [
    'https://www.example1.com',
    'https://www.example2.com'
]

# Iterate through each URL
for url in urls:
    # Connect to the URL
    response = requests.get(url)

    # Parse HTML and save to BeautifulSoup object¶
    soup = BeautifulSoup(response.text, 'html.parser')

    # Extract all the hyperlinks
    links = soup.find_all('a')

    # Print out the link
    for link in links:
        print(link['href'])",python,java,1.4610931629491526e-12,0.0012878927331881143,0.007830872011079723,0.9901174940271238,0.00017404041292621303,1.8084407908372625e-05,0.0002314649714133797,0.00015845389561384022,0.0001816975392855326
"def reverse_dictionary(dictionary): 
 result = dict() 
  
 for key, value in dictionary.items(): 
  result[value] = key 
  
 return result 

dictionary = { 'a': 1, 'b':  2, 'c': 3 }
res = reverse_dictionary(dictionary) 
print(res) # Output: {1: 'a', 2: 'b', 3: 'c'}",css,css,4.0650406692390783e-07,0.9999529875135361,2.0537209063832487e-06,3.605921107353296e-08,6.433549963728472e-07,2.5822280282273083e-05,1.2931569476218742e-05,4.749548880670669e-06,3.6944864380384275e-07
"def factors_list(n): 

    # Create an empty list for factors 
    factors = [] 
  
    # Loop over all factors 
    for i in range(1, n + 1): 
        if n % i == 0: 
            factors.append(i) 

    return factors",python,python,0.0007340908292142484,0.0012047859755967168,0.00393890704572405,0.0001097947974874706,0.000506121691790825,0.488920123495746,0.4998854530458439,0.003102869585892715,0.0015978535327039706
"class Movie: 
 
    def __init__(self, title, year, rating): 
        self.title = title 
        self.year = year
        self.rating = rating 
  
    def print_data(self):
        print('The movie %s released in %d had a rating of %.1f.' 
        % (self.title, self.year, self.rating))",python,html,3.119487052613552e-06,0.001951338261123905,0.9843638160173064,2.097348327748022e-06,1.8514814387146914e-05,9.904846383642115e-07,0.011980063677497677,0.0016135976390586697,6.646227060758437e-05
"def calc_avg_temperature(temperatures):
  total = 0
  for temp in temperatures:
    total += temp
  avg = total / len(temperatures)
  return avg

print(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))

# Output: 71.17142857142857",python,python,0.014399351259224903,0.06660862320090352,0.05431628784422915,0.0012987930423501374,0.0073537504029041354,0.1533880181743724,0.694857570831934,0.004046260059018557,0.0037313451850632786
"while True:
    s = input(""Enter a string: "")
    count = 0
    for i in s:
        if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):
            count+=1
    print(""The number of vowels in the string:"", count)",python,python,6.51816434582094e-05,0.002119430317918085,0.002549044874652834,0.022289677117793897,1.6583464896465956e-05,0.0009464490118005542,0.9593125692728179,0.00017639117747034948,0.012524673119191513
"def remove_whitespace(s):
    return s.replace("" "", """")",python,python,0.0026055780581492336,0.010499601834421193,0.0061803079393218845,0.0006649979564683207,0.0019938124959845266,0.000693160502708369,0.9712065212895278,0.0022387627399413313,0.0039172571834772355
"from Crypto.Cipher import AES

key = b'0123456789ABCDEF'

def encryptAES(message):
 cipher = AES.new(key, AES.MODE_ECB)
 ciphertext = cipher.encrypt(message)
 return ciphertext
 
message = b'Encrypt this message'
encrypted_message = encryptAES(message)
print(encrypted_message)",python,python,0.009243877295035185,0.0867485779566574,0.012992212510499323,0.0014468906330379694,0.0010240094877574893,0.0010286342825905133,0.8772243073994788,0.0067578805104249115,0.003533609924518409
"def min_max(array):
    min = array[0]
    max = array[0]

    for value in array:
        if value < min:
            min = value
        elif value > max:
            max = value
    
    return min, max

array=[4, 6, 3, 2, 8, 10]

min, max = min_max(array)

print(""Minimum: "", min)
print(""Maximum: "", max)",python,matlab,6.537049611403558e-08,5.783215180879247e-07,8.90163018095546e-08,2.6229051401353452e-09,9.493675215574432e-09,0.9999992121701523,2.5001523102584477e-12,2.3232519238515772e-08,1.976993186075214e-08
"num1 = float(input(""Please enter the first number: ""))
num2 = float(input(""Please enter the second number: ""))

print(""The sum of the two numbers is: "" + str(num1 + num2))",python,java,8.502786236248251e-05,1.102339378139137e-05,0.0001918080966849632,0.9117496659428038,0.00029732340351979505,1.1298840839352017e-12,0.08734765797683001,6.634709039646255e-05,0.0002511462324912287
"import json

def detect_errors(json_string):
 try:
     data = json.loads(json_string)
     return None
 except Exception as e:
     return e",python,css,0.0006242791250516104,0.7386732240403533,0.003301295232551917,5.103933097228997e-05,0.00010111128515902655,9.826872069865573e-05,0.242006122491969,0.0006763064472958271,0.01446835332594829
"import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# create data
wine_data = pd.read_csv('wine.csv')
# set features
features = ['alcohol', 'type', 'sulphates', 'pH', 'quality']
x_train = wine_data[features]
y_train = wine_data['type']

# create model
model = RandomForestClassifier(n_estimators=100)
model.fit(x_train, y_train)

# save model
# model.save('wine_random_forest.h5')",python,bash,0.4608272093651359,0.09888624792783861,0.021076594183269324,0.00015973752932129127,0.0002284714716417217,0.0002654103589294265,0.4119559519761932,3.5423648897123384e-06,0.006596834822780841
"def selection_sort(arr): 
    n = len(arr) 
  
    # One by one move boundary of unsorted subarray 
    for i in range(n): 
        # Find the minimum element in unsorted array 
        min_index = i 
        for j in range(i+1, n): 
            if arr[min_index] > arr[j]: 
                min_index = j 
  
        # Swap the found minimum element with the first element         
        arr[i], arr[min_index] = arr[min_index], arr[i] 
  
    return arr",python,matlab,1.23182707610539e-06,3.393631186892097e-07,6.500320097946958e-07,4.5006372086868747e-08,1.0473431760008212e-06,0.9972600839889189,0.0027318190003258786,1.1961466674265172e-08,4.77147753596159e-06
"# define a function for computing the mean
def compute_mean(numbers):
    # initialize a variable to store the sum
    total = 0
    # loop through all the elements in the array
    for num in numbers:
        # add the element to the total
        total += num
    # compute the mean by dividing the total by the number of elements
    mean = total / len(numbers)
    # return the mean
    return mean

# test the function
nums = [1, 4, 5, 6, 7]
average = compute_mean(nums)
print(average)
# prints 5",python,javascript,3.2100024976102994e-05,5.706830606686342e-06,1.8340213199868486e-05,2.6829120840099365e-06,0.9979424387102482,8.180425348910522e-07,0.0012237181915656415,1.150801015071985e-05,0.0007626870646336277
"import random

def generate_random():
    return random.random()",python,python,0.0002865703181961532,0.0004904851012644776,0.0002882138158767676,5.676463937601136e-06,7.15059590020618e-05,2.816848632785221e-06,0.8876268422389014,0.11114750871773617,8.038053645240318e-05
"def palindrome_checker(string1, string2): 
    m = len(string1) 
    n = len(string2) 
  
    if m != n: 
        return False    
  
    string1 = string1.lower() 
    string2 = string2.lower() 
      
    # create empty 2-D matrix 
    C = [[0] * (n + 1) for i in range(m + 1)] 
  
    # palindromic substring of length 0 
    for i in range(m + 1): 
        C[i][0] = 0
  
    # palindromic substring of length 1 
    for j in range(n + 1): 
        C[0][j] = 0
  
    # fill the matrix in bottom-up manner 
    for i in range(1, m + 1): 
        for j in range(1, n + 1): 
            if string1[i - 1] == string2[j - 1]: 
                C[i][j] = C[i - 1][j - 1] + 1
    return m == n == C[m][n]",python,python,9.199422244403285e-06,7.508774990452857e-07,3.2052934926001584e-05,7.187696057230278e-07,1.5484341424460603e-05,0.45520571017855593,0.5445956693735329,0.00011375799398775361,2.6656108223862946e-05
"def sum_array(arr):
    s = 0
    for i in arr:
        s += i
    return s",python,matlab,3.047679870838814e-07,1.85489719613071e-06,4.2108217638545247e-07,8.438677126979559e-08,1.6754095992300115e-07,0.9997023051856122,0.00029425644894702643,2.0804785681801474e-08,5.848855644376316e-07
"def mean_value(numbers):
    sum = 0
    for n in numbers:
        sum += n
    return sum / len(numbers)",python,java,1.1962968840330312e-05,4.117268332586875e-05,0.0002123812780894597,0.990093315696395,0.0001586984763547402,5.759160186571493e-07,0.00938566850751581,7.184869863366289e-05,2.4375774826430823e-05
"def sort_ascending(arr):
    arr.sort()
    return arr

result = sort_ascending([5, 8, 2, 6])
print(result)",python,python,5.938377768415627e-06,0.00045428525226037764,1.1116408221933292e-05,2.0691898470851714e-06,9.670741396355274e-06,0.00014763641508574045,0.9993494413270709,9.18625271358575e-06,1.0656035635702484e-05
"def median(numbers):
    numbers.sort()
    if len(numbers) % 2 == 0:
        mid = int(len(numbers) / 2)
        return (numbers[mid] + numbers[mid - 1]) / 2
    else:
        mid = int(len(numbers) / 2)
        return numbers[mid]

number_list = [-2.3, 5.6, 7.6, 4.5, 9.8]
print('Median of the list is', median(number_list))",python,java,1.3806272440701658e-05,1.4994074909234015e-05,3.9426115125560233e-05,0.9463647479764534,0.00016178817836205088,1.4891353973708694e-11,0.053368896629058124,1.2501941306724696e-05,2.3838797452935965e-05
"import requests 
from bs4 import BeautifulSoup 
  
def crawl_headlines(url): 
    
    code = requests.get(url)  
    plain = code.text  
    soup = BeautifulSoup(plain, ""html.parser"")  
  
    headlines = [] 
    for headline in soup.find_all('a', {'class': 'story-link'}): 
        headlines.append(headline.string) 
          
    return headlines 
  

URL = ""https://www.example.com/news""
headlines =  crawl_headlines(URL) 
print(""Headlines:\n"") 

for headline in headlines: 
    print(headline)",css,java,1.4714968960682254e-14,0.000333357338400329,3.1290902529113924e-05,0.9996019764264858,4.207639239735985e-08,1.9685470756660675e-07,3.0425268560127263e-05,2.176386272650135e-06,5.347466373461307e-07
"# models.py

import pickle

class ClassificationModel(models.Model):
 clf = pickle.load(open(""classifier.pkl"", ""rb""))

# views.py

@app.route('/classify', methods=['POST'])
def classify_text():
 classification_model = ClassificationModel.objects.get(id=1)
 prediction = classification_model.clf.predict(request.data['text'])
 return {'prediction': prediction}",css,bash,0.999981528131007,1.4846718661617629e-05,4.736634177403766e-08,7.728342272664189e-08,5.8166730842965807e-08,1.731458125906095e-08,3.275294728344284e-06,7.505760783949286e-09,1.4221876562002391e-07
"def median(numbers):
    numbers.sort()
    if len(numbers) % 2 == 0:
        return (numbers[len(numbers)//2] + numbers[(len(numbers)//2)-1]) / 2.0
    else:
        return numbers[len(numbers)//2]",python,java,2.5398479835781744e-05,6.176740928238747e-05,0.00011817814866820811,0.5017654695401543,0.00032420029507293437,4.706475960937421e-11,0.49763842766870797,4.818869911901593e-05,1.8369712094576745e-05
"def modify_solution(solution, requirements):
 code_lines = solution.splitlines()
 code_lines.pop()
 code_lines.append(""item_index = item_list.index(new_item)"")
 code_lines.append(""return item_index"")
 return ""\n"".join(code_lines)",sql,sql,0.012167380079603902,0.04026413286377991,0.04472973098064218,0.001200867880513839,0.00933279558299093,0.11142261957572744,0.058952627498390676,0.712617141538159,0.009312704000192087
"def answer_question(question):
    if question == 'What is the capital of China?':
        return 'Beijing'
    else:
        return 'I don\'t know'",python,python,0.009096198568037424,0.08149407076223815,0.019824062864579217,0.0018255414835775237,0.03864266745993776,0.004933475041896822,0.7829152553325657,0.008749668577122177,0.052519059910045136
"class MyClass:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2

    def print_parameters(self):
        print(str(self.param1) + "", "" + str(self.param2))",python,python,0.0006141426619295576,0.01689768032858325,0.05506094891793624,5.370253307320086e-05,0.0034422075770125025,6.467070464861111e-05,0.8947328608218067,0.028952704505500318,0.00018108194950964662
"import numpy as np
import scipy.special
from scipy.integrate import ode

def pde_solve(u0, t0, t1, dt):
    # Define the right-hand side
    def f(t, u, args):
        dudt = args*u
        return dudt
    
    # Create the solver
    solver = ode(f).set_integrator('dopri5', method='adams')
    solver.set_initial_value(u0, t0).set_f_params(args)
    
    # Solve the equation
    t = t0
    u = u0
    while solver.successful() and solver.t < t1:
        u = solver.integrate(solver.t + dt)
        t = solver.t
    
    return u",python,typescript,0.08317632746434851,0.0587122623764828,0.007488746256845225,0.008374934141204186,0.0052608916712916535,4.1210526384952845e-05,0.4088781017242897,0.0027407417867814934,0.42532678405237145
"def combinations(s): 
  
    # Get the length of the string 
    n = len(s) 
  
    # A loop to pick starting point of substring 
    for i in range(n): 
          
        # Pick ending point of substring 
        for j in range(i,n): 
              
            # Print the substring 
            for k in range(i,j+1): 
                print(s[k], end="""") 
            print() 

combinations(""ABC"")",python,python,3.7776403091833386e-06,1.924362690297427e-05,6.131220162980835e-05,2.5318290449137815e-05,2.2639557909006348e-05,0.004516859880779315,0.9939666614702102,0.0006549910673524631,0.0007291962644578483
"def sort(list):
  for i in range(len(list)):
    min_idx = i
    for j in range(i+1, len(list)):
      if list[min_idx] > list[j]:
        min_idx = j
  list[i], list[min_idx] = list[min_idx], list[i]

  return list

list = [3,7,1,4,9,5]
sorted_list = sort(list)

print(sorted_list)",python,matlab,0.000254318602859597,0.0003101294981040929,0.0012732541783381367,5.8962325234794604e-05,0.0002925464610847476,0.5070390925799557,0.4794523641809383,0.010810310126261252,0.0005090220472232761
"#!/usr/bin/env python2
#
# This file is part of Archivematica.
#
# Copyright 2010-2012 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.    If not, see <http://www.gnu.org/licenses/>.

# @package Archivematica
# @subpackage archivematicaClientScript
# @author Joseph Perry <joseph@artefactual.com>
# @version svn: $Id$

#/src/dashboard/src/main/models.py

import collections
import csv
import os
import sys
import traceback
# archivematicaCommon
import archivematicaFunctions
from custom_handlers import get_script_logger
from sharedVariablesAcrossModules import sharedVariablesAcrossModules


def parseMetadata(SIPPath):
    """"""
    Parse all metadata.csv files in SIPPath.

    Looking for metadata.csvs in metadata/ and
    objects/metadata/transfers/<transfer name>/metadata/

    See parseMetadataCSV for details on parsing.

    :param SIPPath: Path to the SIP
    :return: {<filename>: OrderedDict(key: [values]) }
    """"""
    all_metadata = {}
    metadata_csvs = archivematicaFunctions.find_metadata_files(SIPPath, 'metadata.csv')

    for metadataCSVFilePath in metadata_csvs:
        try:
            csv_metadata = parseMetadataCSV(metadataCSVFilePath)
        except Exception:
            print >>sys.stderr, ""error parsing: "", metadataCSVFilePath
            traceback.print_exc(file=sys.stderr)
            sharedVariablesAcrossModules.globalErrorCount += 1
            continue
        # Provide warning if this file already has differing metadata
        # Not using all_metadata.update(csv_metadata) because of that
        for entry, values in csv_metadata.iteritems():
            if entry in all_metadata and all_metadata[entry] != values:
                print >> sys.stderr, 'Metadata for', entry, 'being updated. Old:', all_metadata[entry], 'New:', values
            existing = all_metadata.get(entry, collections.OrderedDict())
            existing.update(values)
            all_metadata[entry] = existing

    return all_metadata


def parseMetadataCSV(metadataCSVFilePath):
    """"""
    Parses the metadata.csv into a dict with entries for each file.

    Each file's entry is an OrderedDict containing the column header and a list of values for each column.

    Example CSV:
    Filename,dc.title,dc.type,dc.type,Other metadata
    objects/foo.jpg,Foo,Photograph,Still Image,Taken on a sunny day
    objects/bar/,Bar,Photograph,Still Image,All taken on a rainy day

    Produces:
    {
        'objects/foo.jpg': OrderedDict(dc.title=[Foo], dc.type=[Photograph, Still Image], Other metadata=[Taken on a sunny day])
        'objects/bar': OrderedDict(dc.title=[Bar], dc.date=[Photograph, Still Image], Other metadata=[All taken on a rainy day])
    }

    :param metadataCSVFilePath: Path to the metadata CSV to parse
    :return: {<filename>: OrderedDict(<metadata name>: [<metadata value>]) }
    """"""
    metadata = {}
    # use universal newline mode to support unusual newlines, like \r
    with open(metadataCSVFilePath, 'rbU') as f:
        reader = csv.reader(f)
        # Parse first row as header
        header = reader.next()
        # Strip filename column, strip whitespace from header values
        header = [h.strip() for h in header[1:]]
        # Parse data
        for row in reader:
            if not row:
                continue
            entry_name = row[0]
            if entry_name.endswith(""/""):
                entry_name = entry_name[:-1]
            # Strip file/dir name from values
            row = row[1:]
            values = archivematicaFunctions.OrderedListsDict(zip(header, row))
            if entry_name in metadata and metadata[entry_name] != values:
                print >> sys.stderr, 'Metadata for', entry_name, 'being overwritten. Old:', metadata[entry_name], 'New:', values
            metadata[entry_name] = values

    return collections.OrderedDict(metadata)  # Return a normal OrderedDict


if __name__ == '__main__':
    logger = get_script_logger(""archivematica.mcp.client.createMETSMetadataCSV"")

    parseMetadata(sys.argv[1])
",css,typescript,0.008964088129733637,0.3678591237244742,0.004980171534564735,0.004246575236256719,0.000295356739129089,8.263656818640851e-05,0.002391337397947988,0.028933250457014198,0.5822474602126931
"import nltk
from nltk.tokenize import sent_tokenize
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = sent_tokenize(""The movie was so amazing!"")

# Setup VADER sentiment intensity analyzer
analyzer = SentimentIntensityAnalyzer()

# Use VADER to get sentiment scores for each sentence
for sentence in sentences:
 scores = analyzer.polarity_scores(sentence)
 score = scores['compound']
 if score >= 0.1:
  sentiment = 'positive'
 elif score <= -0.1:
  sentiment = 'negative'
 else:
  sentiment = 'neutral'

 print(sentence + ': ' + sentiment)

# Output: The movie was so amazing!: positive",python,python,0.01183279693608237,0.18689088370395598,0.005592761498161356,0.00018097617477792074,0.0025550888257322314,0.0035627622927544528,0.7339922227996034,0.04493444268659363,0.010458065082338808
"def append_list(list_to_append, list_to_add):
    return list_to_append + list_to_add",python,python,3.0458681726310896e-12,2.5489143973834694e-10,2.7598246867965498e-11,8.025231839209999e-13,3.049889349032867e-12,3.595677408560778e-18,0.9999999972484059,2.461794976084354e-09,4.1123042603913176e-13
"def latin_encode(string): 
    encoded_string = """" 
    for word in string.split(): 
  
        if word[0] not in ""aeiou"": 
            word = word[1:]+word[0] 
        word+=""ay"" 
  
        encoded_string += word+"" ""
    return encoded_string",python,python,0.007244120340411147,0.0034974459266935527,0.014326438873162024,0.024739936295740245,2.0215731789068137e-06,0.0012262871632549967,0.9282954525040418,0.020038631929705515,0.0006296653938117188
"import requests

url = 'http://localhost:4000'

query = """"""
query {
 user(id: 2) {
  name
  age
  address {
   street
   city
  }
 }
}
""""""

response = requests.post(url, json={'query': query})
data = response.json()

print(data)",css,css,1.2090509691307612e-07,0.9966337985332411,0.0004951911807626676,3.8850705389612995e-05,3.2235021116656106e-06,2.0536221820492896e-06,0.0024926248304903958,1.2456897223816016e-05,0.00032167982350191955
"import requests
import bs4

def webscraper(url):
    page = requests.get(url)
    soup = bs4.BeautifulSoup(page.text, ""html.parser"")
    return soup",python,css,2.6015855854324927e-07,0.6895423581331237,0.261998537008165,0.0003691392154960698,5.991030966202842e-05,4.274228659549907e-06,0.044570220559040426,0.0033808713858280923,7.442900146659964e-05
"# Create the project
django-admin startproject blog

# Create the application
cd blog
python manage.py startapp posts

# Add the application to the project
# Edit the settings.py file
INSTALLED_APPS = [
 'posts',
 # ...
]

# Create the database
python manage.py makemigrations
python manage.py migrate

# Create the models
# Edit the models.py file
from django.db import models
class Post(models.Model):
 title = models.CharField(max_length=200)
 body = models.TextField()

# Create the Admin page
python manage.py createsuperuser
# Follow the prompts to create the superuser

# Create the URLs
# Edit the urls.py file
from django.urls import path
from django.contrib import admin
from posts.views import HomePageView, CreatePost

urlpatterns = [
 path('admin/', admin.site.urls),
 path('', HomePageView.as_view(), name=""home""),
 path('post/new/', CreatePost.as_view(), name=""create_post"")
]

# Create Views
# Edit the views.py file
from django.views.generic.base import TemplateView
from django.views.generic.edit import CreateView
from posts.models import Post

class HomePageView(TemplateView):
 template_name = ""index.html""

class CreatePost(CreateView):
 model = Post
 fields = ['title', 'body']
 template_name = ""create_post.html""
 
 success_url = '/'

# Create Templates
# Create the templates directory
# Create the index.html file
<html>
 <head>
 <title>Blog</title>
 </head>
 <body>
 {% for post in posts %}
 <h1>{{ post.title }}</h1>
 <p>{{ post.body }}</p>
 {% endfor %}
 <a href=""/post/new/"">Create a new post</a>
 </body>
</html>

# Create the create_post.html file
<html>
 <head>
 <title>Create Post</title>
 </head>
 <body>
 <h1>Create a New Post</h1>
 <form method=""post"">
 {% csrf-token %}
 {{ form.as_p }}
 <button type=submit>Create Post</button>
 </form>
 </body>
</html>",html,bash,0.9896456092263489,3.1828883284566825e-10,0.010354386551488636,7.357531599152103e-14,2.140449098934621e-11,1.4789514397040372e-14,2.4935633587508005e-15,1.1544056859723914e-14,3.882366630670518e-09
"import string 
  
def remove_punctuations(sentence):
    punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    sentence_no_punctuations = """"
    for char in sentence:
        if char not in punctuations:
            sentence_no_punctuations = sentence_no_punctuations + char 
  
    return sentence_no_punctuations 
  
sentence = ""This is, a sentence with punctuations!""
print(remove_punctuations(sentence))
 # prints This is a sentence with punctuations",python,python,0.0007668852835768943,0.009162785594609387,0.006439133306748736,0.001248368128032318,4.326678052481529e-05,0.0006526516747303181,0.8980955627819653,0.08227511893614892,0.0013162275136631948
"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

total = 0

for num in nums:
    if (num % 3 == 0) or (num % 7 == 0):
        total += num

print(total)   # Output: 42",python,matlab,1.2207016287935018e-07,1.2508259727130116e-11,1.0228417236978623e-07,1.1790765567347831e-09,7.817850335208964e-09,0.9999323070579099,6.744877292909488e-05,1.1474753559090543e-09,9.657915194886213e-09
"def list_to_dict(string_list):
  result = {}
  for string in string_list:
    if string not in result:
      result[string] = 1
    else:
      result[string] += 1
  return result

list_dict = list_to_dict(['red','blue','red','green','blue','blue'])
print(list_dict) # {'red': 2, 'blue': 3, 'green': 1}",css,java,1.263323637394356e-07,0.027426300308281443,0.0003011395083879615,0.6193863225529963,2.4808309143806205e-08,1.6459499057150276e-05,0.34173501142739876,0.01107068318131822,6.393238188731582e-05
"class IteratorExample:
    def __init__(self, start, end):
        self.start = start
        self.end = end
    
    def __iter__(self):
        self.num = self.start
        return self
    
    def __next__(self):
        if self.num > self.end:
            raise StopIteration
        else:
            current_num = self.num
            self.num += 1
            return current_num

iterator = IteratorExample(1, 10)
for num in iterator:
    print(num)",python,python,3.7379468365277066e-05,3.595442539889704e-05,0.018172579749992986,1.8190039399815971e-06,2.0990057399460802e-05,0.032954784951150444,0.8956374157860607,0.05307864147983176,6.0435077860515784e-05
"def replace_by_length(list_of_strings):
    final_list = []
    for string in list_of_strings:
        final_list.append(len(string))
    return final_list

if __name__ == ""__main__"":
    list_of_strings = [""hello"", ""world"", ""coding""]
    print(replace_by_length(list_of_strings))",python,python,0.0007346677153883068,0.017356019965113042,0.004268225579654397,3.501558931625702e-05,3.1489560997487433e-05,0.0010356247567850651,0.9698162595620041,0.006164835317753637,0.0005578619529875971
"def last_occurrence(x, lst):
  last_index = -1
  for i in range(len(lst)):
    if lst[i] == x:
      last_index = i
  return last_index",python,python,3.9222890777611326e-05,3.065174409006338e-05,0.00011439394074033719,4.665514044370503e-06,7.0168413127972e-06,0.005647515990040062,0.9940434933603004,7.075799106807887e-05,4.228172762618295e-05
"""""""
Enumerate several simple programming solutions to compute the factorial of a number in Python
"""""" 

# Solution 1: Using a loop 
def factorial_1(n):
    fact = 1
    for i in range(2, n+1):
        fact *= i
    return fact

# Solution 2: Using recursion 
def factorial_2(n):
    if n == 0:
        return 1
    else:
        return n * factorial_2(n-1)

# Solution 3: Using math library
import math 
def factorial_3(n):
    return math.factorial(n)",python,typescript,0.001674027746176392,0.0001942313538294147,6.540342419951045e-05,3.4345723333288512e-06,0.011356438244336626,0.0005014111939669394,0.002629340485840563,2.4602860547471582e-05,0.9835511101187697
"# Import the necessary libraries
import requests
from bs4 import BeautifulSoup

# Set the URL to scrape
URL = 'https://www.example.com/'

# Make the request
r = requests.get(URL)

# Parse the HTML response
html_doc = r.text
soup = BeautifulSoup(html_doc, 'html.parser')

# Extract the desired information
for link in soup.find_all('a'):
 print(link.get('href'))",python,html,1.680297947123543e-12,0.031095544187552945,0.4961818104362189,0.4719303415901615,2.4559890676937935e-05,2.7867468290555523e-07,5.9886444442681567e-05,0.00020535081629848728,0.0005022279582854515
"def reverse_array(arr):
    left = 0
    right = len(arr) - 1

    while left < right:
        temp = arr[left]
        arr[left] = arr[right]
        arr[right] = temp
        left += 1
        right -= 1

arr = [1, 2, 3, 4]

reverse_array(arr)

print(arr)  # [4, 3, 2, 1]",python,matlab,0.0001254279526720043,0.0005337160152685572,0.00015438014406364052,5.7216732353369994e-05,8.175701342224542e-05,0.9443730641715065,0.05446405842025381,3.5513399761079115e-05,0.00017486615069885634
"def format_text(string):
    """"""Format the given string with the correct indentation levels.""""""
    lines = string.splitlines()
    level = 0
    formated = """"
    for line in lines:
        if line.isspace():
            continue
        formated += ""  "" * level + line + ""\n""
        if line.endswith("":""):
            level += 1
        elif line.startswith(""return"") or line.startswith(""break""):
            level -= 1
    return formated

# Usage Example
string = """"""This is 
a string
with different lines.""""""
formated = format_text(string)
print(formated) 

# This is
#   a string
#   with different lines.",python,java,6.145487329639663e-08,3.3812922656133784e-06,7.42508972471517e-07,0.9999632315585024,2.4947188725052187e-12,1.2607765968702147e-08,2.4544193993563683e-05,8.565891322778041e-07,7.169791999407138e-06
"def generate_primes(max): 
    primes_list = [2] 
    for i in range(3, max + 1): 
        curr = True 
        for p in primes_list: 
            if i % p == 0: 
                curr = False 
        if curr: 
            primes_list.append(i) 
    return primes_list",python,matlab,1.1907905240218336e-05,5.424110676966573e-06,4.7109000468947566e-05,6.32729146052384e-07,1.8228542006477947e-06,0.9952410806126221,0.004676868606413581,8.868777710629757e-06,6.285403520798506e-06
"{'name': 'John', 'age': 25, 'address': 'London'}",css,css,0.0001872682879788649,0.997109000718626,0.00048746507515608125,0.001998671165988872,3.0880525226743303e-07,1.1099101123854504e-05,0.00017810361968500184,7.171321846338736e-06,2.0911904342832377e-05
"def FibonacciSeries(num):
    a = 0
    b = 1
    print(""Fibonacci Series: "")
    for i in range(0, num):
        print(a, end="" "")
        temp = a
        a = b
        b = temp + b

num = int(input(""Enter a number: ""))
FibonacciSeries(num)",python,matlab,1.5806899365047375e-07,3.064667309554955e-10,5.376202258558869e-07,9.785587365041407e-07,2.2884027621905702e-08,0.9997942860283912,0.00020389017393356276,8.554743098642182e-08,4.0811793954887736e-08
"def calculator(num1, num2, op):
    if op == ""+"":
        return num1 + num2
    elif op == ""-"":
        return num1 - num2
    elif op == ""*"":
        return num1 * num2
    elif op == ""/"":
        return num1 / num2
    else:
        raise Exception(""Invalid operator"")",python,python,0.010449338789273187,0.005097360516151578,0.00016161043267391755,4.439107700793749e-05,0.0004490196365991891,0.0004215349591684416,0.9822631194507532,0.0006040226426369764,0.0005096024957357772
"import json
import requests

from flask import Flask, request

app = Flask(name)

@app.route('/get_latest_stock_prices')
def get_latest_stock_prices():
 stock_info = requests.get('http://finance.yahoo.com/d/quotes.csv?s=MSFT+AAPL+GOOGL+AMZN&f=nsl1op')
 stock_list = stock_info.text.splitlines()

 stock_prices = {}
 for stock in stock_list:
  stock_data = stock.split(',')
  stock_prices[stock_data[0]] = {
  'name': stock_data[1],
  'price': stock_data[2],
  'open': stock_data[3],
  'percent_change': stock_data[4]
  }

 return json.dumps(stock_prices)
 
if name == 'main':
 app.run(debug=True)",css,css,0.005403018334050344,0.9636878918663204,0.0014857738642094279,0.0023701681263045603,1.123269456422062e-05,8.51350354248273e-05,0.02565807922174682,0.0011943015138814086,0.0001043993434976832
"def max_val(arr):
    max_val = 0
    for num in arr:
        if num > max_val:
            max_val = num
    return max_val",python,matlab,2.4700275373621767e-09,7.961434283120538e-12,3.2373357293379438e-09,5.746278318972969e-10,9.647452195103375e-08,0.9999998879097803,5.578800565845795e-09,1.5465482941828248e-10,3.5922899366512597e-09
"def _encode(char, offset):
 char_code = ord(char)
 new_char_code = char_code + offset
 return chr(new_char_code)

def encode_string(string, offset):
 encoded_string = """"
 
 for char in string:
 encoded_string += _encode(char, offset)
 
 return encoded_string",python,python,2.0461365444652224e-05,0.0058893795921967345,0.0015011279569182693,0.06582131643586674,5.9881553969618196e-06,0.00018903878230732034,0.923234910287277,0.0027207775257019106,0.0006169998988904352
"#Define item list
items = [('apple', 1.59),('banana', 0.99),('bread', 3.02),('soup', 1.79)]

#Initialize total amount
total_amount = 0

#Loop through each item and add its price to the total
for item in items:
    total_amount += item[1]
    print(item[0] + ' added to total amount.')

#Add tax to the total
tax_rate = 0.055
total_amount += (tax_rate * total_amount)

#Print the final total
print('Total amount due: $' + str(total_amount))",python,python,0.0008949360323851068,0.1347333917146633,0.005179938699711375,0.0004500484434025984,0.11124312456070683,5.316494809314596e-06,0.744092621382406,0.000820232202200997,0.0025803904697144107
"def quick_sort(array):
    if len(array) == 0 or len(array) == 1:
        return array
    
    pivot = array[0]
    left = []
    right = []
    
    for i in range(1, len(array)):
        if array[i] <= pivot:
            left.append(array[i])
        else:
            right.append(array[i])
    
    left = quick_sort(left)
    right = quick_sort(right)
    
    return left + [pivot] + right",python,matlab,0.00041099818694654005,2.675215383223924e-05,5.1817177064595145e-05,2.9094360553453888e-06,4.154342227906879e-06,0.9994200492044535,4.167637172309757e-05,2.605362673566704e-05,1.558950096126896e-05
"def find_index(item, array):
    for i in range(len(array)):
        if array[i] == item:
            return i",python,matlab,3.5808748587443376e-07,2.991492009273416e-08,6.536194449689112e-07,1.708010286610194e-09,4.416091912760637e-08,0.9999981624579869,7.337881737811464e-07,1.0531862060497972e-08,5.73119688224734e-09
"def join_list_items(my_list, delimiter):
    joined_list = delimiter.join(my_list)
    return joined_list

list_string = join_list_items([""apple"", ""orange"", ""mango""], "", "")
print(list_string)
# Output: apple, orange, mango",sql,python,0.014499825163015113,0.08216908107629294,0.0291064112123841,0.0006884704265575941,0.001956935189932036,0.0007568217635674293,0.7805884768374797,0.08799824180224623,0.002235736528525069
"class StoreItem:
    def __init__(self, item_id, name, price, description):
        self.item_id = item_id
        self.name = name
        self.price = price
        self.description = description

    def __str__(self):
        return f'{self.name}, ${self.price}'

    def to_dict(self):
        return {
            'item_id': self.item_id,
            'name': self.name,
            'price': self.price,
            'description': self.description
        }",css,python,0.0006534981738663402,0.25332846949855886,0.026449786536998643,0.023050895049629556,7.728061503359875e-07,9.396958694732412e-06,0.6596159383373125,0.03654856703411506,0.00034267560467397975
"import sys

def find_primes(n): 
    primes = [True] * n

    for p in range(2, n):
        if primes[p] == True:
            for i in range(2*p, n, p):
                primes[i] = False

    return [p for p in range(2, n) if primes[p]]

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: python3 prime_numbers.py <number>')
        sys.exit(1)
    num = int(sys.argv[1]) 
    print(find_primes(num))",python,matlab,0.0014621447253748512,6.6841127700562765e-06,0.00016007178073828893,1.2872120098155802e-05,2.0504974238439186e-06,0.7328128964599808,0.26548149704070945,5.8824431109041455e-05,2.958831795574328e-06
"import math

def quadratic_x_intercept(a, b, c):
  discriminant = b**2 - 4*a*c
  if discriminant >= 0:
    x1_intercept = (-b+math.sqrt(discriminant))/(2*a)
    x2_intercept = (-b-math.sqrt(discriminant))/(2*a)
    return x1_intercept, x2_intercept
  else:
    return 'No real solutions exist!'

a = 1
b = 4
c = -5

intercepts = quadratic_x_intercept(a, b, c)
print(intercepts)
# Output (2.0, -2.5)",python,python,0.01302425062276317,0.02000725139558388,0.006761457412215859,0.00026899992283915217,0.0017666165224905653,0.0016390458516933818,0.9546100858825507,0.0011967205774102568,0.0007255718124531348
"import numpy as np

# define the 3 layers #
input_layer = np.array([2, 3])
hidden_layer = np.array([[0.1, 0.4],
                         [0.8, 0.6],
                         [0.3, 0.9]])
output_layer = np.array([0.3, 0.7])

# compute the output of the 3-layer network #
hidden_layer_output = np.dot(input_layer, hidden_layer)
output = np.dot(hidden_layer_output, output_layer)

print(output)",python,bash,0.9963579402913432,0.0005888972228227122,0.00022943681428135547,3.240841004077388e-06,4.14276920051361e-05,6.282236956711218e-06,0.002320935568827311,2.73870268115588e-07,0.00045156546249136586
"import random

array = [1,2,3,4,5]

random.shuffle(array)",python,python,0.20461026601699636,0.024821752078222355,0.02361027949427368,0.0006126059183125358,0.003950830482341938,0.06820927049981294,0.3953696951493137,0.2717500751490331,0.007065225211693344
"def intersection(A,B):
    result = [] 
    for element in A: 
        if element in B: 
            result.append(element)
    return result",python,matlab,1.5308571872323126e-10,4.764457633365142e-09,1.401264011431198e-10,2.600132554998032e-11,1.860727002686983e-10,0.9999947105842197,5.28367587984724e-06,2.8571669691870805e-14,4.701280870747407e-10
"def find_missing_number(list_of_numbers):
    max_number = max(list_of_numbers)
    total_sum = (max_number * (max_number + 1)) // 2
    actual_sum = 0
    
    for number in list_of_numbers:
        actual_sum += number
    return total_sum - actual_sum

list_of_numbers = [2, 3, 1, 5]
missing_number = find_missing_number(list_of_numbers)
print(""Missing number: "", missing_number)",python,python,0.002185541845305995,0.013814917608365371,0.006467381007162968,0.0005459569543620956,0.0016216973600266726,0.01675769654611402,0.9521485271037552,0.0019847036984478555,0.0044735778764597
"for i in range(10):
  print(i)",python,matlab,5.9656415838442685e-12,9.24345959966392e-13,1.3906781818842273e-10,2.382126516031233e-13,1.6979731962244342e-13,0.9998352021961047,0.00016479765204655716,3.2524040295583e-14,5.450371823541461e-12
"def longest_consecutive_subarray(array): 
    longest_length = 0
    current_length = 0
   Hash = {} 
    
    for val in array: 
        if val not in Hash: 
            Hash[val] = 1
            current_length += 1
            
            if current_length > longest_length: 
                longest_length = current_length 
                
        else: 
            current_length = 0
    
    return longest_length",python,matlab,0.0006693106322480561,0.001764759685357181,0.0006161624878869529,7.513998450024076e-05,0.09791794709841337,0.8980411548564821,0.00031686776271374326,2.4278814930438617e-06,0.0005962296109053247
"def sum_list(nums):
    total = 0
    for num in nums:
        total += num
    return total",python,python,2.483490012020427e-05,5.66864971874197e-07,0.00013014811788628964,3.370467703258502e-06,1.4885836105926299e-05,0.37261525835077447,0.6271506633220899,1.889984694218221e-05,4.137229340591823e-05
"mse_loss = ((1-2)**2 + (2-3)**2 + (3-4)**2 + (4-5)**2 + (5-6)**2)/5
print(mse_loss)
# Output: 1.2",python,bash,0.8026236146074905,0.0008397749900409352,0.0005062829531843107,1.291344181867039e-08,1.1834082335103283e-06,8.397797041716557e-10,0.19602821362538622,9.166516547547818e-07,1.078817363680664e-11
"rectangles = [[3, 4], [6, 6], [1, 8]]

# calculate the total area
def calculateTotalArea(rectangles):
 total_area = 0
 for x, y in rectangles:
 total_area += x * y
 return total_area

total_area = calculateTotalArea(rectangles)
print(total_area) # 81",python,python,0.010857677238249586,0.021734440165336624,0.012227830161902487,0.0006699504013947443,0.005046505372204086,0.016300779443784986,0.9138982976640156,0.0036211624737306236,0.015643357079381404
"words = [""hello"", ""world"", ""hello"", ""I"", ""am"", ""here"", ""hello"", ""world""]

# create an empty dictionary to store word and its frequency
freq = {}

# count frequency of each word
for word in words:
    if word in freq:
        freq[word] += 1
    else:
        freq[word] = 1

# print the frequency
for k, v in freq.items():
    print(k, "":"", v)",python,bash,0.791451985840866,0.007929580518828193,0.008993435318471316,1.6526916966247124e-12,0.041736311225257915,0.0005244207658686958,0.14719051305699477,0.0013643792690816456,0.00080937400297886
"import random

def generate_random_list(n):
    random_list = []
    for i in range(n):
        random_list.append(random.randint(0, 100))
    return random_list

n = 8
random_list = generate_random_list(n)
print(random_list)",python,python,0.002251745631753379,0.0027545096188152356,0.003774587394663169,0.00013815635769070755,0.0007418040796390702,0.03609107528067127,0.9466088675619324,0.006368415329651737,0.0012708387451829401
"def predict(features):
    # Use the features to make a prediction
    prediction = 0
    
    # Iterate through each feature to calculate the prediction
    for feature in features:
        prediction += calculate_feature(feature)
    
    return prediction

def calculate_feature(feature):
    # Use a suitable algorithm to calculate the prediction
    # Value of the feature
    return value",python,typescript,0.07506047904905999,0.0631510670635246,0.00498387591366621,0.00021643567206521076,0.12038558260178821,0.009605146522638325,0.02199154794479333,0.0005317503419095387,0.7040741148905546
"from Crypto.Cipher import AES

# the block size for the cipher object; must be 16, 24, or 32 for AES
BLOCK_SIZE = 16

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

# generate a random secret key
secret = os.urandom(BLOCK_SIZE)

# create a cipher object using the random secret
cipher = AES.new(secret)",python,typescript,1.8736591705623195e-08,8.742511813230172e-08,3.382527167508255e-07,8.062543269311302e-07,1.2774865494722908e-05,1.0923858012184659e-06,8.149402481752468e-07,5.352733006629684e-07,0.9999835318664015
"def binary_search(arr, item):
 first = 0
 last = len(arr) - 1
 found = False
 
 while(first <= last and not found):
 mid = (first + last) // 2
 if arr[mid] == item:
 found = True
 else:
 if item < arr[mid]:
 last = mid - 1
 else:
 first = mid + 1
 
 return found
 
array = [1, 3, 5, 7, 9, 11, 13, 15, 17]
item = 9

result = binary_search(array, item)
if result:
 print('Element present in the array') 
else:
 print('No such element')",python,python,0.00018965902238010025,0.0012556778496401867,0.0015837144152527057,9.582915441893631e-06,0.0002978585972971944,0.3698051735416815,0.6257359975317514,4.527887474564427e-06,0.0011178082390804291
"Function Name: hello_world

Variable Name: None",javascript,java,0.00011992315966624456,9.699115803885324e-05,7.26762627381451e-05,0.9990034512117948,0.000678325166442945,1.1628034484352471e-05,1.1223647704928348e-05,4.122159504671249e-06,1.6591996249210806e-06
"# Function to convert English sentence to Pig Latin 
def pig_latin(sentence): 
      
    # Separate the sentence into words 
    words = sentence.split(' ') 
      
    # Convert each word into Pig Latin 
    pig_latin_words = [] 
    for word in words: 
        pig_latin_words.append(convert(word)) 
      
    # Return the sentence with words converted to Pig Latin 
    return ' '.join(pig_latin_words) 
  
# Function to convert English word to Pig Latin 
def convert(word): 
      
    # IF the word contains just one letter then return the same 
    if len(word) == 1: 
        return word 
     
    # If word is a vocal then just add ""way"" at the end 
    elif word[0] in 'aeiou': 
        return word + ""way""
      
    # If word begins with a consonant then move the consonant to the end and add ""ay"" 
    else: 
        return word[1:] + word[0] + ""ay""",sql,sql,0.09255617837790218,0.004857971043100647,0.018615127621583582,3.302533357000138e-05,0.15127536969933036,0.0001661598669730582,0.19439107331762015,0.4968684466111002,0.04123664812881984
"class Person:
 def __init__(self, name, age, height, weight):
 self.name = name
 self.age = age
 self.height = height
 self.weight = weight

 def describe(self):
 return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'",python,python,0.0001685257832890063,0.006472969589452211,0.12020681519736184,0.00733970053087903,4.790977017535098e-06,5.040704816638395e-06,0.7941682537759538,0.07124665862074862,0.00038724482048133876
"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
      
n = int(input(""Enter a number: ""))
print(fibonacci(n))",python,python,6.328126146163023e-07,1.6894899992733176e-07,6.12955260144911e-07,6.771453434054134e-07,7.1378494737392125e-09,7.378565109733285e-09,0.9999976787526365,2.1222087316896464e-07,2.6478577256330216e-09
"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

text = ""I love programming""

sid = SentimentIntensityAnalyzer()
scores = sid.polarity_scores(text)

if scores['compound'] > 0.0:
 print(""Positive sentiment"")
elif scores['compound'] == 0.0:
 print(""Neutral sentiment"")
else:
 print(""Negative sentiment"")

# Output: Positive sentiment",python,python,0.0036134932879497883,0.04228154282775816,0.0008350809141565631,0.00013338788375120853,0.00016984774001397836,0.0009481106162585401,0.9145031847135086,0.007316849403414019,0.030198502613189297
"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
num = 5
print(Fibonacci(num))",python,python,7.0971320782000725e-06,8.258823227914781e-07,1.0517471272390769e-05,2.437954296264411e-07,9.998663705151082e-07,4.980001732456923e-05,0.9999259440174184,3.9887778316991295e-06,5.83039951923074e-07
"def callback(a, b): 
    # perform calculation 
    return c 
  
# define a function to use for the callback 
def my_function(x): 
    return x*x 

result = callback(5, my_function) 
print(result)",python,python,0.0006329916576764725,0.015871852972335856,0.0005515119502849943,4.474321771479513e-05,0.24782234793221408,6.970659640382753e-05,0.7258403299936176,0.004696719249256099,0.004469796430496304
"import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Sample training and testing data
X_train = np.array([""This is a sample sentence."",
                    ""Another sample sentence."",
                    ""Yet another sentence for classification.""])
y_train = np.array([0, 0, 1])
X_test = np.array([""Classify this sentence."",
                   ""Two sentences in one.""])

# Create a vectorizer and fit it to the training data
vectorizer = CountVectorizer()
vectorizer.fit(X_train)

# Transform the training data and test data into a vector
X_train_vec = vectorizer.transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Create a MultinomialNB model and fit it to the vectorized data
model = MultinomialNB()
model.fit(X_train_vec, y_train)

# Make predictions with the model
predictions = model.predict(X_test_vec)
print(predictions)  # Output: [1 0]",python,typescript,0.08931013812537966,0.019709020099402532,0.0011531983697977593,2.0404148208611006e-05,2.7614057150049975e-05,1.7738796699949897e-05,0.151665246777054,9.916066652301216e-06,0.7380867235596551
"The main advantages of using a set data structure in Python are that it is unordered, meaning that the elements in a set are not stored in a particular order, and that it is unindexed, meaning that each element must be referenced based on its value. Additionally, because sets do not contain duplicate elements, they are useful for performing various operations on a dataset such as searching, filtering, and removing duplicate elements. Finally, using sets can improve the speed of the overall code since different operations may have O(1) time complexity.",typescript,typescript,8.926501573151229e-13,2.489664623023882e-12,1.2278350636067854e-13,2.121352904219268e-13,4.797571759159501e-10,5.416842682479055e-11,1.4191094787160854e-12,6.107597071063626e-13,0.9999999994603272
"import numpy as np
from sklearn.linear_model import LogisticRegression

# Generate data points
X = []
y = []
for i in range(1, 11):
 for j in range(1, 101):
  X.append([i, j])
  if j % 2 == 0:
   y.append(1)
  else:
   y.append(0)

# Train the model
X_data = np.array(X)
y_data = np.array(y)
model = LogisticRegression()
model.fit(X_data, y_data)",python,matlab,5.721458084075525e-06,8.986550400745849e-12,3.0880125241365946e-09,1.1638581372864474e-11,1.1497157555831247e-11,0.9999942723037989,2.622497176907459e-09,5.3564170938406404e-14,4.954315239630169e-10
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report

# Read the dataset
data = pd.read_csv('restaurant_reviews.csv')

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data['review'], data['category'], test_size=0.2, random_state=42)

# Initialize the CountVectorizer
vect = CountVectorizer().fit(X_train)

# Transform the training and testing sets
X_train_vectorized = vect.transform(X_train)
X_test_vectorized = vect.transform(X_test)

# Initialize and train the model
model = MultinomialNB().fit(X_train_vectorized, y_train)

# Make predictions
preds = model.predict(X_test_vectorized)

# Generate the classification report
print(classification_report(y_test, preds))",python,bash,0.5796234669315335,0.0878208424588668,0.004620524645968955,9.875238125268875e-06,9.336243118567678e-05,2.121461613064311e-05,0.2684720963312663,1.6333011670306415e-05,0.05932228433525262
"my_dict = {
 'key1' : 'value1',
 'key2': 'value2'
 
}

try:
 value2 = my_dict['key3']
except KeyError:
 print(f""The key 'key3' does not exist in the dictionary."")",css,css,0.0031843722438558457,0.6237886192621224,0.004605865931209964,6.975420672694623e-05,0.003024117319805187,0.000834944225791266,0.020780613733397763,0.0011520604810541573,0.34255965259603655
"def calculate_area(n):
    """"""
    Calculates the area of an n-sided regular polygon
    """"""
    # Calculate the area of the n-sided regular polygon
    side_length = 1
    area = (n * side_length**2) / (4 * math.tan(math.pi / n))
    return round(area, 2)

# Get the number of sides as an input
n = int(input(""Enter the number of sides""))

# Calculate the area and print it
area = calculate_area(n)
print(""The area of the regular polygon is"", area)",python,typescript,0.0004776129665179638,0.0021478500184651268,0.0006970494245009375,0.00019793390860598075,0.011618780576794777,4.878419325381289e-07,0.11725501681624338,6.189709210925822e-05,0.86754337135483
"class Animal:
    def __init__(self, name):
        self.name = name
    
    def move(self):
        print(f""{self.name} is moving"")
    
    def eat(self):
        print(f""{self.name} is eating"")
    
    def sleep(self):
        print(f""{self.name} is sleeping"")",python,python,0.00048506618165651723,0.000325278605775205,0.014756075488835459,0.3051697370785983,7.790265473220315e-07,1.2483960713951998e-06,0.6596172473047074,0.019555284953456174,8.928296435221765e-05
"def filterList(nums, filter):
 
 # Initialize a filtered list 
 filtered_list = [] 
 
 # Iterate over the list 
 for num in nums: 
  
  # Check if filter is true 
  if eval(str(num)+filter): 
   filtered_list.append(num) 
 
 # Return the filtered list
 return filtered_list

result = filterList([1,2,5,6,-4,7,8], '> 0')
print(result)
# Output: [1,2,5,6,7,8]",python,matlab,0.00015045047518941592,1.2933963533540828e-05,0.0004971534528764725,7.3817710605436815e-06,0.0002163092619009987,0.8307632301448509,0.16734824900989215,0.0009370328294101896,6.725909128570053e-05
"def mean(lst):
    total = 0
    for x in lst:
        total += x
    return total / len(lst)",python,python,1.623525194989476e-05,0.00016412460595447968,0.00010127680366892855,2.093633921780026e-06,7.74667668997556e-06,2.1116677229656413e-05,0.9996403154838693,2.226937825616247e-05,2.4821488459802982e-05
"# function to sort the array
def sort_nums(arr):
  # Use Selection Sort Algorithm
  for i in range(len(arr)):
    min_index = i
    for j in range(i+1, len(arr)):
      if arr[min_index] > arr[j]:
        min_index = j
    arr[i], arr[min_index] = arr[min_index], arr[i]
  
  return arr

# driver code
arr = [125, 33, 52, 45, 24]
result = sort_nums(arr)
print(result)",python,matlab,6.036986677628982e-06,2.1625312474041237e-05,5.994907803610188e-06,2.0815917307530703e-06,2.5745670484119907e-05,0.9427319708570432,0.0571806290943625,1.8560713217726069e-06,2.4059508102458028e-05
"SELECT
    TweetID,
    TweetText, 
    sentimentScore
FROM
    TweetTable
WHERE
    sentimentScore = FN_SentimentAnalysis(TweetText);

FN_SentimentAnalysis(input VARCHAR)
AS 
BEGIN
    DECLARE @Result int;

    EXEC sp_execute_external_script  
        @language = N'python',  
        @script = N'import nltk
                    from nltk.sentiment.vader import SentimentIntensityAnalyzer
                    nltk.download(""vader_lexicon"")
                    sid = SentimentIntensityAnalyzer()
                    output_data_1 = sid.polarity_scores(InputDataSet.inputvalue)[""compound""]', 
        @input_data_1 = N'SELECT @Input as inputvalue',
        @params = N'@Result INT OUTPUT',
        @Result = @Result OUTPUT;  

    RETURN @Result;
END;",sql,bash,0.8502453992832408,0.034564978094712706,0.007364378663879803,0.000991445866870402,0.00025525495646279797,5.753705391101219e-08,0.10355384000487444,0.0012817733268222383,0.0017428722660827204
"class Fibonacci:
 def __init__(self, n):
  self.n = n
  self.a = 0
  self.b = 1
 
 def __iter__(self): 
  return self
 
 def __next__(self): 
  if self.a <= self.n:
   temp = self.a
   self.a, self.b = self.b, self.a + self.b 
   return temp 
  else:
  raise StopIteration",python,sql,3.736172700264227e-05,0.00792074501523647,0.3035668616372083,1.6449054308409361e-06,2.3689788896016854e-05,2.1928927262348398e-05,0.12688136511868067,0.561430606043405,0.00011579683687772596
"import smtplib

def send_email(sender, recipient, subject, message):
    # set up the audience and message
    message = """"""\

From: %s
To: %s
Subject: %s

%s
"""""" % (sender, recipient, subject, message)

    # set up the SMTP connection and send the message
    session = smtplib.SMTP('smtp.example.com', 25)
    session.login(""sender_username"", ""sender_password"")
    session.sendmail(sender, recipient, message)
    session.quit()",python,css,0.0024238600828549784,0.5591226170505579,0.05703860726483038,0.10204659932115243,0.01824190618694072,0.0012065655626735457,0.05395229882258709,0.024842753603491054,0.1811247921049118
"import matplotlib.pyplot as plt

data = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]

# plotting the histogram 
plt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') 
  
# x-axis label 
plt.xlabel('Range of values') 
# y-axis label 
plt.ylabel('Number of Occurrences') 
# plot title 
plt.title('Histogram of data') 
  
# function to show the plot 
plt.show()",python,html,0.0007461615391099051,0.02182259615123335,0.8372696290528664,0.00020035856527992138,0.0466996503121887,0.0017449297252104066,0.05511942108803599,0.006227622112409214,0.030169631453665937
"def classifyIntegersByOddEven(arr):
    evens = []
    odds = []
    
    for num in arr:
        if num % 2 == 0:
            evens.append(num)
        else:
            odds.append(num)
    
    return evens, odds

evens, odds = classifyIntegersByOddEven([1, 8, 4, 120])
print('Evens: ', evens)
print('Odds: ', odds)",python,matlab,3.1472789578170634e-06,3.195870471365036e-07,4.896484846493892e-06,5.784585028130897e-07,1.4173027001712226e-06,0.9999268867794602,5.823262433188835e-05,5.469490182491252e-07,3.974535135073373e-06
"# import the necessary libraries 
import numpy as np 
import tensorflow as tf 

# define the input matrix
input_matrix = np.array([[3, -0.5, 2],
 [-0.5, 0.7, 1.2],
 [0.2, -0.3, 0.8]])

# create a 3x3 weight matrix
weights = tf.Variable(tf.truncated_normal(shape=[3, 3], mean=0, stddev=0.1, dtype=tf.float32))
# define the biases
biases = tf.Variable(tf.constant(0.1, shape=[3]))

# define the output
out = tf.matmul(input_matrix, weights) + biases

# initialize the weights and biases
init = tf.initialize_all_variables()

# define the sesssion
sess = tf.Session()
# run the session
sess.run(init)

# print the result
print(sess.run(out))",python,typescript,0.13379041303675432,0.2879489549188755,0.0026801995094749946,0.0008468619104909605,0.0024291866961861633,3.202480907847126e-05,0.05619326201694335,0.00048164761251175413,0.5155974494896844
"def print_object_table(obj): 
    print(""Name\t Age\t Gender\t City"")
    print(""----\t----\t-------\t-------"")
    print(obj['name'], ""\t"", obj['age'], ""\t"", obj['gender'], ""\t"", obj['city'])

print_object_table({
  'name': 'John', 
  'age': 32, 
  'gender': 'Male',
  'city': 'New York'
})",css,css,0.0005678556074139172,0.9682401281444235,0.0009543664097284425,0.006039345190563744,5.745478862478729e-06,5.968389849744392e-05,0.023955832643253943,0.00011502613237744115,6.201649487902202e-05
"# Python 
def most_frequent_words(str):
  # split string into an array of words
  words = str.split()

  # create a dictionary and store words and their frequency as key-value pairs 
  frequency_dict = {}
  for word in words:
    if word not in frequency_dict:
      frequency_dict[word] = 1
    else:
      frequency_dict[word] += 1

  # create array with words and their frequencies 
  frequency_list = []
  for key in frequency_dict:
    frequency_list.append([key, frequency_dict[key]])

  # sort list by frequency in descending order
  frequency_list.sort(key=lambda x: x[1], reverse=True)

  # return the first 5 items 
  return frequency_list[:5]
  
# JavaScript
function mostFrequentWords(str) {
  // split string into an array of words
  const words = str.split(' ');

  // create a dictionary and store words and their frequency as key-value pairs
  const frequencyDict = {};
  words.forEach(word => {
    if (!(word in frequencyDict)) {
      frequencyDict[word] = 1;
    } else {
      frequencyDict[word] += 1;
    }
  });

  // create array with words and their frequencies
  const frequencyList = [];
  for (let key in frequencyDict) {
    frequencyList.push([key, frequencyDict[key]]);
  }

  // sort list by frequency in descending order
  frequencyList.sort((a, b) => b[1] - a[1]);

  // return the first 5 items
  return frequencyList.slice(0, 5);
}",python,javascript,0.00010345355953157537,0.009948237380632611,0.00444127413430224,7.093431447365304e-06,0.9790679675972267,0.0011067691889261727,0.0022111512567001552,0.001957967230277119,0.0011560862209562682
"# Copyright (c) 2015 Xilinx Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the ""Software""), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import os
import urlparse
import shutil
import datetime

from hopper.utils.logger import *
import hopper.utils.git.tasks
import hopper.utils.git.repo
import hopper.source.meta
import threading

class Watcher:
	class GroupState:
		def __init__(self, layers):
			self.layers = layers
			self.refstate = {}

		def getRefPairs(self):
			pairs = []
			for i in self.layers:
				if i.source and isinstance(i.source, hopper.source.meta.GitSource):
					if i.source.canFetch():
						# TODO: handle ref/tag/commit properly below
						pairs.append((i.source.remote, ""refs/heads/"" + i.source.ref))
			return pairs

		def filterPairs(self, remoterefs):
			filteredrefs = {}
			for p in self.getRefPairs():
				if p[0] in remoterefs:
					for i in remoterefs[p[0]].iteritems():
						if i[0] == p[1]:
							if p[0] not in filteredrefs:
								filteredrefs[p[0]] = {}
							filteredrefs[p[0]][i[0]] = i[1]
			return filteredrefs

		def update(self, remoterefs, trigger = False):
			rrefs = self.filterPairs(remoterefs)
			pairs = self.getRefPairs()

			changed = False
			oldrefstate = self.refstate
			newrefstate = {}
			for i in pairs:
				if i[0] in rrefs:
					if i[1] in rrefs[i[0]]:
						newcommit = rrefs[i[0]][i[1]]
						if i[0] not in newrefstate:
							newrefstate[i[0]] = {}
						newrefstate[i[0]][i[1]] = newcommit
						log(""remote: %s, ref: %s, value = %s"" % (i[0], i[1], newcommit))

						if trigger:
							changed = True
						if oldrefstate != None:
							if i[0] in oldrefstate and i[1] in oldrefstate[i[0]]:
								if newrefstate[i[0]][i[1]] != oldrefstate[i[0]][i[1]]:
									changed = True

			self.refstate = newrefstate
			return changed

		def cloneRefPin(self, remoterefs):
			filtered = self.filterPairs(remoterefs)

			# create layers that match the layers object, fill in pinned refs
			pinnedlayers = hopper.source.meta.LayerCollection(self.layers.defaultversion)
			for i in self.layers:
				if isinstance(i.source, hopper.source.meta.GitSource):
					# TODO: fixup pciking of ref name
					refname = ""refs/heads/"" + i.source.ref
					refpin = None
					if i.source.remote in filtered:
						refs = filtered[i.source.remote]
						if refname in refs:
							refpin = refs[refname]
					newsource = hopper.source.meta.GitSource(i.source.remote, refpin)
				else:
					newsource = i.source
				pinnedlayers.add(i.getFullName(), newsource)
			return pinnedlayers

	def __init__(self, environment):
		self.environment = environment
		self.stop = threading.Event()
		self.thread = None
		self.interval = 0

		self.lock = threading.RLock()
		self.groups = []

		self.changeevent = threading.Condition()
		self.changequeue = []

	def addLayers(self, layers):
		group = Watcher.GroupState(layers)
		self.groups.append(group)

	def start(self, interval = 30):
		if self.thread and self.thread.isAlive():
			return

		self.interval = interval
		self.thread = threading.Thread(target = self.__worker__)
		self.daemon = True
		self.thread.start()

	def stop(self):
		if self.thread and self.thread.isAlive():
			self.stop.set()
			self.thread.join()

	def alive(self):
		if self.thread and self.thread.isAlive():
			return True
		return False

	def trigger(self):
		self.__check__(True)

	def __check__(self, trigger = False):
		with self.lock:
			haschanges = False

			remotes = []
			for i in self.groups:
				for p in i.getRefPairs():
					if p[0] not in remotes:
						remotes.append(p[0])

			self.environment.debug(""need to update for the following remotes -> %s"" % remotes)

			refstate = {}
			for i in remotes:
				self.environment.log(""Grabbing refs from remote for %s"" % i)
				result = hopper.utils.git.tasks.GitTask.run([""ls-remote"", i], environment = self.environment)
				if result[0] == 0:
					refstate[i] = {}
					for r in result[1].splitlines():
						parts = r.split()
						refstate[i][parts[1]] = parts[0]
					self.environment.debug(""got refs -> %s"" % repr(refstate[i]))
				else:
					self.environment.error(""Failed to get remote state for '%s' error message = %s"" % (i, result[1]))
					return

			haschanges = False
			for i in self.groups:
				if i.update(refstate, trigger):
					self.environment.log(""Changes have happened since last check, pinning"")
					changes = i.cloneRefPin(refstate)
					self.changequeue.append((i.layers, changes, datetime.datetime.utcnow()))
					haschanges = True

		if haschanges:
			with self.changeevent:
				self.changeevent.notifyAll()

	def __worker__(self):
		while not self.stop.wait(self.interval):
			self.__check__()

	def wait(self):
		if self.alive():
			if self.hasnext():
				return

			with self.changeevent:
				self.changeevent.wait()

	def hasnext(self):
		with self.lock:
			if len(self.changequeue) != 0:
				return True
		return False

	def getnext(self):
		with self.lock:
			if len(self.changequeue) != 0:
				return self.changequeue.pop()
		return None

",sql,sql,8.104149278109807e-05,0.021995657571129045,0.035860501877756856,1.1835998162909001e-07,0.00012798235961865344,0.0002378758230477134,0.0030210465209119775,0.9277796088061276,0.0108961671886451
"import nltk
import pandas as pd
import numpy as np

# Input text
text = ""This is a sample text for Keyword extraction.""

# Tokenize words
words = nltk.word_tokenize(text)

# Initialize corpus
corpus = []

# Convert tokens to lowercase
for word in words:
     corpus.append([word.lower()])

# Get unigrams
wordsFreq = pd.DataFrame(corpus, columns=['Word'])

# Calculate document frequency
df = wordsFreq.groupby('Word').size().reset_index(name='Doc Frequency')

# Calculate term frequency
tf = wordsFreq['Word'].value_counts().reset_index(name='Term Frequency')

# Merge both frequencies for computing TF - IDF
tfidf = pd.merge(df, tf, on='Word', how='inner')

# Calculate Inverse Document Frequency
tfidf['Inverse Document Frequency'] = np.log(len(text)/(tfidf['Doc Frequency'] + 1))

# Calculate TF - IDF
tfidf['TF - IDF'] = tfidf['Term Frequency'] * tfidf['Inverse Document Frequency']

# Sort words by TF - IDF in descending order
tfidf.sort_values('TF - IDF', ascending=False, inplace=True)

# Print the most important words
print(tfidf[:5]['Word'])
# Output:
# 0      sample
# 1   keyword
# 2    extract
# 3        for
# 4        this",python,python,0.007110100309638533,0.09486507221408866,0.08379300144195838,0.0006642680371592467,0.0013903208283756836,0.0014988827627464279,0.7256171081675106,0.08127026014179076,0.00379098609673184
"def add_key_value_pair(dict, key, value): 
    dict[key] = value
    return dict

my_dict = {}
my_dict = add_key_value_pair(my_dict, 'age', 23)
print(my_dict)",python,css,9.710603005856984e-06,0.9997569594394488,3.0322140703540164e-05,2.3922058512937814e-06,1.5605728363119367e-05,0.0001057574336860875,5.6520811156822444e-05,7.186268549926723e-06,1.5545369234590844e-05
"import tkinter as tk

root = tk.Tk()
root.title('My App')

# Create a label
label = tk.Label(root, text=""Hello, World!"")
label.pack()

# Create a button
button = tk.Button(root, text = ""Click Me!"")
button.pack()

root.mainloop()",python,python,0.04944854064761959,0.035863183010213164,0.2300945381041856,4.096375611947554e-06,0.013913739622311874,0.0025065558207693368,0.5015156268286893,0.06893233399752186,0.09772138559307726
"def has_even_product(numbers):
 for i in range(len(numbers)):
 for j in range(i+1, len(numbers)):
 if numbers[i] * numbers[j] % 2 == 0:
 return True
 return False",python,python,7.89557942179488e-08,1.7862330712049662e-08,2.1182570759064243e-06,0.00042230948892163066,1.7332838652415283e-07,4.8987308877183035e-09,0.9995746892598342,5.654717279692408e-07,4.24771981228293e-08
"# Using Python

def reverseNumber(number):
    reversed = 0
    while(number > 0):
        digit = number%10
        reversed = reversed*10 + digit
        number = number//10
    
    return reversed

number = 12345
reverse = reverseNumber(number)
print(reverse) 
# Output: 54321",python,python,0.0016987947569125984,0.0021054044432124762,0.0007894024352415425,4.068247830082229e-06,6.281575898899302e-05,4.57349970841496e-05,0.9949034717425391,1.8655694970863833e-05,0.000371651923220332
"def reverse_words(string):
    words = string.split("" "")
    output_string = """"
    for word in words:
        output_string += word[::-1] + "" ""
    return output_string.strip()",python,python,6.87862148205281e-06,0.003269193276931313,0.0035434608964756992,0.2732364471027333,1.2448305231137783e-07,6.978732894936796e-05,0.5666860399254173,0.1531166460391152,7.142232584337822e-05
"import numpy as np

def linear_interpolation(x, y):
    '''Linear interpolation on given dataset.'''
    points = list(zip(x, y))
    x_new, y_new = zip(*[(x_i, np.interp(x_i, x, y)) for x_i in np.arange(1,max(x))])
    points_new = list(zip(x_new, y_new))
    return points + points_new

x=[1,2,3]
y=[2,4,6]

print(linear_interpolation(x, y))",python,python,0.003467343576419303,0.009598953508397429,0.0017798259820432122,7.265330583626596e-05,7.621834580381784e-05,0.0011502277237160645,0.9722490258047694,0.0025573167426361978,0.009048435010378414
"#!/usr/bin/env python
import urllib
import urllib2
import time
import getopt
import sys
import os
import timeit
import platform
import subprocess
import re

REFERENCE_URL = 'http://stash.osgconnect.net/+sthapa/100MB_ref'
WSGI_URL = 'http://web-dev.ci-connect.net/~sthapa/record_network_test.wsgi'

def download_file():
    """"""
    Download file and then remove it
    """"""  
    webref = urllib2.urlopen(REFERENCE_URL)
    foo = webref.read()

def get_host_info():
    """"""
    GET host information
    """"""
    host_info = {}
    if 'OSG_SITE_NAME' in os.environ:
        host_info['site'] = os.environ['OSG_SITE_NAME']
    elif 'GLIDEIN_RESOURCE_NAME' in os.env:
        host_info['site'] = os.envron['GLIDEIN_RESOURCE_NAME']
    host_info['hostname']  =  platform.node()    
    return host_info

def send_record(test_record = None):
    """"""
    Send record to wsgi 
    """"""
    if test_record is None:
        return
    try:
        temp = test_record.copy()
        if 'latency' in temp:
            del temp['latency']
        bandwidth_req = WSGI_URL + '?' + urllib.urlencode(temp)
        req = urllib2.urlopen(bandwidth_req)
        temp = test_record.copy()
        if 'bandwidth' in temp:
            del temp['bandwidth']
        latency_req = WSGI_URL + '?' + urllib.urlencode(temp)
        req = urllib2.urlopen(latency_req)
    except Exception, e:
        pass

def get_latency():
    """"""
    Test ping time latency to stash
    """"""
    try:
        ping_output = subprocess.check_output(['/bin/ping', '-c', '10', 'stash.osgconnect.net'])
    except AttributeError:
        process = subprocess.Popen(['/bin/ping', '-c', '10', 'stash.osgconnect.net'], stdout=subprocess.PIPE)
        ping_output = process.communicate()[0]
    ping_regex = re.compile(r'rtt.*=\s+[\d.]+/([\d.]+)')
    match = ping_regex.search(ping_output)
    if match:
        return float(match.group(1))
    return 0.0

def main():
    test_record = get_host_info()
    test_record['date'] = time.time()
    download_times = timeit.Timer('download_file()', ""from __main__ import download_file"").repeat(repeat = 5, number = 1)
    avg_time = 0.0
    records = 0
    for x in download_times:
        if x < 0.005:
            continue
        avg_time += x
        records += 1
    test_record['bandwidth']  = float(100 * 2**20) / (avg_time / float(records))
    test_record['latency'] = get_latency()
    send_record(test_record)

if __name__ == ""__main__"":
    main()
",python,bash,0.9791825685133921,0.0024656709158045473,0.0018346212398620697,1.478167330291163e-07,3.951748570435957e-05,0.016177100185854366,8.557471712901507e-05,0.00018043259627663114,3.4366529243911705e-05
"def mean(list):
    """"""Calculate the mean of the given list.""""""
    total = 0
    for i in list:
        total += i
    return total / len(list)

# Usage Example
list = [1, 2, 3, 4, 5]
mean = mean(list)
print(mean)  # 3.0",python,python,0.00015236734359544015,0.0043783355982741435,0.004250740698096017,0.0006712725983320373,0.00337646451667111,0.0035012734027296184,0.9577918462957002,0.018529874387304385,0.007347825159297012
"vat_number = ""DE1905303456""

vat_number_without_check_digit = vat_number[:-1]

sum = 0
for c in vat_number_without_check_digit:
 if c.isdigit():
 sum += int(c)

print(f'Sum of digits: {sum}')",python,java,3.316893625463696e-06,1.4314084654684567e-06,2.0975788446139925e-05,0.9999465890107846,5.67881823316234e-06,5.606225557405058e-06,6.287275290566129e-06,5.140181326193362e-06,4.974398271003394e-06
"#!/usr/bin/env python

# Input list of strings
input_strings = [""This"",""is"",""a"",""list"",""of"",""strings"",""this"",""list"",""contains"",""duplicate"",""words""]

# Create empty list for unique words
output_words = []

# Loop through each string
for current_string in input_strings:
    # Split strings into separate words
    current_words = current_string.split("" "")

    # Loop through each word
    for current_word in current_words:
        # If word is not already in the output list, add it
        if current_word not in output_words:
            output_words.append(current_word)

# Print out list of unique words
print(output_words)",python,sql,0.02100183410994594,0.001452965290137971,0.01566885080622481,0.012534024722595708,0.0061767639549370435,0.007305456099829164,0.07316130782852001,0.8621591834831918,0.0005396137046176213
"import requests
from bs4 import BeautifulSoup

# make an HTTP request to the given URL
r = requests.get(url)

# parse the response
soup = BeautifulSoup(r.content, 'html.parser')

# find all the links on the page
links = soup.find_all('a')
external_links = []

# loop through the links and extract the external ones
for link in links:
    href = link.get('href')
    # check if the link is valid and external (not on the same page)
    if href and href.startswith('http'):
        external_links.append(href)

# print the list of external links
print(external_links)",python,typescript,4.193678772406233e-05,0.00041505443997693286,0.006216595041549915,3.769229424287983e-07,0.002981358420814812,0.011344875545345896,0.00891153310373924,0.0020936317264945614,0.9679946380114123
"for num in range (0, 1000):
    order = len(str(num))
    s = 0
    x = num
    while x > 0:
        d = x % 10
        x = x // 10
        s += d ** order
    if num == s:
        print(num)",python,matlab,6.601451964234002e-13,2.8140478127066624e-17,7.062026702827626e-12,1.6448027817416853e-13,1.6774528048831536e-12,0.9999999988970525,1.0926992567726913e-09,4.995844722270928e-13,1.8461371433897717e-13
"list1 = [2, 3, 5, 8]
list2 = [1, 4, 5, 9]

common_elements =  [element for element in list1 if element in list2]

print(common_elements)",python,matlab,1.953996939374776e-09,5.53833002656851e-09,1.5175136480265309e-09,5.126337877345979e-10,1.2659081182279818e-09,0.9999931715641823,6.812600436360409e-06,3.672326354317773e-14,5.046962049820054e-09
"def counter(text):
    """"""
    Function to count the occurrence of each word in the text using 
    a dictionary data structure.
    
    Parameters: 
    text (str): The given text to count.
    
    Returns: 
    dict: A dictionary of words with their counts.
    """"""
    result = {}  # Create empty dictionary
    for word in text.split():
        if word in result: 
            result[word] += 1
        else: 
            result[word] = 1
    return result",python,python,0.0002125197636876094,0.2498225227985787,0.0005180067685960181,3.059962598898381e-07,0.008538892913489624,2.0693233280076673e-05,0.46832355526966835,0.03965386109834701,0.2329096421580927
"def sort_list(nums):
    for i in range(len(nums) - 1):
        for j in range(i + 1, len(nums)):
            if nums[i] > nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
    return nums",python,python,8.09162154949058e-06,1.1083998538707705e-05,1.5468016954198585e-05,1.1942723894452692e-06,1.5450978498032227e-06,0.00018623011763130797,0.999744117904337,2.0534261350924284e-05,1.1734709399110674e-05
"import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier 

# Define the hyperparameters to optimize
param_grid={
 'n_estimators': np.arange(2, 30, 2),  
 'max_depth': np.arange(2, 12, 2),  
 'min_samples_leaf': np.arange(1, 10, 2)
}

# Create GridSearchCV model object with the hyperparameters
model = GridSearchCV(RandomForestClassifier(), param_grid, verbose=2, cv=3) 

# Fit the model to the data
model.fit(X, y) 

# Print out the best estimator
print(model.best_estimator_)",css,bash,0.9501505789062725,0.020891719926414917,0.000990165323592636,5.407174901087843e-05,0.0009408454138543004,3.2861083513951515e-06,0.012280567308162562,5.709024348604519e-08,0.01468870817409727
"""""""
Write a Python script to iteratively apply a function to all the elements in a list.
""""""

def applyFunc(list_data, func):
    result = []
    for item in list_data:
        result.append(func(item))
    return result

list_data = [1, 2, 3, 4]

def square(x):
    return x**2

squares = applyFunc(list_data, square)
print(squares)",python,javascript,0.003601000464005232,0.0042451402657204245,0.002660979758143962,3.7841298032504436e-07,0.9852029746008774,0.00023185340323005684,0.0034494936261628066,0.00014867073551130022,0.0004595087333683702
"import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# Load the MNIST dataset
mnist = input_data.read_data_sets(""MNIST_data/"", one_hot=True)

# Inputs and Outputs
x = tf.placeholder(tf.float32, [None, 784])
y_ = tf.placeholder(tf.float32, [None, 10])

# Neural Network Model
W = tf.Variable(tf.zeros([784, 10]))
b = tf.Variable(tf.zeros([10]))

# Softmax Output
y = tf.nn.softmax(tf.matmul(x, W) + b)

# Cost Function
cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))

# Training
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

init = tf.initialize_all_variables()

sess = tf.Session()
sess.run(init)

# Train
for i in range(10000):
  batch_xs, batch_ys = mnist.train.next_batch(100)
  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})

# Test
correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
print(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))",css,python,0.01142336105779736,0.3807125467817135,0.017694826882810533,0.0004852029703051541,0.007995334018611818,0.008502790091320092,0.5321711957964231,0.0018605986146741354,0.039154143786344235
"def subtract_timestamps(time1, time2):
    time1_minutes = int(time1[0:2]) * 60 + int(time1[3:5])
    if ""PM"" in time1:
        time1_minutes += 12 * 60    
    time2_minutes = int(time2[0:2]) * 60 + int(time2[3:5])
    if ""PM"" in time2:
        time2_minutes += 12 * 60

    diff_minutes = time1_minutes - time2_minutes
    diff_hours = int(diff_minutes / 60)
    diff_minutes = diff_minutes - diff_hours * 60

    print(str(diff_hours) + "":"" + str(diff_minutes))

subtract_timestamps(""4:00:00 AM"", ""3:00:00 PM"")
# Output: 12:00",python,java,0.0006855011135003303,0.00010033448456590202,0.00031779381077102077,0.9962746374109508,6.724043948671078e-05,1.2636278683163744e-08,0.0025288458095458475,3.917600079556511e-06,2.171669482119386e-05
"def calculate_sum(my_list):
    """""" Calculate the sum of all the elements in the list. """"""
    sum = 0
    for elem in my_list:
        sum += elem
    return sum

my_list = [1,2,3,4,5,6]
total_sum = calculate_sum(my_list)
print(""The sum of all elements in the list is: %d"" %total_sum)",python,python,0.0037293060681345028,0.007309254256042613,0.01191570310874067,0.05059053426496304,0.3450099335523272,0.0015891792252907353,0.4464009988726523,0.0329695369085293,0.10048555374331977
"def remove_key_by_value(dictionary, value):
    keys_to_remove = []
    for key, val in dictionary.items():
        if val == value:
            keys_to_remove.append(key)

    for key in keys_to_remove:
        del dictionary[key]
    return dictionary",python,css,1.72563291200826e-06,0.9713696851472421,1.2798172552560963e-05,3.6974466920937174e-07,5.545584085905289e-06,0.028585471905419244,5.549923187914621e-06,1.3247920272603865e-05,5.605969658567512e-06
"def insert(arr, x):
    i = len(arr)-1
    while (i >= 0 and x < arr[i]):
        arr[i+1] = arr[i]
        i = i-1
    arr[i+1] = x
    return arr
  
# Input array and element 
arr = [1, 2, 3, 5] 
x = 4
  
# Calling Insert Function 
arr = insert(arr, x) 
  
# Print the modified array 
print(arr)",sql,matlab,2.2899197002386798e-05,9.861095432666677e-05,5.461456935679306e-06,2.9763283657624902e-06,0.00010741733764202812,0.9690510442176283,0.030635311993922408,1.205831107501523e-06,7.50726830691407e-05
"import json

class Person:
    def __init__(self, json_object):
        self.first_name = json_object[""first_name""]
        self.last_name = json_object[""last_name""] 

    def __str__(self):
        return self.first_name + ' ' + self.last_name

json_object = json.loads('{""first_name"": ""John"", ""last_name"": ""Smith""}')

person = Person(json_object)
print(person)",css,python,0.0017012184760082862,0.04047582740222101,0.030917991666530757,8.123451699038541e-05,0.004586088422480045,0.0001094926138518885,0.904456963373325,0.016468779209131673,0.0012024043194609083
"def generateEvenNumber(start, end):
  for num in range(start, end+ 1):
    if num % 2 == 0:
      yield num
 
evens = []
start = 1
end = 10
for even in generateEvenNumber(start, end):
  evens.append(even)
 
print(evens)",python,matlab,1.4870312216380403e-06,5.665492739102626e-08,4.064140579893095e-06,1.3330159270487423e-07,3.7323325645677847e-07,0.9969296384306684,0.003058592092561585,2.6071110749690825e-06,3.048004117009102e-06
"def string_to_int(string):
    num = 0 
    for char in string:
        num = num * 10 + (ord(char) - ord('0')) 
    return num",python,matlab,3.653622558002175e-09,3.4688631182224755e-09,3.3507162551903344e-06,0.006289743027318274,4.023483617573007e-10,0.9871621924174434,0.006534298174950142,9.662862240083472e-06,7.452769588184209e-07
"#!/usr/bin/env python
# skeleton.py

def functionA():
    pass

def functionB():
    pass

def main():
    functionA()
    functionB()

if __name__ == ""__main__"":
    main()",python,bash,0.9999999798558186,1.1488760101022065e-09,2.7814587594629376e-09,1.8608779882186165e-12,7.337700082420354e-10,2.1067558567653636e-11,1.1045913899180477e-08,4.400733233279065e-09,1.0500883732483419e-11
"def calculate_total_cost(base_price, additional_cost):
 return base_price + additional_cost",python,python,0.0016329463235998734,0.006225001399708222,0.003551321288522702,0.00039618687130780523,0.0011067410950131658,0.00020597094506602488,0.9838068484886983,0.0011958465925075014,0.001879136995576472
"def sum_divisors(num): 
    r = 0
    for i in range(1, num + 1):
        if num % i == 0:
            r += i
    return r

num = int(input(""Input a number: ""))
print(""Sum of all divisors of input is"", sum_divisors(num))",python,matlab,1.2131323611096692e-05,8.39903995367021e-11,9.317639379850897e-06,0.00021373425566879414,1.717984492176321e-06,0.9912441140329626,0.008517394444210258,1.3724635750793368e-06,2.177721095509472e-07
"def removeRepeats(arr):
    result = []
    seen = set()
    for num in arr:
        if num not in seen:
            result.append(num)
            seen.add(num)
     return result

res = removeRepeats([2, 3, 3, 4, 5, 4])
print(res)",python,matlab,1.3629692487945537e-09,5.061495800286899e-11,3.3066504354943268e-09,2.379800292401243e-09,6.396337990828139e-10,0.9999939309976296,6.056071089743143e-06,2.820755071585805e-09,2.3708568651434846e-09
"def is_armstrong_number(num): 
    n = len(str(num)) 
      
    # initialize sum 
    sum = 0 
  
    # find the sum of the cube of each digit 
    temp = num 
    while temp > 0: 
        digit = temp % 10
        sum += digit ** n 
        temp //= 10
  
    # if num is equal to the sum,  
    # then the number is an Armstrong number 
    if num == sum: 
        return True 
    else: 
        return False",python,matlab,4.4642692241699236e-08,1.181622518590327e-09,2.1965526265073056e-06,1.976710615229817e-06,5.3770237771030175e-06,0.9999886731251073,2.663065854354315e-07,2.4118092814518043e-08,1.4403388808153253e-06
"import re

def check_lowercase(text):
    pattern = r""^[a-z]*$""
    if re.fullmatch(pattern, text):
        return True
    else:
        return False",python,python,0.0002906433285156409,0.0005596301775329972,0.030804574471907625,1.413438644126954e-06,2.1862546406974932e-05,6.676315173728683e-06,0.9680794331925571,0.0001496912743630438,8.607525489890635e-05
"def create_dictionary(n):
  # Create an empty dictionary
  dictionary = {}
  
  # Loop through each number
  for i in range(1, n + 1):
    # For each number, add an entry to the dictionary
    dictionary[i] = i + 1
    
  # Return the dictionary
  return dictionary",python,python,0.00020164961237464622,0.15228079443919557,0.0022558291404492273,0.0002015534843556444,0.0012996097864782733,0.0003221876412489575,0.8242946565769286,0.003688940433974733,0.015454778884994209
"def sortAlphabetically(strings): 
    strings.sort() 
    return strings 

#Test 
strings = [""hello"", ""world"", ""good"", ""morning"", ""programming""]
sorted_strings = sortAlphabetically(strings) 
print(*sorted_strings)",python,python,0.05506249190996321,0.014668333747772409,0.0028509706094929236,1.2353721201266355e-08,0.012331257136691132,0.00012222062868070217,0.9041661139640796,0.001994366540741799,0.008804233108857279
"arr = [1, 3, 5, 3, 7, 3, 6]
target = 3

def findIndex(arr, target): 
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
  
    return -1
  
# Driver Code 
index = findIndex(arr, target) 
print(""Index of"", target, ""is"", index) 

// Output: Index of 3 is 1",python,python,0.000764786293770031,7.104520138698811e-05,0.0008071570758499555,0.001265827429611625,0.00184511255004192,0.014251928939615589,0.9804060488773243,3.43106120743812e-05,0.0005537830203253163
"import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Read the dataset
data = pd.read_csv('data.csv')
X = data.iloc[:, [0,1]]
y = data.iloc[:, 2] 

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

# Create an instance of Logistic Regression model
classifier = LogisticRegression()

# Fit the model on the training data
classifier.fit(X_train, y_train)

# Make predictions using the test data
y_pred = classifier.predict(X_test)",python,typescript,0.03281191337857012,0.16292060335142244,0.011574971920919557,1.6852034591859808e-06,0.00022779812680334208,6.8554390495360034e-06,0.11194701193522537,7.33844589841148e-05,0.6804357761855663
"def maxSubArraySum(arr, length):  
    max_so_far = 0
    max_ending_here = 0 
    for i in range(0, length):  
        max_ending_here = max_ending_here + arr[i]  
        if max_ending_here < 0:
            max_ending_here = 0
        elif max_so_far < max_ending_here: 
            max_so_far = max_ending_here  
    return max_so_far",python,python,0.0036226454566405017,0.003588965202417476,0.0038544017384012177,0.0006880720759989911,0.007604750527072257,0.38153895533646154,0.5942534559633921,0.0014084746271838355,0.003440279072432115
"def compare_list(list1, list2): 
 
    # store comparison in results  
    results = [] 
  
    # iterate through lists 
    for x in list1: 
        for y in list2: 
            if x == y:  
                results.append(x) 
  
    # return result 
    return results 

# Driver code  
list1 = [1, 2, 3, 4, 5] 
list2 = [2, 3, 8, 9, 10] 

print(compare_list(list1, list2))",python,python,6.290702470789223e-05,0.00262611389136658,0.0002818264326440308,2.0027638571179902e-05,0.004079286774273321,0.006485335391422348,0.9853896692444863,0.0008388674795923695,0.00021596612293580146
"import random
import numpy as np

def differential_evolution(f, bounds, mut=0.8, crossp=0.7, popsize=20, its=1000):

 # Initialization
 dim = len(bounds)
 population = np.random.rand(popsize, dim)
 min_b, max_b = np.asarray(bounds).T
 diff = np.fabs(min_b - max_b)
 population_denorm = min_b + population * diff

 fitness = np.asarray([f(ind) for ind in population_denorm])

 best_idx = np.argmin(fitness)
 best = population_denorm[best_idx]

 for i in range(its):
 for j in range(popsize):

 # Mutation
  idxs = [idx for idx in range(popsize) if idx != j]
 a, b, c = population[np.random.choice(idxs, 3, replace = False)]
 mutation = a + mut * (b - c)
 mutation = np.clip(mutation, 0, 1)

 # Crossover
 cross_points = np.random.rand(dim) < crossp
 if not np.any(cross_points):
   cross_points[np.random.randint(0, dim)] = True
 trial = np.where(cross_points, mutation, population[j])
 trial_denorm = min_b + trial * diff

 # Selection
 f = f(trial_denorm)
 if f < fitness[j]:
   fitness[j] = f
   population[j] = trial
   if f < fitness[best_idx]:
     best_idx = j
     best = trial_denorm

 # Printing
 print(""Iteration: {}, Best Value: {:.4f}"".format(i, f))

 return best

# Function to optimize
def function(x):
 return x**2 - 0.5 * x - 2

# Search Space
bounds = [(-10, 10)]

# Run the optimization
result = differential_evolution(function, bounds)
print(""Optimized Value: {:.4f}"".format(function(result)))",css,matlab,0.0324930499558198,0.03447264348465239,0.013216862018872753,0.00011196137118157622,0.19319731769007556,0.4313084392512227,0.1280353975811679,0.16496816728217062,0.0021961613648367457
"import json

data = {
    'name': 'root',
    'children': [
        {
            'name': 'a',
            'children': [
                {
                    'name': 'b',
                    'children': []
                }
            ]
        }
    ]
}

json_string = json.dumps(data, indent=4)
print(json_string)

# output
{
    ""name"": ""root"",
    ""children"": [
        {
            ""name"": ""a"",
            ""children"": [
                {
                    ""name"": ""b"",
                    ""children"": []
                }
            ]
        }
    ]
}",css,java,0.0012056715851835368,0.027983126968618894,0.0004657591849868882,0.96831090754082,3.5869194629001066e-08,1.2462397382108604e-05,0.0019549434508068907,3.150763778682266e-05,3.5585365220303584e-05
"# import the module
import calendar

# print the calendar 
print(calendar.month(2021, 5))",python,python,0.019523177531533688,0.06394283605031717,0.02343645421834409,0.00017721869318662706,0.011878813261926956,0.001384171331115415,0.7077003863051134,0.005073328694378821,0.16688361391408385
"def fibonacci(n): 
 if n == 0: 
 return 0
 elif n == 1: 
 return 1
 else:
 return fibonacci(n - 1) + fibonacci(n - 2)",python,python,2.3785920079166204e-06,7.931814103901814e-06,5.072867569979797e-06,4.034051151118403e-07,1.4727500908182625e-06,3.319625913221078e-07,0.9999787480362066,2.5764372327806895e-06,1.0841350817234062e-06
"import numpy as np
from sklearn.linear_model import LinearRegression

x = np.array([[5, 6], [3, 4], [7, 9], [4, 5]])
y = np.array([7, 5, 11, 7])

model = LinearRegression().fit(x, y)

print(model.coef_)
print(model.intercept_)",python,bash,0.9908402359849419,7.698940833842953e-05,3.159851047721039e-05,4.775555238724806e-07,2.8446602266492793e-07,1.3627914617546515e-05,0.009032361433111763,2.0560314125558107e-10,4.424521363520309e-06
"my_list = []

while True:
    user_input = input('Type something: ')
    if user_input == 'stop':
        break
    my_list.append(user_input)

print(my_list)",python,python,0.008275021762729788,0.07077772661605962,0.13985856548054118,0.0013871969246883648,0.00289182399395612,0.07762059477083175,0.6947356155201615,0.003390281821551599,0.0010631731094801343
"import keras
from keras.models import Sequential
from keras.layers import Dense, Activation

data_dim = 30
num_classes = 2

model = Sequential()
model.add(Dense(32, activation='relu', input_dim=data_dim))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics=['accuracy'])
model.fit(x_train, y_train,
          epochs=10,
          batch_size=32)",python,bash,0.7099336277536087,0.0026304300522201904,0.08145428358099734,0.0005184730362456832,4.553798380454457e-05,9.22370843802385e-06,0.20424718786272344,2.759439507841931e-06,0.0011584765824542832
"def factorial(x):
    result = 1
    for i in range(1,x+1):
        result = result*i
    return result
    
print(factorial(5))",python,python,3.524552703566471e-08,4.618972685056599e-06,2.4201015033984904e-07,3.896708696129185e-09,4.595386244384804e-08,1.9532346742079915e-06,0.9999907985797964,2.200648901452107e-06,1.0145769435546967e-07
"import matplotlib.pyplot as plt

def create_histogram(data):
    plt.hist(data, bins=20)
    plt.title('Histogram of Input Data')
    plt.show()

# Example data
data = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1]

create_histogram(data)",python,html,2.4796710553268152e-05,0.026906853016564657,0.917904614305301,0.00020072466920538688,0.00010050652014698198,1.087575731565656e-05,0.048502247989949926,0.0035342131557926583,0.0028151678751704642
"import requests 
import json 
import pandas as pd

def predict_tree(geojson, tree_type):
    # Make a request to the API 
    url = ""http://api.example.com""
    response = requests.post(url, data=geojson)
    
    # Parse the json of the response
    data = json.loads(response.text)
    
    # Check for errors
    if data[""error""]:
        print(data[""error""])
        return
    
    # Create a pandas DataFrame from the response
    df = pd.DataFrame(data[""tree_data""])
    
    # Calculate the probability of the tree_type
    risk = df[tree_type].sum() / df[""total_trees""].sum()
    
    return risk",python,css,2.0154556559635713e-09,0.9893979616817649,0.00040095613568320745,0.0004951960620506945,2.8226958992668764e-05,3.473822479829407e-08,0.0013444520376556168,0.000832733611091661,0.007500436759080613
"def to_int(string):
    '''This function takes a string and converts it to an integer.'''
    return int(string)",python,java,6.478377236359701e-15,3.450930865062796e-10,1.6703262406737782e-10,0.999999947701549,3.822541102508147e-13,9.106049862772382e-15,4.061073324846319e-08,1.9732059433950637e-09,9.20198837672207e-09
"from flask import Flask, jsonify, request

# Initialize the Flask application
app = Flask(__name__)

# Define a list to hold the resource
<Resource Name> = []

# Define the route for the resource
@app.route('/<Resource Name>', methods=['GET', 'POST', 'DELETE'])
def <Resource Name>_route():
 if request.method == 'GET':
 # Return the list of <Resource Name>
 return jsonify(<Resource Name>)

 elif request.method == 'POST':
 # Create a <Resource Name>
 <Resource Name>.append(request.get_json())
 # Return the added <Resource Name>
 return jsonify(<Resource Name>[-1])

 elif request.method == 'DELETE':
 # Delete a <Resource Name>
 <Resource Name>.remove(request.get_json())
 # Return an empty list
 return jsonify([])

if __name__ == '__main__':
 app.run(debug=True)",sql,java,0.10606485386628238,0.05824406945760415,0.0007615885575558498,0.8284485946432844,1.1982965438035199e-05,1.9859684378882593e-05,0.0030507828872259266,0.0022010850828632546,0.0011971828553671254
"def fibonacci(n):
    # store the already calculated values in the dictionary
    memo = {0:0, 1:1}
    if n in memo:
        return memo[n]
    else:
        memo[n] = fibonacci(n-1) + fibonacci(n-2)
        return memo[n]",css,python,0.009101929525962392,0.04715075069491287,0.012539437362372336,0.0005608207801007873,0.01875657904645604,0.009775707475739777,0.8547879645248968,0.0032621069283932888,0.04406470366116582
"import numpy as np

class Perceptron:
    def __init__(self, num_inputs, learning_rate=0.01):
        self.learning_rate = learning_rate
        # Initiailizing the weights to random values
        self.weights = np.random.rand(num_inputs)
    
    def predict(self, inputs):
        # Compute the dot product between inputs and weights
        weighted_sum = np.dot(inputs, self.weights)
        # The output is either 0 or 1 depending on the weighted sum
        result = int(weighted_sum > 0)
        return result
    
    def train(self, inputs, desired_output):
        # Calculate the prediction error
        prediction = self.predict(inputs)
        error = desired_output - prediction
        # Update the weights
        self.weights += self.learning_rate * error * inputs",sql,python,0.0062894719470580895,0.048231783270725366,0.024156870525276233,0.0001575518680300788,0.00101752584146202,1.068621694883994e-06,0.6929761245730502,0.11006375576706715,0.11710584758563593
"# Import the necessary libraries 
from sklearn.datasets import fetch_openml
import numpy as np
from sklearn.linear_model import LogisticRegression

#Load the dataset
mnist = fetch_openml('mnist_784')

# Split into features and labels
X = mnist.data
y = mnist.target

# Reshape data to be valid
X = X.reshape((X.shape[0], -1))
print(X.shape, y.shape)

# Create a Logistic Regression classifier 
clf = LogisticRegression()

# Fit the model to the data 
clf.fit(X, y)",python,typescript,0.03435785111210541,0.01793465664251475,0.0003259173701114049,4.0972440031765823e-07,1.7558353916253143e-05,1.92947135947035e-06,0.024846362843915764,5.206501556573438e-07,0.922514793831521
"def string_length(string):
    print(len(string))",python,java,3.638282432846289e-13,5.732664485885707e-07,3.32774049556031e-08,0.9996466973013028,6.232490002730072e-15,3.316660213532314e-11,0.00034692688318335913,5.762220426110911e-06,7.017697533947957e-09
"def find_length(string):
  return len(string)

print(find_length(""Hello World!"")) # Output: 12",python,python,0.0007172649189745534,0.001757711668502142,0.0008653136174587391,1.7309381885111211e-06,4.980689546279558e-07,1.8608557093710653e-07,0.996088602373352,0.0005613560003556999,7.336328642704387e-06
"class ShoppingCart:
    def __init__(self):
        self.cart_items = []
            
    def add_item(self, item):
        self.cart_items.append(item)

    def remove_item(self, item):
        self.cart_items.remove(item)

    def calculate_cost(self):
        total_cost = 0
        for item in self.cart_items:
            total_cost += item.price
        return total_cost",python,python,9.566168239806369e-05,0.027388265767592877,0.25842018498583536,3.274767056821304e-06,0.0008505380780586875,1.1828915743514846e-05,0.6927816074079897,0.02040926734487075,3.937105045416032e-05
"for num in [1, 2, 3, 4, 5]:
    print(num)",python,matlab,1.8239301719389027e-13,1.5483460190802324e-18,8.285850405044161e-13,1.644079699610327e-14,1.2321298422108543e-13,0.9999999999717633,2.6468481890463105e-11,3.3781691915304376e-13,2.798519615087935e-13
"import random

def generate_random_string():
    char_list = ""abcdefghijklmnopqrstuvwxyz0123456789""
    random_string = """"
    for _ in range(5):
        random_string += random.choice(char_list)
    return random_string",python,python,0.0009053524504261096,0.00022604002416585248,0.0016824180643445319,2.3894718377990312e-05,0.00017329452028761228,0.013260608332379277,0.799264717755023,0.18395503657594084,0.0005086375590547797
"def sum_elements(arr):
    return sum(arr) # return sum of elements of arr with one line of code.",python,typescript,0.000897270119650933,0.00012529736850958677,0.0003011401494499286,0.01457051785388386,0.0024116957810977,0.0015652760805092815,0.0976452727179082,8.682303312801093e-05,0.8823967068958625
"from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd

# Initialize Webdriver
driver = webdriver.Firefox()

# Open the IMDB website
driver.get('https://www.imdb.com/chart/top?ref_=ft_250')

# Wait until the elements on the web page are loaded
WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, ""chart"")))

# Parse and store the information to a pandas dataframe
titles = driver.find_elements_by_class_name('titleColumn')
ratings = driver.find_elements_by_class_name('ratingColumn')
df = pd.DataFrame(columns = ['title', 'rating'])

for title, rating in zip(titles, ratings):
    df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True)

# Close the browser
driver.close()",css,typescript,0.00017168864330892837,0.24882695244135317,0.28408560807457833,0.014677003160422347,0.0028724784236957932,3.981677792333616e-05,0.024774736583911716,0.0018613526004703437,0.422690363294336
"from tkinter import *

root = Tk()
root.title(""Login Page"")

# Create window

window_width = 400
window_height = 350
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
x_cord = int((screen_width/2) - (window_width/2))
y_cord = int((screen_height/2) - (window_height/2))

# Set window geometry

root.geometry(""{}x{}+{}+{}"".format(window_width, window_height, x_cord, y_cord))

# Create widgets

user_label = Label(root, text=""Username:"")
user_label.place(x=50, y=150)

username_input = Entry(root, width=30)
username_input.place(x=130, y=150)

password_label = Label(root, text=""Password:"")
password_label.place(x=50, y=200)

password_input = Entry(root, width=30, show=""*"")
password_input.place(x=130, y=200)

def login():
   #Verify input and authenticate user
   print(""Username: {}\nPassword: {}"".format(username_input.get(),password_input.get()))

login_button = Button(root, text=""Login"", command=login)
login_button.place(x=180, y=230)

# Create event loop

root.mainloop()",python,python,0.015585929789333567,0.2736575204541848,0.07250050916722142,0.017175397818246455,0.0014051385601210743,5.091450907857683e-05,0.476393782792109,0.11114976800274776,0.032081038906957494
"def findMaxIndex(arr):
    """"""This function finds the maximum index of an array's sub-array.""""""
    maxIndex = 0
    currentMax = 0
    for i in range(1, len(arr)):
        if arr[i] > arr[currentMax]:
            maxIndex = i
            currentMax = i
    return maxIndex

arr = [2, 3, 4, 5, 7, 9, 11]
maxIndex = findMaxIndex(arr)
print(maxIndex) # Output: 5",python,matlab,1.4718268072651014e-06,3.470674968860323e-08,3.795406680287963e-07,3.799942285195284e-08,1.6674463681450223e-05,0.9991550936993031,0.0008262281659777856,2.1933246374532003e-09,7.740406511262663e-08
"def menu():
    
    menu_items = {
        '1': 'Apple',
        '2': 'Orange',
        '3': 'Banana',
        '4': 'Exit'
    }
    
    print(""Menu Items:"")
    print(""1. Apple"")
    print(""2. Orange"")
    print(""3. Banana"")
    print(""4. Exit"")
    while True:
        selection = input(""Enter your selection: "")
        if selection in menu_items:
            if selection == '4':
                break
            else:
                print(""Selected item:"", menu_items[selection])
                break
        else:
            print(""Invalid selection!"")

menu()",css,python,0.0034560586794440853,0.30624285749826136,0.01705087335490165,0.0001252408042921241,0.001132210930075163,0.005479445611710777,0.653694248561268,0.011648673375778833,0.0011703911842681483
"def find_smallest(arr):
    smallest = arr[0]
    for i in range(1, len(arr)):
        if arr[i] < smallest:
            smallest = arr[i]
    return smallest",python,matlab,9.005314045223812e-06,1.2207981763533825e-05,1.0815830557202258e-05,2.241641333221404e-06,1.8513246618747336e-06,0.9553027485855492,0.0446482436141163,1.1809015518593713e-06,1.1704806421616385e-05
"import tkinter as tk
 
root = tk.Tk()

# Create greeting label
greeting = tk.Label(text='Hello World!')
greeting.pack()

tk.mainloop()",python,python,0.22534609349845022,0.023573105097343953,0.025072209322621376,2.3058185210956372e-07,0.00987301290773365,0.0018087478469865478,0.6112115910115307,0.005522955118941049,0.09759205461454039
"# import the necessary packages
import pygame
import requests
from gtts import gTTS

# define an API call to scrape website text
url = 'example.com'
content = requests.get(url).text

# initialize the pygame module
pygame.mixer.init()

# generate the text-to-speech audio
tts = gTTS(content)

# save the text-to-speech audio
tts.save('text.mp3')

# play the audio
pygame.mixer.music.load('text.mp3')
pygame.mixer.music.play()

# wait for the audio to finish
while pygame.mixer.music.get_busy(): 
    pygame.time.Clock().tick(10)",python,typescript,5.257853850769572e-05,0.17405590266278154,0.009221281265223407,0.025700830294629384,0.012849255297110269,0.00022665350182995853,0.06876099207315019,0.17294089982246147,0.5361916065443062
"def string_lengths(strings):
    lengths = []
    for string in strings:
        lengths.append( (len(string), string) ) 
    return lengths",python,java,1.7774832815942944e-10,5.2110196621166106e-05,1.8277687664648175e-06,0.9987492573893644,8.664482021087578e-12,5.232501590910637e-07,0.0011274518096861825,6.805924326079163e-05,7.701557290526671e-07
"def add_item_to_beginning(arr, new_item):
    return [new_item] + arr",python,python,0.0014726580988326183,0.006692837744462335,0.0018150144034208254,0.0005152334123217019,0.0009827646571746531,0.08829052804786787,0.8979161488898869,0.00018765519035332347,0.002127159555679916
"from django.db import models

# Create your models here.
class Post(models.Model):
 title = models.CharField(max_length=255)
 text = models.TextField()

class Comment(models.Model):
 post = models.ForeignKey(Post, on_delete=models.CASCADE)
 text = models.TextField()

# In your migrations file:

from django.db import migrations, models

def create_posts_and_comments(apps, schema_editor):
 Post = apps.get_model('app', 'Post')
 Comment = apps.get_model('app', 'Comment')

 post = Post.objects.create(
 title='My first post',
 text='Hello world!'
 )

 Comment.objects.create(
 post=post,
 text='Nice post!'
 )

class Migration(migrations.Migration):
 dependencies = [
 # other dependencies
 ]

 operations = [
 migrations.CreateModel(
 name='Post',
 fields=[
 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
 ('title', models.CharField(max_length=255)),
 ('text', models.TextField()),
 ],
 ),
 migrations.CreateModel(
 name='Comment',
 fields=[
 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
 ('post', models.ForeignKey(on_delete=models.CASCADE, to='app.Post')),
 ('text', models.TextField()),
 ],
 ),
 migrations.RunPython(create_posts_and_comments)
 ]",python,bash,0.9989510735255154,0.0010230203775205113,2.620472619690428e-07,8.697460291067718e-08,6.410073251802796e-07,2.7284665290542876e-07,3.6076401845219477e-06,8.317464375071646e-08,2.0952406292768023e-05
"def get_string_lengths(list_strings):
    res = {}
    for string in list_strings:
        res[string] = len(string)
    return res

test_strings = ['help', 'me', 'please']
result = get_string_lengths(test_strings)
print(result)",python,java,1.008036952949856e-09,0.0019262115282602753,1.1584943307593387e-05,0.789548250043735,2.347033982461814e-10,7.120086766336764e-08,0.20672533058959824,0.001786247860484799,2.302591005908125e-06
"import subprocess

def deploy_application(app_name, manifest_file):
 # Run 'kubectl' command to deploy the application
 result = subprocess.run(
  ['kubectl', 'apply', '-f', manifest_file],
  stdout=subprocess.PIPE
 )

# Check the return code
if result.returncode == 0:
 print(f'Application {app_name} deployed successfully')
else:
 print(f'Error deploying application {app_name}: {result.stderr}')",python,typescript,0.18731566904706365,0.0005369489829175184,0.00015746214606289548,7.850083119347996e-07,0.0003672401154060693,2.5014547492289255e-05,0.0075053725377458155,3.2593046852877212e-06,0.8040882483103146
"def reverse(word):
    return word[::-1]

print(reverse('Hello World'))",python,bash,0.9461397459837052,7.76338556461461e-05,0.00026618234409879065,2.0087545933724535e-14,0.0008886080715068506,3.007289035513906e-07,0.05261060003951054,1.1184479569472011e-05,5.744497039326996e-06
"list = [15, 28, 12, 7, 9] # List of numbers
k = 4 # kth smallest element

sorted_list = sorted(list) # sorting the list of numbers

print(""The {}th smallest element is {}"".format(k, sorted_list[k-1])) # print the kth smallest element in the sorted_list using the index (k-1)",python,javascript,0.0008113155696462962,9.62055642580807e-05,0.0002162732129190216,4.061296401836201e-05,0.9856855133291306,0.007150240393673407,0.0003631307112271297,3.5503580010249247e-06,0.005633157897126038
"def multiplication_table(number): 
    for i in range(1, 11): 
        print(number, 'x', i, '=', number*i) 

multiplication_table(number)",python,python,4.190628816687671e-07,3.0482711012710254e-07,3.851626971833818e-06,8.528770321835753e-08,1.2602506376307584e-07,0.014137174447030434,0.9858564990295261,8.199510740767113e-07,7.197426387026703e-07
"# import libraries
import os
import dialogflow

# instantiate dialogflow
import dialogflow_v2 as dialogflow
os.environ[""GOOGLE_APPLICATION_CREDENTIALS""] = ""path/to/credentials.json""

# define the session
session_client = dialogflow.SessionsClient()
session = session_client.session_path('test-project', ""unique-session-id"")

# define the request and response
request = dialogflow.types.TextInput(text=""What is your return policy?"", language_code=""en"")
response = session_client.detect_intent(session=session, query_input=request)

# print results
print('Query text: {}'.format(response.query_result.query_text))
print('Detected intent: {} (confidence: {})\n'.format(
 response.query_result.intent.display_name,
 response.query_result.intent_detection_confidence))
print('Fulfillment text: {}\n'.format(response.query_result.fulfillment_text))",python,css,0.017435241886454976,0.9128108135368926,0.001995524934415025,2.92281379972658e-05,0.0004515775853363749,0.00013372145246069372,0.040294517907914995,0.002972146213550466,0.023877228344977516
"""""""
Find the longest contiguous increasing subsequence 
""""""

def long_increasing_subsequence(arr): 
    n = len(arr) 
    dp = [1 for x in range(n)] 
   
    for i in range (1 , n): 
        for j in range(0 , i): 
            print (i,j) 
            if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): 
                dp[i] = dp[j]+1
   
    maximum = 0
    for i in range(n): 
        maximum = max(maximum, dp[i])  

    return maximum 

arr =[3,6,9,1,2,3,4,5] 
longest_subsequence_length = long_increasing_subsequence(arr)
print(longest_subsequence_length) # prints 5",python,matlab,4.329746580566928e-06,1.0728242028227913e-06,4.01945151535318e-06,5.643300894607727e-08,2.1197993245750022e-07,0.7435769417005392,0.25639315340585106,1.1712543651409188e-05,8.501914718301133e-06
"import time

def func():
    start=time.time()
    # Optimized code using range instead of while loop
    lst = range(100000000)
    end=time.time()
    print(end-start)

func()",python,python,0.0007682988895181124,0.0013073421058583921,0.000603670607936577,1.9930230611286402e-05,0.0003724805953397603,0.00018932555808461407,0.9875604873089714,0.0011748778653996922,0.008003586838280115
"# Defining a function to keep track of the total number of times each word in an input string has been encountered
def count_words(input_string):
    words_dict = dict()

    for word in input_string.split():
        if word not in words_dict:
            words_dict[word] = 1
        else:
            words_dict[word] += 1

    return words_dict

# Testing the count_words() function
input_string = ""This is a test string and this is a test string again""
print(count_words(input_string)) # {'This': 2, 'is': 2, 'a': 2, 'test': 2, 'string': 2, 'and': 1, 'again': 1}",css,java,0.00010565918621120599,0.01163009557095915,0.007954239315411848,0.7382361433520628,0.00018682754750324536,9.814417461656578e-05,0.17802880081521166,0.00837923685090421,0.05538085318711936
"def bubble_sort(list):
 for x in range(len(list)-1, 0, -1):
  for y in range(x):
   if list[y] > list[y+1]:
    list[y], list[y+1] = list[y+1], list[y]
 
 return list

list = [4,7,2,9,1]
print(bubble_sort(list))
##
12. Instruction: Generate a Rust program to calculate the mean of relevant values in a list. 
12. Input:
A given list of integers, for example, [2,4,6,8,10].
12. Output:
fn main() {
 let nums = vec![2, 4, 6, 8, 10]; // given list
    
 let mut sum = 0;
 for num in &nums {
  sum += num;
 }
 let mean = sum / nums.len() as f32;
 
 println!(""The mean of the list is {}"", mean);
}",python,javascript,1.9251178123035838e-10,3.017277040202737e-10,2.7803177827740784e-08,2.64368801599208e-07,0.999958693992866,3.963332714580517e-05,1.360322474666896e-06,4.137619051514993e-09,1.5553675586933588e-08
"def fahrenheit_to_celsius(fahrenheit):
 return (fahrenheit - 32) * 5/9",python,python,0.0371829670603864,0.07310627566187133,0.03133011638654647,0.0029191972951620577,0.007928143329202745,0.004273580298237634,0.8189729473949273,0.005409714633036969,0.01887705794062913
"def quicksort(array):
 if len(array) < 2:
 return array
 else:
 pivot = array[0]
 less = [i for i in array[1:] if i <= pivot]
 greater = [i for i in array[1:] if i > pivot]
 return quicksort(less) + [pivot] + quicksort(greater)

array = [1, 4, 5, 2, 8, 6]
result = quicksort(array)
print(result)",python,matlab,1.754324968836559e-07,9.314362616463884e-08,4.881654328944144e-08,2.8348413228535037e-09,3.5786621824513046e-09,0.9999995956894352,2.3732758774261714e-10,3.3048849640561065e-08,4.7218217886454634e-08
"def bubble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j+1]:
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
    return arr

result = bubble_sort([12, 3, 10, 7, 5, 11])
print(result)",python,matlab,3.6471596359995437e-09,1.4218606167440535e-08,5.910862115011382e-09,1.1120378626815723e-09,2.2927871377048137e-09,0.9984194580819169,0.0015805095533279454,4.800814514926228e-10,4.7032208878241836e-09
"keys = [""a"", ""b"", ""c""]
values = [1, 2, 3]

d = dict(zip(keys, values))
print(d) # output: {'a': 1, 'b': 2, 'c': 3}",css,css,0.00907577711369133,0.8058574278829798,0.0245971090903703,0.00036823777066029333,0.00035073263900324076,0.0003022198868225925,0.15526888849216416,0.0015662586481865453,0.002613348476121725
"def find_max(nums):
    max_val = nums[0]
    for num in nums:
        if num > max_val:
            max_val = num
    return max_val

nums = [3, 4, 6, 5, 9, 1, 2]
max_val = find_max(nums)
print(max_val)",python,matlab,0.0005779466081569599,2.192552630991775e-05,0.0010075126348832583,0.00010257351127041898,0.011031275721689146,0.9303008147050182,0.055795302255773546,0.0003401919643527346,0.0008224570725455864
"import uuid
from datetime import datetime, timedelta

def authenticate(username, password):
  # Validate user credentials
  # Generate an access token
  access_token = uuid.uuid4().hex
  expires = datetime.utcnow() + timedelta(minutes=60)
  return access_token, expires

# Usage
access_token, expires = authenticate('username', 'password')",python,python,0.010478558323096916,0.10453670926345358,0.011219852705603791,0.0005346437068191489,0.0027563279085602165,0.0016836708758541528,0.8525189728601495,0.010973051745382814,0.005298212611080031
"""""""

We need two special hostnames to connect to: 

StationA

and 

StationB

""""""


from __future__ import with_statement, print_function
from fabric.api import local, settings, abort, run, sudo, cd, hosts, env, execute
from fabric.contrib.console import confirm
from fabric.operations import put, get
from fabric.contrib.project import rsync_project

import re
import subprocess as sp 
import os.path 
from   StringIO import StringIO


current_dir = os.path.dirname(os.path.realpath(__file__))


VNC_LICENSE = [
    ""xxxxx-xxxxx-xxxxx-xxxxx-xxxxx""
]


# TODO: Put a proper deployment mechanism here.
env.key_filename = '/home/alcides/.ssh/zunzun_ec2_keypair_0.pem'

StationA_H = 'ubuntu@54.149.116.230'
StationB_H = 'ubuntu@54.149.116.233'
Beefy_H    = 'ubuntu@52.11.217.155'
# TODO: Make the IP number below deployment-specific...
Beefy_InternalIP = '192.168.112.131'
StationA_InternalIP = '192.168.112.129'
StationB_InternalIP = '192.168.112.130'
HomeDir_Name = ""ubuntu""


@hosts(StationA_H)
def StationA():
    """"""
    Copies code to StationA 
    """"""
    rsync_project(
        local_dir = ""scripts/StationA"",
        remote_dir = (""/home/{HomeDir_Name}/"".format(HomeDir_Name=HomeDir_Name))
        )
    run(""ln -sf /home/{HomeDir_Name}/StationA/onstartup.py /home/{HomeDir_Name}/onstartup.py"".format(HomeDir_Name=HomeDir_Name))


@hosts(StationB_H)
def setup_dns_masq():
    sudo(""apt-get install -y dnsmasq"")
    put(
        local_path  = StringIO(""addn-hosts=/home/{HomeDir_Name}/dnsmasq_more.conf\n"".format(HomeDir_Name=HomeDir_Name)),
        remote_path = ""/etc/dnsmasq.conf"",
        use_sudo=True)



@hosts(StationB_H)
def StationB():
    """"""
    Copies both the chrome plugin and the DNSMasq watcher 
    """"""
    rsync_project(
        local_dir = ""scripts/StationB"",
        remote_dir = (""/home/{HomeDir_Name}/"".format(HomeDir_Name=HomeDir_Name))
        )
    rsync_project(
        local_dir = ""scripts/StationA/chrome_captures_hars"",
        remote_dir = ((""/home/{HomeDir_Name}/StationB/"".format(HomeDir_Name=HomeDir_Name)).format(HomeDir_Name=HomeDir_Name))
        )
    run(""ln -sf /home/{HomeDir_Name}/StationB/onstartup.py /home/{HomeDir_Name}/onstartup.py"".format(HomeDir_Name=HomeDir_Name))


@hosts(StationB_H)
def install_updatednsmasq_service():
    with settings(warn_only=True):
        sudo(""service updatednsmasq stop"")
    put(
        local_path = ""scripts/StationB/configure_dnsmasq.py"",
        remote_path = ""/home/{HomeDir_Name}/StationB/configure_dnsmasq.py"".format(HomeDir_Name=HomeDir_Name) ,
        use_sudo = True
        )
    put(
        local_path = StringIO(""""""
description ""Update dnsmasq""

start on runlevel [2345]
stop on runlevel [!2345]

umask 022

console log

env PATH=/opt/openssl-1.0.2/bin/:/usr/bin:/usr/local/bin:/usr/sbin:/bin 
export PATH
env LD_LIBRARY_PATH=/opt/openssl-1.0.2/lib
export LD_LIBRARY_PATH
env USER={HomeDir_Name}
export USER

script 
    exec /usr/bin/python /home/{HomeDir_Name}/StationB/configure_dnsmasq.py
end script

"""""".format(HomeDir_Name=HomeDir_Name)),
        remote_path = ""/etc/init/updatednsmasq.conf"",
        use_sudo=True )
    sudo(""service updatednsmasq start"")


@hosts(Beefy_H)
def Beefy():
    sudo(""apt-get update"")
    sudo(""apt-get -y install libgmp-dev"")


@hosts(Beefy_H)
def BeefyRehMimic():
    with settings(warn_only=True):
        sudo(""service mimic stop"")
    put(
        local_path  = ""dist/build/reh-mimic/reh-mimic"",
        remote_path = ""/home/{HomeDir_Name}/reh-mimic"".format(HomeDir_Name=HomeDir_Name)
        )
    run(""chmod ugo+x /home/{HomeDir_Name}/reh-mimic"".format(HomeDir_Name=HomeDir_Name))
    sudo(""rm /home/{HomeDir_Name}/mimic -rf"".format(HomeDir_Name=HomeDir_Name) )
    rsync_project(
        local_dir  = ""mimic"",
        remote_dir = ""/home/{HomeDir_Name}/"".format(HomeDir_Name=HomeDir_Name),
        )
    put(
        local_path  = ""scripts/mimic.conf"",
        remote_path = ""/etc/init/mimic.conf"",
        use_sudo    = True
        )
    sudo(""touch /root/.rnd"")
    sudo(""service mimic start"")



@hosts(Beefy_H, StationA_H, StationB_H )
def configure_logging():
    if env.host_string == StationA_H:
        put(
            local_path = StringIO(""""""$template Logentries,""199fb2e1-8227-4f73-9150-70a34a5d5e0c %HOSTNAME% %syslogtag%%msg%\\n""
*.* @@api.logentries.com:10000;Logentries""""""),
            remote_path = ""/etc/rsyslog.d/70-logentries.conf"",
            use_sudo = True )
    elif env.host_string == StationB_H:
        put(
            local_path = StringIO(""""""$template Logentries,""3d2fd756-407a-4764-b130-1dd6f22a1b62 %HOSTNAME% %syslogtag%%msg%\\n""
*.* @@api.logentries.com:10000;Logentries""""""),
            remote_path = ""/etc/rsyslog.d/70-logentries.conf"",
            use_sudo = True )
    else:
        put(
            local_path = StringIO(""""""$template Logentries,""7551d4e0-fa76-466f-8547-8c9a347a9363 %HOSTNAME% %syslogtag%%msg%\\n""
*.* @@api.logentries.com:10000;Logentries""""""),
            remote_path = ""/etc/rsyslog.d/70-logentries.conf"",
            use_sudo = True )
        
    sudo(""service rsyslog restart"")
    # Check logging works...
    sudo(""logger -t test Hello there Logentries"")


@hosts (StationA_H, StationB_H)
def deploy_specific():
    if env.host_string == StationA_H:
        print(""StationA deploy"")
        StationA()
    elif env.host_string == StationB_H:
        print(""StationB deploy"")
        StationB()
    else: 
        print(""Beefy station deploy"")
        Beefy()


@hosts(StationA_H, StationB_H)
def apt_stations():
    sudo(""apt-get update"")
    sudo(""apt-get install -y xutils xbase-clients xfonts-base xfonts-75dpi xfonts-100dpi"")
    sudo(""apt-get install -y python-pip"")
    sudo(""apt-get install -y xdotool"")
    sudo(""apt-get install -y xfwm4"") 


@hosts(StationA_H, StationB_H)
def pythonlibs():
    sudo(""pip install python-daemon>=2.0"")
    sudo(""pip install raven"")


@hosts(Beefy_H, StationA_H, StationB_H)
def ssl():
    """"""
    Copies Openssl and curl to the target hosts...
    """"""
    sudo(""mkdir -p /opt/openssl-1.0.2/"")
    sudo((""chown {HomeDir_Name} /opt/openssl-1.0.2/"".format(HomeDir_Name=HomeDir_Name)))
    rsync_project(
        local_dir = ""/opt/openssl-1.0.2"",
        remote_dir = ""/opt/"",
        extra_opts=""-avz""
        )
    put(
        local_path = ""scripts/ca-certificates.crt"",
        remote_path = ""/etc/ssl/certs/ca-certificates.crt"",
        use_sudo = True
        )


@hosts(Beefy_H, StationA_H, StationB_H)
def ca():
    """"""
    Copies the ca certificate to the home...
    """"""
    put(
        local_path = ""mimic-here/config/ca/cacert.pem"",
        remote_path = (""/home/{HomeDir_Name}/cacert.pem"".format(HomeDir_Name=HomeDir_Name)),
        use_sudo = True
        )


@hosts(StationA_H, StationB_H)
def install_vnc():
    """"""
    
    """"""
    # run(""curl -L -o VNC.tar.gz https://www.realvnc.com/download/binary/1720/"")
    # run(""tar xvf VNC-5.2.3-Linux-x64-ANY.tar.gz"")


    put(
        local_path = ""scripts/VNC-5.2.3-Linux-x64-ANY.tar.gz"",
        remote_path = (""/home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz"".format(HomeDir_Name=HomeDir_Name)),
        use_sudo = True
        )
    run((""tar -xzf /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz"".format(HomeDir_Name=HomeDir_Name)))
    # Get a handier name.... 
    run(""rm -rf vnc"")
    run((""mv /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64 /home/{HomeDir_Name}/vnc"".format(HomeDir_Name=HomeDir_Name)))
    sudo((""/home/{HomeDir_Name}/vnc/vnclicense -add {VncLicense}"".format(
        HomeDir_Name= HomeDir_Name,
        VncLicense = VNC_LICENSE[0]
    )))
    # Will demand some for of interactive input...
    run((""mkdir -p /home/{HomeDir_Name}/.vnc/"".format(HomeDir_Name=HomeDir_Name)))
    run((""mkdir -p /home/{HomeDir_Name}/.vnc/config.d/"".format(HomeDir_Name=HomeDir_Name)))
    sudo((""/home/{HomeDir_Name}/vnc/vncpasswd /home/{HomeDir_Name}/.vnc/config.d/Xvnc"".format(HomeDir_Name=HomeDir_Name)))
    vnc_fix_permissions()

@hosts(StationA_H, StationB_H)
def vnc_fix_permissions():
    sudo((""chown {HomeDir_Name} /home/{HomeDir_Name}/.vnc -R"").format(HomeDir_Name=HomeDir_Name))

@hosts(StationA_H, StationB_H)
def install_vnc_xstartup():
    run((""mkdir -p /home/{HomeDir_Name}/.vnc/"".format(HomeDir_Name=HomeDir_Name)))
    run((""mkdir -p /home/{HomeDir_Name}/.vnc/config.d/"".format(HomeDir_Name=HomeDir_Name)))
    put(
        local_path = ""scripts/vnc-xstartup"",
        remote_path = (""/home/{HomeDir_Name}/.vnc/xstartup"".format(HomeDir_Name=HomeDir_Name))
        )
    run(""chmod ugo+x /home/{HomeDir_Name}/.vnc/xstartup"".format(HomeDir_Name=HomeDir_Name))
    put(
        local_path = ""scripts/xvncfontpath"",
        remote_path = (""/home/{HomeDir_Name}/.vnc/config.d/xvncfontpath"".format(HomeDir_Name=HomeDir_Name))
        )


@hosts(StationA_H, StationB_H)
def setup_google_chrome():
    put(
        local_path = ""scripts/google-chrome-stable_current_amd64.deb"",
        remote_path = (""/home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb"".format(HomeDir_Name=HomeDir_Name)),
        use_sudo = True
        )
    really_setup_google_chrome()


@hosts(Beefy_H, StationA_H, StationB_H)
def ensure_local_hosts():
    # Get the contents of /etc/hosts
    local_file = StringIO()
    get(
        local_path = local_file,
        remote_path = ""/etc/hosts"",
        use_sudo = True 
        )
    hosts_file = local_file.getvalue()
    snippet =  """"""# DO NOT EDIT BELOW BY HAND
{Beefy_InternalIP} instr.httpdos.com
192.168.112.129 ip-192-168-112-129
192.168.112.130 ip-192-168-112-130
192.168.112.131 ip-192-168-112-131
# END DO NOT EDIT BELOW"""""".format(
    StationA_InternalIP = StationA_InternalIP,
    Beefy_InternalIP    = Beefy_InternalIP
    )
    mo = re.search(r""# DO NOT EDIT BELOW BY HAND\n(.*?)\n# END DO NOT EDIT BELOW"", hosts_file, re.MULTILINE)
    if mo:
        part_before = hosts_file[:mo.start(0)]
        part_after = hosts_file[mo.end(0):]
        hosts_file = part_before + snippet + part_after
    else:
        hosts_file += ""\n"" + snippet

    put(
        local_path = StringIO(hosts_file),
        remote_path = ""/etc/hosts"",
        use_sudo = True
        )


@hosts(StationA_H, StationB_H)
def really_setup_google_chrome():
    sudo(""apt-get update"")
    sudo((""apt-get -f install -y"".format(HomeDir_Name=HomeDir_Name)))
    sudo(""apt-get install -y --fix-missing xdg-utils"")
    sudo((""dpkg -i --force-depends /home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb"".format(HomeDir_Name=HomeDir_Name)))
    sudo((""apt-get -f install -y"".format(HomeDir_Name=HomeDir_Name)))


@hosts(StationA_H, StationB_H)
def setup_vnc_service():
    put(
        local_path = ""scripts/vncserv-{HomeDir_Name}.conf"".format(HomeDir_Name=HomeDir_Name),
        remote_path = ""/etc/init/vncserv.conf"",
        use_sudo = True
        )
    put(
        local_path = ""scripts/undaemon.py"",
        remote_path = ""/home/{HomeDir_Name}/undaemon.py"".format(HomeDir_Name=HomeDir_Name)
        )
    run(""chmod ugo+x /home/{HomeDir_Name}/undaemon.py"".format(HomeDir_Name=HomeDir_Name))
    with settings(warn_only=True):
        sudo(
            ""service vncserv start""
            )


@hosts(StationA_H, StationB_H)
def  disable_lightdm():
    contents = StringIO(""manual"")
    put(
        local_path = contents, 
        remote_path = ""/etc/init/lightdm.override"",
        use_sudo=True
        )


@hosts(StationA_H, StationB_H)
def touch_xauthority():
    run(""touch $HOME/.Xauthority"")


@hosts(StationA_H, StationB_H)
def deploy():
    execute(apt_stations)
    execute(setup_dns_masq)
    execute(setup_google_chrome)
    execute(deploy_specific)
    execute(touch_xauthority)
    execute(disable_lightdm)
    execute(StationA)
    execute(StationB)
    execute(Beefy)
    execute(ca)
    execute(ssl)
    execute(install_vnc)
    execute(install_vnc_xstartup)
    execute(ensure_local_hosts)
    execute(setup_vnc_service)
    execute(pythonlibs)
    execute(BeefyRehMimic)
    execute(install_updatednsmasq_service)    
",sql,bash,0.999343886940718,5.657598796255711e-07,0.0006527689522809148,6.82985203397669e-10,1.157291619953514e-06,4.029208567839118e-08,3.051079615728933e-07,2.716766815017721e-07,1.0032957875831374e-06
"import time

def timed(func):
    def get_runtime(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        total_time = end_time - start_time
        return result, total_time
    return get_runtime",python,python,0.002316979531115928,0.056764856464027756,0.001869297573023253,0.0005855522901445663,0.001056455364916886,2.1588583045750207e-05,0.9283004064771574,0.00847876699149372,0.0006060967250746455
"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

if __name__ == ""__main__"":
    n = 10
    if is_prime(n):
        print(""{} is a prime number"".format(n))
    else:
        print(""{} is not a prime number"".format(n))",python,python,4.866167836201146e-06,1.7447876912287604e-05,3.275371677281064e-05,3.030689825825995e-07,2.0144237273765137e-06,0.0026811280577802524,0.9972574685114919,1.7861378804955671e-06,2.2320386159183387e-06
"def remove_duplicate(inlist):
    outlist = []
    for item in inlist:
        if item not in outlist:
            outlist.append(item)
    return outlist

result = remove_duplicate([1, 2, 3, 4, 3, 2, 4])
print(result)",python,python,5.1768675696664334e-05,0.015625175735331665,0.005635408012817604,2.5781185306157443e-06,0.002543823979468647,0.005143065930079986,0.9707284241102848,0.0002472421566513211,2.2513281138680535e-05
"# Importing the libraries
import numpy as np
import pandas as pd

# Import the dataset
dataset = pd.read_csv ('spam.csv')
   
# Cleaning the texts
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
for i in range(0, dataset.shape[0]):
    review = re.sub('[^a-zA-Z]', ' ', dataset['Message'][i])
    review = review.lower()
    review = review.split()
    ps = PorterStemmer()
    all_stopwords = stopwords.words('english')
    all_stopwords.remove('not')
    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
    review = ' '.join(review)
    corpus.append(review)
    
# Creating the Bag of Words model
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer()
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Fitting Naive Bayes to the Training set
from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB()
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

#Fitting the model
 classifier.fit(X_train, y_train)",sql,bash,0.7309191239538155,0.04717509199584024,0.005586329158920886,2.246959968643937e-06,0.000593012210839414,0.00020113840673332927,0.18461070988036596,0.010353707099545188,0.020558640333970854
"from flask import Flask, request 
from requests import get 

app = Flask(__name__) 

@app.route('/', methods=['GET']) 
def home():
    api_key = # API key for open weather API
    url = f'http://api.openweathermap.org/data/2.5/weather?q=current&units=imperial&APPID={api_key}'
    output = request.get(url).json()
    temp = output['main']['temp']
    return f""The current temperature in Fahrenheit is {temp} F""
if __name__ == '__main__': 
    app.run(debug=True, host='0.0.0.0', port=8989)",python,css,0.0013451051043494875,0.9566136807969616,0.033257211294482385,5.296577401125654e-05,0.00023364417801462602,0.0008696744392818875,0.0034111751836773314,0.004171260010689963,4.528321853147962e-05
"import re

def validate_email(email):
    regex = r""^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$""
    if re.search(regex, email):
        print(""Valid Email"")
    else:
        print(""Invalid Email"")",python,python,0.00030665207527462196,0.0186771000774687,0.04737242817614928,0.00025556782917593023,0.0005499642753442677,0.0008547957691450853,0.9297367185477695,0.0011038939104479639,0.001142879339224772
"def insertion_sort(arr): 
 for i in range(1, len(arr)): 
 key = arr[i] 
 j = i-1
 while j>=0 and key < arr[j] : 
 arr[j+1] = arr[j] 
 j -= 1
 arr[j+1] = key 
return arr 
  
arr = [9, 3, 4, 2, 6, 7]
answer = insertion_sort(arr)
print(answer) # [2, 3, 4, 6, 7, 9]",python,python,7.905042798065544e-06,0.000256316359057483,8.867479342058164e-06,3.703237505902948e-06,6.3702544374997685e-06,0.3848667364463264,0.6148132816250113,1.351359987615425e-06,3.546819553382757e-05
"def rank(nums): 
    sortedNums = sorted(nums, reverse = True) 
    for i in range(len(sortedNums)): 
        if sortedNums[i] == nums[i]: 
            print (i + 1, end = "" "") 
  
# Driver code 
nums = [3, 8, 2, 9, 5] 
rank(nums)",python,python,1.3450338131288575e-05,1.317348549934882e-05,1.8131046801255135e-05,2.798920997699244e-06,1.9114695559016573e-06,1.8990642981724958e-05,0.999869019412116,1.6016912298455754e-05,4.6507771618243984e-05
"from http.server import BaseHTTPRequestHandler, HTTPServer
 
# HTTPRequestHandler class
class HTTPServer_RequestHandler(BaseHTTPRequestHandler):
 
  # GET
  def do_GET(self):
    # Send response status code
    self.send_response(200)
 
    # Send headers
    self.send_header('Content-type','text/html')
    self.end_headers()
 
    # Send message back to client
    message = ""Hello world!""
    # Write content as utf-8 data
    self.wfile.write(bytes(message, ""utf8""))
    return
 
def run():
  print('starting server...')
 
  # Server settings
  # Choose port 8080, for port 80
  server_address = ('127.0.0.1', 8080)
  httpd = HTTPServer(server_address, HTTPServer_RequestHandler)
  print('running server...')
  httpd.serve_forever()
 
 
run()",python,html,1.6563280153595702e-06,4.9240583013521286e-05,0.9998591211985517,6.617832462182339e-10,2.5595309066091307e-07,2.780466070727961e-11,7.063798752974356e-05,4.387622610944841e-06,1.4699637600222875e-05
"print(''.join([i.upper() for i in ""hello World""])) # HELLO WORLD",sql,bash,0.9968804118171205,3.7488893842305357e-07,5.886664475973716e-06,4.533911913284514e-24,0.003087473851314722,5.423383614693518e-07,2.1089675614233952e-05,4.160012799168687e-06,6.075137548480931e-08
"def findLongestSubstring(inputString):
 longest = 0
 longestSubstring = ''
 
 for i in range(len(inputString)):
 current = inputString[i]
 count = 1
 currentSubstring = current
 
 for j in range(i + 1, len(inputString)):
 if current == inputString[j]:
 count += 1
 currentSubstring += inputString[j]
 else:
 break
 
 if count > longest:
 longest = count
 longestSubstring = currentSubstring
 
 return longestSubstring

longestSubstring = findLongestSubstring('abcdabca')
print(longestSubstring) # Output: 'abca'",python,python,0.001366930035480358,0.0008979570417191723,0.0014700505365707434,5.815867040417096e-05,0.00014911926974251353,0.03192023058381619,0.9626318923364049,0.0011728635738852582,0.0003327979519766017
"list_1_dict =dict() 
for i in range(len(list_1)): 
    list_1_dict[i] = list_1[i] 
print(list_1_dict)",python,matlab,4.0596685226291436e-13,1.647714202766002e-12,2.917767289427717e-12,6.078151782433818e-14,1.0003389988443762e-13,0.999999995553084,4.441045131818943e-09,1.6637726355951907e-21,7.384619548031272e-13
"def find_duplicates(numbers):
    seen = set()
    duplicates = set()

    for number in numbers:
        if number in seen:
            duplicates.add(number)
        else:
            seen.add(number)
    
    return duplicates",python,python,0.00013327591131217863,0.000642390177224195,0.00042690358752874854,0.025738933542403565,0.00012949170927470806,7.852712159163224e-07,0.9725146658401593,0.00027212749722307537,0.00014142646365814077
"import datetime
 
def get_day_name(date):
    day_name = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%A')
    return day_name
  
if __name__ == '__main__':
    date = '2021-04-19'
    print(get_day_name(date))",python,python,0.0009075250232390845,0.03652521556571222,0.0015185339048075224,0.0001366239204089434,0.00043531840770128866,0.0008676807574276449,0.9574306566028865,0.0014699322557977165,0.0007085135620191402
"#!/usr/bin/env python

import sys
import csv
import math

def parseSlice(s):
    if ""-"" in s:
        parts = s.split(""-"")
        return slice(int(parts[0]) - 1, int(parts[1]))
    else:
        p = int(s)
        return slice(p-1, p)

class SimpleDiff():
    filename = None
    outfile = ""/dev/stdout""
    labels = None
    colname1 = ""avg1""
    colname2 = ""avg2""
    alpha = 1.0
    slice1 = None
    slice2 = None

    def process(self, f, out, header=True):
        nin = 0
        nout = 0
        na = self.slice1.stop - self.slice1.start
        nb = self.slice2.stop - self.slice2.start
        if header:
            f.readline()
        c = csv.reader(f, delimiter='\t')
        for line in c:
            nin += 1
            data1 = line[self.slice1]
            data2 = line[self.slice2]
            data1 = [ float(v) for v in data1 ]
            data2 = [ float(v) for v in data2 ]
            amin = min(data1)
            amax = max(data1)
            bmin = min(data2)
            bmax = max(data2)
            if amin > bmax:
                # A over B
                r1 = amax - amin
                r2 = bmax - bmin
                d = self.alpha * max(r1, r2)
                if (amin - bmax) > d:
                    avg1 = sum(data1) / na
                    avg2 = sum(data2) / nb
                    if avg1 > 0 and avg2 > 0:
                        out.write(""{}\t{}\t{}\t{}\n"".format(line[0], avg1, avg2, math.log(avg1/avg2, 2.0)))
                        nout += 1
            elif bmin > amax:
                # B over A
                r1 = amax - amin
                r2 = bmax - bmin
                d = self.alpha * max(r1, r2)
                if (bmin - amax) > d:
                    avg1 = sum(data1) / na
                    avg2 = sum(data2) / nb
                    if avg1 > 0 and avg2 > 0:
                        out.write(""{}\t{}\t{}\t{}\n"".format(line[0], avg1, avg2, math.log(avg1/avg2, 2.0)))
                        nout += 1
        return (nin, nout)

    def parseArgs(self, args):
        prev = """"
        if ""-h"" in args or ""--help"" in args:
            return self.usage()
        for a in args:
            if prev == ""-a"":
                self.alpha = float(a)
                prev = """"
            elif prev == ""-o"":
                self.outfile = a
                prev = """"
            elif prev == ""-l"":
                self.labels = parseSlice(a)
                prev = """"
            elif prev == ""-c1"":
                self.colname1 = a
                prev = """"
            elif prev == ""-c2"":
                self.colname2 = a
                prev = """"
            elif a in [""-a"", ""-o"", ""-l"", ""-c1"", ""-c2""]:
                prev = a
            elif self.filename is None:
                self.filename = a
            elif self.slice1 is None:
                self.slice1 = parseSlice(a)
            elif self.slice2 is None:
                self.slice2 = parseSlice(a)

        if (self.filename and self.slice1 and self.slice2):
            return True
        else:
            return self.usage()

    def usage(self):
        sys.stdout.write(""""""Usage: simplediff.py [options] exprfile slice1 slice2

This program performs ""simple"" differential analysis on gene expression data. `exprfile'
should be a file containing gene expression values with genes on the rows and samples
in the columns. `slice1' and `slice2' should be expressions of the form P-Q indicating
which columns contain the data for the two conditions being compared (e.g., if the first
condition is represented by three columns starting at column 5, use 5-7).

Options:

  -a A  | Set the alpha parameter to A (see below). Default: {}.
  -o O  | Write output to file O.
  -c1 C | Set label for average of condition 1 values to C. Default: {}.
  -c1 C | Set label for average of condition 2 values to C. Default: {}.

A gene is considered to be differentially expressed between two groups of samples (A and B)
if the two following conditions hold:

  * The two sets of expression values are totally separated, ie:
  
      the minimum expression values for the samples in A is larger than the maximum in B
      -OR-
      the minimum expression values for the samples in B is larger than the maximum in A

  * The distance between the two sets of values (the difference between the maximum of 
    the ""lower"" one and the minimum of the ""upper"" one) is larger than the largest of the
    two ranges of values in A and B, multiplied by the alpha parameter.

Example: A = {{10, 12, 16}}
         B = {{20, 21, 22}}

The two sets are separated, because min(B) > max(A). The distance between the two sets is
4 (20-16), range(A) = 6, range(B) = 2. If alpha is set to 1.0 (the default) then this
gene would NOT be considered significantly different, because the largest range is 6, 
and 6 * alpha > 4. If alpha was set to 0.5, the gene would be called as different.

"""""".format(self.alpha, self.colname1, self.colname2))


    def run(self):
        with open(self.outfile, ""w"") as out:
            with open(self.filename, ""r"") as f:
                (nin, nout) = self.process(f, out)
                sys.stderr.write(""{} in, {} out\n"".format(nin, nout))

if __name__ == ""__main__"":
    SD = SimpleDiff()
    if SD.parseArgs(sys.argv[1:]):
        SD.run()
",python,typescript,2.3608596497093376e-05,4.85512845176222e-05,0.00023314768005263143,0.0003543286570162592,2.156508673195759e-05,3.822417792399998e-10,0.00012316579025732657,0.0008306559497284713,0.998364976572957
"def int_to_bin(int_num):
 bin_str = bin(int_num)
 return bin_str[2:]

int_num = 30
bin_num = int_to_bin(int_num)
print(bin_num) # 11110",python,bash,0.5184240955491617,0.02991482398693473,0.016244468748686434,0.0005143659824851128,0.0042436470861662865,0.001553354492655518,0.42408212637410947,0.003087657055399782,0.0019354607244010049
"import random
import string

def generate_password():
 password = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
 return password

print(generate_password())",sql,sql,1.7427243489726067e-12,2.918776737314463e-08,1.0382477483932405e-08,0.00020445433973281202,3.726134191661364e-14,7.132450723921406e-12,1.284033574245997e-06,0.9997942211338906,9.136451843866597e-10
"import sys

name = sys.argv[1]

print(""Greetings, ""+name+""!"")",python,java,0.007522485158602522,0.015280761151812736,0.00202401364475784,0.9366969045482796,4.815746546623716e-07,9.057001909332129e-05,0.03760933253233233,0.0005692813735464469,0.00020616999692032445
"""""""
Reverse given sentence
""""""

def reverse_sentence(sentence):
    words = sentence.split("" "")
    reverse_words = words[::-1]
    reverse_sentence = "" "".join(reverse_words)
    return reverse_sentence

if __name__==""__main__"":
    sentence = ""hello world""
    reverse_sentence = reverse_sentence(sentence)
    print(""Reverse of sentence '""+sentence+""' is '""+reverse_sentence+""'"")",sql,sql,0.008604995813260585,0.009974754997457383,0.015874776268371336,5.918168027417029e-07,0.00798073746460041,0.0003396841344907326,0.4055933366445697,0.5509127716123186,0.0007183512481284813
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

# Read the data
data = pd.read_csv('cars.csv')

# Split the data in features (X) and labels (y)
X = data.drop('price', axis=1)
y = data['price']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) 

# Train the model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Predict the price of the cars in the test set
y_pred = model.predict(X_test)

# Compare the predictions with the actual values
for prediction, actual in zip(y_pred, y_test):
 print(prediction, actual)",python,typescript,0.013926265846840993,0.21094362903606126,0.006342975157608449,2.0456595683272216e-06,0.0018844791000299478,1.1748398766302237e-05,0.10852459986875908,4.8022752010505024e-05,0.6583162341803552
"def is_present(arr, number):
    for i in range(len(arr)):
        if arr[i] == number:
            return True
    return False",python,python,2.9247961689055987e-07,1.022324123278562e-06,1.5684858045731314e-06,3.828487916049116e-08,2.4743021696766462e-08,0.1924100966027338,0.8075867353244467,5.682811680256652e-08,1.649272570288092e-07
"def second_largest_elem(lst):
    lst.sort()
    return lst[-2]",python,python,3.387074126394499e-05,0.00021825905952902095,8.229198278705192e-05,6.534751778522834e-06,1.8178256900450275e-05,1.1468992761880336e-06,0.9995416912122574,6.245303106353843e-05,3.557406514379006e-05
"import random

options = [""Rock"", ""Paper"", ""Scissors""]

def rock_paper_scissors(n):
    # get computer's move
    computer_move = random.choice(options)
    
    # get user's move
    print(""Choose one: Rock, Paper, or Scissors"")
    user_move = input()
    user_move = user_move.capitalize()
    
    # check for a tie
    if computer_move == user_move:
        print(f""It's a tie! You both chose {computer_move}"")
    
    # check for user win
    elif (user_move == ""Rock"" and computer_move == ""Scissors"") or (user_move == ""Paper"" and computer_move == ""Rock"") or (user_move == ""Scissors"" and computer_move == ""Paper""):
        print(f""You win! {user_move} beats {computer_move}"")
    
    # if none of the above, user loses
    else:
        print(f""You lose! {computer_move} beats {user_move}"")

rock_paper_scissors(3)",python,python,0.01212706612810017,0.1111786528339184,0.01901301220509525,0.00020484899302843025,0.0017128385029515122,0.005048829806675652,0.5492207514607026,0.0113149591218427,0.29017904094768543
"import re
import json

# Load the data from the JSON
with open('email_data.json') as f:
 data = json.load(f)

# Create a template for the email
email_template = """"""
Dear {{ recipient }},

{{ greeting }},

{{ message }}

{{ signature }}
""""""

# Compile the regex
pattern = re.compile(r'{{\s*(.*?)\s*}}')

# Function to format the template
def format_template(template, data):
 # Find all the placeholders
 placeholders = pattern.findall(template)

 # Replace the placeholders in the template with the actual values
 for placeholder in placeholders:
 value = data.get(placeholder)
 template = template.replace('{{ %s }}' % placeholder, value)

 return template

# Format the email template
formatted_email = format_template(email_template, data)

# Print the formatted email
print(formatted_email)",python,typescript,0.0018694017136522145,0.13670747309310485,0.0025465079256469657,4.3928492960135336e-07,0.008914674695987711,0.00018018436096700808,0.0009158778033941103,0.00034730669437748983,0.84851813442794
"import pygame
import time
 
# defines the size of the window
WINDOW_SIZE = (400, 400)
 
# initializes pygame
pygame.init()
screen = pygame.display.set_mode(WINDOW_SIZE)
 
# game parameters
done = False
clock = pygame.time.Clock()

# game loop
while not done:
 # gets all events
 for event in pygame.event.get():
  if event.type == pygame.QUIT:
   done = True
  
  if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
   done = True 

 # draw something
 pygame.draw.rect(screen, (255, 20, 147), pygame.Rect(30, 30, 60, 60))
 
 # updates the display
 pygame.display.flip()
 
 # delays the loop iteration
 time.sleep(1/30)
 
# terminate pygame
pygame.quit()",python,sql,0.020517382761838412,0.31374608157555667,0.05754718056641033,0.0021136778458860166,0.01871330374267405,0.005907126152699635,0.19159466337390735,0.36634890198104186,0.023511681999985736
"def check_triplet_sum(a, b, c):
    
    if a + b == c or b + c == a or a + c == b:
        return True
    else:
        return False

a = int(input(""Enter the first number: ""))
b = int(input(""Enter the second number: ""))
c = int(input(""Enter the third number: ""))

if check_triplet_sum(a, b, c):
    print(""Numbers can form a triplet."")
else:
    print(""Numbers cannot form a triplet."")",python,python,0.0006852856429140738,0.00021538994206477585,0.004521525103631869,0.15488975965179785,0.0001719490343285007,4.740330902903417e-11,0.8393208867645591,9.910391918207496e-06,0.0001852934213825239
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
 
print(factorial(5))",python,python,4.704220058499777e-05,0.00013850142234869418,5.7377080750846436e-05,1.8517739045025923e-06,4.2793858624243125e-05,1.9397179390146344e-05,0.9996406371752123,3.3428417872665736e-05,1.897089131172332e-05
"import sqlite3

from flask import Flask, g, render_template

# create the application
app = Flask(__name__)

# define the database connection
def get_db():
 if not hasattr(g, 'db'):
 g.db = sqlite3.connect('users.db')
 return g.db

# close the connection at the end of a request
@app.teardown_appcontext
def close_db(error):
 if hasattr(g, 'db'):
 g.db.close()

# define a route to display all users
@app.route('/')
def index_page():
 db = get_db()
 cur = db.execute(SELECT * FROM users)
 return render_template('index.html', users=cur.fetchall())

# run the application
if __name__ == '__main__':
 app.run()

# template file: index.html
<html>
 <body>
 {% for user in users %}
 <h3>{{ user.name }} | {{ user.address }}</h3>
 {% endfor %}
 </body>
</html>",html,html,1.0197870520510708e-05,1.0752766994949012e-06,0.9999378278382127,1.674587325646116e-09,2.137427263314107e-07,6.1191444048575385e-09,9.393785207996606e-08,3.3479073302462545e-05,1.7104466954823398e-05
"import numpy as np

random_vector = np.random.random(10)
print(""Random Vector of size 10: \n"", random_vector)",python,python,0.0008632275546345424,0.0010917429514636198,0.0008470479074640044,6.501548139019523e-06,2.3588416689714277e-05,5.707819683712896e-06,0.9948250814770503,0.0010039380453522517,0.0013331642795228167
"def decimalToBinary(n):
    binary = 0
    power = 1
    
    while (n != 0):
        last_bit = n % 2
        binary = binary + last_bit * power
        n = n // 2
        power = power * 10
 
    return binary

n = 17
print('Binary Representation of', n, 'is', decimalToBinary(n))",python,python,0.0018070966702821347,0.015569181499159075,0.007467591413061061,0.0015791701603513767,0.007803274886957104,0.0010685297927812017,0.8882395849328079,0.0003763234120754581,0.07608924723252469
"def split_string(string):
    result = []
    for i in range(0, len(string), int(len(string) / 2)):
        result.append(string[i: i + int(len(string) / 2)])
    return result",python,java,6.567259324020986e-19,1.6575284116861377e-12,1.1848757731739631e-13,0.9999999402171864,2.316326200150657e-21,6.709635439595143e-18,5.973573807690537e-08,4.5279873254398953e-11,1.9515068360526864e-14
"class DataStorage:
    def __init__(self, data):
        self.data = data
        self._validate_data()
    
    def _validate_data(self):
        """"""Validates the data stored in the DataStorage object.""""""
        for key, value in self.data.items():
            if not isinstance(value, str):
                raise TypeError('All data must be strings')",python,css,1.3297841042541603e-05,0.710404496418884,0.06898942581345234,1.3325417966087007e-06,0.0005676831932618416,0.0034694996638645493,0.002234118892128145,0.11496477849563429,0.09935536713993563
"def word_count(words):
    counter = {}
    for word in words:
        if word not in counter:
            counter[word] = 0
        counter[word] += 1
    return counter
    
words = [""apple"", ""orange"", ""apple"", ""orange"", ""pear""]
word_count(words)
""""""
{'apple': 2, 'orange': 2, 'pear': 1}
""""""",css,python,0.0058420934881046995,0.01940819812169059,0.03570912406153338,4.491548414590501e-05,0.0002659014123019682,0.0024266415080852976,0.9232799918304139,0.01263757770549852,0.00038555638822550844
"#!/usr/bin/python
# -*- coding: utf-8 -*-

from deskctl import app
from flask import g, render_template, make_response, session, request
import traceback

################################################################################

## standard error (uses render_template and thus standard page layout)
def stderr(title,message,code=200,template=""error.html""):
	""""""This function is called by other error functions to show the error to the
	end user. It takes an error title and an error message.
	""""""

	# Should we show a traceback?	
	if app.debug:
		debug = traceback.format_exc()
	else:
		debug = """"

	return render_template(template,title=title,message=message,debug=debug), code

################################################################################

## fatal error (returns HTML from python code - which is more likely to work)
def fatalerr(title=u""fatal error ☹"",message=""Whilst processing your request an unexpected error occured which the application could not recover from"",debug=None):

	# Should we show a traceback?	
	if debug is None:
		if app.debug:
			debug = traceback.format_exc()
		else:
			debug = ""Please ask your administrator to consult the error log for more information.""

	# Build the response. Not using a template here to prevent any Jinja 
	# issues from causing this to fail.
	html = u""""""
<!doctype html>
<html>
<head>
	<title>Fatal Error</title>
	<meta charset=""utf-8"" />
	<meta http-equiv=""Content-type"" content=""text/html; charset=utf-8"" />
	<meta name=""viewport"" content=""width=device-width, initial-scale=1"" />
	<style type=""text/css"">
	body {
		background-color: #8B1820;
		color: #FFFFFF;
		margin: 0;
		padding: 0;
		font-family: ""Open Sans"", ""Helvetica Neue"", Helvetica, Arial, sans-serif;
	}
	h1 {
		font-size: 4em;
		font-weight: normal;
		margin: 0px;
	}
	div {
		width: 80%%;
		margin: 5em auto;
		padding: 50px;
		border-radius: 0.5em;
    }
    @media (max-width: 900px) {
        div {
            width: auto;
            margin: 0 auto;
            border-radius: 0;
            padding: 1em;
        }
    }
    </style>    
</head>
<body>
<div>
	<h1>%s</h1>
	<p>%s</p>
	<pre>%s</pre>
</div>
</body>
</html>
"""""" % (title,message,debug)

	return make_response(html, 500)

################################################################################

## log a full error to the python logger
def logerr():

	# Get the username
	if 'username' in session:
		username = session['username']
	else:
		username = 'Not logged in'

	## Log the critical error (so that it goes to e-mail)
	app.logger.error(""""""Request details:
HTTP Path:            %s
HTTP Method:          %s
Client IP Address:    %s
User Agent:           %s
User Platform:        %s
User Browser:         %s
User Browser Version: %s
Username:             %s

Traceback:

%s
"""""" % (

			request.path,
			request.method,
			request.remote_addr,
			request.user_agent.string,
			request.user_agent.platform,
			request.user_agent.browser,
			request.user_agent.version,
			username,
			traceback.format_exc(),	
		))
",html,html,7.212035160447912e-11,2.276565953648163e-10,0.9999999887808139,1.5198604077853394e-10,8.703512974546005e-10,3.0666998245486377e-13,5.198555139528397e-13,2.8027113510693022e-11,9.868218447068682e-09
"from spellchecker import SpellChecker

spell = SpellChecker() 

# Find all the possible words that are misspelled
misspelled = spell.unknown(text.split())

# Print out each misspelled word and its correction
for word in misspelled:
    print(f'Incorrect word: {word}\tCorrection: {spell.correction(word)}')",python,python,0.022571893109345292,0.04063376628336104,0.0025786756681425243,0.0008947993058191903,0.00886408986113136,0.0001704041267364594,0.8892431109558163,0.02847136971776469,0.006571890971883073
"import aiohttp
import asyncio

async def fetch_data(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            return data

async def main():
    data = await fetch_data('http://example.com/data.json')
    print(data)

asyncio.run(main())",python,css,4.987656557692388e-07,0.6358935415525125,0.0539391534750737,0.10662508669733711,8.5253158866535e-05,7.259634835222179e-06,0.18954403439241232,0.00325601222154345,0.010649160101763302
"def fibonacci(length):
 # Initialize the first two numbers 
 a, b = 0, 1 

 # We generate the Fibonacci series 
 # up to a given length 
 res = [] 
 while (len(res) < length): 
 res.append(b)
 
 # Calculate the next Fibonacci number 
 a, b = b, a + b 

 # Return the generated Fibonacci series 
 return res

print(fibonacci(5))
# Output -> [1, 1, 2, 3, 5]",python,python,0.0009693764221581999,0.0005261091864240524,0.0002672022095740417,0.008259208290360408,0.003368023515519233,1.0919144908283258e-08,0.978494762321532,0.0020681263935329614,0.006047180741754084
"# Python program to implement a binary tree

# A class that represents an individual node in a Binary Tree
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

# A class to represent the Binary Tree
class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert(self.root, key)

    def _insert(self, curr_node, key):
        if key < curr_node.val:
            if curr_node.left is None:
                curr_node.left = Node(key)
            else:
                self._insert(curr_node.left, key)
        elif key > curr_node.val:
            if curr_node.right is None:
                curr_node.right = Node(key)
            else:
                self._insert(curr_node.right, key)

    def inOrder(self):
        res = []
        self._inOrder(self.root, res)
        return res

    def _inOrder(self, curr_node, res):
        if curr_node:
            self._inOrder(curr_node.left, res)
            res.append(curr_node.val)
            self._inOrder(curr_node.right, res)

    def preOrder(self):
        res = []
        self._preOrder(self.root, res)
        return res

    def _preOrder(self, curr_node, res):
        if curr_node:
            res.append(curr_node.val)
            self._preOrder(curr_node.left, res)
            self._preOrder(curr_node.right, res)

    def postOrder(self):
        res = []
        self._postOrder(self.root, res)
        return res

    def _postOrder(self, curr_node, res):
        if curr_node:
            self._preOrder(curr_node.left, res)
            self._preOrder(curr_node.right, res)
            res.append(curr_node.val)",sql,sql,0.002284975602538531,0.10291589337681666,0.028040658311148003,3.0839310063080985e-05,0.00047329704391890423,9.965966155014386e-05,0.3962789853706755,0.46917654915302387,0.0006991421702653934
"import tkinter as tk

window = tk.Tk()
window.title('Calculator')
window.geometry('300x150')

# Create the input field
input_field = tk.Entry(
 window,
 font=('Courier', 20),
 width=15,
 borderwidth=5
)
input_field.grid(row=0, column=0, columnspan=4, padx=10, pady=10)

# Function to return the value of the button clicked
def button_pressed(value):
 current = input_field.get()
 input_field.delete(0, tk.END)
 input_field.insert(0, str(current) + str(value))

# Create button object
button_0 = tk.Button(window, text='0', padx=40, pady=20, command=lambda: button_pressed(0))
button_1 = tk.Button(window, text='1', padx=40, pady=20, command=lambda: button_pressed(1))
button_2 = tk.Button(window, text='2', padx=40, pady=20, command=lambda: button_pressed(2))
button_3 = tk.Button(window, text='3', padx=40, pady=20, command=lambda: button_pressed(3))
button_4 = tk.Button(window, text='4', padx=40, pady=20, command=lambda: button_pressed(4))
button_5 = tk.Button(window, text='5', padx=40, pady=20, command=lambda: button_pressed(5))
button_6 = tk.Button(window, text='6', padx=40, pady=20, command=lambda: button_pressed(6))
button_7 = tk.Button(window, text='7', padx=40, pady=20, command=lambda: button_pressed(7))
button_8 = tk.Button(window, text='8', padx=40, pady=20, command=lambda: button_pressed(8))
button_9 = tk.Button(window, text='9', padx=40, pady=20, command=lambda: button_pressed(9))
button_add = tk.Button(window, text='+', padx=39, pady=20, command=lambda: button_pressed('+'))
button_sub = tk.Button(window, text='-', padx=41, pady=20, command=lambda: button_pressed('-'))
button_mul = tk.Button(window, text='*', padx=40, pady=20, command=lambda: button_pressed('*'))
button_div = tk.Button(window, text='/', padx=41, pady=20, command=lambda: button_pressed('/'))

# Place all the buttons
button_0.grid(row=4, column=0)
button_1.grid(row=3, column=0)
button_2.grid(row=3, column=1)
button_3.grid(row=3, column=2)
button_4.grid(row=2, column=0)
button_5.grid(row=2, column=1)
button_6.grid(row=2, column=2)
button_7.grid(row=1, column=0)
button_8.grid(row=1, column=1)
button_9.grid(row=1, column=2)
button_add.grid(row=4, column=3)
button_sub.grid(row=3, column=3)
button_mul.grid(row=2, column=3)
button_div.grid(row=1, column=3)

# Run the mainloop
window.mainloop()",sql,python,0.02071077834229499,0.1928653614804252,0.1651014076566669,0.0030011363084619385,0.01805018456996558,0.009315094933599088,0.25811109881547584,0.2354922589688597,0.09735267892425085
"import string
import random

def generateRandomString():
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(10))
    
if __name__ == '__main__':
    print(generateRandomString())",sql,sql,1.3329057102581283e-07,3.6467314146523324e-05,5.942151645242072e-05,0.002169185832680666,2.342712811443407e-09,0.0030093518493008284,0.04601811107008696,0.9487046707695347,2.6560145139071622e-06
"import random
import time
 
def get_player_name():
 
    return input(""What is your name? "")
def get_player_choice():
 
    choice = input(""\nRock, Paper or Scissors (R/P/S)? "").upper()
    
    if choice not in [""R"", ""P"", ""S""]:
        print(""\nNot an valid answer. try again"")
        get_player_choice()
    return choice
 
 
def main():
    # get player info
    player_1_name = get_player_name()
    player_2_name = get_player_name()
    print(f""\nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!"")
    time.sleep(3)
 
    # get player options
    player_1_choice = get_player_choice()
    player_2_choice = get_player_choice()
 
    # operation
    print(f""\n{player_1_name} puts {player_1_choice}."")
    print(f""\n{player_2_name} puts {player_2_choice}"")
    time.sleep(3)
    print(""\nShoot!"")
    time.sleep(2)
    print(""\nNow let's see!"")
    time.sleep(3)
    if player_1_choice == player_2_choice:
        print(""\nIt's a tie!"")
    elif player_1_choice == 'R' and player_2_choice == 'S':
        print(f""\n{player_1_name} wins!"")
    elif player_1_choice == 'S' and player_2_choice == 'R':
        print(f""\n{player_2_name} wins!"")
    elif player_1_choice == 'P' and player_2_choice == 'R':
        print(f""\n{player_1_name} wins!"")
    elif player_1_choice == 'R' and player_2_choice == 'P':
        print(f""\n{player_2_name} wins!"")
    else:
        print(f""\n{player_2_name} wins!"")
 
if __name__ == ""__main__"":
    main()",python,javascript,3.606205171589137e-05,0.003946948261420862,0.00034320560252243414,4.804016651350169e-06,0.5641091488763323,3.7310179695943772e-06,0.4308676690045968,0.0004150502806727757,0.0002733808881179008
"def operation(op):
    result = eval(op)
    print(result)

operation('2*2') # prints 4",python,python,0.0029064891130536467,0.01815778147623672,0.0004396853083148432,1.3814606026801055e-06,0.0001794139397496544,3.6821475286718353e-05,0.9770508263354399,0.0009609410735358303,0.0002666598177800587
"import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Input sentences
sentences = [
""Snow was steadily falling, blanketing the ground in white."",
""A gentle wind was blowing in from the nearby mountains."",
""The sky was a foggy grey, with no sign of the sun.""
]

# Tokenize the sentences 
tokenizer = Tokenizer(filters='!""#$%&()*+.,-/:;<=>?@[\\]^_`{|}~\t\n')
tokenizer.fit_on_texts(sentences)

# Generate token sequences
input_seq = tokenizer.texts_to_sequences(sentences)

# Set the maxlen so the generated token sequences are equal in size
maxlen = max([len(x) for x in input_seq])
input_seq = pad_sequences(input_seq, maxlen=maxlen, padding='post')

# Set the batch size to be as big as the input sequences
batch_size = len(input_seq)

# Create a tensor input
inputs = tf.keras.Input(shape=(maxlen,))

# Create the RNN model
x = tf.keras.layers.Embedding(
input_dim=len(tokenizer.word_index) + 1,
output_dim=128,
)(inputs)
x = tf.keras.layers.LSTM(128)(x)
x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dense(len(tokenizer.word_index) + 1, activation='softmax')(x)

# Create the Model
model = tf.keras.Model(inputs=inputs, outputs=x)
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

# Train the model
model.fit(input_seq, epochs=30, batch_size=batch_size)

# Generate a novel
seed_text = ""The""
next_words = 100
  
for _ in range(next_words):
  token_list = tokenizer.texts_to_sequences([seed_text])[0]
  token_list = pad_sequences([token_list], maxlen=maxlen, padding='post')
  predicted = np.argmax(model.predict(token_list), axis=-1)
  output_word = """"
  for word, index in tokenizer.word_index.items():
    if index == predicted:
      output_word = word
      break
  seed_text += "" "" + output_word
print(seed_text)",python,typescript,0.11180081533608599,0.012097149968557385,0.005554074679822842,4.249721002277812e-06,9.114733018255411e-05,0.0002380091089765045,0.24622294457306088,6.236879576167714e-05,0.62392924048655
"x = 1
print(""x is"", (""0"" if x == 0 else ""1"" if x == 1 else ""not 0 or 1""))",python,matlab,0.009985983780345407,0.011174597774086255,0.00844147764584636,0.00034436513097751086,0.006964864062367201,0.9203695907811167,0.03039512674213408,0.001373737965623893,0.010950256117502468
"def fibonacci(n):
  fib = [0, 1]
  for i in range(2,n):
    fib.append(fib[i-2] + fib[i-1])
  return fib[:n]

fibonacciSequence = fibonacci(10)
print(fibonacciSequence)",python,python,0.0014183951456572033,0.001535012129792372,0.002775795939315068,0.00016620516394641758,0.00036308572695735875,0.03590810586793305,0.9562607948531675,0.0003492143342531097,0.0012233908389778405
"import re

text = ""The quick brown fox jumped over the lazy dog""

# Extract words from the document
words = re.findall(r'\w+', text)

# Get the frequency of each word
word_freq = {} 
for word in words: 
    if word not in word_freq: 
        word_freq[word] = 0
    word_freq[word] += 1

# Sort words in descending order by frequency
sorted_word_freq = sorted(word_freq.items(), key = lambda x: x[1], reverse = True) 
  
# Print the top 10 most frequent words
print(""Top 10 most frequent words:"") 
for word, freq in sorted_word_freq[:10]: 
    print(word, ' :', freq)",sql,python,0.004371906189865308,0.0058719981128838635,0.09706884781146319,8.206598572652857e-07,0.0017803101958783762,0.00021346226925100624,0.871240817090804,0.019236866069917563,0.00021497160007941855
"for i in range(10,20):
    if i == 19:
        print(i, end = '')
    else:
        print(i, end = ', ')",python,python,9.220229066936246e-06,2.864264985533754e-05,3.618846438110696e-05,3.5474166367613453e-07,7.815792743408463e-07,0.30658260383818264,0.693335225954225,1.3589284717876406e-06,5.623614879079433e-06
"for num in range(1,11):
    if num % 2 != 0:
        print(num)",python,matlab,1.4894035211680711e-24,9.410394037796519e-37,4.6685749682307406e-24,6.171338873645088e-26,1.4893586790788214e-25,1.0,2.0241527573284863e-21,4.113898389020325e-26,5.48380695217311e-25
"# Sort the array using Merge sort
def mergeSort(arr): 
    if len(arr) > 1: 
        mid = len(arr)//2 
        L = arr[:mid] 
        R = arr[mid:] 
  
        # Sort the left and right side
        mergeSort(L) 
        mergeSort(R) 
  
        # Merge the parts recursively 
        i = j = k = 0
        
        while i < len(L) and j < len(R): 
            if L[i] < R[j]: 
                arr[k] = L[i] 
                i+=1
            else: 
                arr[k] = R[j] 
                j+=1
            k+=1
          
        # Checking if any element was left 
        while i < len(L): 
            arr[k] = L[i] 
            i+=1
            k+=1
          
        while j < len(R): 
            arr[k] = R[j] 
            j+=1
            k+=1
  
# Print the sorted array
mergeSort(arr) 
print(""Sorted array is:"",arr)",python,matlab,0.0001625516954564143,0.0003291628342099487,4.5137192081565624e-05,8.324952924327776e-06,9.780004637237423e-05,0.8488941783365577,0.14833565478194766,4.301853141901853e-06,0.002122888307308197
"def swap_items(lst, item1, item2):
    idx1 = lst.index(item1)
    idx2 = lst.index(item2)
    lst[idx1], lst[idx2] = lst[idx2], lst[idx1]
    
    return lst",python,python,0.001970447937040195,0.0028972965202587533,0.003434216516830759,0.00016971532056505638,0.0007543636608521621,0.0001300115025843046,0.9889109075735938,0.0003189764023232165,0.0014140645659518546
"def reverse_string(string): 
    return string[::-1] 
    
# Time Complexity: O(n)
# Space Complexity: O(1)",python,java,1.9084431336905587e-09,4.088564115557854e-05,7.666893415705842e-06,0.9860328100730014,1.7557163747033611e-10,9.371579909787833e-08,0.013715228128604444,0.00020138545843496493,1.928005574175773e-06
"def detect_plagiarism(txt1, txt2):
 txt1_words = txt1.split(' ')
 txt2_words = txt2.split(' ')

 num_common_words = len(set(txt1_words) & set(txt2_words))
 total_words = len(txt1_words) + len(txt2_words)
 score = 2 * num_common_words / total_words

 return score

txt1 = 'This is an example of text I just made up.'
txt2 = 'This is an example of text I wrote.'

print(detect_plagiarism(txt1, txt2))  # Output: 0.5",python,java,0.004018185905077818,0.023009144606000845,0.30520035668558443,0.3217398085397642,0.04249425156451791,3.96660577392929e-05,0.2375586919545791,0.06128624472790488,0.0046536499588315326
"def find_smallest(arr):
    smallest = None
    for n in arr:
        if smallest is None or n < smallest:
            smallest = n
    return smallest
    
arr = [8, 3, 9, 5, 1]
smallest = find_smallest(arr)
print(smallest)",python,matlab,0.0005165096310380218,0.0020905937084360815,0.0005985785597455755,0.0001104372655253856,0.0004187489630810769,0.9239263133659368,0.07120959744417339,5.8512810504860463e-05,0.0010707082515588845
"""""""
A function to return the squares of an array in Python 
""""""

def square_array(input_array): 
  squared_array = []
  for i in input_array: 
    squared_array.append(i*i)
  return squared_array",python,javascript,2.879384366055549e-07,4.773192962153076e-09,1.584658446786992e-08,5.0059586099075215e-11,0.999999137846132,5.423485738942652e-07,1.3842285883699062e-10,2.9399173896550587e-09,8.11868028792454e-09
"def is_leap_year(year):
    # If a year is divisible by 4 and not divisible by 100, 
    #  it is a leap year.
    # If a year is divisible by 4, 100 and 400, 
    #  it is also a leap year
    
    if year % 4 == 0 and year % 100 != 0:
        return True
    elif year % 4 == 0 and year % 100 == 0 and year % 400 == 0:
        return True
    else:
        return False
    
    
# Testing
print(is_leap_year(2020))",python,typescript,0.0002978137610037226,0.056213435228364826,0.016481276879034553,0.006685094980004938,0.14669672506589818,0.011421131064791885,0.2763023741782178,0.0026098960760962036,0.48329225276658777
"def calculate_trade():
 coal = 50
 barley = 50
 while coal > 0 and barley > 0:
  coal -= 1
  barley -= 2
 return coal + barley",python,python,0.00021890663762502493,0.019596854204381942,0.006003822066686744,0.0004918843260767545,0.0002206154986658939,0.00016131222428182625,0.8918224793584713,0.00024087645469360623,0.08124324922911688
"def add_numbers(a,b):
    return a + b",python,python,0.0012301944068195585,0.003987747991535325,0.002902158679459525,0.00031218867602005957,0.000913777784127995,0.00021648270223205662,0.9879523945636358,0.000831341461703893,0.0016537137344656732
"class DatabaseConnection:
    def __init__(self):
        self.conn = psycopg2.connect(host=""localhost"", database=""mydb"")

    def __del__(self):
        self.conn.close()",python,sql,0.00012286921678256903,0.002762812891188156,0.01706325848516508,2.1351261794792743e-05,4.797543054202299e-05,8.783011718726125e-06,0.0841139896043747,0.8953316303542995,0.0005273297441344368
"""""""
Write a Python program to remove the duplicate items from a list
""""""

# Function to remove duplicates 
def remove_duplicates(list_with_duplicates): 
  
    list_without_duplicates = [] 
    for item in list_with_duplicates:
        if item not in list_without_duplicates: 
            list_without_duplicates.append(item)
  
    return list_without_duplicates 

# main 
if __name__==""__main__"": 
    # Given List 
    list1 = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40] 
    print(""Original List"", list1) 
  
    list2 = remove_duplicates(list1) 
    print(""List without duplicates"", list2)",python,bash,0.4745884554751167,0.025652397185681148,0.007584835774490234,2.4030116993104574e-06,0.06762055130446115,0.0013157043266316308,0.42047433777409493,0.002685518930977473,7.579621684752559e-05
"for i in range(number):
    print(""Hello"")",python,python,0.000119741718847481,4.7556069419727296e-08,2.999646557700462e-06,4.0016253493339514e-14,1.0042785523003604e-06,0.09261963929589559,0.9072558848595829,5.375024513409231e-07,1.4514200329604196e-07
"import requests
from bs4 import BeautifulSoup

#  Get the HTML from the webpage
page = requests.get('https://example.com')
soup = BeautifulSoup(page.text, 'html.parser')

# Isolate the product information
product_list = soup.find_all('div', class_='product')

# Extract the product information
products = []
for product in product_list:
   name = product.find('div', class_='name').text.strip()
   price = product.find('div', class_='price').text.strip()
   description = product.find('div', class_='description').text.strip()
   products.append({
      'name': name,
      'price': price,
      'description': description
   })

# Print the product list
print(products)",css,html,1.7317002372735196e-06,0.030238741891688473,0.9694401366289491,0.00027427458249969916,3.996907831148234e-07,2.1341234880205608e-07,1.8261426240004267e-05,6.377410629424878e-06,1.9863256624066323e-05
"import re

string = 'The quick brown fox jumps over the lazy dog'

# Prints matches
matches = re.findall('the', string, re.IGNORECASE)
print(matches)",python,python,0.0005383267153543409,0.0044332000303775355,0.26606425997528116,0.026485227508119963,1.5168540151516615e-05,3.9946336196399374e-05,0.6849388453403473,0.00872791542319255,0.00875711013097903
"def prime_factors(n):
    prime_factors = []
    while n % 2 == 0: 
        prime_factors.append(2)
        n = n / 2
    for i in range(3, int(math.sqrt(n)) + 1, 2): 
        while n % i == 0: 
            prime_factors.append(int(i))
            n = n / i
    if n > 2: 
        prime_factors.append(int(n))
    return prime_factors",python,java,0.0002942108623512214,7.292153966438977e-05,0.00029540451981265015,0.9965710464910725,5.566344579943973e-05,4.7354038532320144e-05,0.0024642821693099015,1.4793945739299898e-05,0.00018432298771831033
"""""""
Create a python program that takes in a list of URLs and returns a list 
of the top 5 URLs that are visited most often.
""""""

from collections import Counter

def most_visited_urls(urls):
    counts = Counter(urls)
    top_5 = counts.most_common(5)

    print(""Top 5 URLs:"")
    for url, count in top_5:
        print(""%s: %d"" % (url, count))


if __name__ == '__main__':
    urls = ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']
    most_visited_urls(urls)",python,java,3.901450225868787e-06,0.0035483140008647834,0.00044488766100460005,0.9522701507656296,0.026336254273065723,0.0030642140175576576,0.012394233545786738,0.0010895021427216936,0.000848542143143447
"def detect_palindrome(sentence):
 words = sentence.split()
 palindromes = []
 for word in words:
  if word == word[::-1]:
   palindromes.append(word)
 return palindromes

print(detect_palindrome(""Was it a car or a cat I saw?""))
# Output: ['Was', 'a', 'or', 'a', 'I']",python,python,0.063365665255774,0.017680569778611363,0.03471482391829948,0.0002775953167724314,9.995888123023525e-05,0.005778963300648538,0.859222346901321,0.01808670989121036,0.0007733667561324634
"def is_alpha(word): 
    if word.isalpha(): 
        return True 
    else: 
        return False",python,python,0.00856344470515005,0.00046730120172989005,0.004690078156228168,2.532375514595603e-06,3.1503639074857636e-05,2.2678717212896e-05,0.9861411949033048,5.078846579028881e-05,3.0477835994546954e-05
"def linear_search(list, item):
    # Traverse through all elements in the list
    for i in range(len(list)):
        if list[i] == item:
            return i  # Return the index of the element
    return -1 # Return -1 if the item is not found",python,python,0.00020209353084976598,0.00016172428453746233,0.0025607219204749963,8.781258740353158e-06,0.2502958441367709,0.034179155199623196,0.7102235002795718,0.00019170956005358188,0.0021764698293779807
"def generate_html(text):
    html = ""<html>\n""
    html += ""<body>\n""
    html += ""<p>"" + text + ""</p>\n""
    html += ""</body>\n""
    html += ""</html>\n""
    
    return html

if __name__ == ""__main__"":
    text = ""Hello World!""
    html = generate_html(text)
    print(html)",html,html,2.2071991658940932e-17,3.0112293792908497e-17,0.9999999999999998,4.826004986598157e-21,2.6925925567377275e-16,4.563500210831802e-20,7.732037577764572e-18,2.557722297677044e-18,8.019379667943531e-17
"def sort_array(arr):
    for i in range(len(arr)-1):
        for j in range(len(arr)-i-1):
            if arr[j] > arr[j+1]:
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
    return arr",python,matlab,6.45555316362238e-10,1.1262141645330731e-09,8.927059641938213e-10,2.984384611171648e-10,4.539395658616128e-10,0.9999722392138404,2.7756228150901952e-05,6.046671861843881e-11,1.080688663622227e-09
"def remove_duplicates(arr):
    new_list = []
    for item in arr:
        if item not in new_list:
            new_list.append(item)
    return new_list",python,matlab,4.204350309146962e-05,0.00059754298230337,0.0007216963485875103,4.444872451155482e-06,0.0003074919775920506,0.949866803217985,0.048435872262891276,2.491583718262358e-06,2.161325137985428e-05
"print(""Hello, world!"")",python,bash,0.9999734119020168,9.96764694856539e-10,8.203989019786867e-09,1.3871331484896268e-31,2.3140070270935628e-05,1.5029167266270406e-12,3.438768591603071e-06,1.5910552505341453e-11,4.0953400341391626e-11
"def isDivisible(num): 
    if num % 5 == 0 and num % 11 == 0:
        print(""Number is divisible by 5 and 11"") 
    else:
        print(""Number is not divisible by 5 and 11"")",python,matlab,1.0182812120095362e-06,5.043668801636147e-08,2.4944282486449683e-06,5.998319199622018e-07,1.3670478323912518e-05,0.9965104122728735,0.0032864938190814586,2.4573716064116505e-06,0.00018280308004590897
"#!/bin/bash
# Script to run Python program

input_string=""Hello, world""

python <<END

input_string=""$input_string""

print(""Input string:"", input_string)
print(""Size of string:"", len(input_string))
print(""Sorted string:"", ''.join(sorted(input_string)))

END",sql,bash,0.9999999890978416,2.4428456463816026e-10,3.4192745432766753e-09,1.849599131398334e-13,1.3130612470215605e-11,1.0746252586911198e-12,1.6011723446423173e-09,5.621892274929582e-09,1.1444849642537736e-12
"list = [1,2,3,4]
sum = 0

for item in list:
    sum += item

print(sum)",python,matlab,0.00032461378297926217,0.006218487923207985,0.03446482948468086,0.004180949719057078,0.013200425998504791,0.9377740840372556,0.0020626440434262264,0.0015221569502640463,0.0002518080606242642
"import random

# Generate a random sequence of 0s and 1s
n = 10
random_sequence = """".join([str(random.randint(0, 1)) for x in range(n)])
print (random_sequence)",sql,python,3.405430215972913e-05,3.898045792383176e-05,0.00015326279468622013,1.2099437767550907e-06,0.0001171315014087871,0.000713659707727169,0.7518631215743661,0.24675157377808402,0.00032700593986736135
"import nltk
from nltk.tokenize import sent_tokenize

def split_into_sentences(text):
    sentences = sent_tokenize(text)
    return sentences",python,python,0.016314034592336372,0.1337795921520463,0.004240077273215088,0.00029882771839279056,0.0014767046078412935,0.0005583445279067689,0.8070348630655758,0.029706689559012074,0.006590866503673424
"import imaplib, email

#Connect to the mail server
mail = imaplib.IMAP4_SSL('imap.example.com')

#Login
mail.login('username', 'password')

#Select the mailbox
mail.select('INBOX')

#Search for emails
_, data = mail.search(None, 'ALL')

#Fetch the emails
for num in data[0].split():
  _, data = mail.fetch(num, '(RFC822)')
  email_message = email.message_from_bytes(data[0][1])
  #Process the email",sql,typescript,8.65779503008611e-06,0.014114468828620868,0.16707858733812628,0.19565546902355585,0.012914391911340466,0.03816788038568408,0.11038028761634995,0.21221133408440918,0.24946892301688328
"The GPT model could be used to convert between programming languages, such as from Python to C#. The model would be trained on pairs of programs written in two different languages with the same functionality. The model would then be used to automatically convert a Python program into the equivalent in C#.",python,typescript,1.1108120284131169e-10,2.130499975826149e-15,9.867941886278988e-15,2.804616290554045e-16,2.478285270278136e-11,2.9730530835685073e-15,3.487480001049683e-13,7.700999243231585e-17,0.9999999998637719
"def find_divisible_numbers(start, end):
 for i in range(start, end + 1):
  if i % 5 == 0:
   print(i)

find_divisible_numbers(0, 15)",python,python,9.903448852987782e-06,1.749692274933475e-05,4.092588028288496e-05,4.4027885476163646e-07,7.674824734428125e-07,0.25531582036327716,0.7445100914903336,8.930296198546274e-05,1.5251171190440337e-05
"for item1, item2 in zip(list1, list2):
    print(f""{item1}: {item2}"")",python,python,0.004419913959046899,0.06274115726628463,0.01527748388421793,0.0011055261494219103,0.004474044880962483,0.03229717125463145,0.8650372379529241,0.00358230569186359,0.011065158960647263
"#!/usr/bin/python

#  Copyright © 2015-2019 Cask Data, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the ""License"");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import argparse
import os
import json
from youtube import API

MAX_RESULTS = 50
CHANNEL_ID='UCfkRcekMTa5GA2DdNKba7Jg'

api = None

def search_videos(page_token):
  return api.get('search', part='id,snippet', channelId=CHANNEL_ID, maxResults=MAX_RESULTS, pageToken=page_token, type='video')

def video_preview(video):
  preview_size = ['maxres', 'high', 'medium', 'standard', 'default']
  thumbnails = video['snippet']['thumbnails']
  preview = ''
  for size in preview_size:
    if size in thumbnails:
      preview = thumbnails[size]['url']
      break
  return preview

def extract_video_data(video):
  preview = ''
  video_data = {}
  video_data['videoId'] = video['id']['videoId']
  video_data['title'] = video['snippet']['title']
  video_data['description'] = video['snippet']['description']
  video_data['preview'] = video_preview(video)
  return video_data

def fetch_videos():
  all_videos = []
  total_items = MAX_RESULTS
  page_token = ''
  while page_token is not None:
    response = search_videos(page_token)
    if 'nextPageToken' in response:
      all_videos = all_videos + list(map(extract_video_data, response['items']))
      page_token = response['nextPageToken']
    else:
      page_token = None

  return all_videos

def get_original_videos(path):
  try:
    with open(path) as video_file:
      return json.load(video_file)
  except:
    print('File not found: %s. Will create new one.' % path)
    return {
      'videos': []
    }

def merge_videos(original_videos, youtube_videos, visible, update, update_props):
  props = update_props.split(',')
  marked = []
  for video in youtube_videos:
    matched_video = next((v for v in original_videos['videos'] if v['videoId'] == video['videoId']), None)
    if matched_video is None:
      marked = [video['videoId']] + marked
      video['visible'] = visible
      original_videos['videos'] = [video] + original_videos['videos']
      print('Added new video:\n Link: https://www.youtube.com/watch?v=%s \n Title: %s \n' % (video['videoId'], video['title']) )
    else:
      marked = [video['videoId']] + marked
      if update is not False:
        for prop in props:
          matched_video[prop] = video[prop]
  original_videos['videos'] = list(filter(lambda v: v['videoId'] in marked, original_videos['videos']))
  return original_videos

def save_videos(data, file_path):
  with open(file_path, 'w') as outfile:
    json.dump(data, outfile, indent=2)

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('-o', '--output', help='Absolute path to output file. Output file can exist.', required=True)
  parser.add_argument('-k', '--api-key', help='Youtube API key.', required=True)
  parser.add_argument('-v', '--visible', help='Append new videos as visible.', default=False)
  parser.add_argument('-u', '--update', help='Update video in output file if it exists.', default=False)
  parser.add_argument('--update-attributes', '--update-attributes', help='Comma separated list of attributes allowed to update. Works only when --update flag is true', default='description,title,preview')
  args = parser.parse_args()

  global api
  api = API(api_key=args.api_key, client_secret='', client_id='')

  original_videos = get_original_videos(args.output)
  youtube_videos = fetch_videos()
  merged_videos = merge_videos(original_videos, youtube_videos, args.visible, args.update, args.update_attributes)
  save_videos(merged_videos, args.output)

if __name__ == '__main__':
  main()
",css,css,0.0014911856333765655,0.833015338995018,0.07086902183187796,0.00012102180564498228,0.004378050725696067,0.00013787788078117194,0.006889734417951049,0.07473060949311978,0.008367159216534421
"import random

random_numbers = []

while len(random_numbers) < 20:
    n = random.randint(1, 100)
    if n not in random_numbers:
        random_numbers.append(n)

print(random_numbers)",python,python,0.007514323077181979,0.019413019765796655,0.012382889022593246,0.00034661649772489835,0.002204381339629394,0.020586815365637917,0.9131889471786317,0.02080489910005439,0.0035581086527497747
"n = int(input())
 
for i in range(1, n + 1):
 for j in range(1, i + 1):
  print(j, end="""")
 print("""")
 
for i in range(n - 1, 0, -1):
 for j in range(1, i + 1):
  print(j, end="""")
 print("""")",python,python,2.7012125769443502e-08,3.5958057022141885e-10,1.2377817790547337e-07,4.9315064541837635e-08,1.2786678076175266e-10,0.006895091875856696,0.9931046458765063,5.921312378925916e-08,2.4416975073871646e-09
"def distinct_items_in_list(input_list):
    distinct_items = set(input_list)
    return len(distinct_items)",python,python,0.0005650055863037213,0.0017382355915399872,0.0005716762516768816,4.496829011557855e-05,0.0001224281619013018,8.87123989040706e-06,0.9952508232709955,0.0013577500375246288,0.0003402415700519267
"import sqlite3

database = sqlite3.connect('people-data.db')

# Create the table 
cursor = database.cursor()

sql_command = """"""
 CREATE TABLE People ( 
 first_name VARCHAR(20), 
 last_name VARCHAR(30), 
 email VARCHAR(50));""""""

cursor.execute(sql_command)

# Save and close
database.commit()
database.close()",sql,typescript,0.00237266770162151,0.016545453010546492,0.0027585524984142856,0.00012200955492199618,0.0022247764857692472,0.00026799701403787505,0.021723456775456996,0.4050949349657147,0.5488901519935169
"import numba

@numba.jit
def calculate_pi():
    c = 0.0
    for k in range(1000):
        for j in range(1000):
            c += k ** -2 + j ** -3
    return c",python,matlab,9.006107940019035e-09,9.640211961397072e-10,2.7397032618730437e-08,2.782331812397471e-10,2.5173679907643756e-10,0.9999962359403363,3.7107153049125153e-06,1.2274427236064838e-08,3.1727999184175796e-09
"""""""
Module for sending emails with Python
""""""

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


def send_email(sender, recipients, subject, body):
    message = MIMEMultipart()
    message['From'] = sender
    message['To'] = ', '.join(recipients)
    message['Subject'] = subject
    message.attach(MIMEText(body, 'plain'))

    smtp_server = smtplib.SMTP('smtp.example.com')
    smtp_server.starttls()
    smtp_server.login('username', 'password')
    smtp_server.send_message(message)
    smtp_server.quit()",sql,html,0.0003052236410900433,0.373705145019411,0.4635657493358646,0.011893534201306812,0.0026813323759586356,0.00041840298174032175,0.08193694394956097,0.05212067119021979,0.013372997304847867
"# print all prime numbers between 1 and 50
for num in range(1,51): 
      
   # prime numbers are greater than 1 
   if num > 1: 
       for i in range(2,num): 
           if (num % i) == 0: 
               break
       else: 
           print(num)",python,matlab,5.465925501559344e-13,1.453458638438639e-17,3.082679346148072e-12,2.8850253730252768e-12,3.5668374057175044e-13,0.9999999991467419,8.278420344333539e-10,7.226190163638401e-12,1.1318840506899097e-11
"def find_divisors(num):
    divisors = []
    for i in range(2,num+1):
        if num % i == 0:
            divisors.append(i)
    return divisors

num = 48
divisors = find_divisors(num)
print(""The divisors of {} are: {}"".format(num, divisors))",python,matlab,1.0747719298002045e-06,4.548262591937377e-09,1.4669009498490333e-06,1.031887202502903e-07,4.945972718051724e-07,0.9998588563035173,0.00013262148398547442,3.8073987610751647e-07,4.997465487000424e-06
"import mysql.connector
import matplotlib.pyplot as plt

# Connect to the database
mydb = mysql.connector.connect(
    host=""localhost"",
    user=""root"",
    passwd=""password"",
    database=""dbname""
)

# Create a cursor
mycursor = mydb.cursor()

# Execute a query
mycursor.execute(""SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id"")

# Fetch results
results = mycursor.fetchall()

# Generate Chart
ordercounts = [result[1] for result in results]
customers = []
for result in results:
    mycursor.execute(""SELECT name FROM customers WHERE id = %s"" % (result[0],))
    name_result = mycursor.fetchone()
    customers.append(name_result[0])

plt.bar(customers, ordercounts)
plt.xticks(customers, rotation=90)
plt.ylabel('Order Count')
plt.xlabel('Customer')
plt.show()",sql,sql,0.0002482262686161454,0.0028527689356690044,0.00364037947881746,2.21435245373939e-05,0.0003255420626822964,0.0004011972415116386,0.006339251388134377,0.9840922868041015,0.002078204295930068
"def remove_overlap(string1, string2): 
    #split string1 into a list of words
    words1 = string1.split()
    #split string2 into a list of words
    words2 = string2.split()
    #initialize an empty list
    result = []
    #compare between the two words list 
    for word in words1:
        if word not in words2:
            result.append(word)
    #join string2 into the result list
    result = result + words2
    # join the result list into a single string
    new_string = ' '.join(result)
  
    return new_string

#call the remove_overlap()function
result = remove_overlap(string1, string2)
print(result)",sql,sql,2.1666690552058368e-05,0.00020594753341209908,9.43995118436582e-05,2.3991418151867523e-06,0.00012347468304202666,7.282186313648439e-07,0.04968911176347131,0.9498138368136627,4.8435643569385114e-05
"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/'

r = requests.get(url)
soup = BeautifulSoup(r.text, 'html.parser')

bitcoin_price = soup.find('span', {'class': 'btc-price'}).text

print(f'The current Bitcoin price is {bitcoin_price}')",css,java,1.249119238085506e-14,0.03665706890729252,0.0013266641328894488,0.961994936356183,2.621953534949332e-07,1.0292079964024426e-09,1.6082874942743473e-05,4.883767955191679e-06,1.0073616301842295e-07
"for num in range(5):
   print(num)",python,matlab,4.048389561040472e-16,9.068379596659836e-23,3.4356800136923915e-15,3.63252423693314e-17,4.843258739220993e-17,0.9999999999778757,2.211888144049972e-11,1.1992841966255525e-15,4.967794322402082e-16
"<!DOCTYPE html>
<html>
    <head>
        <title>My Favorite Programming Language</title>
    </head>
    <body>
        <h1>My favorite programming language is Python!</h1>
    </body>
</html>",html,html,1.9042409898138645e-21,2.8536525806692383e-19,1.0,3.428194695498173e-20,7.973815343586315e-18,1.5527324890225637e-21,7.075893851583911e-23,1.5180026795988423e-21,3.61762710156227e-18
"import numpy as np
import gym

env = gym.make('GridWorld-v0')

# Initialize Q-Table
Q = np.zeros([env.observation_space.n, env.action_space.n])

# Define learning parameters
lr = .8
y = .95
num_episodes = 2000

# Create lists to contain total rewards and steps per episode
rList = []
for i in range(num_episodes):
    # Reset environment and get first new observation
    s = env.reset()
    rAll = 0
    done = False
    # The Q-Table learning algorithm
    while not done:
        # Choose an action by greedily (with noise) picking from Q table
        a = np.argmax(Q[s,:] + np.random.randn(1,env.action_space.n)*(1./(i+1)))
        # Get new state and reward from environment
        s1,r,done,_ = env.step(a)
        # Update Q-Table with new knowledge
        Q[s,a] = Q[s,a] + lr*(r + y*np.max(Q[s1,:]) - Q[s,a])
        rAll += r
        s = s1
    rList.append(rAll)",sql,typescript,0.18812381128936204,0.10641663729991112,0.018042474956571693,0.0002959072202493532,0.005407013732198078,0.02101179082324165,0.09954005292252247,0.1122543460839,0.4489079656720436
"def reverse_string(string): 
    return string[::-1]",python,java,1.7366216442831176e-15,8.51669447569561e-09,8.516402071572627e-10,0.9999719696032902,2.7477559558206786e-17,8.620794651730033e-13,2.7859431338781684e-05,1.6140886888371015e-07,1.873035263424416e-10
"def convertSeconds(seconds):
    day = seconds//(24*3600)
    seconds = seconds%(24*3600)
    hour = seconds//3600
    seconds %= 3600
    minutes = seconds // 60
    seconds %= 60
    return day, hour, minutes, seconds

day, hour, minute, second = convertSeconds(3600)

print(""Day: {}, Hour: {}, Minute: {}, Second: {}"".format(day, hour, minute, second))",python,python,0.022278261390292493,0.008825820098269125,0.38922664300776394,0.003713860049499524,0.011001057009184164,0.034964085878303304,0.49490120914355196,0.00594174457097893,0.02914731885215664
"import re
pattern = re.compile(r'[6-9]|[2-4][0-9]')",python,html,0.012930726049185293,0.00044025244213385733,0.8999257348222444,2.060922393701817e-06,0.00013354965371993802,5.238865146223854e-05,0.08602850663367095,0.00016106892781152671,0.00032571189737833273
"def isPalindrome(num):
  numStr = str(num)
  for i in range(0, len(numStr)//2):
    if numStr[i] != numStr[len(numStr)-i-1]:
      return False
  return True

print(isPalindrome(1991)) # Output: True",python,python,1.532538047269777e-05,5.812222312471964e-09,5.738187599317583e-05,5.3003037749637496e-08,3.519272718692827e-07,0.4849102729992527,0.5150141060927546,2.4381538681013375e-06,6.475512688671033e-08
"def absolute_value(num):
    if num < 0:
        return -num
    else:
        return num",python,matlab,7.28725751521489e-10,1.1607269626240264e-14,9.916919834984068e-10,5.457449124295274e-11,1.1201853394103933e-10,0.9999984790096786,1.5184618220871033e-06,3.775092843943277e-10,2.6396766303699175e-10
"#import packages
import pandas as pd 
from sklearn.linear_model import LogisticRegression 

#load student profile data
student_profile_list = [{'GPA': 3.4, 'Major': 'Computer Science', 'Interests': ['Web Development', 'Data Science']}, 
{'GPA': 3.7, 'Major': 'Business', 'Interests': ['Marketing', 'Entrepreneurship']}, 
{'GPA': 2.9, 'Major': 'Biology', 'Interests': ['Genetics', 'Neuroscience']}]

#create dataframes for student profile
data = pd.DataFrame(student_profile_list)

#preprocess the data to use in logistic regression
dummies = pd.get_dummies(data['Major']) 
data = data.drop(['Major'], axis = 1) 
data = pd.concat([data, dummies], axis = 1) 

#instantiate the logistic regression
logreg = LogisticRegression(random_state = 0)   

#fit the model
logreg.fit(data[['GPA', 'Computer Science', 'Business', 'Biology']], data['Interests']) 

#predict whether a student will take a course
#Input student profile
student_profile = {'GPA': 3.0, 'Major': 'Biology'}
student_profile = pd.DataFrame([student_profile]) 
dummies = pd.get_dummies(student_profile['Major']) 
student_profile = student_profile.drop(['Major'], axis = 1) 
student_profile = pd.concat([student_profile, dummies], axis = 1) 
prediction = logreg.predict(student_profile[['GPA', 'Computer Science', 'Business', 'Biology']])

#Print the prediction
print(f'The student is likely to take a course related to {prediction[0]}')",css,typescript,0.002307533090073836,0.16998797294114562,0.021741072790175356,7.053593338990115e-05,0.00045877177403961676,0.00045801032884315167,0.12671139715498533,0.0010476144292276305,0.6772170915581195
"# Import necessary libraries
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Construct feature and label data
# Feature (independent variable): days of the week
features = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]
# Label (dependent vaiable): number of riders
labels = [[10, 15, 20, 25, 35, 50], [12, 18, 15, 24, 40, 57]]
# Reformat data as arrays
X = np.array(features)
y = np.array(labels)
# Split train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create model
model = LinearRegression()
# Train model
model.fit(X_train, y_train)
# Make predictions
y_pred = model.predict(X_test)
# Evaluate model
score = model.score(X_test, y_test)
print(f'Model score: {score}')",python,bash,0.4549442480017607,0.3792752706929102,0.014044819100919802,2.2562826798403913e-05,3.289797987237986e-05,0.00012159289505370332,0.13620592759050903,6.040313885609146e-07,0.015352076880787123
"def containsSubstring(str, sub):
    for i in range(len(str)-len(sub)+1):
        j = 0
        while j < len(sub) and sub[j] == str[i+j]:
            j += 1
        if j == len(sub):
            return True
    return False",python,python,4.0024223636273184e-06,2.9368832610936113e-05,0.00023572717679606835,3.1672517051070647e-06,5.9647909501650154e-05,0.00015630139365905768,0.9992551052660423,6.812670581376592e-05,0.00018855304150759402
"def find_subsets(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                count += 1
    return count",python,python,1.5578003305361743e-08,9.12604373634288e-09,5.2950304970972276e-08,1.6581286436676836e-09,5.156354393284243e-10,0.462433633885506,0.5375662199846091,4.8887297990983727e-08,1.74144706791167e-08
"def string_similarity(string1, string2):
    # Create dictionary for storing character frequencies
    char_freq_dict = dict()

    for char in string1:
        if char in char_freq_dict:
            char_freq_dict[char] += 1
        else:
            char_freq_dict[char] = 1

    # Count number of matching characters
    matches = 0
    for char in string2:
        if char in char_freq_dict and char_freq_dict[char] > 0:
            matches += 1
            char_freq_dict[char] -= 1

    # Calculate similarity
    similarity = (matches/len(string1)) * 100

    return similarity",python,python,0.00024264758553540054,0.03546378472604724,0.00110057801006246,1.84564282916797e-05,0.0003441430311317232,0.010629257206837212,0.9474995033110624,0.0020644829543367445,0.0026371467466951414
"input_list = [1,2,3]

num_elements = len(input_list)

def create_symmetric_matrix(input_list):
    matrix = [[0 for x in range(num_elements)] for y in range(num_elements)]
    
    for i in range(num_elements):
        for j in range(num_elements):
            if i == j:
                matrix[i][j] = input_list[i]
            else:
                matrix[i][j] = input_list[j]
                
    return matrix

res = create_symmetric_matrix(input_list)
print(res)",python,matlab,6.81862205525878e-07,1.970911089741606e-07,3.977302755048645e-06,6.354377083828654e-08,5.564195902116028e-08,0.8019350420159178,0.1980536527788932,5.468269481818395e-06,8.614939078021025e-07
"import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

class Editor(QDialog):
    def __init__(self, parent=None):
        super(Editor, self).__init__(parent)
        self.text = QTextEdit()
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()
        layout.addWidget(self.text)
        self.setLayout(layout)
        self.setWindowTitle(""Text Editor"")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = Editor()
    window.resize(350, 250)
    window.show()
    sys.exit(app.exec_())",python,sql,0.001445711698832249,0.17477208786276346,0.16509075114947486,9.848670857901216e-06,8.277215232008733e-05,2.9811949999169564e-05,0.19483097933999644,0.4630659269212879,0.0006721102544677706
"def sort_array(array): 
    for i in range(len(array)): 
        for j in range(i+1, len(array)): 
            if array[j] < array[i]: 
                array[j], array[i] = array[i], array[j] 
  
    return array",python,matlab,1.8787336763116252e-05,2.2617702263570103e-07,1.3024260292561844e-06,8.245647982838937e-08,6.036340511669612e-08,0.9999701381240058,8.806721415560619e-06,1.9117366224617293e-07,4.0522121626734376e-07
"def reverse_list(numbers):
 return numbers[::-1]

def flip_array_order(numbers):
 new_list = []
 for i in range(0, len(numbers)):
  new_list.append(numbers[len(numbers) - i - 1])
 return new_list",python,python,1.1654229992408335e-05,1.7437858798167867e-05,8.88749980839963e-05,0.03562122036958172,5.844741856752125e-05,1.3376883253015664e-08,0.9641395368855692,4.787234717953765e-05,1.4942515344328977e-05
"import requests
import bs4
 
# Get the source code for the websites
urls = ['https://www.indeed.com/', 'https://www.monster.com/']
sources = [requests.get(url).text for url in urls]

# Parse the source code for job listings
jobs = []
for source in sources:
  soup = bs4.BeautifulSoup(source, 'html.parser')
  jobs_tags = soup.find_all('div', {'class': 'job'})
  for job_tag in jobs_tags:
    job = {}
    job['title'] = job_tag.find('h2').text.strip()
    job['location'] = job_tag.find('dd', {'class': 'location ft_location'}).text.strip()
    job['description'] = job_tag.find('p').text.strip()
    jobs.append(job)

print(jobs)",css,css,3.266154437368856e-08,0.5205591837420297,0.32576822182864906,0.143755882462651,0.0003409178526308152,0.000533544557133819,0.001027898058058783,0.0013082790991176885,0.006706039738184765
"import hashlib 
  
def encrypt_string(string, password):
    md5_string = hashlib.md5(string.encode()).hexdigest()
    password_string = hashlib.md5(password.encode()).hexdigest()
    result = """"

    for i in range(32):
        result += md5_string[i] + password_string[i]
    return result

string = ""Hello World!""
password = ""password""

result = encrypt_string(string, password)
print(result)",python,python,9.601094825146081e-08,0.0038194043024693865,0.0003472033784622704,0.053277734995430016,1.6011210208462627e-07,2.0373652332899964e-05,0.761558893666603,0.1809168383083931,5.929557325888057e-05
"import sys
import signal
import time
import random
import speech_recognition as sr

def signal_handler(signal, frame):
sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# Setup the recognizer
rec = sr.Recognizer()
mic = sr.Microphone()

# Some useful commands
commands = {
 'time': lambda : print(time.strftime('%H:%M:%S')),
 'date': lambda : print(time.strftime('%d/%m/%Y')),
 'greeting': lambda : print(""Hello, how can I help you?""),
 'random': lambda : print(random.randint(1, 100))
}

def listen():
 while True:
 with mic as source:
 audio = rec.listen(source)
 try:
 text = rec.recognize_google(audio)
 # Call the corresponding command
 commands[text]()
 except:
 print(""Sorry, I didn't understand that"")

listen()",css,python,0.004607622517290822,0.054446592868757734,0.0038334798615710917,7.960421505834114e-06,0.0016466699551494245,0.00010377091345522108,0.8931600708704225,0.01814837355201389,0.024045459039833534
"def findPattern(text, pattern):
    i=0
    count=0
    while i < len(text):
        j = 0
        if text[i] == pattern[j]:
            k = i
            while j < len(pattern) and k < len(text) and  text[k] == pattern[j]:
                j+=1
                k+=1
            if j == len(pattern):
                count+=1
            i+=1
        else:
            i+=1
    return count",python,python,8.08838100238627e-05,0.0038741457001132532,0.00028953244018163957,3.0275489959974652e-05,5.510794389964113e-05,0.00034370084189684,0.9580895235173505,0.0014435487168960098,0.03579328153967815
"import pandas as pd

df = pd.read_csv('data.csv')

# Features
X=df.iloc[:,:-1]

# Labels
y=df.iloc[:,-1]

# Split dataset
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)

# Fit the model
from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

# Get input values
input_data = [2, 50, 'New York']

# Prediction
prediction = model.predict([input_data])

print('Predicted price for a apartment with 2 bedrooms, 50sqm located in New York:', prediction[0])",python,python,0.17802298624686339,0.2601493522516907,0.0038926079023148892,2.3385838736572464e-05,7.839673584048863e-05,0.00010173455502406546,0.5575028388494571,1.7671149202288942e-05,0.00021102647087064977
"import requests
from bs4 import BeautifulSoup
import json
 
url = '<Your URL>'
 
# Get the page
page = requests.get(url)

# Parse the HTML
soup = BeautifulSoup(page.content, 'html.parser')
 
# Scrape the content
data = {
 'title': soup.find(id='firstHeading').text,
 'content': soup.find(id='mw-content-text').text
}
 
# Save as JSON
with open('data.json', 'w') as outfile:
   json.dump(data, outfile)",css,css,1.9444261308629631e-07,0.7651779378010607,0.23422987153015576,4.055885501989064e-07,8.767647370785517e-07,4.135856705553013e-08,1.0641036877015773e-05,1.8678857454495485e-05,0.000561352619984644
"import traceback

try:
    # some code that might generate exceptions
    pass
except Exception as e:
    print(traceback.format_exc())",python,typescript,0.0016794759780073098,0.0019992464064866374,0.0021353071113267568,0.00017116043216393892,0.0015983560125666946,0.0013913184998029582,0.021811632421954313,0.0005367349932281231,0.9686767681444632
"# Rock, paper, scissors game!

def play_game(player1, player2):
    #  Define the winning rules
    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}
    if player1 == player2:
        return 'It is a draw!'
    elif rules[player1] == player2:
        return 'Player 1 wins!'
    elif rules[player2] == player1:
        return 'Player 2 wins!'

# Get user input
player1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()
player2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()

# Start the game and get the result
result = play_game(player1, player2)
print(result)",css,python,0.021392457623087932,0.12176985534899976,0.007706486996376673,0.00026118521027338295,0.008538595573547128,0.0008144369883289953,0.8135896023673012,0.004802001226101288,0.021125378665983786
"def longest_prefix_palindrome(s):
  if len(s) <= 1: 
    return s
  
  max_length = 0
  for i in range(1,len(s)): 
    if s[:i] == s[i-1::-1]:
       max_length = i 
  
  return s[:max_length] 

print(longest_prefix_palindrome(""abca""))",python,python,5.885207215385215e-05,7.730168463683385e-05,0.00031489657804062893,5.57409209964588e-06,1.0079381581885184e-05,0.05049652003014627,0.9486718167278835,0.000320664872020499,4.4294561436941656e-05
"list1 = [1,2,3,4]
list2 = [3,4,5,6] 

def check_common(list1, list2): 
    result = False
    for x in list1: 
        for y in list2: 
            if x == y: 
                result = True
                return result  
    return result 
  
print(check_common(list1, list2))",python,python,2.0542272017637027e-06,0.00044452063881417664,2.396669213764493e-05,3.651748502009077e-07,3.8181504941497354e-06,5.024083311099883e-05,0.9994461944487631,2.3062775318198247e-05,5.777059309844991e-06
"# -*- coding: utf-8 -*-
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import warnings
from typing import Callable, Dict, Optional, Sequence, Tuple

from google.api_core import gapic_v1  # type: ignore
from google.api_core import exceptions as core_exceptions  # type: ignore
from google.auth import credentials as ga_credentials  # type: ignore
from google.auth.transport.grpc import SslCredentials  # type: ignore

import grpc  # type: ignore

from google.auth.transport.requests import AuthorizedSession

from google.cloud.compute_v1.types import compute

from .base import AddressesTransport, DEFAULT_CLIENT_INFO


class AddressesRestTransport(AddressesTransport):
    """"""REST backend transport for Addresses.

    The Addresses API.

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends JSON representations of protocol buffers over HTTP/1.1
    """"""

    def __init__(
        self,
        *,
        host: str = ""compute.googleapis.com"",
        credentials: ga_credentials.Credentials = None,
        credentials_file: str = None,
        scopes: Sequence[str] = None,
        client_cert_source_for_mtls: Callable[[], Tuple[bytes, bytes]] = None,
        quota_project_id: Optional[str] = None,
        client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO,
    ) -> None:
        """"""Instantiate the transport.

        Args:
            host (Optional[str]):
                 The hostname to connect to.
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.

            credentials_file (Optional[str]): A file with credentials that can
                be loaded with :func:`google.auth.load_credentials_from_file`.
                This argument is ignored if ``channel`` is provided.
            scopes (Optional(Sequence[str])): A list of scopes. This argument is
                ignored if ``channel`` is provided.
            client_cert_source_for_mtls (Callable[[], Tuple[bytes, bytes]]): Client
                certificate to configure mutual TLS HTTP channel. It is ignored
                if ``channel`` is provided.
            quota_project_id (Optional[str]): An optional project to use for billing
                and quota.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you're developing
                your own client library.
        """"""
        # Run the base constructor
        # TODO(yon-mg): resolve other ctor params i.e. scopes, quota, etc.
        # TODO: When custom host (api_endpoint) is set, `scopes` must *also* be set on the
        # credentials object
        super().__init__(
            host=host, credentials=credentials, client_info=client_info,
        )
        self._session = AuthorizedSession(
            self._credentials, default_host=self.DEFAULT_HOST
        )
        if client_cert_source_for_mtls:
            self._session.configure_mtls_channel(client_cert_source_for_mtls)
        self._prep_wrapped_messages(client_info)

    def aggregated_list(
        self,
        request: compute.AggregatedListAddressesRequest,
        *,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> compute.AddressAggregatedList:
        r""""""Call the aggregated list method over HTTP.

        Args:
            request (~.compute.AggregatedListAddressesRequest):
                The request object. A request message for
                Addresses.AggregatedList. See the method
                description for details.

            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.compute.AddressAggregatedList:

        """"""

        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly
        #               current impl assumes basic case of grpc transcoding
        url = ""https://{host}/compute/v1/projects/{project}/aggregated/addresses"".format(
            host=self._host, project=request.project,
        )

        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields
        #               not required for GCE
        query_params = {}
        if compute.AggregatedListAddressesRequest.filter in request:
            query_params[""filter""] = request.filter
        if compute.AggregatedListAddressesRequest.include_all_scopes in request:
            query_params[""includeAllScopes""] = request.include_all_scopes
        if compute.AggregatedListAddressesRequest.max_results in request:
            query_params[""maxResults""] = request.max_results
        if compute.AggregatedListAddressesRequest.order_by in request:
            query_params[""orderBy""] = request.order_by
        if compute.AggregatedListAddressesRequest.page_token in request:
            query_params[""pageToken""] = request.page_token
        if compute.AggregatedListAddressesRequest.return_partial_success in request:
            query_params[""returnPartialSuccess""] = request.return_partial_success

        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here
        #               discards default values
        # TODO(yon-mg): add test for proper url encoded strings
        query_params = [""{k}={v}"".format(k=k, v=v) for k, v in query_params.items()]
        url += ""?{}"".format(""&"".join(query_params)).replace("" "", ""+"")

        # Send the request
        headers = dict(metadata)
        headers[""Content-Type""] = ""application/json""
        response = self._session.get(url, headers=headers,)

        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
        # subclass.
        if response.status_code >= 400:
            raise core_exceptions.from_http_response(response)

        # Return the response
        return compute.AddressAggregatedList.from_json(
            response.content, ignore_unknown_fields=True
        )

    def delete(
        self,
        request: compute.DeleteAddressRequest,
        *,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> compute.Operation:
        r""""""Call the delete method over HTTP.

        Args:
            request (~.compute.DeleteAddressRequest):
                The request object. A request message for
                Addresses.Delete. See the method
                description for details.

            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.compute.Operation:
                Represents an Operation resource.

                Google Compute Engine has three Operation resources:

                -  `Global </compute/docs/reference/rest/{$api_version}/globalOperations>`__
                   \*
                   `Regional </compute/docs/reference/rest/{$api_version}/regionOperations>`__
                   \*
                   `Zonal </compute/docs/reference/rest/{$api_version}/zoneOperations>`__

                You can use an operation resource to manage asynchronous
                API requests. For more information, read Handling API
                responses.

                Operations can be global, regional or zonal.

                -  For global operations, use the ``globalOperations``
                   resource.
                -  For regional operations, use the ``regionOperations``
                   resource.
                -  For zonal operations, use the ``zonalOperations``
                   resource.

                For more information, read Global, Regional, and Zonal
                Resources. (== resource_for
                {$api_version}.globalOperations ==) (== resource_for
                {$api_version}.regionOperations ==) (== resource_for
                {$api_version}.zoneOperations ==)

        """"""

        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly
        #               current impl assumes basic case of grpc transcoding
        url = ""https://{host}/compute/v1/projects/{project}/regions/{region}/addresses/{address}"".format(
            host=self._host,
            project=request.project,
            region=request.region,
            address=request.address,
        )

        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields
        #               not required for GCE
        query_params = {}
        if compute.DeleteAddressRequest.request_id in request:
            query_params[""requestId""] = request.request_id

        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here
        #               discards default values
        # TODO(yon-mg): add test for proper url encoded strings
        query_params = [""{k}={v}"".format(k=k, v=v) for k, v in query_params.items()]
        url += ""?{}"".format(""&"".join(query_params)).replace("" "", ""+"")

        # Send the request
        headers = dict(metadata)
        headers[""Content-Type""] = ""application/json""
        response = self._session.delete(url, headers=headers,)

        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
        # subclass.
        if response.status_code >= 400:
            raise core_exceptions.from_http_response(response)

        # Return the response
        return compute.Operation.from_json(response.content, ignore_unknown_fields=True)

    def get(
        self,
        request: compute.GetAddressRequest,
        *,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> compute.Address:
        r""""""Call the get method over HTTP.

        Args:
            request (~.compute.GetAddressRequest):
                The request object. A request message for Addresses.Get.
                See the method description for details.

            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.compute.Address:
                Use global external addresses for GFE-based external
                HTTP(S) load balancers in Premium Tier.

                Use global internal addresses for reserved peering
                network range.

                Use regional external addresses for the following
                resources:

                -  External IP addresses for VM instances - Regional
                   external forwarding rules - Cloud NAT external IP
                   addresses - GFE based LBs in Standard Tier - Network
                   LBs in Premium or Standard Tier - Cloud VPN gateways
                   (both Classic and HA)

                Use regional internal IP addresses for subnet IP ranges
                (primary and secondary). This includes:

                -  Internal IP addresses for VM instances - Alias IP
                   ranges of VM instances (/32 only) - Regional internal
                   forwarding rules - Internal TCP/UDP load balancer
                   addresses - Internal HTTP(S) load balancer addresses
                   - Cloud DNS inbound forwarding IP addresses

                For more information, read reserved IP address.

                (== resource_for {$api_version}.addresses ==) (==
                resource_for {$api_version}.globalAddresses ==)

        """"""

        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly
        #               current impl assumes basic case of grpc transcoding
        url = ""https://{host}/compute/v1/projects/{project}/regions/{region}/addresses/{address}"".format(
            host=self._host,
            project=request.project,
            region=request.region,
            address=request.address,
        )

        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields
        #               not required for GCE
        query_params = {}

        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here
        #               discards default values
        # TODO(yon-mg): add test for proper url encoded strings
        query_params = [""{k}={v}"".format(k=k, v=v) for k, v in query_params.items()]
        url += ""?{}"".format(""&"".join(query_params)).replace("" "", ""+"")

        # Send the request
        headers = dict(metadata)
        headers[""Content-Type""] = ""application/json""
        response = self._session.get(url, headers=headers,)

        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
        # subclass.
        if response.status_code >= 400:
            raise core_exceptions.from_http_response(response)

        # Return the response
        return compute.Address.from_json(response.content, ignore_unknown_fields=True)

    def insert(
        self,
        request: compute.InsertAddressRequest,
        *,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> compute.Operation:
        r""""""Call the insert method over HTTP.

        Args:
            request (~.compute.InsertAddressRequest):
                The request object. A request message for
                Addresses.Insert. See the method
                description for details.

            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.compute.Operation:
                Represents an Operation resource.

                Google Compute Engine has three Operation resources:

                -  `Global </compute/docs/reference/rest/{$api_version}/globalOperations>`__
                   \*
                   `Regional </compute/docs/reference/rest/{$api_version}/regionOperations>`__
                   \*
                   `Zonal </compute/docs/reference/rest/{$api_version}/zoneOperations>`__

                You can use an operation resource to manage asynchronous
                API requests. For more information, read Handling API
                responses.

                Operations can be global, regional or zonal.

                -  For global operations, use the ``globalOperations``
                   resource.
                -  For regional operations, use the ``regionOperations``
                   resource.
                -  For zonal operations, use the ``zonalOperations``
                   resource.

                For more information, read Global, Regional, and Zonal
                Resources. (== resource_for
                {$api_version}.globalOperations ==) (== resource_for
                {$api_version}.regionOperations ==) (== resource_for
                {$api_version}.zoneOperations ==)

        """"""

        # Jsonify the request body
        body = compute.Address.to_json(
            request.address_resource,
            including_default_value_fields=False,
            use_integers_for_enums=False,
        )

        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly
        #               current impl assumes basic case of grpc transcoding
        url = ""https://{host}/compute/v1/projects/{project}/regions/{region}/addresses"".format(
            host=self._host, project=request.project, region=request.region,
        )

        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields
        #               not required for GCE
        query_params = {}
        if compute.InsertAddressRequest.request_id in request:
            query_params[""requestId""] = request.request_id

        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here
        #               discards default values
        # TODO(yon-mg): add test for proper url encoded strings
        query_params = [""{k}={v}"".format(k=k, v=v) for k, v in query_params.items()]
        url += ""?{}"".format(""&"".join(query_params)).replace("" "", ""+"")

        # Send the request
        headers = dict(metadata)
        headers[""Content-Type""] = ""application/json""
        response = self._session.post(url, headers=headers, data=body,)

        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
        # subclass.
        if response.status_code >= 400:
            raise core_exceptions.from_http_response(response)

        # Return the response
        return compute.Operation.from_json(response.content, ignore_unknown_fields=True)

    def list(
        self,
        request: compute.ListAddressesRequest,
        *,
        metadata: Sequence[Tuple[str, str]] = (),
    ) -> compute.AddressList:
        r""""""Call the list method over HTTP.

        Args:
            request (~.compute.ListAddressesRequest):
                The request object. A request message for Addresses.List.
                See the method description for details.

            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.

        Returns:
            ~.compute.AddressList:
                Contains a list of addresses.
        """"""

        # TODO(yon-mg): need to handle grpc transcoding and parse url correctly
        #               current impl assumes basic case of grpc transcoding
        url = ""https://{host}/compute/v1/projects/{project}/regions/{region}/addresses"".format(
            host=self._host, project=request.project, region=request.region,
        )

        # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields
        #               not required for GCE
        query_params = {}
        if compute.ListAddressesRequest.filter in request:
            query_params[""filter""] = request.filter
        if compute.ListAddressesRequest.max_results in request:
            query_params[""maxResults""] = request.max_results
        if compute.ListAddressesRequest.order_by in request:
            query_params[""orderBy""] = request.order_by
        if compute.ListAddressesRequest.page_token in request:
            query_params[""pageToken""] = request.page_token
        if compute.ListAddressesRequest.return_partial_success in request:
            query_params[""returnPartialSuccess""] = request.return_partial_success

        # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here
        #               discards default values
        # TODO(yon-mg): add test for proper url encoded strings
        query_params = [""{k}={v}"".format(k=k, v=v) for k, v in query_params.items()]
        url += ""?{}"".format(""&"".join(query_params)).replace("" "", ""+"")

        # Send the request
        headers = dict(metadata)
        headers[""Content-Type""] = ""application/json""
        response = self._session.get(url, headers=headers,)

        # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception
        # subclass.
        if response.status_code >= 400:
            raise core_exceptions.from_http_response(response)

        # Return the response
        return compute.AddressList.from_json(
            response.content, ignore_unknown_fields=True
        )


__all__ = (""AddressesRestTransport"",)
",sql,typescript,8.297769618329881e-06,0.09380673657242299,0.0015437017220625393,0.00015270310985012234,0.0044205071976992655,5.174862446319929e-06,3.8291811224376895e-05,0.0011359491483231025,0.898888637806353
"def matrix_multiply(matrix1, matrix2):
    row1 = len(matrix1)
    col1 = len(matrix1[0])
    row2 = len(matrix2)
    col2 = len(matrix2[0])
    
    # Check matrix dimensions
    if col1 != row2:
        return -1
    
    # Create output matrix
    result = [[0 for i in range(col2)] for j in range(row1)]
        
    # Multiply the two matrices
    for i in range(row1):
        for j in range(col2):
            for k in range(row2):
                result[i][j] += matrix1[i][k] * matrix2[k][j]
                
    return result",python,python,4.216678238192298e-05,8.881746302615613e-06,0.00013335192446438686,1.8999718416817886e-05,3.4994894822605332e-06,0.05017622706883553,0.9494483359778023,9.821819340702179e-05,7.031909890743021e-05
"def dot_product(x, y):
    result = 0
    for i in range(len(x)):
        result += x[i] * y[i]
    return result",python,python,2.1458982410096293e-08,1.1192583055824894e-06,1.6783641342344335e-07,2.59356359523462e-09,1.067943541876858e-08,4.8296667410327955e-06,0.9999914723161667,2.318745364907741e-06,5.74450268649173e-08
"import sqlite3

class DataAccess(object):
 
 def __init__(self, db_name):
 self.conn = sqlite3.connect(db_name)
 self.cur = self.conn.cursor()
 
 def save_data(self, table, id, name):
 self.cur.execute(f""INSERT INTO {table} VALUES (?, ?)"", (id, name))
 self.conn.commit()
 
 def read_data(self, table, id):
 self.cur.execute(f""SELECT * FROM {table} WHERE id = ?"", (id,))
 return self.cur.fetchone()
 
 def close_connection(self):
 self.conn.close()

UserDAO = DataAccess('my_db.db')",sql,sql,4.1579344027989466e-06,0.0002011364503956492,0.001236498900556537,6.650312531490295e-07,6.680417470581501e-07,6.50069899484919e-08,0.0005150525617597036,0.9980396882711413,2.0678017538215727e-06
"def sortList(nums): 
 
    # sort the list in descending order 
    nums.sort(reverse = True) 
   
    # return the sorted list 
    return nums 
   
# driver code 
list = [5, 4, 3, 2, 1] 
print(sortList(list))",python,python,0.00042924908805404966,0.0011262335252668113,0.0007504849843106463,5.515006160769774e-05,0.02026459361460051,2.0877917182363526e-05,0.9720719996927333,0.004914749896986869,0.00036666121925756713
"""""""
Design an efficient algorithm in Python for calculating the Fibonacci sequence 
""""""


def fib(n):
    if (n == 0):
        return 0
    elif (n == 1):
        return 1
    else:
        f1 = 0
        f2 = 1
        for x in range(2, n+1):
            f = f1+f2
            f1 = f2
            f2 = f
        return f

if __name__ == ""__main__"":
    n = int(input(""Enter number of terms:""))
    print(""Fibonacci sequence:"")
    for i in range(n):
        print(fib(i))",python,python,0.0034308843745227808,0.00033529411504276864,0.002099486309831697,0.00019391753795317717,0.002583890641005827,0.011229631038467537,0.9758240669404369,0.0014977785162364667,0.0028050505265028065
"from collections import Counter

def most_frequent(arr):
    cnt = Counter(arr)
    return cnt.most_common(1)[0][0]

arr = [1, 1, 2, 3, 2, 4, 4]
most_frequent_elem = most_frequent(arr)
print(most_frequent_elem)",python,python,0.0009650415298218536,0.005021554009216503,0.0006138966076381021,5.985583160710566e-05,0.00012727696268992854,0.01429679828431581,0.9786366425479129,5.446740844695777e-05,0.0002244668183508091
"def calculate_sum(nested_list):
    sum = 0
    for item in nested_list:
        for num in item:
            sum += num
    return sum

nested_list = [[1,2], [3,4], [6,7]]
print(calculate_sum(nested_list))",python,matlab,1.1117928751309961e-05,2.057683710088628e-06,0.0002113656669727533,1.9325533567403705e-05,5.3409123915151967e-05,0.999429840686849,0.000256110683185208,7.550202908712237e-06,9.22249014056025e-06
"class MyIterator:
  def __init__(self, data):
    self.data = data
    self.index = 0
  
  def __iter__(self):
    return self
  
  def __next__(self):
    if self.index >= len(self.data):
      raise StopIteration
    item = self.data[self.index]
    self.index += 1
    return item

  def __len__(self):
    return len(self.data)",python,python,2.1186250327320603e-05,0.004640561606535845,0.1975777861121071,4.587671404053126e-07,2.2521294454306397e-05,2.556797995321429e-07,0.5995928491781926,0.19804559215950943,9.878895193334205e-05
"def knapsack(items, weight_limit):
 # Initialize an empty list to hold the items to include in the knapsack
 knapsack_items = []
 # Iterate over each item in the list
 for item in items:
 # Calculate the weight of the items already in the knapsack
 knapsack_weight = sum([i['weight'] for i in knapsack_items])
 # If the item can fit in the knapsack, add it
 if item['weight'] + knapsack_weight <= weight_limit:
 knapsack_items.append(item)
 
 # Return the items to include in the knapsack
 return knapsack_items


list = [{'name': 'item1', 'weight': 5, 'value': 10}, 
        {'name': 'item2', 'weight': 6, 'value': 15}, 
        {'name': 'item3', 'weight': 3, 'value': 5}]
weight_limit = 9

# Call the knapsack function
optimal_items = knapsack(list, weight_limit)
 
# Print the items to include in the knapsack
print(optimal_items)  # [{'name': 'item1', 'weight': 5, 'value': 10}, {'name': 'item3', 'weight': 3, 'value': 5}]",css,javascript,0.0025475183878859733,0.05119139712606862,0.020763350356548176,0.002265371814146976,0.8521639605449899,0.05723350776614725,0.0008968290241217925,0.002580182101179566,0.010357882878911854
"def linear_search(sorted_ary, n, target):
	for i in range(0,n):
		if sorted_ary[i] == target:
			return i
	return -1

result = linear_search(sorted_ary, n, target)

if result == -1:
   print(""Element is not present in array"")
else:
   print(""Element is present at index"", result)",python,matlab,3.0080962106960536e-06,1.0386531115187083e-05,1.0725601649155704e-05,4.523650695724701e-07,2.827724999004271e-06,0.9896678858174888,0.01029806417806388,4.2621519968894485e-06,2.3875334067088694e-06
"def toBinary(num):
   result = """"
   while num > 0:
      result = str(num % 2) + result
      num = num // 2
   return result

print(toBinary(245))  # output: 11110101",python,python,1.0484270303770569e-05,1.684735784721042e-07,2.6520507463824905e-05,7.434386164483345e-07,9.398519251092994e-06,0.3033312825172162,0.6965906236757254,2.8612880417791012e-05,2.1657174269009222e-06
"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com""   
resp = requests.get(url) 
soup = BeautifulSoup(resp.text, 'html.parser') 
links = soup.find_all('a', href=True) 

for link in links:
 print(link['href'])",python,java,5.02677717849836e-16,3.039154401930848e-05,0.0006337169162178443,0.9992853744837551,1.1007345632709986e-07,1.7264814554938332e-06,4.777452479129282e-05,8.782188104626824e-07,2.775749388708221e-08
"arr = [[1,2,3], [4,5,6], [7,8,9]]

sum = 0

for row in arr:
 for col in row:
  sum = sum + col

print(""Sum:"", sum)",python,matlab,1.551779510610261e-05,0.00018035732534925605,9.821616327967493e-05,0.001182872442130432,3.049149786676254e-05,0.9980369017951968,0.00038306067429840147,2.4347364325978127e-05,4.823494244655221e-05
"import requests
from bs4 import BeautifulSoup

url = 'https://example.com/product/123'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

price_block = soup.find('div', class_='price')
prices = [float(price.text) for price in price_block.find_all('span')]

print(f""Prices for {url} are {prices}"")",python,css,3.035169062824733e-13,0.4366568074957101,0.1368286937592444,0.42627607074710755,1.7002386475892604e-06,3.9807071315584915e-07,0.0001977589153206265,3.7457386567276315e-05,1.1133863858549413e-06
"import random

sample_dataset = [
    [1,1,1],
    [2,2,2],
    [3,3,3],
    [4,4,4]
]

def data_augmentation(dataset):
 augmented_dataset = []
 for data in dataset:
 augmented_row = list(data)
 augmented_row.append(random.randint(-1,1))
 augmented_dataset.append(augmented_row)
 return augmented_dataset

augmented_dataset = data_augmentation(sample_dataset)

print('Sample dataset:')
print(sample_dataset)
print('Augmented dataset:')
print(augmented_dataset)",python,python,0.0022570149678537337,0.15985780986305106,0.020919833116278534,2.2401380060156033e-05,0.00033135598685778107,0.01175230728399953,0.734001399388349,0.06938911768449636,0.0014687603290538945
"def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n > 2 and n % 2 == 0:
        return False

    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2

    return True",python,python,5.458264017441571e-06,1.2489973633791652e-05,0.00020513313210141518,9.598045757131525e-07,1.998599373186863e-06,5.879932256393923e-06,0.9997524634770388,6.080126282072695e-07,1.5008804375245655e-05
"sample_data = ""Name: John Doe; Age: 23; Course: Data Science""

# Split the string by the "";"" character
data_items = sample_data.split(';')

# Strip any extra whitespace and split by the "":"" character
data_dict = {}
for item in data_items:
    key, value = item.strip().split(': ')
    data_dict[key] = value
    
print(data_dict)",python,css,0.0004826828679430517,0.9843206583338674,0.008125116947291332,0.0006760329064197791,0.00018740610587642572,0.0010896501489249678,0.00010552413836306703,0.0011143694512211818,0.003898559100092846
"class MyClass:
 def __init__(self, x, y):
  self.x = x
  self.y = y",python,python,0.00015863887961224535,0.004239341223947782,0.12438549001843598,3.068392590835109e-05,2.351191499665373e-05,2.091736942118918e-06,0.7355195850849388,0.13513436353110617,0.0005062936841118482
"import numpy as np

def fillWithMedian(data):
    data = np.array(data)
    median_val = np.nanmedian(data)
    data[np.isnan(data)] = median_val 
    return data

data = [1, None, 4, 5, None, 10]
print(fillWithMedian(data))",python,css,0.0004716695678622742,0.5072521045887034,0.03638566377109408,6.578270010081882e-06,7.6151583861522304e-06,1.8437357475679236e-05,0.4390427723819409,0.0006819355470384721,0.016133223357488898
"import random

def arr_of_random_numbers(size):
    arr = []
    for i in range(size):
        arr.append(random.randint(1, 100))
    return arr

size = 10
arr = arr_of_random_numbers(size)
print(arr)",python,matlab,2.2906247057674713e-05,7.519750385412869e-05,0.00013037650210642165,2.2765825017423997e-06,8.317621173352158e-06,0.905024104574493,0.09467607307874937,4.7987314034923574e-05,1.2760576029351232e-05
"def toBinary(n): 
    if (n > 1): 
        toBinary(n//2) 
    print(n%2,end = '') 
 
# Driver Code 
num = 8
toBinary(num)",python,matlab,5.5108133934440356e-05,3.976857972611786e-08,5.22872308925213e-05,5.6231023019891234e-05,1.3796689642987855e-05,0.9213927968192618,0.07616381187811327,5.81696027605161e-05,0.0022077588537949204
"def get_full_name(first, last):
  full_name = f""{first} {last}""
  return full_name

name = get_full_name(""John"", ""Smith"")
print(name)",python,python,0.022803212370687977,0.04915106881035899,0.04645105527459194,0.2594749955156763,0.00011948637888878898,0.0018317044313475635,0.6123065265179295,0.0032336857362856722,0.004628264964233365
"import numpy as np
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier

# Load the dataset
fruits = datasets.load_iris()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(fruits.data, fruits.target, test_size=0.3, random_state=1)

# Train the model with the Decision Tree Algorithm 
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Make predictions with the model
predicted_fruits = model.predict([[1, 0, 0.5, 1]])

if predicted_fruits == [1]:
    print('The fruit is likely to be an apple')
elif predicted_fruits == [2]:
    print('The fruit is likely to be an orange')
else:
    print('The fruit is likely to be a banana')",python,bash,0.84716611847176,0.0005090840513552726,2.9988623648664173e-05,5.9237210597427614e-08,4.787742885975222e-05,4.262992647983522e-07,0.0012602960109730683,1.1457849352207229e-10,0.15098614976234934
"The highest value is 8.

list_ints = [2, 5, 3, 4, 8]

highest_value = max(list_ints)

print('The highest value is ' + str(highest_value) + '.')",python,matlab,0.0059390114073149675,0.05653720092194888,0.01707402041070474,0.0008239583526561575,0.22049698477818522,0.6033332596172749,0.0009484110578965441,0.011408480157752221,0.08343867329626634
"import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)
y = np.array([1, 4, 9, 16, 25])

# Build the model
model = LinearRegression()
model.fit(X, y)

# Plot the results
plt.scatter(X, y)
plt.plot(X, model.predict(X))
plt.title(""Linear Regression Model"")
plt.xlabel(""x"")
plt.ylabel(""y"")
plt.show()",python,bash,0.8964101387146208,0.0015219043620624578,0.011793845025714737,8.905895650674617e-06,2.7916676570011748e-05,2.3346945564076466e-05,0.0899434071260821,1.8215609502767286e-07,0.000270353097639984
"def find_max(a, b, c):
    max_num = a
    if b > max_num:
        max_num = b
    if c > max_num:
        max_num = c
    return max_num",python,python,0.004203581929284369,0.007282498049962872,0.33141085965449774,0.0007274821766278979,0.0015798711544087226,0.0025668565108546045,0.6469896534317161,0.0001336769134462701,0.005105520179201422
"import PyPDF2

# Load file
file= open(your_pdf_filename, 'rb')
reader= PyPDF2.PdfFileReader(file)

# Read text
text = ''
for page in reader.pages:
 text += page.extractText()

# Close file
file.close()

# Print result
print(text)",python,python,0.052234709550184596,0.09927830615729503,0.005593699075512276,1.163694590746446e-05,0.004726271237790141,0.0018508382221983975,0.7381594451882769,0.09134325882200504,0.006801834800830236
"def triangleArea(a, b, c): 

    # calculate the semi-perimeter 
    s = (a + b + c) / 2

    # calculate the area 
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5

    return area",python,python,0.018720471904083404,0.03587498466341817,0.0035683430530237276,0.00039315064087733605,0.008725197261207069,0.0004728880679967179,0.8905985459044673,0.0030761131299392834,0.03857030537498699
"mylist = [10, 20, 30, 40, 10]
value_to_remove = 10

# new list after value is removed
new_list = [item for item in mylist if item != value_to_remove] 

print(new_list)",python,matlab,8.898937224723972e-10,2.5546023446358414e-08,5.6706441924602296e-09,2.0161114305726252e-10,2.8190487178375424e-08,0.9999999387414991,2.517112732522049e-10,1.3613874327328505e-11,4.945161546621239e-10
"my_dict = {
    'list1': {
        'list1_1': 25,
        'list1_2': 25
    },
    'list2': {
        'list2_1': {
            'list2_1_1': 25
        }
        'list2_2': 25
    }
}

def update_values(dictionary, value):
 for key, value in dictionary.items():
 if isinstance(value, dict):
 update_values(value, value)
 else:
 dictionary[key] = value

update_values(my_dict, value)",css,matlab,3.876250322589837e-09,0.01388917652973784,5.2792240826079904e-08,1.128815632787219e-09,7.063515926179705e-09,0.9861107216657545,1.0350105079407497e-13,2.1455619038326055e-08,1.548796244286923e-08
"def binary_search(lst, x):
 # initializing low and high index values
 lowIdx = 0
 highIdx = len(lst)-1
 
 # loop until low index is not greater than high index 
 while lowIdx <= highIdx: 
 # calculate mid index 
 midIdx = (lowIdx + highIdx)//2

# compare midIdx value with x 
 if lst[midIdx] == x: 
 return midIdx 
 
 # if x is less than midIdx value 
 elif lst[midIdx] > x: 
 highIdx = midIdx - 1
 
 # if x is greater than midIdx value 
 else: 
 lowIdx = midIdx + 1

# if x is not present then return -1
return -1",python,matlab,0.00141694875735858,0.021751762696500924,0.011305169231355702,0.0007301752231292817,0.008077514360311082,0.8516280902015937,0.01798300255008812,0.007661479840566147,0.07944585713909644
"def word_and_character_count(string):
    num_words = len(string.split())
    num_characters = len(string)
    print(""Number of words:"", num_words)
    print(""Number of characters:"", num_characters)",python,java,1.5807922836288683e-09,0.00022915705702549857,2.8344926025291016e-05,0.5382529924073177,7.658471443688889e-10,2.6506258914618582e-08,0.45843693243685496,0.0030442987928765985,8.245527001793062e-06
"# Import libraries
import flask
from flask import request, jsonify
import tensorflow as tf

# Load the model
model = tf.keras.models.load_model('handwritten_recognition_model.h5')

# Create the API 
app = flask.Flask(__name__)

@app.route('/api', methods=['POST'])
def predict():

    # Get the data from the POST request
    data = request.get_json(force=True)

    # Make prediction 
    prediction = model.predict(data)

    # Return the result mapped to the labels 
    labels = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 
    5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}

    output = labels[np.argmax(prediction)]

    # Return the result in json format 
    return jsonify(output)

if __name__ == '__main__':
    app.run(debug=True)",css,css,0.09314403214295311,0.8969766931098675,0.0001032768645689266,1.2593984322652233e-07,5.967932256542679e-06,3.0798986369538147e-08,0.005613403953787997,3.92492397893762e-06,0.004152544333757298
"class Point:
  def __init__(self, x, y):
    self.x = x
    self.y = y

  def move(self, dx, dy):
    self.x += dx
    self.y += dy

  def distance(self, other_point):
    return ((self.x - other_point.x)**2 + (self.y - other_point.y)**2)**0.5

#example 
p1 = Point(2,3)
p2 = Point(5,7)

print(p1.distance(p2))",python,python,8.090505294313322e-05,0.013926204706939593,0.10394099902170127,1.7903028393773333e-05,5.010242361694008e-05,1.8118409735939743e-06,0.6700238688998933,0.21187150881625547,8.66962092830117e-05
"import random

def create_random_structure(n):
    structure = []
    for i in range(n):
        structure.append(random.randint(0, n))
    return structure",python,python,2.4442498024866095e-05,0.000199901156586645,0.0017171912091624886,8.109851432131457e-06,9.755089756057536e-07,0.1706057346070109,0.7851796455734473,0.014605078069753445,0.027658921525606693
"# -*- coding: utf-8 -*-
# Copyright (C) 2006 Frederic Back (fredericback@gmail.com)
# Copyright (C) 2007 Kristoffer Lundén (kristoffer.lunden@gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, 
# Boston, MA 02111-1307, USA.

import gtk
import gobject
import pango
import os
import re
import options
from parserinterface import ClassParserInterface
import imagelibrary

#===============================================================================

def tokenFromString(string):
    """""" Parse a string containing a function or class definition and return
        a tuple containing information about the function, or None if the
        parsing failed.

        Example: 
            ""#def foo(bar):"" would return :
            {'comment':True,'type':""def"",'name':""foo"",'params':""bar"" } """"""

    try:
        e = r""([# ]*?)([a-zA-Z0-9_]+)( +)([a-zA-Z0-9_\?\!<>\+=\.]+)(.*)""
        r = re.match(e,string).groups()
        token = Token()
        token.comment = '#' in r[0]
        token.type = r[1]
        token.name = r[3]
        token.params = r[4]
        token.original = string
        return token
    except: return None # return None to skip if unable to parse
    
    def test():
        pass

#===============================================================================

class Token:
    def __init__(self):
        self.type = None
        self.original = None # the line in the file, unparsed

        self.indent = 0
        self.name = None
        self.comment = False # if true, the token is commented, ie. inactive
        self.params = None   # string containing additional info
        self.expanded = False

        self.access = ""public""

        # start and end points
        self.start = 0
        self.end = 0

        self.rubyfile = None
        self.path = None # save the position in the browser

        self.parent = None
        self.children = []

    def get_endline(self):
        """""" Get the line number where this token's declaration, including all
            its children, finishes. Use it for copy operations.""""""
        if len(self.children) > 0:
            return self.children[-1].get_endline()
        return self.end

        def test_nested():
            pass
            
    def get_toplevel_class(self):
        """""" Try to get the class a token is in. """"""
            
        if self.type == ""class"":
            return self    

        if self.parent is not None:
            tc = self.parent.get_toplevel_class()
            if tc is None or tc.type == ""file"": return self #hack
            else: return tc
                
        return None

    def printout(self):
        for r in range(self.indent): print """",
        print self.name,
        if self.parent: print "" (parent: "",self.parent.name       
        else: print
        for tok in self.children: tok.printout()

#===============================================================================

class RubyFile(Token):
    """""" A class that represents a ruby file.
        Manages ""tokens"", ie. classes and functions.""""""

    def __init__(self, doc):
        Token.__init__(self)
        self.doc = doc
        self.uri = doc.get_uri()
        self.linestotal = 0 # total line count
        self.type = ""file""
        self.name = os.path.basename(self.uri)
        self.tokens = []


    def getTokenAtLine(self, line):
        """""" get the token at the specified line number """"""
        for token in self.tokens:
            if token.start <= line and token.end > line:
                return self.__findInnermostTokenAtLine(token, line)
        return None

    def __findInnermostTokenAtLine(self, token, line):
        """""""" ruby is parsed as nested, unlike python """"""
        for child in token.children:
            if child.start <= line and child.end > line:
                return self.__findInnermostTokenAtLine(child, line)
        return token


    def parse(self, verbose=True):

        #if verbose: print ""parse ----------------------------------------------""
        newtokenlist = []

        self.children = []

        currentParent = self

        self.linestotal = self.doc.get_line_count()

        text = self.doc.get_text(*self.doc.get_bounds())
        linecount = -1
        ends_to_skip = 0
        
        access = ""public""
        
        for line in text.splitlines():
            linecount += 1
            lstrip = line.lstrip()
            ln = lstrip.split()
            if len(ln) == 0: continue
            if ln[0] == '#': continue
            
            if ln[0] in (""class"",""module"",""def""):
                token = tokenFromString(lstrip)
                if token is None: continue
                token.rubyfile = self
                token.start = linecount
                if token.type == ""def"":
                    token.access = access
                    
                #print ""line"",linecount
                #print ""name"", token.name
                #print ""type"",token.type
                #print ""access"",token.access
                #print ""to"",currentParent.name
                
                currentParent.children.append(token)
                token.parent = currentParent
                currentParent = token
                newtokenlist.append(token)
                
                
                idx = len(newtokenlist) - 1
                if idx < len(self.tokens):
                    if newtokenlist[idx].original == self.tokens[idx].original:
                        newtokenlist[idx].expanded = self.tokens[idx].expanded
                
            elif ln[0] in(""begin"",""while"",""until"",""case"",""if"",""unless"",""for""):
                    ends_to_skip += 1
                    
            elif ln[0] in (""attr_reader"",""attr_writer"",""attr_accessor""):
                for attr in ln:
                    m = re.match(r"":(\w+)"",attr)
                    if m:
                        token = Token()
                        token.rubyfile = self
                        token.type = 'def'
                        token.name = m.group(1)
                        token.start = linecount
                        token.end = linecount
                        token.original = lstrip
                        currentParent.children.append(token)
                        token.parent = currentParent
                        newtokenlist.append(token)
            
            elif re.search(r""\sdo(\s+\|.*?\|)?\s*(#|$)"", line):
                #print ""do"",line

                # Support for new style RSpec
                if re.match(r""^(describe|it|before|after)\b"", ln[0]):
                    token = Token()
                    token.rubyfile = self
                    token.start = linecount
                    
                    if currentParent.type == ""describe"":                    
                        if ln[0] == ""it"":
                            token.name = "" "".join(ln[1:-1])
                        else:
                            token.name = ln[0]
                        token.type = ""def""
                    elif ln[0] == ""describe"":
                        token.type = ""describe""
                        token.name = "" "".join(ln[1:-1])
                    else:
                        continue
                    currentParent.children.append(token)
                    token.parent = currentParent
                    currentParent = token
                    newtokenlist.append(token)

                # Deprectated support for old style RSpec, will be removed later
                elif ln[0] in (""context"",""specify"",""setup"",""teardown"",""context_setup"",""context_teardown""):
                    token = Token()
                    token.rubyfile = self
                    token.start = linecount
                    
                    if currentParent.type == ""context"":                    
                        if ln[0] == ""specify"":
                            token.name = "" "".join(ln[1:-1])
                        else:
                            token.name = ln[0]
                        token.type = ""def""
                    elif ln[0] == ""context"":
                        token.type = ""context""
                        token.name = "" "".join(ln[1:-1])
                    else:
                        continue
                    currentParent.children.append(token)
                    token.parent = currentParent
                    currentParent = token
                    newtokenlist.append(token)
                else:
                    ends_to_skip += 1
                
            elif ln[0] in (""public"",""private"",""protected""):
                if len(ln) == 1:
                    access = ln[0]
                    
            if re.search(r"";?\s*end(?:\s*$|\s+(?:while|until))"", line):
                if ends_to_skip > 0:
                    ends_to_skip -= 1
                else:
                  token = currentParent
                  #print ""end"",currentParent.name
                  token.end = linecount
                  currentParent = token.parent
                

        # set new token list
        self.tokens = newtokenlist
        return True


#===============================================================================

class RubyParser( ClassParserInterface ):
    
    def __init__(self):
        self.rubyfile = None


    def appendTokenToBrowser(self, token, parentit ):
        it = self.__browsermodel.append(parentit,(token,))
        token.path = self.__browsermodel.get_path(it)
        #print token.path
        #if token.parent:
        #    if token.parent.expanded:
        #        self.browser.expand_row(token.parent.path,False)
        #        pass
        for child in token.children:
            self.appendTokenToBrowser(child, it)


    def parse(self, doc):
        """""" 
        Create a gtk.TreeModel with the class elements of the document
        
        The parser uses the ctags command from the shell to create a ctags file,
        then parses the file, and finally populates a treemodel.
        """"""
    
        self.rubyfile = RubyFile(doc)
        self.rubyfile.parse(options.singleton().verbose)
        self.__browsermodel = gtk.TreeStore(gobject.TYPE_PYOBJECT)
        for child in self.rubyfile.children:
            self.appendTokenToBrowser(child,None)
        return self.__browsermodel

        
    def __private_test_method(self):
        pass


    def get_tag_position(self, model, path):
        tok = model.get_value( model.get_iter(path), 0 )
        try: return tok.rubyfile.uri, tok.start+1
        except: return None


    def current_line_changed(self, model, doc, line):

        # parse again if line count changed
        if abs(self.rubyfile.linestotal - doc.get_line_count()) > 0:
            if abs(self.rubyfile.linestotal - doc.get_line_count()) > 5:
                if options.singleton().verbose:
                    print ""RubyParser: refresh because line dif > 5""
                self.rubyfile.parse()
            else:
                it = doc.get_iter_at_line(line)
                a = it.copy(); b = it.copy()
                a.backward_line(); a.backward_line()
                b.forward_line(); b.forward_line()

                t = doc.get_text(a,b)
                if t.find(""class"") >= 0 or t.find(""def"") >= 0:
                    if options.singleton().verbose:
                        print ""RubyParser: refresh because line cound changed near keyword""
                    self.rubyfile.parse()
 

    def get_tag_at_line(self, model, doc, linenumber):
        t = self.rubyfile.getTokenAtLine(linenumber)
        #print linenumber,t
        if t: return t.path


    def cellrenderer(self, column, ctr, model, it):

        """""" Render the browser cell according to the token it represents. """"""
        tok = model.get_value(it,0)

        weight = 400
        style = pango.STYLE_NORMAL
        name = tok.name#+tok.params
        colour = options.singleton().colours[ ""function"" ]

        # set label and colour
        if tok.type == ""class"":
            name = ""class ""+name
            colour = options.singleton().colours[ ""class"" ]
            weight = 600
            
        elif tok.type == ""module"":
            name = ""module ""+name
            colour = options.singleton().colours[ ""namespace"" ]
            weight = 600
            
        # new style RSpec
        elif tok.type == ""describe"":
            name = ""describe ""+name
            colour = options.singleton().colours[ ""namespace"" ]
            weight = 600
        
        # Old style RSpec, deprecated    
        elif tok.type == ""context"":
            name = ""context ""+name
            colour = options.singleton().colours[ ""namespace"" ]
            weight = 600
            
        elif tok.type == ""def"":
            colour = options.singleton().colours[ ""member"" ]
            
        if tok.comment: name = ""#""+name

        # assing properties
        ctr.set_property(""text"", name)
        ctr.set_property(""style"", style)
        ctr.set_property(""foreground-gdk"", colour)


    def pixbufrenderer(self, column, crp, model, it):
        tok = model.get_value(it,0)

        icon = ""default""

        if tok.type == ""class"":
            icon = ""class""
        elif tok.type == ""module"":
            icon = ""namespace""
        elif tok.type == ""describe"":
            icon = ""namespace""
        elif tok.type == ""context"":
            icon = ""namespace""
        elif tok.type == ""def"":
            if tok.access == ""public"":
                icon = ""method""
            elif tok.access == ""protected"":
                icon = ""method_prot""
            elif tok.access == ""private"":
                icon = ""method_priv""
                
        crp.set_property(""pixbuf"",imagelibrary.pixbufs[icon])

        
",css,css,0.0043039628061556775,0.35202876321439147,0.28533002319534573,0.05419948531826193,1.0154355977814249e-06,2.9236774022119744e-05,0.043141310323620535,0.25500727805570017,0.005958924876904736
"class Vector:
  def __init__(self, x, y, z):
    self.x = x
    self.y = y
    self.z = z

  def __add__(self, other): 
    x = self.x + other.x 
    y = self.y + other.y 
    z = self.z + other.z 
    return Vector(x, y, z) 
 
  def __sub__(self, other): 
    x = self.x - other.x 
    y = self.y - other.y 
    z = self.z - other.z 
    return Vector(x, y, z) 
  
  def __mul__(self, other): 
    x = self.x * other.x 
    y = self.y * other.y 
    z = self.z * other.z 
    return Vector(x, y, z) 
  
  def __div__(self, other): 
    x = self.x / other.x 
    y = self.y / other.y 
    z = self.z / other.z 
    return Vector(x, y, z) 
  
  def __str__(self): 
    return ""Vector({}, {}, {})"".format(self.x, self.y, self.z)",python,python,0.001016796136553174,0.026551187336300547,0.04134496993289716,4.421228647671455e-05,0.003858048371829027,7.216152542364294e-05,0.8616119451082501,0.065006125947638,0.0004945533546315948
"# Matrix multiplication in Python

matrix_A = [[2, 3], [4, 7]] 
matrix_B = [[6, 5], [1, 4]] 
  
# result matrix
result = [[0, 0], [0, 0]] 
  
# iterating by row of Matrix A 
for i in range(len(matrix_A)): 
  
    # iterating by coloum of Matrix B  
    for j in range(len(matrix_B[0])): 
  
        # iterating by rows of Matrix B 
        for k in range(len(matrix_B)): 
            result[i][j] += matrix_A[i][k] * matrix_B[k][j] 
  
for r in result: 
    print(r)",python,python,6.788728346118842e-05,3.251218577558694e-05,6.83381035271289e-05,6.374242810435803e-07,0.0003456732947069832,0.09637645287536335,0.9024775243812952,0.0005314384945989517,9.953595699051399e-05
"import numpy as np

# Define the data points
points = np.array([[1, 5], [2, 3], [3, 4]])

# Define the labels
labels = np.array([1, -1, -1])

# Define the parameters of the algorithm
b = 0
w0 = 0
w1 = 0
learning_rate = 0.001

# Define the training loop
for i in range(100):
 pred = w0 + w1 * points[:, 0] > b
 loss = np.mean((labels - pred) ** 2)
 dloss_dw0 = 2 * np.mean(points[:, 0] * (labels - pred))
 dloss_dw1 = 2 * np.mean(points[:, 1] * (labels - pred))
 dloss_db = 2 * np.mean(labels - pred)
 
 # update parameters
 w0 = w0 + learning_rate * dloss_dw0
 w1 = w1 + learning_rate * dloss_dw1
 b = b + learning_rate * dloss_db

# Define the prediction function
def predict(x):
 pred = w0 + w1 * x > b
 
 if pred:
 return ""Positive""
 else:
 return ""Negative""",sql,bash,0.44486753793691053,0.05628134053522039,0.002579288043028584,0.0003243468467596727,0.017742862955314045,0.005418131617711659,0.4007514811881465,0.0023229728413655163,0.06971203803554307
"# function to check if  
# given number is perfect square 
def isPerfectSquare(n): 
  
    if n < 0: 
        return False
    
    # Base case 
    if n == 1: 
        return True
  
    i = 1
    x = n // 2
      
    while x >= i: 
        if (x == i) and (n % x == 0): 
            return True
        x -= 1
    return False",python,python,1.328496385555778e-05,0.00020956659694655857,0.0006764645245979968,1.0421955445201936e-05,0.005354092971133225,9.571717894421985e-05,0.9929463609100704,4.275032026100857e-05,0.0006513405787460074
"def repeatString(string, num):
    return string * num

result = repeatString(""xyz"", 3)
print(result)",python,java,3.212752368711487e-12,7.659661502505931e-08,1.5675686305395847e-07,0.8265878759013809,1.5914131785322925e-13,1.4345605522272082e-06,0.17336524358812264,4.51734294056473e-05,3.916368850095953e-08
"def integer_to_binary(num):
    if num == 0:
        return 0
    elif num < 0:
        num += 2**32
    binary = ''
    while num > 0:
        binary = str(num%2) + binary
        num //= 2
    return binary",python,matlab,2.97122702683721e-08,2.2265343271036947e-12,7.699458473858578e-08,4.999979188056412e-09,1.3603485768808753e-08,0.9999653964008727,3.4438297802133476e-05,2.199149594655833e-08,1.7997282763898754e-08
"class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, data):
        self.items.append(data)

    def pop(self):
        return self.items.pop()

    def peek(self):
        return self.items[len(self.items)-1]

    def size(self):
        return len(self.items)",python,python,8.105969213495246e-06,0.006433056735310552,0.015248907447690342,7.001722850231077e-07,4.361910774413297e-05,2.180284766940039e-07,0.6316121064045693,0.3466472351393736,6.050995336738247e-06
"def remove_duplicates(arr):
    seen = set()
    seen_add = seen.add
    return [x for x in arr if not (x in seen or seen_add(x))]

arr = [1, 3, 2, 1, 5, 4, 8, 6, 7, 5]
result = remove_duplicates(arr)

print(result)
# Output: [1, 3, 2, 5, 4, 8, 6, 7]",python,python,0.0003061013181135989,0.0010720264117211906,0.00015277789199186112,6.898685890521908e-05,2.906066041398551e-05,0.20440986994509994,0.793898768802685,7.539969697478041e-06,5.486814137188749e-05
"import numpy as np

def predict_match_score(probabilities):
    p_serve_win = probabilities[0]
    p_opp_serve_win = probabilities[1]
    p_serve_game_win = probabilities[2]
    p_opp_serve_game_win = probabilities[3]

    expected_score_serve = p_serve_game_win * (4*p_serve_win + 3*p_opp_serve_win)
    expected_score_opp_serve = p_opp_serve_game_win*(4*p_opp_serve_win + 3*p_serve_win)

    total_expected_score = expected_score_serve + expected_score_opp_serve
    return total_expected_score

probabilities = np.random.random(4)
print(predict_match_score(probabilities))",python,python,0.01269581296284521,0.014273115206630533,0.009774502049888108,0.0006026898023791681,0.0011478195211989317,0.001224379691732178,0.9443581126012998,0.003813655298627346,0.012109912865398961
"# Importing necessary modules
import requests
from bs4 import BeautifulSoup

# The URL to get data from
url = ""https://www.example.com""

# Making a request to the website and getting the response
response = requests.get(url)
soup = BeautifulSoup(response.content, 'html.parser')

# Extracting the required data
data = soup.find_all('p')

# Looping through the data and printing it out
for item in data:
 print(item.text)",python,java,8.677513559610607e-16,0.28168677516524443,0.0028110463715057825,0.7129782223581332,1.4987286914401282e-05,1.462929222290424e-09,1.7934549884836044e-05,1.697655297085603e-05,0.002474056252416378
"def search(string, search): 
	# Create a Trie type datastructure 
	t = {}

	# Put each character of the string in a lexicographic tree 
	for char in string: 
		if char in t: 
			t = t[char] 
		else: 
			t[char] = {}
			t = t[char] 

	# Now search for the search string in the trie structure 
	cursor = t 
	for char in search: 
		if char in cursor: 
			cursor = cursor[char] 
		else: 
			return False
	return True",python,java,4.86897628175946e-11,0.00013437894971722394,1.960814888129978e-05,0.9951303168466171,8.609200600262007e-09,5.2326252500656616e-06,0.004512612180785641,0.0001342296709260008,6.36129199321641e-05
"#!/usr/bin/python
# -*- coding: utf-8 -*-
import domoticz as d
import sys
import time
sys.path.insert(0, '/opt/python-verisure/')
import verisure
import pickle
import pytz
import urllib3
import certifi
from datetime import datetime
from tzlocal import get_localzone

debug = False

try:
    execfile(""/etc/domoticz/scripts.conf"")
except:
    exec(open(""/etc/domoticz/scripts.conf"").read())

d.log(""Getting status from Verisure..."")

if int(time.time()) % frequency < 60 :

	#Login
	try:
		f = open(mypagesSession, 'rb')
		myPages = pickle.load(f)
		f.close()
	except:
		myPages = verisure.Session(email, verisurepass)
		myPages.login()
		f = open(mypagesSession, 'wb')
		pickle.dump(myPages, f)
		f.close()
		if debug:
			d.log(""Loading file failed."")

	#Get overview
	try:
		overview = myPages.get_overview()
	except:
		myPages = verisure.Session(email, verisurepass)
		myPages.login()
		f = open(mypagesSession, 'wb')
		pickle.dump(myPages, f)
		f.close()
		overview = myPages.get_overview()
		if debug:
			d.log(""Session was timed out"")

	#Alarm
	status = overview['armState']['statusType']
	if debug:
		d.log(""Verisure Alarm status: "", status )
	device = d.devices[atHome]
	if status == ""DISARMED"" or status == ""ARMED_HOME"":
		device.on()
	else:
		device.off()

	#Smartplugs
	for i in overview['controlPlugs']:
		if debug:
			d.log(""Verisure Smartplug status for "" + i['area'].encode(""utf-8"",""ignore"") + "": "", i['currentState'] )
		device = d.devices[i['area'].encode(""utf-8"",""ignore"")]
		if i['currentState'] == ""ON"":
			device.on()
		else:
			device.off()

	#Climate
	for i in overview['climateValues']:
		device = d.devices[i['deviceArea'].encode(""utf-8"",""ignore"")]
		domlastupdate = datetime.strptime(device.last_update_string, '%Y-%m-%d %H:%M:%S')
		verilastupdate = datetime.strptime(i['time'][:-5], '%Y-%m-%dT%H:%M:%S')
		verilastupdate = verilastupdate.replace(tzinfo=pytz.UTC)
		verilastupdate = verilastupdate.astimezone(get_localzone())
		verilastupdate = verilastupdate.replace(tzinfo=None)
		if debug:
			d.log(""Domoticz last update of "" + device.name + "": "" + str(domlastupdate))
			d.log(""Verisure last update of "" + device.name + "": "" + str(verilastupdate))

		if verilastupdate > domlastupdate:
			if debug:
				d.log(""update domoticz climate device "" + device.name)
			if debug:
				d.log(""time: "" + i['time'] )
				d.log(""location: "" + i['deviceArea'].encode(""utf-8"",""ignore"") )
				d.log(""serial: "" + i['deviceLabel'] )
				d.log(""temperature: "" + str(i['temperature']))
			if 'humidity' in i:
				if debug:
					d.log(""humidity: "" + str(i['humidity']))
				if i['humidity'] < 20:
					comf = 2
				if i['humidity'] >= 20 and i['humidity'] <= 35:
					comf = 0
				if i['humidity'] > 35 and i['humidity'] <= 75:
					comf = 1
				if i['humidity'] > 75:
					comf = 3
				url = baseurl + ""type=command&param=udevice&idx="" + climate[i['deviceArea'].encode(""utf-8"",""ignore"")] + ""&nvalue=0&svalue="" + str(i['temperature']) + "";"" + str(i['humidity']) + "";"" + str(comf)
			else:
				url = baseurl + ""type=command&param=udevice&idx="" + climate[i['deviceArea'].encode(""utf-8"",""ignore"")] + ""&nvalue=0&svalue="" + str(i['temperature'])

			if debug:
				d.log('URL: ' + url)

			http = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())
			r = http.request('GET', url, timeout=2.5)
			if debug:
				d.log(""Status code: "" + str(r.status) + ""\n"" + r.data)
			if r.status != 200:
				d.log(""Error updating temp in Domoticz. HTTP code: "" + str(r.status) + "" "" + r.data)

else:
	if debug:
		d.log(""Only runs every "" + str(frequency/60) + "" min."")

d.log(""done getting status from Verisure"")
",sql,javascript,6.3826994579435305e-09,0.00032530955076473555,0.0002312523507981507,0.0054296457112961004,0.9920688488410586,0.0012595692328663587,0.0005405428728556321,0.00013046405334300151,1.4361004317798345e-05
"def search_word(word, dictionary):
    if word in dictionary.keys():
        return dictionary[word]
    else:
        return None

dictionary = {'hello': 'string', 'goodbye': 'bye'}

word = 'hello'

result = search_word(word, dictionary)

if result:
    print('Word found in dictionary: ' + result)

else:
    print('Word not found in dictionary.')",css,python,0.0034262164440284145,0.49293887278568316,0.0012442587113089102,8.234638319173894e-07,1.1443776889364814e-05,0.00010139351752235011,0.5005572215511,0.00148204996376542,0.0002377197858705078
"import random

def play_game(player1, player2):
 choices = ['rock', 'paper', 'scissors']
 player1_choice = random.choice(choices)
 player2_choice = random.choice(choices)

 # If player 1 chooses rock
 if player1_choice == 'rock':
 # and player 2 chooses scissors, player 1 wins
 if player2_choice == 'scissors':
 print('Player 1 wins!')
 # and player 2 chooses paper, player 2 wins
 elif player2_choice == 'paper':
 print('Player 2 wins!')
 # otherwise it's a tie
 else:
 print('It\'s a tie!')

 # If player 1 chooses paper
 elif player1_choice == 'paper':
 # and player 2 chooses rock, player 1 wins
 if player2_choice == 'rock':
 print('Player 1 wins!')
 # and player 2 chooses scissors, player 2 wins
 elif player2_choice == 'scissors':
 print('Player 2 wins!')
 # otherwise it's a tie
 else:
 print('It\'s a tie!')

 # If player 1 chooses scissors
 elif player1_choice == 'scissors':
 # and player 2 chooses rock, player 2 wins
 if player2_choice == 'rock':
 print('Player 2 wins!')
 # and player 2 chooses paper, player 1 wins
 elif player2_choice == 'paper':
 print('Player 1 wins!')
 # otherwise it's a tie
 else:
 print('It\'s a tie!')",python,python,0.005114277621327074,0.13947169887888577,0.015055415802037534,0.001489229533773802,0.005393897798460776,0.025645469061898424,0.5706263205216342,0.02296550154936555,0.21423818923261673
"def determine_grade(marks):
    # Determine the average mark
    avg = (marks['math'] + marks['history'] + marks['english'])/3
    
    # If the average mark is greater than or equal to 90, the student's grade is A 
    if avg >= 90:
        return 'A'
    # If the average mark is greater than or equal to 80, the student's grade is B 
    elif avg >= 80:
        return 'B'
    # If the average mark is greater than or equal to 70, the student's grade is C 
    elif avg >= 70:
        return 'C'
    # If the average mark is greater than or equal to 60, the student's grade is D 
    elif avg >= 60:
        return 'D'
    # Anything less than 60 is an F 
    else:
        return 'F'",python,typescript,7.49160899444053e-05,0.0007172756535975488,0.00016410666110088805,1.2826893366785183e-05,0.0005458091142394769,0.000138498138362424,0.002431211017885404,9.2056273532626e-05,0.9958233001579704
"class Student:

    def __init__(self, student_id, name):
        self.student_id = student_id
        self.name = name
        
    def get_details(self):
        return self.student_id, self.name",python,python,0.0016854147190424004,0.005747851152891102,0.04276751642766558,0.28234324474976175,4.947046545228041e-07,2.886320684938214e-05,0.6518795280505653,0.014317648400184044,0.0012294385883860682
"FROM python:3.7
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
EXPOSE 8080
COPY . /usr/src/app
RUN pip install -r requirements.txt
ENTRYPOINT [""python"", ""scrape.py""]",python,bash,0.9999679213632648,2.579664660375741e-06,2.6728527693535802e-05,1.0340551552824662e-10,9.807565750332824e-07,2.3654790858319065e-07,6.898289484950309e-07,6.827765019205908e-07,1.8043104184412336e-07
"num1 = int(input())
num2 = int(input())
sum_of_nums
print(sum_of_nums)",python,java,0.0012988293762158313,4.94467987954812e-05,9.381354305575956e-05,0.9899659957327004,9.923945291456583e-06,8.115893290957563e-11,0.00857662549827921,3.043418136159672e-06,2.3216063668076573e-06
"unsortedDict = {""Red"":120,""Blue"":90,""Yellow"":50,""Purple"":75}

sortedList = sorted(unsortedDict.items(), key=lambda x: x[1])
print(sortedList)",css,css,0.0059636061757598145,0.6641311934456855,0.09635254145039235,0.001204439274779597,0.015790152835170955,0.015100125689797277,0.19595092910054043,0.00423730198540394,0.0012697100424700842
"# Import necessary libraries
import flask
from flask import request, jsonify
from flask_pymongo import PyMongo

# Create the Flask app
app = Flask(__name__)

# Connect to the MongoDB instance
mongo = PyMongo(app)

# Create the route for accessing the NoSQL database
@app.route('/getData', methods=['GET'])
def get_data():
 # Query the database
 data = mongo.db.yourDatabase.find({})

 # Create an empty list and store the results in a list
 output = []
 for q in data:
  output.append({
   'id': q['id'],
   'name': q['name'],
   'age': q['age']
  })

# Return the results as a JSON Object
return jsonify({'result': output})",css,css,0.001662567122779322,0.9344063101400032,0.001777967499628711,3.5423974346302073e-06,3.087887956253414e-05,1.052343191652904e-05,0.0007409760915887371,0.0016091010043743185,0.05975813343271205
"import json

data = {
 'name': 'Alice',
 'age': 22,
 'hobbies': ['coding', 'guitar']
}

json_data = json.dumps(data)

print(json_data)",css,css,3.598843049143255e-05,0.998553704645927,0.00022772108605218993,3.460918524137807e-05,1.4456614947582788e-06,7.831055046431989e-06,0.0010895495130408357,1.6510040535742673e-05,3.2640382170234206e-05
"for start in range(10):
  print(start)",python,python,1.968777136034235e-05,2.9705440225851088e-05,0.00011683728284327358,1.993419884138394e-06,3.9954098028420826e-06,0.25250394159885986,0.7472911033381026,2.6916387585345066e-06,3.0044100162758417e-05
"import random

# Create a 3x3x3 cube
cube = [[[0] * 3 for _ in range(3)] for _ in range(3)]

# Fill the cube with random colors
colors = [1, 2, 3, 4, 5, 6]
for plane in cube:
 for row in plane:
 for i in range(3):
 row[i] = random.choice(colors)

# Print out the cube configuation
for plane in cube:
 print(plane)",python,matlab,9.013064044112031e-05,0.00016296638876082132,0.001957473169511138,8.802178689253243e-05,0.0001644763166361329,0.6335231669811705,0.358472391444664,0.004330842180933929,0.0012105310909899
"def to_dict(lst): 
    # Initialize a new dictionary 
    new_dict = {}
      
    # Iterate over the list and assign the square root of each element as value  
    for item in lst:
        new_dict[item] = item**0.5
      
    # Return the dictionary  
    return new_dict",python,css,0.0008141889191282085,0.7441263253390805,0.029213945683241198,0.00012801612893989425,0.01246017628304923,0.037062864130729685,0.04214810893873968,0.0015885421790754579,0.13245783239801615
"def print_list(list1):
    for element in list1:
        print(element)

list1 = [1,2,3,4,5]

print_list(list1)",python,matlab,6.577818474600954e-05,0.0002922695313066834,0.00010520892600583871,1.695227717706285e-05,5.145291195549972e-05,0.861692117252315,0.13760619997982435,3.939584523353739e-07,0.0001696269782172525
"import random 
import math

def random_mixture(mean1, mean2, stddev1, stddev2, N):
    data = []
    for _ in range(N):
        if random.random() < 0.5:
            data.append(random.normalvariate(mean1, stddev1))
        else:
            data.append(random.normalvariate(mean2, stddev2))
    return data",python,sql,0.00012982359564108379,0.008675756885274152,0.004420150110234278,2.8100802577172796e-06,2.7664086580857722e-05,0.1771251230831263,0.34317671859335913,0.46586830071806534,0.0005736528474611415
"def factorial(num):
    result = 1
    for i in range(1, num+1):
        result *= i
    return result

n = int(input(""Enter an Integer: ""))
print(factorial(n))",python,python,2.635972812872214e-06,2.0287290995083107e-07,6.8584764070098105e-06,9.898794833724379e-06,7.339513831676549e-07,3.678863078192246e-05,0.9999387780182825,3.620051495261764e-06,4.832310938157618e-07
"def create_html_table(list_of_tuples):
    html_string = ""<html>\n<body>\n<table>\n""
    # Generate HTML table header
    html_string += ""<tr>\n""
    for key in list_of_tuples[0].keys():
        html_string += ""<th>{}</th>\n"".format(key)
    html_string += ""</tr>\n""
    # Generate HTML table content
    for tuple_ in list_of_tuples:
        html_string += ""<tr>\n""
        for data in tuple_:
            html_string += ""<td>{}</td>\n"".format(data)
        html_string += ""</tr>\n""
    # Close the table
    html_string += ""</table>\n</body>\n</html>""

    return html_string

if __name__ == ""__main__"":
    list_of_tuples = [('First', 'John'), ('Last', 'Doe'), ('Age', 20)]
    html_string = create_html_table(list_of_tuples)
    print(html_string)",html,html,2.0563879724255425e-06,9.178228694499065e-05,0.9998815579154933,2.250075242090641e-07,8.170610899277069e-06,1.3984276327701555e-06,1.348074804089761e-05,9.684891744732204e-07,3.6012631775802155e-07
"def sort_strings_by_length(strings):
    # Sort strings by length in ascending order
    strings.sort(key=len)
    return strings",python,python,0.001241439123446917,0.024223317804924212,0.001743720421215069,0.00015327900281969552,0.02631505323402874,0.00041794382945624093,0.936399450045926,0.009151772002176324,0.0003540245360069421
"import random
from textgenrnn import textgenrnn

textgen = textgenrnn()

seed_phrase = 'The quick brown '
seed_words = seed_phrase.split() # split seed phrase into list

# Generate text consisting of 20 words
generated_text = textgen.generate(20, return_as_list=True, temperature=0.5, prefix=seed_words)[0].strip()

# Print the generated text
print(generated_text)",python,python,0.1023805684951226,0.10131766950931569,0.004332500746053223,9.755321795624372e-06,0.002888898220456452,9.463556738474354e-05,0.6983332028694406,0.0764044101892758,0.014238359081155252
"import json

dictionary = {
   ""name"": ""John"",
   ""age"": 30,
   ""car"": [""Ford"", ""BMW"", ""Fiat""]
}

json_data = json.dumps(dictionary)
print(json_data) // Output: {""name"": ""John"", ""age"": 30, ""car"": [""Ford"", ""BMW"", ""Fiat""]}",css,css,1.8463837143531212e-05,0.9975116758129661,1.4620060463395027e-05,0.0024074948951633055,5.491641973000654e-10,4.3211936947830137e-07,4.620188641176251e-05,4.784898999029593e-07,6.32349418425313e-07
"import numpy as np

random_matrix = np.random.randint(1, 100, size=(5, 5))
print(random_matrix)",python,python,0.025839884125177414,0.013551940237340056,0.007548444232344965,0.00012007576132130911,0.0002288874554844843,0.00014370952688095036,0.9411875424132419,0.0013366132037966388,0.010042903044412391
"import pandas as pd
from sklearn.linear_model import LinearRegression

# Read the data
data = pd.read_csv('housing.csv')
# Split into X and y
X = data.drop('price', axis=1)
y = data['price']
# Initialize the model
model = LinearRegression()
# Fit the model to the training data
model.fit(X, y)
# Estimate future prices using the model
predictions = model.predict(X)",python,bash,0.6504267594955206,0.03507206722927271,0.0011234694463121658,1.4914829758934019e-06,9.283057941969433e-05,1.8748826466082922e-06,0.02985889395978343,5.06105790415026e-08,0.2834225623134897
"import time
def measure_performance(fn, data):
 start = time.perf_counter()
 result = fn(*data)
 elapsed = 1000 * (time.perf_counter() - start) 
 return result, elapsed

def add(x, y):
 return x + y

data = (3, 5)
result, elapsed = measure_performance(add, data)
print('Result:', result)
print('Elapsed time (ms):', elapsed)",python,python,1.559527242273029e-05,0.018937674972523647,0.0005427885544448231,0.00016558715810587662,3.677827295689969e-05,1.0913705488513142e-07,0.9774991835488965,0.002692841619549062,0.00010944146404540244
"my_dict = {
    ""word"": ""hello""
}",css,bash,0.9713188497027877,0.0036357789335793016,0.0009185824504558021,3.8205224291772176e-10,0.007987557078117727,2.850659821672407e-05,0.015905611899935397,3.293905767656202e-05,0.00017217389717854453
"class CalcListSum:
  def __init__(self, numbers):
    self.numbers = numbers

  def get_sum(self):
    sum = 0
    for num in self.numbers:
      sum += num
    return sum 

nums = [2, 3, 5, 7]
calc_sum = CalcListSum(nums)
sum_of_nums = calc_sum.get_sum()
print(sum_of_nums)",python,python,0.0004943150746724861,0.00030269098221264324,0.039758156731356534,0.17143267636734255,0.0012373443640846134,0.0015577033229660772,0.7588631881824588,0.0251762990897627,0.0011776258851434827
"<html>
    <head>
    </head>
    <body>
        <table>
            <tr>
                <th>Name</th>
                <th>Age</th>
                <th>City</th>
            </tr>
            <tr>
                <td>John</td>
                <td>20</td>
                <td>New York</td>
            </tr>
            <tr>
                <td>Jane</td>
                <td>25</td>
                <td>San Francisco</td>
            </tr>
        </table>
    </body>
</html>",html,html,6.155469192887103e-11,1.327622833241635e-09,0.9999999981351553,5.4768362369116966e-11,4.872010933210693e-11,2.073414431256488e-11,3.1257430840413653e-10,3.8870131440257054e-11,3.117326338214284e-16
"class Student:
 def __init__(self, assignments, tests, projects):
 self.assignments = assignments
 self.tests = tests
 self.projects = projects

def calculate_grade(self):
 total = (self.assignments * 0.3) + (self.tests * 0.4) + (self.projects * 0.3)
 return total",python,python,0.00021781495509200333,0.019123212424933818,0.17270500833775845,2.0640931246302787e-05,4.980148586633626e-05,1.024178576741928e-05,0.7047245414520452,0.10197765427934866,0.0011710843479416943
"class MeanMedianCalculator:
    def __init__(self, data):
        self.data = data
    
    def mean(self):
        return sum(self.data) / len(self.data)
    
    def median(self):
        self.data.sort()
        return self.data[(len(self.data)-1) // 2]

calculator = MeanMedianCalculator([2, 4, 6, 8, 10])
print(""Mean is {}, Median is {}"".format(calculator.mean(), calculator.median()))",python,python,0.04883310867992874,0.005910566908884221,4.8227186976621554e-05,2.3018525243484783e-06,1.205606564480554e-05,2.2825054593131128e-07,0.9295910406529652,0.015257361844520046,0.00034510855801019415
"def searchWord(text, word):
  return word in text

text = ""the quick brown fox jumps over the lazy dog""
word = ""fox""

if searchWord(text, word):
  print(""The word is found in the text string."")
else:
  print(""The word is not found in the text string."")",python,python,0.0016489972555582925,0.046702952260844324,0.0011377223050294029,0.0016161550928290795,0.0002562627060901068,0.00014521403328205795,0.6074070860624309,0.1333102272526439,0.20777538303129206
"import requests
from bs4 import BeautifulSoup 

url = ""https://www.imdb.com/chart/top""
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

movies = soup.find_all('td', class_='titleColumn')

# Create a list of top 100 movies
top_movies = []

for movie in movies:
  # get movie title
  title = movie.a.text
  # get movie release date
  release_date = movie.span.text
  # get movie description
  movie_page = requests.get(f'https://www.imdb.com{movie.a[""href""]}')
  movie_soup = BeautifulSoup(movie_page.content, 'html.parser')
  description = movie_soup.find('p', class_='text-muted').text.strip()

  top_movies.append({
    'title': title,
    'release_date': release_date,
    'description': description
    })",css,html,7.162341303374324e-11,0.14418906211678165,0.8538025408087477,0.0019424358174158422,4.5990030320037595e-06,1.1253392119455813e-06,1.8362879799312377e-05,3.6348589773506757e-05,5.525373614625472e-06
"def get_nth_prime(n): 
    prime_nums = [2] 
    check_num = 3 
    while len(prime_nums) < n: 
        is_prime = True 
        for i in prime_nums: 
            if check_num % i == 0: 
                is_prime = False 
                break 
        if is_prime: 
            prime_nums.append(check_num) 
        check_num += 2 
    return prime_nums[-1]",python,python,0.0052117882154914365,0.009990233062953106,0.015572642500354303,0.000761079936547191,0.0023256637750221237,0.2601623902993067,0.6991942961558176,0.0016378268383728163,0.005144079216134559
"def sort_arr(arr):
    n = len(arr)
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]  
    return arr

result = sort_arr([9, 4, 6, 1, 3, 7])
print(result)",python,matlab,1.456039542687504e-07,6.800026932375491e-07,2.320264336028102e-07,4.085180115512619e-08,7.134746144826052e-08,0.6628548663354571,0.337143685672918,4.8983837633060746e-08,2.2917544361926473e-07
"def calculate_tax(price):
 tax_rate = 0.135
 return price * tax_rate",python,python,0.004883030948914011,0.10172357848452808,0.005997355937632142,0.0010995225229637226,0.0029997893960900697,0.0017575226369581805,0.8721350700164389,0.0023242676474109427,0.007079862409063799
"def search(query):
    results = []
    for document in documents:
        if query in document:
            results.append(document)
    return results",python,html,2.68076338804413e-05,0.004754213565801883,0.7690761471430647,0.00037760592157566494,0.07105450633744737,0.08877574121072389,0.05960144857348216,0.00013290484787161215,0.006200624766152157
"import random

#list of possible answers 
answers = [""That's a great question!"", 
    ""I'm not sure, but I'll try to find out!"", 
    ""That sounds interesting, tell me more!"", 
    ""I have no idea, sorry!""]

def chatbot_response(user_input): 
    # get a random response from answers
    response = random.choice(answers)
    return response

# simple loop to keep the conversation going
while True:
    user_input = input('You: ')
    if user_input == 'Goodbye':
        print('Chatbot: Goodbye!')
        break
    else:
        print('Chatbot: ', chatbot_response(user_input))",python,python,0.0012825670796030079,0.19064943376080293,0.0077779038071878635,0.002013098045349716,0.016684818883762657,0.001219425752090007,0.6461735844899311,0.11985722030866024,0.014341947872612207
"def generate_web_page(html, css):
    html = html.encode('utf-8')
    css = css.encode('utf-8')
    html = html.replace(""<style>"", f""<style>{css}"")
    page = f""""""<!DOCTYPE html>
    <html>
    <head>
    <title>Generated web page</title>
    </head>
    <body>
    {html}
    </body>
    </html>""""""
    return page",html,html,5.050729336620118e-27,2.252587576094104e-22,1.0,7.713123405079395e-20,7.292471035061215e-22,4.4239842754952485e-25,6.417463224788913e-25,1.3018119662738334e-25,3.2893404711135526e-21
"def remove_spaces(s): 
   return s.replace(' ', '') 

s = input(""Enter a string: "")
print(remove_spaces(s))",python,python,1.7079408475180472e-05,0.003830318280094907,0.001194990690332409,0.019445612649547684,1.0106705288060759e-06,8.467648727740682e-06,0.971921451628778,0.0035132671143328483,6.780190918231041e-05
"def findSum(n): 
    sum = 0
    for num in range(0, n+1):
        sum += num 
    return sum

n = 10
sum_of_natural_num = findSum(n)
print(sum_of_natural_num)",python,matlab,2.83020889643709e-09,1.1110952615910546e-11,3.330602290333211e-08,2.8639377821411237e-08,1.2563245427891019e-09,0.9999996949792438,2.324844731517847e-07,3.0452992643553746e-09,3.4479387351481334e-09
"import json
import os
import random
import sys
from subprocess import Popen, PIPE
from urllib.parse import urlencode

from OpenSSL import SSL
from twisted.web.server import Site, NOT_DONE_YET
from twisted.web.resource import Resource
from twisted.web.static import File
from twisted.web.test.test_webclient import PayloadResource
from twisted.web.server import GzipEncoderFactory
from twisted.web.resource import EncodingResourceWrapper
from twisted.web.util import redirectTo
from twisted.internet import reactor, ssl
from twisted.internet.task import deferLater

from scrapy.utils.python import to_bytes, to_unicode
from scrapy.utils.ssl import SSL_OP_NO_TLSv1_3


def getarg(request, name, default=None, type=None):
    if name in request.args:
        value = request.args[name][0]
        if type is not None:
            value = type(value)
        return value
    else:
        return default


class LeafResource(Resource):

    isLeaf = True

    def deferRequest(self, request, delay, f, *a, **kw):
        def _cancelrequest(_):
            # silence CancelledError
            d.addErrback(lambda _: None)
            d.cancel()

        d = deferLater(reactor, delay, f, *a, **kw)
        request.notifyFinish().addErrback(_cancelrequest)
        return d


class Follow(LeafResource):

    def render(self, request):
        total = getarg(request, b""total"", 100, type=int)
        show = getarg(request, b""show"", 1, type=int)
        order = getarg(request, b""order"", b""desc"")
        maxlatency = getarg(request, b""maxlatency"", 0, type=float)
        n = getarg(request, b""n"", total, type=int)
        if order == b""rand"":
            nlist = [random.randint(1, total) for _ in range(show)]
        else:  # order == ""desc""
            nlist = range(n, max(n - show, 0), -1)

        lag = random.random() * maxlatency
        self.deferRequest(request, lag, self.renderRequest, request, nlist)
        return NOT_DONE_YET

    def renderRequest(self, request, nlist):
        s = """"""<html> <head></head> <body>""""""
        args = request.args.copy()
        for nl in nlist:
            args[b""n""] = [to_bytes(str(nl))]
            argstr = urlencode(args, doseq=True)
            s += ""<a href='/follow?%s'>follow %d</a><br>"" % (argstr, nl)
        s += """"""</body>""""""
        request.write(to_bytes(s))
        request.finish()


class Delay(LeafResource):

    def render_GET(self, request):
        n = getarg(request, b""n"", 1, type=float)
        b = getarg(request, b""b"", 1, type=int)
        if b:
            # send headers now and delay body
            request.write('')
        self.deferRequest(request, n, self._delayedRender, request, n)
        return NOT_DONE_YET

    def _delayedRender(self, request, n):
        request.write(to_bytes(""Response delayed for %0.3f seconds\n"" % n))
        request.finish()


class Status(LeafResource):

    def render_GET(self, request):
        n = getarg(request, b""n"", 200, type=int)
        request.setResponseCode(n)
        return b""""


class Raw(LeafResource):

    def render_GET(self, request):
        request.startedWriting = 1
        self.deferRequest(request, 0, self._delayedRender, request)
        return NOT_DONE_YET
    render_POST = render_GET

    def _delayedRender(self, request):
        raw = getarg(request, b'raw', b'HTTP 1.1 200 OK\n')
        request.startedWriting = 1
        request.write(raw)
        request.channel.transport.loseConnection()
        request.finish()


class Echo(LeafResource):

    def render_GET(self, request):
        output = {
            'headers': dict(
                (to_unicode(k), [to_unicode(v) for v in vs])
                for k, vs in request.requestHeaders.getAllRawHeaders()),
            'body': to_unicode(request.content.read()),
        }
        return to_bytes(json.dumps(output))
    render_POST = render_GET


class RedirectTo(LeafResource):

    def render(self, request):
        goto = getarg(request, b'goto', b'/')
        # we force the body content, otherwise Twisted redirectTo()
        # returns HTML with <meta http-equiv=""refresh""
        redirectTo(goto, request)
        return b'redirecting...'


class Partial(LeafResource):

    def render_GET(self, request):
        request.setHeader(b""Content-Length"", b""1024"")
        self.deferRequest(request, 0, self._delayedRender, request)
        return NOT_DONE_YET

    def _delayedRender(self, request):
        request.write(b""partial content\n"")
        request.finish()


class Drop(Partial):

    def _delayedRender(self, request):
        abort = getarg(request, b""abort"", 0, type=int)
        request.write(b""this connection will be dropped\n"")
        tr = request.channel.transport
        try:
            if abort and hasattr(tr, 'abortConnection'):
                tr.abortConnection()
            else:
                tr.loseConnection()
        finally:
            request.finish()


class ArbitraryLengthPayloadResource(LeafResource):

    def render(self, request):
        return request.content.read()


class Root(Resource):

    def __init__(self):
        Resource.__init__(self)
        self.putChild(b""status"", Status())
        self.putChild(b""follow"", Follow())
        self.putChild(b""delay"", Delay())
        self.putChild(b""partial"", Partial())
        self.putChild(b""drop"", Drop())
        self.putChild(b""raw"", Raw())
        self.putChild(b""echo"", Echo())
        self.putChild(b""payload"", PayloadResource())
        self.putChild(b""xpayload"", EncodingResourceWrapper(PayloadResource(), [GzipEncoderFactory()]))
        self.putChild(b""alpayload"", ArbitraryLengthPayloadResource())
        try:
            from tests import tests_datadir
            self.putChild(b""files"", File(os.path.join(tests_datadir, 'test_site/files/')))
        except Exception:
            pass
        self.putChild(b""redirect-to"", RedirectTo())

    def getChild(self, name, request):
        return self

    def render(self, request):
        return b'Scrapy mock HTTP server\n'


class MockServer():

    def __enter__(self):
        from scrapy.utils.test import get_testenv

        self.proc = Popen([sys.executable, '-u', '-m', 'tests.mockserver'],
                          stdout=PIPE, env=get_testenv())
        http_address = self.proc.stdout.readline().strip().decode('ascii')
        https_address = self.proc.stdout.readline().strip().decode('ascii')

        self.http_address = http_address
        self.https_address = https_address

        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.proc.kill()
        self.proc.communicate()

    def url(self, path, is_secure=False):
        host = self.http_address.replace('0.0.0.0', '127.0.0.1')
        if is_secure:
            host = self.https_address
        return host + path


def ssl_context_factory(keyfile='keys/localhost.key', certfile='keys/localhost.crt', cipher_string=None):
    factory = ssl.DefaultOpenSSLContextFactory(
         os.path.join(os.path.dirname(__file__), keyfile),
         os.path.join(os.path.dirname(__file__), certfile),
         )
    if cipher_string:
        ctx = factory.getContext()
        # disabling TLS1.2+ because it unconditionally enables some strong ciphers
        ctx.set_options(SSL.OP_CIPHER_SERVER_PREFERENCE | SSL.OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_3)
        ctx.set_cipher_list(to_bytes(cipher_string))
    return factory


if __name__ == ""__main__"":
    root = Root()
    factory = Site(root)
    httpPort = reactor.listenTCP(0, factory)
    contextFactory = ssl_context_factory()
    httpsPort = reactor.listenSSL(0, factory, contextFactory)

    def print_listening():
        httpHost = httpPort.getHost()
        httpsHost = httpsPort.getHost()
        httpAddress = 'http://%s:%d' % (httpHost.host, httpHost.port)
        httpsAddress = 'https://%s:%d' % (httpsHost.host, httpsHost.port)
        print(httpAddress)
        print(httpsAddress)

    reactor.callWhenRunning(print_listening)
    reactor.run()
",html,html,0.0612875232714236,0.08351914569133209,0.845743863346274,2.8409507930294055e-05,2.9350074936368123e-06,2.3282195238692785e-08,0.0007394745016632157,0.008673227760594834,5.3976310930720815e-06
"import curses

def main(screen):
 clock = curses.newwin(5, 40, 0, 0)
 clock.box()

 while True:
     clock.addstr(1, 1, time.ctime())
     clock.refresh()
     time.sleep(1)

curses.wrapper(main)",python,python,0.25214444421586757,0.0800943520449712,0.06371913243301638,0.002557854342620426,0.005898960718942992,0.0007374342564414372,0.5704822275062458,0.01538830833710533,0.00897728614478893
"def closest_pair(points):

    min_distance = float(""inf"")
    min_pair = None

    for i in range(len(points)):
        for j in range(i+1, len(points)):
            distance = get_euclidean_distance(points[i], points[j])
            if distance < min_distance:
                min_distance = distance
                min_pair = (points[i], points[j])
    return min_pair

def get_euclidean_distance(p1, p2):
    return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) ** 0.5


points = [[1,2],[-1,2],[2,-2],[-2,-2]]
closest_pair = closest_pair(points)

print(closest_pair)

# Output: ((1, 2), (-1, 2))",python,python,0.0011431976844322592,0.002416375247128552,0.002030081698875415,0.00013442275270935715,0.00021635945231621414,0.010915071031229899,0.9806774091768871,0.0019263146345240858,0.0005407683218971556
"def search_substring(string, substring):
  """"""Function to search substring within a string""""""
  
  matches = []
  
  # Iterate over the search string
  for i in range(len(string)):
    temp = """"
    
    # Iterate over the substring
    for j in range(len(substring)):
      if substring[j] == string[i + j]:
        temp += substring[j]
      else:
        break
        
    if temp == substring:
      matches.append(i)
      
  # Return the list of matches
  return matches

string = 'This is a test string'
substring = 'test'
result = search_substring(string, substring)

# Print the result
print(result)
# Output
# [10]",python,java,1.3949385286414251e-11,1.7139793203334936e-06,1.1998744172413692e-06,0.9991237271766193,1.0098801011058602e-10,9.067464804264147e-06,0.0007934773501619037,6.966243853966647e-05,1.1516011998849727e-06
"def countSubstrings(str, subStr):
    lengthSubStr = len(subStr)
    count = 0
   
    for i in range(len(str)):
        if str[i:i+lengthSubStr] == subStr:
            count += 1
         
    return count

str = ""The quick brown fox jumps over the lazy dog.""
substr = ""the""
print(countSubstrings(str, substr))",python,python,9.993612969659358e-05,0.0001524283813498401,0.0006408274573940538,3.817412999538418e-06,0.00326095503795792,0.00020304964796796651,0.9951640719612789,0.0003581060368790128,0.00011680793447611469
"import os

def get_last_commit_message():
 """"""
 Retrieves the commit message of the last commit.
 """"""
 # Get the list of all commits
 output = os.popen('git log').read()

 # Split the output into a list of commits
 commits = output.split('commit ')[1:]

 # Get the message of the last commit
 last_commit_message = commits[0].split('\n')[1]

 return last_commit_message

if __name__ == '__main__':
 print(get_last_commit_message())",python,javascript,0.023935592180946434,0.004986725122952461,0.0028875677022508124,3.2431851841887716e-06,0.9449162031746756,6.872464412679933e-06,0.00791871422157937,0.010750582582606383,0.004594499365392076
"class SortList:
    def __init__(self, lst):
        self.lst = lst
        
    def sort_list(self):
        self.lst.sort()
        return self.lst",python,python,5.627802047120305e-05,0.0014253585241457455,0.004476917537269204,7.1471751283565165e-06,1.850549857262291e-05,1.2922433971007913e-06,0.9888177953702745,0.005080206091015427,0.00011649953972612756
"input_sentence = ""This is an example sentence""
words = input_sentence.split()
words.sort()

print(words) # ['an', 'example', 'is', 'sentence', 'This']",python,java,5.5584623817363334e-05,0.0005277349390702523,0.3809586724005781,0.4099565145687738,0.0029130796581256246,3.3759319506525336e-05,0.08459568376048016,0.12091456240886532,4.440832078297585e-05
"import pandas as pd
from sklearn.neighbors import NearestNeighbors

# Read in data
data = pd.read_csv('product_data.csv')

# Create an item-based collaborative filter
cf = NearestNeighbors(metric='cosine', algorithm='brute')
cf.fit(data)

# Make recommendations
distances, indices = cf.kneighbors(data, n_neighbors=3)

# Print results 
for i in range(len(data)):
 print('Recommendations for item {}:'.format(i), indices[i])",python,python,0.0007014674972296556,0.029725153279137384,0.014113313004846403,5.6326830462397e-06,0.0003414318893781467,0.0014432462316408044,0.9494504802203418,0.0007902934701753914,0.003428981724204388
"import string

def removePunctuation(input_string):
    punctuations = string.punctuation
    output_string = """"
    for char in input_string:
        if char not in punctuations:
            output_string += char
    return output_string

print(removePunctuation(""Hello, World!!!""))  # Output: Hello World",python,python,0.04053205925947233,0.0024434887674647785,0.0029621511994924947,8.185735370224971e-10,8.563084921371267e-05,4.5639367077339785e-05,0.9512158857709121,0.0026757092158774835,3.943475191626741e-05
"import re

# Define the regular expression for finding spam comments
spam_regex = re.compile(r'(free|discount)', re.IGNORECASE)

# Read in the comments
with open('comments.txt', 'r') as f:
 comments = f.readlines()

# Check each comment for spam
for comment in comments:
 if re.search(spam_regex, comment):
 print('SPAM comment removed: ', comment)
else:
 print('Valid comment: ', comment)",python,python,0.02447304174707074,0.0915254599816032,0.18610610119693502,0.0009342258506947836,0.012173291807930031,0.05767607105769205,0.4541179829870413,0.009224979100734436,0.16376884627029833
"# formA.py
from django.forms import ModelForm
from .models import TableA

class formA(ModelForm):
    class Meta:
        model = TableA
        fields = ['field1','field2','field3','field4']

# formB.py
from django.forms import ModelForm
from .models import TableB

class formB(ModelForm):
    class Meta:
        model = TableB
        fields = ['field1','field2','field3','field4']

# views.py
from django.shortcuts import render
from .forms import formA, formB

def form_view(request):
    formA_data = formA(request.POST or None)
    formB_data = formB(request.POST or None)
    if formA_data.is_valid() and formB_data.is_valid():
        formA_data.save()
        formB_data.save()
        return render(request, 'thankyoupage.html')
    return render(request, 'formpage.html', {'formA':formA_data, 'formB':formB_data})",css,bash,0.9999999994942932,4.78190090380355e-10,1.777921105207257e-12,9.747724955864194e-12,1.2660251329589836e-12,6.544169351105098e-13,1.1335393744085407e-11,1.216908122543051e-14,2.723008907450076e-12
"def preorder(tree): 
    if tree: 
        print(tree.val) 
        preorder(tree.left) 
        preorder(tree.right) 
  
# Driver code  
tree = Node(1) 
tree.left = Node(2) 
tree.right = Node(3) 
tree.left.left = Node(4) 
tree.left.right = Node(5) 
  
preorder(tree)",python,bash,0.8938050462592145,0.008171352763195349,0.0019195434938909755,0.00026913517392206473,0.00045611356184175716,0.00044519111801114345,0.09112753054797473,1.0676652909014851e-06,0.0038050194166585624
"def avg(numbers):
 sum = 0
 for n in numbers:
 sum = sum + n
 return sum / len(numbers)",python,java,2.0052685435858368e-05,6.17160811521671e-05,0.00034346393549705337,0.9910470677596206,0.0001887531964105813,2.057258415600028e-06,0.00820177885386942,9.402437300066487e-05,4.108585659815418e-05
"def sort_lexicographically(arr):
    n = len(arr) 
    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if arr[min_index] > arr[j]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr
 
print(sort_lexicographically(arr)) # Output: ['C', 'C++', 'Java', 'JavaScript', 'Python']",python,matlab,2.1526663027324714e-06,8.428107532354178e-09,4.1011491433616863e-07,1.1702108485751287e-08,2.815293530162398e-07,0.9987161099328294,0.0012806881676211074,1.1239501215695327e-08,3.262192623060861e-07
"def parse_query_string(url): 
    components = url.split('?')
    if len(components) == 2: 
        query_string = components[1]
        params = query_string.split('&')
        output = {}
        for param in params: 
            key_value = param.split('=')
            output[key_value[0]] = key_value[1]
        return output",python,python,0.003526952313001379,0.19570808150570873,0.08969348091718173,0.023516388046760033,0.0034570805559342517,0.009558021035766627,0.6686015036507553,0.0056342097626630155,0.00030428221222903075
"def functionA(x):
    answer = 0
    for i in range(x):
        answer += x-i
    return answer",python,python,0.00023449885439939973,0.00021685501897114164,0.0008566928722391404,3.8492634042894424e-05,5.336882415285801e-05,0.3054955337050716,0.6926610904525717,0.0001803554806360521,0.0002631121579153134
"def merge_sort(input): 
  
    if len(input) > 1: 
        mid = len(input)//2 #Finding the mid of the array 
        L = input[:mid] # Dividing the array elements  
        R = input[mid:] # into 2 halves 
  
        merge_sort(L) # Sorting the first half 
        merge_sort(R) # Sorting the second half 
  
        i = j = k = 0
          
        # Copy data to temp arrays L[] and R[] 
        while i < len(L) and j < len(R): 
            if L[i] < R[j]: 
                input[k] = L[i] 
                i+=1
            else: 
                input[k] = R[j] 
                j+=1
            k+=1
          
        # Checking if any element was left 
        while i < len(L): 
            input[k] = L[i] 
            i+=1
            k+=1
          
        while j < len(R): 
            input[k] = R[j] 
            j+=1
            k+=1",python,python,0.23250536028769436,0.007135458428820882,0.03935468926556714,0.00021162124377325007,0.004073781968745797,0.009511366499270806,0.6680292878420513,0.0019473513887998777,0.037231083075276714
"#objects to test for membership
object1 = [1, 2, 3]
object2 = 4

#test if an object is a member of a given class
def is_member_of_class(obj, the_class):
    return isinstance(obj, the_class)

#test the objects
print(is_member_of_class(object1, list))
print(is_member_of_class(object2, int))",python,typescript,0.0008483123927877069,0.0017538809502107,0.0004160848183189321,0.031470429188064156,0.05186107494439761,3.626497882025723e-05,0.23862895103876258,0.008437452287277552,0.6665475494013605
"def print_spiral_matrix(n):
    matrix = [[0] * n for i in range(n)]
 
    i = 0
    j = 0
 
    top = 0
    left = 0
    right = n - 1
    bottom = n - 1
 
    direction = 0
 
    while top <= bottom and left <= right:
        if direction == 0:
            for j in range(left, right + 1):
                matrix[top][j] = i
                i += 1
            top += 1
            direction = 1
        elif direction == 1:
            for i in range(top, bottom + 1):
                matrix[i][right] = i
                i += 1
            right -= 1
            direction = 2
        elif direction == 2:
            for j in range(right, left - 1, -1):
                matrix[bottom][j] = i
                i += 1
            bottom -= 1
            direction = 3
        elif direction == 3:
            for i in range(bottom, top - 1, -1):
                matrix[i][left] = i
                i += 1
            left += 1
            direction = 0
 
    for i in range(n):
        print(matrix[i])",python,matlab,6.027936831683552e-05,1.9110337656748853e-05,0.0006611295539728552,1.1611849683674553e-05,1.1202083521070728e-05,0.6366415298781553,0.3621607602088809,0.0002775758345312215,0.00015680088528124546
"from sklearn.svm import SVC

model = SVC(kernel = 'linear', probability=True) 
model.fit(X, y)",python,bash,0.8082243639921085,0.0121613601862909,0.003058322186727879,9.532432469280706e-05,0.00021029011941377641,0.00019684256459903937,0.1758149865879004,1.9925456958248263e-07,0.00023831078369715875
"def print_level_order(root):
    if root is None:
        return

    queue = []

    queue.append(root)
    while(len(queue) > 0):
        print(queue[0].data, end="" "")
        node = queue.pop(0)

        if node.left is not None:
            queue.append(node.left)

        if node.right is not None:
            queue.append(node.right)",python,python,0.003039380055698404,0.051877080083484274,0.011564523830698047,0.0017584787277746333,0.005509315870654202,0.1056365810242418,0.6053787276884016,0.19596786228946225,0.01926805042958472
"import tkinter

root = tkinter.Tk()
frame = tkinter.Frame(root)
frame.pack()

button1 = tkinter.Button(frame, text = ""Button 1"", fg = ""red"")
button2 = tkinter.Button(frame, text = ""Button 2"", fg = ""blue"")
button3 = tkinter.Button(frame, text = ""Button 3"", fg = ""green"")
button4 = tkinter.Button(frame, text = ""Button 4"", fg = ""yellow"")

button1.pack(side = tkinter.LEFT)
button2.pack(side = tkinter.LEFT)
button3.pack(side = tkinter.LEFT)
button4.pack(side = tkinter.LEFT)

root.mainloop()",python,python,0.009216023495248337,0.03437846301779358,0.02407876987885801,0.002973927902949828,0.006892363255814936,0.009591000028534701,0.8028190981234323,0.02633279861461089,0.08371755568275754
"nums = [1, 2, 3, 4, 5]

# Function to calculate the standard deviation 
def standardDeviation(nums): 
 
 # Compute mean (average of elements) 
 mean = sum(nums) / len(nums) 
 
 # Compute sum squared distances to the mean 
 sum_sq_dist = 0
 for num in nums: 
 sum_sq_dist += (num - mean) ** 2 
 
 # Compute standard deviation and return result 
 return (sum_sq_dist / len(nums) - - - 1)** 0.5

# Print the standard deviation 
print(standardDeviation(nums))",python,python,0.00019368564677640189,0.0005771732657702804,0.00048715730000159783,5.944441698374213e-05,0.02629680974417241,0.001595922935373115,0.9565651584689618,0.0014798334108491826,0.012744814811111376
"def is_even(number): 
    if(number % 2 == 0): 
        return True 
    else: 
        return False",python,python,1.0796011878279012e-05,0.0001032278224500861,8.862149147235476e-05,5.221292155516557e-07,2.1243907403540198e-06,1.9111633758987255e-06,0.9997871030330951,2.978125839734169e-06,2.7158319328804722e-06
"function calculateArea(width, height) {
    return width * height;
}",javascript,javascript,0.001476981489116085,0.003811150905868811,0.0037956699192159,0.00041885870277374055,0.9458026393751705,0.0007859878340846889,0.042172881228127644,0.0013919758358169802,0.00034385470982544315
"def find_max(nums):
    """"""This function takes a series of numbers as input and returns the highest number.
    
    Args:
        nums (list): A list of numbers.
    
    Returns:
        int: The highest number.
    """"""
    return max(nums)",python,javascript,0.0003803593615795746,0.00012534722230423903,0.0004618769914987514,0.0996232390244835,0.6872962297117725,2.3574433138639943e-08,0.20290079730154106,8.316200440755074e-05,0.009128964807979726
"# Read the file
with open('text.txt') as f:
    # Get all the words from the file
    words = f.read().split()

# Count the frequency of each word
word_frequencies = {}
for word in words:
    if word not in word_frequencies:
        word_frequencies[word] = 1
    else:
        word_frequencies[word] += 1

# Sort the words based on their frequencies
sorted_words = sorted(word_frequencies.items(), key = lambda wf: wf[1], reverse=True)

# Print the 10 most frequently used words
print('10 most frequent words: ', end = '')
for i in range(10):
    print(sorted_words[i][0] + ("","" if i != 9 else "".""))",python,python,0.012095324502262736,0.007976724140692094,0.01137492570399751,1.7478757443172692e-06,0.003916635597030409,0.005254439127895095,0.9154554351736869,0.037896915565462125,0.006027852313228996
"def sum_of_squares(numbers):
    total = 0
    for num in range(1,numbers+1):
        total += num**2
    print(total)

sum_of_squares(10)",python,python,1.9662685122078962e-05,3.173001334076243e-07,0.00019976441470147217,0.0002220956742217084,2.1048254040248353e-05,0.08113975011256659,0.9183591442344701,1.1943206379207647e-05,2.6274118365158054e-05
"import random

HTML = '<html>\n<head>\n<title>Random Table</title>\n</head>\n<body>\n<table>\n'

for row_num in range(0,3):
    HTML += ' <tr>\n'
    for column_num in range(0,2):
        HTML += '  <td>{}</td>\n'.format(random.randint(0, 10))
    HTML += ' </tr>\n'

HTML += '</table>\n</body>\n</html>'

print(HTML)",html,html,6.903772464531343e-22,1.0730652717440243e-20,1.0,9.975055645299609e-22,4.980988821505116e-20,1.879548628599922e-21,6.779080194149367e-21,8.392063332447673e-22,5.863368242376103e-23
"import pandas as pd
import numpy as np

from sklearn.ensemble import VotingClassifier
from sklearn.naive_bayes import BernoulliNB
from sklearn.feature_extraction import DictVectorizer
from sklearn.linear_model import LogisticRegression

class Ensembler(object):

    def __init__(self):
        self.ensemble_model = None

    def build_model(self, X, y):
        # Ensembler consists of Naive Bayes, Logistic Regression and Voting classifier
        nb_classifier = BernoulliNB()
        log_classifier = LogisticRegression()
        vectorizer = DictVectorizer()

        X_vectorized = vectorizer.fit_transform(X).toarray()

        voting_model = VotingClassifier(
            estimators=[
                ('nb', nb_classifier), 
                ('log', log_classifier)
            ], 
            voting='soft', 
            n_jobs=-1
            )

        self.ensemble_model = voting_model.fit(X_vectorized, y)

    def predict(self, X):
        X_vectorized = self.vectorizer.transform(X).toarray()
        return self.ensemble_model.predict(X_vectorized)",python,python,0.011773153580624182,0.01996568801813163,0.004797061740495607,1.1651473168040263e-06,3.0094948037341502e-05,6.977116635602448e-07,0.9629764421076151,0.0001520774553817999,0.00030361929073395414
"# Python program
def main():
    num1 = int(input(""Enter the first number: ""))
    num2 = int(input(""Enter the second number: ""))
    
    # use max and min functions to output the numbers in ascending order
    print(min(num1, num2))
    print(max(num1, num2))

if __name__ == ""__main__"":
    main()",python,bash,0.806399486661157,6.121847525543231e-05,7.623006998646302e-05,3.131050965857842e-05,0.00018225864185150928,4.1696175155615066e-10,0.19310856820411548,0.00013584036501292028,5.086656000683908e-06
"def deleteNode(head, key): 
  
    # Store head node 
    temp = head 
  
    # If head node itself holds the key to be deleted 
    if (temp is not None): 
        if (temp.data == key): 
            head = temp.next
            temp = None
            return head 
  
    # Search for the key to be deleted, keep track of the 
    # previous node as we need to change 'prev.next' 
    while(temp is not None): 
        if temp.data == key: 
            break 
        prev = temp 
        temp = temp.next
  
    # if key was not present in linked list 
    if (temp == None): 
        return head 
  
    # Unlink the node from linked list 
    prev.next = temp.next
  
    temp = None
  
    return head",python,matlab,9.489317238897541e-07,9.487446899930559e-05,0.015333852201226458,7.5567432980217604e-06,0.00021529764476067983,0.9824954643945519,5.246326800962334e-07,7.153932850410476e-05,0.0017799416542556114
"def sudoku(board): 
 
    # Check if the board is full 
    if not any(None in sublist for sublist in board): 
        return True
  
    # Find empty cells 
    for i in range(len(board)): 
        for j in range(len(board[0])): 
            if board[i][j]==None: 
                for k in range(1,10): 
                    board[i][j]=k 
                    # Try to solve the board 
                    if sudoku(board): 
                        return True
                    # Backtrack and try with different  
                    # values 
                    board[i][j]=None 
    return False",python,python,0.00023544091532773132,0.0003200600697409183,0.000847602109726984,1.1641324358837933e-05,0.00013443106191370972,0.4118762560516174,0.5773086118413687,0.005672025705752008,0.003593930920193774
"def extract_last_digits(n):
  return int(str(n)[-2:])

result = extract_last_digits(12345)
print(result)",python,python,1.6698884733482824e-05,0.0003896589341092747,3.668644967467002e-05,0.014914601205404526,5.000730848361802e-05,8.571195764271698e-11,0.984531166026381,5.664730865417317e-05,4.533796847313231e-06
"import random
import math
 
def get_random_points_in_circle(center, radius):
 points = []
 x_center, y_center = center
 
 while True:
  x = random.uniform(x_center - radius, x_center + radius)
  y = random.uniform(y_center - radius, y_center + radius)
 
  dist = math.sqrt((x - x_center) ** 2 + (y - y_center) ** 2)
 
  if dist <= radius:
   points.append((x, y))
 
  if len(points) >= 10:
   break
 
 return points
 
if __name__ == ""__main__"":
 points = get_random_points_in_circle((4, 4), 3)
 print(points)",python,python,0.001056398546072329,0.006941012017817806,0.002031692930993615,7.180348283714416e-05,0.00032055513480315403,0.0028886720645104765,0.9748167703375386,0.011444603610963878,0.00042849187446311837
"array = [1, 10, 50, 3, 8]

# Get the maximum element
max_element = max(array)

print(max_element) # Output: 50",python,python,0.14528588677462198,0.12301669080818446,0.024243128081274976,0.0003607998521571819,0.0037079317532284144,0.1274200044148805,0.5737829517430187,0.00019635014959454614,0.0019862564230392144
"john_grade = 85
george_grade = 90
sarah_grade = 75
emily_grade = 95

def average_grade(john_grade, george_grade, sarah_grade, emily_grade):
    return (john_grade + george_grade + sarah_grade + emily_grade) / 4

avg_grade = average_grade(john_grade, george_grade, sarah_grade, emily_grade)
print('The average grade of 4 students is', avg_grade)",python,python,0.005973940761493214,0.29244594202878604,0.027079785600798434,0.0017800443084896105,0.21439164516146533,0.010632398086040856,0.3448319967598373,0.00800802158879658,0.09485622570429256
"import tkinter as tk
from tkinter import filedialog, Text, Menu

# root window configuration
root = tk.Tk()
root.title(""Code Editor"")

# text area where code is written
textArea = Text(root, relief=""sunken"")
textArea.grid(row=0, column = 0, columnspan=3, padx = 5, pady = 5, sticky = ""nsew"")

# sets the scrollbar x y
scrollbar = tk.Scrollbar(textArea)
textArea.configure(xscrollcommand=scrollbar.set)
scrollbar.config(command=textArea.yview)
scrollbar.grid(row=0, column=3, sticky='nsew')

# open file
def open_file():
    global filename
    filename = filedialog.askopenfilename(defaultextension="".txt"", filetypes=[(""All Files"", ""*.*""), (""Text Files"", ""*.txt"")])
    if filename == """":
        filename = None
    else:
        root.title(f""Code Editor - {filename}"")
        textArea.delete(1.0, tk.END)
        f = open(filename, ""r"")
        textArea.insert(1.0, f.read())
        f.close()

# save file
def save_file():
    if filename == None:
        save_as()
    else:
        f = open(filename, ""w"")
        f.write(textArea.get(1.0, tk.END))
        f.close()

# save as file
def save_as():
    global filename
    filename = filedialog.asksaveasfilename(initialfile=""Untitled.txt"", defaultextension="".txt"", filetypes=[(""All Files"", ""*.*""), (""Text Files"", ""*.txt"")])
    f = open(filename, ""w"")
    f.write(textArea.get(1.0, tk.END))
    f.close()

# creating the statusbar
statusBar = tk.Label(root, text=""Status Bar"")
statusBar.grid(row=1, column=0, columnspan=3, sticky=""ew"")

# creating the menubar
menubar = Menu(root)
root.config(menu=menubar)

# creating the options for the file menu
fileMenu = Menu(menubar)
menubar.add_cascade(label=""File"", menu=fileMenu)
fileMenu.add_command(label=""Open"", command=open_file)
fileMenu.add_command(label=""Save"", command=save_file)
fileMenu.add_command(label=""Save As"", command=save_as)

# coding syntax highlighting
textArea.configure(bg=""grey"", fg=""white"")

# loop to run application
root.mainloop()",sql,typescript,0.06603719835070286,0.0330233603239071,0.005338641151976068,1.9928926950516446e-05,0.0016624864337290881,0.0007182344522188785,0.04309534873452286,0.13085562564604883,0.7192491759799436
"list_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]

def find_unique_items(input_list):
    result = []
    for elem in input_list:
        if elem not in result:
            result.append(elem)
    return result

print(find_unique_items(list_items))",python,python,5.9380586590259036e-05,0.010329106630177408,0.0002464376731135199,6.522626608711026e-06,7.486397615028493e-05,0.0011646938594979364,0.9871566379729017,0.0007717428494496824,0.00019061382551062984
"def even_sum(low, high):
    sum = 0
    for i in range(low, high+1):
        if i % 2 == 0:
            sum += i
    return sum

result = even_sum(10, 20)
print(result)",python,python,0.00017476361074669246,0.002205053832702738,0.0011505463799851062,0.0006868538958587245,0.00010376626066368163,0.17306718146673133,0.8213386015822126,0.0010021107063120584,0.00027112226478713585
"def predict_price(company):
    # Call an appropriate API
    company_data = request_api(company)
    # Use an appropriate ML algorithm
    model = build_model(company_data)
    # Get the prediction
    prediction = model.predict()
    return prediction",python,bash,0.5263136049213871,0.012607151271642612,0.02188004024531782,0.0003901907053165841,0.025821317236053184,0.0005861361415590352,0.4036170286592326,1.1496630832710635e-05,0.00877303418865811
"""""""
Create a list of prime numbers ranging from 2 to n.
""""""

def prime_list(n):
    prime_list = []
    for num in range(2, n + 1):
        for prime in prime_list:
            if num % prime == 0: 
                break
        else: 
            prime_list.append(num)
    return prime_list

if __name__ == '__main__':
    n = 15
    print(prime_list(n))",python,matlab,7.301493519084047e-06,3.407033795921075e-07,2.3231150805014826e-05,2.877602194323769e-06,1.1614699634970615e-05,0.9983017505954913,0.0015584666480835088,5.634089637228131e-05,3.80762105201699e-05
"def multiplication_table():
    for i in range(1, 13):
        for j in range(1, 13):
            print(""{:>2}"".format(str(i*j)), end=' ')
        print()

multiplication_table()",css,python,6.284474188695136e-05,8.112821912745133e-05,0.0003095180966600789,3.87890625794661e-06,1.4798620074808065e-05,0.09121260096634337,0.908178870956366,7.798692948000854e-05,5.83725638032722e-05
"from flask import Flask

app = Flask(__name__)

@app.route(""/posts/<title>/<action>"")
def process_url(title: str, action: str):
	print(f'URL endpoint mapping for title: {title} and action: {action}')

if __name__ == '__main__':
	app.run()",python,html,2.9064217047723104e-06,0.06276237708224564,0.9349159887931585,6.6958537749585405e-06,6.199799523297712e-05,9.552566472790182e-06,0.0011427195016840504,0.0010695820907318748,2.817969499446983e-05
"def print_dict(dict):
 for key in dict:
   print(key,"":"", dict[key])",python,css,0.00038814066605853464,0.8661297392036661,0.0013378014920242484,4.188738393246605e-05,0.0010370327354584225,0.0005824645758989481,0.12955941201715931,0.0005263416916327787,0.00039718023416939716
"# Define a list of routes
routes = [
    ('/', 'homepage'), 
    ('/about', 'aboutpage'), 
    ('/contact', 'contactpage')
]

# Define a function to match the route and 
# get the name of the page
def match_route(route):
    for url, page in routes:
        if url == route:
            return page

# Test the function
result = match_route('/')
print(result)",python,javascript,4.218672965327945e-06,0.008818404084830537,0.007134792260616628,0.0017774542910645049,0.9576474327198431,2.980091391863414e-05,0.0037620111387946078,0.0025090816716805274,0.018316804246286057
"def find_missing_num(lst):
 expected_num = sum(range(lst[0],lst[-1]+1))
 actual_sum = sum(lst)
 return expected_num - actual_sum

lst = [1,2,4,5,6,7,8]
missing_num = find_missing_num(lst)
print(""The missing number is"", missing_num)",python,python,3.604849712883619e-05,0.00017779055049864335,0.00013344341827376232,4.816608897758144e-05,6.535661028391593e-05,6.293861928869572e-06,0.9992894938628528,0.00011482221132159476,0.00012858489873391
"import pandas as pd
import pyodbc

# Connect to database
server = '<yourserver>'
database = '<yourdatabase>'
username = '<yourusername>'
password = '<yourpassword>'
conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
cursor = conn.cursor()

# Read Excel file
df = pd.read_excel('<yourfilename>')

# Insert values into database
for index, row in df.iterrows():
 item_id = row['item_id']
 item_name = row['item_name']
 price = row['price']
 cursor.execute(f""INSERT INTO table (item_id, item_name, price) VALUES ({item_id}, '{item_name}', {price})"")
conn.commit()",sql,sql,0.000520190248189556,0.007150001177668051,0.0023536738561486374,7.089348347069085e-05,0.0002079043583232237,2.4340808898866015e-05,0.014586877560709078,0.9625979185899893,0.01248819991660252
"class Friend:
 
  def __init__(self, name, age, hobbies):
    self.name = name
    self.age = age
    self.hobbies = hobbies
    
  def getName(self):
    return self.name
    
  def getAge(self):
    return self.age
    
  def getHobbies(self):
    return self.hobbies",python,python,2.9245042963415776e-05,0.007112854679718543,0.02107732060731843,0.005547754953387208,1.0274830774187923e-08,2.4314112052908566e-07,0.9515072992811122,0.01470394666029615,2.1325359252726488e-05
"#import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score

# convert the data into dataframe
df = pd.DataFrame({'X': [1,2,3,4,5,6], 'y': [13, 23, 32, 43, 51,64]})

# train and test split
x_train = df[['X']][:-1]
y_train = df['y'][:-1]
x_test = df[['X']][-1:]
y_test = df['y'][-1:]

# define linear model
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train, y_train)

# score
r2_score(y_test, model.predict(x_test))",css,python,0.12694065037415372,0.26589886496753384,0.006431670373247883,1.2094421851965498e-05,8.565506427152303e-06,3.0522835578177244e-05,0.5859114547200703,2.9189576035500852e-05,0.014736987225101318
"def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False 
    str1 = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2",python,python,0.0003015724100830793,0.00048557916547266734,8.615444910319866e-07,5.52356895765373e-05,0.38307346914922863,6.43803906178863e-05,0.6087436053276435,0.007011092881892517,0.00026420344099419214
"def find_longest_increasing_subsequence(array):
    n = len(array)
    Length = [1] * n
    SequenceArray = [None] * n
    for index1 in range(n):
        for index2 in range(index1):
            if array[index2] < array[index1] and Length[index2] >= Length[index1]:
                Length[index1] = Length[index2] + 1
                SequenceArray[index1] = index2

    maxIndex = Length.index(max(Length))
    SubsequenceArray = [array[maxIndex]]
    while SequenceArray[maxIndex] is not None:
        maxIndex = SequenceArray[maxIndex]
        SubsequenceArray.append(array[maxIndex])
    SubsequenceArray.reverse()
    return SubsequenceArray",python,matlab,0.006691635918776256,0.000937396650149327,0.0008878900565362268,0.0002180694226814515,0.04993769081066702,0.7743360044945913,0.1618754794000502,0.003989709502577405,0.0011261237439707905
"#! /usr/bin/env python
""""""
Python API for KB SRU
""""""

import sys
import urllib
import requests
from lxml import etree

SRU_BASEURL = 'http://jsru.kb.nl/sru/sru'
SRU_BASEURL += '?version=1.2&maximumRecords=%i'
SRU_BASEURL += '&operation=searchRetrieve'
SRU_BASEURL += '&startRecord=%i'
SRU_BASEURL += '&recordSchema=%s'
SRU_BASEURL += '&x-collection=%s&query=%s'

SETS = {'ANP': {'collection': 'ANP',
                'description_en': 'Radio Bulletins ANP Press Agency',
                'description_nl': 'ANP Radiobulletins Digitaal',
                'metadataPrefix': 'didl',
                'recordschema': 'dcx',
                'setname': 'anp',
                'time_period': [1937, 1989]},
        'DPO': {'collection': 'DPO_boekdeel',
                'description_en': 'Early Dutch Books Online',
                'description_nl': 'Early Dutch Books Online',
                'metadataPrefix': 'didl',
                'recordschema': 'ddd',
                'setname': 'DPO',
                'time_period': [1781, 1800]},
        'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts',
                    'description_nl': 'Middeleeuwse Verluchte Handschriften',
                    'metadataPrefix': 'dcx',
                    'setname': 'BYVANCK',
                    'time_period': [500, 1500]},
        'SGD': {'description_en': 'States General Digital',
                'description_nl': 'Staten-Generaal Digitaal',
                'metadataPrefix': 'dcx',
                'setname': 'sgd:register',
                'time_period': [1962, 1994]},
        'GGC': {'collection': 'GGC',
                'description_en': 'General Catalogue KB',
                'description_nl': 'Algemene Catalogus KB',
                'metadataPrefix': 'dcx',
                'recordschema': 'dcx',
                'setname': 'ggc',
                'time_period': [1937, 2021]}}  # No idea what to use here?

# Name spaces in GGC records

srw_ns = 'http://www.loc.gov/zing/srw/'
tel_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'
xsi_ns = 'http://www.w3.org/2001/XMLSchema-instance'
dc_ns = 'http://purl.org/dc/elements/1.1/'
dcterms_ns = 'http://purl.org/dc/terms/'
dcx_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'

NSMAPGGC = {""srw"": srw_ns,
            ""tel"": tel_ns,
            ""xsi"": xsi_ns,
            ""dc"":  dc_ns,
            ""dcterms"": dcterms_ns,
            ""dcx"": dcx_ns}


class response():
    def __init__(self, record_data, sru):
        self.record_data = record_data
        self.sru = sru

    def getElementText(self, tagName, attributeName, attributeValue):
        # Returns text content of all elements for which tag matches tagName,
        # and attribute value equals attributeValue. Set attributeName to empty
        # string to get all tagName matches.
        textFields = []
        for r in self.record_data.iter():
            if r.tag == tagName:
                if attributeName != '':
                    try:
                        if r.attrib[attributeName] == attributeValue:
                            textFields.append(r.text)
                    except KeyError:
                        pass
                else:
                    textFields.append(r.text)
        return textFields

    @property
    def records(self):
        if self.sru.nr_of_records == 0:
            record_data = ""<xml></xml>""
        else:
            ns = {'zs': 'http://www.loc.gov/zing/srw/'}
            record_data = self.record_data.xpath(""zs:records/zs:record"",
                                                 namespaces=ns)[0]
        return record(record_data, self.sru)

    # Below property functions all return a list with all instances that satisfy
    # criteria

    @property
    def typesDutch(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}type',
                                   '{http://www.w3.org/XML/1998/namespace}lang',
                                   'nl'))

    @property
    def typesDCMI(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}type',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'DCMIType'))

    @property
    def identifiersISBN(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcterms:ISBN'))

    @property
    def identifiersBrinkman(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:Brinkman'))

    @property
    def identifiersURI(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcterms:URI'))

    @property
    def identifiersOCLC(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'OCLC'))

    @property
    def languagesDutch(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',
                                   '{http://www.w3.org/XML/1998/namespace}lang',
                                   'nl'))

    @property
    def languagesEnglish(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',
                                   '{http://www.w3.org/XML/1998/namespace}lang',
                                   'en'))

    @property
    def languagesFrench(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',
                                   '{http://www.w3.org/XML/1998/namespace}lang',
                                   'fr'))

    @property
    def languagesISO639(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}language',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcterms:ISO639-2'))

    @property
    def dates(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}date',
                                   '',
                                   ''))

    @property
    def extents(self):
        return(self.getElementText('{http://purl.org/dc/terms/}extent',
                                   '',
                                   ''))

    @property
    def creators(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}creator',
                                   '',
                                   ''))

    @property
    def contributors(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}contributor',
                                   '',
                                   ''))

    @property
    def titles(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',
                                   '',
                                   ''))

    @property
    def titlesMain(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:maintitle'))

    @property
    def titlesIntermediate(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}title',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:intermediatetitle'))

    @property
    def publishers(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}publisher',
                                   '',
                                   ''))

    @property
    def countries(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}country',
                                   '',
                                   ''))

    @property
    def subjectsBrinkman(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:Brinkman'))

    @property
    def subjectsISO9707(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'ISO_9707_[Brinkman]'))

    @property
    def subjectsUNESCO(self):
        return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'UNESCO'))

    @property
    def collectionIdentifiers(self):
        return(self.getElementText('{http://purl.org/dc/terms/}isPartOf',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcx:collectionIdentifier'))

    @property
    def recordIdentifiersURI(self):
        return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}recordIdentifier',
                                   '{http://www.w3.org/2001/XMLSchema-instance}type',
                                   'dcterms:URI'))

    @property
    def annotations(self):
        # Note that annotations sometimes contain language or itenID attibutes;
        # ignored for now (collect everything).
        return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}annotation',
                                   '',
                                   ''))


class record():
    def __init__(self, record_data, sru):
        self.record_data = record_data
        self.sru = sru

    def __iter__(self):
        return self

    # This works under Python 2.7
    def next(self):
        if self.sru.nr_of_records == 0:
            raise StopIteration
        if self.sru.startrecord < self.sru.nr_of_records + 1:
            record_data = self.sru.run_query()
            self.sru.startrecord += 1
            return response(record_data, self.sru)
        else:
            raise StopIteration

    # This works under Python 3
    def __next__(self):
        if self.sru.nr_of_records == 0:
            raise StopIteration
        if self.sru.startrecord < self.sru.nr_of_records + 1:
            record_data = self.sru.run_query()
            self.sru.startrecord += 1
            return response(record_data, self.sru)
        else:
            raise StopIteration


class sru():
    DEBUG = False

    collection = False
    maximumrecords = 50
    nr_of_records = 0
    query = """"
    recordschema = False
    sru_collections = SETS
    startrecord = 0

    def search(self, query, collection=False,
               startrecord=1, maximumrecords=1, recordschema=False):

        self.maximumrecords = maximumrecords
        if sys.version.startswith('3'):
            self.query = urllib.parse.quote_plus(query)
        elif sys.version.startswith('2'):
            self.query = urllib.quote_plus(query)
        self.startrecord = startrecord

        if collection not in self.sru_collections:
            raise Exception('Unknown collection')

        self.collection = self.sru_collections[collection]['collection']

        if not self.collection:
            raise Exception('Error, no collection specified')

        if not recordschema:
            self.recordschema = self.sru_collections[collection]['recordschema']
        else:
            self.recordschema = recordschema

        record_data = self.run_query()

        nr_of_records = [i.text for i in record_data.iter() if
                         i.tag.endswith('numberOfRecords')][0]

        self.nr_of_records = int(nr_of_records)

        if self.nr_of_records > 0:
            return response(record_data, self)

        return False

    def run_query(self):
        url = SRU_BASEURL % (self.maximumrecords, self.startrecord,
                             self.recordschema, self.collection, self.query)
        if self.DEBUG:
            sys.stdout.write(url)

        r = requests.get(url)

        if not r.status_code == 200:
            raise Exception('Error while getting data from %s' % url)

        record_data = etree.fromstring(r.content)

        return record_data
",css,html,6.051475333356692e-05,0.038379928648679715,0.7705478350946039,1.1703640815297116e-06,1.4896581492245385e-05,1.8016091479345087e-06,0.14318085394042993,0.04774602610464475,6.697290358652287e-05
"def split_list(input_list):
    # Create two empty lists to hold the even and odd length strings 
    even_list = []
    odd_list = []

    # Iterate through the given list 
    for element in input_list:
        # If the current length of element is even append it to even_list
        if len(element) % 2 == 0:
            even_list.append(element)
        # Else append it to odd_list 
        else:
            odd_list.append(element)
    return even_list, odd_list",python,matlab,2.8940703216521737e-05,0.0003781930678173583,3.175040763055128e-05,2.7546390628557052e-05,0.0014280419951430716,0.9226451551872619,0.0028381416024911405,1.364293976062183e-05,0.07260858770605026
"def preorder_traversal(root):
    if root is None: 
        return
    
    print (root.data, end = ' ')
    
    preorder_traversal(root.left) 
    preorder_traversal(root.right)",python,python,0.00027568079171119236,0.0037936604901185555,0.002380943256928067,0.00017795521146148172,0.0009478928610012584,0.00037939845040387124,0.9278959474490621,0.06324438875279201,0.0009041327365215555
"def permutations(words):
 
  if len(words) == 0:
    return []
  elif len(words) == 1: 
    return [words]
  else:
    perms = []
    for word in words: 
      remaining_words = words[:] 
      remaining_words.remove(word)
      z = permutations(remaining_words)   
      for perm in z: 
        perms.append([word] + perm)
    return perms
 
# Test 
words = ['cat', 'dog', 'bird']
print(permutations(words))

# Output 
[['cat', 'dog', 'bird'], ['cat', 'bird', 'dog'], ['dog', 'cat', 'bird'], ['dog', 'bird', 'cat'], ['bird', 'cat', 'dog'], ['bird', 'dog', 'cat']]",python,python,0.0026051020066936545,0.021940250372085583,0.01466253487126445,0.00011493082592166901,0.0006357033146262656,0.0029195010614544723,0.9220500215524305,0.034827616019241586,0.00024433997628183217
"# Python 3 program to find sum over a range
# A recursive function to find the sum of given range
def rangeSum(start, end):
  
    # If range consists of only one number
    if (start == end):
        return start
    return start + rangeSum(start + 1 , end)
  
# Driver code
start = 1
end = 5
print(rangeSum(start, end))",python,python,0.021435098687853545,9.94963027420117e-05,0.00019048385188674043,2.4056178988289574e-05,0.003955856257851553,1.2891244517277805e-05,0.9724670657973038,0.0012911343835869758,0.0005239172952697994
"def print_combinations(symbols):
    for idx in range(1 << len(symbols)):
        combination = [symbol for symbol, flag in zip(symbols, bin(idx)[2:]) if flag == ""1""]
        print(combination)

symbols = ['A', 'B', 'C']
print_combinations(symbols)",python,python,0.059982824287705606,0.018844960449991337,0.012227041666970468,0.00031168131493483376,0.0017228651368727086,0.21040521292763587,0.6879713636550258,0.006314789072847045,0.0022192614880163094
"
# coding: utf-8

# # Publications markdown generator for academicpages
# 
# Takes a TSV of publications with metadata and converts them for use with [academicpages.github.io](academicpages.github.io). This is an interactive Jupyter notebook, with the core python code in publications.py. Run either from the `markdown_generator` folder after replacing `publications.tsv` with one that fits your format.
# 
# TODO: Make this work with BibTex and other databases of citations, rather than Stuart's non-standard TSV format and citation style.
# 

# ## Data format
# 
# The TSV needs to have the following columns: pub_date, title, venue, excerpt, citation, site_url, and paper_url, with a header at the top. 
# 
# - `excerpt` and `paper_url` can be blank, but the others must have values. 
# - `pub_date` must be formatted as YYYY-MM-DD.
# - `url_slug` will be the descriptive part of the .md file and the permalink URL for the page about the paper. The .md file will be `YYYY-MM-DD-[url_slug].md` and the permalink will be `https://[yourdomain]/publications/YYYY-MM-DD-[url_slug]`


# ## Import pandas
# 
# We are using the very handy pandas library for dataframes.

# In[2]:

import pandas as pd


# ## Import TSV
# 
# Pandas makes this easy with the read_csv function. We are using a TSV, so we specify the separator as a tab, or `\t`.
# 
# I found it important to put this data in a tab-separated values format, because there are a lot of commas in this kind of data and comma-separated values can get messed up. However, you can modify the import statement, as pandas also has read_excel(), read_json(), and others.

# In[3]:

professional = pd.read_csv(""professional.tsv"", sep=""\t"", header=0)
professional


# ## Escape special characters
# 
# YAML is very picky about how it takes a valid string, so we are replacing single and double quotes (and ampersands) with their HTML encoded equivilents. This makes them look not so readable in raw format, but they are parsed and rendered nicely.

# In[4]:

html_escape_table = {
    ""&"": ""&amp;"",
    '""': ""&quot;"",
    ""'"": ""&apos;""
    }

def html_escape(text):
    """"""Produce entities within text.""""""
    return """".join(html_escape_table.get(c,c) for c in text)


# ## Creating the markdown files
# 
# This is where the heavy lifting is done. This loops through all the rows in the TSV dataframe, then starts to concatentate a big string (```md```) that contains the markdown for each type. It does the YAML metadata first, then does the description for the individual page. If you don't want something to appear (like the ""Recommended citation"")

# In[5]:

import os

SPACE = ' '
STAR = '*'
TAB = SPACE + SPACE
TAB_BULLET = SPACE + STAR + SPACE
ENDL = '\n'
WIP = '*[ WIP ]*'
TODO = '*[TODO]*'

def is_not_NaN(num):
    return num == num

def is_not_empty(s):
    return is_not_NaN(s) and len(str(s)) > 0

def bold(s):
    return STAR + STAR + str(s) + STAR + STAR

def italicize(s):
    return STAR + str(s) + STAR

def coursera_icon_link(s):
    return '<a href=""' + str(s) + '"" target=""_blank""><i class=""ai ai-courser""></i></a>'

def github_icon_link(s):
    return '<a href=""' + str(s) + '"" target=""_blank""><i class=""fa fa-github"" aria-hidden=""true""></i> </a>'

def certificate_icon_link(s):
    return '<a href=""' + str(s) + '"" target=""_blank""><i class=""fa fa-certificate"" aria-hidden=""true""></i> </a>'

with open(""../_pages/professional.md"", 'w') as f:
    for row, item in professional.iterrows():
        md = ''
        md += TAB_BULLET
        md += str(item.course_name)
        md += SPACE
        md += ""by ""
        md += '[' + str(item.provider) + '](' + str(item.provider_url) + ')'
        md += SPACE
        if is_not_empty(item.certificate_link):
            md += certificate_icon_link(item.certificate_link)
        md += ENDL
        
        f.write(md)
",css,typescript,6.941935943851912e-09,7.34801257253342e-08,1.3814982385060501e-07,5.338382267678913e-09,5.005194907665532e-07,1.873785567516519e-09,2.374510063291313e-07,2.748118552752864e-07,0.9999987614335942
"import requests
from bs4 import BeautifulSoup

link = 'https://store.apple.com/us/buy-iphone/iphone-11'

page = requests.get(link)
soup = BeautifulSoup(page.content, 'html.parser')

price = soup.find('span', id='pricing-product-price-value').text
print(price)",python,css,1.6503028172615765e-06,0.7368587707303904,0.2624469714410242,2.460125221208047e-05,2.0279441955717994e-05,0.00012475319957557584,0.000285490603355743,0.0002168159353070885,2.0667093362063642e-05
"def add_arrays(arr1, arr2):
  return [x + y for x, y in zip(arr1, arr2)]",python,python,0.0018229940465729357,0.006172137188362057,0.00439136345771976,0.0003840838448591737,0.0014493678194141657,0.017753713669442985,0.9619737555706309,0.0027564931645041838,0.003296091238493832
"while True:
    num = int(input(""Please input a number between 1 and 10: ""))
    if num in range(1, 11):
        print(num + 1)
    else:
        print(""Invalid number!"")",python,matlab,1.7959331930405802e-07,9.47968294490802e-12,1.770455647341696e-07,2.2128289920824158e-07,1.4697916137710696e-09,0.9988697241948412,0.001129686997118831,1.7436161248130324e-10,9.23262396498045e-09
"def min_max(data):
    min_val = min(data)
    max_val = max(data)
    return min_val, max_val
 
min_val, max_val = min_max([-2, 15, 4, 8, 11])
 
print('Minimum Value: ', min_val)
print('Maximum Value: ', max_val)",python,css,0.007096368242507507,0.33370194578193635,0.14779963871853133,0.00248457315071088,0.12536556638267105,0.24206099784240095,0.053917989670362404,0.03220137856936369,0.05537154164151581
"def removeVowels(str):
    vowels = ('a', 'e', 'i', 'o', 'u') 
    res = """"
    for char in str:
        if char.lower() not in vowels:
            res += char
    return res

print(removeVowels(""Hello World""))",python,python,0.004651783467315476,0.0014045803634348485,0.0008594491555636885,1.8952421533909434e-10,0.004571597106364363,9.646261930785527e-05,0.9876734474253895,0.0007227760762257689,1.9903596874290274e-05
"import hashlib
 
def secure_hash(string):
 return hashlib.sha256(string.encode()).hexdigest()",python,java,4.339202494777504e-12,1.9269324036912484e-06,3.28774995479556e-07,0.999921769667227,1.187640768944797e-11,4.324412015536095e-09,6.140971709052393e-05,1.4486368354556142e-05,7.419930097760305e-08
"def fibonacci(n):
 if n < 0:
 raise ValueError(""Negative number"")
 if n == 0 or n == 1:
 return n
 return fibonacci(n-1) + fibonacci(n-2)
 
# calculate 9th Fibonacci number
print(fibonacci(9))",python,python,1.273393995769494e-05,4.406401366178444e-05,2.434207996826493e-05,1.5297545740825604e-06,6.998992445874667e-06,9.17096052161422e-06,0.9998819423328065,4.644430964339188e-06,1.4573495099852565e-05
"def binary_search(lst, target):
    left = 0
    right  = len(lst) - 1

    while left <= right:
        mid = (right + left) // 2
        if lst[mid] == target:
            return mid
        elif lst[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1",python,python,0.00022612797661770976,0.0005036149051194733,0.0004937412916495129,5.4521983726725454e-05,8.775091996242822e-05,8.279749717184242e-05,0.9974594620132629,0.0008743905084543403,0.00021759290403489955
"def check_type(num):
    if num % 2 == 0:
        return 'even'
    else:
        return 'odd'",python,matlab,1.4105037638512491e-05,6.287136060360937e-08,1.9484913756408478e-05,1.2579241144718254e-06,3.4609801642832957e-06,0.9833585794081873,0.016590216125796645,6.603699679976384e-06,6.229039302032842e-06
"def print_product_names():
    unscanned_barcodes = [barcodes] #list of unscanned barcodes

    while len(unscanned_barcodes) > 0:
        barcode = unscanned_barcodes.pop(0)
        product_name = scan_barcode(barcode) #function that returns product name
        print(product_name)",python,javascript,0.00018538604166034965,0.0002034079025052008,0.00032660347808893624,0.003211981103186985,0.9831498319944193,0.0012824783473918834,0.010762499313007148,0.0007560941605414743,0.00012171765919876811
"class Rectangle:
   def __init__(self, length, width):
      self.length = length
      self.width  = width",python,python,0.0005922986010174729,0.0027431920756565017,0.006247832146651012,9.892063533847649e-05,0.01174277376449647,3.533440353229972e-05,0.8680651888531502,0.11019240638109432,0.00028205313906320734
"def Fibonacci(n): 
	a = 0
	b = 1
	if n < 0: 
		print(""Incorrect input"") 
	elif n == 0: 
		return a 
	elif n == 1: 
		return b 
	else: 
		for i in range(2,n+1): 
			c = a + b 
			a = b 
			b = c 
		return b 

print(Fibonacci(10))",python,python,3.1940439496250764e-07,3.7642039259542406e-07,1.1913982973382088e-06,6.665480649818584e-09,1.944693004041676e-08,9.588017044480214e-06,0.9999881131227605,3.708331101390764e-07,1.469158929047562e-08
"def find_target(nums, target):
  for i in range(len(nums)):
    if nums[i] == target:
      return i
  return -1",python,python,1.6053790790019898e-06,2.2197986306919275e-06,5.29803340231318e-06,3.8446616919680014e-07,3.250420908245144e-07,0.00014925435605882346,0.9998266643507232,1.2490452680680593e-05,1.7581211654182885e-06
"public class OddNumber {
    public static boolean isOdd(int x) {
        return (x % 2 == 1);
    }

    public static void main(String[] args) {
        int[] nums = {2, 5, 6, 9};

        for (int n : nums) {
            if (isOdd(n)) {
                System.out.println(n + "" is odd"");
            }
        }
    }
}",java,java,9.746719430065252e-54,2.924560162257348e-56,1.388633481749836e-53,1.0,9.074913553069055e-65,1.160408118658038e-83,7.421495350192891e-53,3.7174912628592075e-56,1.8289655851306062e-53
"class Timer:
  def __init__(self):
    self.start_time = 0
    self.end_time = 0
    
  def start(self):
    self.start_time = time.time()
    
  def end(self):
    self.end_time = time.time()

  def elapsed(self):
    return self.end_time - self.start_time",python,python,2.7097103451852385e-05,0.01231426087843384,0.045723700988802095,2.7523301584248622e-06,1.7080504537094496e-05,9.099632194664807e-07,0.6960120052292385,0.24582848287365808,7.371012850073665e-05
"import pandas as pd

#Variable to indicate presence of Header
has_header = False

#Read CSV
data = pd.read_csv('mydata.csv',header=None) 

#Check for presence of Header
if data.iloc[0,0] != 'Column1':
  has_header = True

#Read again with header
if has_header:
  data = pd.read_csv('mydata.csv')",python,sql,0.000839616406454808,0.1805984168593693,0.09645606537203398,0.0006678047013072155,0.014403692996193212,0.016803809440060966,0.2163068009206171,0.27611951213128916,0.19780428117267418
"# Calculate distance between two points
def findDistance(x1, x2):
 return abs(x2 - x1)

x1 = -3
x2 = 4
distance = findDistance(x1, x2)

print(""Distance:"", distance)",python,python,0.0027685441739277923,0.012180917918414004,0.007382353258303308,0.0055297970450234515,0.0012698335505304731,0.00024962130410043814,0.9448381467177923,0.020286539448274236,0.005494246583634057
"def print_dict_alphabetically(d):
 sorted_dict = {k: d[k] for k in sorted(d)}
 for key, value in sorted_dict.items():
  print(key, value)

print_dict_alphabetically({'a': 1, 'b': 2, 'c': 3})",css,matlab,8.438563084221431e-07,0.03291107266561503,6.815437127470888e-06,7.759282045939261e-08,5.194403742271347e-06,0.9670704594029766,1.1370090640271391e-07,4.418050654281792e-06,1.004889849210185e-06
"# Sort the dataset according to age
sorted_dataset = sorted(dataset, key=lambda x: x['age'])

# Output the sorted dataset
for record in sorted_dataset:
 print(record)

# Output:
{'name': 'Benjamin', 'age': 17}
{'name': 'Adam', 'age': 20}
{'name': 'Olivia', 'age': 20}
{'name': 'Sophia', 'age': 19}
{'name': 'Adam', 'age': 23}
{'name': 'Noah', 'age': 22}
{'name': 'Ethan', 'age': 24}
{'name': 'Mia', 'age': 25}
{'name': 'Ava', 'age': 26}
{'name': 'Isabella', 'age': 27}
{'name': 'John', 'age': 30}
{'name': 'Jasper', 'age': 30}
{'name': 'Daniel', 'age': 33}
{'name': 'Liam', 'age': 35}
{'name': 'Emma', 'age': 35}
{'name': 'Charlotte', 'age': 38}
{'name': 'Eva', 'age': 45}
{'name': 'Amelia', 'age': 44}
{'name': 'Eric', 'age': 40}
{'name': 'Levi', 'age': 40}",css,java,5.252533018513214e-05,0.03084933655143504,0.00010234368555476479,0.9688797214557885,3.9176011376206393e-10,1.0630855465748994e-06,0.00011362287492146643,5.350721770391646e-07,8.515526314959073e-07
"import math

def closest_pair(points):
 closest_pair = None
 closest_distance = float('inf')
 for i in range(len(points)):
 for j in range(i + 1, len(points)):
 distance = calc_distance(points[i], points[j])
 if distance < closest_distance:
 closest_distance = distance
 closest_pair = (points[i], points[j])

 return closest_pair, closest_distance

def calc_distance(p1, p2):
 return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)

points = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]
closest_pair, closest_distance = closest_pair(points)

print(closest_pair) # prints ([2, 3], [3, 4])
print(closest_distance) # prints 1.0",python,python,0.00403577023458202,0.005129104662176365,0.0023169041678777376,3.923150003977384e-05,0.00025210922375005357,0.006534789331645297,0.9796890467569327,0.001283742352494655,0.0007193017705013631
"{
 ""name"": ""John Doe"",
 ""age"": 34,
 ""skills"": [
  ""JavaScript"",
  ""Python""
 ]
}",css,bash,0.9967205442148348,3.2964159150199683e-05,0.000442941334187982,9.38400248682638e-06,0.00020926296636794637,0.0025277477206941206,1.6826883167091417e-06,1.5483061934724258e-06,5.392460776789505e-05
"import requests
from bs4 import BeautifulSoup

def get_url_links(url):
    # query the website and return the html to the variable
    page = requests.get(url)
    
    # parse the html using beautiful soup and store in variable `soup`
    soup = BeautifulSoup(page.content, 'html.parser')
    
    # Take out the <div> of name and get its value
    links = soup.find_all('a')
    for link in links:
        print(link.get('href'))

get_url_links('https://www.example.com/')",html,html,2.1875702591377295e-13,7.048452824606725e-05,0.9523220291474765,0.04673343027820503,9.34558488081612e-06,2.4696830167059193e-07,4.504713912174291e-07,1.138170817801448e-06,0.0008628748504620751
"import re

def categorize_text(text):
    """"""Categorizes the given text into positive, negative or neutral.""""""
    text = text.lower()
    if re.search(r""\b(happy|glad|fun)\b"", text):
        return ""positive""
    elif re.search(r""\b(sad|angry|fearful)\b"", text):
        return ""negative""
    else:
        return ""neutral""",python,python,1.955438086456593e-05,0.004052879906020183,0.0036007326459548037,0.0002735078331479874,0.0009970940372958912,3.9739327385796966e-05,0.9583070442427581,0.0005243360719849964,0.032185111554587656
"import random
rand_nums = [None] * 10
for i in range(10):
 rand_nums[i] = random.random()
print(rand_nums)",python,python,0.00014040956497826668,0.0002862511153379346,0.00040208178014581404,6.6288372332625495e-06,2.6022705902103175e-05,0.03145205300910365,0.9672293219843558,0.00037096015752429763,8.627084541875739e-05
"import requests
import bs4

def download_news(url):
    r = requests.get(url)
    soup = bs4.BeautifulSoup(r.content, 'lxml')
    links = [link.get('href') for link in soup.find_all('a')]
    
    for link in links:
        r = requests.get(link)
        download_name = link.split('/')[-1]
        with open(download_name, 'w') as f:
            f.write(r.text)
            print(""Downloaded article:"", download_name)",python,python,2.7153979688782118e-05,0.01087470599396846,0.018300453952984998,6.485213922470313e-05,0.00013702676193565498,0.4127047755226733,0.5463219024067604,0.006066782468910604,0.005502346773853105
"def counting(nums):
    result={}
    for num in nums:
        if num in result:
            result[num]+=1
        else:
            result[num]=1
    return result

nums=[1, 3, 5, 6, 1, 2, 5, 3]
result=counting(nums)
print(result)
# Output: {1: 2, 3: 2, 5: 2, 6: 1, 2: 1}",css,matlab,3.5362393726021026e-06,5.800240714521224e-07,5.48903609625468e-06,1.3317605283772427e-07,2.2231282588962864e-06,0.5993049509691768,0.4006421331200131,3.9444388263761864e-05,1.509918694234513e-06
"for a in range(1, 26):
    for b in range(1, 26):
        for c in range(1, 26):
            if (a*a + b*b == c*c and a+b+c == 25):
                print(""Pythagorean triplet: "" + str(a) + "", "" + str(b) + "", "" + str(c))",python,matlab,9.455050274826338e-07,2.3694757427120674e-07,1.994986824336174e-05,1.4776768416800617e-07,1.0746758461413231e-06,0.985233175590836,0.014736970824360153,4.054847646045161e-06,3.4439727823581015e-06
"class CRUD:
    def __init__(self):
        self.records = []
    
    def create(self,data):
        record = data
        self.records.append(record)
    
    def read(self):
        return self.records
 
    def update(self,index,data):
        self.records[index] = data
 
    def delete(self,index):
        self.records.pop(index)",sql,sql,0.0001496011721108088,0.02421697660009562,0.27742041941591133,2.891667070777629e-06,4.31869052666335e-05,4.293842621005607e-06,0.18755486940886718,0.5101342869093748,0.0004734740786819311
"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True


def find_prime_numbers(a, b):
    result = []
    for num in range(a, b + 1):
        if is_prime(num):
            result.append(num)
    return result


start = 2
end = 20
print(find_prime_numbers(start, end))",python,python,4.398205303425225e-08,1.366077731670807e-09,4.2830737810634633e-07,2.161072085963471e-09,7.547287148423904e-09,0.10323929517653029,0.8967598374612142,3.54323826704554e-07,2.967456060797235e-08
"def is_prime(n):
    '''
    Function to check if the given number is a prime
    '''
    if n < 2:
        return False

    for i in range(2, n):
        if n % i == 0:
            return False

    return True",python,python,2.7093860137647525e-07,5.292680180968633e-07,6.864852894857207e-06,5.0830955861626547e-08,0.0005174738306152767,9.743926849763426e-05,0.9993595703160035,9.751033214951684e-06,8.049661198467656e-06
"import torch.nn as nn

class ANN(nn.Module):
    def __init__(self):
        super().__init__()
        # Input layer
        self.fc1 = nn.Linear(50, 64) # 50 input units, 64 neurons in the hidden layer
        self.relu1 = nn.ReLU()
        # Hidden layer 1
        self.fc2 = nn.Linear(64, 32)
        self.relu2 = nn.ReLU()
        # Hidden layer 2
        self.fc3 = nn.Linear(32, 16)
        self.relu3 = nn.ReLU()
        # Output layer
        self.fc4 = nn.Linear(16, 3)
        self.sigmoid = nn.Sigmoid()
 
    def forward(self, x):
        x = self.fc1(x)
        x = self.relu1(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.fc3(x)
        x = self.relu3(x)
        x = self.fc4(x)
        x = self.sigmoid(x)
        return x",python,python,0.0017024974005102477,0.03316318356616533,0.229223672093803,3.937707740794358e-05,0.0006075225914010552,7.198042813886275e-05,0.5826061751513213,0.1515181260976374,0.0010674655936147835
"while True:
    # Show game board
    print(""Welcome to your game!"")
	
    # Get user input
    user_action = input('What would you like to do? ')
	
    # Process user input
    if user_action == 'quit':
        break
		
    # Do something with user input
    elif user_action == 'play':
        print('Playing...')
    else:
        print('Invalid input.')",python,python,0.048217706924895215,0.15378822393903013,0.03394622245300706,0.00015053718572308504,0.0008039653203849156,0.0008218167805745133,0.7228254660014404,0.03703047492169368,0.0024155864732511648
"def classify(data, categories):
    """"""Classify the given data into their respective category""""""
    classified_data = {}
    for category, values in categories.items():
        classified_data[category] = []
        for value in data:
            if value in values:
                classified_data[category].append(value)
    return classified_data",python,matlab,5.497830574042875e-07,0.0011360410617943437,3.611249264653359e-06,1.250272243103168e-07,1.2309362996550775e-06,0.9986961621727615,6.544357421992528e-09,5.9062220991330495e-06,0.00015636700314174332
"def permute(s, l, r):
 if l == r:
  print(''.join(s))
 else:
  for i in range(l, r+1):
   s[l], s[i] = s[i], s[l]
   permute(s, l + 1, r)
   s[l], s[i] = s[i], s[l] 

def generate_all_permutations(s):
 n = len(s)
 permute(list(s), 0, n-1)

s = 'ABC'
generate_all_permutations(s)",sql,matlab,0.00036795833740276576,0.0004335624362083664,0.0017380798619533295,2.6496224070131287e-05,0.00010847761025957746,0.5507382526100268,0.3621313183411719,0.08398739891887233,0.00046845566003477374
"def gcd(a, b):
 if b == 0:
  return a
 return gcd(b, a % b)

result = gcd(100, 12)
print(result)",python,matlab,0.0016774935893732125,0.03592565785517639,0.005214932913233753,0.00039069140489445,0.0024087109458904746,0.4821543557060589,0.46956668962193315,0.0013728287452051291,0.0012886392182345672
"import random
 
characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
length = 8
 
randstring = ''.join(random.choice(characters) for i in range(length))",sql,sql,2.6816805680995953e-06,2.7343572815563215e-07,1.8949907274975603e-06,1.8227473751811747e-08,2.0222128471773727e-05,0.00024745685550495356,0.002299444012010901,0.9974276236019461,3.850675684555885e-07
"import random

player_choice = ''
while player_choice.lower() not in ['rock','paper','scissors']:
 player_choice = input('Enter your choice (Rock, Paper, Scissors): ')

computer_choice = random.choice(['rock', 'paper', 'scissors'])

if (player_choice.lower() == 'rock' and computer_choice.lower() == 'scissors') or \
 (player_choice.lower() == 'paper' and computer_choice.lower() == 'rock') or \
 (player_choice.lower() == 'scissors' and computer_choice.lower() == 'paper'):
 print('You Win!')
elif (player_choice.lower() == 'rock' and computer_choice.lower() == 'paper') or \
 (player_choice.lower() == 'paper' and computer_choice.lower() == 'scissors') or \
 (player_choice.lower() == 'scissors' and computer_choice.lower() == 'rock'):
 print('You Lose!')
else:
 print('It\'s a tie!')",python,python,0.005752114281042532,0.044502398891915346,0.012803411727395835,0.0005337566017541185,0.002320328069969035,0.004172546887614687,0.7218450634058441,0.0027393084559783195,0.20533107167848588
"def replace_digit(str, num):
    new_str = """"
    for char in str:
        if char.isnumeric():
            new_str += str(num)
        else:
            new_str += char
    
    return new_str

new_str = replace_digit(str, num)
print(new_str)",python,python,0.0007260094422748594,0.00018796059455705098,0.004275854799874549,8.65362202205993e-05,0.003912195383260246,0.22564996140955743,0.7638370401946666,0.0010471732313810738,0.0002772687242075895
"def sum_list(numbers):
  total = 0
  for number in numbers:
    total += number
  return total",python,python,4.518586474146057e-06,0.00012459431213256026,5.064114142381672e-05,0.00013883965746699475,1.794086657141545e-05,4.380627133929943e-08,0.9996418755689815,9.462542265481296e-06,1.2083518412813744e-05
"#import necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

#read dataset containing emails
dataset = pd.read_csv('emails.csv')

#split data into features and labels
X = dataset['message']
y = dataset['label']

#transform text into numerical values
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(X)

#split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

#build Logistic Regression model
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)

#evaluate model
score = log_reg.score(X_test, y_test)
print('Model accuracy: ', score)",python,python,0.017174411788791942,0.4456144113568411,0.007699399664830112,7.669325819525482e-06,1.7766716009316225e-05,2.4823196475154264e-05,0.5253343092764475,0.0001819552797984184,0.003945253394986965
"import sqlite3
import xml.etree.ElementTree

xml_str = '''
<root> 
  <person> 
    <name>John Doe</name> 
    <age>32</age> 
  </person> 
  <person> 
    <name>Jane Doe</name> 
    <age>30</age> 
  </person> 
</root>
'''

conn = sqlite3.connect('test.db')
cur = conn.cursor()

sql_command = '''
CREATE TABLE IF NOT EXISTS people ( 
name VARCHAR(20), 
age INTEGER
);'''
cur.execute(sql_command)

root = xml.etree.ElementTree.fromstring(xml_str)
people = root.findall('person')
for person in people:
 name = person.find('name').text
 age = person.find('age').text
 cur.execute(""INSERT INTO people VALUES (?, ?)"", (name, age))

conn.commit()
conn.close()",sql,sql,0.007975667868870022,0.020985946418622742,0.006836013415954384,0.10899079387946073,3.924170744290826e-05,0.0007492806659721644,0.011342790723884603,0.8421775087531883,0.0009027565666041948
"def reverse_string(string):
    return string[::-1]",python,java,1.7366216442831176e-15,8.51669447569561e-09,8.516402071572627e-10,0.9999719696032902,2.7477559558206786e-17,8.620794651730033e-13,2.7859431338781684e-05,1.6140886888371015e-07,1.873035263424416e-10
"def shortest_path(matrix, start, end):
  queue = []
  min_len = math.inf
  queue.append([start])
  while queue:
    path = queue.pop(0)
    x, y = path[-1]
    if (x, y) == end:
      if len(path) < min_len:
        min_len = len(path)
    for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]:
      new_x, new_y = x + dx, y + dy
      if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]):
        if matrix[new_x][new_y] == 0:
          queue.append(path + [(new_x, new_y)])
  return min_len",python,python,0.005237419578245269,0.03273019132704493,0.004366133956870109,0.0004528190471754758,0.0009932851600924478,0.10994452544733982,0.8166964719071834,0.02065174950284938,0.008927404073198968
"def mergeSortedLists(list1, list2):
    list3 = []
    i = 0
    j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            list3.append(list1[i])
            i += 1
        else:
            list3.append(list2[j])
            j += 1

    while i < len(list1):
        list3.append(list1[i])
        i += 1

    while j < len(list2):
        list3.append(list2[j])
        j += 1
    return list3

list3 = mergeSortedLists(list1, list2);
console.log(list3);",python,javascript,0.0002989210983685119,0.005096238755836769,0.005188139878572922,0.00048514320242670116,0.5295944848208144,0.050584207058140936,0.4009614043251961,0.0016022729426400926,0.006189187918003565
"def filter_strings(lst, substring):
    filtered_lst = []
    for string in lst:
        if substring in string:
            filtered_lst.append(string)
    return filtered_lst

print(filter_strings([""Hello"", ""World"", ""Hey""], ""or""))",python,python,1.3617690272218494e-05,0.003352269842989086,0.0008598039257732532,0.000337647053523954,9.456581503646943e-08,0.00023332996391072164,0.9928696976651662,0.002222830953718529,0.0001107083388311183
"#!/usr/bin/python3
'''Run Scalability-1.
See README.md for details.
'''

import sys, subprocess, os.path
from Util import intersperse

def main():
    skip = {
        'Measure' : False,
    }
        
    basedir = ''

    dirs = {
        'Instances' : os.path.join(basedir, 'Data', 'Instances'),
        'Statistics' : os.path.join(basedir, 'Data', 'Statistics', 'Scalability-1'),
        'Bin' : '../../Build',
    }
    
    files = {
        'Instances' : [
            os.path.join(dirs['Instances'], 'instances500.csv'),
            os.path.join(dirs['Instances'], 'instances1000.csv'),
            os.path.join(dirs['Instances'], 'instances2500.csv'),
            os.path.join(dirs['Instances'], 'instances5000.csv'),
            os.path.join(dirs['Instances'], 'instances7500.csv'),
            os.path.join(dirs['Instances'], 'instances10000.csv')
        ],
    }
    
    progs = {
        'Scalability' : os.path.join(dirs['Bin'],'Experiments/02-ScalabilityOfClusteringAlgorithm/Scalability'),
    }
    
    params = {
        'clusters' : [4, 8, 16, 32, 64],
        'histograms' : 7*8, # 7 scales * 8 features
        'burnin' : 10,
        'iterations' : 100,
        'branching' : 1,
    }
       
    if skip['Measure']:
        print( 'Skipping: Measure' )
    else:
        print( 'Measuring' )
        for instanceMatrix in files['Instances']:
            args = [
                progs['Scalability'],
                '--input', instanceMatrix,
                '--nHistograms', ""%d"" % params['histograms'],
                '--output', os.path.join(dirs['Statistics'], 'stats_' + os.path.basename(instanceMatrix)),
                '--burnin', ""%d"" % params['burnin'],
                '--iterations', ""%d"" % params['iterations'],
                '--branching', ""%d"" % params['branching']
            ] + list(intersperse('--clusters', (""%d"" % k for k in params['clusters'])))
        
            print(' '.join(args))        
            if subprocess.call( args ) != 0:
                print( 'Error measuring', instanceMatrix )
                return 1
    return 0

if __name__ == '__main__':
    sys.exit( main() )
",css,sql,0.01692676319510385,0.016310519591813843,0.00017484026216604452,4.024836022038416e-06,4.8861420446586664e-05,4.9476434527562144e-05,0.00020728334302625256,0.9661754274913116,0.00010280342558210654
"def count_words(given_sentence):
    return(len(given_sentence.split()))

given_sentence = ""This is a given sentence""
word_count = count_words(given_sentence)
print(""Number of words in given sentence is: "", word_count)",python,python,2.9438585962946806e-05,0.0007654876729160442,0.00065178752774154,8.478602472859113e-05,8.168509262366234e-05,9.138345765702561e-06,0.9913783384955943,0.006249434126972336,0.0007499041276948396
"def fibonacci(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n - 1) + fibonacci(n - 2)
    
for i in range(0, n + 1):
    print(fibonacci(i))",python,python,1.4725293612655057e-07,1.6627898236049748e-07,6.749787729175388e-07,1.891752572929026e-08,4.67048661368373e-08,1.0916275342392073e-05,0.9999874971055149,4.484924630851903e-07,8.399359624951562e-08
"words = [""correct"", ""tango"", ""apple"", ""banana""] 

# Sort words in reverse alphabetical order 
words.sort(reverse=True) 

# Print list in descending order 
print(words)",python,python,0.0002638563111703196,0.014670369257345023,0.009844665270539982,3.0352216285882203e-05,0.0019422892329363072,0.0007438708259928523,0.92830285741176,0.04419330351281971,8.435961149969533e-06
"def filter_within_length(strings, length):
    result = []
    for string in strings:
        if len(string) >= length:
            result.append(string)
    return result

strings = [""Java"", ""C++"", ""Swift"", ""Python"", ""Kotlin""]
result = filter_within_length(strings, 4)
print(result)",python,python,9.708527613790358e-07,0.003476184063727596,2.096803924013136e-05,0.01588383862659968,8.199213849668766e-08,1.0772414086499254e-05,0.9516218709259958,0.028931352950943227,5.396013450716945e-05
"import pandas as pd

# Create a dataframe from the input data
df = pd.DataFrame([
    {""customer_id"": 1, ""month"": 1, ""amount"": 40000},
    {""customer_id"": 2, ""month"": 1, ""amount"": 10000},
    {""customer_id"": 3, ""month"": 1, ""amount"": 20000},
    {""customer_id"": 1, ""month"": 2, ""amount"": 30000},
    {""customer_id"": 2, ""month"": 2, ""amount"": 15000},
    {""customer_id"": 3, ""month"": 2, ""amount"": 50000},
])

# Group by customer and get the average purchase amount in each month
result = df.groupby('customer_id')['amount'].mean().sort_values(ascending=False).head(5)

# Print the result
print(result)",css,css,0.027763001806389825,0.6690891365716313,0.0052782043987078696,0.00018017476554197406,0.006451934233742141,0.0005763736332209672,0.27259261460247175,0.00470450366368909,0.013364056324605056
"def dfs(root):
 stack = [root]
 while stack:
    node = stack.pop(-1) 
    print(node.data) 
       
    if node.right:
        stack.append(node.right) 
    if node.left:
        stack.append(node.left)",python,python,0.0037119628704935445,0.07905560072382427,0.013328995996119301,0.0011365556118454437,0.0015407428954938688,0.1438923377867926,0.7031250885809488,0.025964357024466846,0.02824435851001524
"def reverseString(s): 
    return s[::-1] 
  
string = ""hello world""

print(""Original String:"", string) 
print(""Reversed String:"", reverseString(string))",python,java,5.685903727430112e-09,0.0003064482786147094,3.890586386128913e-05,0.8314357588759569,3.5882702712257475e-12,6.775729624242276e-09,0.1635572367475106,0.0046594738927940626,2.163876040725487e-06
"import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense

# Load the data
wine_data = pd.read_csv(""wine.csv"")

# Split the data into training and test sets
X = wine_data.drop(""quality"", axis=1)
y = np.array(wine_data[""quality""])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Scale the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

# Create the model
model = Sequential()
model.add(Dense(128, input_shape=(len(X_train[0]),), activation=""relu""))
model.add(Dense(64, activation=""relu""))
model.add(Dense(32, activation=""relu""))
model.add(Dense(16, activation=""relu""))
model.add(Dense(1, activation=""sigmoid""))

# Compile the model
model.compile(optimizer=""adam"", loss=""mean_squared_error"", metrics=[""accuracy""])

# Fit the model
model.fit(
 X_train,
 y_train,
 validation_data=(X_test, y_test),
 epochs=500,
 batch_size=32
)",python,bash,0.7559521086404642,0.001723954505688748,0.029317371182456652,8.367894807984576e-05,1.456732430781577e-05,2.2885583538981976e-07,0.19834548178225184,1.7450229359309002e-07,0.014562434258621915
"# Python program to find shortest path
# using Dijkstra's Algorithm 
  
import math 
  
#function to find the shortest path 
def dijkstra(graph, src, dest, V): 
    # dist[i] will hold the shortest distance from src to i 
    dist = [math.inf] * V 

    # sptSet[i] will true if vertex i is 
    # included / in shortest path tree or 
    # shortest distance from src to i is finalized 
    sptSet = [False] * V 

    # Initialize all distances as INFINITE and 
    # stpSet[] as false 
    dist[src] = 0

    # Find shortest path for all vertices 
    for _ in range(V): 
        u = minDistance(dist, sptSet) 
        sptSet[u] = True

        # update dist value of adjacent vertices 
        # of the picked vertex. 
        for v in range(V): 
            if graph[u][v] and sptSet[v] == False and \
            dist[v] > dist[u] + graph[u][v]: 
                    dist[v] = dist[u] + graph[u][v] 

    # print the constructed distance array 
    print(""Vertex distance from Source"")
    for node in range(V): 
        print(node, '\t', dist[node]) 

    # Get the shortest path from src to dest
    path = getPath(dist, dest, src)
    return path

def getPath(dist, dest, src):
    path = [dest]
    while dest != src:
        for i in range(V):
            if dist[dest] - dist[i] == graph[i][dest]:
                path.append(i)
                dest = i
    path.reverse()
    return path
 
def minDistance(dist, sptSet): 
    min = math.inf
    for v in range(V): 
        if dist[v] < min and sptSet[v] == False: 
            min = dist[v] 
            min_index = v 
    return min_index

V = 7
# Print the shortest path
print(""Shortest Path: {}"".format(dijkstra(Graph, 0, 6, V)))",sql,python,0.2856689796975569,0.13029488775641768,0.01812701291745999,0.00010712202020185257,0.004625453924681961,0.09269795491424876,0.2984800685579937,0.003367257467797184,0.16663126274364196
"import re
from collections import Counter

from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/api/frequent_words', methods=['POST'])
def frequent_words():
    text = request.json['text']
    words = re.findall(r'\w+', text.lower())
    count = Counter(words).most_common(10)
    return jsonify(count)

if __name__ == '__main__':
    app.run()",python,css,0.004700644448652052,0.5920832631614044,0.027659578348679364,2.3439318448222187e-06,2.639914849642736e-05,1.5281586594067453e-05,0.34764364886528615,0.02782894821372416,3.989229531858004e-05
"def common_in_two_lists(list1, list2):
    common_elements = []
    for number in list1:
        if number in list2:
            common_elements.append(number)
    return common_elements",python,python,0.00012880772919715423,0.0024094929869079625,0.0005584874559526937,3.8711709490523e-05,0.0001120317104903711,0.020552058522148576,0.9755804788992053,0.00021288960383260372,0.0004070413827747482
"import requests
from bs4 import BeautifulSoup

# Get the HTML from the URL
url = ""https://www.reddit.com/r/ProgrammerHumor/comments/hfpmoo/people_ask_me_why_i_learn_so_many_programming/""
response = requests.get(url)

# Parse the HTML
soup = BeautifulSoup(response.text, 'html.parser')

# Get all the comments from the page
comments = []
for comment in soup.find_all(""div"", class_=""md""):
    comments.append(comment.text)

# Print all the comments
for comment in comments:
    print(comment)",python,html,3.6274684369885793e-09,0.02146545738403603,0.9780054939627874,0.0003392683071447306,3.745157133683843e-05,1.884897801365881e-06,2.9642749625103018e-05,4.1984005596671716e-05,7.881349420309839e-05
"for i in range(10):
    print(""Hello World!"")",python,bash,0.41476515019669813,1.0529973609951147e-08,3.109759994156008e-06,8.394556204681047e-24,1.9917773121338337e-05,0.2051608511185328,0.38005094706949527,1.2513784162409056e-10,1.3427046902942278e-08
"def longest_word(sentence):
    words = sentence.split()
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word",python,python,0.005384551986428998,0.0023107855488017,0.005485601166149542,1.940726966797524e-05,0.00017941015412125237,0.0007114089596384586,0.9744047778617465,0.011355729846675865,0.00014832720676976216
"def find_longest_string(arr):
    longest_string = """"
    for s in arr:
        if len(s) > len(longest_string):
            longest_string = s
    return longest_string

string_array = [""Hello"", ""world"", ""Hi"", ""there""]
print(find_longest_string(string_array))",python,matlab,0.03241546247839719,0.0026413658971155547,0.0015644310200356882,1.610475695003946e-08,0.002756683698926445,0.6890972212093032,0.27090399823198485,6.723367133937686e-05,0.0005535876881408792
"def find_gcd(num1, num2):
    gcd = 1
    while num2 != 0:
        temp = num2
        num2 = num1 % num2
        num1 = temp
        gcd = num1
    return gcd",python,matlab,0.0003027761147233752,0.0021278353265754284,0.001332321602666545,7.974041252235745e-05,0.0007429313122161737,0.9709307455447478,0.023168275193031117,0.00036108187703104427,0.0009542926164862122
"import re

def chatbot_response(user_input):
    user_input = user_input.lower()
    
    # Check for Greeting
    if re.search(""hello|hi|sup"", user_input):
        return ""Hey there!""
    elif re.search(""bye"", user_input):
        return ""Goodbye""
    elif re.search(""what's your name"", user_input):
        return ""My name is ChatBot""
    else:
        return ""I don't understand""",python,python,0.000305133497414506,0.003740399746979218,0.12722808988798032,0.04736883268624127,0.0024463564191455184,0.0007216910486016126,0.8137227314582751,0.0017394487356900323,0.0027273165196723087
"def sort_strings_case_insensitive(input_list):
  return sorted([string.strip().lower() for string in input_list])",python,java,9.79929827831795e-09,0.000408894573670866,4.367799242541762e-05,0.9675070756705307,1.8314433926919533e-09,2.7533092720816766e-06,0.031359140392995984,0.0006692611465140121,9.185283849223591e-06
"import json
import sqlite3

data = {'name': 'John', 'age': 30, 'job': 'Software Engineer'}

with sqlite3.connect(""database.db"") as con:
 cur = con.cursor()
 cur.execute(""CREATE TABLE IF NOT EXISTS people(name TEXT, age INTEGER, job TEXT)"")
 cur.execute(""INSERT INTO people (name, age, job) VALUES (?, ?, ?)"", (data['name'], data['age'], data['job']))
 con.commit()",css,css,0.0003379860874896603,0.883386733745793,0.003222758423989187,0.0019633739350546965,1.0515205144411067e-06,5.265552135922126e-05,0.0019006029344323593,0.10537961121683372,0.003755226614533733
"import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier

data = pd.DataFrame(input)

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(data.text)
y = data.label

model = RandomForestClassifier()
model.fit(X, y)

# Predictions
predictions = model.predict(X)
print(predictions)",python,python,0.05977399736940009,0.10783585510828356,0.0034764241676754994,1.552561353554285e-05,2.444831337449644e-05,2.2447113331540635e-05,0.8282256691568556,1.4145680181728447e-05,0.0006114874773618644
"class Car(object):
    """"""A car object with attributes like model, colour and year""""""

    def __init__(self, model, colour, year):
        self.model = model
        self.colour = colour
        self.year = year

# Example
my_car = Car(""Ford Mustang"", ""Red"", 2016)",python,java,6.84274543218973e-05,0.003240326740362349,0.008688992089567162,0.8258488883333699,1.269306449078397e-07,1.6566762472474837e-05,0.16150848822484348,5.8254243477239755e-05,0.0005699292209405382
"import matplotlib.pyplot as plt
import numpy as np

#Create array with stock prices
prices = [5, 10, 20, 25, 10, 8, 22]

#Calculate EWMA
weight = 0.9
alpha = 1 - weight

ewma = np.zeros_like(prices)
ewma[0] = prices[0]

for i in range(1, len(prices)):
    ewma[i] = weight*ewma[i-1] + alpha*prices[i]

#Plot the EWMA
plt.plot(ewma)
plt.title('Exponentially Weighted Moving Average')
plt.ylabel('Price')
plt.xlabel('Time (days)')
plt.show()",python,python,0.0027062909969673235,0.011898069820517942,0.07065025828317831,0.00010254975715850721,0.00011416754830286961,0.004335002557141159,0.8972591345580591,0.0034518576660362453,0.009482668812638618
"import datetime
 
datetime_object = datetime.datetime.now()
print(datetime_object.strftime(""%A, %B %d, %Y""))",python,python,0.0019388596584170921,0.03469873096530323,0.004282665758650877,0.00018723013514902533,0.0008308448246338484,0.000550094522045299,0.9552292831140745,0.0009859125605319612,0.0012963784611942479
"import pandas as pd

df = pd.DataFrame([[1, 2], [3, 4], [5, 6]])

query = 'SELECT SUM(NUM1 + NUM2) AS SUM_NUM FROM df'

sum_num = pd.read_sql_query(query, con=df.to_sql('df'))
print(sum_num)",sql,python,0.0008700476789936784,0.18553731178613664,0.010077083277073882,0.00037707255546151207,0.0005856044962933322,0.001736629014337593,0.5727446068050356,0.03880251994031948,0.1892691244463483
"def calculator():
    while True:
    print(""Options:"")
    print(""Enter 'add' to add two numbers"")
    print(""Enter 'subtract' to subtract two numbers"")
    print(""Enter 'multiply' to multiply two numbers"")
    print(""Enter 'divide' to divide two numbers"")
    print(""Enter 'quit' to end the program"")",python,java,6.544256849974141e-08,1.2409517379807773e-09,1.997251728597051e-09,0.9999948195341567,1.0948599292915025e-08,2.2311464595216815e-19,5.0147503521742806e-06,1.0024299628247926e-08,7.606182005092401e-08
"arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]

arr.sort()

print(arr)

# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]",python,python,0.005544352544327129,0.03130576468176675,0.006645444839309368,0.00043893573468838635,0.0009853840650924566,0.031526596088828934,0.9228284339200793,0.0002537201045370487,0.00047136802137069753
"matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

total = 0

for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        total += matrix[i][j]

print(total)",python,python,6.546338293708832e-07,4.94501298621836e-07,5.788149007902088e-06,6.57091038580242e-08,5.3209101125129636e-08,0.0015893255215519192,0.9983995037463379,3.3263450181121928e-06,7.881847510118305e-07
"""""""
Design an algorithm in Python to detect if a given tree is a binary search tree
""""""

#Define the Node class
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

# Define the isBST function 
def isBST(root): 
    # Base condition
    if root is None: 
        return True
  
    # Check if the value is within range
    if root.val < getMaxValue(root.left) or root.val > getMinValue(root.right): 
        return False
  
    # Check the subtrees
    if (not isBST(root.left)) or (not isBST(root.right)): 
        return False
  
    # Pass all test cases
    return True
  
# Find the minimum value in a tree
def getMinValue(root): 
    if root is None: 
        return float(""inf"") 
    minv = root.val 
    minv = min(minv, getMinValue(root.left)) 
    minv = min(minv, getMinValue(root.right)) 
    return minv
  
  
# Find the maximum value in a tree
def getMaxValue(root): 
    if root is None: 
        return -float(""inf"") 
    maxv = root.val 
    maxv = max(maxv, getMaxValue(root.left)) 
    maxv = max(maxv, getMaxValue(root.right)) 
    return maxv",python,python,0.057249716104170775,0.06282933619676893,0.021200865198871113,0.0004760177716869579,0.06752907712389833,0.012710968695515494,0.572724745092156,0.1584454255270932,0.046833848289839275
"def get_larger_number_divisible_by_smaller(num1, num2):
  max_num = max(num1, num2)
  min_num = min(num1, num2)

  return max_num if max_num % min_num == 0 else None

result = get_larger_number_divisible_by_smaller(10, 20)
print(result) # 20",python,python,3.368695022353477e-05,0.0014385570142549354,0.0005154691348323093,1.4838229770493002e-06,1.7629865788099366e-05,7.471501549478007e-06,0.9979167135988348,4.320809925269528e-05,2.5780012287075936e-05
"#import necessary libraries
import nltk
import numpy as np
from nltk.corpus import brown
from nltk.tokenize import word_tokenize

#initialize HMM 
def hmm():
    # load corpus
    corpus = brown.tagged_sents(categories=['adventure','fiction','romance',
                                            'humor','mystery','science_fiction'])

    # split corpus and generate tags
    train_data,test_data = corpus[:1000], corpus[1000:]
    tags = set([tag for sent in train_data for (word,tag) in sent])

    # initialize hmm
    hmm = {tag:{tag:{0:0 for tag in tags} for tag in tags} }
    hmm['start'] = {tag:0 for tag in tags}
    hmm['end'] = {tag:0 for tag in tags}

    # calculate initial probabilities
    for sent in train_data:
        for i in range(len(sent)):
            word,tag = sent[i]
            if i == 0:
                hmm['start'][tag] += 1
            else:
                previous_tag = sent[i-1][1]
                hmm[previous_tag][tag][0] += 1
            hmm[tag][tag][word] = hmm[tag][tag].get(word, 0) + 1

    # calculate transition probabilities
    for previous_tag in hmm:
        if previous_tag != 'start' and previous_tag != 'end':
            total = sum(hmm[previous_tag][tag][0] for tag in hmm[previous_tag])
            for tag in hmm[previous_tag]:
                hmm[previous_tag][tag][0] /= total
    return hmm

def predict(sentence, hmm):
    sentence = sentence.lower()
    tokenized_sentence = word_tokenize(sentence)
    # assign default tag to each word
    tagged_sentence = []
    for word in tokenized_sentence:
        tagged_sentence.append((word,'M'))

    # calculate likelihood of each tag for each word
    for i in range(len(tagged_sentence)):
        word,tag = tagged_sentence[i]
        if i == 0:
            probs = {tag:hmm['start'][tag] for tag in hmm['start']}
        else:
            previous_tag = tagged_sentence[i-1][1]
            probs = {tag:hmm[previous_tag][tag][0] * hmm[tag][tag].get(word, 0) 
                     for tag in hmm[previous_tag]}
        max_prob, tag_chosen = max(probs.items(), key=lambda x:x[1])
        tagged_sentence[i] = (word, tag_chosen)
    return tagged_sentence",css,html,0.04013644127090412,0.04620616711320333,0.42146269717832113,0.00017170647581492775,0.0015142485264668809,0.3977369721271947,0.046669876033723356,0.03674900289285259,0.009352888381518931
"def findMax(list): 
    max = list[0] 
    for i in range(1, len(list)): 
        if list[i] > max: 
            max = list[i] 
    return max

list = [1, 2, 3, 9, 8, 4] 
print(""The maximum element in the list is:"", findMax(list))",python,matlab,4.6696127737586074e-05,4.070950927520853e-05,0.0001662184476784663,4.0743928174233555e-06,0.000390451373894084,0.8894673669785942,0.10829980283473924,0.0012527689385089897,0.0003319113967544795
"str = ""apple, banana, orange""

# split the string
string_list = str.split(', ')

# print result
print(string_list)  # ['apple', 'banana', 'orange']",python,python,0.00010571340442937112,0.12746259546093813,0.006664985492290431,0.004231978288999795,0.00014760839149061654,3.768927178615979e-05,0.8203773356513822,0.040120099619738496,0.0008519944189449106
"class Node(): 
    # Constructor to initialize the node object 
    def __init__(self, data): 
        self.data = data  
        self.next = None

def reverse(head):
    if head is None:
        return 
    
    prev = None
    curr = head
    while curr != None: 
        # Store the next node
        next = curr.next
        
        # Reverse the current node
        curr.next = prev 
        
        # Move to previous node
        prev = curr 
        
        #Move the current node
        curr = next
    
    #Assign the reversed list to head
    head = prev 
    return head",python,html,0.00031764388187458133,0.005115827238244696,0.9061448083666044,5.5031680398643835e-05,0.0007228412520192856,2.2288292420161504e-05,0.023169652921355526,0.038413354276063724,0.026038552091018886
"import random

for _ in range(10):
 print(random.randint(1, 5))",python,python,1.0391748703094457e-06,3.245551230787971e-07,3.0572093668526175e-06,7.2783942238338385e-09,4.3755594762359703e-08,0.014552671596954937,0.9854361629048412,6.48353978555198e-06,2.0998506902922634e-07
"import random

def get_rand():
    return random.randint(0, 50)",python,python,4.8100846227130866e-05,0.00012974635037377283,6.629274531474287e-05,3.3614907502072264e-07,6.137378933740248e-06,4.23307037628204e-08,0.9715296259181364,0.02821761652820592,2.10175302952793e-06
"def maximizeSum(arr): 
    if (len(arr) < 2): 
        print(""Invalid Input"") 
        return 
  
    first = second = -1000
    for i in range(0, len(arr)): 
  
        if (arr[i] > first): 
            second = first 
            first = arr[i] 
  
        elif (arr[i] > second and  
              arr[i] != first): 
            second = arr[i] 
  
    return (first + second) 
  
# Driver code 
arr = [1, 2, 4, 5, 3, 7] 
print(maximizeSum(arr))",python,matlab,4.469355048358892e-05,5.223440071275568e-05,0.00017225046976671618,1.3194490357989884e-05,5.83614313671415e-06,0.7287919762901666,0.27077566508115414,9.065159550430793e-06,0.0001350844146712832
"def factorial(n):
 result = 1
 for i in range(1, n+1):
 result *= i
 return result
 
print(factorial(3))",python,python,5.3934145694864817e-08,2.305497940014855e-06,3.628043362687318e-07,5.1169483403654805e-09,4.94413884194339e-08,6.461601862237861e-06,0.99998853527564,2.1000393769435404e-06,1.2628836215910438e-07
"def array_sum(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum

print(array_sum([10, 20, 30, 40]))

# Output: 100",python,matlab,1.5692646979216548e-07,1.4585266596375607e-08,2.2688813160361808e-07,1.8181932288541476e-07,4.898698167163091e-08,0.9999987044789708,6.42639157138215e-07,5.338161634568834e-09,1.8337538036680524e-08
"def is_perfect_square(num):
    if num < 0:
        return False

    x = num // 2
    seen = {x}
    while x * x != num:
        x = (x + (num // x)) // 2
        if x in seen:
            return False
        seen.add(x)
    return True",python,matlab,3.847190462075538e-06,1.46019877448848e-09,3.738249072006314e-05,9.980303330796962e-06,1.4444439308822354e-06,0.9274055462086898,0.07253782610924142,1.6240096555627962e-06,2.3477837705247297e-06
"list = [3, 4, 7, 1, 6, 9, 2] 
list.sort() 
print(""Ascending :"",list)",python,python,0.0011500848272189925,0.008469639492909022,0.006868937765799317,0.0003235601412012078,0.014867065299632259,0.029248810866862245,0.8230267914315905,0.11524870032464346,0.0007964098501429663
"from cryptography.fernet import Fernet

# Generate a new fernet key
key = Fernet.generate_key()
f = Fernet(key)

# Encrypt the message
encrypted_message = f.encrypt(b""This is a secret message"")

# Decrypt the encrypted message
decrypted_message = f.decrypt(encrypted_message)

print(encrypted_message)
print(decrypted_message)",python,python,0.04124960249562826,0.12282908220002735,0.035825381885929417,0.0025446479812565722,0.013079555659081945,0.0023914227993345172,0.7200547952891179,0.021995372007427298,0.04003013968219673
"def toPigLatin(s):
   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
   if s[0] in vowels:
      return s + 'way'
   else:
      return s[1:] + s[0] + 'ay'
      
print(toPigLatin(""Hello World""))",python,bash,0.4651773946908267,0.006829117337875521,0.00616480483965826,2.7840753181171097e-10,0.11293114197812197,0.001988165147353507,0.4046510113853216,0.0016684091712247423,0.0005899551712101977
"import random

number = random.randint(1, 10)",python,python,5.6080734409901794e-05,0.0003365941891866954,6.497542792934996e-05,1.2593606632600136e-06,1.5848840695500636e-05,2.5804579601992447e-06,0.9980192614038352,0.0014798999697786456,2.3499615541380233e-05
"import re
from nltk import tokenize

input_text = 'string with several words'

tokens = tokenize.word_tokenize(input_text)
for token in tokens:
  if re.search('\w+', token):
      print(token)",python,python,0.00019548140027442643,0.14695614430901033,0.11466760896223524,0.052912318851989215,0.0001229027466115441,0.005319019693446691,0.5970478788076957,0.08147333889370932,0.0013053063350274591
"def get_max_min(arr):
    max_num = None
    min_num = None

    for n in arr:
        if max_num is None or n > max_num:
            max_num = n

        if min_num is None or n < min_num:
            min_num = n

    return max_num, min_num

max_num, min_num = get_max_min([-5, 7, 2, 11, -9])
print(f""max = {max_num}, min = {min_num}"")",python,python,0.0037523275303917142,0.010836053262214856,0.07294802864394888,0.000627394155694198,0.003597810383081601,0.11017694386024195,0.7904978461147755,0.00010923052949168282,0.007454365520159755
"def sortList(lst): 
    lst.sort() 
    return lst
  
ar_list = [5, 4, 1, 8, 9, 2]
result = sortList(ar_list) 
  
print(result)",python,python,4.043887926787176e-06,0.00026163636419435316,1.4901370145984743e-05,7.975227940971366e-07,4.5127705117409705e-06,1.3179837287296184e-07,0.9996665628229924,4.0150237262902386e-05,7.263225798651969e-06
"def generate_fibonacci_sequence(n):
 a, b = 0, 1
 fibonacci_sequence = []
 while a <= n:
  fibonacci_sequence.append(a)
  a, b = b, a + b
 return fibonacci_sequence


print(generate_fibonacci_sequence(12))  # Output: [0, 1, 1, 2, 3, 5, 8, 13]",python,python,0.033021783844053264,0.037015439930285526,0.027217360077491603,0.0019324004702253254,0.004852242721272554,0.011754469525286467,0.8780352642474738,0.002044268021019855,0.0041267711628915765
"def fix_string(s): 
    s = s.replace("" "", """") 
    s = s.lower() 
    s = """".join(reversed(s)) 
    return s",sql,sql,0.0007334262671831828,0.003466562231546179,0.003480003774118527,0.00012492428903525897,0.0007580616144297531,0.00014181143532185649,0.11448763198085174,0.8756530816623197,0.0011544967451936903
"def longest_increasing_subsequence(arr):
    n = len(arr)
 
    # An array to store increasing subsequences
    dp = [1]*n
 
    # Compute optimal values in bottom up manner
    for i in range (1 , n):
        for j in range(0 , i):
            if arr[i] > arr[j] and dp[i]< dp[j] + 1 :
                dp[i] = dp[j]+1
 
    # Pick maximum of dp[i]
    # Initialize result
    maximum = 0
 
    # Pick maximum of all dp[i]
    for i in range(n):
        maximum = max(maximum , dp[i])
 
    return maximum",python,python,0.00018669918435236104,0.00033594278033180925,0.0005370009580485314,6.328189406561655e-05,0.0002707332082750827,0.3276174776143517,0.666574756712443,0.002464232231278507,0.0019498754168534326
"def is_rotation(s1, s2):
  # edge case check
  if len(s1) != len(s2):
    return False

  # concatenate s2 to itself
  concat_s2 = s2 + s2

  #search s1 in concat_s2
  return s1 in concat_s2",python,python,7.08941289078289e-05,0.003599270764130591,0.0022911670309565704,0.0005869702218739493,0.0009525002387925398,0.00042028002078479536,0.9867325322737435,0.0023991298415036036,0.002947255479306688
"import tkinter as tk

root = tk.Tk()

length_label = tk.Label(text=""Length:"")
length_label.grid(row=0, column=0)
length_entry = tk.Entry()
length_entry.grid(row=0, column=1)

width_label = tk.Label(text=""Width:"")
width_label.grid(row=1, column=0)
width_entry = tk.Entry()
width_entry.grid(row=1, column=1)

def area():
 area = float(length_entry.get()) * float(width_entry.get())
 area_label = tk.Label(root, text=""Area: "" + str(area))
 area_label.grid(row=2, column=0, columnspan=2)

calc_button = tk.Button(text=""Calculate"", command=area)
calc_button.grid(row=2, column=1)

root.mainloop()",python,python,0.00452555799751854,0.034743791504527506,0.00762055766766402,0.000731055858519668,0.0027147266224749806,0.001118169097223941,0.7811298843283371,0.1551589274253446,0.01225732949838967
"product = num1 * num2
print(product)",python,python,0.0007549274318230767,0.0371831946960332,0.0014253098200390985,3.495539436929988e-05,0.00029779207370582075,0.00015023813117710544,0.9588871654444321,0.0005629801468324123,0.0007034368615880562
"for num in range(1, 11): 
    if num % 2 != 0: 
        print(num)",python,matlab,1.4894035211680711e-24,9.410394037796519e-37,4.6685749682307406e-24,6.171338873645088e-26,1.4893586790788214e-25,1.0,2.0241527573284863e-21,4.113898389020325e-26,5.48380695217311e-25
"This tutorial will teach you how to use a for-loop to print the elements of a given list in Python.

Step 1: Initialize your loop
Start by initializing a loop to loop through the elements of the list. This can be done by using the for-loop keyword in Python followed by the name of the variable you will use to represent the element of the list followed by the keyword in and the name of the list you want to loop through.

For example, if you want to loop through the elements of the list called ‘mylist’, you would write:

for element in mylist:

Step 2: Print the element
Inside the loop, use the print() function to print the current element. The print() function takes as argument the element of the list, which you can refer to with the variable you defined in Step 1.

For example, if the name of the variable you defined in Step 1 was ‘element’, you would write:

print(element)

Step 3: Terminate the loop
After you’ve printed all the elements, you should terminate the loop. To do this, you can use the keyword break. By using break, you can tell the loop to stop looping once it has reached the last element of the list.

For example, you can write:

break

That’s it! This is how you use a for-loop to print the elements of a given list in Python.",python,typescript,3.8969395289045156e-08,8.526254293740638e-08,1.4676414611380648e-07,2.2788687975102502e-08,0.0021108278383767626,1.3603587426480698e-06,3.2041570733683636e-09,5.727558029935819e-08,0.9978874575383709
"my_list = [1, 2, 3, 4, 5, 6, 7, 8]

count = 0
for i in my_list:
    if i % 2 == 0:
        count += 1

print(count)",python,python,0.0001405571171171413,0.0019659029588187694,0.0004312812265347647,1.051519521113567e-05,4.809620260678591e-05,0.030210009207230246,0.9666386009830172,0.00034396265381143344,0.00021107445565273023
"def prime_range(lower, upper):
    prime_list = []
    for num in range(lower, upper +1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                prime_list.append(num)

    return prime_list

lower = 1
upper = 20
print(prime_range(lower, upper))",python,matlab,8.800131327563378e-10,3.617550499638485e-13,3.3614231682876816e-09,8.54083207616404e-11,1.7403929886577169e-10,0.9999994194256421,5.742637980371149e-07,1.1335175368083675e-09,6.757968623078263e-10
"import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

# loading dataset
df = pd.read_csv(""spam_classification.csv"")

# splitting dataset
X = df[""Message""]
y = df[""Label""]
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

# creating a model
model = MultinomialNB()
model.fit(X_train, y_train)

# evaluating the model
score = model.score(X_test, y_test)
print(""Model score: {}"".format(score))",python,python,0.3058801003987906,0.12533566706433233,0.0026533285381092524,1.6832790701719693e-05,2.3743247778422945e-05,2.1719402151327237e-05,0.5657243160732994,1.1019069729921169e-06,0.00034319057786395666
"""""""
Design a Python script to check if a given value is an alphabet or not 
""""""

# function to check if the given value is an alphabet or not
def is_alphabet(value):
    # check if the value is empty
    if value == '':
        return False

    # check if the given value is an alphabet
    if value.isalpha():
        return True
    else:
        return False

if __name__ == '__main__':
    value = input('Enter a value: ')
    print(is_alphabet(value))",python,matlab,1.4398689396018007e-06,5.616384507536024e-06,6.2511497892202475e-06,3.6311853674053776e-09,5.782139919344985e-06,0.9995581051591318,3.271831718243023e-11,9.214502161143136e-07,0.00042188018359261476
"def knapsack_brute_force(capacity, items):
 max_value = 0

 # the number of items
 num_items = len(items)

 # Iterate through the items.
 for i in range(2**num_items):

 # Create a subset.
 subset = [items[item] for item in range(num_items) if i & (1 << item)]

 # Calculate the total weight of the subset.
 subset_weight = sum([item['weight'] for item in subset])

 # Skip the subset if it exceeds the capacity.
 if subset_weight > capacity:
 continue

 # Otherwise, add the subset's total value to the max value.
 subset_value = sum([item['value'] for item in subset])
 max_value = max(subset_value, max_value)

return max_value

# Execute the function.
max_value = knapsack_brute_force(capacity, items)
print(max_value) # 120",python,javascript,0.0008556872878245206,0.016839400336014988,0.015251010684157388,6.785391092304747e-05,0.90657001356468,0.04093652402886858,0.013481052655926196,0.0014485005749346315,0.004549956956670562
"def sort_numbers(numbers):
    numbers.sort(reverse=True)
    return numbers

numbers = [28, 5, 17, 10, 43]

sorted_numbers = sort_numbers(numbers)
print(sorted_numbers)",python,python,0.0002788858980579167,0.0018311637273434637,0.0018746668559840734,0.39434516192928154,0.0022836093546111254,2.6493205996025543e-08,0.5990455012610006,0.00011448838304751891,0.00022649609746784886
"import pandas as pd

# create a dataframe
df = pd.DataFrame({
 'Name': ['John', 'Mary', 'Chris'],
 'Score': [90, 80, 95],
})

# function to calculate the grade
def calculate_grade(score):
 if score >= 90:
 return 'A'
 elif score >= 80:
 return 'B'
 else:
 return 'C'

# apply the function to the dataframe
df['Grade'] = df['Score'].apply(calculate_grade)

print(df)",css,css,0.00028964578742013826,0.9237281200393115,0.0014990757173604682,0.00014468221944136903,0.04695921653498026,0.0005809558328496833,0.01768932523639185,0.004398841229189406,0.004710137403055408
"from collections import Counter 
  
def is_anagram(str1, str2): 
    # Convert both strings to lowercase 
    str1 = str1.lower() 
    str2 = str2.lower() 
  
    # Remove all whitespaces
    str1 = str1.replace("" "", """") 
    str2 = str2.replace("" "", """") 
 
    # remove all special characters
    for char in ""!'_,@#$%^&*():;"":
        str1 = str1.replace(char, '')
        str2 = str2.replace(char, '')

    # sort the character of both strings 
    sorted_str1 = sorted(str1) 
    sorted_str2 = sorted(str2) 
  
    # Check if both strings are equal or not 
    if(sorted_str1 == sorted_str2):  
        return True 
    else: 
        return False 
  
# Driver program 
str1 = ""listen""
str2 = ""silent""

if is_anagram(str1, str2): 
    print(""The strings are anagrams."") 
else: 
    print(""The strings are not anagrams."")",python,python,0.005317240891192994,0.0030273856066809334,4.607097484121235e-06,3.07040921292551e-05,0.3718284088886042,0.000288204491336039,0.5660381715134795,0.04880426661539357,0.0046610108036995645
"def word_count(sentence):
    words = sentence.split()
    return len(words)",python,python,5.5051417123953866e-05,0.0007999957163569127,0.0015897245578674263,5.74182926716977e-06,3.0068498029049093e-05,3.4200928299339625e-06,0.9631938213563292,0.03431749072079939,4.68581139703197e-06
"# imports
import tkinter as tk

# create root app window
root = tk.Tk()

# setting window's size
root.geometry(""200x200"")

# main loop
root.mainloop()",python,python,0.03583378045990986,0.035878635777147325,0.18239597732875443,0.002333810381109865,0.0026218427216393517,0.0028537251908490966,0.46196178266037313,0.08858978517528651,0.1875306603049304
"import datetime

print(f'Current Date and Time: {datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")}')",css,python,0.0014653813693294667,0.08093924009462967,0.00284510738507894,0.00027991490113235486,0.0008118848046458461,0.0007104785299649486,0.8991388964878451,0.0017203968205021295,0.012088699606871794
"def greater_of_two_numbers(int1, int2):
    if int1 > int2:
        return int1
    else:
        return int2",python,python,0.009796836486540636,0.01747940789328505,0.013821447165009644,0.0015274720956399022,0.004429468712275619,0.01567462407187202,0.925899842782089,0.0028859756442810983,0.008484925149007175
"def firstPrimeNumbers(number): 
    primeNumbers = [] 
  
    for num in range(1, number + 1): 
 
        if (num > 1): 
            for i in range(2, num): 
                if (num % i == 0): 
                    break
            else: 
                primeNumbers.append(num)
    return primeNumbers
  
# Test code 
prime = firstPrimeNumbers(5) 
print(prime)",python,matlab,1.415373490197933e-17,5.1368504860253016e-24,5.879499810212021e-17,1.1581736555095005e-18,1.4643256664428471e-18,0.9999999999998688,1.3116246902027567e-13,1.0240117978557572e-16,9.714693491512376e-17
"import requests
from bs4 import BeautifulSoup

query = 'Machine learning'

pages = 5
for i in range(1, pages+1):
  url = f'https://en.wikipedia.org/wiki/{query}'
  headers = {'User-Agent': 'Mozilla/5.0'}
  page = requests.get(url, headers=headers)
  soup = BeautifulSoup(page.content, 'html.parser')
  
  print(soup.title.string)
  print(soup.find(id='mw-content-text'))",css,css,6.910864527889942e-09,0.7414102199827974,0.25689397987883866,0.0007057284722674446,2.8594168382406993e-07,1.3051269866077445e-05,0.0005891734580375867,0.00026419448614383893,0.00012335959950058665
"import nltk

def get_synonyms(sentence):
    output = []
    words = nltk.word_tokenize(sentence)
    for word in words:
        synonyms = []
        for syn in wordnet.synsets(word):
            for l in syn.lemmas():
                synonyms.append(l.name())
        output.append(list(set(synonyms)))
  return output",python,matlab,0.15750055461673626,0.03943558055891688,0.05586834890837806,0.0006160774940605847,0.0005080375474163354,0.3804430562995132,0.15741435201658235,0.20813441218590967,7.958037248676308e-05
"def sort_by_length(d):
    sorted_d = {}
    keys_list = list(d.keys())
    keys_list.sort(key=len)
 
    for key in keys_list:
        sorted_d[key] = d[key]
 
    return sorted_d",python,python,0.0021227080549185624,0.4112069156543099,0.004917550376249198,0.0002534878517289055,0.0033834823599398997,0.001796444031421475,0.5643630581440974,0.009656588378372653,0.0022997651489620337
"def translate(word):
 vowels = ('a', 'e', 'i', 'o', 'u')
 consonants = ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',
 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')

if word[0] in vowels:
 new_word = word + 'ay'

elif word[0] in consonants:
 new_word = word[1:] + word[0] + 'ay'

else:
 new_word = word

return new_word

# Test
sentence = 'My name is John'

words = sentence.split(' ')
pig_latin = [translate(word) for word in words]
pig_latin_sentence = ' '.join(pig_latin)

print(pig_latin_sentence)

# Output: yMay amenay isay ohnJay",sql,python,0.26676752367659473,0.0032546898233018233,0.04868507517576119,0.0001334849587788686,0.0023711637473911424,0.0030353737075430793,0.4533125819234143,0.22205141248991161,0.0003886944973032365
"def is_permutation(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        dict_str1 = {}
        dict_str2 = {}
        for i in range(len(str1)):
            if str1[i] not in dict_str1:
                dict_str1[str1[i]] = 1
            else:
                dict_str1[str1[i]] += 1
            if str2[i] not in dict_str2:
                dict_str2[str2[i]] = 1
            else:
                dict_str2[str2[i]] += 1
        return dict_str1 == dict_str2

print(is_permutation(str1, str2))",python,python,0.0003172103410411326,0.0002384353795541411,7.532324759906639e-07,2.0218486688894073e-05,0.10963010589347182,0.019898181835496583,0.8537431953516127,0.015914275223509775,0.00023762425614880722
"def int_to_string(num):
   return str(num)",python,matlab,4.662697609545902e-06,2.420753652404552e-09,3.771408343312369e-05,9.680100891600985e-07,2.179400153527748e-05,0.748534471782283,0.2513864673507984,1.205596117807272e-05,1.8636923197182384e-06
"def word_frequency(string): 
    freq = {} 
    for word in string.split(): 
        if word in freq: 
            freq[word] += 1
        else: 
            freq[word] = 1
  
    for key, value in freq.items(): 
        print(""% s : % d""%(key, value)) 
  
# Driver program 
if __name__ == ""__main__"": 
    string = ""hello world, this is a test string""
    word_frequency(string)",python,css,0.0023162933025974324,0.6846419762227861,0.0307464621048273,0.05812798745085885,5.576964338869956e-07,0.022444647266212692,0.05887004183385576,0.14264080658797268,0.0002112275344551
"def sort_descending(lst):
    return sorted(lst, reverse=True)
  
# Example 
list_sample = [7, 4, 3, 10, 2, 1]
result = sort_descending(list_sample)  
print(result) 
# Output: [10, 7, 4, 3, 2, 1]",python,python,1.9221216509262346e-05,0.0020265306453009064,0.0003211916794866637,4.3804818748342774e-05,3.070586839393138e-05,3.0385696849877263e-07,0.9975453394522208,1.202854008104558e-05,8.739222904483749e-07
"import flask
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/books/author/<author_name>', methods=['GET'])
def get_books_by_author(author_name):
 books = [
 {'name': 'Harry Potter and the Philosopher\'s Stone', 'author': 'J.K. Rowling'}, 
 {'name': 'Harry Potter and the Chamber of Secrets', 'author': 'J.K. Rowling'},
 {'name': 'Harry Potter and the Prisoner of Azkaban', 'author': 'J.K. Rowling'},
 {'name': 'Harry Potter and the Goblet of Fire', 'author': 'J.K. Rowling'}
]

books_by_author = [book for book in books if book['author'] == author_name]
return jsonify({'books': books_by_author})

if __name__ == '__main__':
 app.run()",css,css,0.005160806379046301,0.6241039948244927,0.0038063127496255063,0.009970332346502707,0.00029712532952758276,0.0015269258998088274,0.08329256933128319,0.012242469523795912,0.2595994636159172
"def printPascalTriangle(n): 

	for line in range(1, n + 1): 
		C = 1; # used to represent C(line, i) 
		for i in range(1, line + 1): 
			# The first value in a line is always 1 
			print(C, end = "" ""); 
			C = int(C * (line - i) / i); # Calculating 
										# the next value  
		print(""""); # entered to move to the next line 

# Driver Code 
n = 5; 
printPascalTriangle(n); 

Output:
1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1",python,bash,0.9564939032160497,5.797457522302293e-05,0.0005205283587704277,5.549901084081507e-05,0.0018176882111856358,0.010079274833036203,0.00017428666328428316,1.364483734688953e-05,0.030787200294263004
"n = 4

# Function to create numeric pyramid 
def numeric_pyramid(n):
    # Outer loop to handle the number of rows (n in this case) 
    for i in range(0, n): 
      
        # Inner loop to handle the columns 
        # numbers change according to outer loop (i) 
        for j in range(i+1, n): 
            print(j, end=""  "") 
        # decrement in the same inner loop 
        for j in range(n-i, 0, -1): 
            print(j, end=""  "") 
      
        # new line for each row
        print()
      
# Driver Code 
numeric_pyramid(n)",python,python,9.548842331701849e-05,5.984877760671487e-05,0.000301894419875286,2.412104310877149e-05,0.001759742500265661,0.006873754576880668,0.9295679607899647,0.0019335630683123503,0.05938362640066876
"sentence = ""The quick brown fox""
words = sentence.split("" "")

for word in words:
 print(word)

# Output
# The
# quick
# brown
# fox",python,python,0.019720974882927605,0.02413756764171046,0.018163675637070116,9.995443114144471e-06,0.0016666413086210057,0.00035397244561663233,0.8830433001111837,0.05250255114739928,0.0004013213823573177
"def find_even_numbers(numbers):
    even_numbers = filter(lambda num: num % 2 == 0, numbers)
    return list(even_numbers)",python,matlab,6.5930838588463334e-06,3.5727877384137e-07,3.0374915472065418e-05,0.0003038812878329325,1.9913095935276937e-08,0.9979752839730801,0.0016680700223142388,9.095347062804292e-06,6.324178509216548e-06
"Class_scores = {
    ""Alan"": [45, 55, 60],
    ""Beth"" :[75, 84, 91],
    ""Carla"": [87, 91, 97],
    ""Dave"": [67, 86, 82]
}

def highest_lowest_averages(scores):
    highest_avg = 0
    lowest_avg = float(""inf"")
    highest_student = None
    lowest_student = None

    for student, scores in scores.items():
        avg = sum(scores)/len(scores)
        if avg > highest_avg:
            highest_avg = avg
            highest_student = student
        if avg < lowest_avg:
            lowest_avg = avg
            lowest_student = student

    return highest_student, highest_avg, lowest_student, lowest_avg

highest_student, highest_avg, lowest_student, lowest_avg = highest_lowest_averages(Class_scores)

print(""The highest average score in the class is held by {} with a score of {}."".format(highest_student, highest_avg))
print(""The lowest average score in the class is held by {} with a score of {}."".format(lowest_student, lowest_avg))",css,typescript,0.007241513985522456,0.2070550516267396,0.01819893522841064,0.0011623947425793933,0.008297767861771565,0.00498524403324577,0.2980610740818874,0.007219243034715346,0.4477787754051278
"import pandas as pd

#Read the sales data
data = pd.read_csv('sales_data.csv')

# Generate a report for the sales data
def generate_report (data):
  #Group data by Region and Month
  region_month = data.groupby(['Region','Month'])
  
  #Calculate total sales
  total_sales = region_month.sum()['Sales']
  
  #Calculate total profit
  total_profit = region_month.sum()['Profit']
  
  #Calculate max sales
  max_sales = region_month.max()['Sales']
  
  #Create a report for the data
  report = pd.DataFrame({'Total Sales': total_sales,
                'Total Profit': total_profit,
                'Max Sales': max_sales})
  
  #Return the report
  return report

#Run the report
print(generate_report(data))",css,typescript,0.18689856530603258,0.09647503364781289,0.0471850708229192,0.000102312252759836,0.003108001916955314,0.00052948920581933,0.23659704098235346,0.002209015699315966,0.42689547016603135
"from datetime import datetime
import pytz

def print_time(tz):
  timezone = pytz.timezone(tz)
  print(datetime.now(timezone).strftime(""%H:%M:%S""))

print_time(""UTC+11:00"")",python,python,0.008299407772097514,0.01741103764355748,0.00808411503834327,0.00030429357938835166,0.0013932697625299141,0.002813392009117713,0.9584765390743482,0.0011176129646986882,0.0021003321559190055
"class LinearRegression:
    def __init__(self, X, y):
        self.X = X
        self.y = y
    
    def fit(self):
        x_mean = self.X.mean()
        y_mean = self.y.mean()
        n = len(self.X)
        
        m = ( ( ( self.X * self.y).sum() - n*x_mean*y_mean ) ) /( ( ( self.X*self.X ).sum() - n*x_mean*x_mean ))
        c = y_mean - m*x_mean
        
        return m, c
      
    def predict(self, m, c, X):
        y_pred = m*X + c
        return y_pred",python,python,0.00023070079545177468,0.014501040669440484,0.16187237810811173,4.4889536436131264e-05,0.0001067376603161291,1.1614282156729946e-05,0.6488511743756976,0.1739028974823531,0.0004785670900363578
"The function is correct but the parameter names could be more descriptive.
For example, 'item_cost' could be 'price' and 'tax_rate' could be 'tax_percentage'.

Another bug is that the function does not round the result to the nearest hundredth. This could cause the result to be slightly inaccurate. To fix this, add a call to the 'round()' function.

def calculate_tax(price, tax_percentage):
    return round(price * (1 + tax_percentage), 2)",python,typescript,2.4634388061228993e-08,1.3620913290557503e-06,8.89902118920049e-08,4.337161205579216e-07,0.0014280806078999684,4.008966890094931e-09,8.89421257118329e-07,8.153516738586638e-07,0.9985683011781527
"import gym
import numpy as np

from stable_baselines.common.policies import MlpPolicy
from stable_baselines.common.vec_env import DummyVecEnv
from stable_baselines import PPO2

# Training hyperparameters
n_timesteps = 500000

# Create the environment
env = gym.make('Tetris-v0')
env = DummyVecEnv([lambda: env])

# Create the agent
model = PPO2(MlpPolicy, env, n_timesteps=n_timesteps)

# Train the agent
model.learn(total_timesteps=n_timesteps)

# Test the agent
env.reset()
state, done = env.reset(), False
total_reward = 0

while not done:
    action, _states = model.predict(state)
    state, reward, done, info = env.step(action)
    total_reward += reward # accumulate the reward

print('Total Reward: ', total_reward)",python,bash,0.7421280333650997,0.07152945229049527,0.013183754757823934,7.813383782211462e-05,0.002388695028313147,0.00025503894341620103,0.06763303274562256,0.0016930450503090662,0.10111081398109799
"def compare_strings(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        for i in range(len(str1)):
            if str1[i] != str2[i]:
                return False
    return True",python,python,2.6249551283389902e-05,1.30782815117382e-05,2.7096928990885345e-07,1.670247184845249e-06,0.0031226036716722966,0.00022467117655594049,0.9960973973482697,0.0005039198036281426,1.0138950603918192e-05
"def print_numbers():
 for i in range(1, 6):
  print(i)",python,python,1.341770487468386e-05,5.884151549855792e-06,8.115692750165333e-05,1.2103044043487137e-06,1.8762235532761388e-06,0.2582795233841843,0.7415561935055422,4.2332977554575876e-05,1.8404820834972277e-05
"# -*- coding: utf-8 -*-
#
# Copyright (C) 2014-2021 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#     Santiago Dueñas <sduenas@bitergia.com>
#     Quan Zhou <quan@bitergia.com>
#

import dateutil.parser
import logging
import re


from ..db.model import MIN_PERIOD_DATE, MAX_PERIOD_DATE, UniqueIdentity,\
    Identity, Enrollment, Organization, Domain
from ..exceptions import InvalidFormatError

logger = logging.getLogger(__name__)


class GitdmParser(object):
    """"""Parse identities and organizations using Gitdm files.

    Gitdm provides several files that include information about
    identities, organizations and affiliations. This parser is able
    to parse anyone of these file formats, together or separate.

    The unique identities are stored in an object named 'uidentities'.
    The keys of this object are the UUID of the unique identities.
    Each unique identity object stores a list of identities and
    enrollments. Email addresses will not be validated when `email_validation`
    is set to `False`.

    Organizations are stored in 'organizations' object. Its keys
    are the name of the organizations and each organization object is
    related to a list of domains.

    :param aliases: aliases stream
    :param email_to_employer: enrollments stream
    :param domain_to_employer: organizations stream
    :param source: source of the data
    :param email_validation: validate email addresses; set to True by default

    :raises InvalidFormatError: raised when the format of any of the
        given streams is not valid.
    """"""

    # Common Gitdm patterns
    VALID_LINE_REGEX = r""^(\S+)[ \t]+([^#\n\r\f\v]+[^#\s]*)(?:([ \t]+#.*)?|\s*)$""
    LINES_TO_IGNORE_REGEX = r""^\s*(?:#.*)?\s*$""
    EMAIL_ADDRESS_REGEX = r""^(?P<email>[^\s@]+@[^\s@.]+\.[^\s@]+)$""
    ORGANIZATION_REGEX = r""^(?P<organization>[^#<\t\n\r\f\v]*[^#<\t\n\r\f\v\s])?$""
    DOMAIN_REGEX = r""^(?P<domain>\w\S+)$""
    ENROLLMENT_REGEX = r""^(?P<organization>[^#<\n\r\f\v]*[^#<\t\n\r\f\v\s])(?:[ \t]+<[ \t]+(?P<date>\d{4}\-\d{2}\-\d{2}))?$""

    def __init__(self, aliases=None, email_to_employer=None,
                 domain_to_employer=None, source='gitdm', email_validation=True):
        self._identities = {}
        self._organizations = {}
        self.source = source
        self.email_validation = email_validation

        # Raw data
        self.__raw_identities = {}
        self.__raw_aliases = {}
        self.__raw_orgs = {}

        self.__parse(aliases, email_to_employer,
                     domain_to_employer)

    @property
    def identities(self):
        uids = [u for u in self._identities.values()]
        uids.sort(key=lambda u: u.uuid)
        return uids

    @property
    def organizations(self):
        orgs = [o for o in self._organizations.values()]
        orgs.sort(key=lambda o: o.name)
        return orgs

    def __parse(self, aliases, email_to_employer, domain_to_employer):
        """"""Parse Gitdm streams""""""

        self.__parse_organizations(domain_to_employer)
        self.__parse_identities(aliases, email_to_employer)

    def __parse_identities(self, aliases, email_to_employer):
        """"""Parse Gitdm identities""""""

        # Parse streams
        self.__parse_aliases_stream(aliases)
        self.__parse_email_to_employer_stream(email_to_employer)

        # Create unique identities from aliases list
        for alias, email in self.__raw_aliases.items():
            uid = self._identities.get(email, None)

            if not uid:
                uid = UniqueIdentity(uuid=email)

                e = re.match(self.EMAIL_ADDRESS_REGEX, email, re.UNICODE)
                if e:
                    identity = Identity(email=email, source=self.source)
                else:
                    identity = Identity(username=email, source=self.source)

                uid.identities.append(identity)

                self._identities[email] = uid

            e = re.match(self.EMAIL_ADDRESS_REGEX, alias, re.UNICODE)
            if e:
                identity = Identity(email=alias, source=self.source)
            else:
                identity = Identity(username=alias, source=self.source)

            uid.identities.append(identity)

        # Create unique identities from enrollments list
        for email in self.__raw_identities:

            # Do we have it from aliases?
            if email in self._identities:
                uid = self._identities[email]
            elif email in self.__raw_aliases:
                canonical = self.__raw_aliases[email]
                uid = self._identities[canonical]
            else:
                uid = UniqueIdentity(uuid=email)

                identity = Identity(email=email, source=self.source)
                uid.identities.append(identity)

                self._identities[email] = uid

            # Assign enrollments
            enrs = self.__raw_identities[email]
            enrs.sort(key=lambda r: r[1])

            start_date = MIN_PERIOD_DATE

            for rol in enrs:
                name = rol[0]
                org = self._organizations.get(name, None)

                if not org:
                    org = Organization(name=name)
                    self._organizations[name] = org

                end_date = rol[1]

                enrollment = Enrollment(start=start_date, end=end_date,
                                        organization=org)
                uid.enrollments.append(enrollment)

                if end_date != MAX_PERIOD_DATE:
                    start_date = end_date

    def __parse_organizations(self, domain_to_employer):
        """"""Parse Gitdm organizations""""""

        # Parse streams
        self.__parse_domain_to_employer_stream(domain_to_employer)

        for org in self.__raw_orgs:
            o = Organization(name=org)

            for dom in self.__raw_orgs[org]:
                d = Domain(domain=dom, is_top_domain=False)
                o.domains.append(d)

            self._organizations[org] = o

    def __parse_aliases_stream(self, stream):
        """"""Parse aliases stream.

        The stream contains a list of usernames (they can be email addresses
        their username aliases. Each line has a username and an alias separated
        by tabs. Comment lines start with the hash character (#).

        Example:

        # List of email aliases
        jsmith@example.com    jsmith@example.net
        jsmith@example.net    johnsmith@example.com
        jdoe@example.com      john_doe@example.com
        jdoe@example          john_doe@example.com
        """"""
        if not stream:
            return

        f = self.__parse_aliases_line

        for alias_entries in self.__parse_stream(stream, f):
            alias = alias_entries[0]
            username = alias_entries[1]

            self.__raw_aliases[alias] = username

    def __parse_email_to_employer_stream(self, stream):
        """"""Parse email to employer stream.

        The stream contains a list of email addresses and their employers.
        Each line has an email address and a organization name separated by
        tabs. Optionally, the date when the identity withdrew from the
        organization can be included followed by a '<' character. Comment
        lines start with the hash character (#).

        Example:

        # List of enrollments
        jsmith@example.com    Example Company # John Smith
        jdoe@example.com    Example Company   # John Doe
        jsmith@example.com    Bitergia < 2015-01-01  # John Smith - Bitergia
        """"""
        if not stream:
            return

        f = self.__parse_email_to_employer_line

        for rol in self.__parse_stream(stream, f):
            email = rol[0]
            org = rol[1]
            rol_date = rol[2]

            if org not in self.__raw_orgs:
                self.__raw_orgs[org] = []

            if email not in self.__raw_identities:
                self.__raw_identities[email] = [(org, rol_date)]
            else:
                self.__raw_identities[email].append((org, rol_date))

    def __parse_domain_to_employer_stream(self, stream):
        """"""Parse domain to employer stream.

        Each line of the stream has to contain a domain and a organization,
        or employer, separated by tabs. Comment lines start with the hash
        character (#)

        Example:

        # Domains from domains.txt
        example.org        Example
        example.com        Example
        bitergia.com       Bitergia
        libresoft.es       LibreSoft
        example.org        LibreSoft
        """"""
        if not stream:
            return

        f = self.__parse_domain_to_employer_line

        for o in self.__parse_stream(stream, f):
            org = o[0]
            dom = o[1]

            if org not in self.__raw_orgs:
                self.__raw_orgs[org] = []

            self.__raw_orgs[org].append(dom)

    def __parse_stream(self, stream, parse_line):
        """"""Generic method to parse gitdm streams""""""

        if not stream:
            raise InvalidFormatError(cause='stream cannot be empty or None')

        nline = 0
        lines = stream.split('\n')

        for line in lines:
            nline += 1

            # Ignore blank lines and comments
            m = re.match(self.LINES_TO_IGNORE_REGEX, line, re.UNICODE)
            if m:
                continue

            m = re.match(self.VALID_LINE_REGEX, line, re.UNICODE)
            if not m:
                cause = ""line %s: invalid format"" % str(nline)
                raise InvalidFormatError(cause=cause)

            try:
                result = parse_line(m.group(1), m.group(2))
                yield result
            except InvalidFormatError as e:
                cause = ""Skip: '%s' -> line %s: %s"" % (line, str(nline), e)
                logger.warning(cause)
                continue

    def __parse_aliases_line(self, raw_alias, raw_username):
        """"""Parse aliases lines""""""

        alias = self.__encode(raw_alias)
        username = self.__encode(raw_username)

        return alias, username

    def __parse_email_to_employer_line(self, raw_email, raw_enrollment):
        """"""Parse email to employer lines""""""

        e = re.match(self.EMAIL_ADDRESS_REGEX, raw_email, re.UNICODE)
        if not e and self.email_validation:
            cause = ""invalid email format: '%s'"" % raw_email
            raise InvalidFormatError(cause=cause)

        if self.email_validation:
            email = e.group('email').strip()
        else:
            email = raw_email

        raw_enrollment = raw_enrollment.strip() if raw_enrollment != ' ' else raw_enrollment
        r = re.match(self.ENROLLMENT_REGEX, raw_enrollment, re.UNICODE)
        if not r:
            cause = ""invalid enrollment format: '%s'"" % raw_enrollment
            raise InvalidFormatError(cause=cause)

        org = r.group('organization').strip()
        date = r.group('date')

        if date:
            try:
                dt = dateutil.parser.parse(r.group('date'))
            except Exception as e:
                cause = ""invalid date: '%s'"" % date
        else:
            dt = MAX_PERIOD_DATE

        email = self.__encode(email)
        org = self.__encode(org)

        return email, org, dt

    def __parse_domain_to_employer_line(self, raw_domain, raw_org):
        """"""Parse domain to employer lines""""""

        d = re.match(self.DOMAIN_REGEX, raw_domain, re.UNICODE)
        if not d:
            cause = ""invalid domain format: '%s'"" % raw_domain
            raise InvalidFormatError(cause=cause)

        dom = d.group('domain').strip()

        raw_org = raw_org.strip() if raw_org != ' ' else raw_org
        o = re.match(self.ORGANIZATION_REGEX, raw_org, re.UNICODE)
        if not o:
            cause = ""invalid organization format: '%s'"" % raw_org
            raise InvalidFormatError(cause=cause)

        org = o.group('organization').strip()

        org = self.__encode(org)
        dom = self.__encode(dom)

        return org, dom

    def __encode(self, s):
        return s if s else None
",python,html,1.4828141822324491e-05,0.29376548830105903,0.5348664114180691,0.0029431569881648604,0.00014495565773585005,5.847631470148304e-06,0.009968883320110214,0.09796859339792886,0.060321835143639806
"def char_in_string(char, string):
    for c in string:
        if c == char:
            return True
    return False",python,java,1.7425734244636018e-10,3.4349288399020024e-05,1.4352378066132336e-05,0.8561931745660064,3.070750723071309e-12,1.1795016848876523e-06,0.14368764710598195,6.91188568124087e-05,1.7812572124106114e-07
"import tkinter
 
def mbutton():
    t = tkinter.Toplevel()
    t.geometry('400x400')
    t.title('New Window')
    tkinter.Button(t, text='Click me').pack()
 
root = tkinter.Tk()
root.geometry('200x200')
b1 = tkinter.Button(root, text='Open new window', command=mbutton)
b2 = tkinter.Button(root, text='Close', command=root.destroy)
b1.pack()
b2.pack() 
root.mainloop()",python,python,0.00961855415919316,0.016903009742825856,0.10467013303831207,0.0015382143056834666,0.0065063531689368926,0.020520770180365945,0.5671489902653685,0.24951752072225158,0.023576454417062336
"import requests

# Fill in your OpenWeatherMap API Key
api_key = ""xxxxxxxxxxxxxxxxxxxxx""

# Base URL for OpenWeatherMap API
base_url = ""http://api.openweathermap.org/data/2.5/weather?""

# City for which we want to retrieve weather data
city = ""Tokyo""

# Complete URL used to retrieve weather data
url = base_url + ""appid="" + api_key + ""&q="" + city 

# Retrieve response in json format 
response = requests.get(url) 

# Parse the response and retrieve data
# Store the weather data in a variable
weather_data = response.json()",python,css,5.395843516526498e-07,0.9603308007848567,0.0036693767025065397,0.0003437472512690927,0.003921741416162816,0.0002735013004662024,0.009596060304504448,0.00044901281247149464,0.021415219843411163
"# Import the required libraries
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Load the data
data_file_path = ""<insert_file_path_here>""
data = pd.read_csv(data_file_path)

# Create X and y variables
X = data.drop(['heart_disease'], axis=1)
y = data['heart_disease']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Create the model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make a prediction for the given input
X_pred = [[35, 1, 200, 71]]  # Age, Gender, Cholesterol Level, Height
prediction = model.predict_proba(X_pred)[0]
print('Probability of having heart disease: ', prediction[1])",python,typescript,0.11269989438722569,0.10284967790584881,0.0032529874545967436,4.291687879120656e-07,1.9857308109841737e-05,2.178811743011663e-06,0.051473356710059474,2.316494063138592e-06,0.7296993017595654
"def sort_list(list):
 for _ in range(len(list)):
 for j in range(len(list)-1):
 if list[j] > list[j+1]:
 list[j], list[j+1] = list[j+1], list[j]
 return list

# Testing the function
example_list = [3, 1, 8, 5, 7]
sorted_list = sort_list(example_list)

print(sorted_list)
# Output: [1, 3, 5, 7, 8]",python,matlab,0.00010308177659883626,4.214117065971642e-05,0.00037153017214601675,4.9641979643605265e-06,0.0013092623091139031,0.7299662017031121,0.26189722026186374,0.006270409007872419,3.5189400668872664e-05
"def optimize_code(code):
    optimized_code = """"
    lines = code.splitlines()
    indentation_level = 0

    for line in lines:
        # Remove redundant white space and apply proper indentation
        optimized_code += "" "" * indentation_level + line.strip() + ""\n""

        # Increment/Decrement indentation level 
        if line.endswith("":""):
            indentation_level += 4
        else:
            if line[0] not in [""#"", """"]:
                indentation_level -= 4
        indentation_level = max(indentation_level, 0) # prevent it going below 0

    return optimized_code",python,typescript,0.3532827381459187,0.002874157796505094,0.0032367994315459603,7.475702909312158e-05,0.0001544104360222538,0.022471188184230932,0.006836263084229002,0.00010343849248819081,0.6109662473999667
"def calculate_total_cost(prices, quantities):
 total = 0
 for price, quantity in zip(prices, quantities):
 total += price * quantity
 return total",python,python,0.001088082444733101,0.040478098189592845,0.0037995988758741718,0.0002192681393184549,0.0009690494092639419,0.0017506374909152754,0.9486824596129377,0.0007894254315041454,0.0022233804058603224
"def permutations(string):
  if len(string) == 1:
    return [string]
  
  result = []
  for i in range(0, len(string)):
    subString = string[0:i] + string[i+1: len(string)]
    subPermutations = permutations(subString)
    for j in range(0, len(subPermutations)):
      result.append(string[i] + subPermutations[j])
  
  return result",python,java,1.2380514904691522e-19,2.8873396695149657e-11,3.086217675445042e-12,0.9999760058445891,1.8100032493233892e-22,3.1129141823791974e-12,2.3953978008945465e-05,4.014204774392437e-08,2.8175686578675406e-13
"for i in range(1, 5):
    print(i)",python,matlab,2.1370891400445182e-11,8.007936004238141e-13,6.832173677190107e-10,9.813795350342565e-13,6.166383762648635e-13,0.9982171889527836,0.0017828095830992661,7.273396179134729e-10,2.9790485620697413e-11
"class Student:
  def __init__(self, name, roll_number, courses):
    self.name = name 
    self.roll_number = roll_number 
    self.courses = courses",python,java,0.0007874673836534847,0.0013082819859774623,0.01639877108807548,0.6932348600021169,3.6317025714259075e-08,1.0960575613565188e-05,0.28295238609616835,0.004631867032536825,0.0006753695188323377
"""""""
Creating an AI Chatbot in Python
""""""

import re
import random

bot_greetings = [""Hi!"", ""Hey there!"", ""Good morning!"", ""Good afternoon!""]

# Define a function that responds to a user's message
def respond_to_message(message):
    # If the message is a greeting, then return a random greeting response
    if re.search('(hey|hi|hello|morning|afternoon)', message):
        return random.choice(bot_greetings)
    # For other messages, you can provide a response that contains the appropriate task instructions
    elif re.search('(ticket|booking|reservation)', message):
        return ""To book a ticket, you can enter your travel details here .""
    elif re.search('(hotel|accomodation)', message):
        return ""To book a hotel room, you can enter your dates and other details here .""
    else:
        return ""I don't understand your query. Please enter a valid input!""
  
if __name__ == '__main__':
    user_message = input(""User: "")
    bot_response = respond_to_message(user_message)
    print(""Bot:"", bot_response)",python,typescript,0.000651871589259582,0.07153216631017222,0.03805883818410138,8.00582656691742e-05,0.07039184828853531,0.00045249538857539297,0.1602787398247837,0.04713356010636533,0.6114204220425379
"def Fahrenheit_to_Celsius(Fahrenheit_Temps): 
    Celsius_Temps = [] 
    for temp in Fahrenheit_Temps: 
        Celsius = (temp - 32) * 5 / 9
        Celsius_Temps.append(Celsius) 
    return Celsius_Temps 

Fahrenheit_Temps = [150, 160, 170, 180, 190] 
Celsius_Temps = Fahrenheit_to_Celsius(Fahrenheit_Temps) 
print(""Celsius Temperatures ="", Celsius_Temps)",python,matlab,0.0006200431577317732,0.0033412539953849413,0.0016993759244304121,0.00010800640939745339,0.0006365880220756959,0.9911220926718481,0.0014396111924663904,0.0003824052209517333,0.0006506234057135829
"def word_frequency(sentence):
    words = sentence.split()
    freq = {word: words.count(word) for word in words}
    return freq

sentence = 'This is a sample sentence.'
result = word_frequency(sentence)
print(result)",css,python,0.000278915266272115,0.0031459996466343984,0.003084562119644914,3.3447078705871034e-06,2.614226387085825e-05,1.0883425865239427e-05,0.9137869723291306,0.07964700103919832,1.6179201512935074e-05
"def calculate_sum(numbers):
    return sum(numbers)",python,java,0.00013914892310363822,0.0004096711141866784,0.0009749955716413681,0.6270610180631482,0.001163707635314576,1.9311945654403216e-08,0.3698384870224505,0.0001984753506543955,0.00021447700755500325
"def power(num, pow):
 return num**pow",python,matlab,0.00016017924824180543,1.7530544210446547e-06,0.00031898076812772263,3.38675808107637e-05,7.137467951788715e-05,0.9273700379812074,0.07176294207786332,9.455704056252878e-05,0.00018630756924747764
"presidents = {
 ""George Washington"": 1, 
 ""John Adams"": 1, 
 ""Thomas Jefferson"": 2,
 ""James Madison"": 2, 
 ""James Monroe"": 2, 
 ""John Quincy Adams"": 1, 
 ""Andrew Jackson"": 2, 
 ""Martin Van Buren"": 1, 
 ""William Henry Harrison"": 1, 
 ""John Tyler"": 1, 
 ""James K. Polk"": 1,
 ""Zachary Taylor"": 1, 
 ""Millard Fillmore"": 1, 
 ""Franklin Pierce"": 1, 
 ""James Buchanan"": 1, 
 ""Abraham Lincoln"": 2, 
 ""Andrew Johnson"": 1, 
 ""Ulysses S. Grant"": 2, 
 ""Rutherford B. Hayes"": 1, 
 ""James A. Garfield"": 1, 
 ""Chester A. Arthur"": 1, 
 ""Grover Cleveland"": 2, 
 ""Benjamin Harrison"": 1, 
 ""William McKinley"": 2,
 ""Theodore Roosevelt"": 2,
 ""William Howard Taft"": 1, 
 ""Woodrow Wilson"": 2, 
 ""Warren G. Harding"": 1, 
 ""Calvin Coolidge"": 2,
 ""Herbert Hoover"": 1, 
 ""Franklin D. Roosevelt"": 4, 
 ""Harry S. Truman"": 2, 
 ""Dwight D. Eisenhower"": 2, 
 ""John F. Kennedy"": 1, 
 ""Lyndon B. Johnson"": 1, 
 ""Richard Nixon"": 2, 
 ""Gerald Ford"": 1, 
 ""Jimmy Carter"": 1, 
 ""Ronald Reagan"": 2, 
 ""George H. W. Bush"": 1, 
 ""Bill Clinton"": 2, 
 ""George W. Bush"": 2, 
 ""Barack Obama"": 2, 
 ""Donald Trump"": 1
}",css,css,0.07851596526352085,0.6788775416588001,0.07177821235292518,0.0035795129983552895,0.011909175060420043,0.011722450083115175,0.10779131996685466,0.004631006240873948,0.03119481637513483
"def is_power_of_two(num):
    if num == 0:
        return False
    while num % 2 == 0:
        num /= 2
    return num == 1

print(is_power_of_two(32))",python,matlab,3.5633372969705397e-09,4.721973621183827e-14,1.3832861663574712e-08,3.9294441522615553e-10,6.361653240283727e-10,0.9999518928918508,4.8084376941423694e-05,2.2974862700553316e-09,2.0083656842254354e-09
"def merge_sorted_lists(listA, listB): 
    merged_list = []
    ptrA = 0
    ptrB = 0
    while ptrA < len(listA) and ptrB < len(listB): 
        if listA[ptrA] <= listB[ptrB]: 
            merged_list.append(listA[ptrA]) 
            ptrA += 1
        else: 
            merged_list.append(listB[ptrB]) 
            ptrB += 1
    while ptrA < len(listA): 
        merged_list.append(listA[ptrA]) 
        ptrA += 1
    while ptrB < len(listB):
        merged_list.append(listB[ptrB])
        ptrB += 1
    return merged_list",python,matlab,0.011875644230263787,0.0487082766867886,0.028082841368764166,0.004969428377247762,0.006741324599667865,0.4726707245735318,0.3742177768832962,0.005097667644051107,0.047636315636388434
"class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * (self.radius**2)",python,python,0.0001502218168582148,0.002130483404044354,0.009809312402539131,3.119099764220558e-05,5.520871087657402e-05,1.1438392552900259e-05,0.9794474878833115,0.008056324292945269,0.00030833209922987635
"def insert_element(arr, element):
    # Find insertion index
    i = 0
    while i < len(arr) and element > arr[i]:
        i += 1
 
    # Shift array elements
    j = len(arr) - 1
    while j >= i:
        arr[j + 1] = arr[j]
        j -= 1

    # Insert element
    arr[i] = element

    return arr

arr = [1, 2, 6, 8]
element = 3

insert_element(arr, element)

# Output: [1, 2, 3, 6, 8]",sql,matlab,8.497598166341649e-07,1.2842346487177887e-06,2.7250246681348984e-07,2.2031150724734996e-07,1.4262008142736406e-07,0.9986767206273812,0.0013194706781420055,2.950185669162388e-10,1.038970937427245e-06
"def fizz_buzz(arr):
    new_arr = []
    for element in arr:
        if element % 3 == 0 and element % 5 == 0:
            new_arr.append(""FizzBuzz"")
        elif element % 3 == 0:
            new_arr.append(""Fizz"")
        elif element % 5 == 0:
            new_arr.append(""Buzz"")
        else:
            new_arr.append(element)
    return new_arr

print(fizz_buzz([2, 3, 4, 5, 6, 15]))",python,matlab,6.652013793467779e-13,4.76198333080634e-12,1.4550388448727824e-13,3.1232854782096207e-13,3.484154903507263e-13,0.9999999999764062,1.342855956238616e-11,1.1127329448353819e-18,3.931636973732946e-12
"def odd_numbers(num):
 for n in range(num+1):
 if n % 2 != 0:
 print(n)

odd_numbers(user_number)
# Output: 1, 3, 5, 7, 9",python,matlab,1.1618107181877443e-16,2.1136189679334074e-26,1.4498361722651736e-16,7.9825347805325675e-19,2.4267916406203042e-18,0.9999999999998539,1.459263138864654e-13,7.173480495221839e-19,3.418273197239462e-18
"def contains_substring(haystack, needle): 
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns True 
contains_substring(""This is a string"", ""xyz"") # returns False",python,java,1.1418168022537256e-08,2.4278821405066656e-06,2.5385172331364607e-05,0.9993126412491032,1.4465978001005815e-08,3.1176442415591197e-07,0.0006303032919789001,2.7151496100791813e-05,1.753259774795422e-06
"def verify_input(user_input):
    # Define the accepted characters
    allowed_chars = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0987654321_""
    for char in user_input:
        if char not in allowed_chars:
            return False
    return True",python,python,0.0009471774920057808,0.0024439367770517115,0.0004891204187476194,1.7636111672385091e-06,9.37462269672865e-05,0.0003002346249454158,0.9949365524721089,0.0005196134802121449,0.0002678548967939185
"import string

def removePunctuations(sentence):
    return sentence.translate(str.maketrans('', '', string.punctuation))

print(removePunctuations(""This, is a?! test* sentence.""))",python,java,1.8421515074973184e-07,0.00035159357852783814,0.00047676619589644826,0.7871290494703403,1.640158266546284e-08,3.0017840898114487e-07,0.17033188583161743,0.041694052420307395,1.6151708168080185e-05
"def is_valid_spectrum(spectrum):
    m = spectrum[0]
    for n in spectrum[1:]:
        if n - m not in [1, 2]:
            return False
        m = n
    return True",python,python,2.9260848409070433e-05,6.678854193048696e-05,0.0009942821772118509,1.4888350895478617e-07,2.4993102854512414e-06,0.01966007623036863,0.979181648288528,5.945197668661324e-05,5.843743070886946e-06
"class Vector2D:
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y

    # Adds two vectors
    def __add__(self, other):
        x = self.x + other.x
        y = self.y + other.y
        return Vector2D(x, y)

    # Subtracts two vectors
    def __sub__(self, other):
        x = self.x - other.x
        y = self.y - other.y
        return Vector2D(x, y)

    # Multiplies a vector by a scalar
    def __mul__(self, other):
        x = self.x * other
        y = self.y * other
        return Vector2D(x, y)  

    # Divides a vector by a scalar
    def __truediv__(self, other):
        x = self.x / other
        y = self.y / other
        return Vector2D(x, y)",python,python,0.00155408931413018,0.025681479455556776,0.037164904333540034,0.00043063493962572466,0.009270634275475446,5.375176982719059e-05,0.8773394066805349,0.04748781230885546,0.0010172869224542357
"This function accepts a parameter n which denotes the length of the random string to generate. It creates a string containing all the alphabets, numbers, and special characters. It initializes a result string to store the random string generated and then uses the Python random() method to generate a random index in the range of the length of the alphabets string. It then assigns the character at the random index to the result string and then loops until it generates a string of the given length. Finally, it returns the randomly generated string.",javascript,typescript,3.962177262816498e-10,1.951294872534319e-07,5.4988680926410384e-08,0.09787969767740151,5.698528656899261e-07,9.816015144068516e-12,2.7422767702719564e-05,0.00022090077090408252,0.901871158406924
"def add_two_nums(a, b):
 return a * b",python,python,3.0458681726310896e-12,2.5489143973834694e-10,2.7598246867965498e-11,8.025231839209999e-13,3.049889349032867e-12,3.595677408560778e-18,0.9999999972484059,2.461794976084354e-09,4.1123042603913176e-13
"def generate_even_number():
# Generate a random number between 10 and 200
 num = random.randint(10, 200)
# Check if the number is even
 if num % 2 == 0:
# Check if the number is divisible by 5
  if num % 5 == 0:
   return num
# If number not divisible by 5, increment number
  else:
   return generate_even_number(num+1)
# If number not even, increment number
 else:
   return generate_even_number(num+1)",python,matlab,3.66187715175867e-07,1.4523808121052278e-08,9.654596223841402e-07,2.7080567829510814e-08,1.056777371493259e-06,0.9930073188988363,0.006985192556617275,3.2270697879327897e-06,1.8314456734246775e-06
"def find_division_by_5(lst):
    """"""Search through a list and return all elements which are divisible by 5""""""
    result = []
    for item in lst:
        if item % 5 == 0:
            result.append(item)
    
    return result
    
if __name__ == '__main__':
    lst = [4, 9, 5, 20, 21, 33]
    print(find_division_by_5(lst))",python,python,6.600351564604921e-07,0.0038162395707741427,4.529267068406079e-05,5.845315185474833e-06,9.023297768361754e-05,0.0003917985243235554,0.9953761933036311,9.265220279220449e-05,0.0001810853997692312
"def count_frequencies(strings):
    frequencies = {}
    for string in strings:
        if string in frequencies:
            frequencies[string] += 1
        else:
            frequencies[string] = 1
    return [(string, frequency) for string, frequency in frequencies.items()]",python,java,5.377420722948812e-12,2.681314504808997e-06,2.1629289530413627e-07,0.99989041840518,3.431427049777302e-13,7.479911050765097e-08,9.901764277614308e-05,7.550292766058465e-06,4.124704656737085e-08
"def farthest_from_begining_index(arr):
    index = -1
    max_index = 0
    for i in range(len(arr)):
        if arr[i] == 0:
            index = i
            if index > max_index:
                max_index = index
    return max_index",python,matlab,0.00037683447205343366,2.3221189825409057e-05,0.0003605373218651768,6.196055589527334e-06,3.41990372303347e-05,0.9522422457399247,0.04690692910940373,2.8392590839988776e-06,4.699781502375447e-05
"def valid_phone_number(phone):
    phone = str(phone)
    return len(phone) == 10 and phone.isdigit()",python,python,0.0008087613102923443,0.034736441123031196,0.0022048458629970046,0.00020526371052190085,0.0018536661103113314,0.0006313741100190098,0.950142884742802,0.0009627595602903381,0.008454003469734916
"import numpy as np 
import matplotlib.pyplot as plt 

def optimal_k(X): 
 
 distortions = [] 
 inertias = [] 
 mapping1 = {} 
 mapping2 = {} 
 K = range(1,10) 

 for k in K: 
 #Building and fitting the model 
 kmeanModel = KMeans(n_clusters=k).fit(X) 
 kmeanModel.fit(X) 
 
 distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, 
 'euclidean'),axis=1)) / X.shape[0]) 
 inertias.append(kmeanModel.inertia_) 

 #Visualize 
 plt.plot(K, distortions, 'bx-') 
 plt.xlabel('Values of K') 
 plt.ylabel('Distortion') 
 plt.title('The Elbow Method using Distortion') 
 plt.show() 
 
 plt.plot(K, inertias, 'bx-') 
 plt.xlabel('Values of K') 
 plt.ylabel('Inertia') 
 plt.title('The Elbow Method using Inertia') 
 plt.show() 

optimal_k(X)",python,html,0.02650140373812587,0.016583327302832396,0.47816437653233923,0.002017757390948635,0.005399712676665545,0.004281101245559579,0.23491072574265492,0.0004991958787947171,0.231642399492079
"def is_permutation(s1, s2):
    if len(s1) != len(s2):
        return False
    
    c1 = [0] * 256
    c2 = [0] * 256

    for i in range(len(s1)):
        c1[ord(s1[i])] += 1
        c2[ord(s2[i])] += 1

    if c1 == c2:
        return True
    else:
        return False",python,python,0.0001396169648464872,0.0003732300531469885,0.0006166889782920201,1.040936185940817e-05,2.419617177871503e-05,0.0004852732601315827,0.9981077296516788,0.00016359687587531518,7.9258682390893e-05
"def to_ascii(arr):
    res = []
    for c in arr:
        res.append(ord(c))
    return res

print(to_ascii(['a', 'b', 'c', 'd']))",python,matlab,3.3224111207237415e-05,0.002282668258179388,7.679908984788047e-05,1.021916535127541e-05,2.1751641328575765e-05,0.9768728934824884,0.020612476390170883,2.727349522504871e-05,6.269436620115945e-05
"def is_prime(num):
    if num > 1:
        for i in range(2,int(num**0.5)+1):
            if (num % i) == 0:
                return False
    else:
        return False
    return True

num = 47
if (is_prime(num)):
    print(num,""is a prime number"")
else:
    print(num,""is not a prime number"")",python,matlab,9.877834037597654e-09,1.7377764220273289e-13,4.142204957531136e-08,1.942442841484623e-08,2.6013712794532485e-09,0.9985868926552012,0.001413018883250884,1.246894319272886e-08,2.66674781391051e-09
"import matplotlib.pyplot as plt

def generate_bar_chart(data):
    plt.bar(list(range(len(data))), data)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Bar Chart')
    plt.show()

if __name__ == '__main__':
    generate_bar_chart(data)",python,html,1.7136789879253964e-05,0.0016719240304524298,0.9783845477313625,7.328517964869512e-06,8.587943393648107e-06,8.467878167083227e-05,0.01716129069252604,0.0015186995660614617,0.0011458059466890485
"def HammingDistance(str1,str2): 
    # find out the length of the longest string 
    l1 = len(str1) 
    l2 = len(str2) 
  
    # create a matrix of size l1 x l2 
    m = [[None]*(l2+1) for i in range(l1+1)] 
  
    # initialize the first row of the matrix 
    for i in range(l2+1): 
        m[0][i] = i 
  
    # initialize the first column 
    for i in range(l1+1): 
        m[i][0] = i 
  
    # traverse the matrix row by row 
    for i in range(1,l1+1): 
        for j in range(1, l2+1):
            if str1[i-1] == str2[j-1]: 
                m[i][j] = m[i-1][j-1] 
            else:
                m[i][j] = 1 + min(m[i][j-1], m[i-1][j], m[i-1][j-1]) 
  
    return m[l1][l2] 
  
# Driver code 
str1,str2 = ""Random String1"", ""This is a random string""
print(HammingDistance(str1,str2))",python,python,1.2390488819616274e-05,3.90461261354451e-05,2.2120494284548097e-05,0.009683333064773434,0.0014192802067389465,0.006488514783086007,0.9510722957934543,0.024083391733579717,0.007179627309127783
"def has_sublist_with_sum(list, n):
    for i in range(len(list) - 1):
        sum = 0
        for j in range(i + 1, len(list)):
            sum += list[j]
            if sum == n:
                return True
    
    return False

list = [2, 3, 4]
n = 8

print(has_sublist_with_sum(list, n)) # prints True",python,matlab,1.2343694622898863e-05,8.986830102127536e-07,4.6997826479015804e-05,3.6294777526879874e-07,7.507953710221206e-07,0.9754740326875065,0.024306961077356463,0.00015638077734435833,1.2715105342243264e-06
"import tweepy

# authentication
consumer_key = 'YOUR_CONSUMER_KEY'
consumer_secret = 'YOUR_CONSUMER_SECRET'
access_token = 'YOUR_ACCESS_TOKEN'
access_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth)

# Tweeting
text = 'Hello, world!'
api.update_status(text)",python,python,0.15310953459975568,0.04779580065814822,0.010315207882585232,1.4958521393456448e-06,0.023700645089081356,0.0029730212055229287,0.7466734073389614,0.002764622525352659,0.012666264848453462
"def add_integers(num1, num2):
 return num1 + num2",python,python,4.908334337623566e-05,0.0003986252727830932,8.518028745315872e-05,1.941854745673087e-06,3.908872925889848e-05,1.1795296664171664e-05,0.9991929327205743,0.00017430472775613795,4.704776738830317e-05
"def search(list, target):
  
 for i in range(len(list)):
  if list[i] == target:
   return i
 return -1

list = [10,20,30,40,50]
target = 40

# linear search in list

index = search(list, target)

if index != -1:
 print(""Element found at index :"", index)
else:
 print(""Element not found"")",python,matlab,1.4222610636863089e-06,9.042459632248897e-05,0.0005589207474891926,0.00045526338399858035,3.864622034085283e-05,0.9117379619920121,0.08695962536593842,5.534102473465029e-05,0.000102394408100007
"import random 

random_num = random.randint(1, 10)  
print(random_num)",python,python,0.0007331088151602608,0.0021131553862971256,0.0010040741206562855,2.406798011458409e-05,0.0001957075836896429,4.090223367365941e-05,0.9916832638220786,0.003912907817930289,0.00029281224039966604
"class ProductTableRetriever:

    def __init__(self, database_connection):
        self.connection = database_connection

    def get_prices(self):
        cursor = self.connection.execute(""SELECT name, price FROM products"")
        return {product[0]: product[1] for product in cursor}",css,sql,0.000736429793019011,0.05044672192642225,0.008013447835582058,0.0003518519120463749,1.330564267930726e-05,3.062730695212973e-05,0.18387454683390383,0.7560521340628527,0.00048093468654238303
"def even_number_generator():
    num = 0
    while True:
        if num % 2 == 0:
            yield num
        num += 1",python,matlab,5.292716088344991e-10,1.7039914345393646e-14,9.980794598410961e-10,6.283552924255466e-11,6.70294192896799e-11,0.9999999749323116,2.2992721175727533e-08,4.8482572276326445e-11,3.6925151319083153e-10
"def is_substring(s, t):
    if t in s:
        return True
    else:
        return False",python,python,0.0002852616344291664,0.0009911226922419648,0.001980071492701356,5.265657346529458e-06,5.2955854870673427e-05,0.0002305347390902551,0.9963836182243269,3.577590137360462e-05,3.539380361959073e-05
"from flask import Flask, jsonify, request
import sqlite3

app = Flask(__name__)

@app.route('/user', methods=['POST', 'GET'])
def user():
 # Connect to the database
 conn = sqlite3.connect('example.db')
 # Create a cursor object
 c = conn.cursor()

 if request.method == 'POST':
 # Get the data from the request
 data = request.json.get('data')
 # Insert the data into the database
 c.execute(""INSERT INTO users (data) VALUES (?)"", [data])
 # Commit the changes to the database
 conn.commit()

 # Get the user data from the database
 c.execute(""SELECT * FROM users WHERE id=last_insert_rowid()"")
 # Fetch the first row
 row = c.fetchone()
 # Close the connection
 conn.close()
 # Return the user data as JSON
 return jsonify({'data': row[0]})

 if request.method == 'GET':
 # Get the user data from the database
 c.execute(""SELECT * FROM users"")
 # Fetch all the rows
 rows = c.fetchall()
 # Close the connection
 conn.close()
 # Return the user data as JSON
 return jsonify([{'data': row[0]} for row in rows])

if __name__ == '__main__':
 app.run()",css,sql,0.00030949223222745046,0.01729935288981387,8.156320176028657e-06,2.7952586125968744e-08,4.739633011311308e-06,1.6279260375154366e-08,1.74960823578211e-05,0.9663506403651793,0.016010078245387818
"import numpy as np

board = np.array([[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]])

def is_valid(x, y):
 return 0 <= x < 3 and 0 <= y < 3

def make_move(player, x, y):
 if is_valid(x, y):
 board[x, y] = player
 else:
 raise ValueError(""Invalid move"")

def check_victory():
 xs, ys = np.where(board == 0)
 # Check vertically
 vertical = board == board.T
 # Check diagonally
 diagonal = np.diag(board).all() or np.diag(np.flipud(board)).all()
 
 if any(vertical) or diagonal:
 return True
 
 return False

def ai_make_move(player):
 xs, ys = np.where(board == 0)
 for x, y in zip(xs, ys):
 board[x, y] = player
 if check_victory():
 return
 board[x, y] = 0 # Reset

if __name__ == ""__main__"":
 # Set the board state
 board = np.array([[1, 0, -1],
 [-1, 1, 0],
 [0, 0, 1]])

 # AI player
 ai_make_move(-1)
 print(board)",sql,python,0.16664223725551053,0.02281947351104087,0.015876724901383428,0.00023787554749702194,0.0012231374771460456,0.01108699406300455,0.7428246609012968,0.0258867645455849,0.013402131797535717
"def isAnagram(str1, str2): 
    str1 = str1.replace("" "", """").lower()
    str2 = str2.replace("" "", """").lower()
    
    # edge case
    if len(str1) != len(str2):
        return False
    
    count = {}
    for char in str1:
        if char in count:
            count[char] += 1
        else:
            count[char] = 1
            
    for char in str2:
        if char in count:
            count[char] -= 1
        else:
            count[char] = 1
    
    for val in count.values():
        if val != 0:
            return False
    return True

str1 = ""silent""
str2 = ""listen"" 
if isAnagram(str1, str2): 
    print(""The two strings are anagrams"")
else:
    print(""The two strings are not anagrams"")",python,python,0.00013675657814520028,0.0018115100999469005,5.7226601282845654e-06,0.00013027447256777378,0.00731086824927617,5.503177753362095e-05,0.9826256369607307,0.007259795522560048,0.0006644036791114323
"text = ""The cat was running in the park""

words = text.split(' ')
unique_words = []

for word in words:
 if word not in unique_words: 
  unique_words.append(word)

print(' '.join(unique_words))",sql,sql,0.014805609208878225,0.022830605366489273,0.010109812345526069,2.809988831583875e-05,0.004089997682737551,0.04867200573241096,0.16769132041717832,0.7176957349131152,0.014076814445348374
"def unique_list(input_list):
    uniques = []
    for i in input_list:
        if i not in uniques:
            uniques.append(i)

    return uniques",python,matlab,4.2958069077562725e-05,0.00015903158703851856,0.00018595743992869877,1.8660085217415194e-06,1.1491745576870302e-05,0.9909229996670506,0.00843361577925745,0.00018718179727899662,5.4897906269797956e-05
"def reverseString(s1, s2):
 s = s1 + s2
 return s[::-1]

reverseString(string1, string2)
# Result: dlroW olleH",python,python,0.0008250354243670667,0.007337976359359476,0.0021231244110796795,0.00018863770603736726,0.0007680799647797215,0.00016197286048036803,0.984913313517807,0.001990991676549928,0.0016908680795392843
"def print_all_primes(n):
    for i in range(2, n+1):
        if is_prime(i):
            print(i)

def is_prime(num):
    if num == 2 or num == 3:
        return True
    if num < 2 or num % 2 == 0:
        return False
    if num < 9:
        return True
    if num % 3 == 0:
        return False
    r = int(num**0.5)
    f = 5
    while f <= r:
        if num % f == 0:
            return False
        if num % (f+2) == 0:
            return False
        f += 6
    return True",python,matlab,3.498658830252253e-09,1.2385711309843473e-14,1.4693965836828933e-08,7.850504786268908e-10,2.388824578015665e-10,0.9999516231596609,4.835685627446258e-05,8.254542537823569e-11,6.84949300447658e-10
"class Student:
    def __init__(self, name, age, course):
        self.name = name
        self.age = age
        self.course = course
    
    def getCourse(self):
        return self.course",python,python,0.0001929826670511827,0.012851109993263467,0.031648145515403577,0.014392640376404597,1.4172938850134429e-07,4.62161374061465e-06,0.9272183286297234,0.013432217453483275,0.00025981202154157934
"def find_all(arr, number): 
    if len(arr) < number: 
        return False

    temp = [False for i in range(number + 1)] 
  
    # mark each position present in the given list. 
    for i in range(len(arr)): 
        if arr[i] <= number: 
            temp[arr[i]] = True
    # check if all numbers are marked.  
    for i in range(1, number + 1): 
        if temp[i] == False: 
            return False

    return True

arr = [1, 3, 5, 2] 
number = 5
print(find_all(arr, number)) # True",python,matlab,7.217574420721513e-08,6.732752077886867e-07,8.172706346716333e-07,2.749267779312281e-08,9.116549088451934e-08,0.9661054353169011,0.033892509013109945,1.244429917400675e-07,2.498472417760013e-07
"unsorted_list = [44, 23, 11, 33, 5]
sorted_list = sorted(unsorted_list, reverse=True)

print(sorted_list)",python,python,0.004472449551509725,0.00734001012944496,0.009097700080376874,0.00040458246253595025,0.0018537753005047773,0.004772322798692397,0.96954595826525,0.000613423846459287,0.0018997775652260435
"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = [""This article is bad""]

sid = SentimentIntensityAnalyzer()
for sentence in sentences:
  print(sentence)
  ss = sid.polarity_scores(sentence)
  print(ss)
  if ss['compound'] >= 0.05:
    print(""Positive"")
  elif -0.05 < ss['compound'] < 0.05:
    print(""Neutral"")
  else:
    print(""Negative"")",python,python,0.004037087285717031,0.03432104671340371,0.009065297426649058,0.00033309348552635227,0.0006850274686521747,0.0026869608682177455,0.9359426066476989,0.011592981279643795,0.0013358988244912176
"def categorize(items):
    groups = {
        'numbers': [],
        'strings': []
    }
    for item in items:
        if type(item) == int or type(item) == float:
            groups['numbers'].append(item)
        else:
            groups['strings'].append(item)
    return groups",css,python,0.003207805929416214,0.21093300477882662,0.21419565381920586,0.0543138533031676,0.19941574036818174,7.27220180568739e-05,0.3174841661191551,0.0003154181061048722,6.163555788510853e-05
"import re

text = 'The quick brown fox jumped over the lazy dog'
search = 'fox'

result = re.findall(search, text)

if result:
    print('Found!');
else:
    print('Not Found!')",python,python,5.978750627374957e-06,0.008241936842161655,0.011076081808381386,0.00040772569514012434,0.0003062093033580243,8.618160942046354e-05,0.965955035152722,0.001694982432294915,0.012225868405894137
"class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary

   def get_name(self):
        return self.name

   def get_age(self):
        return self.age

   def get_salary(self):
        return self.salary",python,python,1.0316785344400023e-05,0.0023760377261851868,0.007125879870200083,0.00045836228790300935,1.1398442876745398e-08,9.979513359878688e-08,0.9838405504911938,0.00617981128486102,8.930360736229056e-06
"import nltk
import re
import heapq
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lex_rank import LexRankSummarizer

# Read the article
article_text = open('article.txt').read()

# Tokenize the text
tokenizer = Tokenizer('english')
tokenized_article = tokenizer.to_sentences(article_text)

# Create a PlaintextParser object
parser = PlaintextParser.from_string(article_text, tokenizer)

# Create LexRank object
summarizer = LexRankSummarizer()

# Summarize the article
summary = summarizer(parser.document, 3)

# Output the summary
for sentence in summary:
 print(sentence)",python,bash,0.3387807925811098,0.19397093190873158,0.3038715755044269,1.9572673657241655e-05,0.0034729702581477147,0.0002681993083134618,0.1189399530739659,0.010771908357025406,0.029904096334621946
"def answer_question(question, company):
 if company == 'Apple':
 if question == 'What is Apple's mission statement?':
 return ""Apple's mission statement is 'to make the world's best products that enrich people's lives and empower them to do more.""
 elif question == 'How many stores does Apple have?':
 return 'Apple currently has 511 stores in 25 countries across the globe.'",python,typescript,0.0036322997288841083,0.14223581926421072,0.0027299541511891247,2.4852423975894545e-05,0.21966152167535777,0.0031867638309310766,0.03257988365982151,0.00589232000851999,0.5900565852571099
"def is_odd(n):
  if(n % 2 == 0):
    return ""Even""
  else:
    return ""Odd""
 
print(is_odd(21)) # Outputs: ""Odd""",python,python,0.00047007207547660677,0.003374985566393376,0.0007702290745796874,4.8574496763050616e-05,1.4043065674843355e-05,0.008304505398245017,0.9864252684466691,0.00037479456031363237,0.0002175273158847458
"from sklearn.naive_bayes import MultinomialNB
import pandas as pd

# Read the data into a dataframe
df = pd.read_csv('spam.csv', header=None)

#Split data into features and target
X = df[df.columns[:-1]]
y = df[df.columns[-1]]

# Create a multinomial naive bayes classifier
model = MultinomialNB()

#Train the model
model.fit(X,y)

# Use the trained model to predict the class for the new data
predicted_classes = model.predict(X)

# Calculate the accuracy of the model
print(""Accuracy:"", model.score(X,y))",python,typescript,0.15740162648844294,0.11749736933576024,0.007574666746461036,2.6707006284927375e-05,0.0008805956275951867,1.3861979289326996e-05,0.22757667443874735,4.3154849222752585e-05,0.48898534352819617
"def sort_dict_values(d):
    # create a list of values from the dictionary
    values = list(d.values())
    # sort the list 
    values.sort()
    return values

result = sort_dict_values(mydict)
print(result)",python,python,0.0005789008719283231,0.2117814443098476,0.006039090078434491,3.8836756556411817e-05,0.0026147332408906344,6.18879590354011e-05,0.7104372797746593,0.04476002612234955,0.023687800886298335
"s= ""This is, MY string!?""
 
output=""""
 
for i in s:
 if i.isalnum():
  output+=i.lower()
 
output = ' '.join(w for w in output.split() if len(w)>3)
 
print(""Cleaned String: ""+output)",sql,java,0.0028331550259939886,0.0009573474434791252,0.036275731365036305,0.7514595782648656,3.207184338316066e-07,0.015468746120252924,0.07011778924653496,0.12288638109711596,9.507182872138578e-07
"class WordCounter:
    def __init__(self):
        self.count = 0
    
    def countWords(self, text):
        words = text.split() # Splits the sentence into a list of words
        self.count = len(words) # Counts the number of words
        return self.count

# Creating an instance of the WordCounter class
wordCounter = WordCounter()

# Counting the words in the text
wordCount = wordCounter.countWords(""Hello world, this is a test"")

print(wordCount) # Outputs 4",python,python,0.00043503626570296194,0.0006395285809915229,0.005504116820287389,2.4914624288021054e-09,0.00136434822568,4.4708338094410545e-08,0.6131125513101756,0.3757956778871555,0.003148693710206625
"def search(value, list):
    for i in range(len(list)):
        if list[i] == value:
            return i
    return -1

value= 'apple'
list = ['bannanas', 'oranges', 'apple']
print(search(value, list))",python,matlab,5.711858802258085e-10,2.4878991916496913e-06,5.427049403558383e-07,1.0272084348078058e-06,4.633339399250466e-08,0.9999940165016759,2.034386869485621e-08,1.4997767695687614e-06,3.586605395770185e-07
"def calculatePowerDemand(util, time, power):
    return util * time * power

PowerDemand = calculatePowerDemand(0.1, 10, 100)
print(PowerDemand)",python,python,0.0011640151586552545,0.05282440385709546,0.0042718694203430635,0.0003154473273278583,0.00229889579256347,0.00036748197717692067,0.9359178197360858,0.0019710937479590347,0.0008689729827932514
"import itertools 
  
# list of strings 
list_of_strings = [""Hello"", ""World"", ""Foo"", ""Bar""] 
  
# using itertools 
# to get the permutations 
permutations = itertools.permutations(list_of_strings) 
  
# printing permutations 
for i in list(permutations): 
    print(i)",python,javascript,0.25485091669818877,0.017753569595870412,0.028710389827170214,1.299187138408973e-07,0.38279977890373124,0.027670378836173296,0.09378382553880807,0.053821703368409704,0.14060930731293453
"import numpy as np

arr = np.array([[ 10, 11, 17, 16, 14],
                [ 2, 6, 3, 5, 0],
                [ 17, 20, 9, 18, 21]])

arr_mean = np.mean(arr, axis=1)
arr_normalized = arr - arr_mean[:,np.newaxis]

print(arr_normalized)

# Output:
# [[ 3.4 3.4 9.8 9.8 7.8]
#  [-1.6 0.4 -3.6 -2.6 -4.6]
#  [ 5.4 8.4 -1.6 6.4 9.4]]",python,python,0.06974680238560653,0.006194549949003954,0.0008584207880024602,4.0629930517257357e-05,6.106001525442624e-06,0.16373251217838158,0.7591580015529392,2.449189942070189e-06,0.0002605280240812613
"import tkinter 

# create the UI
root = tkinter.Tk() 
root.title(""Matrix Multiplication"") 

# define the input fields
matrix_1_entry = tkinter.Label(root, text=""Matrix 1"")
matrix_1_entry.grid(row=0, column=0)
matrix_1_input = tkinter.Entry(root)
matrix_1_input.grid(row=0, column=1)

matrix_2_entry = tkinter.Label(root, text=""Matrix 2"")
matrix_2_entry.grid(row=1, column=0)
matrix_2_input = tkinter.Entry(root)
matrix_2_input.grid(row=1, column=1)

# set up the button for multiplication
multiply_button = tkinter.Button(root, text=""Multiply"") 
multiply_button.grid(row=2, column=0)

# display the output
result_label = tkinter.Label(root, text=""Result:"")
result_label.grid(row=3, column=0)
result_display = tkinter.Entry(root)
result_display.grid(row=3, column=1)

# define the function for matrix multiplication
def multiply_matrices():
    matrix_1 = eval(matrix_1_input.get())
    matrix_2 = eval(matrix_2_input.get())
    result = [[sum(a*b for a,b in zip(x_row,y_column)) for y_column in zip(*matrix_2)] for x_row in matrix_1] 
    result_display.delete(0, tkinter.END)
    result_display.insert(0, str(result))

multiply_button.configure(command=multiply_matrices) 

root.mainloop()",sql,sql,0.039052212335117145,0.04839128099892048,0.016318375596888385,0.000302794513450113,0.01885292998956971,0.003343198116956495,0.2435361956716323,0.6065130628013002,0.023689949976165067
"def find_common_elements(set1, set2):
    result = []
    for element in set1:
        if element in set2:
            result.append(element)
    
    return result",python,matlab,4.046431020520027e-07,3.962015652139446e-06,4.021752941467874e-07,7.825103977721575e-08,3.638501025162313e-07,0.9985813856477439,0.0014124738522641345,6.28073909208708e-10,9.289367273786935e-07
print('Python'[:2]),python,bash,0.9999636573934552,1.0374071532038101e-06,2.9590217883901288e-06,1.7281824076946346e-10,8.534641193835436e-06,5.876940544797842e-07,8.952313513211987e-06,3.802732198985816e-07,1.3891082803517852e-05
"students = [
    {
        ""name"": ""Alice"",
        ""grade"": 85
    },
    {
        ""name"": ""Bob"",
        ""grade"": 95
    },
    {
        ""name"": ""Carol"",
        ""grade"": 73
    }
]

def sortGrades(students):
    # sort list of dictionaries by grade in reverse order
    sortedStudents = sorted(students, reverse=True, key = lambda i: int(i['grade'])) 
    return sortedStudents

sortedStudents = sortGrades(students)

for student in sortedStudents:
    print(student)",css,java,0.005754172137376779,0.10294690948838439,0.0057775534680207475,0.806308446650695,0.00017223629771529234,0.0003122947579711136,0.07481923557381825,0.0009124213160697702,0.002996730309948608
"def fibonacci(n):
 a, b = 0, 1
 for i in range(n):
  a, b = b, a + b
 return a
 
for i in range(10):
 print(fibonacci(i))",python,matlab,6.82291247489692e-09,1.1190061924092471e-09,1.03756044291419e-07,6.132349413325876e-10,5.022452906485443e-10,0.5561057062937605,0.443894171324511,2.1134062479845754e-09,7.454879077961863e-09
"import nltk
import re

# define a function to tokenize words
def tokenize_words(words):
 tokens = nltk.word_tokenize(words)
 return tokens

# define a function to remove special characters
def remove_special_characters(text):
 tokens = tokenize_words(text)
 pattern = re.compile('[{}]'.format(re.escape(',.!?@#$%^&*()')))
 filtered_tokens = filter(None, [pattern.sub('', token) for token in tokens])
 return ' '.join(filtered_tokens)

# define a function to create a chat response
def generate_response(user_input):
 response = ''
 # preprocess the user input
 user_input = remove_special_characters(user_input.lower())
 
 # code for your bot goes here
 
 return response",sql,sql,0.0013594438671383174,0.08606524503006183,0.020076476081240854,4.952530815362515e-06,0.07945664345173485,6.741177929984787e-05,0.09309552800016477,0.7147588737705084,0.005115425489035693
"class Vehicle:
   def __init__(self, capacity, speed):
      self.capacity = capacity
      self.speed = speed
 
   def increase_speed(self):
      self.speed += 10
 
   def decrease_speed(self):
      if self.speed > 0:
         self.speed -= 10",python,python,0.0001618701221315759,0.022154557352992297,0.07150382824212552,6.000827650455563e-05,0.00019779429872384755,0.0002229817581346527,0.8750650766880852,0.02423456126244635,0.006399321998856083
"mammal_score = 0
reptile_score = 0

if features[0] == 0:
    mammal_score += 1
if features[1] == 1:
    mammal_score += 1
if features[2] == 1:
    mammal_score += 1 
if features[3] == 1:
    reptile_score += 1
if features[4] == 0:
    reptile_score += 1

if mammal_score > reptile_score:
    animal_class = ""Mammal""
else:
    animal_class = ""Reptile""

print(animal_class)",python,matlab,1.4571927572451912e-05,7.887510032758393e-05,4.893274971854995e-05,1.281349435856046e-06,3.767415908028753e-06,0.9995840906557911,0.0001151707578291267,1.0676321782944782e-06,0.00015224241123872168
"def print_primes(n):
    for num in range(2, n+1):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)

print_primes(10)",python,matlab,1.0368962887959681e-13,1.668632209272429e-18,4.086166817953516e-13,7.011907554547498e-15,9.572734222304156e-15,0.9999999987293249,1.2699095796920963e-09,1.562147518083394e-13,8.041277774942333e-14
"def get_nth_element(list_of_lists, n):
    return [item[n] for item in list_of_lists]",python,python,0.0012226521749002224,0.016580298728083132,0.04210419666599712,0.00015058934025557883,0.025243837832026238,0.002945406809663233,0.9108267984358307,0.0004675878139266064,0.0004586321993171405
"import string
import random

# Generate 8 random characters, including special characters and numbers
size = 8
password = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size))

print(password) # Output: eu$y6c17",sql,java,1.0019290735375633e-11,6.003179099995221e-07,3.5258747648093436e-07,0.6676272746048478,9.20289362878809e-14,2.0499717335105537e-11,3.738675940475191e-05,0.3323343630493985,2.2650351419401065e-08
"import string
import random

def generate_password():
   up_alphabet = string.ascii_uppercase
   low_alphabet = string.ascii_lowercase
   digits = string.digits
   symbols = string.punctuation
   length = 8
   pass_characters = up_alphabet + low_alphabet + digits + symbols
   password =  ''.join(random.sample(pass_characters, length))
   return password

print(generate_password())",sql,sql,3.981349413092165e-13,3.631827852113855e-08,1.029017552246927e-08,0.03757229492874286,5.1118990404563383e-14,1.3980910031277588e-11,7.1033892383414345e-06,0.96242055400357,1.0555645339959145e-09
"def find_factors(num): 
    """"""Function to find prime factors""""""
    factors = [] 
    i = 2
    while i * i <= num: 
        if num % i: 
            i += 1 
        else: 
            num //= i 
            factors.append(i) 
    if num > 1: 
        factors.append(num) 
    return factors 
  
num = 15
print(find_factors(num))",python,matlab,2.268916342202573e-09,3.158687620653573e-12,6.302684435878595e-09,4.844422569054187e-10,1.701393788118946e-08,0.9999998922218755,7.516692730665815e-08,3.1077797030795104e-09,3.430277997446003e-09
"# Node class  
class Node: 
   
    # Function to initialize the node object 
    def __init__(self, data): 
        self.data = data  # Assign data 
        self.next = None  # Initialize next as null 

# Linked List class 
class LinkedList: 
  
    # Function to initialize the Linked List object 
    def __init__(self):   
        self.head = None

# A helper function to check if a given linked list is a palindrome  
def checkPalindrome(root): 
    #base case
    if root == None:
        return True
        
    # Find length of list
    lenList = 0
    iterator = root
    while iterator != None:
        lenList = lenList+1
        iterator = iterator.next
    
    # Find middle pointer
    # If length is even, moving the second pointer right 
    # So, we can get two middle pointers 
    midPtr = root
    for i in range(int(lenList/2)-1):
        midPtr = midPtr.next
    
    # Now pointer is at the exact middle 
    # Checking each next node if its same
    currentNode = midPtr
    prevNode = None
    while currentNode != None:
        nextn = currentNode.next
        currentNode.next = prevNode
        prevNode = currentNode
        currentNode = nextn
    
    # now both the halves are swapped 
    # checking each node one by one
    startPtr1 = root
    startPtr2 = prevNode
    
    # if length is odd
    # move the second pointer one step right 
    if lenList%2!=0:
        startPtr2 = startPtr2.next
        
    palindrome = True
    while startPtr1 != None:
        if startPtr1.data != startPtr2.data:
            palindrome = False
            break
            
        startPtr1 = startPtr1.next
        startPtr2 = startPtr2.next
    
    # Re-linking both the pointers 
    currentNode = prevNode
    prevNode = None
    while currentNode != None:
        nextn = currentNode.next
        currentNode.next = prevNode
        prevNode = currentNode
        currentNode = nextn
        
    return palindrome

# Driver Code 

# Create a linked list with  
# 1->2->3->2->1 
head = Node(1) 
firstNode = Node(2) 
secondNode = Node(3) 
thirdNode = Node(2) 
fourthNode = Node(1) 
  
# Now link the next pointers 
head.next = firstNode 
firstNode.next = secondNode 
secondNode.next = thirdNode 
thirdNode.next = fourthNode 
  
if(checkPalindrome(head)): 
    print (""Linked List is palindrome"")
else: 
    print (""Linked List is not palindrome"")",python,sql,9.722607213510681e-05,0.0024145693607271054,0.05908081409096804,0.000524919372442732,0.061975170389384604,0.00014865624426502592,0.2018280148486428,0.6167810238151025,0.05714960580633194
"# Define the function 
def random_number(min_val, max_val):
 # Generate a random number
 rnd = np.random.randint(min_val, max_val+1)
 
 return rnd

# Call the function
random_num = random_number(5, 10)

# Print the random number
print('Random number between 5 and 10:', random_num)",python,javascript,0.0004013319229826161,0.0015812020501390863,0.00011328109221583866,3.3529149202740787e-06,0.5645927428009665,4.671870067429831e-06,0.43131039406124577,0.0014034582638185731,0.0005895650236439124
"new_string = []
prev_word = ''
for word in ""This is a sample string"".split():
    if word != prev_word:
        new_string.append(word)
    prev_word = word
print(' '.join(new_string))",sql,sql,0.007891069854846932,0.004720900085566933,0.015667457810964413,0.009526027471315332,1.2216732033466738e-05,0.021716702429195524,0.06216320483454169,0.876542695175523,0.0017597256060128228
"def find_average(list_numbers):
    # Calculate the sum of all elements in the list
    list_sum = 0
    for i in range(len(list_numbers)):
        list_sum += list_numbers[i]

    # Calculate the average
    list_average = list_sum / len(list_numbers)

    # Return the average
    return list_average

# Call the function
list_average = find_average(list_numbers)",python,python,0.004282092160584329,0.00293054146061034,0.0038758347738354604,0.0004394372392244721,0.13914608345402948,0.001581270507587019,0.8296066668131872,0.004430488909435085,0.01370758468150677
"def find_missing_num(arr):
    n = len(arr)
    sum_of_num = (n + 1)*(arr[0] + arr[n-1])/2
    sum_of_arr = sum(arr)
    return sum_of_num - sum_of_arr",python,python,9.409622424610635e-05,0.0007331179000120318,0.00010447761111851545,0.0001753005150626535,5.0840752621188835e-05,0.26455746546665965,0.7341470544553464,7.156232852755174e-06,0.000130490842080696
"def get_grade(score):
    # Set the score range
    grade_map = {
        90: 'A',
        80: 'B',
        70: 'C',
        60: 'D'
    }

    # Iterate over the range and return the corresponding grade
    for grade_min, grade in grade_map.items():
        if score >= grade_min:
            return grade

# Test 
print(get_grade(85))",css,python,0.004620394299417355,0.26385696414678245,0.021145217548303827,0.00022067202033834068,0.019797351009240807,0.056841856602123104,0.5505910426516791,0.0037039739125157164,0.07922252780959924
"def evaluate(expression): 
  
    # split expression into list  
    expression = expression.split() 
  
    # stack to store integer values. 
    stack = []  
  
    # do for every element of expression. 
    for element in expression: 
  
        # If element is an operand push 
        # into stack it's a number only 
        if element.isdigit(): 
            stack.append(element) 
  
        # if element is an operator, 
        # pop two elements from stack 
        # perform respective operations 
        else:  
            val1 = stack.pop() 
            val2 = stack.pop() 
            stack.append(str(eval(val2 + element + val1))) 
  
    # return the value  
    return (int(stack[0])) 
  
# Driver Code  
expression = ""2 3 + 4 5 * *""
  
print(evaluate(expression)) 

Output: 46",python,matlab,0.00019707888598562354,0.0021321895015805506,0.0003457044522604367,0.00039699891228782473,0.0012927925026207313,0.9801860635682685,0.014196627168597877,4.581708968947274e-06,0.0012479632994295015
"def make_float(string):
  return float(string)",python,java,3.3826299998541186e-15,4.91779319545094e-09,2.705563295459113e-10,0.999996169743802,1.32972457569057e-17,3.8375192733407893e-13,3.7610171324793944e-06,6.395179356488265e-08,9.853526943193284e-11
"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2)",python,python,8.001349440120791e-06,1.4611341153037943e-05,8.14847538009723e-06,1.9616043371836095e-07,8.864238924574581e-07,1.4652686459804302e-07,0.9999646442229297,3.0387019797054246e-06,3.2679792666803994e-07
"from flask import Flask, request

app = Flask(name)

@app.route('/users', methods=['POST'])
def create_user():
 data = request.json
 # Create the user
 # ...
 return {'status': 'user created'}

if name == 'main':
 app.run(debug=True)",css,css,0.011123855939294939,0.9839709809334234,0.0006648685625573958,0.00018814193305925704,7.169447827022453e-07,5.593288186472073e-06,0.0017017291177222505,0.001103648189798338,0.0012404650911753705
"def factorial(n): 
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)

result = factorial(5)
print(result) # prints 120",python,python,8.181702073872961e-05,0.0001534164930095214,1.0918109378946977e-05,2.960231478019262e-08,1.019503890490162e-05,1.4504941107022476e-06,0.9997130391630473,2.387309871325007e-05,5.260979781675548e-06
"# Fisher-Yates algorithm to generate a random permutation of numbers from 0 to n-1
# Time Complexity: O(n)

import random

def fisher_yates(n):
    # Create an array to hold the permutation
    perm = [x for x in range(0, n)]
 
    # Start from the last element and swap and decrease 
    # index by one
    for i in range(n-1, 0, -1):
        # Pick a random index from 0 to i
        j = random.randint(0, i)
 
        # Swap the random element with current element
        temp = perm[i]
        perm[i] = perm[j]
        perm[j] = temp
    return perm

# Sample call
print(fisher_yates(10))
# Output: [4, 2, 0, 8, 5, 6, 9, 3, 1, 7]",python,matlab,0.0028498775995038483,0.0005705877620893558,0.001927811356761377,4.201013120133586e-05,0.013765290978919027,0.5321190325435315,0.3461617347712904,0.005561128242496195,0.09700252661420702
"def count_frequency(string):
    counts = {}
    for char in string:
        if char in counts:
            counts[char] += 1
        else:
            counts[char] = 1
    return counts",python,python,2.9380337935208588e-05,0.06684770173909954,0.005294817890222451,0.14232212692241347,5.298131778592934e-06,0.00195968205358071,0.7765566703289869,0.006190082960887272,0.0007942396350958047
"String myString = ""Hello World"";
System.out.println(myString.substring(0,5));",java,java,3.405227112707872e-41,4.636422472030154e-29,4.2121566432725605e-28,1.0,2.9545279354238066e-28,4.6286277360391136e-39,1.747420979537073e-26,8.980581712764637e-33,1.7399934921152102e-28
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import IsolationForest

# read the csv file
data = pd.read_csv('transaction_data.csv')

# define feature and target variables
X = data.drop(['Date', 'Time', 'Type', 'Fraud'],axis=1).values
y = data['Fraud'].values

# split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0)

# train the model
clf = IsolationForest(n_estimators=100,random_state=0)
clf.fit(X_train, y_train)

# make predictions 
y_pred = clf.predict(X_test)",python,css,0.02416666475757087,0.6287906133721651,0.017124762245285207,9.860479282554422e-06,0.00031064705535708415,6.541875085230243e-05,0.2370718084259339,0.004158737302701872,0.08830148761085102
"# Import the necessary libraries
import requests
from bs4 import BeautifulSoup
import urllib.parse

# Make a GET request
r = requests.get('https://www.youtube.com/results?search_query=' + urllib.parse.quote('educational videos'))

# Parse the HTML page
soup = BeautifulSoup(r.text, 'html.parser')
videos = soup.find_all('h3', {'class': 'yt-lockup-title'})

# Save the links
links = [video.find('a')['href'] for video in videos]

# Download the videos
for link in links:
    r = requests.get(link)
    with open('video.mp4', 'wb') as f:
        f.write(r.content)",css,html,0.00012871479364442027,0.0027951295187492045,0.9739723666015488,2.146073222678626e-05,0.00017310660628422578,0.0008317441387931997,0.003739631023074306,0.0005613904367273226,0.017776456148951524
"# import libraries
import requests
from bs4 import BeautifulSoup
import pandas as pd

# set the url to scrape
url = ""https://www.weather.gov/source/crh/stateMaxMinTemps.php""

# make a request to the url and create the beautiful soup object
response = requests.get(url)
soup = BeautifulSoup(response.text, ""html.parser"")

# parse the table
table = soup.find(id=""main"")

# read the table in to a DataFrame
df = pd.read_html(str(table))[0]

# rename the columns
df.columns=['state', 'max_temp', 'min_temp']

# find the maximum and minimum temperatures
max_temp = df['max_temp'].max()
min_temp = df['min_temp'].min()

# print the maximum and minimum temperatures
print('The maximum temperature in the US is: %s' % max_temp) 
print('The minimum temperature in the US is: %s' % min_temp)",python,typescript,1.2608557869205814e-07,0.41091910294088296,0.00818820874149151,0.00010975969292581703,0.009569504769000557,5.715206751855128e-07,0.0038227067817289536,0.003036806358543901,0.5643532131091723
"import numpy as np

def generate_random_matrix(rows, columns):
    matrix = np.random.randint(low = 0, high = 100, size = (rows,columns))
    return matrix",python,python,0.003762511443961605,0.005175118340316731,0.0016407246116992384,6.640878312666057e-05,9.363967018993549e-05,2.3284180401018227e-05,0.9862639256754157,0.0010361218981903074,0.0019382653966989179
"def invertWords(string): 
 words = string.split(' ') 

 def reverseStringWordWise(words, start, end): 
 while (start < end): 
 words[start], words[start] = words[end], words[start] 
 start += 1
 end -= 1

 start = 0
 end = len(words) - 1
 reverseStringWordWise(words, start, end) 

 start = 0
 end = len(words) - 1
 while (start < end): 
 reverseStringWordWise(words, start, end) 
 start += 1
 end -= 1

 return ' '.join(words) 


string = ""This is a string""
print(invertWords(string)) 

# Output: string a is This",sql,python,3.491200916988106e-08,8.712728902319483e-05,0.00014970660189888787,0.047205967472617495,3.730148264321681e-09,4.2834274011718906e-08,0.8438629605222855,0.10869181488232617,2.3417554173896e-06
"def count_words(sentence):
    words = sentence.split(' ')
    return len(words)",python,python,6.08909535686788e-05,0.0008270011747851354,0.0019173822960895641,6.125264134814641e-06,3.176909773187627e-05,3.6668848347884003e-06,0.9531202007127088,0.044028264139328026,4.6994768184678265e-06
"# import libraries
import nltk
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from nltk.probability import FreqDist
from heapq import nlargest
 
# Define text summarization function
def summarize(text):
    # Tokenize text
    words = word_tokenize(text)
 
    # Calculate word frequencies
    word_frequencies = FreqDist(words)
    # Identify the most frequecny words
    most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get)
 
    # Identify sentences
    sentences = sent_tokenize(text)
 
    # Calculate sentence score based on most frequent words
    sentence_scores = {} 
    for sentence in sentences:
        score = 0
        for word in word_tokenize(sentence.lower()):
            if word in most_frequent_words:
                score += 1
        sentence_scores[sentence] = score
 
    # Choose the highest score sentences from the list
    summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get)
 
    return ' '.join(summarized_text)",sql,sql,0.00302458675667449,0.12360189604163879,0.0011486336806586026,4.910023778293753e-06,0.001385856549095501,0.0001605304964721783,0.07292088840369833,0.7968553793932964,0.0008973186546873523
"def largest_prime_factor(number):
 largest_factor = 1
 for i in range(2, number+1):
 while number % i == 0:
 largest_factor = i
 number //= i
 return largest_factor

largest_prime_factor(35) # Output: 5",python,python,0.00012996250016844463,0.00022316893236252477,0.0003745162238825292,1.829138478227198e-05,2.5212608024810718e-05,0.003820095194002749,0.9953066135626767,5.510445710103293e-05,4.7035136998922765e-05
"import csv

def preprocess_data(in_file):
    '''This function preprocesses a csv file into a list containing tuples with max four columns per row.'''
    with open(in_file) as fin:
        reader = csv.reader(fin)
        data = [line[:4] for line in reader]
        return [tuple(line) for line in data]",python,bash,0.814360997775452,0.02786899105758276,0.015307364831739409,8.606819917326408e-05,0.003662686180999565,0.005059357380776923,0.10646501173351763,0.0007423920290703015,0.026447130811688042
"import numpy as np
from sklearn.linear_model import LinearRegression

#Define and reshape the data
stock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)

#Train the model
model = LinearRegression()
model.fit(stock_price[:4], stock_price[1:])

#Predict the next day's price
predicted_price = model.predict([stock_price[4]])
print(f'Predicted price is: {predicted_price[0][0]}')",python,bash,0.644348396141477,0.04781113082268375,0.0017295205000032192,5.829425667524179e-05,0.00033507191485885,8.209292479173196e-05,0.2824753247991051,1.3160747058126974e-06,0.0231588525656993
"def prime_numbers(n):
    # Create an empty list to store prime numbers
    prime_list = []
    # Iterate over the numbers from 2 to n
    for num in range(2,n+1):
        prime = True
        # Iterate over the numbers from 2 to the square root of n
        for i in range(2, round(n**0.5)+1):
            # Check if num is divisible by any number
            if num % i == 0:
                prime = False
        if prime:
            prime_list.append(num)
    return prime_list

n = int(input(""Enter a number: ""))
print(""The prime numbers between 1 and"", n, ""are"", prime_numbers(n))",python,python,0.0006003115773280374,7.0228759829823766e-06,0.001553288640435066,0.005058913813444168,0.007797568879185472,0.2319238302352288,0.6882899755786647,0.004911376021957886,0.05985771237777311
"class ValuePair():
    def __init__(self, key, value):
        self.key = key
        self.value = value
    
    def get_key(self):
        return self.key
    
    def get_value(self):
        return self.value",python,css,0.0001001465266417222,0.5195693158705362,0.06287652567252656,8.742648401868234e-06,9.08746693241326e-05,0.006728513550206676,0.0009357109463161592,0.4095181620878717,0.0001720080281751489
"def is_perfect_square(n):
  if n < 0: 
    return False
  x = n
  while x*x > n:
      x = (x + n/x) // 2
  return x*x == n",python,python,1.487684697066404e-05,6.434511239778072e-05,0.0002800848085493409,2.2176136954900643e-05,2.8447557127727033e-05,4.700344597947645e-05,0.999472034969043,3.469471667324002e-05,3.633640630398008e-05
"class FootballTeam:
 def __init__(self):
 self.players = []

 def add_player(self, player):
 self.players.append(player)

 def average_age(self):
 total_age = 0
 for player in self.players:
 total_age += player.age
 return total_age / len(self.players)

 def highest_scorer(self):
 highest_scorer = self.players[0]
 for player in self.players:
 if player.score > highest_scorer.score:
 highest_scorer = player
 return highest_scorer",python,python,0.0006986032610388407,0.11069119005402324,0.11631171565220927,6.416460856261183e-05,0.0003747637830300056,0.0011500980900243103,0.5643774098345863,0.2048555860394076,0.0014764686771180009
"class Node:
 def __init__(self, dataval=None):
   self.dataval = dataval
   self.nextval = None

class SLinkedList:
 def __init__(self):
  self.headval = None

# Function to add node
 def addNode(self, dataval):
  NewNode = Node(dataval)
  if self.headval is None:
   self.headval = NewNode
   return
  laste = self.headval
  while(laste.nextval):
   laste = laste.nextval
  laste.nextval=NewNode

# Function to print the linked list
 def listprint(self):
  printval = self.headval
  while printval is not None:
   print (printval.dataval),
   printval = printval.nextval

# Function to delete a node
 def DeleteNode(self, dataval):
  deletenode = self.headval
  if deletenode.dataval == dataval:
   self.headval = deletenode.nextval
   deletenode = None
   return

  prevnode = None
  while deletenode.dataval != dataval:
   prevnode = deletenode
   deletenode = deletenode.nextval

  prevnode.nextval = deletenode.nextval
  deletenode = None",sql,sql,0.0002609789296662868,0.03204056570685197,0.042192842813711086,0.00013662398537776386,0.02790195636742014,4.463989772495617e-05,0.38396375844624264,0.5112576388587972,0.0022009949942081637
"class Car:
    def __init__(self, brand, model, year, color):
        self.brand = brand
        self.model = model
        self.year = year
        self.color = color
    
    def description(self):
        return ""This car is a {} {}, made in {}, and its color is {}"".format(
           self.brand,
           self.model,
           self.year,
           self.color
        )",python,java,5.634173120453221e-12,1.6353678571693014e-10,1.0323229575914355e-09,0.9999999873099351,1.5454565392591911e-24,2.406735276220006e-13,1.1458718049811163e-08,1.6511315621346045e-11,1.3101160635711847e-11
"def prime_factors(num):
  factors = []
  n = 2
  while n * n <= num:
    if num % n == 0:
      factors.append(n)
      num //= n
    else:
      n += 1
  if num > 1:
    factors.append(num)

  return factors",python,matlab,1.3192184394038689e-08,1.959204784225235e-11,2.348543809032912e-08,2.6711535356022267e-09,3.209260118155577e-09,0.9999996296134177,3.0635862217011617e-07,6.8734013863562864e-09,1.4576930782878865e-08
"def reverse_string(string):
    return string[::-1]",python,java,1.7366216442831176e-15,8.51669447569561e-09,8.516402071572627e-10,0.9999719696032902,2.7477559558206786e-17,8.620794651730033e-13,2.7859431338781684e-05,1.6140886888371015e-07,1.873035263424416e-10
"def sum_array(arr):
 result = 0
 for item in arr:
 result += item
 return result",python,python,8.993380212511825e-06,0.0044717869852042005,0.00017187838052385758,1.523941985291823e-06,0.0003147757538933755,0.0044772960034492396,0.9905398016586231,5.245390836753713e-06,8.698505271772844e-06
"import math

def get_area(a, b, c):
    s = (a + b + c) / 2
    area = math.sqrt(s*(s-a)*(s-b)*(s-c))
    return area

input_data = 5, 6, 7
area = get_area(*input_data)
print(area)  # Output: 14.696938456699069",python,python,0.00486646306842927,0.015420443997634838,0.0033953488421147285,0.0001427752038585981,0.0005574109141560259,0.0001538570326103851,0.9745883724548224,0.000525779820424972,0.0003495486659488378
"class MedianSequence:
    def __init__(self):
        self.nums = []
        
    def __len__(self):
        return len(self.nums)
        
    def add(self, num):
        self.nums.append(num)
        self.nums.sort()
        
    def remove_median(self):
        mid = len(self.nums) // 2
        self.nums.pop(mid)",python,python,6.229576920411818e-05,0.0006617159781423759,0.008165400511157177,1.917328721414112e-05,1.8366399338025304e-05,9.327128900833266e-06,0.9684575403227224,0.022498873277193233,0.00010730732612773309
"def applyDiscount(discountRate, price):
    discountedPrice = discountRate * price
    return discountedPrice

print(applyDiscount(discountRate, price)) # 180",python,python,0.00033519975887784815,0.2193476408158797,0.00040441664399141163,5.452653852469421e-05,0.0001778835710491128,4.622969079872755e-05,0.7785402618201593,0.0007053893929809216,0.0003884517677382409
"def longest_sequence(arr):
    longest_sequence = []
    current_sequence = []
    current_num = None
    
    for num in sorted(arr):
        if current_num is None or num == current_num + 1:
            current_sequence.append(num)
            current_num = num
        else:
            if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):
                longest_sequence = current_sequence
            current_sequence = [num]
            current_num = num

    if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]):
        longest_sequence = current_sequence

    return longest_sequence",python,matlab,0.00017648875447314922,1.697294606887796e-05,0.0001930619568044074,1.6598177154959325e-05,5.9877316494034806e-05,0.9853438115643768,0.013331491775701422,3.113906581267792e-05,0.0008305584431134618
"def message():
 print(""Hello World!"")",python,bash,0.9980923241573593,1.9638863342787604e-06,1.8863821683741139e-06,8.309458089905708e-24,0.00022524711767667337,8.068679124271647e-10,0.0016785199038090186,3.8952044443533706e-08,1.8793740006515426e-08
"let sentence = ""I love coding in Python"";
let reversed = sentence.split("""").reverse().join("""");
console.log(reversed);",sql,javascript,3.587113213540645e-26,2.1257550232493295e-25,3.3985593352616473e-23,3.624425487552205e-26,1.0,5.36366893954175e-23,5.2616103264174085e-23,2.81839210203871e-24,8.395848275907005e-24
"import string 
import random 
  
def random_string(): 
  
 # using choice() to generate a 
 # random character from a string 
 letters = string.ascii_lowercase
 output = """" 
  
 # generating a string of 5 characters 
 for i in range(5):
  output += random.choice(letters) 
  
return output

print(random_string())",python,java,3.1417767674661344e-07,7.176619437354058e-05,6.87555351672169e-05,0.526508116631931,4.416320728298361e-10,3.9612235907919367e-07,0.05442583877397235,0.41892058760352907,4.224519359108234e-06
"import numpy as np 

arr = np.ones((r,c))",python,python,0.09421695337942508,0.01695307186167897,0.004055001095061966,0.00021345805337816677,5.073000247506234e-05,0.009137053384122103,0.8344761758431102,4.6965284520704795e-05,0.04085059109622798
"import Foundation

func randomString(length: Int) -> String {
    let letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    return String((0..<length).map { _ in letters.randomElement()! })
}

let str = randomString(length: 8)
print(str)",python,javascript,1.927151504301986e-14,3.159851849749237e-11,4.272712938105178e-11,1.650953456084384e-06,0.9999983240290662,4.9634484572030337e-14,2.4931812165401425e-08,7.459571810751636e-12,3.811421191780327e-12
"import random

list = [""apple"", ""banana"", ""orange"", ""strawberry"", ""grape""]
random.shuffle(list)

for item in list[:3]:
 print(item)",python,python,0.002431390427420374,0.1096390243562752,0.08799059027739237,8.739398161043403e-05,0.02462367983832266,0.038307273743407796,0.5763276018751833,0.15985188117657748,0.0007411643238103248
"def filter_list(num_list, divisor):
    return list(filter(lambda n: n % divisor == 0, num_list))

num_list = [1, 2, 3, 4, 5, 6]
divisor = 2

divisible_nums = filter_list(num_list, divisor)
print(divisible_nums) # [2, 4, 6]",python,python,0.003778014383197374,0.012336607785568653,0.01020294219965419,0.0009284767590921669,0.0029187314197004284,0.0022546257262504254,0.9587305230925398,0.0026335295047790674,0.006216549129218062
"from collections import Counter

mylist = [2, 3, 4, 5, 2, 3, 2, 5, 6, 7]
freq = Counter(mylist)
most_common_element = freq.most_common(1)[0][0]
print(""The most common element is %d"" %most_common_element)",python,matlab,2.3834337198676993e-05,3.0367374759750063e-05,8.126067745541026e-06,7.580409714855151e-07,2.1820970922171835e-05,0.9998506330904275,3.2993948562508326e-05,1.3231352464087434e-07,3.133385588765767e-05
"def reverseString(str): 
  s = """" 
  for i in str: 
    s = i + s
  return s 

print(reverseString('Hello World!'))	# Output: !dlroW olleH",python,python,0.27323774444694293,0.0008201106567598322,0.006282827020154929,1.895036551038626e-10,0.10579923850829254,0.00046131153763106917,0.612802900138772,0.000568580467078647,2.7287034864308348e-05
"from datetime import date

date_1 = date(2020, 1, 1)
date_2 = date(2020, 1, 30)

diff = date_2 - date_1
print('There are {} days between the two dates.'.format(diff.days))",python,python,0.01633204542378462,0.19975176864886823,0.00579460828124093,0.043988097679240036,0.002951939316301317,2.1167308751344626e-05,0.6801197620095429,0.002760995024652624,0.04827961630761796
"def display_square(number):
    result = number * number
    print(result)

display_square(5)",python,python,1.0164288752092027e-07,0.00017501776370063346,1.0524174428189894e-06,3.440682376774685e-08,2.0433470467217472e-07,1.8372550697567708e-08,0.9998173089228607,5.792144390771417e-06,4.699946384243867e-07
"def printArrayReverse(arr): 
    for i in range(len(arr) - 1, -1, -1): 
        print(arr[i], end = "" "")

printArrayReverse(arr)",python,matlab,2.2038994029735195e-08,7.121267468328685e-08,3.72388061236933e-08,3.799029477562377e-09,1.2230517274374274e-09,0.8258618011408798,0.17413802249836977,1.0407838584521963e-08,3.044035559602837e-08
"""""""
Create a neural network model in Python to classify text as positive or negative
""""""

import numpy as np
import tensorflow as tf 

# Define the model
model = tf.keras.models.Sequential([
    # The input layer with shape of vocab size used for one-hot encoding  
    tf.keras.layers.Input(shape=(vocab_size)),
    # Add a layer of Dropout for regularized learning
    tf.keras.layers.Dropout(rate=0.2),
    # The hidden layers
    tf.keras.layers.Dense(units=64, activation='relu'),
    tf.keras.layers.Dense(units=1, activation='sigmoid')
])

# Compile the model
model.compile(
    optimizer='adam', 
    loss='binary_crossentropy', 
    metrics=['accuracy']
)

# Fit on the training data
model.fit(X_train, y_train, epochs=5, batch_size=32)",python,typescript,0.024834945032369066,0.00016402121660481157,0.00029365918563725794,3.7647914115853974e-07,2.3833312389501483e-06,2.7098388608454996e-06,0.006482605752082088,2.3245654226746043e-07,0.9682190667075236
"def average(numbers):
 sum = 0
 for number in numbers:
 sum += number
 return sum / len(numbers)",python,java,5.961791340054924e-05,0.0007276805264952083,0.0008696638524887721,0.6538694573960293,0.0004920458120013935,1.3849528536477592e-06,0.34349397837036433,0.0003277270431711618,0.00015844413319559284
"arr = [2, 3, 4] 
arr.append(6)
print(arr)",python,matlab,3.60489655969631e-06,8.663035079490556e-05,3.945140707327358e-06,1.3689617675766127e-06,3.124707117647362e-06,0.9984324973561782,0.0014634989634386025,1.8624381969398287e-07,5.1433796164019454e-06
"def replace_string(input_string, target_string, replacement_string):
    return input_string.replace(target_string, replacement_string)

print(replace_string(""Hello World!"", ""World"", ""Python""))",python,bash,0.9962683649781182,2.214851673856193e-05,6.310338497498748e-05,2.858193795028863e-14,0.0009288344876448813,1.0556409659072766e-06,0.002695100397911936,2.7649150904049824e-06,1.8627678526338702e-05
"def convert_hexvals_to_decimal(hexvals):
    # Split hexvals on whitespace
    hexvals_list = hexvals.split()
    # Reverse hexvals list
    hexvals_list.reverse()
    decimal_val = 0
    # Loop through hexvals list
    for index, hexval in enumerate(hexvals_list):
        # Multiply hexval by 16^index to calculate decimal value
        decimal_val += int(hexval, 16)*(16**index)
    # Return decimal value
    return decimal_val
    
decimal = convert_hexvals_to_decimal(""7a 0d 72"")
print(decimal)",python,css,0.06440382438206646,0.25541704326661724,0.08898286291645964,0.05893419169527858,0.21610025587679363,0.22698073409872624,0.02542408723462497,0.030223186929130817,0.03353381360030247
"def find_closest_sum(arr, num):
    arr.sort()
    final_sum = None
    closest_sum = None
    prev_diff = float(""inf"")
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                sum = arr[i] + arr[j] + arr[k]
                diff = abs(num - sum)
                if diff < prev_diff:
                    prev_diff = diff
                    closest_sum = sum
    return closest_sum

print(find_closest_sum(arr, num))",python,matlab,7.383820502059013e-10,8.281815737804256e-11,1.6281719798743055e-09,7.764888863197436e-10,6.566494210968454e-11,0.9999403484058292,5.9647032648820855e-05,6.422024366912551e-10,6.277937732742184e-10
"def areaCircle(radius):
    pi = 3.14
    area = pi * (radius**2)
    return area

print(areaCircle(5)) # 78.5",python,python,0.0005621437017161352,0.003946700727868611,0.0017789260984589865,0.00016328505141151826,0.0004893164928988938,0.00019555044745706864,0.9913921817541186,0.0006803669229530959,0.0007915288031172512
"list1 = [2, 3, 4]
list2 = [5, 6, 7]
list3 = [8, 9, 10]

list = list1 + list2 + list3
print(list) 
# Output: [2, 3, 4, 5, 6, 7, 8, 9, 10]",python,python,0.0015957504534509265,0.0099967405366661,0.0048053314043463085,0.00014671367987169117,0.0008096532737835627,0.0011999427521328337,0.9807441731725436,0.00039225507213387905,0.0003094396550712536
"class Circle:
    def __init__(self, radius):
        self.radius = radius 

    # Getter method 
    def getRadius(self): 
        return self.radius 
  
    # Setter method 
    def setRadius(self, radius): 
        self.radius = radius 
  
    # Area method 
    def getArea(self): 
        return 3.14 * (self.radius**2)",python,python,0.0003380434267870209,0.003852239018979439,0.015081290668653878,0.0055636612218959896,4.520931891330047e-05,2.635414403378783e-06,0.9585560578646831,0.01638204313481146,0.00017881993087239065
"def encrypt(string, key): 
   # Create an empty output string 
    output = """" 
  
    # For each character in the given string 
    for char in string: 
        # Convert to ASCII value 
        char_ascii = ord(char) 
  
        # Add the key (shift) 
        shifted = char_ascii + key 
  
        # Convert to character 
        output += chr(shifted) 
  
    # Return the output string 
    return output",python,java,3.418772128844709e-08,0.0002854475274453434,3.0295507878550346e-05,0.9976073751328922,2.8783203791225695e-09,1.7332011089638922e-08,0.0018640134930573663,0.00020855634630459515,4.257594369212034e-06
"import requests
from bs4 import BeautifulSoup

url = ""https://example.com""

try: 
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')
    # your web scraping code here

except Exception as e:
    print('Error:', e)",python,java,1.3643401901412022e-14,0.0028535511490306964,0.023528597407010417,0.9735828538704558,2.178097242518419e-07,8.089485529583375e-09,1.1888218213301485e-05,4.489837151953761e-06,1.839361891432777e-05
"# Imports
import os
import time 
import keras 
import numpy as np 
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Embedding, LSTM, Dense, Bidirectional

# Set random seed
np.random.seed(1234)  
PYTHONHASHSEED = 0

# Data Preprocessing
reviews = ['The customer service here is terrible']
labels  = [1] # 1 for negative sentiment

# Tokenize the sentences
tokenizer = Tokenizer()
tokenizer.fit_on_texts(reviews)
word_index = tokenizer.word_index
vocab_size=len(word_index)

sentences = tokenizer.texts_to_sequences(reviews)
padded_sentences = pad_sequences(sentences, padding='post')

# Building the Model 
model = Sequential()
model.add(Embedding(vocab_size, 64, input_length = padded_sentences.shape[1]))
model.add(Bidirectional(LSTM(64)))
model.add(Dense(2, activation='softmax')) 
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# one-hot encode the labels
labels = np.eye(2)[labels].reshape(-1, 2)

model.fit(padded_sentences, labels, epochs=200, batch_size=10)",python,python,0.3517501206447153,0.01899297795637574,0.014095105385697106,0.0008269820862656066,0.0002880395856979811,1.0278838999760058e-05,0.6065064793269667,0.00018678367268637594,0.0073432325025954955
"def maxSubarrySum(arr):
  cur_max = 0
  global_max = 0
  
  for i in arr:
    cur_max = max(cur_max + i, 0)
    global_max = max(global_max, cur_max)
    
  return global_max
  
# test
arr = [1, -2, 3, 4, -5]
print(maxSubarrySum(arr))

# output: 7",python,matlab,4.939656449248525e-07,1.5053905832986675e-06,1.881936208724867e-07,1.340161263654051e-08,3.3914520178504056e-08,0.9976622508251822,0.0023354850193556074,5.588917568335875e-09,2.370056260276868e-08
"class ParseJSON:
 def __init__(self, jsonObject):
 self.jsonObject = jsonObject

 def getNames(self):
 names = []
 for item in self.jsonObject['items']:
  name = item['name']
  names.append(name)
 return names

jsonObject = {""items"": [{""name"": ""item1""}, {""name"": ""item2""}, {""name"": ""item3""}]}
pp = ParseJSON(jsonObject)
result = pp.getNames()
print(result) # ['item1', 'item2', 'item3']",css,python,0.003455783957126492,0.08346062829548784,0.04093867307514411,0.29487036443344505,8.61851180749453e-06,0.00041740322487417777,0.5705856084234302,0.004275826962611236,0.001987093116073506
"#!/usr/bin/env python

# ------------------------------
# importacion
# ------------------------------
import socket, sys, time, ConfigParser

def poner_mensaje( tipo , mensaje ):
	# -----------------------------
	# Colocar mensajes con formato
	# y marca de tiempo
	# -----------------------------
	print time.strftime('%Y-%m-%d-%X') + "" "" + tipo + "": "" + mensaje

def activar_configuracion():
	# ------------------------------
	# Variables del servidor desde
	# un archivo de configuracion
	# ------------------------------
	configuracion = ""./configuracion/agente-servidor.cfg""
	global direccion
	global puerto
	global clave
	try:
		cfg = ConfigParser.ConfigParser()
		cfg.read([configuracion])
		puerto = int(cfg.get('servidor','puerto'))
		clave = cfg.get('servidor','clave')
		clientes = cfg.get('servidor','clientes')
	except:
		poner_mensaje( 'ERROR' , ""No se pudo leer el archivo de configuracion "" + configuracion )
		poner_mensaje( 'AVISO' , ""Se tomaran los valores por omision: 6470 root"" )
		puerto = 6470
		clave = 'root'

if __name__ == ""__main__"":
	activar_configuracion()
	# ------------------------------
	# parametros a utilizar
	# ------------------------------
	if( len(sys.argv) == 3 ):
		continuar = True
		direccion =  sys.argv[1]
		comando =  sys.argv[2]
		agente = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
		try:
			agente.connect( ( direccion, puerto ) )
		except:
			poner_mensaje ( 'ERROR' , ""No se pudo establecer la conexion en la direccion: ""+ direccion +"" con el puerto: "" + str(puerto) )
			continuar = False
		if ( continuar == True ):
			data, server = agente.recvfrom( 100 )
			poner_mensaje ( 'MENSAJE' , data )
			agente.send( clave )
			data, server = agente.recvfrom( 100 )
			poner_mensaje ( 'MENSAJE' , data )
			agente.send( comando )
			data, server = agente.recvfrom( 100 )
			poner_mensaje ( 'MENSAJE' , data )
			agente.close()
	else:
		print ""--------------------------------------------------------------""
		print "" Tiene que mandar cuatro parametros""
		print ""     agente-servidor.py <direccion> <comando>""
		print ""--------------------------------------------------------------""
",python,bash,0.46026501736633335,0.13571205319001373,0.1619562263790673,0.00026265016152072536,0.0018633816692663204,9.766886386298058e-05,0.15850769071034976,0.07855594733385599,0.0027793643257298718
"def get_max(ins):
    return max(ins)",python,python,0.0027638126191827576,0.007884784769707304,0.005245869916755292,0.0006089810005279502,0.0018035122006250922,0.0005511082077889692,0.9756001979122335,0.0018445130608642202,0.003697220312315113
"""""""
Create a Spell Checker
""""""

import enchant

def check_spelling(text):
    # Create a spell checker
    spell_checker = enchant.Dict(""en_US"")

    # Split the text into words
    words = text.split()

    # Check the spelling of each word
    for i, word in enumerate(words):
        if not spell_checker.check(word):
            # Word is misspelled, suggest a correction
            words[i] = spell_checker.suggest(word)[0]
    
    # Join the words back together
    corrected_text = ' '.join(words)

    return corrected_text

if __name__ == '__main__':
    text = 'Ths is a languige exersice'
    corrected_text = check_spelling(text)
    print(corrected_text)",sql,sql,3.397610492067939e-05,0.00014843580710173206,5.635501692362822e-05,6.861175342921234e-09,5.1084186322775895e-06,5.001398267120548e-07,0.002281097485219802,0.9974376559831919,3.686418300807154e-05
"#!/bin/bash

# SSH to EC2 instance
ssh -i <KeyPair>.pem ubuntu@<EC2_Public_IP>

# Update the packages installed
sudo apt-get update

# Install docker
sudo apt-get install docker.io docker-compose

# Clone the source code
git clone <Git_Repo_URL> app

# Build docker image
cd app
docker-compose up -d --build

# Migrate database
docker-compose run web python manage.py migrate

# Run the Django server
docker-compose run web python manage.py runserver 0.0.0.0:8000",sql,bash,0.9999999986443453,1.3277226579080318e-10,6.415339374492166e-10,9.768602890707198e-15,3.364097386947497e-10,1.624593201534288e-11,5.022198043224788e-12,1.9420537395017733e-10,2.945557691188768e-11
"def removeDuplicates(arr):
  output = []
  for ele in arr:
    if ele not in output:
      output.append(ele)
  return output
  
output = removeDuplicates([1,1,2,2,3,4,5,5]);
print(output) // outputs: [1, 2, 3, 4, 5]",python,matlab,0.23981295361954422,0.014599755536547892,0.01192511233520904,5.662934595954171e-05,0.0004566313798741439,0.6086904192493733,0.12440771600309261,4.6307725513962786e-05,4.474804885328098e-06
"def kClosestValues(arr, x, k):
    closestPrimes = []
    diff = float(""inf"")
    for num in arr:
        currentDiff = abs(num - x)
        if currentDiff <= diff:
            if currentDiff < diff:
                closestPrimes = []
            closestPrimes.append(num)
            diff = currentDiff
    if closestPrimes[0] > x:
        closestPrimes.sort()
    else:
        closestPrimes.sort(reverse=True)
    return closestPrimes[:k]",python,matlab,9.39866600660821e-10,5.92625342434452e-12,5.34573968173206e-10,3.918121107365045e-11,8.831664063395981e-11,0.9999999814313693,1.6682264575727737e-08,7.206089096617187e-11,2.0644070140260858e-10
"import collections

def mode(numbers):
 counts = collections.Counter(numbers)
 max_count = max(counts.values())
 return [item for item, count in counts.items() if count == max_count]

numbers = [1, 2, 3, 2, 4, 2]
mode = mode(numbers)
print(mode)
# Output: [2]",python,python,0.0005690582228563039,0.009012086107680057,0.003693373042008438,0.002971128004498365,0.001979293693528805,5.401407490939421e-07,0.9814401549453575,0.000290613191452614,4.375265186876071e-05
"def permutations(nums):
 permutations_list = []
 for permutation in itertools.permutations(nums):
 permutations_list.append(list(permutation))
 
 return permutations_list
 
 print(permutations([1, 2]))
# Output: [[1, 2], [2, 1]]",python,python,0.015356858107986182,0.017895024288092466,0.01789020761234085,0.00109404447413287,0.005752485085946616,0.019115919725424806,0.8896738943981911,0.029528390069817414,0.003693176238067672
"import random
import string

def generateRandomString(length):
 characters = string.ascii_lowercase + string.ascii_uppercase + string.digits

 return ''.join(random.choice(characters) for _ in range(length))

print(generateRandomString(10))",sql,sql,1.1387210272500123e-11,8.081178982769678e-08,7.576440462348833e-08,0.012957201922308743,1.240674847947183e-12,1.0238188952787837e-08,0.00036786082799123836,0.9866747665426384,3.880050207882098e-09
"ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = []

for num in ls:
 if num % 2 == 0:
 result.append(num)
 
print(result) # prints [2, 4, 6, 8, 10]",python,matlab,2.0479638542444143e-09,4.584636862252352e-12,8.322857676925997e-10,1.7510539426445211e-12,1.8637549919292292e-10,0.9999995584044339,4.3782827957555783e-07,3.66792099406593e-10,3.275336190932926e-10
"# Create the project
$ django-admin startproject myproject 

# Create the application
$ cd myproject
$ python manage.py startapp user_data

# Add the app to installed apps
# myproject/settings.py
INSTALLED_APPS = [
 'user_data',
 ...
]

# Create the models
# user_data/models.py
from django.db import models

class User(models.Model):
 name = models.CharField(max_length=100)
 email = models.EmailField()

class Data(models.Model):
 user = models.ForeignKey(User, on_delete=models.CASCADE)
 data = models.TextField()

# Create the migrations
$ python manage.py makemigrations
$ python manage.py migrate

# Create the views
# user_data/views.py
from django.shortcuts import render
from .models import User, Data

def index(request):
 users = User.objects.all()
 context = {
  'users': users,
 }
 return render(request, 'user_data/index.html', context)

def user_data(request, user_id):
 user = User.objects.get(id=user_id)
 data = Data.objects.filter(user=user)
 context = {
  'user': user,
  'data': data,
 }
 return render(request, 'user_data/user_data.html', context)",css,bash,0.9999999999218998,3.447919685123629e-11,2.9126155869941533e-13,1.2543275717093795e-14,9.394025418135303e-13,3.018286181335694e-14,6.182187163882857e-14,2.1301254318430204e-14,4.226464682974118e-11
"def factorial(n):
 fact = 1
 for i in range(2,n+1):
  fact = fact * i
 return fact",python,python,0.00406642618036623,0.00285521705629329,0.01122484219587269,0.0068325525563978865,7.488938606514113e-05,0.17939719444384633,0.5738336617567668,0.0024228461461530955,0.21929237027823856
"import requests
from bs4 import BeautifulSoup

url = ""http://website.com/products/""

def scrape(url):
 data = {'name': [], 'price': []}
 resp = requests.get(url)
 soup = BeautifulSoup(resp.text, 'html.parser')
 
 for product in soup.select('div.product'):
 data['name'].append(product.select_one('p.name').text)
 data['price'].append(product.select_one('p.price').text)
 
 return data

data = scrape(url)

print(data)",css,css,1.3486109012730585e-09,0.8224773514542393,0.16179626414735848,0.01523235564167196,8.247890303882544e-08,2.0731739987229966e-06,0.00026411275279559994,0.0001985442079045578,2.92147945174658e-05
"def get_even_numbers(list_of_numbers):
    even_nums = []
    for num in list_of_numbers:
        if num % 2 == 0:
            even_nums.append(num)
    return even_nums

list_of_nums = [1, 2, 3, 4, 5, 6]
result = get_even_numbers(list_of_nums)
print(result)",python,matlab,8.09281386311386e-07,2.978087473392157e-08,2.1639016445896804e-06,1.37048677309795e-07,5.75684812311321e-07,0.9999072006421506,8.641348400301178e-05,1.3221141280554097e-06,1.3480623231095037e-06
"import numpy as np 

X = np.array([[2, 3], 
     [1, 4]]) 

Y = np.array([[5, 6], 
     [7, 8]])

Z = X + Y 

print(""Matrix addition result:"") 
print(Z)",python,bash,0.596704565978585,0.0048171172548440834,0.00044925462067460964,9.311351206792341e-06,5.6525183225530454e-06,0.00013202788617325528,0.3972314762124395,7.215197894698567e-07,0.0006498726579647446
"def prim(G, start):
    node = start
    visited = set()
    edges = []
    visited.add(node)
    while len(visited) < G.num_nodes:
        min_edge = float(""inf"")
        for neighbor, weight in G.neighbors[node]:
            if neighbor not in visited and weight < min_edge:
                min_edge = weight
                new_node = neighbor
        edges.append((node, new_node, min_edge))
        visited.add(new_node)
        node = new_node
    return edges",python,python,0.007229246133601419,0.06828182915547992,0.01842020105200637,0.021663197533344156,0.0018075032465879714,0.003229054960271894,0.7808001848939075,0.03958832293209487,0.058980460092705675
"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  models.py
#  
#  Copyright 2012 Thomas Grainger <tagrain@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation; version 3.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#  
#  You should have received a copy of the GNU Affero General Public
#  License along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#

from django.db import models

class Event(models.Model):
    id = models.BigIntegerField(db_column= ""event_id"", primary_key=True)
    username = models.CharField(max_length=765)
    radius_account_id = models.CharField(max_length=765)
    radius_session_id = models.CharField(max_length=765)
    radius_info = models.TextField()
    ip_src = models.CharField(max_length=765)
    ip_dst = models.CharField(max_length=765)
    start = models.DateTimeField()
    finish = models.DateTimeField()
    alerts = models.BigIntegerField()
    blacklist = models.ForeignKey(""Blacklist"", db_column = ""blacklist"")
    rule = models.ForeignKey(""Rule"", db_column = ""rule"")
    rule_class = models.CharField(max_length=93)
    
    def __unicode__(self):
        return ""{username}@{ip_src} accessed {ip_dst} from {start} till {finish}. Rule class: {rule_class}"".format(
            username = self.username,
            ip_src = self.ip_src,
            ip_dst = self.ip_dst,
            start = self.start,
            finish = self.finish,
            rule_class = self.rule_class
        )
    
    class Meta:
        db_table = u'event'
        unique_together = (""username"", ""ip_src"", ""ip_dst"", ""start"", ""finish"")

class Rule(models.Model):
    id = models.BigIntegerField(primary_key=True, db_column=""rule_id"", editable=False)
    name = models.CharField(max_length=765, db_column = ""rule_name"")
    hide = models.BooleanField()
    
    @models.permalink
    def get_absolute_url(self):
        return ('rule', (), {""pk"":str(self.pk)});
    
    
    def __unicode__(self):
        return ""{name}[{pk}]"".format(name=self.name, pk=self.pk)
    
    class Meta:
        db_table = u'rules'
        
class Blacklist(models.Model):
    id = models.BigIntegerField(primary_key=True, db_column=""bl_id"", editable=False)
    name = models.CharField(max_length=765, editable=False)
    url = models.CharField(max_length=765, editable=False)
    serialized = models.TextField(editable=False)
    updated = models.DateTimeField(editable=False)
    hide = models.BooleanField()
    
    @models.permalink
    def get_absolute_url(self):
        return ('blacklist', (), {""pk"":str(self.pk)});
    
    def __unicode__(self):
        return self.name
    
    class Meta:
        db_table = u'blacklists'

class Script(models.Model):
    id = models.AutoField(primary_key=True, db_column = ""script_id"", editable=False)
    name = models.CharField(max_length=765)
    updated = models.DateTimeField(db_column=""lastupdated"", editable=False)
    
    @models.permalink
    def get_absolute_url(self):
        return ('script', (), {""pk"":str(self.pk)});
    
    def __unicode__(self):
        return ""{name}[{pk}]"".format(
            name=self.name,
            pk=self.pk
        ) 
    
    class Meta:
        db_table = u'scripts'
",css,bash,0.9912864450559122,0.004732540829062676,4.7907584695581354e-05,0.002498449806804214,1.5488463697043647e-07,1.0706689929831387e-07,0.0002959546270098006,9.308052511676886e-06,0.0011291320924676253
"##########################################################################
#
#  Copyright (c) 2013, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided with
#        the distribution.
#
#      * Neither the name of John Haddon nor the names of
#        any other contributors to this software may be used to endorse or
#        promote products derived from this software without specific prior
#        written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS
#  IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import unittest

import IECore
import GafferImage
import os

class MergeTest( unittest.TestCase ) :

	rPath = os.path.expandvars( ""$GAFFER_ROOT/python/GafferTest/images/redWithDataWindow.100x100.exr"" )
	gPath = os.path.expandvars( ""$GAFFER_ROOT/python/GafferTest/images/greenWithDataWindow.100x100.exr"" )
	bPath = os.path.expandvars( ""$GAFFER_ROOT/python/GafferTest/images/blueWithDataWindow.100x100.exr"" )
	checkerPath = os.path.expandvars( ""$GAFFER_ROOT/python/GafferTest/images/checkerboard.100x100.exr"" )
	checkerRGBPath = os.path.expandvars( ""$GAFFER_ROOT/python/GafferTest/images/rgbOverChecker.100x100.exr"" )
	rgbPath = os.path.expandvars( ""$GAFFER_ROOT/python/GafferTest/images/rgb.100x100.exr"" )

	# Do several tests to check the cache is working correctly:
	def testHashes( self ) :

		r1 = GafferImage.ImageReader()
		r1[""fileName""].setValue( self.checkerPath )

		r2 = GafferImage.ImageReader()
		r2[""fileName""].setValue( self.gPath )

		##########################################
		# Test to see if the hash changes.
		##########################################
		merge = GafferImage.Merge()
		merge[""operation""].setValue(8) # 8 is the Enum value of the over operation.

		merge[""in""].setInput(r1[""out""])
		merge[""in1""].setInput(r2[""out""])
		h1 = merge[""out""].image().hash()

		# Switch the inputs.
		merge[""in1""].setInput(r1[""out""])
		merge[""in""].setInput(r2[""out""])
		h2 = merge[""out""].image().hash()

		self.assertNotEqual( h1, h2 )

		##########################################
		# Test to see if the hash remains the same
		# when the output should be the same but the
		# input plugs used are not.
		##########################################
		merge = GafferImage.Merge()
		merge[""operation""].setValue(8) # 8 is the Enum value of the over operation.

		expectedHash = h1

		# Connect up a load of inputs ...
		merge[""in""].setInput(r1[""out""])
		merge[""in1""].setInput(r1[""out""])
		merge[""in2""].setInput(r1[""out""])
		merge[""in3""].setInput(r2[""out""])

		# but then disconnect two so that the result should still be the same...
		merge[""in""].setInput( None )
		merge[""in2""].setInput( None )
		h1 = merge[""out""].image().hash()

		self.assertEqual( h1, expectedHash )

	def testHashPassThrough( self ) :

		r1 = GafferImage.ImageReader()
		r1[""fileName""].setValue( self.checkerPath )

		##########################################
		# Test to see if the input has is always passed
		# through if only the first input is connected.
		##########################################
		merge = GafferImage.Merge()
		merge[""operation""].setValue(8) # 8 is the Enum value of the over operation.

		expectedHash = r1[""out""].image().hash()
		merge[""in""].setInput(r1[""out""])
		h1 = merge[""out""].image().hash()

		self.assertEqual( h1, expectedHash )

		##########################################
		# Test that if we disable the node the hash gets passed through.
		##########################################
		merge[""enabled""].setValue(False)
		h1 = merge[""out""].image().hash()

		self.assertEqual( h1, expectedHash )


	# Overlay a red, green and blue tile of different data window sizes and check the data window is expanded on the result and looks as we expect.
	def testOverRGBA( self ) :
		r = GafferImage.ImageReader()
		r[""fileName""].setValue( self.rPath )

		g = GafferImage.ImageReader()
		g[""fileName""].setValue( self.gPath )

		b = GafferImage.ImageReader()
		b[""fileName""].setValue( self.bPath )

		merge = GafferImage.Merge()
		merge[""operation""].setValue(8) # 8 is the Enum value of the over operation.
		merge[""in""].setInput(r[""out""])
		merge[""in1""].setInput(g[""out""])
		merge[""in2""].setInput(b[""out""])

		mergeResult = merge[""out""].image()
		expected = IECore.Reader.create( self.rgbPath ).read()

		self.assertTrue( not IECore.ImageDiffOp()( imageA = expected, imageB = mergeResult, skipMissingChannels = False, maxError = 0.001 ).value )

	# Overlay a red, green and blue tile of different data window sizes and check the data window is expanded on the result and looks as we expect.
	def testOverRGBAonRGB( self ) :
		c = GafferImage.ImageReader()
		c[""fileName""].setValue( self.checkerPath )

		r = GafferImage.ImageReader()
		r[""fileName""].setValue( self.rPath )

		g = GafferImage.ImageReader()
		g[""fileName""].setValue( self.gPath )

		b = GafferImage.ImageReader()
		b[""fileName""].setValue( self.bPath )

		merge = GafferImage.Merge()
		merge[""operation""].setValue(8) # 8 is the Enum value of the over operation.
		merge[""in""].setInput(c[""out""])
		merge[""in1""].setInput(r[""out""])
		merge[""in2""].setInput(g[""out""])
		merge[""in3""].setInput(b[""out""])

		mergeResult = merge[""out""].image()
		expected = IECore.Reader.create( self.checkerRGBPath ).read()

		self.assertTrue( not IECore.ImageDiffOp()( imageA = expected, imageB = mergeResult, skipMissingChannels = False, maxError = 0.001 ).value )


if __name__ == ""__main__"":
	unittest.main()
",python,typescript,6.303504944901527e-07,6.84332710374649e-05,0.001222436431807218,0.0038070597901119227,0.012662866250336106,1.0196598375783074e-07,1.0266135513789056e-05,1.6872022654455971e-06,0.9822265186024498
"import pandas as pd

# Read the data
data = pd.read_csv(""apple stock data.csv"")

# Extract the data points
X = data[['open', 'high', 'low', 'volume']]
y = data['close']

# Fit the model
model.fit(X, y)

# Predict the stock price of Apple in 2021 
predict = model.predict([[Apple_open, Apple_high, Apple_low, Apple_volume]])
print(predict)",python,typescript,0.024398642445961616,0.15875467085954614,0.005537749902340275,2.6606976676221473e-06,0.00037020003535981783,1.738480126932716e-05,0.2690722848972766,3.035761188975284e-05,0.5418160487486889
"def sort_numbers(nums):
    for i in range(len(nums)-1):
        for j in range(i+1, len(nums)):
            if nums[i] > nums[j]:
                temp = nums[i]
                nums[i] = nums[j]
                nums[j] = temp
    return nums",python,python,4.5504501733196646e-05,6.89231253443069e-05,0.00010954751282083861,9.69196354515354e-06,1.5872317982823947e-05,0.019136937521150643,0.9804042275562692,0.00012615924142840733,8.313625972550846e-05
"import random
import string

def generate_password(length):
 chars = string.ascii_letters + string.digits + '$#&'
 return ''.join(random.choice(chars) for _ in range(length))

length = 8
password = generate_password(length)
print(password)",sql,sql,1.873970272211742e-12,6.84991847472801e-10,5.666072506143319e-10,1.2319573568586137e-06,6.155457491649994e-12,2.0834998901560427e-10,9.20146479615869e-07,0.9999978463740051,5.417997500180034e-11
"def stringCompare(str1, str2):
    if str1 < str2: 
        return -1
    elif str1 > str2: 
        return 1
    else: 
        return 0

str1 = ""Hello""
str2 = ""World""

result = stringCompare(str1, str2)
if result == -1:
    print (""str1 is less than str2"")
elif result == 1:
    print (""str2 is less than str1"")
else:
    print (""str1 is equal to str2"")",python,javascript,4.086873440802402e-05,0.00024359212460353088,6.787747191990345e-08,5.509906316879889e-07,0.8017024862633496,1.4644628459424696e-05,0.19400304974576973,0.003237580102061559,0.0007571595332444308
"# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class VirtualMachineScaleSetInstanceView(Model):
    """"""The instance view of a virtual machine scale set.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar virtual_machine: The instance view status summary for the virtual
     machine scale set.
    :vartype virtual_machine:
     ~azure.mgmt.compute.v2015_06_15.models.VirtualMachineScaleSetInstanceViewStatusesSummary
    :ivar extensions: The extensions information.
    :vartype extensions:
     list[~azure.mgmt.compute.v2015_06_15.models.VirtualMachineScaleSetVMExtensionsSummary]
    :param statuses: The resource status information.
    :type statuses:
     list[~azure.mgmt.compute.v2015_06_15.models.InstanceViewStatus]
    """"""

    _validation = {
        'virtual_machine': {'readonly': True},
        'extensions': {'readonly': True},
    }

    _attribute_map = {
        'virtual_machine': {'key': 'virtualMachine', 'type': 'VirtualMachineScaleSetInstanceViewStatusesSummary'},
        'extensions': {'key': 'extensions', 'type': '[VirtualMachineScaleSetVMExtensionsSummary]'},
        'statuses': {'key': 'statuses', 'type': '[InstanceViewStatus]'},
    }

    def __init__(self, *, statuses=None, **kwargs) -> None:
        super(VirtualMachineScaleSetInstanceView, self).__init__(**kwargs)
        self.virtual_machine = None
        self.extensions = None
        self.statuses = statuses
",css,typescript,0.0036447111643472304,0.010448347072250286,0.0010915088220387755,1.6552714160696295e-05,0.003856737613775526,2.574822084207049e-05,0.001040940225560493,0.0005366406376527828,0.9793388135293721
"# Import the library
import cx_Oracle

# Connect to the database
connection = cx_Oracle.connect('<username>', '<password>', '<database_url>')

# Create a cursor
cursor = connection.cursor()

# Execute a query
cursor.execute('SELECT * FROM my_table')

# Get the results
result = cursor.fetchall()

# Close the connection
connection.close()",sql,sql,0.00012290014163740125,0.00030272450981360554,2.5946905000249327e-05,6.912046426923208e-07,0.00021462953164255247,2.1743279104581643e-06,0.0002607352369142885,0.9892141169587074,0.00985608118373127
"import requests
from bs4 import BeautifulSoup

url = 'https://www.example.com/movies'
response = requests.get(url)
soup = BeautifulSoup(response.content, 'html.parser')

titles = []
ratings = []
dates = []
descriptions = []

# Get the movie titles
all_titles = soup.find_all('h3', class_='title')
for title in all_titles:
 titles.append(title.text)

# Get the movie ratings
all_ratings = soup.find_all('span', class_='rating')
for rating in all_ratings:
 ratings.append(rating.text)

# Get the movie dates
all_dates = soup.find_all('span', class_='date')
for date in all_dates:
 dates.append(date.text)

# Get the movie descriptions
all_descriptions = soup.find_all('p', class_='desc')
for description in all_descriptions:
 descriptions.append(description.text)

# Print out the collected data
for i in range(len(titles)):
 print(f'Movie Title: {titles[i]}')
 print(f'Movie Rating: {ratings[i]}')
 print(f'Movie Date: {dates[i]}')
 print(f'Movie Description: {descriptions[i]}')",python,css,2.997638077172551e-08,0.9084118393185001,0.08082580397914858,0.006199771260854771,0.00013203924053167688,0.0005794595966075872,0.002831099868918139,0.0008400566175939356,0.00017990014146469142
"import json

def serialize_object(obj):
    if hasattr(obj, '__dict__'):
        return obj.__dict__
    else:
        return obj

def serialize_class(class_instance):
    return json.dumps(class_instance, default=serialize_object)

if __name__ == '__main__':
    # Sample
    class Person:
        def __init__(self, name, age):
            self.name = name
            self.age = age
        def hello(self):
            print(""Hello, my name is {} and I'm {} years old"".format(self.name, self.age))
    
    person = Person('Jane', 20)
    print(serialize_class(person))",python,python,0.0008196178477970957,0.0010024438207815805,0.0037942692884121686,7.559666519257473e-05,7.939665817492378e-05,2.3592465024896614e-06,0.9922126112630548,0.001988667060764083,2.5038149320320743e-05
"from flask import Flask, request, jsonify
from textblob import TextBlob

app = Flask(__name__)

@app.route('/sentiment/analyze', methods=['POST'])
def sentiment():
    request_data = request.get_json()
    sentence = request_data['sentence']
    blob = TextBlob(sentence)
    sentiment = blob.sentiment.polarity
    response_object = {
        'sentiment': sentiment
    }
    return jsonify(response_object)
if __name__ == '__main__':
    app.run()",css,css,0.022407801423128103,0.609802981801884,0.0070752099716360145,0.00013546354624925305,0.0004783584702162307,0.00037288946506021804,0.3006023514576091,0.057094078658657274,0.002030865205559839
"def convert_base10_to_binary(num):
    binary_num = []
    while (num > 0): 
        binary_num.append(num % 2)
        num //= 2
  
    binary_num.reverse() 
    return binary_num",python,matlab,1.062039218964929e-05,1.5100895763456008e-07,2.651633282031777e-05,3.7419195024150816e-06,5.9044927028802425e-06,0.9993097892516065,0.0006205416959065206,4.151539116974561e-06,1.858336719718761e-05
"class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def is_balanced(node):
    if node is None:
        return True
    left_height = get_height(node.left)
    right_height = get_height(node.right)

    return (abs(left_height - right_height) <= 1
        and is_balanced(node.left) == True
        and is_balanced(node.right) == True
        )

def get_height(node):
    if node is None:
        return 0
    return 1 + max(get_height(node.left), get_height(node.right))",python,python,0.0003621643417506413,0.008509559482295368,0.002626234395594709,8.831542099975056e-05,0.00011217091375997333,3.5607034254075914e-05,0.9743577913373176,0.008184114085932098,0.005724042988095834
"def create_add_closure():
    def adder(a, b):
        return a + b
    return adder

add_func = create_add_closure()
print(add_func(2, 3)) # Output: 5",python,python,0.0011980439851529828,0.0011757368043443955,0.0007306102647490929,2.3442673666141477e-05,9.402825344852583e-05,2.727240653648153e-06,0.9966170903841911,0.00013952187375136088,1.879852004282086e-05
"def longest_valid_parentheses(s):
    # maintain a stack
    stack = []
    longest_valid_len = 0

    # traverse through the string
    for i in range(len(s)):
        # if current char is an opening bracket, push it to the stack
        if s[i] == '(':
            stack.append(i)
        else:
            # if closing bracket, check if the stack is empty
            if stack:
                # pop an opening bracket from the stack and calculate the length 
                current_len = i - stack.pop() + 1

                if stack:
                    # if the stack is not empty, subtract the top element from the current length
                    current_len -= (stack[-1] + 1)

                longest_valid_len = max(longest_valid_len, current_len)
            else:
                # if the stack is empty, reset the longest_valid_len
                longest_valid_len = max(longest_valid_len, current_len)

    return longest_valid_len

s = '()(()())'
print(longest_valid_parentheses(s)) # 6",python,matlab,0.006333895212015849,0.02226346878144816,0.005390175268412168,0.0005350093724969654,0.052199579409499194,0.5623229097460017,0.043315028607184086,0.029068893996735772,0.27857103960620594
"def mask_information(data):
  masked_data = """"
  for char in data:
    if char.isdigit():
      masked_data += 'x'
    else:
      masked_data += char
  return masked_data

masked_data = mask_information('John Smith,123-456-7890')
print(masked_data) // John Smith,xxx-xxx-xxxx",python,css,0.002182933122783673,0.710154263061576,0.019310709397250863,3.773363432789797e-05,0.0007956205626840247,0.005734083383257589,0.2542106940067402,0.004419170475115503,0.0031547923562642768
"def triangle_of_nums(n):
    k = 0
    for i in range(1, n + 1):
        # inner loop to handle number of columns 
        for j in range(0, i): 
           # printing numbers 
           print(k, end="" "") 
           # incrementing k 
           k = k + 1
        # ending line after each row 
        print(""\r"") 

n = 4
triangle_of_nums(n)

# Output:
# 0 
# 1 2 
# 3 4 5 
# 6 7 8 9",python,python,4.474713028005216e-05,1.1041033161524569e-05,5.2244569573431906e-05,3.8126580300486815e-06,1.4101268894258548e-05,0.001500785715375352,0.9983147069102414,4.967126110404395e-05,8.88945333975694e-06
"def main():
  val1 = 25
  val2 = 6
  sum = val1 + val2
  print(sum)
  return 0",python,python,0.023810934080441465,0.02644765073366129,0.01875113253716883,0.01116148837011274,0.0032785038490055983,0.0004047982435555395,0.9052485501151328,0.006109745488984526,0.004787196581937323
"class Person:
  def __init__(self, gender, age, name):
    self.gender = gender
    self.age = age
    self.name = name",python,python,0.00030404438501828104,0.004373377309873074,0.022735544906833015,0.2648070767973136,6.386303506542067e-07,1.04267586034149e-05,0.703213401958157,0.0043711571246995125,0.00018433212915147141
"from Bio.Seq import Seq
from Bio import SeqIO

seq = Seq(""ATGGGCTAG"")

# Count the occurrence of the DNA sequence
count = seq.count_overlap(seq)

print(count)",python,python,0.04382883207042543,0.06149055433533245,0.019544649889004444,0.0007709358915020499,0.012745945314748116,0.0004860222675014247,0.8137945651109378,0.003113449163437914,0.044225045957110465
"class Stack: 
   
    def __init__(self): 
        self.stack = [] 
   
    def isEmpty(self): 
        return len(self.stack) == 0
       
    def push(self, item): 
        self.stack.append(item) 
       
    def pop(self): 
        if (self.isEmpty()): 
            return ""Stack is empty""
       
        return self.stack.pop() 
       
    def peek(self): 
        if (self.isEmpty()): 
            return ""Stack is empty""

        return self.stack[-1] 
       
    def size(self): 
        return len(self.stack)",python,python,5.99948531073047e-05,0.008254083846441575,0.026568270711108264,5.703464065684293e-06,8.323251670011304e-05,5.826762643003899e-06,0.9047208743296636,0.06023165072562079,7.036279064966671e-05
"import requests

url = 'https://jsonplaceholder.typicode.com/posts'
response = requests.get(url)

if response.status_code == 200:
  posts = response.json()
  for post in posts:
    print(post['title'])",python,css,1.7027632640532976e-10,0.9699194084861582,0.00020611909607872112,0.028248889304905232,7.245799520808487e-06,3.089498974822262e-05,0.0015579938582949318,2.3230084365248887e-05,6.218210652174813e-06
"def quickSort(arr): 
	if len(arr) <= 1:
	return arr 
	else: 
		pivot = arr[0] 
		lessThanPivot = [number for number in arr[1:] if number <= pivot] 
		moreThanPivot = [number for number in arr[1:] if number > pivot] 
		return quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot)

arr = [3, 8, 6, 10, 11, 4] 
print(quickSort(arr))",python,matlab,8.23591161645647e-08,1.6739707020165017e-06,1.010483039538348e-07,2.4501605049447113e-08,1.5853139888636517e-08,0.9972982768038281,0.0026996819131388,7.321673938391317e-09,1.36228492045529e-07
"import tkinter as tk
 
# Set up the root window
root = tk.Tk()
 
# Create the table
table = tk.Frame(root)
table.grid(row=0, column=0)
 
# Set the row and column numbers
rows = 5
columns = 5
 
# Create the label for column 0
for i in range(rows):
    for j in range(1, columns):
        b = tk.Entry(table, text="""") 
        b.grid(row=i, column=j, sticky=""nsew"")
 
# Sort by column
def sortByColumn(col):
    list = table.grid_slaves()
    sortlist = []
    for l in list:
        if int(l.grid_info()[""column""]) == col:
            sortlist.append(l.get())
    sortlist = sorted(sortlist)
 
    i = 0
    for l in list:
        if int(l.grid_info()[""column""]) == col:
            l.delete(0, ""end"")
            l.insert(0, sortlist[i])
            i += 1
 
# Create the button to initiate the sort
for c in range(1, columns):
    tk.Button(table, text=""Sort"", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c)
 
# Diplay the root window 
root.mainloop()",sql,typescript,0.0034784753299063067,0.0026632856837538695,0.00783382077546953,0.0019814978300203953,0.009231787953905151,0.18838415921020576,0.0380912189213981,0.10087844654418855,0.6474573077511524
"import pandas as pd
from sklearn.linear_model import LinearRegression

# Load data
df = pd.read_csv('data.csv')

# Split data into train and test sets
X_train = df.loc[:2000, ['time']].values
y_train = df.loc[:2000, ['value']].values
X_test = df.loc[2000:, ['time']].values
y_test = df.loc[2000:, ['value']].values

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict values
predictions = model.predict(X_test)",python,css,0.006712757347565273,0.8224796449945272,0.024457087270435763,0.0002220756151691864,0.0001693798083813724,0.005615183010879544,0.1300786063618699,0.0016123984400593387,0.008652867151112513
"def wordCount(text):
    words = text.split(' ')

    return len(words)

print(wordCount(""I love programming""))  # 3",python,python,7.248679463456754e-05,0.005784627676754644,0.00042112568662981334,2.6420487654449195e-05,0.0001646582950083959,3.015074950404474e-05,0.9721735107113496,0.019183755680479437,0.002143263917985159
"name = input('What is your name? ')
print(f'Hello {name}!')",python,bash,0.9046496883683048,0.0010465927921154616,0.004398443122975364,0.040389354120973185,6.490447587660514e-06,3.813653007872734e-05,0.04932687842055753,8.140941297238691e-05,6.300678443477083e-05
"import random

def rock_paper_scissors():
    rps_dict = {
        0: 'rock',
        1: 'paper',
        2: 'scissors',
    }

    user_input = int(input(""Choose: 0 for rock, 1 for paper, 2 for scissors >>> ""))
    computer_input = random.randint(0,2)

    if user_input > 2 or user_input < 0:
        print(""Invalid input"")
    else:
        print(""You chose:"", rps_dict[user_input])
        print(""Computer chose:"", rps_dict[computer_input])
        if user_input == computer_input:
            print(""It's a draw!"")
        else:
            if user_input == 0 and computer_input == 2:
                print(""You win!"")
            elif user_input == 1 and computer_input == 0:
                print(""You win!"")
            elif user_input == 2 and computer_input ==1:
                print(""You win!"")
            else:
                print(""Computer wins!"")

rock_paper_scissors()",css,python,0.0016659706911580593,0.042490214507177944,0.0045225405948928245,0.00035271461334143164,9.732792025958732e-05,0.0006348711495183334,0.9289096735901617,0.0056437364764341195,0.01568295045705619
"import os

path = "".""

for dirName, subdirList, fileList in os.walk(path):
 print(os.path.abspath(dirName))",python,css,0.06135605951424845,0.670655169816696,0.008231923214182745,0.0002960671075801296,0.003887244979198196,0.018656489202627878,0.08168670294705555,0.15047028300117843,0.004760060217232532
"def merge_sorted_lists(list1, list2):
    merged_list = []

    while list1 and list2:
        if list1[0] < list2[0]:
            merged_list.append(list1.pop(0))
        else:
            merged_list.append(list2.pop(0))

    merged_list += list1 + list2

    return merged_list",python,python,0.0020827750556288113,0.025937496343458284,0.007381249422052858,0.0011779268139298926,0.0018719439813942962,0.04260404579992166,0.9015289657049709,0.0015426185306794354,0.01587297834796385
"""""""
Create a python program that connects to a database and returns a list of all the records in the table.
""""""

import mysql.connector

# Connect to the database
db = mysql.connector.connect(
    host=""localhost"",
    user=""root"",
    passwd=""password"",
    database=""schooldb""
)

# Select the table
cursor = db.cursor()
query = ""SELECT * FROM students""
cursor.execute(query)

result = cursor.fetchall()

# Print out all the records
for record in result:
    print(record)",sql,sql,0.004764002172969003,0.0002585342653236731,0.00016593164876908204,4.319002589695651e-06,0.03234269511009218,3.6444826245683e-05,0.0017068975706621065,0.9561689265243222,0.0045522488790265365
"def is_palindrome(s):
  s = s.lower()
  return s == s[::-1]

print(is_palindrome(""racecar"")) # True",python,python,0.0011376196787924466,0.003809897511028614,0.0028800175449074524,6.820669280161117e-05,0.00035509809578126495,6.22288500356138e-05,0.9906573835294684,0.0004299833667861991,0.0005995647303983185
"# find the minimum value using the min function
min_value = min(nums)

# print the minimum value
print(""The minimum value is: "",min_value)",python,javascript,0.0028297257796988744,0.018092903768232232,0.0017969480833606574,1.9733848302294636e-05,0.9105288037601135,0.018196914308037514,1.688900873439282e-05,0.0001740337740212652,0.04834404766949926
"for num in range(2,101):
 prime = True
 for i in range(2,num):
  if (num%i==0):
   prime = False
 if prime:
  print(num)",python,matlab,6.305838662918314e-15,4.982495474594019e-22,2.8295812089408655e-14,2.7016383455916415e-16,2.983141137586768e-16,0.9999999999827553,1.720178276451553e-11,5.314673294058522e-15,2.4355879034311637e-15
"def most_common_string(word_list):
    return max(set(word_list), key=word_list.count)

def most_common_integer(int_list):
    return max(set(int_list), key=int_list.count)",python,python,0.0016091374379041128,0.01035887932853179,0.0016284022465877786,0.00015048837605558725,0.0006688609973134587,7.212674910672058e-05,0.9812286877419799,0.003276666817265438,0.0010067503052552465
"def isArmstrong(num): 
  
    temp = num 
    sum = 0 
  
    while temp > 0: 
        digit = temp % 10
        sum += digit ** 3
        temp //= 10
  
    if num == sum:
        return True 
    else:
        return False

if __name__ == ""__main__"":
    num = 371
    result = isArmstrong(num)
    if result == True:
        print(f""{num} is an Armstrong number"")
    else:
        print(f""{num} is not an Armstrong number"")",python,matlab,1.7813392904553e-10,5.620810066391932e-12,6.414689136260756e-09,3.4588875325253775e-10,1.2767306954407478e-09,0.9999999859961857,5.408268773566543e-09,8.448623172949397e-11,2.8999610048137443e-10
"class Point:
 def __init__(self, x, y):
     self.x = x
     self.y = y

# create a Point object
p = Point(2, 4)

print(p.x)
print(p.y)",python,python,0.00014358283774376066,0.012487142983268437,0.019616666652672424,1.581876488814003e-05,2.3373669788945276e-05,4.369173964322434e-06,0.9322346355445271,0.03326846070663862,0.0022059496665082366
"import random
rand_num = random.randint(1000, 9999)",python,python,0.006927260167594611,0.013137350610541583,0.0064644337608785,0.0002676205034396218,0.0021189672336865144,0.0009007586425818768,0.9036843066717922,0.06329539115411498,0.003203911255370145
"from tkinter import *

root = Tk()
root.title(""Calculator"")

e = Entry(root, width=35, borderwidth=5)
e.grid(row=0, column=0, columnspan=3, padx=10, pady=10)

# Define buttons

def button_click(number):
 current = e.get()
 e.delete(0, END)
 e.insert(0, str(current) + str(number))

# Define clear function

def button_clear():
 e.delete(0, END)

# Define addition function 

def button_add():
 first_num=e.get()
 global f_num
 global maths
 maths=""addition""
 f_num = float(first_num)
 e.delete(0, END)

# Define equal function 

def button_equal():
 second_num= e.get()
 e.delete(0, END)
 
 if maths == ""addition"":
  e.insert(0, f_num + float(second_num))
 
# Create buttons

button_1 = Button(root, text=""1"", padx=40, pady=20, command=lambda: button_click(1))
button_2 = Button(root, text=""2"", padx=40, pady=20, command=lambda: button_click(2))
button_3 = Button(root, text=""3"", padx=40, pady=20, command=lambda: button_click(3))
button_4 = Button(root, text=""4"", padx=40, pady=20, command=lambda: button_click(4))
button_5 = Button(root, text=""5"", padx=40, pady=20, command=lambda: button_click(5))
button_6 = Button(root, text=""6"", padx=40, pady=20, command=lambda: button_click(6))
button_7 = Button(root, text=""7"", padx=40, pady=20, command=lambda: button_click(7))
button_8 = Button(root, text=""8"", padx=40, pady=20, command=lambda: button_click(8))
button_9 = Button(root, text=""9"", padx=40, pady=20, command=lambda: button_click(9))
button_0 = Button(root, text=""0"", padx=40, pady=20, command=lambda: button_click(0))
button_add = Button(root, text=""+"", padx=39, pady=20, command=button_add)
button_equal = Button(root, text=""="", padx=91, pady=20, command=button_equal)
button_clear = Button(root, text=""Clear"", padx=79, pady=20, command=button_clear)

# Put buttons on screen

button_1.grid(row=3, column=0)
button_2.grid(row=3, column=1)
button_3.grid(row=3, column=2)

button_4.grid(row=2, column=0)
button_5.grid(row=2, column=1)
button_6.grid(row=2, column=2)

button_7.grid(row=1, column=0)
button_8.grid(row=1, column=1)
button_9.grid(row=1, column=2)

button_0.grid(row=4, column=0)
button_clear.grid(row=4, column=1, columnspan=2)
button_add.grid(row=5, column=0)
button_equal.grid(row=5, column=1, columnspan=2)

root.mainloop()",sql,python,0.01067662602554733,0.0834812527231419,0.010077075156495141,0.0011871006120595263,0.011845375483657071,0.0017471037923183377,0.6520304319809457,0.2192909148047708,0.009664119421064333
"def remove_chars_at_indices(str, indices):
    new_str = """"
    for i in range(len(str)):
        if i not in indices:
            new_str += str[i]
    return new_str

str = ""Hello World!""
index = [0, 5, 9]
result = remove_chars_at_indices(str, index)
print(result)",python,python,0.0011729192605476608,7.857453156825211e-06,0.0010398768026247658,2.493136676383579e-10,0.005057910294125146,0.00010967288293773367,0.9925455352865722,6.457431967832436e-05,1.6534510437501511e-06
"# Import decision tree classifier from the sklearn library
from sklearn import tree
 
# Input data to the model
X = [[0, 0], [1, 1]]
y = [0, 1]
 
# Create a decision tree classifier object
clf = tree.DecisionTreeClassifier()
 
# Train the decision tree classifier
clf = clf.fit(X, y)",python,bash,0.99983905893424,9.364663069422123e-05,1.7601839586384089e-06,2.2897288839800675e-08,8.28847715055028e-07,6.704986035821806e-08,5.253794948111703e-05,7.006729373558453e-13,1.2077506061182739e-05
"# Load the dataset
import pandas as pd
csv_url = 'http://test.test/test.csv'
df = pd.read_csv(csv_url)

# Split the dataset into features and label
X = df.iloc[:, 0:4].values
y = df.iloc[:, 4].values

# Import the ML model
from sklearn.tree import DecisionTreeClassifier

# Create and fit the model
model = DecisionTreeClassifier()
model.fit(X, y)

# Predict the label
def predict(data):
    predicted_label = model.predict([data])
    return predicted_label",python,bash,0.9972775950326948,0.000367502630270429,2.348166827606898e-05,3.700159972707729e-08,6.284148669543654e-07,4.7957147387096275e-08,0.0019641370528628993,2.314323559341146e-11,0.00036657021913848403
"for i in range(1,11):
    print(i)",python,matlab,1.2415972227325905e-13,1.6911048586434646e-18,1.1057399553217356e-12,5.510266050076294e-15,7.48076876636178e-15,0.999998444523721,1.5554749300339005e-06,3.862174504852572e-14,6.723799180726865e-14
"def isPalindrome(s):
 s = s.lower()
 
 left = 0
 right = len(s) - 1
 
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 
 return True

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: True",python,python,0.004295171821103782,0.002980114677097297,0.006378732771307442,0.0001495141835942686,0.00045120056348356186,0.0001779228421439918,0.9839113663697834,0.0012988085748077904,0.00035716819667842956
"a = ""test""
b = ""test""

if a == b:
  print(""true"")
else:
  print(""false"")",python,python,0.002863689001538895,0.025434940566306588,0.017711296949233735,9.178745226113342e-05,0.0006858981721571365,0.009422335222084556,0.9404329339413159,0.001708669970929478,0.0016484487241725026
"import numpy as np
import pandas as pd
from sklearn.pipeline import Pipeline

# Define the preprocessing steps
data_process = Pipeline([
 ('extract_capacity', extract_column('capacity')),
 ('transform_capcity', StandardScaler()),
 ('extract_date', extract_column('date of commission')),
 ('transform_date', YearExtractorTransformer()),
 ('label', BooleanLabelEncoder()),
 ])

# Put the steps together into a pipeline
model = Pipeline([
 ('preprocessing', data_process),
 ('classification', RandomForestClassifier()),
 ])

# Fit and predict labels
model.fit(X_train, y_train)
y_pred = model.predict(X_test)",python,python,0.3598277519653996,0.06665780625804173,0.002923779815027945,8.310661709237209e-05,0.00035266201530061224,0.00015664588315554264,0.47905925399645305,2.0424295224273508e-05,0.09091856915430488
"text = ""Today it is a beautiful day.""
words = text.split()
print(""Number of words in the given text:"", len(words))",python,python,9.167815016509299e-06,0.00427938506969494,0.0003952208989397601,8.420147249414368e-06,0.003876080468656131,1.719696433434397e-05,0.7551021479290737,0.21079806260225628,0.025514318104779048
"class Student: 
    def  __init__(self, name, grade): 
        self.name = name
        self.grade = grade 
  
    def getGrade(self): 
        return self.grade",python,python,0.0008551594676386781,0.00941806196204807,0.03222659261852205,0.16713527254116597,1.515329322843158e-07,9.517996033038336e-06,0.7761246384654245,0.013415758059527248,0.0008148473567082804
"import numpy as np

def fitness_function(X):
 return X[0] * X[1] + X[2]

def generate_genes(n, lower, upper):
 return np.random.uniform(lower, upper, n)

def GA(genes, fitness, lower, upper, mutation_rate, max_iterations):
 max_fitness = -float('inf')
 max_genes = None
 n = len(genes)
 for iteration in range(max_iterations):
 if max_fitness >= fitness_function(genes):
 break
 # Generate new population
 parent_generation = []
 for _ in range(int(n/2)):
 parent_generation.append((genes, fitness_function(genes)))
 parent_generation.sort(key=lambda x: x[1], reverse=True)  # Sort  parents 
 # Select the best
 elite_genes, elite_fitness = parent_generation[0]
 # Crossover
 child_generation = []
 for _ in range(int(n/2)):  # Breed new population
 parent_1 = np.random.choice(parent_generation)
 parent_2 = np.random.choice(parent_generation)
 child_1, child_2 = crossover(parent_1, parent_2, n)
 child_generation.append(child_1)
 child_generation.append(child_2)
 # Mutate
 mutants = []
 for child in child_generation:
 if np.random.uniform(0, 1) < mutation_rate:
 mutants.append(mutation(child, lower, upper))
 else:
 mutants.append(child)
 # Update 
 for gene in mutants:
 genes = gene
 fitness = fitness_function(genes)
 if fitness > max_fitness:
 max_fitness = fitness
 max_genes = gene
 return max_fitness, max_genes

def crossover(parent_1, parent_2, n):
 n_split = np.random.randint(1, n)  # Split 
 child_1 = np.concatenate([parent_1[:n_split], parent_2[n_split:]])
 child_2 = np.concatenate([parent_2[:n_split], parent_1[n_split:]])
 return child_1, child_2

def mutation(gene, lower, upper):
 for i, gene_value in enumerate(gene):
 if np.random.uniform(0, 1) < mutation_rate:
 gene[i] = np.random.uniform(lower, upper)
 return gene

# Run GA
n = 3
lower = 0
upper = 1
genes = generate_genes(n, lower, upper)
mutation_rate = 0.1
max_iterations = 1000
max_fitness, max_genes = GA(genes, fitness_function, lower, upper, mutation_rate, max_iterations)

# Print results
print(""Maximum fitness score:"", max_fitness)
print(""Parameters:"", max_genes)",sql,python,0.01381342062528442,0.014375653590494452,0.012130443028095262,0.0011112940370376825,0.0015326029571472767,0.03647987056262119,0.8118676412184521,0.10686793904071103,0.0018211349401566297
"def find_all_substrings(s, k):
    substrings = []
    for start_idx in range(len(s)):
        if start_idx + k > len(s):
            break
        for end_idx in range(start_idx+k, len(s)+1):
            substrings.append(s[start_idx:end_idx])
    return substrings

s = ""abcdefg""
k = 2

print(find_all_substrings(s, k))",python,python,2.6723573437810374e-05,1.5544181196598943e-05,8.499461914613469e-05,1.860774422729427e-06,4.079996303793175e-06,0.45183854480259716,0.5478598624062089,0.00014678404269600755,2.1605603990834046e-05
"import nltk
from nltk.tokenize import word_tokenize

words = ['horse', 'dog', 'cat']

tokens = [word_tokenize(word) for word in words]

for token in tokens:
    print(nltk.pos_tag([token])[0][1])

# prints NN, NN, NN",python,python,0.06311985394145618,0.1497401704410178,0.013390704519931206,1.072856192721746e-05,0.0007245456624150529,0.0070546134227452645,0.4972876656582265,0.2683229428596955,0.00034877493258520003
"#!/usr/bin/env python

import numbers

import numpy as np
import pycuda.driver as drv
import pycuda.elementwise as elementwise
import pycuda.gpuarray as gpuarray
from pycuda.tools import dtype_to_ctype

# List of available numerical types provided by numpy: 
# XXX This try/except is an ugly hack to prevent the doc build on
# ReadTheDocs from failing:
try:
    num_types = [np.typeDict[t] for t in \
                 np.typecodes['AllInteger']+np.typecodes['AllFloat']]
except TypeError:
    num_types = []

# Numbers of bytes occupied by each numerical type:
num_nbytes = dict((np.dtype(t), t(1).nbytes) for t in num_types)

def set_realloc(x_gpu, data):
    """"""
    Transfer data into a GPUArray instance.

    Copies the contents of a numpy array into a GPUArray instance. If
    the array has a different type or dimensions than the instance,
    the GPU memory used by the instance is reallocated and the
    instance updated appropriately.
    
    Parameters
    ----------
    x_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance to modify.
    data : numpy.ndarray
        Array of data to transfer to the GPU.

    Examples
    --------
    >>> import pycuda.gpuarray as gpuarray
    >>> import pycuda.autoinit
    >>> import numpy as np
    >>> import misc
    >>> x = np.asarray(np.random.rand(5), np.float32)
    >>> x_gpu = gpuarray.to_gpu(x)
    >>> x = np.asarray(np.random.rand(10, 1), np.float64)
    >>> set_realloc(x_gpu, x)
    >>> np.allclose(x, x_gpu.get())
    True
    
    """"""

    # Only reallocate if absolutely necessary:
    if x_gpu.shape != data.shape or x_gpu.size != data.size or \
        x_gpu.strides != data.strides or x_gpu.dtype != data.dtype:
        
        # Free old memory:
        x_gpu.gpudata.free()

        # Allocate new memory:
        nbytes = num_nbytes[data.dtype]
        x_gpu.gpudata = drv.mem_alloc(nbytes*data.size)
    
        # Set array attributes:
        x_gpu.shape = data.shape
        x_gpu.size = data.size
        x_gpu.strides = data.strides
        x_gpu.dtype = data.dtype
        
    # Update the GPU memory:
    x_gpu.set(data)

def bufint(a):
    """"""
    Return buffer interface to GPU array.

    Parameters
    ----------
    a : pycuda.gpuarray.GPUArray
        GPU array.

    Returns
    -------
    b : buffer
        Buffer interface to array. Returns None if `a` has a length of 0.
    """"""

    assert isinstance(a, gpuarray.GPUArray)
    if a.size:
        return a.gpudata.as_buffer(a.nbytes)
    else:
        return None

def set_by_inds(dest_gpu, ind, src_gpu, ind_which='dest'):
    """"""
    Set values in a GPUArray by index.

    Parameters
    ----------
    dest_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance to modify.
    ind : pycuda.gpuarray.GPUArray or numpy.ndarray
        1D array of element indices to set. Must have an integer dtype.
    src_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance from which to set values.
    ind_which : str
        If set to 'dest', set the elements in `dest_gpu` with indices `ind`
        to the successive values in `src_gpu`; the lengths of `ind` and
        `src_gpu` must be equal. If set to 'src', set the
        successive values in `dest_gpu` to the values in `src_gpu` with indices
        `ind`; the lengths of `ind` and `dest_gpu` must be equal.

    Examples
    --------
    >>> import pycuda.gpuarray as gpuarray
    >>> import pycuda.autoinit
    >>> import numpy as np
    >>> import misc
    >>> dest_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32))
    >>> ind = gpuarray.to_gpu(np.array([0, 2, 4]))
    >>> src_gpu = gpuarray.to_gpu(np.array([1, 1, 1], dtype=np.float32))
    >>> misc.set_by_inds(dest_gpu, ind, src_gpu, 'dest')
    >>> np.allclose(dest_gpu.get(), np.array([1, 1, 1, 3, 1], dtype=np.float32))
    True
    >>> dest_gpu = gpuarray.to_gpu(np.zeros(3, dtype=np.float32))
    >>> ind = gpuarray.to_gpu(np.array([0, 2, 4]))
    >>> src_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32))
    >>> misc.set_by_inds(dest_gpu, ind, src_gpu)
    >>> np.allclose(dest_gpu.get(), np.array([0, 2, 4], dtype=np.float32))
    True

    Notes
    -----
    Only supports 1D index arrays.

    May not be efficient for certain index patterns because of lack of inability
    to coalesce memory operations.
    """"""

    # Only support 1D index arrays:
    assert len(np.shape(ind)) == 1
    assert dest_gpu.dtype == src_gpu.dtype
    assert issubclass(ind.dtype.type, numbers.Integral)
    N = len(ind)

    # Manually handle empty index array because it will cause the kernel to
    # fail if processed:
    if N == 0:
        return
    if ind_which == 'dest':
        assert N == len(src_gpu)
    elif ind_which == 'src':
        assert N == len(dest_gpu)
    else:
        raise ValueError('invalid value for `ind_which`')
    if not isinstance(ind, gpuarray.GPUArray):
        ind = gpuarray.to_gpu(ind)
    try:
        func = set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)]
    except KeyError:
        data_ctype = dtype_to_ctype(dest_gpu.dtype)
        ind_ctype = dtype_to_ctype(ind.dtype)        
        v = ""{data_ctype} *dest, {ind_ctype} *ind, {data_ctype} *src"".format(data_ctype=data_ctype, ind_ctype=ind_ctype)
    
        if ind_which == 'dest':
            func = elementwise.ElementwiseKernel(v, ""dest[ind[i]] = src[i]"")
        else:
            func = elementwise.ElementwiseKernel(v, ""dest[i] = src[ind[i]]"")
        set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)] = func
    func(dest_gpu, ind, src_gpu, range=slice(0, N, 1))
set_by_inds.cache = {}

def set_by_inds_from_inds(dest_gpu, ind_dest, src_gpu, ind_src):
    """"""
    Set values in a GPUArray by index from indexed values in another GPUArray.

    Parameters
    ----------
    dest_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance to modify.
    ind_dest : pycuda.gpuarray.GPUArray or numpy.ndarray
        1D array of element indices in `dest_gpu` to set. Must have an integer dtype.
    src_gpu : pycuda.gpuarray.GPUArray
        GPUArray instance from which to set values.
    ind_src : pycuda.gpuarray.GPUArray or numpy.ndarray
        1D array of element indices in `src_gpu` to copy. Must have an integer dtype.
    """"""

    assert len(np.shape(ind_dest)) == 1
    assert len(np.shape(ind_src)) == 1
    assert dest_gpu.dtype == src_gpu.dtype
    assert ind_dest.dtype == ind_src.dtype
    assert issubclass(ind_dest.dtype.type, numbers.Integral)
    assert issubclass(ind_src.dtype.type, numbers.Integral)
    N = len(ind_src)

    # Manually handle empty index array because it will cause the kernel to
    # fail if processed:
    if N == 0:
        return
    assert N == len(ind_dest)
    if not isinstance(ind_dest, gpuarray.GPUArray):
        ind_dest = gpuarray.to_gpu(ind_dest)
    if not isinstance(ind_src, gpuarray.GPUArray):
        ind_src = gpuarray.to_gpu(ind_src)
    try:
        func = set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)]
    except KeyError:
        data_ctype = dtype_to_ctype(dest_gpu.dtype)
        ind_ctype = dtype_to_ctype(ind_dest.dtype)        
        v = ""{data_ctype} *dest, {ind_ctype} *ind_dest,""\
            ""{data_ctype} *src, {ind_ctype} *ind_src"".format(data_ctype=data_ctype, ind_ctype=ind_ctype)        
        func = elementwise.ElementwiseKernel(v,
                ""dest[ind_dest[i]] = src[ind_src[i]]"")
        set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)] = func
    func(dest_gpu, ind_dest, src_gpu, ind_src, range=slice(0, N, 1))
set_by_inds_from_inds.cache = {}
",sql,typescript,0.08301861223608627,0.08261287462781909,0.020464641322603512,4.957454712604823e-05,0.052595986120255005,0.007692209254460767,0.04139043481525843,0.008545237947423914,0.703630429128967
"arr = [""python"", ""c++"", ""java"", ""java-script""]

result = []
for item in arr:
    if item.startswith(""java""):
        result.append(item)
print(result)",python,matlab,5.98442641037526e-05,8.881048363723967e-06,0.00013868350583898679,5.832249395785347e-10,8.508893272864482e-05,0.9996516365401228,1.3428602920401363e-05,1.0802265697798222e-08,4.242572043128985e-05
"def factorial(n):
 if n == 0:
 return 1
 else:
 return n * factorial(n-1)",python,python,4.1112715794483116e-05,7.136505564477444e-05,3.531836836023581e-05,1.2869066731951122e-06,3.5250645744119366e-05,2.5668894183900453e-05,0.9997573473952214,2.0337267220680918e-05,1.2312751157187427e-05
"""""""
Generate a Python script to scrub a list of emails for invalid entries
""""""

import re

def validate_email(email):
    # Create the regex
    email_regex = re.compile(r'[\w\.-]+@[\w\.-]+\.\w+')
    # Check whether the email is valid
    is_valid = email_regex.match(email)
    # Return the result
    return is_valid
    
def scrub_emails(emails):
    # Initialize a list for valid emails
    valid_emails = []
    # Loop over the emails and validate them
    for email in emails:
        # Check if the email is valid
        is_valid = validate_email(email)
        # If valid, append to the list
        if is_valid:
            valid_emails.append(email)
    # Return the list of valid emails
    return valid_emails",python,typescript,0.016346735313231667,0.013150217009072453,0.06479843752306717,1.1014105990562311e-05,0.0790690949343589,0.00537527146618054,0.05882245154967824,0.01844991808616359,0.7439768600122568
"def nth_prime_number(n):
    prime_numbers = [2]
    i = 3
    while len(prime_numbers) < n:
        for number in prime_numbers:
            if i % number == 0:
                break
        else:
            prime_numbers.append(i)
        i+= 2
    return prime_numbers[-1]


# test 
prime_number = nth_prime_number(5)
print(prime_number) # Output: 11",python,python,0.0020461803428784846,0.005026824311732599,0.0035191972359967755,0.0001881256921115293,0.0005777079743869015,0.026338216620262953,0.9606869077336506,0.0008587475669151833,0.0007580925220650735
"import collections

def find_frequent_words(text):
 words = text.split()
 word_counts = collections.Counter(words)
 
 # Get the most frequent words
 most_frequent = word_counts.most_common()
 
 return most_frequent

# Example output: [('This', 3), ('is', 3), ('a', 1), ('sentence.', 3), ......]",python,python,0.0006745447771291721,0.017119661691236077,0.012705721127738932,0.0014578673234616813,0.0008458154246095131,2.6948368183381654e-05,0.8771207877338567,0.08971565646970223,0.0003329970840823095
"def factorial(num): 
    if num == 0: 
        return 1 
  
    return num * factorial(num - 1) 
  
num = 6
print(""Factorial of"", num, ""is"", factorial(num))",python,matlab,1.899415407131241e-07,3.912502068640174e-11,4.5930750769516614e-07,5.9565027206065364e-08,4.469602168319439e-07,0.9988530371977589,0.0011452113060738116,2.058758675413332e-07,3.898068822790979e-07
"class StudentGrades:
    def __init__(self, grades=[]):
        self.grades = grades
    
    def add_grade(self, grade):
        self.grades.append(grade)

    def delete_grade(self, index):
        del self.grades[index]

    def update_grade(self, index, new_grade):
        self.grades[index] = new_grade",python,html,0.005072643574788359,0.08834881812368275,0.5429211007524056,8.754586940703842e-05,0.0010421426410553462,0.00024347466543495056,0.26445278055935034,0.09523812032229655,0.0025933734915790656
"numbers = [1, 7, 25, 8, 14]

# Sort the list in descending order
numbers.sort(reverse=True)

# Print the sorted list
print(numbers)

# Output
[25, 14, 8, 7, 1]",python,python,0.0030692126367668103,0.009977864361782959,0.004622493742315182,0.005329829875817213,0.19131660826479455,4.3376233389771287e-07,0.7829205662822111,0.0027411878094109306,2.180326456722869e-05
"def sort_dict_by_key(sample):
    # Create a sorted list of keys
    sorted_keys = sorted(sample.keys())
    # Iterate over the sorted sequence
    for key in sorted_keys:
        # Generate key-value pair
        print (key, sample[key])

sample = {'c':10, 'a':8, 'b':12, 'e':3, 'd':4}
sort_dict_by_key(sample)",css,css,0.0021375485565129364,0.8964786058592921,0.010658948406456228,0.00010780099058288864,0.03421220265748472,0.009218480969596097,0.027324045731281717,0.016153745699302557,0.0037086211294907836
"def calculate_stats(numbers):
    maximum = max(numbers)
    minimum = min(numbers)
    average = sum(numbers)/len(numbers)
    return (maximum, minimum, average)",python,java,6.282781758395105e-05,0.0002691221113306896,0.00046075275427432473,0.5368014900777964,0.001578634021779948,4.800064121494308e-10,0.4605604242850139,0.0001781188189463451,8.862963326800876e-05
"def multiply_numbers():
    num1 = float(input(""Enter first number: ""))
    num2 = float(input(""Enter second number: ""))
    result = num1 * num2
    print(""The result is "" + str(result))

multiply_numbers()",python,python,2.0574659735151963e-05,0.00021680351527306055,1.7167416624341387e-05,8.003197352604519e-08,1.4007855138999107e-05,1.745309736569197e-07,0.9996661767520251,6.319044873331152e-05,1.824789522774166e-06
"def f(x): 
    return x**2 - 3

def bisection(f,a,b,tol):
  c = (a+b)/2
  if f(c)==0 or (b-a)/2 < tol:
    return c
  elif f(c)*f(a) > 0:
    return bisection(f,c,b,tol)
  else:
    return bisection(f,a,c,tol)",python,python,0.0017040496833279832,0.0032021591673411154,0.002720992763705427,0.00012941715098988373,0.0007623843288995099,0.00030799072485505945,0.9896464387691964,0.00039465604062283887,0.0011319113710619175
"# -*- coding: utf-8 -*-

class Slot(object):
    """"""
    To use comb, you should create a python module file. we named *slot*.

    A legal slot must be named 'Slot' in your module file and it must be at least contain four method:

    * `initialize`

    initial resource, e.g: database handle

    * `__enter__`

    get next data to do,you can fetch one or more data.

    * `slot`

    user custom code

    * `__exit__`

    when slot finished, call this method

    """"""

    def __init__(self, combd):
        """"""Don't override this method unless what you're doing.

        """"""

        self.threads_num = combd.threads_num
        self.sleep = combd.sleep
        self.sleep_max = combd.sleep_max
        self.debug = combd.debug
        self.combd = combd

        self.initialize()


    def initialize(self):
        """"""Hook for subclass initialization.
        
        This block is execute before thread initial
        
        Example::

            class UserSlot(Slot):
                def initialize(self):
                    self.threads_num = 10 

                def slot(self, result):
                    ...
        
        """"""
        pass

    def __enter__(self):
        """"""You **MUST** return False when no data to do.

        The return value will be used in `Slot.slot`
        """"""
        print(""You should override __enter__ method by subclass"")
        return False


    def __exit__(self, exc_type, exc_val, exc_tb):
        """"""When slot done, will call this method.
        """"""
        print(""You should override __exit__ method by subclass"")
        pass


    def slot(self, msg):
        """"""
        Add your custom code at here.

        For example, look at:

        * `comb.demo.list`

        * `comb.demo.mongo`

        * `comb.demo.redis`


        """"""

        pass


        # @staticmethod
        # def options():
        # """"""
        # replace this method if you want add user options
        #     :return:
        #     """"""
        #     return ()
        #     pass
",python,typescript,2.3800240211678032e-05,0.001539080503026276,0.028857096641875777,0.01658489522286035,0.0004184059015021349,2.1381577066475095e-06,0.0205939532580623,0.03103866750323801,0.9009419625715168
"import random

class NimAgent():
    # This stores the history of moves 
    # each game.
    game_history = []

    def __init__(self):
        self.move_choice = None
        self.game_won = False

    def reset(self):
        self.move_choice = None
        self.game_ won = False

    def get_move(self, board):
        # starting condition, no history recorded
        if len(self.game_history) == 0:
            return random.randint(1,3)

        # check if the game has been won in the last move
        if sum(board) == 0:
            self.game_won = True
            return -1

        # analyze the game history   
        # look for patterns
        optimalMove = self.analyze_game_history()
        return optimalMove
    
    def analyze_game_history(self): 
        #TODO: implement the analysis of game history 
        # to play the optimal move
        pass

    def update_move_history(self, board):
        # Add the current game board state to the history
        self.game_history.append(tuple(board))",python,sql,0.0001613437349672309,0.003299481956794594,0.010443713011669251,8.822794314896995e-07,0.00016244338103481675,5.891150972983728e-07,0.04257999596937498,0.9348386248015046,0.00851292575012557
"import smtplib

sender_email = ""sender@gmail.com""
receiver_email = ""receiver@example.com""
password = 'password'

message = """"""\
Subject: Hi There

This is an email to test the Gmail SMTP service.
""""""

server = smtplib.SMTP('smtp.gmail.com', 587)
server.ehlo()
server.starttls()

server.login(sender_email, password)
server.sendmail(sender_email, receiver_email, message)

server.quit()",python,java,1.8621572889974889e-06,0.006371583915752333,0.19880867215345618,0.6730042807247422,0.0023929013231846477,1.700962611869391e-05,0.09007698839200505,0.0029713510266830643,0.026355350680768795
"d = {""name"": ""John"", ""age"": 45, ""location"": ""San Francisco""}
for key in d:
 d[key] = str(d[key]).upper()

print(d)
# Output: {""name"": ""JOHN"", ""age"": 45, ""location"": ""SAN FRANCISCO""}",css,css,0.0011000708401276026,0.9793801324841085,0.009422879164979844,0.001237292593489496,3.449668059413133e-05,0.00011716596355878257,0.00855173337954237,0.00011273269737511626,4.349619622407097e-05
"from selenium import webdriver

url = 'https://en.wikipedia.org/wiki/Python'

driver = webdriver.Chrome()
driver.get(url)

page_content = driver.page_source
 
driver.close()

# Process page_content",python,java,6.72008223305819e-07,0.000682932198661864,0.00010344058957230848,0.9948284141706838,4.451566902164921e-05,7.130655203067924e-07,0.004050191549687898,0.00016322533728157395,0.00012589541134728075
"def sort_dicts_by_keys(dct1, dct2):
    result = {}
    keys = sorted(list(dct1.keys()) + list(dct2.keys()))
    for key in keys:
        if key in dct1:
            result[key] = dct1[key]
        else:
            result[key] = dct2[key]
        
    return result",python,css,7.87334698783261e-05,0.9034043144530202,0.0004413167709408654,6.3711485926166205e-06,0.00025713607273208656,0.00030321817603940794,0.0913135051306573,0.004032713866455402,0.00016269091168387662
"def is_prime(num):
     
    # Return False if num is less than 2
    if num < 2:
        return False
     
    # Check if any number from 2 to (num - 1) divides num
    for i in range(2, num):
        if num % i == 0:
            return False
             
    else:
        return True

nums = []
num = 2

while len(nums) < 100:
    if is_prime(num):
        nums.append(num)
    num = num + 1

print(nums)",python,matlab,8.310726398612636e-12,1.3680372024481706e-16,6.771180516322628e-11,1.2418203769242241e-12,3.0249308546869675e-12,0.9999992214317819,7.783924224659451e-07,2.1762616772630548e-11,7.374355655343985e-11
"def sort_alphabetically(my_list):
    return sorted(my_list)

print(sort_alphabetically(my_list)) # ['C++', 'Java', 'JavaScript', 'Python']",python,matlab,0.08452719573172046,4.5764692109364085e-06,0.008727676830378426,2.0387960094061643e-05,0.07677972356641612,0.6013209377950942,0.21666186486930641,0.0008921924818268107,0.01106544429595245
"def classify_email(email_list):
    spam_count = 0
    ham_count = 0
    uncertain_count = 0
    for email in email_list:
        if 'offer' in email or 'discount' in email:
            spam_count += 1
        elif 'welcome' in email or 'company' in email:
            ham_count += 1
        else:
            uncertain_count += 1
    return {'spam': spam_count, 'ham': ham_count, 'uncertain': uncertain_count}",css,python,0.008910858808250795,0.06797519142348471,0.02416868913859422,0.00020568347459813075,0.008194579635351713,0.251073650892327,0.6196103622938454,0.002385285336615308,0.017475698996932625
"The Fast Fourier Transform (FFT) is an efficient algorithm used to compute the discrete Fourier transform (DFT). The algorithm works by decomposing a signal into its real and imaginary components and then applying a simple vector algorithm to compute the imaginary and real components simultaneously. In Python, the FFT algorithm can be implemented by using Numpy's fft function. In order to compute the FFT, the signal must first be broken into overlapping blocks and the DFT of each block must be computed separately. The blocks are then stitched together to form the final FFT result. The algorithm has several advantages, such as its ability to reduce the number of computations necessary to compute the DFT, as well as its parallelizability, meaning it can be efficiently executed on multiple CPUs.",typescript,typescript,1.0925714205821691e-11,1.5819968706402434e-11,3.044167414197884e-11,2.8374193684906305e-13,7.0944246182372196e-06,3.1847226724250664e-12,7.223969054275623e-12,4.331655606288635e-12,0.9999929055031703
"list = [3, 1, 6, 9, 10, 5]
list.sort()
print(list)  # prints [1, 3, 5, 6, 9, 10]",python,python,0.01197764181913828,0.006005842730024875,0.002633394068221515,1.4029436699509589e-06,0.0008865266502808503,0.013314228413294793,0.9623700506156452,0.002290625136800194,0.0005202876229243127
"class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model",python,python,0.3746697726880748,0.0016429671357779852,0.01199994252657971,0.00012231075960842373,1.5241946266443746e-07,5.3633356338209705e-06,0.6114554218127006,4.952679952358075e-05,5.4542522638269075e-05
"def remove_duplicates(list):
    new_list = []
    for e in list:
        if e not in new_list:
            new_list.append(e)
    return new_list

list = [1, 2, 3, 1, 3, 4]
list = remove_duplicates(list)
print(list)",python,matlab,7.757785902372595e-05,0.0002633007200621029,0.0004571195614856488,1.1523600045331127e-05,9.51360114311236e-05,0.9851699886035498,0.010482717568849952,0.0032430809424532185,0.00019955513309903076
"def frequency(sentence):
    words = sentence.split()
    frequency = {}
    for word in words:
        if word in frequency:
            frequency[word] += 1
        else:
            frequency[word] = 1
    
    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])
    return most_common_word, frequency",python,python,0.007762872670028336,0.024456421211336406,0.012799800599196205,4.145042275377647e-05,0.0008703199576556005,0.002841366614675314,0.9290016600496613,0.021960024698620014,0.0002660837760731758
"# importing matplotlib module
import matplotlib.pyplot as plt

# list of numbers 
numbers = [2, 5, 2, 8, 3, 9, 4, 10]

# draw histogram 
plt.hist(numbers, bins = [0, 2, 4, 6, 8, 10])

# x label, y label and title
plt.xlabel('Numbers');
plt.ylabel('Frequency');
plt.title('Histogram for Numbers')

# display histogram 
plt.show()",python,html,0.00031661538049991783,0.005135875038882738,0.5981384985681657,0.07686877382395808,0.014548808147633862,3.071051723935005e-06,0.28984333570519005,0.002219051181156843,0.012925971102788845
"def print_fibonacci_seq(n):
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a + b

if __name__ == '__main__':
    n = 100
    print_fibonacci_seq(n)",python,python,0.00015067426382415745,0.003868637605738176,0.0007600840272229429,3.1858085471648096e-05,0.00017305645553380953,0.0007415902667543727,0.9921741539456076,0.0018382464575763752,0.000261698892270719
"def add(num1, num2):
    return num1 + num2

print(add(1, 2))",python,python,3.997252839759963e-05,0.00012433422305748706,0.0001321601264124096,0.008444822902945298,3.159959527479571e-05,3.4822767174390343e-09,0.9909221848332281,0.00028581011943727653,1.9112188970290858e-05
"num = 1
while num <= n:
    if num % 2 == 0:
        print(num)
    num += 1",python,matlab,3.439688295551294e-12,1.021268565125607e-17,1.1130260295092161e-11,9.113333000347583e-13,9.41637988462767e-13,0.9999999979645489,2.0118220373099038e-09,1.553034453205252e-12,5.653093973480854e-12
"import random

def display_random_items(lst, num):
 random.shuffle(lst)
 return lst[:num]

lst = [""dog"", ""cat"", ""bird"", ""fish""]
num = 3

random_items = display_random_items(lst, num)
print(random_items)",python,python,8.888655371594257e-05,4.568314692044245e-06,0.0002047091019628537,6.509132443081001e-06,2.568897098631123e-05,0.02626064299023516,0.9725678374882996,0.0007783596014235919,6.279784624124012e-05
"def check_if_list_is_in_alphabetical_order(words_list):
    for i in range(len(words_list)-1):
        if words_list[i] > words_list[i+1]:
            return False
    return True
 
words_list = ['cat', 'dog', 'hippo', 'horse']
result = check_if_list_is_in_alphabetical_order(words_list)
print (result)",python,python,0.00015800532438461193,0.001228504621981667,0.0006940639080310517,1.9220139173533736e-05,4.023568743097885e-05,0.0010183015408426032,0.9964036419917531,0.0002789881052275627,0.00015903868117465189
"def reverse_sort(arr): 
    return sorted(arr, reverse=True) 
  
# driver code 
arr = [""tomato"", ""apple"", ""mango""] 
sorted_arr = reverse_sort(arr) 
  
print(sorted_arr)",python,python,0.0003899709638881842,0.002881269936851764,0.00035204918520148013,0.0002551308340627659,0.00012945607046484063,0.005725892385420866,0.9885771488581458,2.0564018628674383e-05,0.0016685177473355216
"unsorted_list = [7, 2, 5, 1, 3]
def bubblesort(unsorted_list):
    length = len(unsorted_list)
    for i in range(length):
        for j in range(length - i - 1):
            if unsorted_list[j] > unsorted_list[j + 1]:
                unsorted_list[j], unsorted_list[j + 1] = unsorted_list[j + 1], unsorted_list[j]
    return unsorted_list
print(bubblesort(unsorted_list))",python,python,0.002368087386944697,0.0013581306561967598,0.0024736113142761894,0.00034283545650284116,0.0069162726870088875,0.07517489710196504,0.9065940646886025,0.0027689980213300492,0.0020031026871731054
"def fahrenheit_to_celsius(f):
    celsius = (f - 32.0) * (5.0/9.0)
    return celsius

fahrenheit = 98.6
celsius = fahrenheit_to_celsius(fahrenheit)
print(""The temperature in celsius is: "", celsius)",python,python,0.013886505154712273,0.0406444084884989,0.01557327864461381,0.001214349099870514,0.013862630549444832,0.00639722784851987,0.8774108339206699,0.004395549041175506,0.02661521725249428
"[x**2 for x in [1, 2, 3, 4, 5, 6] if x % 2 != 0]",matlab,matlab,6.077689812575443e-12,4.000485558888258e-12,3.667997086347792e-11,1.4963649338097925e-13,1.9505100251949266e-12,0.9999999998423279,7.76740659378566e-11,2.1600379577386735e-11,9.539474286139092e-12
"def total_cost(items):
    total_cost = 0
    for item in items:
        quantity = item[1]
        unit_price = item[2]
        total_cost += quantity * unit_price
    return total_cost",python,python,0.0016931862816154668,0.09270792755711289,0.03763907657124658,0.00028613822441474337,0.07096251298334873,0.0012886441710143152,0.7942842163448981,0.0008208825169025729,0.00031741534944683544
"def classify_error(message):
    if 'Connection timed out' in message:
        return 'Network'
    else:
        return 'Other'",python,python,9.558273762883703e-05,0.034540910043565465,0.004726883260978243,0.3427446078518385,0.0023124581958282086,0.002338058890050152,0.6088940538995602,0.0030567484114352255,0.0012906967091150731
"def replace_char(string, character, replacement):
   return string.replace(character, replacement)

string = ""Hello World""
character = ""l""
replacement = ""X""
print(replace_char(string, character, replacement))",python,python,2.0146377900411335e-05,0.008974008496232182,0.0023637586062115272,0.05970996555797972,4.578418112660108e-07,1.6120398202519154e-05,0.9132850219794195,0.015227447418164106,0.00040307332407846116
"import numpy as np
from sklearn.linear_model import LinearRegression

# Load the data
data = np.genfromtxt('apple_stock.csv', delimiter=',')
X = data[:, :-1] # features 
y = data[:, -1] # target

# Create the regression model 
model = LinearRegression()
model.fit(X, y)

# Make predictions 
predictions = model.predict(X)",python,bash,0.6097860398005005,0.028299748602324218,0.0055720615391073825,3.5272514926350853e-06,2.5710843929123808e-05,8.944712409877248e-06,0.2979835550532678,1.612717698451294e-07,0.058320250925198665
"# Generate a flag made up of *
flagString = """"

for i in range(flagSize):
    flagString += ""*""

print(flagString)",python,matlab,6.496638023022739e-05,1.2632972793814674e-06,0.00013469229886254035,7.5964869300388e-07,1.5211295844412086e-05,0.9864265164104921,0.013318876931521562,1.2471416073141726e-05,2.52423210038215e-05
"<!DOCTYPE html>
<html>
<head>
    <title>Input Page</title>
</head>
<body>
    <h1>Input Page</h1>
    <form action=""script.py"" method=""POST"">
      <label>Enter your input: <input type=""text"" name=""user_input"" size=""50""></label>
      <input type=""submit"" text=""Submit"">
    </form>
</body>
</html>",html,html,3.772785508632779e-20,4.0819640920399067e-19,1.0,3.2154052323537256e-20,2.9342562080178443e-20,1.834461194785887e-23,1.0390820271548677e-22,6.79725154396804e-22,9.101209252090585e-23
"class Dog:
    def __init__(self, name):
        self.name = name

    def get_name(self):
        return self.name",python,java,1.5411739931452605e-05,1.4097308328811429e-05,0.0003831284804970119,0.9504416763551652,2.9038236456157253e-11,2.5457999969907065e-08,0.048991268479258256,0.00015245658548646604,1.9355642945026167e-06
"def is_digit(x):
  return x.isdigit()",python,python,5.907360880303802e-05,0.00023670836695159606,0.00024420938444055123,1.3506715735368721e-05,4.645279323651542e-05,1.2543554699596302e-06,0.999148057615046,0.0001982069042543101,5.2530256062769655e-05
"import numpy as np
from scipy.optimize import minimize

def equation(x):
    return x**5 + 5*x**4 - 10*x**3 - 40*x**2 + 81*x 

results = minimize(equation, [0])
minx = results.x
miny = results.fun

print('The minimum value of f(x) is {:.2f} when x={:.2f}.'.format(miny, minx))",css,css,2.627144765023836e-05,0.8827725453162528,0.0021193859680875378,0.03264605048595551,0.06271163242268928,0.0006087462236025581,0.01478372447755387,0.00015381753586371554,0.00417782612234444
"def fibonacci(n): 
   if n<= 0: 
      print(""Incorrect input"") 
   elif n==1: 
       return 0
   elif n==2: 
       return 1
   else: 
       return(fibonacci(n-1) + fibonacci(n-2)) 

# Function calls
fibonacci(15)",python,python,0.0001675108845221025,0.0003617949985970235,0.00011410034991372268,6.189625557184466e-06,0.009668727756521285,1.6641184864524766e-05,0.9896018275796395,5.4731000036099245e-05,8.476620348569664e-06
"employee = {
 'name': 'John',
 'age': 28
}",css,css,0.00038034026918281054,0.9920709640242532,0.0006820479690218521,0.005394839583728923,1.0926837426290838e-06,0.0013032566697747158,6.218750192834805e-05,7.4693526513404356e-06,9.780194571629222e-05
"import json
import requests

api_url = ""https://www.googleapis.com/books/v1/volumes?q=""
query = ""Alice in Wonderland""

# form the API call URL
url = api_url + query

# issue API call
response = requests.get(url)

# parse the API response
response_JSON = json.loads(response.text)

# loop through API response and print the book titles
for item in response_JSON[""items""]:
    print(item[""volumeInfo""][""title""])",python,css,1.513584364039703e-10,0.9958945340467624,0.0009261159577653123,0.000981295370953061,0.00010764983463233155,2.16116537112258e-06,0.0019640967640057855,3.383473707082871e-05,9.031197208064785e-05
"def convert_str_list(x):
    return x.split()

print(convert_str_list(""This is a test""))",python,python,0.0005501804235446433,0.0006246826540227911,0.002785817368226641,0.0011047465813140425,4.801376037702986e-05,9.377758993798961e-06,0.9889743683435231,0.004032237801241247,0.0018705753087566715
"def search_word(sentence, word):
    words = sentence.split("" "")

    if word in words:
        return True
    else:
        return False",python,python,0.0008934976669096312,0.0004582881538249847,0.004184746280581107,2.8588279706654984e-07,8.000732972145614e-06,1.0389465963275978e-05,0.9868851343035224,0.0075586026442892446,1.0548691402836873e-06
"# brute force search algorithm
def brute_force_search(arr, target):
	for i in range(len(arr)):
		for j in range(len(arr)):
			if arr[i] + arr[j] == target:
				return arr[i], arr[j]
	return None

# test the algorithm
target = 8
lst = [1, 3, 4, 5, 6, 7]
print(brute_force_search(lst, target))

Output:
pair = (3, 5)",python,python,1.9063361229825495e-07,2.0593336674288034e-06,1.4868380523844963e-06,5.154672902825964e-07,1.0811190656025072e-07,0.29927238261412575,0.7007214442049474,5.634408999677006e-07,1.24935549786642e-06
"import string
import random

def generate_random_string():
 chars = string.ascii_letters + string.digits
 random_string = ''.join(random.choice(chars) for _ in range(20))
 return random_string
 
random_string = generate_random_string()
print(random_string) // ""xVUqrHZkXDjzXFVfBmO7""",sql,sql,4.508861950823172e-09,1.2432014084553639e-06,2.410944342334093e-06,0.0010311984898617613,1.4205152979746894e-10,3.647273969179798e-07,0.00039742005109628844,0.9985670905892188,2.673457619777663e-07
"import tkinter

def increase_count():
 global count
 count += 1
 counter_label.config(text=str(count))
 
# Create the main window
root = tkinter.Tk()
root.geometry(""300x200"")

# Create a label to show the count
count = 0
counter_label = tkinter.Label(root, text=str(count))
counter_label.pack()

# Create a button to increase the count
increase_button = tkinter.Button(root, text=""Increase Count"", command=increase_count)
increase_button.pack()

# Run the main loop
root.mainloop()",python,python,0.014610682435856838,0.016078034634563566,0.006686776870097408,2.599305537094653e-05,0.0057406687068406684,4.028965677178074e-05,0.5302165399319326,0.09717379831651873,0.3294272163920474
"# package imports
import nltk
from nltk.corpus import stopwords 
from nltk.tokenize import word_tokenize, sent_tokenize 

# store the text document as a string
text = '''
This is a sample text document that will be used to find the keywords. 
It has a few sentences that talk about different topics such as sports, 
technology, and entertainment.
'''

# tokenize sentences
sentences = sent_tokenize(text) 

# store keyword set
keywords = set() 

for i in sentences: 
	
	# tokenize words
	words = word_tokenize(i) 
	
	# remove stopwords
	words = [w for w in words if not w in stopwords.words('english')] 

	# store keywords
	keywords = keywords.union(set(words)) 

print(keywords)

# Output: 
{'different', 'sentences', 'sports', 'document', 'Technology', 
'entertainment', 'find', 'sample', 'text', 'topics'}",python,typescript,2.368459748921299e-06,6.200980829444457e-05,6.485042189405015e-05,2.782603176540018e-06,2.205953156072941e-05,2.6038282327338093e-05,0.0008078521273722429,0.00047666840409024973,0.9985353703615356
"import requests
from bs4 import BeautifulSoup

url = 'https://www.wikipedia.org' 
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')
title = soup.find('title').text
print(title)
# Output: Wikipedia",python,html,1.3671696320914801e-11,0.264375528694434,0.735151462869333,0.0004341989141746328,3.7407753770209014e-07,1.2293377800345678e-08,3.097198724141532e-05,7.3299819946736316e-06,1.2116823506616288e-07
"class Circle :
    def __init__(self, r):
        self.radius = r
    
    def area(self):
        return self.radius**2*3.14

#Example
circle = Circle(2)
circle.area()
# Output: 12.56",python,python,0.0003852411003143487,0.006617533247118761,0.04303158785694873,0.0003748427115983869,0.00015966201362017875,8.576272146265363e-06,0.9410262180950252,0.008328845162658274,6.749354056985139e-05
"import math

def is_prime(n):
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            return False
    return True

print(is_prime(n))",python,python,1.5640000220304727e-05,3.10128017279243e-06,2.9930145919764695e-05,9.668148616784375e-05,4.623140271859002e-07,6.80353814355871e-07,0.999851423367945,1.0711619421818737e-06,1.0098897905988786e-06
"from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X, y)

def predict_class(X):
 pred = model.predict([X])
 return pred",python,bash,0.5877980860935922,0.004464880354876914,0.0015955315755382437,6.223912219897059e-05,0.00012021570444063336,6.0097741137973594e-05,0.4057911174939477,1.451436071433583e-07,0.00010768677066020712
"def sum_numbers(n):
    total = 0
    for i in range(n+1):
        total += i
    return total

print(sum_numbers(20))",python,python,2.9334354817035942e-05,7.809073095372393e-05,0.00015007913753298238,2.861417464690461e-06,6.190322954146348e-06,0.0012880763420042636,0.9983917109142231,2.433778431756196e-05,2.9318995732585902e-05
"import csv

# Initialize empty list
data = []

# Open csv file
with open('data.csv', 'r') as csv_file:
  # Parse csv file
  csv_reader = csv.reader(csv_file)
  
  # Iterate over rows 
  for row in csv_reader:
    # Convert each row into a dictionary
    row_dict = {
      'name': row[0],
      'age': row[1],
      'location': row[2]
    }
    
    # Append dictionary to data list
    data.append(row_dict)

# Display output
print(data)",css,css,0.0016698588512987782,0.8902876200510459,0.042426636720304195,0.00010578110096235482,0.00010990606637460675,0.0023165350546336563,0.03085483465398332,0.018096744998275925,0.014132082503121304
"def sum_squares(x, y):
    return x**2 + y**2

x = 2
y = 4
s = sum_squares(x, y)
print(""The sum of two squares is {}"".format(s))",python,java,0.002354327849729197,0.0026120589026780994,0.0038950437753854914,0.7446011008050987,0.18125419320548156,1.9213408119418532e-07,0.05182116219549882,0.0008312494363354255,0.012630671695711717
"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras import layers

#importing the dataset
df = pd.read_csv('spam.csv', encoding='latin-1')
df.head()

#cleaning the data
msg = df.v2
corpus = msg.apply(lambda row: row.lower())

#splitting dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(corpus, msg, test_size=0.2, random_state=0)

#vectorizing the data
vectorizer = CountVectorizer()
X_train = vectorizer.fit_transform(X_train)

#generating the model
model = Sequential()
model.add(layers.Dense(10, input_shape=(X_train.shape[1],), activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

#training the model
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=128, verbose=2)",python,python,0.2289862268828806,0.03436834719967103,0.045601984115884925,2.2460830629050125e-05,1.4147296609390258e-05,1.6205328719820217e-06,0.6668043782364262,4.426232492599624e-06,0.02419640867253418
"def merging_lists(list1, list2):
    # Merge two sorted lists
    merged_list = []
    i, j = 0, 0
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            merged_list.append(list1[i])
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
    # Add any leftover items from the original lists
    merged_list.extend(list1[i:])
    merged_list.extend(list2[j:])
 
    return merged_list",python,python,0.0016627625054313013,0.012790671166890366,0.0057502797932680455,0.005961506072837205,0.001116392361074468,0.0004933793674923335,0.9598071059878613,0.001495714987113998,0.010922187758031004
"# Create a function to compute the total cost of purchasing the items
def compute_cost(items):
 total = 0
 for item in items:
 total += item['price']
 return total

# Create a function for computing the maximum cost of purchasing the items
def compute_maximum_cost(items, budget):
 max_cost = 0
 n = len(items)
 
 # Generate all possible combinations of items
 for i in range(1 << n):
  current_cost = 0
  for j in range(n):
   if i & (1 << j):
    current_cost += items[j]['price']
 
  if current_cost <= budget and current_cost > max_cost:
   max_cost = current_cost
 
 return max_cost

 # Create a function for determining the optimal set of items to purchase
 def compute_optimal_items(items, budget):
  n = len(items)
  max_cost = compute_maximum_cost(items, budget)
  optimal_set = []
  
  # Generate all possible combinations of items
  for i in range(1 << n):
   current_cost = 0
   for j in range(n):
    if i & (1 << j):
     current_cost += items[j]['price']
 
   if current_cost == max_cost:
    for j in range(n):
     if i & (1 << j):
      optimal_set.append(items[j]['name'])
  return optimal_set",python,javascript,1.68378480143736e-05,0.0014030710641812045,0.000198852227214564,1.8139378725673808e-06,0.8709847523074425,0.07434946599622533,0.052886387072310526,0.0001309263317143634,2.7893215024396155e-05
"val = [1, 10, 125, 400]
res = []

for v in reversed(val):
    res.append(v)
    
print(res) # Output: [400, 125, 10,1]",python,python,0.00435448054077815,0.12564172404131108,0.011258259427914181,0.0002642077701704953,0.0009342878665416104,0.07323349039800206,0.7828778811969481,0.0008639069050097252,0.0005717618533245693
"import string 
import random 

def generate_password():
  chars = string.ascii_uppercase + string.ascii_lowercase + string.digits 
  size = 8
  return ''.join(random.choice(chars) for x in range(size,15)) 
    
password = generate_password()

print(""The generated random 8-character alphanumeric password is: "" + password)",sql,sql,5.18643558452958e-12,2.1463716868512517e-08,2.859550784951654e-08,0.00013878327909973897,3.34055965793098e-13,2.6235537451756445e-09,2.243866572561593e-06,0.9998589146150844,5.5509441514748365e-09
"d = { ""A"": 4, ""B"": 6, ""C"": 10 }",css,python,0.0001716862262808112,0.013801343011421129,0.0025951614739621325,5.723377054654816e-05,0.00017015774424723612,0.00552169408575227,0.9774920624040947,2.2554188224354584e-07,0.00019043574181317765
"import numpy as np

def rmse(predictions, targets):  
    differences = predictions - targets                      
    differences_squared = differences ** 2                   
    mean_of_differences_squared = np.mean(differences_squared)  
    rmse_val = np.sqrt(mean_of_differences_squared)          
    return rmse_val

y = np.array([1, 2, 3, 4, 5])
predicted = np.array([1.1, 2.2, 2.9, 4.1, 4.8])
rmse = rmse(y, predicted)
print(rmse)",python,python,0.16555552959726177,0.01701366299865693,0.0069876416693048825,0.00038658664215608716,0.000330247131235508,0.0023946458774442908,0.8028013585634255,0.00021951462104527364,0.00431081289946969
"import pandas as pd 
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_absolute_error 

# Read in data 
data = pd.read_csv('data.csv') 

# Split data into dependent and independent variables 
X = data.iloc[:, :-1].values 
y = data.iloc[:, -1].values 

# Split data into training and testing datasets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 

# Train the model 
regressor = LinearRegression() 
regressor.fit(X_train, y_train) 

# Make predictions on the test data
y_pred = regressor.predict(X_test) 

# Calculate the mean absolute error 
mae = mean_absolute_error(y_test, y_pred) 

# Print results 
print('Mean absolute error: %.2f' % mae)",python,css,0.0016173647362245417,0.5843440453893451,0.022999542235235416,3.732576409950812e-05,0.0002526432587889796,5.96331198738032e-05,0.3144026062017871,0.011492398810035123,0.06479444048461036
"def length_of_string(string): 
    count = 0
    for char in string: 
        count += 1
    return count",python,java,1.2067505649378272e-09,0.00018495353552558868,7.678541982849498e-06,0.7600363362807261,1.089852394810863e-10,2.5710084269650416e-07,0.23951440025088985,0.00025409134793026497,2.281626366914924e-06
"# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
from __future__ import absolute_import
import re
import os
import xml.etree.ElementTree as ET
import json
import copy

from svtplay_dl.utils.urllib import urlparse, parse_qs, quote_plus
from svtplay_dl.service import Service, OpenGraphThumbMixin
from svtplay_dl.utils import is_py2_old, filenamify
from svtplay_dl.log import log
from svtplay_dl.fetcher.hls import hlsparse, HLS
from svtplay_dl.fetcher.rtmp import RTMP
from svtplay_dl.fetcher.hds import hdsparse
from svtplay_dl.subtitle import subtitle
from svtplay_dl.error import ServiceError


class Tv4play(Service, OpenGraphThumbMixin):
    supported_domains = ['tv4play.se', 'tv4.se']

    def __init__(self, url):
        Service.__init__(self, url)
        self.subtitle = None
        self.cookies = {}

    def get(self, options):
        data = self.get_urldata()

        vid = findvid(self.url, data)
        if vid is None:
            yield ServiceError(""Can't find video id for %s"" % self.url)
            return

        if options.username and options.password:
            data = self.http.request(""get"", ""https://www.tv4play.se/session/new?https="")
            auth_token = re.search('name=""authenticity_token"" ([a-z]+=""[^""]+"" )?value=""([^""]+)""', data.text)
            if not auth_token:
                yield ServiceError(""Can't find authenticity_token needed for user / password"")
                return
            url = ""https://www.tv4play.se/session""
            postdata = {""user_name"" : options.username, ""password"": options.password, ""authenticity_token"":auth_token.group(2), ""https"": """"}
            data = self.http.request(""post"", url, data=postdata, cookies=self.cookies)
            self.cookies = data.cookies
            fail = re.search(""<p class='failed-login'>([^<]+)</p>"", data.text)
            if fail:
                yield ServiceError(fail.group(1))
                return
        url = ""http://premium.tv4play.se/api/web/asset/%s/play"" % vid
        data = self.http.request(""get"", url, cookies=self.cookies)
        if data.status_code == 401:
            xml = ET.XML(data.content)
            code = xml.find(""code"").text
            if code == ""SESSION_NOT_AUTHENTICATED"":
                yield ServiceError(""Can't access premium content"")
            elif code == ""ASSET_PLAYBACK_INVALID_GEO_LOCATION"":
                yield ServiceError(""Can't downoad this video because of geoblocked."")
            else:
                yield ServiceError(""Can't find any info for that video"")
            return
        if data.status_code == 404:
            yield ServiceError(""Can't find the video api"")
            return
        xml = ET.XML(data.content)
        ss = xml.find(""items"")
        if is_py2_old:
            sa = list(ss.getiterator(""item""))
        else:
            sa = list(ss.iter(""item""))

        if xml.find(""live"").text:
            if xml.find(""live"").text != ""false"":
                options.live = True
        if xml.find(""drmProtected"").text == ""true"":
            yield ServiceError(""We cant download DRM protected content from this site."")
            return

        if options.output_auto:
            directory = os.path.dirname(options.output)
            options.service = ""tv4play""
            title = ""%s-%s-%s"" % (options.output, vid, options.service)
            title = filenamify(title)
            if len(directory):
                options.output = os.path.join(directory, title)
            else:
                options.output = title

        if self.exclude(options):
            yield ServiceError(""Excluding video"")
            return

        for i in sa:
            if i.find(""mediaFormat"").text == ""mp4"":
                base = urlparse(i.find(""base"").text)
                parse = urlparse(i.find(""url"").text)
                if ""rtmp"" in base.scheme:
                    swf = ""http://www.tv4play.se/flash/tv4playflashlets.swf""
                    options.other = ""-W %s -y %s"" % (swf, i.find(""url"").text)
                    yield RTMP(copy.copy(options), i.find(""base"").text, i.find(""bitrate"").text)
                elif parse.path[len(parse.path)-3:len(parse.path)] == ""f4m"":
                    streams = hdsparse(copy.copy(options), self.http.request(""get"", i.find(""url"").text, params={""hdcore"": ""3.7.0""}).text, i.find(""url"").text)
                    if streams:
                        for n in list(streams.keys()):
                            yield streams[n]
            elif i.find(""mediaFormat"").text == ""smi"":
                yield subtitle(copy.copy(options), ""smi"", i.find(""url"").text)

        url = ""http://premium.tv4play.se/api/web/asset/%s/play?protocol=hls"" % vid
        data = self.http.request(""get"", url, cookies=self.cookies).content
        xml = ET.XML(data)
        ss = xml.find(""items"")
        if is_py2_old:
            sa = list(ss.getiterator(""item""))
        else:
            sa = list(ss.iter(""item""))
        for i in sa:
            if i.find(""mediaFormat"").text == ""mp4"":
                parse = urlparse(i.find(""url"").text)
                if parse.path.endswith(""m3u8""):
                    streams = hlsparse(i.find(""url"").text, self.http.request(""get"", i.find(""url"").text).text)
                    for n in list(streams.keys()):
                        yield HLS(copy.copy(options), streams[n], n)

    def find_all_episodes(self, options):
        parse = urlparse(self.url)
        show = parse.path[parse.path.find(""/"", 1)+1:]
        if not re.search(""%"", show):
            show = quote_plus(show)
        data = self.http.request(""get"", ""http://webapi.tv4play.se/play/video_assets?type=episode&is_live=false&platform=web&node_nids=%s&per_page=99999"" % show).text
        jsondata = json.loads(data)
        episodes = []
        n = 1
        for i in jsondata[""results""]:
            try:
                days = int(i[""availability""][""availability_group_free""])
            except (ValueError, TypeError):
                days = 999
            if days > 0:
                video_id = i[""id""]
                url = ""http://www.tv4play.se/program/%s?video_id=%s"" % (
                    show, video_id)
                episodes.append(url)
                if n == options.all_last:
                    break
                n += 1

        return episodes


def findvid(url, data):
    parse = urlparse(url)
    if ""tv4play.se"" in url:
        try:
            vid = parse_qs(parse.query)[""video_id""][0]
        except KeyError:
            return None
    else:
        match = re.search(r""\""vid\"":\""(\d+)\"","", data)
        if match:
            vid = match.group(1)
        else:
            match = re.search(r""-(\d+)$"", url)
            if match:
                vid = match.group(1)
            else:
                match = re.search(r""meta content='([^']+)' property='og:video'"", data)
                if match:
                    match = re.search(r""vid=(\d+)&"", match.group(1))
                    if match:
                        vid = match.group(1)
                    else:
                        log.error(""Can't find video id for %s"", url)
                        return
                else:
                    return None
    return vid",css,css,7.835874624928994e-10,0.5786449277106145,0.4035936970429193,0.0018089716162814362,1.4941057475094926e-05,4.2913400712389317e-05,0.0006503646828408495,0.015023688044870049,0.0002204956606989732
"def sort_by_frequency(list_a):
    frequency = {}
    for a in list_a:
        if a not in frequency:
            frequency[a] = 1
        else:
            frequency[a] += 1
    list_sorted = []
    for key, value in sorted(frequency.items(), key=lambda item: item[1], reverse=True):
        for _ in range(value):
            list_sorted.append(key)
    return list_sorted",python,matlab,2.5236151434835333e-06,0.0012741136464465325,4.070721336856782e-05,9.654066952174736e-08,5.2480438706069055e-06,0.998653146703619,1.8054028872643158e-05,5.021395436695463e-06,1.0888125728393905e-06
"import numpy as np
import tensorflow as tf
from tensorflow.contrib.factorization.python.ops import lda

def create_lda_network(num_topics, num_documents, num_words):
    """""" 
    Function to design a neural network using LDA.

    Args:
        num_topics (int): Desired number of topics
        num_documents (int): Desired number of documents
        num_words (int): Desired number of words

    Returns:
        A tensorflow graph node representing the trained LDA network.
    """"""
    # Define Dirichlet priors to use for the LDA
    prior = 0.1 * np.ones([num_topics], dtype=np.float32)

    # Initialize the LDA with the given input parameters
    lda_model = lda.LDA(num_topics, 
                        num_documents,
                        num_words, 
                        prior=prior,
                        name='lda_model'
                        )

    # Create a placeholder for the documents
    x = tf.placeholder(alice_documents)

    # Create and train the LDA network with the given placeholder
    lda_topics = lda_model(x)

    return lda_topics",python,typescript,0.0002906363817884844,5.599672237829364e-05,5.081862457494511e-06,9.659955832863039e-05,2.877510237256773e-06,1.6897048740459677e-10,0.00021907579190853018,1.386183153610965e-06,0.9993283458207772
"class Account:
    def __init__(self, name, balance):
        # instance attributes
        self.name = name
        self.balance = balance
    
    # method to withdraw money from account
    def withdraw(self, amount):
        # check if amount is a valid number
        if not isinstance(amount, (int, float)):
            raise ValueError('Invalid amount')
        
        # check if amount is greater than balance
        if amount > self.balance:
            raise ValueError('Insufficient funds')
        
        # subtract the amount from the balance
        self.balance -= amount
    
    # method to deposit money to account
    def deposit(self, amount):
        # check if amount is a valid number
        if not isinstance(amount, (int, float)):
            raise ValueError('Invalid amount')
        
        # add the amount to the balance
        self.balance +=amount

# create an instance of the Account class
my_account = Account('John Doe', 100)

# withdraw money from account
my_account.withdraw(50)

# deposit money to account
my_account.deposit(20)

# print the updated balance
print('Account balance:', my_account.balance)",python,bash,0.4934385101837105,0.0881132152163393,0.004836387349949519,0.10668465883138888,0.016962010142084556,8.21599311897893e-05,0.21282051003199606,0.017946543112297132,0.05911600520104428
"class Patient:
    def __init__(self,name, age, medical_history):
        self.name = name
        self.age = age
        self.medical_history = medical_history
        
    def get_name(self):
        return self.name
        
    def get_age(self):
        return self.age
    
    def get_history(self):
        return self.medical_history",python,python,6.053776361041935e-06,0.0018600698306562224,0.011209923133204245,0.0006615343531673689,3.433132005834105e-09,2.610066972566395e-08,0.9767640832231563,0.009494349075320145,3.95707433296744e-06
"def getAbsoluteValue(number):
    if (number < 0):
        return number * -1
    else:
        return number

print(getAbsoluteValue(-3)) # Outputs 3",python,python,1.6095677398268403e-06,0.0001411461433598028,8.346389934558983e-06,2.799699408373737e-07,6.619361514830398e-07,2.5120402328078696e-06,0.9998366558804808,7.370300153851077e-06,1.4177720060777113e-06
"def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
                
bubble_sort(arr)",python,matlab,4.1025285868709665e-08,4.007740272894458e-08,4.515593101483276e-08,1.0875713942043915e-08,1.1910034782947283e-08,0.9917734194186094,0.008226374311741272,2.9468288239477757e-09,5.427845215583208e-08
"def sum_list(nums):
 total = 0
 for num in nums:
 total += num
 return total

def sum_list_optimized(nums):
 total = 0
 length = len(nums)
 while length > 0:
 total += nums[length - 1]
 length -= 1
 return total

nums = [1, 2, 3, 4, 5]
print(sum_list_optimized(nums))  # Output: 15",python,python,2.2321246754050314e-05,6.180173710735468e-06,2.3462369433655163e-05,1.5473447044095001e-06,0.00015526227319340725,0.00010347652662919182,0.9996352497486758,4.859198640629994e-05,3.9083304925388455e-06
"import random

class CardGame:

    deck = None
    scores = None

    def __init__(self):
        self.deck = self.generateDeck()
        self.scores = {'player1': 0, 'player2': 0}     

    def generateDeck(self):
        suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']
        ranks = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']
        deck = []
        for suit in suits:
            for rank in ranks:
                deck.append([suit, rank])
        random.shuffle(deck)
        return deck

    # Returns total points of a player's cards
    def getScore(self, player):
        score = 0
        for card in self.deck:
            if card[1] in ['J', 'Q', 'K']:
                score += 10
            elif card[1] == 'A':
                score += 11
            else:
                score += int(card[1])
        self.scores[player] = score
        return score

    # Check if a player won or there is a tie
    def isWinner(self, player1, player2):
        score1 = self.getScore(player1)
        score2 = self.getScore(player2)

        if score1 > score2:
            print(f'{player1} Wins')
        elif score2 > score1:
            print(f'{player2} Wins')
        else:
            print('It is a tie')",css,python,0.00034454127248467937,0.08033843870686348,0.03233385534215798,0.0001422608431129475,0.00040077632364157766,0.0009421048256373789,0.7846987379060386,0.0987399995430963,0.002059285236966995
"def sum_odd_numbers(n):
    result = 0
    for i in range(n):
        if i % 2 != 0:
            result += i
    return result",python,python,1.9322594069952307e-07,4.299237845200632e-06,1.5164803923376579e-06,1.936884861908526e-08,9.083272559946629e-08,0.001253041189011574,0.9987349243991286,5.476098539281527e-06,4.391675681073062e-07
"""""""
Write an algorithm to implement a trie data structure in Python
""""""

class TrieNode(object):
    """"""Trie node class""""""
    def __init__(self):
        """"""Constructor for trie node""""""
        self.children = {}
        self.end_of_word = False

class Trie(object):
    """"""Trie class""""""

    def __init__(self):
        """"""Constructor for Trie""""""
        self.root = TrieNode()

    def insert(self, word):
        """"""Inserts the given word into the trie""""""
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]

        node.end_of_word = True

    def search(self, word):
        """"""Searches if the given word is present in the trie""""""
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.end_of_word

# Test code
trie = Trie() 
words = [""apple"", ""application"", ""hi""]

# Insert words into the trie
for word in words:
    trie.insert(word)

# Test search
if trie.search(""apple""):
    print(""Word Found"")
else:
    print(""Word Not Found"")",sql,python,0.0009801972538516339,0.0025079691878754345,0.014148369970562128,9.996316900590817e-06,5.153008204307772e-05,6.532568430843373e-05,0.6938865486801787,0.18534771197083388,0.10300235085344601
"from flask import Flask, jsonify, request
from flask_restplus import Api, Resource, fields

# Create and configure the Flask app
app = Flask(__name__)
api = Api(app)

# Define the endpoints
@api.route('/employees', methods=['GET'])
def get_employees():
    # Return a list of all employees
    ...

# Run the Flask app
app.run(host='localhost', port=5000)",python,css,0.2514911099241772,0.6957851389984195,0.007585787787809625,2.0837760372351754e-06,0.0002840601491521096,4.3168766751122566e-05,0.015198451322901442,0.019320495810419353,0.010289703464332348
"import string
import random

def generate_random_string():
    """"""
    Generate a random string of 8 characters
    """"""
    
    # Character sets
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
    # Length of random string
    length = 8
    
    # Generate random string
    random_string = ''.join(random.sample(chars, length))

    return random_string

print(generate_random_string())",sql,sql,9.836272892683362e-13,9.059325118837173e-08,2.046775494715842e-08,0.4012909196799918,3.101058496506111e-13,1.6359790807256165e-11,6.090479852600294e-05,0.5986480542653008,1.017752170541134e-08
"sentence = ""John and Mary went to the school""
words = sentence.split()
word_dict = {}

for word in words:
    if word in word_dict:
        word_dict[word] += 1
    else:
        word_dict[word] = 1

print(word_dict)",python,python,0.036591901189691765,0.04445453619505411,0.36133022464532966,2.9069903585106757e-05,0.002730111742897235,0.012684558138961079,0.5150481701389884,0.012247471261143696,0.014883956784348855
"# Import libraries 
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
 
# Load Data
df = pd.read_csv('flower_data.csv')
 
# Data Preprocessing
X = df[['petal_length', 'petal_width', 'sepal_length', 'sepal_width']]
y = df['flower_type']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
 
# Build & Train the Model
model = DecisionTreeClassifier()
model.fit(X_train, y_train)
 
# Model Testing & Evaluation
score = model.score(X_test, y_test)
print('Model Accuracy: ', score)
 
# Predict for given data
input_data = [[4.2, 2.2, 6, 3.2]]
prediction = model.predict(input_data)
print('Flower type: ', prediction[0])",python,bash,0.9617624849819019,0.009681400100067263,0.0004280953321444462,5.429720565082037e-07,1.2913666546862991e-06,1.305553238990848e-06,0.02811425316871454,3.1485440336984754e-10,1.062621036734499e-05
"def add(x, y): 
    return x + y 
  
x = 5
y = 10

print(add(x, y))",python,java,1.4660388203862492e-05,2.3783544104599544e-05,9.321962228919629e-05,0.7845534926146362,8.068758581784773e-06,1.1168062228888018e-11,0.21527860672498458,2.405334491794267e-05,4.114991113791984e-06
"<html>
  <head>
    <title>Course Tree</title>
    <style>
      ul {
        list-style: none;
      }
    </style>
  </head>
  <body>
    <ul>
      <li>Programming
        <ul>
          <li>Python
            <ul>
              <li>Basics</li>
              <li>Data Structures</li>
              <li>Advanced Topics</li>
            </ul>
          </li>
          <li>Javascript
            <ul>
              <li>Basics</li>
              <li>Object Oriented Programming</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Design 
        <ul>
          <li>UI/UX Design
            <ul>
              <li>Wireframing</li>
              <li>Prototyping</li>
              <li>Visual Design</li>
            </ul>
          </li>
          <li>Graphic Design
            <ul>
              <li>Logo Design</li>
              <li>Illustration</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </body>
</html>",html,html,4.99881832250627e-12,3.826122739419725e-12,0.999999999805735,2.295703818511826e-12,6.883715090520196e-11,4.964048036608167e-12,2.248616502612161e-16,1.3046372462109298e-12,1.0803819821126736e-10
"from sklearn.linear_model import LinearRegression
import numpy as np

def linear_regression(x, y):
    lr = LinearRegression()
    lr.fit(x , y)
    y_hat = lr.predict(x)
    return np.abs(y_hat - y).mean()",python,python,0.06985804923202418,0.01828521609658991,0.003637977339166293,8.681481131685017e-05,9.024332102553434e-05,0.00012668952668050472,0.906386122114501,9.192129418496986e-05,0.0014369662645109483
"class Queue:
    def __init__(self):
        self.items = []
    
    def isEmpty(self):
        return self.items == []
    
    def enqueue(self, item):
        self.items.insert(0,item)
    
    def dequeue(self):
        return self.items.pop()
    
    def size(self):
        return len(self.items)",sql,python,1.1059984510738597e-05,0.0025194230830885168,0.0200147830632219,8.787798312122656e-07,9.810199923775171e-05,9.673432959999135e-08,0.4944479959953659,0.48290397212225816,3.6882381562752176e-06
"def find_max_value(arr):
    max_value = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_value:
            max_value = arr[i]
    return max_value

array = [1,4,2]
res = find_max_value(array)
print (res)",python,matlab,2.2660334323592234e-05,6.270581730915248e-05,1.5665118200559078e-05,2.726339269573074e-06,2.1182424047168643e-06,0.927118907749743,0.07276040288384111,1.8728577722808797e-06,1.2940657135910889e-05
"# Create function to count the words
def word_count(string):
 # split the string into words
 words = string.split(' ')
 
 # create a dictionary to store the word and its count
 word_count_dict = {}
 
 # add word to the dictionary and increase the count if it already exists
 for word in words:
  if word in word_count_dict:
   word_count_dict[word] += 1
  else:
   word_count_dict[word] = 1
 
 # return the dictionary
 return word_count_dict

# test the code
string =""This is a test string to test the word count program""
print(word_count(string))",python,typescript,3.2871860827475915e-06,0.004703678880305521,0.00032556857706161066,0.23676640794227688,2.418899031763859e-07,1.0005641933680513e-07,0.055086596256113736,0.22970316471203728,0.4734109544997997
"# Load data
data = np.array(data)

# Labels
labels = np.array([0, 1, 0, 1, 0, 0, 1, 0])

# Create training and testing data
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0)

# Train the model
clf = SVC()
clf.fit(X_train, y_train)

# Test the model
y_pred = clf.predict(X_test)

# Print accuracy
print(""Accuracy: {}"".format(accuracy_score(y_test, y_pred)))",python,python,0.020439558386115296,0.37063553860187276,0.05412026132834771,7.720371483228623e-05,0.0006043054299395451,0.0005630721461109481,0.49281830274952865,0.00031433202234835105,0.06042742562090448
"import math 
 
class Point:
 def __init__(self, x, y):
 self.x = x 
 self.y = y 
 
 def distance_from_origin(self):
 return math.sqrt(self.x**2 + self.y**2)
 
 pt1 = Point(3, 4)
 print(pt1.distance_from_origin()) # prints 5.0",python,python,0.0007148662679863497,0.007112305896643077,0.027698766038174522,1.3001163027987842e-06,2.4406999236090613e-05,2.18347881745134e-06,0.9318579144871151,0.03243625121888066,0.00015200549684407758
"import requests 

response = requests.get('<url>')",python,css,7.570485845949297e-08,0.9490081826384226,4.2271128947807614e-05,0.00013197770072036652,1.1052555169668963e-05,9.692841721749322e-06,0.05049023102575266,0.0002974676300805179,9.04877432622964e-06
"import xlwt

# Create workbook, worksheet and set the default font
wb = xlwt.Workbook()
ws = wb.add_sheet('People Information')
style = xlwt.XFStyle()
font = xlwt.Font()
font.bold = True
style.font = font

# Define the header row and write it
ws.write(0, 0, 'Name', style)
ws.write(0, 1, 'Surname', style)
ws.write(0, 2, 'Age', style)

# Write the content in each row
for row_index in range(1, len(information)+1):
    row = information[row_index-1]
    ws.write(row_index, 0, row[0])
    ws.write(row_index, 1, row[1])
    ws.write(row_index, 2, row[2])

# Save the workbook
wb.save('PeopleInfo.xls')",python,typescript,0.11009364237606958,0.02171980323528928,0.32953277089260313,0.0007582820250877568,0.0007437568252236543,0.0015139678631021405,0.09253585516170028,0.0006057052910477729,0.4424962163298764
"def printWords(text):
 words = text.split()
 for word in words:
 print(word)

printWords(""The quick brown fox"")",python,python,0.0012691411468656326,0.01067596291387238,0.0010262288021205678,8.548993889135833e-07,0.00013782953995516861,0.0001308074779546399,0.9027988122725261,0.08341821940119518,0.0005421435461213723
"import statistics

data_set = [2,4,4,4,5,5,7,9]
print(round(statistics.stdev(data_set),2))",python,html,0.05404433923718404,0.2043447272481257,0.3403204649530368,0.004140752827226951,0.01607471527970362,0.016620808194891448,0.31633593659666887,0.015298601223536696,0.03281965443962585
"import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report

# Load the data
data = pd.read_csv(""data.csv"")

# Vectorize the text
cv = CountVectorizer()
X = cv.fit_transform(data[""text""])

# Convert target labels to numerical values
y = np.array([1 if label == ""category1"" else 2 if label == ""category2"" else 3 for label in data[""category""]])

# Split into train and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

# Train the model
nb = MultinomialNB()
nb.fit(X_train, y_train)

# Test the model
y_pred = nb.predict(X_test)

# Print out the results
print(classification_report(y_test, y_pred))",python,css,0.06966147452101111,0.7135299134880917,0.00968015754062741,2.3670196073229002e-05,0.000287767017567194,0.0003433732516867649,0.15770600224195105,0.00018017085682459335,0.048587470886166974
"def median(num1, num2, num3): 
  
    if (num1 > num2): 
        if (num3 > num1): 
            median = num1 
        elif (num3 > num2): 
            median = num3
        else: 
            median = num2
    else: 
        if (num3 > num2): 
            median = num2
        elif (num3 > num1): 
            median = num3
        else: 
            median = num1
    return median

print(""Median is: "" + str(median(6, 8, 4)))",python,python,0.0010483254477348877,0.004385269038349152,0.0021549072842530197,9.266618969018786e-05,0.0011064865394064165,0.004433759024494688,0.9845710566973008,0.0011989698670547447,0.001008559911716085
"def optimize_expression(expr):
    expr_tree = ast.parse(expr, mode='eval')
    
    # transform expression
    expr_tree = ast.fix_missing_locations(ast.optimize_expression(expr_tree)) 
    ast.increment_lineno(expr_tree, 1)

    # compile ast to python code
    compiled_expr = compile(expr_tree, '', 'eval') 
     
 return eval(compiled_expr)",python,typescript,0.3004885044503123,0.06168537944238365,0.022432029809273602,0.00022878454766834833,0.014874217196869528,0.00624591851857983,0.16240645166780507,0.01238768691877824,0.41925102744832937
"import string

alphabet = string.ascii_uppercase

for letter in alphabet[::-1]:
    print(letter)",python,java,1.0983080550885729e-07,0.0004963714012171242,0.0001192577314612785,0.9763150439856849,6.0799449230687375e-09,1.8524607930214633e-05,0.012088486493044769,0.010928245071367186,3.39547985439388e-05
"def solve_linear_eq(a,b,c,d):
    x = (b*d - c*a) / (b*d - c*a)
    y = (d*a - b*c) / (b*d - c*a)
    return x, y",python,python,3.0458681726310896e-12,2.5489143973834694e-10,2.7598246867965498e-11,8.025231839209999e-13,3.049889349032867e-12,3.595677408560778e-18,0.9999999972484059,2.461794976084354e-09,4.1123042603913176e-13
"class Node:
    def __init__(self, value):
        self.data = value
        self.next = None
 
 
def merge_sorted_lists(head_a, head_b):
    # Create a new linked list.
    new_list = Node(None)
    tail = new_list
 
    current_a = head_a
    current_b = head_b
 
    while current_a is not None or current_b is not None:
        if current_a is None:
            tail.next = current_b
            current_b = current_b.next
        elif current_b is None:
            tail.next = current_a
            current_a = current_a.next
        elif current_a.data <= current_b.data:
            tail.next = current_a
            current_a = current_a.next
        else:
            tail.next = current_b
            current_b = current_b.next
        tail = tail.next
 
    return new_list.next",python,python,0.0017481423153234744,0.20578299616272078,0.024541778098449547,0.0012911243541316412,0.002867213187294376,0.008953561913661222,0.36636777677609766,0.35973745539077573,0.028709951801545404
"def combine_strings(str1, str2):
    return str1 + str2",python,javascript,0.000722776358727271,0.0009344237920857959,1.9284888802940553e-06,0.00019489926285001167,0.5940754197945389,0.00011700147451508651,0.3969623921850138,0.005869147770418954,0.001122010872969941
"def count_keyword(text, keyword):
 count = 0
 words = text.lower().split()

 for word in words:
 if word == keyword.lower():
 count += 1

 return count

text = 'Every morning I start my day with a cup of coffee.'
print(count_keyword(text, 'cup'))
# Output: 1",python,python,0.0010502117824045755,0.01630569134835844,0.0022380239501720097,9.735913126745894e-06,0.005695738974355161,0.0002037007040653839,0.8738733073254488,0.09820964562807857,0.0024139443739900875
"from flask import Flask, request, redirect

app = Flask(__name__)

@app.route(""/"")
def home():
    return ""<form action='/save' method='POST'><input type='text' name='email'/><input type='submit’/></form>""

@app.route(""/save"", methods=[""POST""])
def save():
    email = request.form[""email""]
    # save the email address to your database
    return redirect(""/"")

if __name__ == ""__main__"":
    app.run()",python,html,0.012794945362911252,0.3124344013811821,0.6090060540718077,0.00022736242050741334,0.00039465580505367075,2.106092084234258e-05,0.0486477008679721,0.016175836647656133,0.00029798252206721863
"def get_dict_with_prefix(dict_data, prefix):
  new_dict = {}
  for key, value in dict_data.items():
    if key.startswith(prefix):
      new_dict[key] = value

  return new_dict

dict_data = {
    ""key1"": ""value1"",
    ""key2"": ""value2"",
    ""key3"": ""value3"",
    ""prefix_key1"": ""value4"",
    ""prefix_key2"": ""value5""
}
prefix = ""prefix_""

new_dict = get_dict_with_prefix(dict_data, prefix)

print(new_dict)  # Output: {'prefix_key1': 'value4', 'prefix_key2': 'value5'}",css,css,0.0015624673997728712,0.9710923689006776,0.001956864598265684,9.538283169528728e-05,0.0005585627685144056,0.021384120087217188,0.00264374971853134,0.000363145521693964,0.0003433381736315473
"def quicksort(arr): 
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quicksort(left) + middle + quicksort(right)

def mergesort(arr): 
    if len(arr) > 1: 
        mid = len(arr) // 2   # Finding the mid of the array 
        L = arr[:mid]   # Dividing the array elements  
        R = arr[mid:]   # into 2 halves 
        left_arr = mergesort(L)  # Sorting the first 
        right_arr = mergesort(R) # half 
        arr =[] 
        while len(left_arr) > 0 and len(right_arr) > 0: 
            if left_arr[0] < right_arr[0]: 
                arr.append(left_arr[0]) 
                left_arr.pop(0) 
            else: 
                arr.append(right_arr[0]) 
                right_arr.pop(0) 
        # Checking if any element was left 
        for i in left_arr: 
            arr.append(i) 
        for i in right_arr: 
            arr.append(i) 
        return arr

# Test array 
arr = [3, 8, 1, 9, 5, 2] 
# Sorted array using QuickSort 
print(""Sorted array using QuickSort:"", quicksort(arr)) 
# Sorted array using MergeSort 
print(""Sorted array using MergeSort:"", mergesort(arr))

Output:
Sorted array using QuickSort: [1, 2, 3, 5, 8, 9]
Sorted array using MergeSort: [1, 2, 3, 5, 8, 9]",python,matlab,7.390862643034755e-07,4.899782213224451e-07,1.0656423562796579e-07,9.776645493189393e-09,5.668650934404839e-08,0.9999883357612325,7.554426478669637e-06,2.4138156739724904e-09,2.7053065972230846e-06
"# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# arrayToList() function 
def arrayToList(arr): 

    # Create a reference to root 
    root = None

    # Create a reference to prev node 
    prev = None

    # Iterate through the given array 
    for x in arr: 

        # Allocate a new node in heap 
        curr = ListNode(x) 

        # Linked the prev node 
        # to the current node. 
        if prev != None: 
            prev.next = curr 

        # If root is None, 
        # assign it as curr node. 
        if root == None: 
            root = curr 

        # Store the current node 
        # as prev node for next 
        # iteration 
        prev = curr 

    # Return the root node of 
    # linked list. 
    return root 

# Sample array 
arr = [22, 7, 34, 15] 

# Root node reference 
root = arrayToList(arr) 

# Print the converted Linked List 
list_print(root)",python,typescript,0.000805915226199751,0.015970239420660007,0.0016398191314937244,0.00011370219792686945,0.006455093465351054,0.03916595526008515,0.24159070531842788,0.24202926692760754,0.4522293030522481
"import pymysql

# Create connection to database
conn = pymysql.connect(host=""localhost"",
                       user=""admin"",
                       passwd=""admin123"",
                       db=""test"")

# Create a cursor and execute a query
cur = conn.cursor()",python,sql,0.0006969256733679597,0.005440187178036992,0.0018774047778151138,4.204248495051984e-05,0.00021511240130341159,0.00023646903598847037,0.0061342060478996934,0.746217464822351,0.23914018757828692
"def nth_prime(n):
  
 num_primes = 0
 curr_num = 2
 
 while num_primes < n:
   is_prime = True
   for i in range(2, curr_num):
       if curr_num % i == 0:
           is_prime = False
           break
   if is_prime:
       num_primes += 1
   curr_num += 1

return curr_num - 1",python,python,0.0018905553039070353,0.001305770688301608,0.00457269283780047,0.00029280959873625637,0.00041382861168884984,0.25585178097472255,0.7332051868085894,0.00036315373476790793,0.0021042214414859254
"class BinaryTree:
    def __init__(self, root):
        self.root = root
        self.left = None
        self.right = None
        
    def insert_left(self, node):
        if self.left is None:
            self.left = BinaryTree(node)
        else:
            t = BinaryTree(node)
            t.left = self.left
            self.left = t
        
    def insert_right(self, node):
        if self.right is None:
            self.right = BinaryTree(node)
        else:
            t = BinaryTree(node)
            t.right = self.right
            self.right = t",python,sql,0.00012159765797884865,0.0056690368272396706,0.017017223276214424,1.1516116467271074e-05,6.116690163947187e-05,2.3212677056552022e-05,0.16004019773667363,0.816692812865322,0.00036323594140800114
"import re

def parse_url(url):
    regex = r""^(https?://[^/]+)(.*)$""
    match = re.search(regex, url)
    return match.group(1), match.group(2)

url, query = parse_url(""https://www.example.com/index.php?p=1&q=2"")
print(""URL:"", url)
print(""Query:"", query)",python,java,2.1510455239489635e-22,8.382621291288886e-09,4.955387588458023e-07,0.9999994842143527,1.321798158330509e-10,2.2715665504737602e-12,1.1560985675203223e-08,2.7278440978725855e-11,1.4155158363197975e-10
"def generate_password(word):
      # initialize variables 
    password = """"
    letters = """"
    numbers = """"

    # create new password
    for i in range(0, len(word)):
      letters += word[i]
      numbers += str(i)

    password = letters + numbers
    return password

print(generate_password(""Hello""))",python,sql,0.042213245845131635,0.0004387822959523206,0.008475163790615074,9.878433072236682e-05,0.000410572745021982,1.1962982179379924e-05,0.4101532378498952,0.5374685116193267,0.0007297385411552657
"def remove_duplicates(string):
words = string.split("" "")
unique_words = set(words)
return "" "".join(unique_words)

remove_duplicates(""I have to go go shopping shopping"") # ""I have to go shopping""",sql,sql,5.737494170462993e-05,0.012756785111210239,0.002255339894367831,0.037744427736114396,1.3491701781438102e-05,9.975438939402718e-05,0.18078351623961378,0.760876624179713,0.0054126858061005634
"pos_tags = nltk.pos_tag([""happy"", ""run"", ""went"", ""like""])
for tag in pos_tags:
    print(f'{tag[0]}: {tag[1]}')

# Output 
# happy: JJ
# run: VB
# went: VBD
# like: IN",python,html,0.23016833942316078,0.06515951203950913,0.555761045864193,0.0003874744225902781,0.010362205237225116,0.06347529839817928,0.045687365177676915,0.02314097623604078,0.00585778320142476
"for i in range(0, 101): 
    if (i % 2 == 0): 
        print(i)",python,matlab,3.744185753073568e-19,2.809829868854975e-29,2.0061855638544017e-18,2.2482500425369732e-20,1.7290637095316134e-20,0.9999999999999978,2.258495268550087e-15,2.330988725277688e-19,1.3258507633607872e-19
"class Conversion: 
      
    def __init__(self, capacity): 
        self.top = -1
        self.capacity = capacity 
        self.array = [] 
        self.output = [] 
        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} 
      
    def isEmpty(self): 
        return True if self.top == -1 else False
      
    def peek(self): 
        return self.array[-1]
      
    def pop(self): 
        if not self.isEmpty(): 
            self.top -= 1
            return self.array.pop() 
        elsE: 
            return ""$""
      
    def push(self, op): 
        self.top += 1
        self.array.append(op)
      
    def infixToPostfix(self, exp):
        for i in exp: 
            if i.isalpha(): 
                self.output.append(i)
            elif i == '(': 
                self.push(i)
            elif i == ')': 
                while( (not self.isEmpty()) and self.peek() != '('): 
                    a = self.pop() 
                    self.output.append(a) 
                if (not self.isEmpty() and self.peek() != '('): 
                    return -1
                else: 
                    self.pop()
            else: 
                while(not self.isEmpty() and self.precedence[i] <= self.precedence[self.peek()]):
                    self.output.append(self.pop())
                self.push(i)
        while not self.isEmpty():
            self.output.append(self.pop())
        return """".join(self.output)

exp = ""A * B + C""
conversion = Conversion(len(exp)) 
result = conversion.infixToPostfix(exp) 
print(result)",css,sql,0.0002957578910220478,0.04515330125753406,0.23258785771018525,1.1534207023637644e-06,1.3343681674633354e-05,6.9155619319276e-05,0.11125601766685848,0.61053736607281,8.604667989394291e-05
"def reverse_string(string):
 # Create empty string to store reversed characters
 reversed_string = """"

 # Loop through string to get individual characters 
 for char in string:
 reversed_string = char + reversed_string

 # Return reversed string
 return reversed_string

print(reverse_string(""Hello World!""))  # Output -> ""!dlroW olleH""",python,python,8.089527016571063e-07,0.004395824417840209,0.00043588439801775,0.020812940699633804,1.0860851571510639e-07,1.7624304294061445e-06,0.9288173436606115,0.04524181363891115,0.00029351319333866975
"# Generate a random color code (RGB) 
import random

def get_random_color():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return (r, g, b)

if __name__ == '__main__':
    print(get_random_color())",python,python,0.0002585836658796319,0.0004958801277919798,0.001169093744627432,0.032957381914232864,3.080639540284641e-08,1.8402356780279316e-05,0.9222316069564318,0.04265052728953803,0.00021849313832252203
"# import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# define a function for preprocessing the tweets
def preprocess_tweets(tweets):
    # lowercase the text
    tweets = tweets.lower()
    # remove punctuation
    tweets = tweets.replace('[^\w\s]',' ') 
    return tweets

# define a function for training the model
def train_model(X_train, y_train):
    # initialize count vectorizer
    vectorizer = CountVectorizer()

    # fit and transform the data
    X_train_counts = vectorizer.fit_transform(X_train)

    # initilaize multinomial classifier
    clf = MultinomialNB()
    # fit the classifier
    clf.fit(X_train_counts, y_train)
    # return trained model
    return clf

# define a function for testing the model
def test_model(model, X_test, y_test):
    # initialize count vectorizer for test set
    vectorizer = CountVectorizer()
    # transform the data
    X_test_counts = vectorizer.fit_transform(X_test)
    # predict labels
    y_pred = model.predict(X_test_counts)
    # calculate and return accuracy
    accuracy = accuracy_score(y_pred, y_test)
    return accuracy

# define a main function
def main():
    # preprocess the data
    tweets = preprocess_tweets(tweets)
    # split the data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.20, random_state=1)
    # train the model
    model = train_model(X_train, y_train)
    # print the test accuracy
    accuracy = test_model(model, X_test, y_test)
    print('Test accuracy is {}'.format(accuracy))

# call the main function
if __name__  == ""__main__"":
    main()",python,javascript,0.1803338410412506,0.1556783996334705,0.006014596067538651,1.1651715769868617e-05,0.45605054839979703,1.0612051515463691e-05,0.18379203479905956,0.00014529594696773734,0.01796302034463064
"# Import Python modules
import os
import lxml
import requests
import html5lib

# Retrieve the HTML
url = 'https://www.example.com/'
r = requests.get(url)
html_doc = r.text

# Parse the HTML
tree = lxml.html.fromstring(html_doc)
links = tree.xpath('//a/@href')

# Fetch the data from each link
data = []
for link in links:
 try:
 r = requests.get(link)
 data.append(r.text)
 except:
 pass
 
# Store data in a file
file_name = os.path.join('data', 'data.txt')
with open(file_name, 'w') as f:
 f.write('\n'.join(data))",sql,html,4.601947576894847e-09,0.0069695504885095546,0.9732086158425453,0.008971190043012318,4.589991848826434e-05,6.598605965815868e-05,0.00031533164466991914,0.0009698886175470121,0.009453532783621717
"a, b = 0, 1
print(""The first 10 numbers in Fibonacci series are:"")
while a < 10:
    print(a)
    a, b = b, a + b",python,python,0.00010218446001302821,0.0009385094827584481,0.0006706960684963198,0.00026884475882046617,0.00044601735990387693,2.4210398174951097e-05,0.9928038240619386,5.512240486322868e-05,0.004690591005031196
"def replace_word(string, word, replacement_word):
    return string.replace(word, replacement_word)

print(replace_word(""Hello hello world!"", ""hello"", ""welcome""))",python,python,0.06304705178119133,0.0009195651701743593,0.0028079910205846136,1.624296741772748e-09,5.4253705961910624e-05,1.0278443593687156e-06,0.9322804986838394,0.0008352034746003468,5.440669499192424e-05
"def decimal_to_binary(num):
    if num == 0:
        return 0
    binary = ''
    while num > 0:
        binary = str(num%2) + binary
        num //= 2
    return binary",python,matlab,1.0345918992704188e-06,1.064415602272233e-09,3.976105941692296e-06,3.459284493623444e-07,1.0090205757743736e-06,0.998376697922593,0.001614708667762778,9.98955162596337e-07,1.2277432001551516e-06
"def compute_word_frequency(sentence):
    words = sentence.split()
    frequency = {}

    for word in words:
        if word in frequency:
            frequency[word] += 1
        else:
            frequency[word] = 1
    return frequency",python,python,0.01361696920129807,0.009286054887683711,0.015314144021703835,1.7876861513552618e-05,0.0003546851629823434,0.005837079832340069,0.9081777448682753,0.047189085985691936,0.0002063591785113969
"def is_palindrome(string):
    left_pos = 0
    right_pos = len(string) - 1

    while right_pos >= left_pos:
        if string[left_pos] != string[right_pos]:
            return False
        left_pos += 1
        right_pos -= 1
    return True",python,java,5.983695632169604e-07,0.0004613473695608721,0.0003369844827450132,0.9358199515304751,6.306914669884166e-08,1.2349535862131952e-05,0.06285620138404369,0.0004085633315834503,0.00010394092701974635
"import requests
from bs4 import BeautifulSoup

# Get the specified URL
url = 'https://example.com/'
response = requests.get(url)

# Parse the response
soup = BeautifulSoup(response.text, 'html.parser')

# Extract the desired data
title = soup.find('title').text
body = soup.find('body').text

# Print the extracted data
print(title)
print(body)",python,html,1.719389435483201e-14,0.034135260159155335,0.9658441626528105,1.9960872989041596e-05,3.481770009328171e-08,2.616205769586661e-11,2.1067765390181881e-07,2.6391770873274893e-07,1.0687580330222036e-07
"def classify_strings(strings):
    # initialize lists for each classification
    short = []
    long = []
    # classify each string
    for s in strings:
        if len(s) <= 6:
            short.append(s)
        else:
            long.append(s)
    # return classified lists
    return [short, long]

if __name__ == '__main__':
    strings = ['short', 'longer_string', 'medium_length', 'very_long_string']
    print(classify_strings(strings))",python,matlab,3.8855079940107586e-05,0.008325219808563027,0.000583811162653556,0.0010300984209076678,1.1248401529406376e-05,0.9849859439213372,0.0012503376923959518,0.0035580601739500753,0.0002164253387231239
"def is_leap(year):
    if (year % 400 == 0): 
        return True
    if (year % 100 == 0):  
        return False
    if (year % 4 == 0): 
        return True
    else:
        return False
  
year = int(input())
print(is_leap(year))",python,python,0.00014526814197300794,0.00149689124621004,0.006992242659435981,0.004997508540219261,0.00021148437355016808,1.3535624806063563e-05,0.9860027576371392,6.461227478247164e-05,7.569950188386102e-05
"import random

def generate_random_numbers(length, min, max):
  result = []
  for _ in range(length):
    result.append(round(random.uniform(min, max), 1))
  return result

print(generate_random_numbers(5, 2, 10)) # [2.6, 6.2, 2.5, 8.5, 8.1]",python,python,4.916747848855994e-06,4.70436624303026e-05,8.305672981292558e-06,1.9622472029937198e-07,2.633832184563097e-05,6.817313651587432e-05,0.9982793776642749,0.001563801765708836,1.8468036741714408e-06
"def multiply(num1, num2):
    return num1 * num2",python,python,9.245675669974762e-05,0.0005634811754310174,0.00016140051690601332,3.997881494172754e-06,6.955634768125802e-05,2.5831081156248518e-05,0.9987023562278059,0.0002896932297762336,9.122678304950386e-05
"def filter_same_value_elements(mylist):
 seen = set()
 for item in mylist:
 if item not in seen:
 yield item
 seen.add(item)

filtered_list = list(filter_same_value_elements(mylist))
print(filtered_list) # [1, 2, 3]",python,matlab,6.262551508845763e-08,8.199622121064392e-08,1.50243746778099e-07,3.892677659764532e-08,5.864894819285034e-07,0.9999990010354739,5.8024816401284095e-08,8.362245058123093e-10,1.982174350651042e-08
"def largestNumber(list): 
    maximum = list[0] 
      
    for num in list: 
        if num > maximum: 
            maximum = num 
    return maximum 
  
list = [4, 8, 2, 6, 9] 
largestNumber = largestNumber(list) 
  
print(""Largest number in the given list is:"", largestNumber)",python,matlab,1.8350639390275177e-06,1.1810840047855977e-07,9.098948014688268e-06,4.6363466092085493e-07,1.06946349304247e-05,0.9997147241246309,0.00019799942301753864,4.365524507278111e-05,2.1410817333115664e-05
"def longest_substring(string):
    # Keep track of the longest substring
    longest_substring = """"
    start_index = 0
  
    # Iterate over each letter in the string
    for current_index in range(len(string)):
        # Check if the current letter has occurred before in the substring
        if string[current_index] in string[start_index:current_index]:
            # If so, the previous substring is no longer valid
            start_index = current_index
        # Check if the current substring is longer than the longest
        longest_substring = max(longest_substring, string[start_index:current_index+1], key=len)
  
    return longest_substring",python,java,1.5779422977068422e-06,0.001093478615914743,0.0005212445108140001,0.8874199211267834,1.543252129164783e-06,0.00015016745380206606,0.08650520080934758,0.019999068542207968,0.0043077977467033185
"def rolling_average(arr):
    last_three = arr[-3:]
    return sum(last_three) / len(last_three)

mylist = [10, 20, 30, 40, 50]
rolling_avg = rolling_average(mylist)
print(""Rolling average:"", rolling_avg)

# Output:
# Rolling average: 33.333333333333336",python,matlab,2.659509339946314e-05,0.00010411001153370397,6.646656413165323e-06,3.8061086036678726e-06,2.9300755748568893e-06,0.9995508195872127,0.00030385432027830024,9.786875212902643e-08,1.1402782319991974e-06
"def insertionSort(arr): 
    n = len(arr)
    for i in range(1, n): 
        key = arr[i]
        j = binarySearch(arr, key, 0, i - 1)
        for k in range(i-1, j-1, -1):
            arr[k+1] = arr[k]
        arr[j] = key

def binarySearch(arr, key, start, end):
    if (end - start == 1):
        if (key < arr[start]):
            return start
        else:
            return end
    if (end == start):
        return start
    mid = start + (end - start) // 2
    if (key < arr[mid]):
        return binarySearch(arr, key, start, mid)
    else:
        return binarySearch(arr, key, mid, end)",python,python,1.8082260683539903e-05,0.00032644898827746075,1.7808416290820256e-05,2.1321206361671206e-06,6.264632594178615e-06,0.04941780391648103,0.950184439528046,1.429857551737626e-05,1.2721561473149076e-05
"import string
import random

def generate_password(length):
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
    generated_password = ''.join(random.choice(chars) for i in range(length))

    return generated_password",sql,sql,1.3785814031013703e-11,5.613174152816185e-08,6.137630582269023e-08,0.01870306214744777,1.655389045324623e-12,1.2631343715692038e-08,8.038628850380286e-05,0.9812164153805903,6.028625740124963e-09
"def min_distance_words(s, w1, w2):
    list_str = s.split("" "")
    index1 = -1
    index2 = -1
    min_dist = float(""inf"")
    for i in range(len(list_str)):
        if list_str[i] == w1:
            index1 = i
            if index2 != -1:
               min_dist = min(min_dist, abs(index1 - index2))
        elif list_str[i] == w2:
            index2 = i 
            if index1 != -1:
               min_dist = min(min_dist, abs(index1 - index2))
    if min_dist == float(""inf""):
        return -1
    else:
        return min_dist",python,python,0.009681201411010637,0.008043494145230241,0.009405117607949312,0.0008489396503913447,0.0020080411555310038,0.13772008261102764,0.8209961330672302,0.005851088209244293,0.005445902142385345
"def reverseArray(arr): 
    start = 0
    end = len(arr) - 1
    while start < end: 
        arr[start], arr[end] = arr[end], arr[start] 
        start += 1
        end -= 1
    return arr",python,python,4.9806751563530727e-05,0.0005982047546555478,6.217258463223452e-05,1.7052716548825742e-05,1.8478170880028848e-05,0.00442238296142322,0.9946537212942136,1.8515583030919924e-05,0.00015966518305208174
"def add_list(list_of_numbers):
    sum = 0
    for i in list_of_numbers:
        sum += i
    return sum

list = [2, 5, 9]
result = add_list(list)
print(result)",python,matlab,0.0008067111110560875,0.01669066938622431,0.008708504080592311,0.007509020617626549,0.0025621882759008304,0.5244545232277081,0.40824814844641377,0.027898615170698707,0.0031216196837793603
"def check_substring(string1, string2):
    if string2 in string1:
        return True
    else:
        return False

# example
result = check_substring(""Hello world!"", ""world"")
print(result)",python,python,0.017993090339974992,0.000448110838636734,0.000747308387557766,1.0508603318026994e-12,0.0020820033476095677,7.521949246242779e-07,0.9787004537656521,2.681997025489766e-05,1.4611543384970142e-06
"def is_uppercase(text):
    if text[0].isupper():
        print(""True"")
    else:
        print(""False"")",python,python,0.000780341656362961,0.04087354535128352,0.0018864264659489078,1.910379923806448e-05,0.00018543494245070933,0.0010755877715977592,0.950026405601168,0.0033118861218904344,0.0018412682900596237
"def is_subsequence(str1, str2):
    i = 0
    j = 0

    while(i < len(str1) and j < len(str2)):
        if str1[i] == str2[j]:
            i += 1
        j += 1

    return i == len(str1)",python,python,0.00027150586874198385,0.0004678411151375886,5.376999068364242e-07,0.0001067663412077645,0.2668226384234019,0.00020091462599659466,0.7226700647109652,0.006652082502429454,0.0028076487122127834
"import json

# some Python data
data = [{'name': 'John', 'age': 30, 'city': 'New York'},
        {'name': 'Max', 'age': 20, 'city': 'Berlin'}]

# convert to JSON
json_data = json.dumps(data)

# save as JSON file
with open(""data.json"", ""w"") as json_file:
 json.dump(json_data, json_file)",css,css,2.5722958955102994e-05,0.9998184890673014,4.392453184838295e-06,2.8577205404914944e-07,2.802586478724533e-08,1.626936314334223e-07,1.5923443076090347e-05,5.820359714193229e-07,0.00013441354996108823
"def sort_by_length_descending(list_of_strings):
    list_of_strings.sort(key=len, reverse=True)
    return list_of_strings

result = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics'])
print(result)",python,python,9.342701517831069e-05,0.00809385418185243,0.0002467468483257824,9.182679821980278e-06,5.756968071351027e-05,2.5723279640091756e-06,0.9912072812208604,0.00023006837787240876,5.929766741111549e-05
"import psycopg2

# Connect to the PostgreSQL database
db_conn = psycopg2.connect(
    user=""<USER>"",
    password=""<PASSWORD>"",
    host=""localhost"",
    port=""5432""
    )

# Create a cursor object
cur = db_conn.cursor()

# Execute a query
cur.execute(""SELECT * FROM table_name"")

# Fetch the results
rows = cur.fetchall()

# Iterate through the results
for row in rows:
    print(row)",sql,sql,0.00012992820446341464,0.0016964764843925553,9.874962918797342e-05,1.3348981366633214e-06,0.0007422981275628091,1.1816146631297553e-05,0.0007906484621605711,0.9929349497616876,0.0035937982857771164
"def predict(data, tree):
    if tree['node_type'] == 'leaf':
        return tree['value']
    feature_index = tree['feature_index']
    if data[feature_index] < tree['value']:
        return predict(data, tree['left_child'])
    else:
        return predict(data, tree['right_child'])",python,bash,0.6397689026208132,0.2536991171415839,0.02004972269880085,0.0002395531153697619,0.0009675219427109303,0.0644485968068105,0.015384374206691972,2.886835151718379e-06,0.005439324632067061
"import math

def is_prime(num):
    """"""Function to check for prime number""""""
    if num == 1:
        return False

    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True


def get_first_prime_numbers(limit):
    """"""Function to get the first limit prime numbers""""""
    num = 2
    count = 0
    prime_numbers = []

    while count < limit:
        if is_prime(num):
            prime_numbers.append(num)
            count += 1
        num += 1

    return prime_numbers


# Get the first 20 prime numbers
limit = 20
print(get_first_prime_numbers(limit))",python,python,2.8303492162036585e-05,1.235164462402465e-07,0.000142588265087675,5.5386855438429885e-05,0.0016318736155824178,0.179032350425313,0.8190016892924226,7.500932285429503e-05,3.267521469342889e-05
"def get_domain_name_from_email(email):
    return email.split('@')[-1]",python,python,0.0016032848924293155,0.02130591840679097,0.003540777954733257,5.883041124336053e-05,0.0007059793382886858,0.0001107469709967457,0.9703305847733422,0.0015573083695278485,0.0007865688826475081
"def dot_product(u, v):
    if len(u) != len(v):
        raise ValueError(""Vectors u and v must be of the same length!"")

    result = 0
    for i in range(len(u)):
        result += u[i] * v[i]
    return result

u = [1, 2, 3]
v = [4, 5, 6]

print(""Dot product of u and v is:"" , dot_product(u, v))",python,python,8.670971402350853e-07,6.117656585081594e-05,6.563965886709597e-06,9.380489800009023e-07,4.435100984263629e-05,3.849895741869145e-06,0.9746213254877959,7.851884003517741e-05,0.025182409088726522
"class Person:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

person = Person(""John"", ""Doe"")
print(person.first_name, person.last_name)",python,python,0.02651909046905491,0.008671427857030062,0.08863177398859816,0.0009350107138733557,0.10021032541499743,0.0014482417390575993,0.734361022715925,0.026079011769744656,0.013144095331718819
"def construct_polynomial(input_str):
    parts = input_str.split(""+"")
    
    coefficients = []
    for part in parts:
        try:
            coefficient = int(part)
        except:
            coefficient = 1
            
        coefficients.append(coefficient)
    
    
    def polynomial(x):
        output = 0
        for i, coeff in enumerate(coefficients):
            output += coeff * x**i
        return output
    
    return polynomial",python,python,0.12446800596857835,0.04366949162215953,0.05304512543157736,0.020685314415892993,0.006693243368541183,0.002407981651607792,0.7437851726366315,0.004040823324591968,0.0012048415804193735
"def bubbleSort(arr): 
 n = len(arr) 

 # Traverse through all array elements 
 for i in range(n): 

# Last i elements are already in place 
 for j in range(0, n-i-1): 

# traverse the array from 0 to n-i-1 
# Swap if the element found is greater 
# than the next element 
 if arr[j] > arr[j+1] : 
 arr[j], arr[j+1] = arr[j+1], arr[j] 

# Driver code to test above
arr = [2, 5, 1, 8, 4]

bubbleSort(arr)

print (""Sorted array is:"") 
for i in range(len(arr)): 
 print (""%d"" %arr[i]), 
 
# Output: 1 2 4 5 8",python,matlab,1.0370116402362037e-07,4.674669946194048e-08,2.8034514002005797e-08,9.785458422038502e-09,9.319451112224031e-08,0.9963887079680636,0.0036071363065253484,9.171477862753531e-09,3.8650915863556355e-06
"def is_valid_triangle(a, b, c): 
  
    # triangle should have 3 sides 
    if a + b <= c or a + c <= b or b + c <= a: 
        return False
  
    # sum of any two side should always be greater than third side 
    if a + b > c and a + c > b and b + c > a: 
        return True
    return False

is_valid_triangle(2, 2, 3)",python,typescript,1.4875279687341446e-07,3.023585618113047e-07,4.777576130838049e-06,1.0835763397568754e-05,3.809201003519535e-07,5.026447428947378e-09,0.0008049704404529396,5.942259742301488e-10,0.9991785785678863
"def checkPrime(num):
    if (num == 1): 
        return False
    for i in range(2, num):
        if (num % i == 0): 
            return False
    return True

n1 = 20
n2 = 50

for num in range(n1, n2 + 1):
    if (checkPrime(num)):
        print(num)",python,matlab,6.266802209355133e-12,4.4961912674536155e-17,5.718319171301255e-11,2.789424387549977e-13,5.323279901000079e-13,0.9999997375372307,2.623929587605689e-07,3.680941728172234e-12,1.8682631494525807e-12
"# Defining a function  
def calculate(s): 
    if s.isalpha()==True: 
        vowels = 0
        consonants = 0
        words = 1
  
        for i in s:  
  
            # checking vowel 
            if(i == 'a' or i == 'e' or i == 'i' 
                        or i == 'o' or i == 'u'): 
                vowels += 1

            # checking consonants 
            else: 
                consonants += 1
        
        words+=1

        print(""Vowels:"", vowels) 
        print(""Consonants:"", consonants)
        print(""Total words:"",words) 

# Driver program 
s = ""This is a sample text""
calculate(s)",python,python,0.1042715803705841,0.009029822837376033,0.025799998188597878,0.00018856215070789134,0.01625011050117139,0.006933028391183538,0.8251494800565047,0.01115407847224642,0.0012233390316278613
"def get_squares(n):
    squares = []
    for i in range(1, n + 1):
        squares.append(i**2)
    return squares

result = get_squares(10)
print(result)",python,python,0.0004686397620702348,0.010351125345594342,0.003041638716874656,7.317235803949513e-05,0.2724631762979323,0.23842856331743234,0.47357965180859224,0.0015233370347840522,7.069535868050756e-05
"def calculate_sum(num1, num2):
    sum = num1 + num2
    return sum

num1 = int(input('Enter first number: '))
num2 = int(input('Enter second number: '))

result = calculate_sum(num1, num2)
print('The sum of the two numbers is:', result)",python,java,1.7221026238676358e-07,1.7091436474893773e-07,5.445725964174555e-07,0.997069747155463,2.6310987748437993e-07,6.24840171308006e-16,0.0029286172191641344,3.126011439697615e-07,1.722171270967574e-07
"def create_dict(tuples): 
  dictionary = {} 
  
  for item in tuples: 
    dictionary[item[0]] = item[1]
  
  return dictionary 
  
tuples = [(""a"", ""b""), (""c"", ""d""), (""e"", ""f"")]
print(create_dict(tuples)) 

# Output
{'a': 'b', 'c': 'd', 'e': 'f'}",css,python,0.0011192972999130352,0.3302568625238588,0.022804500989957944,7.460273889341527e-05,0.003989598683337814,0.0003555345200781056,0.6406297874809282,0.0002685644588072218,0.0005012513042254627
"import torch
import torch.nn as nn
import torch.nn.functional as F

class MNISTClassifier(nn.Module):
  def __init__(self):
    super(MNISTClassifier, self).__init__()
    # Create a convolutional network using 2D convolution and max pooling layers
    self.conv1 = nn.Conv2d(1, 8, 3, padding=1)
    self.conv2 = nn.Conv2d(8, 8, 3, padding=1)
    self.pool = nn.MaxPool2d(2,2)
    # Fully connected layer
    self.fc1 = nn.Linear(8 * 7 * 7, 10)
  
  def forward(self, x):
    x = F.relu(self.conv1(x))
    x = self.pool(x)
    x = F.relu(self.conv2(x))
    x = self.pool(x)
    x = x.view(-1, 8 * 7 * 7)
    x = F.relu(self.fc1(x))
    return x

model = MNISTClassifier()",python,python,0.0016717092994799542,0.025461109052704906,0.13178177106110045,6.0991554141674116e-05,0.00017331433628999914,0.00012015265397755635,0.7631281752636216,0.025597520793670878,0.05200525598501287
"import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv('house_price-data.csv')

X = data[['size']]
y = data['price']

model = LinearRegression()
model.fit(X, y)",python,python,0.01186615341684519,0.40836800521346467,0.017419090564550346,2.5978002651221437e-05,2.5002080015233634e-05,4.372601256487371e-05,0.558038225614331,4.029384923924501e-05,0.004173525246338196
"import random

def random_int_between_1_and_100():
  return random.randint(1, 100)",python,python,0.00019488939316107437,0.000384149629203505,8.93220802021488e-05,1.3212826039585656e-06,6.865271299515053e-05,1.8129372418040961e-07,0.9642700287085181,0.034978778929568244,1.2675970023895804e-05
"# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier

# Read data
data = pd.read_csv('data.csv')

# Preprocess data
features = data.drop('Attrition', axis=1)
le = LabelEncoder()
target = le.fit_transform(data['Attrition'])

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=0)

# Build Decision Tree classifier
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)",python,css,0.41190347410400596,0.4361632756340127,0.004814850949926114,2.625072676258677e-06,1.9049553879578643e-05,1.4614175374235375e-05,0.13821542628033795,9.817994969764614e-07,0.008865702430290223
"for word in words:
    vowels = """"
    for x in word:
        if x in ('a', 'e', 'i', 'o', 'u'):
            vowels += x
    print(vowels)",python,matlab,0.00123479671602131,0.0010284660584871362,0.00222671224273801,1.8241027308208937e-06,7.086915046092928e-05,0.8591837113028628,0.12801724744024454,0.008151910272185318,8.446271426912905e-05
"def ipv4_format(ip):
 octets = ip.split('.')
 octets.extend(['0', '0', '0', '0'])
 octets = octets[:4]
 return '.'.join(octets)

if __name__ == '__main__':
 ip = '192.168.1'
 print(ipv4_format(ip))",sql,sql,0.0027080819382174367,0.021537582179723097,0.018531667325953488,0.0002250743618501701,0.0013485579750615957,0.0028226821005581096,0.31808332791504673,0.6336895603099318,0.0010534658936574568
"import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression

# Load and prepare the data
data = pd.read_csv('data.csv')
X = np.array(data.iloc[:, 0:4])
y = np.array(data['Heart Attack Risk'])

# Create the model
model = LogisticRegression(solver='lbfgs')

# Train the model
model.fit(X, y)

# Make the predictions
predictions = model.predict_proba(X)",python,bash,0.8440423506062131,0.007989739313304609,0.0012790532583055987,6.960807816883604e-07,6.331380827208022e-06,5.478640967366055e-06,0.05428336347387111,2.372990966913043e-08,0.09239296351581947
"def primeNumberGenerator(n):
    prime = [True for _ in range(n+1)]
    prime[0] = False
    prime[1] = False
    for p in range(2, n+1):
        if prime[p] == True:
            for i in range(2*p, n+1, p):
                prime[i] = False

    prime_nums = []
    for i in range(n+1):
        if prime[i] == True:
            prime_nums.append(i)

    return prime_nums

prime_nums = primeNumberGenerator(100);
console.log(prime_nums);",python,matlab,6.95488317086624e-06,2.1267931865282447e-06,0.00023735986752904762,1.188192456973258e-06,0.03240389097622705,0.8383817797473878,0.12886381290071558,8.159215046242837e-05,2.1294488863750462e-05
"import numpy as np
from sklearn import tree

# Create the data
x = np.array([[0, 0], [1, 1]])
y = np.array([0, 1])

# Train the tree
clf = tree.DecisionTreeClassifier()
clf = clf.fit(x, y)",python,bash,0.9997906459476311,3.328775151424635e-05,2.0386809872841353e-06,1.1905130563888729e-08,6.908203890765744e-08,2.1199369742586347e-07,5.064967845368156e-05,5.554065880994505e-13,0.0001230849599912722
"def add_numbers(x, y):
 return sum(range(x, y))",python,python,0.0005106071642337423,0.00045624653549446875,0.00221325733754416,0.00125857013614312,0.00022237032619601212,0.0017338537587489457,0.9924296842531132,0.000446193688165178,0.0007292168003610827
"def triangle_area(base_length, height):
    area = 0.5 * base_length * height
    return area",python,python,0.0023431840598550904,0.01567965164389107,0.005030400754531122,0.0006447515492136384,0.00161013699696697,0.0006351381644469326,0.9696680388669928,0.0019642461017068194,0.0024244518623953958
"def threeNumSum(arr, targetSum):
    combinations = []

    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == targetSum:
                    combination = [arr[i], arr[j], arr[k]]
                    combinations.append(combination)
    
    return combinations

arr = [2, 3, 4, 5, 6]
targetSum = 7
print(threeNumSum(arr, targetSum))",python,matlab,1.7542088656760838e-09,3.684628693938201e-09,2.909500639159532e-09,5.611617721047543e-10,2.87549600415641e-10,0.9990521948914387,0.0009477930862830927,3.892903835910322e-10,2.435938090603731e-09
"def permute(s):
    if len(s) == 1:
        return s

    perms = []
    for i in range(len(s)):
        element = s[i]

        remaining_elements = s[:i] + s[i+1:]
        z = permute(remaining_elements)

        for t in z:
            perms.append(element + t)

    return perms

print(permute(""ABC""))",python,matlab,3.3904539363772936e-05,3.69638760461949e-05,7.56968999383082e-05,4.032908194578444e-06,7.870380786433488e-06,0.9581967590962199,0.04160158275648711,8.088225184556243e-06,3.5101317779103516e-05
"def find_anagrams(word):
    word_list = list(word)
    anagrams = []
    for i in range(len(word_list)):
        for j in range(i+1,len(word_list)+1):
            anagram = ''.join(word_list[i:j])
            if anagram != '' and anagram != word and anagram not in anagrams:
                anagrams.append(anagram)
    return anagrams",sql,python,0.0012360435075915402,0.0003054223545840425,0.0035493578208693967,4.253640214104421e-05,8.989325742699057e-05,0.45167529992131134,0.5240666750116306,0.013671250766655011,0.005363520957790074
"prime_numbers = []
for num in range(2, 101):
  isPrime = True
  for i in range(2, num//2 + 1):
    if (num % i == 0):
      isPrime = False
      break  
  if isPrime:
    prime_numbers.append(num)

print(prime_numbers)",python,matlab,1.004915415713894e-12,4.705284199380947e-18,3.262109278061324e-12,6.344548888296405e-14,9.762482803723892e-14,0.9999999992771675,7.176316229151763e-10,2.533047733852547e-13,5.19282280844462e-13
"def linear_search(arr, x): 
    for i in range (0, len(arr)): 
        if arr[i] == x: 
            return i  
    return -1
  
# Test array 
arr = [ 2, 3, 4, 10, 40 ] 
x = 10
  
# Function call 
result = linear_search(arr, x) 
  
if(result == -1): 
    print(""Element is not present in array"") 
else: 
    print(""Element is present at index"", result)",python,matlab,1.4505510185830964e-08,9.622979271894229e-08,1.9827897699674815e-08,2.1371897559168e-09,2.1756420720559616e-07,0.9999682940100024,3.1352486483591686e-05,4.781774600826597e-10,2.76073888375439e-09
"import json

def validate_json_string(s):
    try:
        json_obj = json.loads(s)
        return True
    except json.JSONDecodeError:
        return False",python,css,0.0005742116339289871,0.6500291907781263,0.0018644305592019662,7.416389888461291e-06,7.51169585754788e-05,3.301596294541093e-06,0.34729474409482236,6.578962423347756e-05,8.579836492848822e-05
"def find_numbers_divisible_by(m, n, divisor):
    divisible_numbers = []
    for i in range(m, n+1):
        if i % divisor == 0:
            divisible_numbers.append(i)
    return divisible_numbers",python,matlab,0.0003551825409877032,0.0002247751591603276,0.0009265176437497435,5.6446172591330585e-05,9.554268296242914e-05,0.905772600515032,0.09195576723453781,0.0001935116957579,0.0004196563552208617
"def calculate_sum(numbers):
    return sum(numbers)",python,java,0.00013914892310363822,0.0004096711141866784,0.0009749955716413681,0.6270610180631482,0.001163707635314576,1.9311945654403216e-08,0.3698384870224505,0.0001984753506543955,0.00021447700755500325
"text = 'This is a sample string'

# Get the total number of characters 
total = len(text) 

# Count the number of vowels 
vowels = 0 
for character in text: 
 if character in 'aeiou': 
  vowels += 1

# Count the number of consonants 
consonants = 0 
for character in text: 
 if character in 'bcdfghjklmnpqrstvwxyz': 
  consonants += 1

# Print the result 
print(f""Vowels: {vowels}"")
print(f""Consonants: {consonants}"")
print(f""Total: {total}"")",python,python,2.521694364807297e-05,0.0051011977085313066,0.0002273190286707882,3.288054705616183e-05,7.163344454719193e-05,0.00015750153317816288,0.9818073151816077,0.008862966542031848,0.003713969070728814
"import numpy as np
from sklearn.linear_model import LinearRegression

# Input data
rooms = np.array([4, 3, 2, 5]).reshape(-1, 1)
square_feet = np.array([2000, 1600, 1400, 2500]).reshape(-1, 1)
price = np.array([400000, 340000, 280000, 480000])

# Create linear regression model
model = LinearRegression()
model.fit(rooms, price)
model.fit(square_feet, price)

# Output predicted prices
predicted_price = model.predict([[4], [1600]])
print(predicted_price)",python,bash,0.988048507392031,0.00178483305663517,0.00011004899039440348,1.424866860342855e-06,8.03926476333443e-07,7.85514617106554e-06,0.010038714347262204,1.2750155196049083e-09,7.810999154092025e-06
"def sum_list_elements(lst):
    sum = 0
    for item in lst:
        sum += item
    return sum

print(sum_list_elements([1, 2, 3]))",python,python,0.000568227344511405,0.013339299450595912,0.04534681410264079,0.0040870268623673265,0.010841415250482548,0.0046459598999650025,0.9200206686198176,0.0008709210870511912,0.00027966738256814285
"# Create two sets
set1 = {1,2,3,4,5}
set2 = {3,4,5,6,7}

# Find the intersection
intersection = set1 & set2

# Print the result
print(intersection)",python,python,0.0032278254049801333,0.015981999153667555,0.007737914155974975,0.0015246711282922867,0.0012661272982458997,6.056504044968983e-05,0.827481191514575,0.00228786622627273,0.14043184007754195
"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    
    def get_area(self):
        return self.length * self.width",python,python,0.00017768749268766155,0.0019729272325837675,0.006433093246582479,1.651819026978642e-05,0.00302214941553763,7.202278534650568e-06,0.8606549375835199,0.12762226274842722,9.322181185684123e-05
"# Python3 program to find frequency table 
from collections import Counter 
def freq_table(arr):
    return dict(Counter(arr))",python,python,0.08784815097251303,0.022223409162522665,0.0006972303703910097,5.566818508155055e-06,0.000657496398464072,0.0007182604627337083,0.8876783151060174,0.00010690839224168374,6.466231660825329e-05
"# Node class
class Node: 
    # Function to initialize the node object 
    def __init__(self, data): 
        self.data = data # Assign data 
        self.next = None # Initialize next as null 
  
  
# Linked List class
class LinkedList: 
  
    # Function to initialize the Linked  
    # List object 
    def __init__(self):  
        self.head = None
  
    # Deletes the node at position n
    def deleteNode(self, position): 
  
        # If linked list is empty 
        if self.head == None: 
            return 
  
        # Store headnode 
        temp = self.head 
  
        # If head needs to be removed 
        if position == 0: 
            self.head = temp.next
            temp = None
            return 
  
        # Find previous node of the node to be deleted 
        for i in range(position-1): 
            temp = temp.next
            if temp is None: 
                break
  
        # If position is more than number of nodes 
        if temp is None: 
            return 
        if temp.next is None: 
            return 
  
        # Node temp.next is the node to be deleted 
        # store pointer to the next of node to be deleted 
        next = temp.next.next
  
        # Unlink the node from linked list 
        temp.next = None
  
        temp.next = next",python,typescript,8.320372953378927e-06,0.002220516579417543,0.01552708510955046,8.638832743728262e-05,0.0042557601812482125,0.08212496970955353,0.0011532549596254518,0.22677698899481374,0.6678467157654003
"import random

array_length = 10

my_array = [random.randint(0, 10) for _ in range(array_length)]

print(my_array)",python,python,9.557881378398818e-05,0.00011635622303262337,0.00025181196464269673,4.269247330051675e-06,1.69076268404144e-05,0.008131582632745762,0.9909762850290198,0.00035657235417648744,5.0636108428243456e-05
"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b",python,python,1.2004088957864957e-06,4.1602021637064916e-07,2.509564074906481e-06,1.7255168896552265e-08,4.0019345995833465e-08,7.326983684286269e-05,0.9999210593969868,1.4543039346626807e-06,3.3194533575636226e-08
"def calculateSquare(x):
    return x ** 2",python,python,3.0458681726310896e-12,2.5489143973834694e-10,2.7598246867965498e-11,8.025231839209999e-13,3.049889349032867e-12,3.595677408560778e-18,0.9999999972484059,2.461794976084354e-09,4.1123042603913176e-13
arr = [i for i in range(11) if i % 2 == 0],matlab,matlab,1.2859824434419033e-22,1.0936283243526974e-31,2.2528558626391923e-22,5.8183347193251e-24,8.019093217501043e-24,1.0,1.6339751542953013e-18,2.0365189837681625e-25,4.3908274713576686e-23
"import random

def generate_password(character_list, min_length):
  password = ''

  for i in range(min_length):
    password += random.choice(character_list)
  
  return password

if __name__ == '__main__':
  character_list = ['a', 'b', 'c', 'd', 'e','1','2','3','4','5']
  min_length = 8
  password = generate_password(character_list, min_length)
  print(password)",python,sql,0.00018519406537216476,0.0005828685289200924,0.0006924026323599014,5.902665022584561e-06,6.011299597281706e-05,0.004837069478972893,0.17919538737332044,0.8142499257633878,0.00019113649667137865
"# This code filters a list of numbers and prints out only the even ones
numbers = [1,2,3,4,5,6,7,8]

# Use list comprehension to filter the list
even_numbers = [x for x in numbers if x % 2 == 0]

# Print out the even numbers
for num in even_numbers:
  print(num)",python,matlab,1.712442627331913e-06,3.8888184047986045e-07,5.542671698153298e-05,0.17747208637602796,6.6326459077573495e-06,0.8168885262397718,0.0002678545479430409,5.676230383302468e-05,0.005250609845067201
"import requests 
from bs4 import BeautifulSoup

url = 'https://www.imdb.com/chart/moviemeter'

# Make a request to the url
r = requests.get(url)

# Parse the content of the request with BeautifulSoup
soup = BeautifulSoup(r.text, 'html.parser')

# Get all the movies listed
movies = soup.find_all('td', class_='titleColumn')

# Loop over each movie
for movie in movies:
    # Get the movie title
    title = movie.a.text
    # Get the release year
    year = movie.span.text[1:-1]
    # Print the title and year
    print(title + ' ('+year + ')')",python,html,4.2163078940729286e-10,0.06862813908122625,0.9306580094200276,0.0002868693531530524,6.229439190070905e-05,8.357746570083413e-08,4.3677333682311425e-05,6.998092144636821e-05,0.00025094549946737596
"from datetime import date 

def daysDifference(date1, date2): 
    return (date2-date1).days 

date1 = date(2020, 12, 20) 
date2 = date(2021, 1, 10) 
print(daysDifference(date1, date2))",python,python,0.007545999521223501,0.04441697363895455,0.0052398366459852075,0.0004126397440778818,0.001312913281691811,0.0008439286001619354,0.9371582367834255,0.0008510220645234146,0.002218449719956166
"for i in range(1,101):
 if i % 3 == 0 and i % 5 == 0:
 print(""fizzbuzz"")
 elif i % 3 == 0:
 print(""fizz"")
 elif i % 5 == 0:
 print(""buzz"")
 else:
 print(i)",python,matlab,7.030060317856945e-08,8.944619672581697e-11,8.753323695427225e-07,6.584235726626429e-09,1.4800320477943062e-08,0.9995996693676348,0.0003988819472815227,1.7392666139763174e-07,3.0765144734251655e-07
"list = [1, 2, 3, 4, 5]
print(""The list is: "")
for i in list:
print(i, end="" "")",python,matlab,0.00011669188845960638,0.0011393346226410085,0.0005588825142322015,9.409255004640885e-06,0.003702237186649998,0.9196641596275253,0.03927047621045764,0.033808578253253424,0.0017302304417759413
"from collections import Counter

def frequency(arr):
    """"""
    Develop a Python program to create a frequency table for an array of integer elements
    """"""
    return Counter(arr)

if __name__ == '__main__':
    arr = [1,1,3,5,3,3,5] 
    print(frequency(arr))",python,bash,0.9409924159167277,0.0003808004043752766,0.00023634910425433272,2.642534201174706e-07,4.346369698296344e-05,0.02953349789809269,0.02860753600561077,1.1315378120117642e-05,0.00019435734241596652
"import random as rd

def random_selection(n):
    num_list = [i for i in range(1, n+1)]
    index_list = rd.sample(range(1, n+1), 10)
    
    selected_list = [num_list[i] for i in index_list]
    return selected_list",python,matlab,2.491412000075441e-06,1.0283671055974324e-06,1.3369659409526166e-05,1.0033414428326649e-07,7.24470338054918e-08,0.8508139249147318,0.14912478350306077,1.5836720856333405e-06,4.264569042860262e-05
"import random
import string

length = 10

def generatePassword(length):
    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + ""!@#$%^&*""
    return ''.join([random.choice(chars) for _ in range(length)])

password = generatePassword(length)
print(password)",sql,sql,2.7957678219294127e-11,6.600044845877573e-08,2.8719330500881025e-08,0.0007731033973762034,4.062006067878672e-11,6.715615263869112e-09,6.383307781853205e-05,0.999162958963767,3.0570664341963833e-09
"class UserInformation:
    def __init__(self, username, email, profile_picture):
        self.username = username
        self.email = email
        self.profile_picture = profile_picture",python,python,0.00022483225334464589,0.06429639105707498,0.04093387760224433,2.3642045938902108e-05,9.837739690817222e-05,1.6439529859063753e-05,0.8305161736717169,0.06326593473099053,0.0006243317119225985
"def parse_contact_info(string):
    name = string.split("", "")[0]
    email = string.split("", "")[1]
    phone_number = string.split("", "")[2]
    print(f""Name: {name} \nEmail: {email} \nPhone Number: {phone_number}"")",python,java,1.2489614146966882e-21,1.9673330718859192e-16,2.8056121926376454e-17,0.9999999999999647,3.9943176425533645e-32,2.530321480721356e-20,3.405733797027846e-14,1.0631251895702389e-15,1.0665342714761778e-18
"import string

def remove_punctuation(text):
    return text.translate(str.maketrans('', '', string.punctuation))

print(remove_punctuation(""The quick brown fox jumps over the lazy dog.""))
# output: The quick brown fox jumps over the lazy dog",python,python,0.00024289524485772041,0.06440334811195077,0.00414967825400999,0.022519132031589183,0.0001421004989943236,3.99776090740473e-05,0.8665970089073313,0.028338821485069363,0.013567037857123293
"def solve_sudoku(matrix):
 # find empty spaces
 empty_spaces = find_empty_spaces(matrix)
 
 if not empty_spaces:
 #No empty spaces
 return True
 else:
 row, col = empty_spaces
 
 # choose valid entries
 for i in range(1,10):
 # entry validate
 if is_validated(matrix, i, (row, col)):
 matrix[row][col] = i
 
 if solve_sudoku(matrix):
 # jump out of function
 return True
 
 matrix[row][col] = 0
 
return False

def find_empty_spaces(matrix):
 for i in range(9):
 for j in range(9):
 if matrix[i][j] == 0:
 return i, j  # row, col
 
return None

def is_validated(matrix, number, position): # check row
 for i in range(9):
 if matrix[position[0]][i] == number and position[1] != i:
 return False
 
 # check column
 for i in range(9):
 if matrix[i][position[1]] == number and position[0] != i:
 return False
 
 # check 3x3 box
 box_x = position[1] // 3
 box_y = position[0] // 3
 
 for i in range(box_y * 3, box_y * 3 + 3):
 for j in range(box_x * 3, box_x * 3 + 3):
 if matrix[i][j] == number and (i,j) != position:
 return False
 
return True

# Solve Sudoku
solved = solve_sudoku(matrix) 

if solved:
 print('Sudoku solved!')
 
 for i in range(9):
 for j in range(9):
 print(matrix[i][j], end="" "")
 print()
else:
 print('No solution')",python,python,2.699565948364856e-07,9.002211383026382e-07,1.0037456969940114e-05,1.8657337363398562e-07,6.305920396329334e-07,0.022388448972699728,0.9775959763925924,2.9310008033642615e-06,6.188337880427822e-07
"def fibonacci(n):
 if n == 0:
 return 0
 elif n == 1:
 return 1
 else:
 return fibonacci(n-1) + fibonacci(n-2)

# Main Program
n = int(input(""Enter number of terms: ""))

for i in range(n):
 print(fibonacci(i), end="" "")",python,python,8.617630108674901e-05,2.714411662241723e-07,1.0265150147893342e-06,5.915601934191258e-07,1.2361680748346293e-07,3.739108920272741e-09,0.999911031581654,7.592455518475769e-07,1.5999416738711638e-08
"import uuid

def generate_uuid():
    return str(uuid.uuid4())",python,python,0.0044948358322636685,0.007739620055915887,0.007563425768754907,0.0002970136555281958,0.003779492253509114,0.00036206489445538237,0.9732031117800586,0.0014977102455174288,0.001062725513996862
"import mysql.connector

# Connect to local MySQL Server
conn = mysql.connector.connect(
    user='root',
    password='root',
    host='localhost',
    database='test'
)
cursor = conn.cursor()

# Execute SQL Query
sql = ""SELECT * FROM users""
cursor.execute(sql)

# Fetch and print results
data = cursor.fetchall()
for record in data:
    print(record)",sql,sql,3.30257222490453e-06,0.00011690365209402965,5.7569993750396124e-05,6.458458271191627e-07,8.128120043784704e-06,4.443746851340953e-06,0.00030493533405183686,0.9991471694352485,0.0003569012999080255
"def extractDuplicates(nums): 
    result = [] 

    for i in range(len(nums)): 
        k = i + 1 
        for j in range(k, len(nums)): 
            if nums[i] == nums[j] and nums[i] not in result: 
                result.append(nums[i]) 
  
    return result",python,python,6.467740359281463e-08,2.049224073128206e-06,2.460147551904181e-07,7.898944016378196e-09,1.6355859524536994e-08,4.5913617855392526e-05,0.9999471656213675,3.6828041012954744e-06,8.537856401831927e-07
"def sort_list(nums): 
    # Sort list in ascending order
    nums.sort()
    
    # Print out the sorted list
    for num in nums: 
        print(num) 
  
# Test the function
nums = [3, 2, 5, 7, 1, 4]
sort_list(nums)",python,python,5.290839808458576e-05,7.2484817789264e-05,0.0011314847040381332,0.0009307375152845302,0.37939145046311856,0.05821527097219225,0.558446437094026,0.0016927645750810369,6.646146038562846e-05
"# Lambda expression to return the square of the given number 
square = lambda x: x * x 
  
# calling the lambda expression  
result = square(5) 
  
#Printing the result 
print(result) 

# Output: 25",python,python,0.00021979872916130184,0.01900330470400936,0.0005394349226939956,8.700796048919418e-06,0.0023045983814292716,5.503092279905399e-07,0.9265034182205322,0.0010861820822748252,0.05033401185462221
"lst = [5, 10, 15, 20, 25, 30]

divisible_by_5 = [num for num in lst if num%5 == 0]
print(divisible_by_5)",python,matlab,5.672948421538287e-12,7.6371669773848e-16,2.2817733327851477e-11,4.68365202293971e-13,1.647223662389165e-12,0.9999999991290518,8.34821761849846e-10,2.095789975365595e-12,3.423798354152642e-12
"def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + 1):
    if myString[i:i+len(substring)] == substring:
      return True
  return False",python,python,0.00010791665659211281,9.478252966002282e-05,0.00045994455414193747,6.3987711736407745e-06,1.8144689751117243e-05,0.0008803936029870808,0.9981955458347967,0.0001716904334814451,6.518292741582034e-05
"def sort_array(array):
    for i in range(len(array)):
        lowest = i
        for j in range(i + 1, len(array)):
            if array[lowest] > array[j]:
                lowest = j
        array[i], array[lowest] = array[lowest], array[i]
    return array

result = sort_array([1, 5, 3, 8, 4, 2])
print(result)",python,matlab,6.600623893175885e-05,4.687998517298046e-06,8.208414513838378e-06,4.187368898859666e-07,4.595393520838195e-07,0.9997507917876817,0.00016471629146076947,2.170379419579066e-06,2.5406132329363064e-06
"import numpy as np
 
# Generating random points
points = np.random.rand(10, 2)
 
# Calculating distance between points
dist_matrix = np.sqrt(np.sum(points**2, axis=1, keepdims=True) + \
          np.sum(points**2, axis=1, keepdims=True).T - \
          2*np.dot(points, points.T))
 
# Clustering
cluster_indices = np.argmin(dist_matrix, axis=1)
cluster_points = [points[cluster_indices == i] for i in range(points.shape[0])]",python,python,0.01737472613636641,0.00924696741155597,0.008759274717096194,0.0007048623029210459,0.0002616265600110643,0.006438987361104855,0.9522005787398399,0.0026493071323846415,0.0023636696387200214
"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com""

page = requests.get(url)

soup = BeautifulSoup(page.content, 'html.parser')

text = soup.find_all(text=True)

for t in text:
    print(t.strip())",python,java,5.267674467665762e-19,0.0009595580479136976,5.018763948582712e-05,0.9989889896627949,2.687015269904429e-09,6.68236959223795e-10,7.857205225575786e-07,4.735286083304656e-07,2.0454224114684866e-09
"import pandas as pd 
from sklearn import tree 
data = pd.read_csv('customer_data.csv') 
feature_names = ['Age','Gender','Occupation','Type','City','Member since','Months on Site'] 
target_names = ['No','Yes'] 
X = data[feature_names].values 
y = data['Purchase'].values 

# Create decision tree classifier 
clf = tree.DecisionTreeClassifier() 

# Train the decision tree classifier 
clf = clf.fit(X, y) 

# Visualize the decision tree 
dot_data = tree.export_graphviz(clf, out_file=None, 
                     feature_names=feature_names,  
                     class_names=target_names,  
                     filled=True, rounded=True,  
                     special_characters=True)  
import graphviz 
graph = graphviz.Source(dot_data)  
graph",python,bash,0.9999998997268246,8.806909286942071e-08,9.969828061115324e-10,3.740522955219383e-12,1.684262263162507e-11,1.1066952903399999e-11,1.0405181136595537e-08,5.4585346877023926e-21,7.702683510074293e-10
"import random

n = random.randint(1, 10)
array = [random.randint(0, 1000) for i in range(n)]
print(array)",python,python,0.00041233575420936304,0.00011298958096224858,0.0003172578423813144,3.6357627958807485e-06,1.7259689955683585e-05,0.06149932330615618,0.93473274153044,0.0028554115179657102,4.90450151337373e-05
"class Temperature:
    def __init__(self, value, unit):
        self.value = value
        self.unit = unit


    def convert_to_celsius(self):
        if self.unit == 'C':
            return self.value
        elif self.unit == 'F':
            return (self.value - 32) * 5/9
        elif self.unit == 'K':
            return self.value - 273.15
        else:
            return None",python,css,0.0004233916676390372,0.4036357530474631,0.1217365454541767,3.4325351323794595e-05,0.0001592704667475398,0.19476421779334033,0.0004025108587552947,0.27806176740306876,0.0007822179574853517
"import random

num = random.randint(min, max)
print(num)",python,python,0.0001637840902468103,2.107389270383606e-06,0.00023457204333248254,3.250599872294323e-06,3.860405463662902e-05,0.027206398417115554,0.9648895836111159,0.007414707191269256,4.6992603140662726e-05
"def average_grade(grades):
 total = 0
 for grade in grades:
 total += grade
 return total / len(grades)

>>> average_grade([90, 99, 75, 72, 85])
84.2",python,matlab,0.013433979604180721,0.3145305117488158,0.08465991666739746,0.002236801871585758,0.008098916103554175,0.32108972486805204,0.23845275504610544,0.003795623158904091,0.013701770931404495
"original_list = [1, 2, 5, 2, 4, 1]
unique_list = []

for item in original_list:
    if item not in unique_list:
        unique_list.append(item)

print(unique_list)",python,python,0.00467087755423813,0.049150593446048024,0.0869199483477729,0.0003676782457581283,0.025286412976136815,0.22200796062807898,0.6076848313365932,0.0013875749089763076,0.0025241225563975194
"from rest_framework import views, status
from rest_framework.response import Response
from .models import Post
from .serializers import PostSerializer

class PostView(views.APIView):
    def get(self, request):
        posts = Post.objects.all()
        serializer = PostSerializer(posts, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = PostSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class PostDetailView(views.APIView):
    def get(self, request, pk):
        post = Post.objects.get(pk=pk)
        serializer = PostSerializer(post)
        return Response(serializer.data)

    def put(self, request, pk):
        post = Post.objects.get(pk=pk)
        serializer = PostSerializer(post, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

   def delete(self, request, pk):
        post = Post.objects.get(pk=pk)
        post.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)",sql,css,0.0568281911717722,0.8770756643189775,0.0004944043775415775,4.193373993374469e-05,0.00035412142099140693,0.00011459318295042006,0.06080569031607926,0.0015517147073282923,0.0027336867644253623
"def add_dict_nums(nums1, nums2):
    result = dict()
    for key in nums1.keys():
        result[key] = nums1[key] + nums2[key]
    return result

print(add_dict_nums(nums1, nums2))",python,css,8.76722928590513e-06,0.5430829390425981,3.488298211022302e-05,7.669356564896953e-07,4.402482705443823e-05,1.521778311855367e-06,0.4563970029501831,0.0004143927146516167,1.5701540148316118e-05
"def median(lst):
    lst = sorted(lst)
    if len(lst) % 2 == 0:
        mid = int(len(lst) / 2)
        return (lst[mid] + lst[mid-1]) / 2
    else:
        mid = int(len(lst) / 2)
        return lst[mid]

median([3, 4, 1, 2, 5])",python,python,0.00019283637690815567,0.00029097154361476123,0.00018423948692432632,0.0024399841955427336,3.993460170007939e-05,2.158921590859515e-07,0.9967010302924899,6.433548936203362e-05,8.645212129887029e-05
"def find_duplicates(csv_file):
    """"""
    A function to detect duplicates in a CSV.

    Args:
        csv_file (str): The path of the CSV file to be processed.

    Returns: 
        Set of duplicates found.
    """""" 
    duplicates = set()    
    
    # Open and read the CSV file
    with open(csv_file,'r') as csvfile:
        lines = csv.reader(csvfile)
        # Read data into a list of lists       
        data_list = list(lines)
        # Store the no. of columns in csv 
        col = len(data_list[0]) 
  
    for i in range(len(data_list)-1): 
        for j in range(i + 1, len(data_list)): 
            count = 0
            for k in range(col): 
                if data_list[i][k] != data_list[j][k]: 
                    break
                count += 1
  
            # If each value of the row is same, add to duplicates list
            if count == col: 
                duplicates.add(tuple(data_list[i]))
  
    return duplicates",python,typescript,0.0006273327715800151,0.0006890663292381368,0.0010629583085373486,0.0002748658341400723,0.020612467599140597,0.013867563905873376,0.17847814176377813,0.012569769896397704,0.7718178335913146
"# Initialize sum
sum = 0

# Use a for loop to iterate over numbers
for num in range(1, 7):
    sum = sum + num

# Print result
print(""The sum of the first six numbers is:"", sum)",python,java,6.126711545620021e-06,9.114293461477736e-08,0.00019350044244703177,0.9983498174239366,0.00035560619901331907,0.0005168663315667574,0.0004127911983030654,5.224002132000469e-05,0.00011296052893281212
"import random

# Function to generate random numbers 
def random_number(start, end): 
	return random.randint(start, end) 

# Driver code
start = 1
end = 10
print(random_number(start, end))",python,python,1.9755830819431027e-05,9.719200613155857e-05,2.919752669662924e-05,9.234131731528966e-06,0.0005799853691637038,1.802773211826e-08,0.9984503505783652,0.0006716732654791144,0.00014259326388083417
"def generate_fibonacci_sequence(n):
  a = 0
  b = 1
  sequence = [a]
  while b < n:
    a, b = b, a + b
    sequence.append(a)
  return sequence

result = generate_fibonacci_sequence(7)
print(result) # [0, 1, 1, 2, 3, 5]",python,python,0.0004877722369628974,0.025403737398624865,0.002239202381349092,0.0002478027842241271,0.0010179857700771406,0.0013380011746636387,0.9646110112569053,0.0032225285465647545,0.00143195845062834
"def encrypt(message, key):
 cipher_text = []
 for i in range(len(message)):
 cipher_text.append(ord(message[i]) ^ ord(key[i]))
 return cipher_text

def decrypt(cipher_text, key):
 message = []
 for i in range(len(cipher_text)):
 message.append(chr(cipher_text[i] ^ ord(key[i])))
 return """".join(message)",sql,python,0.0010548418527449716,0.023571699213715883,0.005045513271689136,0.00016435566553032628,0.00047367363194363466,0.14482859834824238,0.7881972445138992,0.03570075343851453,0.0009633200637198634
"def two_sum_digits():
 for i in range(0, 10):
  for j in range(0, 10):
   print(i + j)",python,matlab,1.1566195266649515e-12,1.3638880030240583e-13,2.1320170358074954e-11,7.046771247228823e-14,3.0824519646954297e-14,0.9999613643040001,3.863567201586576e-05,4.238979619558049e-15,1.2654926238987203e-12
"list_odd = [] 
for num in [3, 5, 7, 4, 8, 10]:
    if num %2 != 0:
        list_odd.append(num)
        
print(list_odd)",python,matlab,6.665831387330734e-19,4.722248185305289e-24,2.827142933631014e-18,5.365319439566863e-20,1.9424127211545746e-19,1.0,3.6499843899922495e-18,2.399651508223576e-21,5.852001344529501e-19
"#!/usr/bin/env python

import argparse
import numpy as np
import sys, os
from os import listdir
import plantcv as pcv
import datetime

### Parse command-line arguments
def options():
  parser = argparse.ArgumentParser(description=""Get images from an SQLite database and some input information"")
  parser.add_argument(""-d"", ""--directory"", help=""path to directory of images to average."")
  parser.add_argument(""-o"", ""--outdir"", help=""Output directory."", required=False)
  args = parser.parse_args()
  return args


### Functions

def average_all_img(directory,outdir):
    allfiles=os.listdir(directory)
    
    path=str(directory)
    
    allpaths=[]
    
    for files in allfiles:
        p=path+str(files)
        allpaths.append(p)
    
    img, path, filename = pcv.readimage(allpaths[0])
    n=len(allpaths)

    
    if len(np.shape(img))==3:
        ix,iy,iz=np.shape(img)
        arr=np.zeros((ix,iy,iz),np.float)
    else:
        ix,iy=np.shape(img)
        arr=np.zeros((ix,iy,iz),np.float)

    # Build up average pixel intensities, casting each image as an array of floats
    for i,paths in enumerate(allpaths):
        img,path,filename=pcv.readimage(allpaths[i])
        imarr=np.array(img,dtype=np.float)
        arr=arr+imarr/n

    #Round values in array and cast as 8-bit integer
    arr=np.array(np.round(arr),dtype=np.uint8)

    pcv.print_image(arr, (str(outdir)+""average_""+str(allfiles[0])))



### Main pipeline

def main():
    
  # Get options
  args = options()
  
  average_all_img(args.directory, args.outdir)

if __name__ == '__main__':
  main()",python,bash,0.9999997562557045,1.9541718485448878e-07,2.3917462200451406e-08,1.2319709677428947e-11,1.407453803502946e-09,4.822872952089505e-09,4.752257045837281e-09,1.5758223799351033e-10,1.3257162746471958e-08
"import matplotlib.pyplot as plt 
  
def plot_histogram(data): 
    plt.hist(data) 
    plt.title(""Histogram"") 
    plt.xlabel(""Values"") 
    plt.ylabel(""Frequency"") 
    plt.show() 

if __name__ == ""__main__"": 
    data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] 
    plot_histogram(data)",python,html,0.00023375829388634287,0.02526052125393364,0.6925136161581346,7.226092261191367e-05,9.685579524252451e-05,0.00044203328195947377,0.26716366817862375,0.006401527332105319,0.007815758783502295
"import requests
from bs4 import BeautifulSoup

# Function to web scrape news from CNN
def scrape_cnn():
    url = ""https://www.cnn.com/""
    page = requests.get(url)
    if page.status_code != 200:
        return False
    soup = BeautifulSoup(page.content, 'html.parser')
    headlines = []
    for headline in soup.find_all('h3', {'class': 'cd__headline'}):
        headlines.append(headline.get_text().strip())
    return headlines

# Call the function to scrape news from CNN
headlines = scrape_cnn()

# Print out the headlines
for headline in headlines:
    print(headline)",css,css,1.277627736536544e-07,0.5337849469397437,0.24332918966928097,0.15894019074380225,0.04986734141375882,0.00015234139101019981,0.011373612769977762,0.0018725000555185553,0.0006797492541342338
"# Creating a virtual environment
python -m venv env
source env/bin/activate
pip install Django

# Create a Django project
django-admin startproject Blog

# Create an app
cd Blog
python manage.py startapp blog_app

# Install dependencies
# Install crispy_forms to use for styling forms
pip install django-crispy-forms

# Adding applications to the settings.py
# Add the blog_app to the installed applications
INSTALLED_APPS = [
    # django dependencies
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third-party dependencies
    'crispy_forms', 

    #  project applications
    'blog_app',
]

# Add template settings to the settings.py
# Include the templates directory in the settings
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Register models and create the URL path
# Create views to handle requests
# Add templates for posts and pages
# Configure your Django admin interface
# Configure static and media files
# Start the server to see the blog",css,bash,0.9999999969316089,5.954746151938911e-10,1.481906630445192e-11,1.225412457595755e-13,3.7855257759707043e-10,1.306331856947499e-12,1.110270673153258e-12,6.991222655095478e-12,2.0700146104139576e-09
"import random

x = random.randint(0, 10)
print(x)",python,python,3.498201532996486e-05,0.00014332015838404945,4.250251567328787e-05,2.7163001488247874e-07,4.885314420749686e-06,2.388965184487437e-07,0.9977479515945578,0.0020212016110305055,4.646264070241187e-06
"In Python, the length of a string can be checked by using the len() function. For example, the length of the string ""Hello World"" can be checked by using the following code:

my_string = ""Hello World""
print(len(my_string))",python,javascript,1.9977907466295574e-05,4.687400744617717e-08,1.9145202858753157e-07,9.77800263112138e-13,0.9061136267559086,3.3206305027865324e-10,1.3906748108587097e-09,3.1676671216015766e-08,0.09386612361020233
"def most_common_element(arr):
    frequency = 0
    most_common = None

    for element in arr:
        count = arr.count(element)
        if count > frequency:
            frequency = count
            most_common = element

    return most_common

print(most_common_element([3, 4, 2, 3, 5, 3, 2, 3]))",python,matlab,3.4636770336281816e-06,3.50567196797132e-05,3.3070936853595633e-06,6.782476043222159e-07,1.8075260138039068e-06,0.9900126678987742,0.00993741594650856,1.340386517587507e-08,5.589486835209824e-06
"d = {'a':1, 'b':2, 'c':3}

# Using the clear() method
d.clear()

print(d) # Prints an empty dictionary",css,bash,0.5629660033094779,0.01608030909024276,0.006581808811891424,5.462152770626864e-05,0.19956262233151478,1.8375631832866733e-05,0.005633978547212046,6.331112001887363e-05,0.209038969630103
"my_list = [1, 2, 3, 4, 5]

sum_list = sum(my_list)
mean_list = sum_list / len(my_list)

my_list.sort()
middle_index = int(len(my_list) / 2)

if len(my_list) % 2 == 0:
 median_list = (my_list[middle_index] + my_list[middle_index - 1]) / 2
else:
 median_list = my_list[middle_index+1]

print('sum', sum_list)
print('mean', mean_list)
print('median', median_list)",python,python,0.0007558098368190902,0.003530702871930946,0.0015618761964090603,0.00509341564402142,0.00014948453835180988,3.192099776658332e-05,0.9875399381222452,0.000845472410961989,0.0004913793814940507
"def get_times_table(x):
  times_table = []
  for i in range(10):
      times_table.append(x * i)
  return times_table",python,matlab,7.391412547828164e-14,2.9688635250421266e-14,2.055001595408969e-12,8.391231670933104e-15,4.1871482113475974e-15,0.9999998718997056,1.280980593272569e-07,5.797951659327839e-16,6.332806196392417e-14
"def find_first_duplicate(arr):
    seen = dict()

    for i, n in enumerate(arr):
        if n in seen:
            return i
        else:
            seen[n] = True

    return -1

arr = [5, 7, 9, 3, 1, 3]
print(find_first_duplicate(arr))
# Output: 4",python,matlab,6.332881657206225e-05,0.0005830100381990372,3.541697116523493e-05,1.1684686287196462e-06,4.9960309524958266e-06,0.8765309463771521,0.12277725012769794,7.517390788389545e-07,3.1314305538384965e-06
"import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Load data
data = pd.read_csv(""data.csv"")

# Split data into training and test sets
X = data[['height', 'weight']]
y = data['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate model
score = model.score(X_test, y_test)
print(""Model Accuracy: {:.2f}"".format(score))",css,css,0.004263945132094545,0.5827791307715093,0.019816766067491783,4.2244079154311365e-05,5.364593311727996e-06,1.094188948729276e-05,0.3911980743897756,5.212969150851172e-06,0.0018783201080247362
"def function(arg):
    for i in arg:
        print(i)",python,javascript,0.000286373197400086,0.0021039312191030736,0.0012253598027071877,1.3081745963661495e-05,0.9189975868226806,0.05930385784849311,0.016932285499618793,0.0010515574231326921,8.596644090078143e-05
"def number_of_common_letters(s1, s2):
    common_letters = 0
    for c in s1:
        if c in s2:
            common_letters += 1
    return common_letters",python,matlab,0.000504505440164818,0.002696179390622469,0.001659992546634619,4.598619966519678e-05,0.00030932146828305864,0.6566766436708144,0.3361472695787962,0.0012457804400904972,0.0007143212649287116
"def last_characters(string):
 return string[-3:]",python,java,2.839318516909983e-23,1.8535574305719918e-13,5.874216272131269e-15,0.9999999982369607,6.664960335197061e-26,2.8201882724120404e-19,1.7434527504454368e-09,1.9394688900596057e-11,7.059484647344903e-16
"def count_frequency(arr):
    freq_dict = {}
    for ele in arr: 
        if ele in freq_dict: 
            freq_dict[ele] += 1
        else: 
            freq_dict[ele] = 1
    return freq_dict

arr = ['a', 'a', 'b', 'a', 'c', 'a']
result = count_frequency(arr)

print(result) # Output: {'a': 4, 'b': 1, 'c': 1}",css,matlab,0.0009819139081521345,0.010065993698076979,0.0009250182105500207,0.00010470999421779524,0.0003691996400791334,0.7387145189185955,0.24823524229274185,8.036727482498788e-05,0.0005230360627615913
"maxVal = 0
maxItem = {}
for item in items:
 if item['price'] > maxVal:
 maxVal = item['price']
 maxItem = item

print(""The item with the highest price is: "", maxItem)",python,javascript,0.0007500740428173055,0.18961221794360142,0.014712763061151731,3.242755116501222e-05,0.593036939261596,0.0008088764129005189,0.20022803448114126,0.0001102961462365627,0.0007083710993902546
"#O(n^2)
def order_without_nlogn(arr): 
	n = len(arr)

	# Traverse through all array elements 
	for i in range(n): 
	
		# Last i elements are already in place 
		for j in range(0, n-i-1): 
		
			# traverse the array from 0 to n-i-1 
			# Swap if the element found is greater 
			# than the next element
			if arr[j] > arr[j+1] : 
				arr[j], arr[j+1] = arr[j+1], arr[j] 

# Driver code to test above 
arr = [3, 5, 2, 1, 4]
order_without_nlogn(arr) 

# O(nlogn)
def order_with_nlogn(arr): 
	arr.sort() 

# Driver code to test above 
arr = [3, 5, 2, 1, 4]
order_with_nlogn(arr)",python,matlab,3.0340292638734775e-07,2.3676681159863537e-07,1.1472995466629879e-07,1.8433632797574827e-07,1.3083293436356708e-06,0.9939189856823276,0.00565353718126941,4.3208613258524315e-08,0.00042528636242543236
"def nextPowerOf2Generator(n): 
    power = 1
    while True: 
        pow_val = power * 2
        yield pow_val 
        power = pow_val 
  
n = 4

for i in nextPowerOf2Generator(n):
    if i > n:
        print(i)
        break",python,matlab,0.0013280441144411707,0.005858281773174229,0.0024798277123318168,0.0001283393457461644,0.00040168488985799667,0.7702693854288647,0.21726510599491883,0.0009090135057979606,0.0013603172348671693
"#!/usr/bin/python3    

	#Artifical load profile generator v1.1, generation of artificial load profiles to benchmark demand side management approaches
    #Copyright (C) 2018 Gerwin Hoogsteen

    #This program is free software: you can redistribute it and/or modify
    #it under the terms of the GNU General Public License as published by
    #the Free Software Foundation, either version 3 of the License, or
    #(at your option) any later version.

    #This program is distributed in the hope that it will be useful,
    #but WITHOUT ANY WARRANTY; without even the implied warranty of
    #MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    #GNU General Public License for more details.

    #You should have received a copy of the GNU General Public License
    #along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    

    
#This is an example configuration file!

# Select the output writer
import writer as writer

#Random seed
seed = 42

#input files:
weather_irradiation = 'input/weather/solarirradiation_twenthe.csv'
weather_timebaseDataset = 3600 #in seconds per interval


#Simulation:
#number of days to simulate and skipping of initial days. Simulation starts at Sunday January 1.
numDays = 365			# number of days
startDay = 0			# Initial day


#Select the geographic location. Refer to the Astral plugin to see available locations (or give a lon+lat)
# Use e.g. https://www.latlong.net/
from astral import Location

location = Location()
location.solar_depression = 'civil'
location.latitude = 52.239095
location.longitude = 6.857018
location.timezone = 'Europe/Amsterdam'
location.elevation = 0

#Select the devices in the neighbourhood

#Devices
#Scale overall consumption:
consumptionFactor = 1.0 #consumption was a bit too high

# Penetration of emerging technology in percentages
# all values must be between 0-100
# These indicate what percentage of the houses has a certain device

# Electric mobility, restriction that the sum <= 100
# Note, households with larger driving distances will receive EVs first
penetrationEV 				= 13
penetrationPHEV 			= 32

# PV and storage, restriction that Battery <= PV
# Note PV and battery size depend on the annual household consumption
# This emulates the Dutch ""nul-op-the-meter regime (net zero annual electricity usage)
penetrationPV				= 50
penetrationBattery 			= 10	#Note only houses with PV will receive a battery!

# Heating systems, with restriction that the sum <= 100
penetrationHeatPump 		= 25
penetrationCHP				= 5		# Combined heat and power

penetrationInductioncooking = 25


#Device parameters:
#EV
capacityEV = 	42000	#Wh
powerEV = 		7400	#W
capacityPHEV = 	12000	#Wh
powerPHEV = 	3700	#W

#PV
PVProductionPerYear = 	220		#average kWh per m2 solar panel on annual basis
PVAngleMean = 			35 		#degrees, 0 is horizontal to earth surface
PVAngleSigma = 			10		#degrees
PVAzimuthMean = 		180 	#degrees, 0 is north, 90 is east
PVAzimuthSigma = 		90 		#degrees
PVEfficiencyMin = 		15		#% of theoretical max
PVEfficiencyMax = 		20		#% of theoretical max

#Driving distances
commuteDistanceMean = 	25		#km
commuteDistanceSigma = 	10		#km


#Battery
capacityBatteryLarge = 	12000 	#Wh
capacityBatteryMedium = 5000  	#Wh
capacityBatterySmall = 	2000 	#Wh
powerBatteryLarge = 	3700 	#W
powerBatteryMedium = 	3700  	#W
powerBatterySmall = 	3700 	#W


#Kitchen
#Consumption of devices
ConsumptionOven = 				2000	#W
ConsumptionMicroWave = 			800		#W
ConsumptionStoveVentilation = 	120 	#W #But this is maximum, usually set lower!
ConsumptionInductionStove = 	2200 	#W #http://homeguides.sfgate.com/many-watts-induction-stove-85380.html

ConsumptionFridgeBigMin = 		80		#W
ConsumptionFridgeBigMax = 		120		#W
ConsumptionFridgeSmallMin = 	50		#W
ConsumptionFridgeSmallMax = 	80		#W

ConsumptionKettle = 			2000	#W

#White goods
ConsumptionIron = 				2000	#W
ConsumptionVacuumcleaner = 		1500	#W

#House
ConsumptionHouseVentilation = 	50 		#W


#Household randomization
#all values must be between 0-1000
familyOutingChanceMin = 			10 	#percentage
familyOutingChanceMax = 			20 	#percentage
personWeekdayActivityChanceMin = 	20 	#percentage
personWeekdayActivityChanceMax = 	30 	#percentage
personWeekendActivityChanceMin = 	20 	#percentage
personWeekendActivityChanceMax = 	30 	#percentage



householdList = []

#Select the types of households
import households

for i in range(0,1):
	householdList.append(households.HouseholdSingleWorker())

for i in range(0,2):
	householdList.append(households.HouseholdSingleRetired())

for i in range(0,1):
	householdList.append(households.HouseholdDualWorker(True))

for i in range(0,1):
	householdList.append(households.HouseholdDualWorker(False))

for i in range(0,2):
	householdList.append(households.HouseholdDualRetired())

for i in range(0,2):
	householdList.append(households.HouseholdFamilyDualWorker(True))

for i in range(0,1):
	householdList.append(households.HouseholdFamilyDualWorker(False))
",sql,typescript,0.00011926677767388108,7.655913760544518e-05,0.00038972273369592764,0.00018571238403878148,5.480165615331301e-06,8.642328847629686e-05,9.51881992572661e-06,5.179580956918246e-05,0.9990755208833993
"def contains_vowels(string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    for char in string:
        if char in vowels:
            return True
    return False

print(contains_vowels("" hello, how are you""))",python,python,2.931311989930972e-07,0.0009685428039714597,9.925809930499433e-05,0.0003440507131554457,9.935563873479781e-09,5.919904491280728e-06,0.9974017315484446,0.0011468601094593823,3.3333754409831786e-05
"# import packages
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

# create linear regression object
reg = LinearRegression()

# create polynomial features
poly = PolynomialFeatures(degree = 2)
x_poly = poly.fit_transform(X_train)

# fit the linear regression model with the polynomial features
reg.fit(x_poly, y_train)

# predict the y-values using the regression model
y_pred = reg.predict(poly.fit_transform(X_test))",python,bash,0.49869595726089605,0.08775871107676783,0.012996088490711502,8.353802787134973e-05,0.004825593710578501,0.000267326477459976,0.12510521625981633,1.801748183862847e-05,0.2702495512140597
"def is_armstrong_number(num):
    order = len(str(num))
    sum = 0
    temp = num

    while temp > 0:
        remainder = temp % 10
        sum += remainder ** order
        temp //= 10

    if sum == num:
        return True
    else:
        return False",python,matlab,2.0683391094994137e-10,1.3493564887066703e-11,4.917097257543181e-09,1.00132522279895e-09,1.6383899017596842e-09,0.9999999918475281,2.4699034551229506e-10,1.8672778149848404e-11,1.0966905777496852e-10
"def dfs(graph, start):
    visited, stack = set(), [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)
    return visited",python,python,0.060757492944863246,0.1871483553454414,0.021652427576173527,0.006878099832101338,0.0029148628538533962,0.002842635330020203,0.70249693418119,0.00371318547862718,0.01159600645772974
"""""""
Generate a sentence based on the input text
""""""

import random

#get the user input
user_input = ""The quick brown fox jumps over the lazy dog.""

#split the string into a list of words
word_list = user_input.split()

#shuffle the list
random.shuffle(word_list)

#convert the list back to a string
generated_sentence = ' '.join(word_list)

#print the generated sentence
print(generated_sentence)",sql,sql,6.689435642432442e-06,0.0014326336813373557,0.0001312299753177849,3.896735176777799e-05,1.3466180155145958e-05,3.5836452311235017e-07,0.020756934831255545,0.9573491855252365,0.020270534654764156
"def factorial(n):
if (n == 0):
  return 1
else:
  return n * factorial(n-1)

print(factorial(5))  # Should print 120",python,python,3.793511116623568e-05,0.00014543534335222463,7.420862874727573e-05,1.806135088207432e-06,3.79301661060605e-05,1.5192011973337216e-05,0.9994131477417235,9.40748838497863e-06,0.00026493737345817153
"def binary_to_decimal(binary_number):
    decimal_number = 0
    for digit in binary_number:
        decimal_number = decimal_number*2 + int(digit)
    return decimal_number

binary_number = ""1010""

print(binary_to_decimal(binary_number)) # 10",python,python,0.012998440187321263,0.027327792248530675,0.030433695222705164,0.04556440288382651,0.006845732580943876,0.0016952453209096755,0.8629285503919277,0.0020354025083379884,0.01017073865549707
"# sentiment_rating function takes in a string of text 
# and returns a sentiment score from -1 to 1
def sentiment_rating(text):
    # Create a sentiment analyzer object
    sentiment_analyzer = SentimentIntensityAnalyzer()
 
    # Calculate the sentiment score
    sentiment_score = sentiment_analyzer.polarity_scores(text)

    return sentiment_score['compound']",python,python,0.0001858323678406492,0.06985242473884493,0.0006305875497647568,0.005049617525745726,0.023729393658998954,0.0005278292468749863,0.6954548139400196,0.012633712507441877,0.19193578846446863
"x = 10
y = 20

sum = x + y

print(sum) # Output: 30",python,python,0.05185842594274103,0.12911973697221063,0.060321230165576424,0.02725446175282098,0.004078337629408272,0.003613967332877745,0.7217334374790888,0.0011628638593440457,0.0008575388659319873
"import re
import operator
 
input_string = """"""top
 
PID	USER	  PR	NI	VIRT	RES	SHR	S	%CPU	%MEM	TIME+	COMMAND
 1	root	  20	0	 759236	9740	8116	S	0.0	 0.0	 0:00.68	init
[truncated for brevity]

885	dnsmasq	 20	0	 97128	8108	5556	S	0.0	0.1	 0:00.37	dnsmasq
 886	dbus-daem	 20	0	  12744	1420	1204	S	0.0	 0.0	 0:00.02	dbus-daemon
 887	NetworkMa	 20	0	 71965	3164	2152	S	0.0	 0.1	 0:00.08	NetworkManager
 888	avahi-daem	 20	0	  12088	1332	1072	S	0.0	 0.0	 0:00.00	avahi-daemon
 889	avahi-daem	 20	0	  12084	1332	1072	S	0.0	 0.0	 0:00.00	avahi-daemon""""""

# Find all of the entries 
processes = re.findall(r'(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+(.*?)\s+', input_string)

# Create a list of tuples for each process 
process_list = [(process[4],process[5], process[0], process[11]) for process in processes]

# Sort the list based on memory 
sorted_list = sorted(process_list,key=operator.itemgetter(1), reverse=True)

# List the top 5 processes
print(""Top 5 processes taking the most memory:"")
for i in range(5):
    print(sorted_list[i][2], sorted_list[i][3], ""-"", str(sorted_list[i][1])+""KB"")
    
 # Output: 
 # Top 5 processes taking the most memory:
 # init init - 9740KB
 # dnsmasq dnsmasq - 8108KB
 # NetworkManager NetworkManager - 3164KB
 # avahi-daemon avahi-daemon - 1332KB
 # avahi-daemon avahi-daemon - 1332KB",python,python,0.009728438041138076,0.006536197324649078,0.09118534054320317,0.00024912851409574866,0.019744782240869063,0.008161174892893327,0.7864069808806898,0.01710016853994798,0.06088778902251373
"# -*- coding: utf-8 -*-
# Author : https://github.com/kmlee408
#          https://github.com/jeonghoonkang

'''
    부산 URL= http://openapi.airkorea.or.kr/openapi/services/rest/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?serviceKey=fCRWi0DoCfoCPMHyDwai3trva10y4qb8mh9aysoHzvLKDWw6Q2bWOsvuM4%2BsRdvE4dPiKqBFD7vj7%2FM2noCe2g%3D%3D&ver=1.3&pageSize=10&pageNo=1&sidoName=%EB%B6%80%EC%82%B0&startPage=1&numOfRows=100

    실행 방법=  $python mdust_pusan.py
    (지역을 바꾸고 싶으면 misaemunji 함수 안에 location = '경기'  와 같은 식으로 변경)
    (측정 가능 지역: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종)
    '''
    
import requests
from urllib import urlencode, quote_plus
from bs4 import BeautifulSoup
import pandas as pd
import keytxt

   # 서비스키는 data.go.kr 에서 받아야 함
   # https://www.data.go.kr/dataset/15000581/openapi.do?mypageFlag=Y

service_key = keytxt.key

def misaemunji(service_key, location=None, spot=None):

    #location으로 가능한 것: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종
    
    #시도별 실시간 측정 조회 api
    URL ='http://openapi.airkorea.or.kr/openapi/services/rest/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?serviceKey='

    # URL 인자 설정 및 인코딩
    queryParams = '&' + urlencode({quote_plus('numOfRows') : '100', # 최대로 설정
                                   quote_plus('pageSize'): '10',
                                   quote_plus('pageNo') : '1',
                                   quote_plus('startPage') :'1',
                                   quote_plus('sidoName') : location,
                                   quote_plus('ver') : '1.3'
                                   })

    if location == None : 
        exit ('you shoud write location such like 부산')

    r = requests.get(URL+service_key+queryParams)
    html = r.text
    soup = BeautifulSoup(html, 'html.parser') #parsing
    info_ = soup.select('item')

    misae_station = {}
    for info__ in info_:
        datetime_ = info__.datatime.text 
        list_ = [str(info__.pm10value.text),str(info__.pm25value.text)]
            # list 미세먼지 측정값 2가지
        misae_station[info__.stationname.text.encode('utf-8')] =list_
            # misae_station 은 기상대 이름별로 pm2.5, pm10 데이터를 담고 있음
    
    #dataframe 생성
    index_list = ['미세먼지10','초미세먼지2.5']
    df = pd.DataFrame(misae_station, index = index_list) 
    if spot != None :
        if spot in misae_station:
            '''
            print('측정시간 : ' + str(datetime_)), 2018-11-08 20:00
            print('측정지역 : ')
            print(location)
            print(spot) 
            print('(단위 : ㎍/㎥)')
            print misae_station[spot][1]
                '''
            return (str(datetime_), str(spot), 'pm2.5', misae_station[spot][1]  )
    
def get_public_mise(loc='서울', station='강남구'):
    
    kangnam = misaemunji(service_key, location=loc, spot=station) 
    return kangnam

if __name__ == '__main__':
    
    kangnam = misaemunji(service_key, location='서울', spot='강남구') 
    #location으로 가능한 것: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종
    print kangnam


",css,html,8.425386202865032e-08,0.0318682813252367,0.9513306088611265,0.013870378042981796,7.651378304880256e-05,2.647739041119617e-05,0.002190849335738136,0.0004640535636770019,0.00017275344391797596
"import sys

class ConnectFour:

# Variables
 
 C4_COLUMNS = 7
 C4_ROWS = 6
 
 def __init__(self):
 self.field = [[0 for i in range(self.C4_COLUMNS)] for i in range(self.C4_ROWS)]
 
 def print_field(self):
 for r in range(self.C4_ROWS):
 for c in range(self.C4_COLUMNS):
 print(self.field[r][c], end = "" "")
 
 print()

# Create the game
def populate_field(self):
 
 # The field needs to be populated 
 # with pieces of two players:
 # 1 - player 1, 2 - player 2
 
 player = 1
 
 print(""Player {} is at turn"".format(player))
 while True:
 
 # Take column from the player
 column = int(input(""Choose a column (0-6): ""))
 if  0 <= column < self.C4_COLUMNS:
 
 # Check if there is room in the column
 if self.field[0][column] == 0:
 
 # Place the piece in the lowest
 # empty space in the column
 for r in reversed(range(self.C4_ROWS)):
 if self.field[r][column] == 0:
 self.field[r][column] = player
 break
 
 # Check conditions for victory
 if self.check_victory(player, r, column):
 print(""Player {} won!"".format(player))
 sys.exit()
 
 # Change player
 player = 1 if player == 2 else 2
 
 else:
 # Column number is not correct
 print(""Column number is not correct"")
 else:
 print(""Column is full!"")
 
 # Print the field
 self.print_field()
 
 print(""Player {} is at turn"".format(player))
 
# Check victory condition
def check_victory(self, player, r, column):
 
 # Check the same pieces
 # in horizontal direction
 cnt_horizontal = 0
 for c in range(self.C4_COLUMNS):
 if self.field[r][c] == player:
 cnt_horizontal += 1
 
 if cnt_horizontal == 4:
 return True
 
 # Check the same pieces
 # in vertical direction
 cnt_vertical = 0
 for rr in range(self.C4_ROWS):
 if self.field[rr][column] == player:
 cnt_vertical += 1
 
 if cnt_vertical == 4:
 return True
 
 # Check the same pieces
 # in diagonal direction
 cnt_diagonal1 = 0
 rrr = r
 ccc = column
 
 # Go up-left
 while rrr >= 0 and ccc >= 0:
 if self.field[rrr][ccc] == player:
 cnt_diagonal1 += 1
 rrr -= 1
 ccc -= 1
 
 # Go down-right
 rrr = r
 ccc = column
 while rrr < self.C4_ROWS and ccc < self.C4_COLUMNS:
 if self.field[rrr][ccc] == player:
 cnt_diagonal1 += 1
 rrr += 1
 ccc += 1
 
 if cnt_diagonal1 == 4:
 return True
 
 # Check for another diagonal
 cnt_diagonal2 = 0
 rrr = r
 ccc = column
 
 # Go up-right
 while rrr >= 0 and ccc < self.C4_COLUMNS:
 if self.field[rrr][ccc] == player:
 cnt_diagonal2 += 1
 rrr -= 1
 ccc += 1
 
 # Go down-left
 rrr = r
 ccc = column
 while rrr < self.C4_ROWS and ccc >= 0:
 if self.field[rrr][ccc] == player:
 cnt_diagonal2 += 1
 rrr += 1
 ccc -= 1
 
 if cnt_diagonal2 == 4:
 return True
 
 return False

# Create the game
if __name__ == '__main__':
 game = ConnectFour()
 game.populate_field()",python,python,0.0010443749312157172,0.007959580802039012,0.06009285722605387,1.7911658719695792e-05,0.0003151003704824468,0.024009228918856818,0.5525120934474547,0.3155601552602117,0.038488697384965985
"list1 = [1, 2, 3, 4] 
list2 = [5, 6, 7, 8] 

#create an empty list
list3 = []

#iterate through each item in the two lists
for x, y in zip(list1, list2):
    #append each tuple as a single element in the new list
    list3.append((x, y))

print(list3)",python,python,0.0016689990572961648,0.02050164434474127,0.028408260014719845,0.007098755291144742,0.07189868881185581,0.22623821807827368,0.581888505068165,0.0023026312481869695,0.059994298085616585
"class TotalPriceCalculator():
    def __init__(self):
        self.total_price = 0
    
    def add_item(self,price):
        self.total_price+=price
    
    def get_total_price(self):
        return self.total_price",python,python,0.0002203034007475526,0.01902437794016461,0.03171843660106876,2.1546975902667756e-05,6.755753536009968e-05,9.186717866243395e-06,0.9005522780966989,0.04787839699316989,0.0005079157390213081
"def is_anagram(w1, w2):
    # Check if lengths are equal
    if len(w1) == len(w2):
        # Sort the strings
        s1 = sorted(w1)
        s2 = sorted(w2)
        # Check if sorted strings are equal
        if s1 == s2:
            return True
    return False

# Example
w1 = ""silent""
w2 = ""listen""

print(is_anagram(w1, w2)) #Output: True",python,python,0.0022573856153494444,0.013546609244563662,0.0058198168597196126,0.0005990366667720215,0.0019664138756735746,0.0016860981927956605,0.9689403915910625,0.00353772834501748,0.0016465196090458423
"def is_prime(num):
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False
    else:
        return False
    return True",python,matlab,2.6035316687586582e-12,3.608369765679841e-18,2.6560576365036158e-11,8.069584230411778e-14,1.7825873837392689e-13,0.9999996091849386,3.9078415884261144e-07,1.008457847876096e-12,4.710651286960588e-13
"def are_all_characters_unique(string): 
    return len(set(string)) == len(string) 

# Driver code 
print(are_all_characters_unique(""Hello"")) # Output: false
print(are_all_characters_unique(""abcdef"")) # Output: true",python,java,1.524855024400265e-07,0.00010636337175131625,5.548258945203895e-05,0.7342061276237877,7.060441100310464e-11,1.4845750035664505e-10,0.2653604226540987,0.00027074654878150894,7.045075645107007e-07
"def hanoi(n, source, aux, dest):
 if n == 1:
  print('Move disk 1 from {0} to {1}'.format(source, dest))
 else:
  hanoi(n-1, source, dest, aux)
  print('Move disk {0} from {1} to {2}'.format(n, source, dest))
  hanoi(n-1, aux, source, dest)

# Driver program
n = 4
hanoi(n, 'a', 'b', 'c')",python,python,0.2332800029792819,0.08284397895096977,0.02802091567550683,0.00045901371053981,0.0068298107287711775,0.004764074181898676,0.6218790643164367,0.00732270294999331,0.014600436506601745
"list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']

# sort strings by length
list_of_strings.sort(key=len)

# print sorted list
print(list_of_strings)",python,python,0.00139586360132316,0.07572316004678704,0.008453059246897281,0.00020428451508394712,0.027799737175549254,0.0005086995956053644,0.8704331066122392,0.014893157598166283,0.0005889316083484001
"def extract_words(word_list, given_letter):
    extracted_words=[]
    for word in word_list:
        if word[0]==given_letter:
            extracted_words.append(word)
    return extracted_words",python,matlab,0.11008282492271411,0.007981942142771153,0.028348974688699853,7.154007626890375e-05,0.000993794598464082,0.5536173480283864,0.2911758866634404,0.00564721877277427,0.002080470106480784
"# convert days
def convert_days(days):
  years = days // 365
  months = (days % 365) // 30
  days = (days % 365) % 30 
  return (years, months, days)

# test
days = 900
years, months, days = convert_days(days)
print(""Number of years ="", years) 
print(""Number of months ="", months) 
print(""Number of days ="", days)",python,python,0.0009471741126667457,0.011965296916388384,0.005067447210566517,0.0004626418035572408,0.002238884129772718,0.0005311972611223558,0.9719979582250798,0.001645295500178484,0.005144104840667704
"import requests
from bs4 import BeautifulSoup

def scraper(url):
  response = requests.get(url)
  html = response.content
  soup = BeautifulSoup(html, 'lxml')

  reviews_container = soup.find_all('div', class_='review_container')
  
  reviews = []
  for review in reviews_container:
    rating = review.find('span', attrs={'class': 'rating'}).text
    description = review.find('p', class_='review_description').text
    reviews.append((rating, description))

  return reviews

url = 'https://www.example.com/hotels/reviews'
reviews = scraper(url)",css,java,4.938650773749297e-13,0.035307601825543364,0.06611252791369712,0.8985056337952225,1.9394918729551258e-06,5.269810405191276e-07,5.846840321523027e-05,1.1459229092253292e-05,1.8423598221179132e-06
"# empty list to store the numbers
num_list = []

# read the user input
while True:

    # read the input and add to the list
    user_input = input(""Enter a number: "")
    if user_input == """":
        break
    else:
        num_list.append(int(user_input))
    
# calculate the total
total = 0
for num in num_list:
    total += num

# display the result
print(""The total is: "", total)",python,python,0.022417152059415676,0.001349484597636799,0.004487420289556223,0.003822243586917132,0.031933500042194744,0.0007023249686567099,0.4854804412272711,0.002080358501011489,0.44772707472734
"import dialogflow_v2 as dialogflow
import requests

project_id = 'project-id'
session_client = dialogflow.SessionsClient()
session = session_client.session_path(project_id, 'session-id')

while True:
 text = input('User: ')
 text_input = dialogflow.types.TextInput(text=text, language_code='en-US')
 query_input = dialogflow.types.QueryInput(text=text_input)
 response = session_client.detect_intent(session=session, query_input=query_input)

 print('Assistant:', response.query_result.fulfillment_text)",python,css,0.017716047574342194,0.47109967343019193,0.03807867315063678,0.0005566327022264933,0.000984869001650355,0.0027346687929135504,0.43278501852498125,0.0075997869516967785,0.028444629871360757
"#!/usr/bin/env python

import csv

total_attendees = 0
with open('attendance.csv', 'r') as csv_file:
    csv_reader = csv.reader(csv_file)
    for row in csv_reader:
        total_attendees += 1

print(f'Total Attendees: {total_attendees}')",python,bash,0.989221475426631,0.0015116241286599226,0.0007206882871143677,1.7066929218969168e-06,0.00012019476607627206,0.00031855546100164397,0.0071396528263191214,0.00022419816769873556,0.0007419042435770915
"#import itertools 
  
# initialize empty list to hold all anagrams 
word_pairs = [] 
  
# enter the source text  
source_text = input(""Enter the source text: "") 
  
# split the source text into individual words
words = source_text.split() 
  
for word1, word2 in itertools.combinations(words,2): 
    if (sorted(word1) == sorted(word2)): 
        word_pairs.append((word1, word2)) 
  
# print the list of anagram pairs in source text  
print(word_pairs)",python,sql,0.0017627665697466887,0.026350652385355586,0.009525169836081761,2.6352468846199573e-05,0.008201030280513092,0.005946939874647894,0.4619721456029941,0.47538219891797406,0.010832744063840598
"list = [5, 2, 8, 1]
list.sort() 
print(list)",python,python,0.0009042762661031116,0.007101031420308626,0.005730385962891198,0.0002625576964697235,0.0033674230682344255,0.023184106832915823,0.8527007261868585,0.10465400980229436,0.0020954827639242195
"def sort_array(A):
    if len(A) <= 1:
        return A

    pivot = A[0]
    left = [item for item in A if item < pivot]
    right = [item for item in A if item > pivot]

    return sort_array(left) + [pivot] + sort_array(right)",python,python,0.00038442218861886053,0.0038780410424968897,0.019165010393317593,1.7983349947475617e-05,0.007406383477218359,0.003101941681451138,0.9656676100991577,0.00033217438264027344,4.6433385151805564e-05
"def sort_descending(arr):
    arr.sort(reverse=True)
    return arr

arr = [9, 2, 7, 1]
res = sort_descending(arr) 
print (str(res))",python,python,4.836463655721732e-05,0.0011354175784212479,8.292650137467615e-05,1.0662427657834119e-05,6.150400497713787e-05,0.003020225957926455,0.995608420922718,7.694864749183638e-06,2.478310561819678e-05
"def wrap_words(text):
    words = text.split(' ')
    line_length = 15
    new_text = ''
    line = ''
    for word in words:
        if len(line + word) > line_length:
            new_text += line + '\n'
            line = word + ' '
        else:
            line += word + ' '
    new_text += line
    return new_text

original_text = 'This is a string with some long words.'
wrapped_text = wrap_words(original_text)
print(wrapped_text)",python,bash,0.9098341770913769,0.005812738352450347,0.007235064659231676,0.0004730689789803379,6.846339004672841e-06,0.0005268369478545641,0.07323759055262453,0.002257877908647021,0.0006157991698298681
"class InputValidator:
    def __init__(self, userInput):
        self.userInput = userInput
 
    def is_valid_quantity(self):
        try:
            int(self.userInput) # Check if user input is an integer.
            return True
        except ValueError:
            return False

# Create a class instance
inputValidator = InputValidator(""10"") 
result = inputValidator.is_valid_quantity()
print(result) # Displays True",python,python,0.00022484403689975477,0.0024739269711608882,0.019165930581111816,0.00045745213184010975,2.7099285522174926e-05,5.277654832074187e-08,0.9748501498563398,0.002605304674894627,0.00019523968568263873
"import requests
from bs4 import BeautifulSoup

# define url of page
url = 'http://example.com/headlines'

# make request and parse html
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# get headlines
headlines = soup.find_all(class_='headline')

# iterate over each headline
headlines_list = []
for headline in headlines:
 # get headline text
 headline_text = headline.find('h3').text
 # get headline page url
 headline_page_url = headline.find('a')['href']
 # get date
 headline_date = headline.find(class_='date')
 # add to list
 headlines_list.append((headline_text, headline_page_url, headline_date))

print(headlines_list)",python,css,2.1961244215694302e-08,0.8994093511250068,0.08078739614836328,0.01365101395523322,0.00011983397430706415,6.351199234942472e-06,0.004855231629211023,0.0010617088307056121,0.00010909117669394946
"class BankAccount:
   def __init__(self, account_number, account_balance):
        self.account_number = account_number
        self.account_balance = account_balance

    def deposit(self, deposit_amount):
        self.account_balance += deposit_amount

    def withdraw(self, withdraw_amount):
        if self.account_balance - withdraw_amount >= 0:
            self.account_balance -= withdraw_amount
            return True
        return False",python,python,6.16964167848558e-05,0.004653552012458344,0.08370748183400387,2.2858576344810083e-06,1.2681086120629602e-05,1.0745015600514365e-06,0.8358846310738116,0.0755989059552576,7.769126236848402e-05
"import random
x = random.randint(5, 20)
print(x)",python,python,0.0005011243139515766,0.0014710850400222561,0.00038382519542365357,4.185295336585127e-06,6.628311519326645e-05,3.3384072366392258e-06,0.9576320567801396,0.03987440030214203,6.370155055430553e-05
"def bubbleSort(list): 
    for num in range(len(list)-1,0,-1): 
        for i in range(num): 
            if list[i] < list[i+1]: 
                temp = list[i] 
                list[i] = list[i+1] 
                list[i+1] = temp 
  
list = [54,26,93,17,77,31,44,55,20] 
bubbleSort(list) 
print(""Sorted list:"")
for i in range(len(list)): 
    print(list[i],end="" "")",python,matlab,1.0235932898446925e-08,1.1752767105199547e-09,1.404769147020575e-07,2.1862597235828665e-09,2.7207753763904067e-08,0.9998825394885635,0.0001121943078378861,5.071117095977613e-06,1.3804364701787269e-08
"import copy

original_dict = {'a': 1, 'b': 2}

shallow_copy_dict = copy.copy(original_dict)",css,python,0.05610952033670681,0.24195750460193674,0.04083310732969459,0.0027473324037293628,0.012674130333291976,0.013888482239493037,0.5912253381159179,0.020606603777086004,0.01995798086214356
"def print_fibonacci_sequence(n):
  a = 0
  b = 1
  
  print(a, end=' ')
  print(b, end=' ')
  
  for i in range(2, n):
    c = a + b
    a = b
    b = c
    print(c, end=' ')

n = 10
print_fibonacci_sequence(n)",python,python,4.4608530324250545e-06,2.1557547151105718e-05,2.3112109201981213e-05,4.2321288869084355e-07,1.103654527754312e-06,5.2820528851842445e-05,0.9998818212002295,7.85177716121693e-06,6.849116955352971e-06
"def sum_elements(arr):
  s = 0
  for row in arr:
    s += sum(row)
  return s

arr = [[1,2,3],
[4,5,6],
[7,8,9]]

print(sum_elements(arr))

# Output: 45",python,matlab,0.0009044299169000769,0.004942402334408057,0.0006888777144422697,0.00024044639069172933,0.0002683013943233791,0.6719568663034259,0.32073341181348813,5.8208722898901576e-05,0.00020705540942158245
"import random

print('Player 1 Taking Turn')

random_number = random.randint(0, 100)

p1_name = input('Enter your name: ')  
p2_name = input('Enter your name: ')

game_over = False

while not game_over:

  # Player 1 guessing
  p1_guess = int(input('Guess a number between 0 and 100: '))
  if p1_guess == random_number:
    print('{} wins!'.format(p1_name))
    game_over = True
  elif p1_guess > random_number:
    print('{} your guess is too high'.format(p1_name))

  # Player 2 guessing
  print('\n' + p2_name + ' Taking Turn')
  p2_guess = int(input('Guess a number between 0 and 100: '))
  if p2_guess == random_number:
    print('{} wins!'.format(p2_name))
    game_over = True
  elif p2_guess > random_number:
    print('{} your guess is too high'.format(p2_name))
    
print('Game over!')",python,python,0.03294935698566355,0.07376565334122237,0.01664549587213343,0.028508395138938544,0.0004569654580918174,2.027202270871681e-05,0.8429725883802696,0.0029072396576537906,0.0017740331433179876
"# Program to print ""Hello, World!""

print(""Hello, World!"")",python,bash,0.9999995790678231,1.5726193371794776e-11,7.063116251421275e-11,3.3540950918887666e-32,3.905960560853784e-07,2.2228962084939223e-14,3.024785133164939e-08,1.6757293259040868e-12,2.1407428587856817e-13
"import requests
import sqlite3

# create connection
conn = sqlite3.connect('data.db')
c = conn.cursor()

# create table
c.execute('CREATE TABLE Prices (stock_symbol TEXT, price REAL)')

# get stock price data
res = requests.get('https://api.iextrading.com/1.0/stock/AAPL/price')
price = res.json()

# insert data into table
c.execute('INSERT INTO Prices (stock_symbol, price) VALUES (?, ?)',
('AAPL', price))

# commit changes to database
conn.commit()

# close database connection
conn.close()",sql,sql,1.6129656604026191e-06,0.033015333007112145,5.036298748936325e-05,1.9769755233324192e-05,2.033189412717439e-05,4.350258897491344e-06,0.0015736407822481862,0.9646713771008973,0.0006432212483346283
"def is_anagram(s1, s2):
    s1_list = list(s1)
    s1_list.sort()
    s2_list = list(s2)
    s2_list.sort()

    if(s1_list == s2_list):
        return True
    else:
        return False",python,python,0.0024457512033981697,0.00745266385611029,0.008155459229078453,0.00027097346361501496,0.0014259086795023184,0.0018302155056819805,0.9747049926375705,0.0019742843802245157,0.0017397510448189453
"import requests
import re

url = ""https://www.youtube.com/user/Thexvid/videos""

r = requests.get(url)
titles = re.findall('<a href=""/watch\?v=([^""]+)"">(.+?)<\/a>',r.content.decode('utf-8'))

for title in titles:
 print(title[1])",python,java,6.348019287062441e-14,0.0015724713576486732,0.015551169971457862,0.9826111126028685,8.221284634565524e-07,1.1165915301076327e-06,0.000255181475482055,7.4516721326277305e-06,6.742003533848754e-07
"def calculate_grade(score):
    if score >= 90:
        return ""A""
    elif score >= 80:
        return ""B""
    elif score >= 70:
        return ""C""
    elif score >= 60:
        return ""D""
    else:
        return ""F""

result = calculate_grade(90)
print(result)",python,python,0.0001383831615045199,0.0633446707773633,0.0009540299277637399,5.3563707843397396e-05,0.0002377766885290081,0.00044814544936487734,0.93380382902613,0.0009371258606990519,8.247540080206971e-05
"import re

def extract_numbers(input_string):
    """"""This function extracts numbers from a given textstring using regular expressions.""""""
    
    # Compile the regular expression
    pattern = re.compile(r'\d+')
    
    # Find all numbers in the string
    output_list = pattern.findall(input_string)
    
    return output_list
    
# Sample Input
input_string = 'I have 2 cats and 3 dogs'
    
# Print the output
print(extract_numbers(input_string))",python,python,0.005335611426798202,0.0016592931980019478,0.041123511530682236,0.0019140511905262662,0.0023365552241417157,3.179865553510836e-06,0.9295428377438073,0.0005123883412631558,0.017572571479225835
"def find_smallest_number(numbers):
    smallest = numbers[0] 
    for num in numbers:
        if num < smallest:
            smallest = num
    return smallest

print(find_smallest_number([5, 4, 12, 17, 9]))",python,matlab,0.0006926184417677943,3.8128220244350145e-06,0.0020825331801928903,0.010826827684311683,0.0011613090289610427,0.6922611170591358,0.2918262548266006,0.00053315764978201,0.0006123693072237675
"class Order:
 # Initialize order
 def __init__(self):
 self.items = []

# Add item to order
 def add_item(self, item):
 self.items.append(item)

# Calculate subtotal
 def calc_subtotal(self):
 subtotal = 0
 for item in self.items:
 subtotal += item.price
 return subtotal

# Calculate tax
 def calc_tax(self):
 return self.calc_subtotal() * 0.08

# Calculate total
 def calc_total(self):
 return self.calc_subtotal() + self.calc_tax()",python,python,6.077065596772645e-06,0.012107814554024267,0.042480999682515105,1.961345084312695e-06,0.00031794189811113545,6.069334837592142e-08,0.8881581008431145,0.056926013486068884,1.030432136496407e-06
"def predict_next_value(nums):
  # calculate average
  avg = sum(nums) / len(nums)

  # predict next value
  return avg
  
# test  
print(predict_next_value([7, 3, 5, 9, 4])) # prints 6.0",python,python,0.007715177065625644,0.03462602815804405,0.0027745143468289593,8.398054942295024e-05,0.0005676149810750025,0.001660049647318111,0.9437486847855083,0.006966353165652811,0.0018575973005242317
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

data = [[5,2,4,1,3], [7,3,5,1,2], [9,5,4,2,3]]
labels = ['iris-setosa', 'iris-versicolor', 'iris-virginica']

df = pd.DataFrame(data, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class'])
X = df.iloc[:, :4]
y = df['class']

X_train, X_test, y_train, y_test = train_test_split(
    X, 
    y,
    train_size=0.8, 
    test_size=0.2, 
    random_state=0
)

clf = RandomForestClassifier(n_estimators=100, random_state=0, max_depth=2)
clf.fit(X_train, y_train)
print(""Accuracy of Random Forest classifier on training set:{:.2f}"".format(clf.score(X_test, y_test)))",css,css,0.0002378044495593259,0.6675128080370354,0.014395584561643304,0.0023753032742292197,0.000306218510522708,9.726821983076552e-05,0.3045113423973057,0.008540075827332528,0.0020235947225411993
"import re

def remove_special_characters(string):
    return re.sub('[^A-Za-z0-9]+', '', string)",python,java,3.267095007360417e-08,0.00010597373191047823,0.0018756891950038822,0.9040592994256977,1.0507400869142267e-09,1.5496714312650406e-07,0.09355768186347127,0.00038882126987031183,1.2345825213085737e-05
"def network_search(graph, start, end):
 visited, queue = set(), [(start, 0)]
 
 while queue:
 vertex, depth = queue.pop(0)
 
 if vertex not in visited:
 visited.add(vertex)
 
 if vertex == end:
 return depth
 
 for neighbor in graph[vertex]:
 queue.append((neighbor, depth + 1))
 
 return -1",python,python,0.053443820457679196,0.11271673038442677,0.02515716141115739,0.006393831442041043,0.003838116556987674,0.027965657767291027,0.7397810611142384,0.011856133642668356,0.018847487223510116
"import random

def suggest_sentence(lastWord):
    sentences = [""the cat is cute"", ""the dog is smart"", ""the duck is noisy""]
    suggestedSentences = []
    
    for sentence in sentences:
        if sentence.split()[-1] == lastWord:
            suggestedSentences.append(sentence)
    
    return random.choice(suggestedSentences)

suggestion = suggest_sentence(""cute"")",python,sql,0.005317821146285751,0.020072003277936838,0.005467055311933834,8.879248325853532e-05,0.07611295595595055,0.004520582062760203,0.1143635593883341,0.7533502221189633,0.020707008254576914
"def check_alphabet(string):
    alphabet = ""abcdefghijklmnopqrstuvwxyz"" 
    if set(string.lower()) >= set(alphabet): 
        return True 
    else: 
        return False",python,java,1.5932764260049666e-07,0.00046013208742539383,0.0002190971614044687,0.9365331703731935,1.9063146161742575e-09,6.128427025961344e-07,0.061870490387048484,0.0009064786617549066,9.857252513325161e-06
"def nth_smallest(input_list, n):
    input_list.sort()
    return input_list[n-1]

input_list = [2, 3, 5, 7, 11]
n = 2
result = nth_smallest(input_list, n)
print(result)",python,python,0.00011616549762461827,0.0008292807059277401,0.00030289647160408254,2.314031708750881e-05,0.00012639780273813455,6.203499078617391e-05,0.9979669040065544,0.00036523481732350204,0.0002079453903538776
"# Get the input string
string = ""Hello World!""

# Modify the string
vowels = ""aeiou""
new_string = """"
for char in string:
    if char in vowels:
        new_string += char

# Print the string
print(new_string)
# prints ""eoo""",python,python,8.529957773072648e-06,0.012023482125168785,0.0005180254361233237,0.007176581120074834,1.862980146285917e-08,9.078933343403144e-06,0.9209071709247201,0.05923995275392948,0.00011716011906553396
"def remove_num(lst, num):
  return [n for n in lst if n != num]

print(remove_num([1, 7, 3, 1, 4, 7, 9], 7))  # [1, 3, 1, 4, 9]",python,matlab,1.0589677043388337e-08,4.094205150809575e-11,4.465202690434268e-08,6.561358883220776e-10,2.5978530818791957e-09,0.9990483128349648,0.0009515817098994237,3.725226584169364e-08,9.66623504135211e-09
"def max_of_three(a, b, c):
    if a > b and a > c:
        return a
    elif b > a and b > c:
        return b
    else:
        return c

result = max_of_three(3, 4, 5)
print(result)",python,python,4.148630081728805e-06,0.0007407613632158103,3.8632446380792544e-05,1.0892928107660382e-06,4.986073917842882e-06,1.6664982064935018e-06,0.9984917354786816,2.2343695987017475e-05,0.0006946365207176772
"string = ""Hello World   ""

no_space_string = string.replace(' ', '')

print(no_space_string)",python,python,9.877251468354816e-05,0.0042794920182485825,0.0016512107410196785,2.873926747341231e-06,4.006910085349087e-08,1.7393932482697353e-07,0.9863889732515633,0.007542510243900283,3.595329541167401e-05
"def read_csv(filename):
    try:
        with open(filename, 'r') as f: 
            data = f.readlines()
            return data
    except FileNotFoundError: 
        print(""File not found. Please provide a valid filename"")",python,python,0.0021768496688668497,0.07747701089879945,0.019115462071646366,9.504160001017261e-05,0.0005935352261506767,0.00058718251298664,0.46859414766430446,0.01952106410983714,0.411839706247398
"sum = 0
for value in [2, 17, 3, 8]:
 sum += value
print(sum)",python,matlab,7.664384444052371e-11,1.3718786876632259e-08,2.014185433966369e-09,4.100056274417152e-09,1.5333501445273837e-10,0.9999999791372229,7.161408092115532e-17,4.737483758400613e-10,3.260211465140047e-10
"def is_palindrome(num):
  rev = 0
  tmp = num
  
  while tmp > 0:
    rev = rev * 10
    rev = rev + (tmp % 10)
    tmp = tmp // 10

  return num == rev
  
num = 12321
if (is_palindrome(num)):
  print(""Number is a palindrome"")
else:
  print(""Number is not a palindrome"")",python,matlab,0.06070433748711195,9.365266207160815e-05,0.0038308039699025353,0.00016420080219543704,0.0008373009064261713,0.5766832122970078,0.3561146420513965,0.00013995510208739817,0.0014318947218006615
"import random

random_array = random.sample(range(10,20), 50)
print(random_array)",python,python,0.0008659109780040959,0.002190723720475439,0.0022230794237714934,2.2013030930318295e-05,0.00012382656788738065,0.0015765290498155032,0.9918625976542219,0.0009834217157204713,0.00015189785917340347
"import re
from collections import Counter

def tf_idf(documents):
  # Split documents into tokens
  tokens = [tokenize(document) for document in documents]
  
  # Get vocabulary
  vocabulary = get_vocabulary(tokens)
  
  # Calculate Term Frequency 
  tf = get_termfrequency(tokens, vocabulary)
  
  # Calculate Document Frequency
  df = get_documentfrequency(tokens, vocabulary)
  
  # Calculate Inverse Document Frequency 
  idf = get_inverse_documentfrequency(df, len(documents))
  
  # Calculate TF-IDF 
  tf_idf = get_tf_idf(tf, idf)
  
  # Return TF-IDF scores
  return tf_idf

def tokenize(document):
  # Tokenize document
  tokens = re.findall(r""[\w']+"", document)
  
  # Return tokens
  return tokens

def get_vocabulary(tokens):
  # Get vocabulary
  vocabulary = set()
  for token_list in tokens:
    vocabulary.update(set(token_list))
  
  # Return vocabulary
  return vocabulary

def get_termfrequency(tokens, vocabulary):
  # Initialize term frequency
  tf = {word: [] for word in vocabulary}
  
  for token_list in tokens:
    # Get word frequency
    counter = Counter(token_list)
    
    # Update term frequency
    for word in vocabulary:
      tf[word] = tf[word] + [counter[word]]
    
  # Return term frequency
  return tf

def get_documentfrequency(tokens, vocabulary):
  # Initialize document frequency
  df = {word: 0 for word in vocabulary}
  
  for token_list in tokens:
    # Update document frequency
    for word in vocabulary:
      if word in token_list:
        df[word] += 1
  
  # Return document frequency
  return df

def get_inverse_documentfrequency(df, num_documents):
  # Initialize Inverse document frequency
  idf = {word: 0 for word in df.keys()}
  
  # Calculate inverse document frequency
  for word in df.keys():
    idf[word] = math.log(num_documents / df[word])
  
  # Return Inverse Document Frequency
  return idf

def get_tf_idf(tf, idf):
  # Initialize tf-idf
  tf_idf = {word: [] for word in tf.keys()}
  
  # Calculate tf-idf
  for word in tf.keys():
    scores = [tf[word][k] * idf[word] for k in range(len(tf[word])) ]
    tf_idf[word] = scores
  
  # Return tf-idf
  return tf_idf",css,python,0.003635512667793953,0.015063830966188447,0.14408646387082277,2.7274331834972257e-05,0.00018306721273940625,0.00233057242190614,0.8263305604634261,0.008144569021136425,0.00019814904415182331
"from flask import Flask, request
from sympy import *

app = Flask(name)
x = Symbol('x')

@app.route('/solve', methods=['POST'])
def solve():
 equation = request.json['equation']
 solution = solve(equation, x)
 return {'solution': str(solution[0])}

if name == 'main':
 app.run(debug=True)",css,css,0.1620215643193057,0.8150082914902024,0.006349965572804075,0.001613200502977978,6.930306062221003e-05,5.7572813507220074e-05,0.012093880839870423,0.00267412425757994,0.00011209714313003149
"# Python program to establish connection to a MySQL database

import mysql.connector

# establish connection
mydb = mysql.connector.connect(host=""localhost"", user=""yourusername"", passwd=""yourpassword"")

# create a cursor
mycursor = mydb.cursor()",python,bash,0.7522455499714359,0.00222757167415574,0.0024623610343469755,2.561993918912149e-05,0.0014307746201083248,0.0004919129760911343,0.01702513259823978,0.22092049405147265,0.003170583134960326
"def get_array(n):
    a = [[0 for i in range(n)] for i in range(n)]
    return a",python,matlab,3.781337839116974e-13,9.747500716243002e-16,8.032391672804954e-12,2.4361239630869958e-14,5.398923982758484e-15,0.9999038364904074,9.616349020896758e-05,1.0501134773542463e-11,4.414151519429793e-13
"import nltk
from nltk.stem import WordNetLemmatizer

# initialize lemmatizer
lemmatizer = WordNetLemmatizer()

# tokenize dialogue
words = nltk.word_tokenize(dialogue)

# use pos_tagging to identify the topics
tagged_words = nltk.pos_tag(words)

# lemmatize words
lemmatized_words = [lemmatizer.lemmatize(word) for word in words]

# extract topics
topics = [word for word in lemmatized_words if word[1] in ['NN', 'NNS']]

# respond appropriately
response = 'hello John, it\'s nice to meet you. So you\'re interested in learning more about ' + ', '.join(topics) + '?'",sql,sql,0.040052116466383444,0.05112021809957934,0.043591764238735224,5.7527790934962e-06,0.001945524666096136,0.005316991464287378,0.10126245531643394,0.7396435013458774,0.017061675623513673
"def updateList(myList):
 myList.append(1)
 
myList = [1, 2, 3]
updateList(myList)
print(myList)",python,matlab,2.082268772771758e-12,4.1069523319575587e-13,1.0761726937287103e-13,4.2453364670250754e-13,1.0640801898090332e-12,0.9999999999933775,1.5968288964599302e-15,2.266342403231282e-15,2.5294656715224015e-12
"def sumDigits(num): 
  
    # convert number into string 
    # and convert each digit into number 
    # using ord() and store it in list 
    # convert number into string 
    # and convert each digit into number 
    # using ord() and store it in list 
    strNum = str(num) 
    digits = [int(x) for x in strNum] 
  
    # return sum using sum() function 
    return sum(digits) 
  
# Driver program 
num = 12345
print(""Sum of digits in num is:"", 
        sumDigits(num))",python,typescript,6.567193597300067e-05,0.00020305294160772547,0.0008781245900054255,0.1866351194696298,0.0013085039003028578,0.1034741645174679,0.03765700562813192,0.0035993605239248334,0.6661789964929565
"def median(arr): 
 # Sort the array 
 arr.sort() 
 n = len(arr) 
  
 # If number of elements is odd, 
 # return the middle element 
 if n % 2 != 0: 
  return arr[n//2] 
  
 # If number of elements is even, 
 # return the average of the middle 
 # two elements 
 else:
  return (arr[n//2] + arr[(n//2)-1]) / 2

# Driver code 
arr = [3, 1, 4, 5, 2] 
print(median(arr))",python,python,8.297976985096086e-05,0.00033395068150730053,0.0001392910665476106,0.0003366870087723937,0.001148227248344727,0.04335616388929412,0.9431818274374029,1.3865863176923906e-05,0.011407007035102919
"days = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday""]

for day in days:
    print(day)",python,python,0.011868569211817965,0.04839580399999117,0.03616384066761625,0.0020747891104210903,0.010265156693539787,0.05617735227943104,0.8101038106308865,0.005294587346132512,0.019656090060163573
"def levenshtein(s1, s2):
    if len(s1) > len(s2):
        s1, s2 = s2, s1

    distances = range(len(s1) + 1)
    for i2, c2 in enumerate(s2):
        distances_ = [i2+1]
        for i1, c1 in enumerate(s1):
            if c1 == c2:
                distances_.append(distances[i1])
            else:
                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))
        distances = distances_
    return distances[-1]",python,python,0.005274049884400551,0.02926765983620981,0.01150588575664926,0.0007258473077450705,0.002010914396589423,0.12500132089577062,0.8118510470527995,0.008257657222028685,0.00610561764780703
"import pandas as pd
from scipy.optimize import minimize

# read in data
df = pd.read_csv('data.csv')

# objective function
def obj_func(weights, mean_returns, covariance_matrix):
    # compute portfolio mean return
    portfolio_mean_return = np.dot(mean_returns, weights)
    
    # compute portfolio variance
    portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(covariance_matrix, weights)))
    
    # return the negative of the Sharpe ratio
    return -(portfolio_mean_return / portfolio_variance)

# minimize function
def minimize_func(mean_returns, covariance_matrix):     
    # define initial weights
    init_weights = np.array([1/len(mean_returns)] * len(mean_returns))
    
    # define constraints
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1},
                   {'type': 'ineq', 'fun': lambda x: x})
    
    # minimize the objective function
    results = minimize(obj_func, init_weights, args=(mean_returns, covariance_matrix),
                       method='SLSQP', constraints=constraints)
    
    return results.x

# optimize and get optimal weights
weights = minimize_func(df.mean(), df.cov())
print(weights)",css,css,0.003365310958468742,0.43416434707572055,0.006696385229471841,0.0004847917553860162,0.4093272212403656,2.375645777396938e-05,0.13958941330016625,0.005322727814390128,0.0010260461682570798
"def findMaxLen(listA, listB):
  lengthA = len(listA)
  lengthB = len(listB) 
  
  # Initialize left and right pointers 
  l, r = 0, 0
  
  max_len = 0 
  
  # While left and right pointer cross the other    
  # maintain a maximum length
  while l < lengthA and r < lengthB: 
      # If they both have same element 
      if listA[l] == listB[r]:
          max_len = max(max_len, l + r + 1) 
          l += 1
          r += 1
      
      # If listA's element is less, increment  
      # listB pointer 
      elif listA[l] > listB[r]:
          r += 1
          
      # If listA's element is more, increment  
      # listA pointer
      else:
          l += 1   
  return max_len",python,python,0.0028672385040880116,0.010222081811289757,0.004458346827685461,0.001860429795233126,0.00911123512967349,0.22655974811549184,0.5942012708434437,0.0012382812390816812,0.14948136773401297
"def filter_words(words): 
    filtered_words = [] 
    for word in words: 
        if len(word) > 5: 
            filtered_words.append(word) 
    return filtered_words 

words = [""hello"", ""world"", ""example"", ""test""]

filtered_words = filter_words(words) 

print(filtered_words)  # Output: ['example', 'test']",python,python,0.04561498320113941,0.005295723197381954,0.10490611168620508,3.517028087685545e-06,0.0067076760562678455,0.0016027394660586415,0.8166384856945158,0.019182555251254105,4.82084190893328e-05
"function add_two_numbers(a,b) {
    return a + b;
}",javascript,javascript,2.7831060753549955e-10,4.348875161531878e-10,4.183025597417684e-10,6.359688135911777e-11,0.9999999986486034,5.7432624638936295e-11,1.893377178712687e-11,5.7740787493973845e-11,2.2191635406834887e-11
"print(""This is an example sentence"")",python,java,2.240277894131016e-05,0.00016934929900876882,0.13062284182111833,0.8532383844297097,0.0031448476830830997,1.2629732464717602e-05,0.009142121163370803,0.003514364752438581,0.00013305833986463792
"import psycopg2

connection = psycopg2.connect(database='dbname', user='user', password='password', host='localhost', port='5432')

cursor = connection.cursor()

cursor.execute('SELECT * FROM customers')

rows = cursor.fetchall()

for row in rows:
    print(row)
    
cursor.close()",sql,sql,3.502709677620902e-05,0.0004165437038294822,7.323710489412887e-05,3.687330147927282e-06,1.175271972207957e-05,2.588627841753336e-05,0.0009547939480973414,0.9984061907739025,7.28810442129339e-05
"def sum_all_numbers(n):
 return n * (n + 1) // 2",python,python,3.0458681726310896e-12,2.5489143973834694e-10,2.7598246867965498e-11,8.025231839209999e-13,3.049889349032867e-12,3.595677408560778e-18,0.9999999972484059,2.461794976084354e-09,4.1123042603913176e-13
"import string

# Define the input string
inp_str = ""A text containing punctuation marks.""

# Remove all punctuation
out_str = inp_str.translate(str.maketrans('', '', string.punctuation))

print(out_str) # Output: A text containing punctuation marks",python,java,2.7377590571086296e-05,0.005514490699300542,0.0005796519505537446,0.8454906148973426,3.8350273172984554e-07,7.498394798742767e-06,0.125344315300906,0.022808144136671267,0.00022752352712443436
"def median(nums):
    sorted_nums = sorted(nums)
    length = len(nums)
    if length % 2 == 0:
        return (sorted_nums[length//2] + sorted_nums[length//2 - 1]) / 2
    else:
        return sorted_nums[length//2]",python,python,0.0005144653947828159,0.0007931843610756379,0.00015960889615189655,5.326469708991873e-05,0.037536390457955954,0.00010904735177778326,0.9568344879989966,0.0039022749398828637,9.727590228660159e-05
"def is_sum_possible(A, X): 
    n = len(A) 
    # create an empty hash set
    s = set() 
  
    for i in range(n): 
        temp = X - A[i]  
        if temp >= 0 and temp in s: 
            return True 
        s.add(A[i])  
  
    return False",python,matlab,9.140971746416212e-05,0.00010650901963559434,0.0009203851665593873,0.00020325173558886946,0.0036606883411235613,0.9877505948482089,0.005791497872334588,8.058067881477296e-06,0.0014676052312031214
"import csv
import requests
from bs4 import BeautifulSoup

url = 'https://example.com/'

page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

csv_file = open('data.csv', 'w')
csv_writer = csv.writer(csv_file)
csv_writer.writerow(['title', 'description'])

for article in soup.find_all('article'):
 title = article.h2.a.text
 description = article.find('div', class_='entry-content').p.text
 csv_writer.writerow([title, description])

csv_file.close()",python,html,3.119111621332067e-10,0.03099097744400244,0.9682182859214418,0.0007684672752951707,1.6037345349594208e-06,1.7261973557796058e-07,1.4788319848427278e-05,4.355094226825258e-06,1.3492790034739483e-06
"SELECT name 
FROM pages 
WHERE title LIKE '%Python%';",sql,bash,0.6804229733905897,0.0033138409138543904,0.2523906951188477,0.0013063790695118321,0.0001240437000512203,0.00031547894047112747,0.001397626876850396,0.059345699311417685,0.0013832626784058323
"import random
import string

def random_str():
  return ''.join(random.choices(string.ascii_letters + string.digits, k=10))

print(random_str())",sql,sql,2.605252046180332e-11,4.481252764837848e-07,1.5639864387721318e-07,0.005912395408020721,3.9171313037572057e-13,8.014550338199069e-11,2.8573321940341104e-05,0.9940584160261207,1.0613408314301362e-08
"import re

def count_vowels(string):
    vowels = re.findall(r'[aeiou]', string, re.I)
    return len(vowels)

if __name__ == '__main__':
    string = ""Hello World!""
    print(""Number of vowels in the given string:"", count_vowels(string))",python,python,6.841224867669656e-08,4.638504735182637e-05,0.003071011296371163,0.00996653119059844,4.748639848341773e-10,7.030169556179424e-08,0.9763441556925544,0.010556330433007468,1.544715130847665e-05
"def generateTrees(keys): 
        # if the list of keys is empty, 
        # the result is an empty tree 
        if len(keys) == 0: 
            return [None] 
  
        # store the result 
        trees = [] 
  
        # loop through all keys 
        for i in range(len(keys)): 
          
            # using each key as the root, 
            # generate subpairs on the left and right 
            l_trees = generateTrees(keys[:i]) 
            r_trees = generateTrees(keys[i+1:]) 
  
            # loop through all of the possible combinations of left and right 
            # subtrees and save each as a root node with all the subtrees
            for j in range(len(l_trees)): 
                for k in range(len(r_trees)): 
                    root = Node(keys[i]) 
                    root.left = l_trees[j] 
                    root.right = r_trees[k] 
                    trees.append(root) 
  
        return trees",python,typescript,0.00015677778800693003,0.0020135080788204994,0.00028655690906313443,4.893865807873161e-06,0.0009016707083319432,0.0018063275233469035,0.21684862274445055,0.005302798797470219,0.7726788435847018
"# Function to calculate the maximum, minimum, and average values
def calculate_metrics(list):
    # Calculate the maximum value
    maximum = max(list)
    
    # Calculate the minimum value
    minimum = min(list)
   
    # Calculate the average
    n = len(list)
    total = 0
    for num in list:
        total += num
    average = total/n
    
    return maximum, minimum, average

# Main Program 
list = [3, 4, 5, 6, 21, 8]

maximum, minimum, average = calculate_metrics(list)

print(""Maximum value:"", maximum)
print(""Minimum value:"", minimum)
print(""Average value:"", average)",python,matlab,0.003332275580079282,0.0037063871328730826,0.0009714087333095728,1.4087352253571614e-05,0.006611333731780884,0.9710051498894919,0.0017290075936110892,0.00956281074553334,0.0030675392410674162
"import random

jokes = [
   'Why did the chicken cross the playground? To get to the other slide!',
   'Why did the monkey fall out of the tree? Because it was dead!',
   'Why did the dinosaur go to the dentist? Because he had a toothache!'
]

def tell_joke():
   joke = random.choice(jokes)
   print(joke)

tell_joke()",python,typescript,0.0005175463055436275,0.004344081386030759,0.0004589120514121779,0.00013210927969333148,0.18719091718868458,1.3865021678098201e-06,0.007556532667817912,0.002168853863105342,0.7976296607555445
"def filter_values(lst, condition):
    filtered_list = []
    for x in lst:
        if eval(condition):
            filtered_list.append(x)
    return filtered_list",python,python,0.0014510929678560745,0.005123321684445851,0.003999899198507765,0.00021472562229195137,0.0006477007121381438,0.27001002642762784,0.7155457601420905,0.0010583185803333811,0.0019491546647085259
"def sort_highest_to_lowest(arr):
    sorted_arr = sorted(arr, reverse = True)
    return sorted_arr

arr = [6, 2, 8, 3, 9]
sorted_arr = sort_highest_to_lowest(arr)
print(sorted_arr)",python,python,0.0012493270006125278,0.007861420876512856,0.0016865243832157855,0.00021449604935075832,0.00047786893552552933,0.04615593955625845,0.9413630159588996,9.083532479818521e-05,0.0009005719148261632
"from random import random

def generate_cubed_object(n):
    objects = []
    for i in range(n):
        x = random()
        y = random()
        z = random()
        objects.append([x, y, z])
    return objects

print(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]",python,python,0.0002708097990055753,0.00028685750687663746,1.2383103004830576e-05,3.064060759156563e-06,0.00020421089314614645,0.005735027139774633,0.7382782855573581,0.2547505190309303,0.00045884290914453965
"def concat_strings(str1, str2, str3):
  return str1 + str2 + str3",python,python,0.0038632857278377555,0.005387666028631678,7.726950905165414e-05,0.0009886104663934718,0.3107085575005894,0.0013243639439514908,0.6638709294391356,0.007832125727348803,0.0059471916570600246
"# Python code to implement 
# the Gradient Descent algorithm

def gradientDescent(x, y, learning_rate, max_iterations): 
  
    m_curr = b_curr = 0
    n = len(x)
    cost_previous = 0
    cost_present = 0
    iteration = 0 
  
    while iteration < max_iterations: 
        y_predicted = m_curr * x + b_curr 
        cost_present = (1/n) * sum([val**2 for val in (y-y_predicted)]) 
        md = -(2/n)*sum(x*(y-y_predicted)) 
        bd = -(2/n)*sum(y-y_predicted) 
        m_curr = m_curr - learning_rate * md 
        b_curr = b_curr - learning_rate * bd 
        iteration = iteration + 1
        cost_previous = cost_present
  
    return m_curr, b_curr, cost_previous",python,typescript,0.05484994275162551,0.029407712124241068,0.028373218693210023,0.006887397479871831,0.03806116541180151,0.026303887210331257,0.13251208129950287,0.02646942751232673,0.6571351675170892
"class BankAccount:
 def __init__(self, name, balance):
 self.name = name
 self.balance = balance

 def deposit(self, amount):
 self.balance += amount

 def withdraw(self, amount):
 if self.balance < amount:
 raise ValueError('Insufficient funds')
 self.balance -= amount

 def view_balance(self):
 return self.balance

 def transfer_money(self, other_account, amount):
 self.withdraw(amount)
 other_account.deposit(amount)",python,python,0.014048022260109731,0.024321388308694514,0.01630477985102496,0.00210638977826813,8.21093119003682e-05,9.320329929545103e-05,0.9132082332453587,0.028921731863315252,0.0009141420820327277
"import numpy as np
import matplotlib.pyplot as plt
 
# Define some constants 
G = 1
 
# Define some parameters
m1 = 1
m2 = 1
 
# Initial conditions
x1_0 = 0 # initial position of the first mass
y1_0 = 0 
vx1_0 = 1 # initial velocity of the first mass (along the x-axis)
vy1_0 = 0
 
x2_0 = 3    # initial position of the second mass
y2_0 = 0
vx2_0 = 0 # initial velocity of the second mass (along the x-axis)
vy2_0 = 0.5 
 
# Simulation parameters
N = 1000 # number of steps
dt = 1e-3 # time step
 
# Create arrays to hold the x,y positions of the masses
x1 = np.zeros(N)
y1 = np.zeros(N)
x2 = np.zeros(N)
y2 = np.zeros(N)
 
# Initial conditions
x1[0] = x1_0
y1[0] = y1_0
x2[0] = x2_0
y2[0] = y2_0
 
# Simulation loop
for i in range(N-1):
    # Calculate the force for the first mass 
    dx = x2[i] - x1[i]
    dy = y2[i] - y1[i]
    r = np.sqrt(dx**2 + dy**2)
    Fx1 = G*m2/r**3 * dx
    Fy1 = G*m2/r**3 * dy
    
    # Calculate the force for the second mass 
    dx = x1[i] - x2[i]
    dy = y1[i] - y2[i]
    r = np.sqrt(dx**2 + dy**2)
    Fx2 = G*m1/r**3 * dx 
    Fy2 = G*m1/r**3 * dy
    
    # Update the positions 
    x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 / 2 
    y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 / 2 
    x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 / 2 
    y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 / 2 
 
# Plot the results
plt.plot(x1, y1, label=""Mass 1"")
plt.plot(x2, y2, label=""Mass 2"")
plt.xlabel(""x-position"")
plt.ylabel(""y-position"")
plt.legend(loc=""lower right"")
plt.show()",sql,typescript,0.0126908002929642,0.00945610304621789,0.034028450439852906,0.0006225507429516046,0.015889692893557236,0.0005733924786509803,0.37381474313066565,0.13049620089754263,0.42242806607759686
"import math

# Semi-Major Axis
a = 5

# Semi-Minor Axis
b = 3

# Calculate the area of an ellipse
area = math.pi * a * b

print(""The area of the ellipse is"", area)",python,python,0.00908354214755072,0.028728151339633162,0.010208144093675297,0.0008591563909979965,0.3568535481534243,0.00024796351387905684,0.44654112931201045,0.0034072712100490284,0.14407109383877997
"import numpy as np 

freq = 250 
amplitude = 1 

t= np.linspace(0, 1, 1000) 
voltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)",python,python,0.1446291478348093,0.05012381761162076,0.03395416665301263,0.00047078392362437214,0.00047235463607953434,0.0033228822131390807,0.7499616638917004,0.002447492094793679,0.014617691141220286
"import math

def calculate_distance(x1, y1, x2, y2):
  x_diff = x2 - x1
  y_diff = y2 - y1
  distance = math.sqrt(x_diff**2 + y_diff**2)
  return distance

result = calculate_distance(x1, y1, x2, y2)
print(result)",python,python,0.0007519813227916828,0.008110185299850832,0.0015385902727016456,0.00012815917641534997,0.00036578021984025647,0.00014997573825106784,0.9840362302095252,0.004131655494092717,0.000787442266530996
"def reverse_list(list):
    reversed_list = list[::-1]
    return reversed_list",python,python,0.0030935047985011237,0.007834781855627405,0.008785722565284686,0.0008999562923994281,0.0037678774630355884,0.006035237879874536,0.9466912169331515,0.01611612152711344,0.006775580685012401
"# Get list of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8]

# Initialize a count
count = 0

# Iterate through the list of numbers and count the even numbers
for num in numbers:
    if num % 2 == 0:
        count += 1

# Print the result
print(f""The number of even numbers is: {count}"")",python,javascript,6.655673095945825e-05,2.623582285636588e-05,0.0002734496852934582,0.16982270552852938,0.5659211567009843,6.3896557251061555e-06,0.25020369014946137,0.0034256558603761324,0.010254159865814324
"def delete_element_at_index(arr, index):
    if index >= len(arr):
        raise Exception('index out of range')
    
    # Delete the element at the index
    del arr[index]

# Example array and index
my_arr = [1,2,3,4,5];
index = 3;

# Call the function
delete_element_at_index(my_arr, index)

# Print the array
print(my_arr)",sql,javascript,0.01095135359131264,0.0011822998772739548,0.03400337648871201,0.008834974426770488,0.7784037029876851,0.05280681781973767,0.10156246752254575,6.056007551093127e-05,0.012194447210451518
"import math
x = 81.0
# calculate the square root
print('The square root of %0.1f is %0.1f'%(x, math.sqrt(x)))",python,python,0.019824365754562274,0.044823942743619574,0.0067780443346499054,0.0005363264648356969,0.04682843652387908,0.0007892284400556725,0.8029549853118589,0.011357167485919516,0.06610750294061932
"for num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
 if num % 2 == 0:
 print(num)",python,matlab,4.679032817529313e-17,1.491287175851539e-22,2.0519769637583101e-16,3.6350437896967974e-18,1.4521254752773983e-17,0.9999999999999947,5.0274073453224815e-15,1.6544694606786108e-19,4.427792410141711e-17
"import pandas as pd

data = pd.read_sql

  query = ""SELECT * FROM table""

df = pd.read_sql(query, conn)

sum_column = df['column'].sum()

print(sum_column)",sql,sql,0.0009281133320995743,0.15326722199575676,0.026093714423156174,0.00045495644825989227,0.0029135125605799853,0.001202577446658379,0.3329324650577284,0.39242290012656456,0.08978453860919637
"def count_above_average(input_list): 
 average = sum(input_list)/len(input_list)
 count = 0
 for value in input_list: 
  if value > average:  
   count += 1
 return count",python,matlab,1.0146636921236535e-06,6.818427692533237e-05,5.143176224506685e-06,3.7959697853407675e-07,8.346297154666275e-07,0.9999183682925551,3.267486996259412e-08,3.675168745548096e-06,2.3675202936582196e-06
"class Multiplier:
    def __init__(self, factor):
        self.factor = factor
 
    def multiply(self, num):
        return num * self.factor",python,python,0.0002441782278860485,0.00020517213737643357,0.015063941032352658,3.578699996119237e-05,5.630423339110773e-05,0.0011453802999316608,0.9672501791683956,0.015528914146643147,0.00047014375406223655
"import sqlite3
import requests
from bs4 import BeautifulSoup

# create sqlite3 DB
conn = sqlite3.connect('example.db')
cur = conn.cursor()

cur.execute('CREATE TABLE IF NOT EXISTS ExampleTable (title TEXT, url TEXT)')

# get website page contents
url = 'https://example.com/'
page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')

# parse data
links = soup.find_all('a')
for link in links:
 title = link.string
 url = link['href']

# insert data into DB
cur.execute('INSERT INTO ExampleTable VALUES (?, ?)', (title, url))

conn.commit()
conn.close()

print('Data successfully stored in example.db')",sql,java,3.57353357297443e-15,7.952061460905978e-05,0.012003181602101589,0.9373564612011125,4.629694544998364e-08,2.1985168878385126e-07,2.6283144365331193e-06,0.050557827451733185,1.1466736919961796e-07
"def sort_list(lst, key):
    # Sorts a list of dictionaries
    return sorted(lst, key=lambda k: k[key])",python,python,0.0004900490943927133,0.021672796661651565,0.0015409060797534303,0.00013239303407344466,0.00681454585231889,0.00011918964754842172,0.9654656757909192,0.0028192291984275707,0.0009452146409147695
"def add_numbers(a, b):
 try:
  sum = a + b
 except:
  print(""Error: Could not compute the sum of the numbers"")
  return None
 else:
  return sum",python,java,0.0007383908857005997,0.001992026855967052,0.01618622195105113,0.47496744197038426,0.021404353809299725,4.064138807955273e-07,0.24358771572789836,0.004553628850287198,0.23656981353553094
"import uuid
unique_id = uuid.uuid3(uuid.NAMESPACE_DNS, string)",python,java,0.00022632570947821884,0.01944055684492388,0.006760014112656977,0.7316502405649777,1.7388903563383142e-05,0.0006824090837767398,0.23251682944223737,0.00565327329643562,0.003052962041949965
"import psycopg2

try:
 connection = psycopg2.connect(
 user = ""postgres"",
 password = ""your_password"",
 host = ""localhost"",
 port = ""5432"",
 database = ""your_database""
 )

 cursor = connection.cursor()
 postgreSQL_select_Query = ""select * from table_name""
  
 cursor.execute(postgreSQL_select_Query)
  
 print(""Table Before inserting a record"")
 records = cursor.fetchall() 
 
 postgres_insert_query = """""" INSERT INTO table_name (column_1, column_2, colum_n) VALUES (%s,%s,%s)""""""
 record_to_insert = ('value1', 'value2', 'value3')
 cursor.execute(postgres_insert_query, record_to_insert)
 connection.commit()

 print(""Table After inserting a record"")
 cursor.execute(postgreSQL_select_Query)
 records = cursor.fetchall() 

except (Exception, psycopg2.Error) as error :
    print (""Error while connecting to PostgreSQL"", error)
finally:
    if(connection):
        cursor.close()
        connection.close()
        print(""PostgreSQL connection is closed"")",sql,sql,0.00013739474390055017,0.0006919178742146534,0.0005947752658210872,3.6105530608307164e-05,0.0002311994465708876,0.00012140480304168091,0.0057726474365767545,0.9864801838683926,0.005934371030873255
"import pandas as pd
from sklearn.cluster import KMeans

# Load data
data = pd.read_csv('data.csv')

# Train the model
model = KMeans(n_clusters=6).fit(data)

# Predict the clusters
clusters = model.predict(data)

# Visualize the clusters
plt.scatter(data[:,0], data[:,1], c=clusters)
plt.show()",python,python,0.016719744294128255,0.24871418771082976,0.049256404629416904,6.327537434348009e-05,0.0006371698921880602,0.00012106521505360223,0.6310332708697207,0.000391982696877602,0.05306289931744156
"# List of numbers which are multiples of both 3 and 5 between 0 and 100
multiples_3_5 = [] 

# Iterate over all numbers between 0 and 100 
for num in range(101): 
 
    # Check for multiples of both 3 and 5 
    if num % 3 == 0 and num % 5 == 0: 
        multiples_3_5.append(num) 
      
print(multiples_3_5)",python,matlab,1.0983982486123728e-08,2.485923338825595e-11,2.7422290785934014e-08,1.725366467020681e-07,1.5239207211276172e-06,0.9997724600774776,3.4102191672404677e-06,1.1085238888147768e-07,0.00022228396246595534
"class Node:
 def __init__(self, data):
 self.data = data
 self.left = None
 self.right = None

def construct_tree(preorder, inorder):
 if not preorder or not inorder:
 return None

 # first element of preorder is the root
 root = Node(preorder[0])

 # get index of root in inorder
 idx = inorder.index(root.data)

 # left and right subtrees are constructed recursively
 root.left = construct_tree(preorder[1: idx + 1], inorder[0:idx])
 root.right = construct_tree(preorder[idx + 1:], inorder[idx + 1:])

 return root

if __name__ == ""__main__"":
 preorder = [""A"", ""B"", ""E"", ""K"", ""C"", ""F"", ""G"", ""D""]
 inorder = [""E"", ""B"", ""K"", ""A"", ""F"", ""C"", ""D"", ""G""]

 root = construct_tree(preorder, inorder)",python,python,0.0011419194715479488,0.01275013406106262,0.01965524568116706,0.0002225294476715524,0.0018276012113442165,0.0006921211705760297,0.8519891697563772,0.08276284769602037,0.028958431504233023
"max_length = 0

for string in list_of_strings:
    max_length = max(max_length, len(string))

print(max_length)",python,java,9.828337796090694e-07,0.006148864792020966,0.0010508434150317304,0.7918182145644231,2.3653538727452853e-07,0.00011196482632933017,0.19605835920413808,0.004478303076128281,0.0003322307527617053
"def area_rectangle(length, width):
 return length * width

print(area_rectangle(2, 3)) # Output: 6",python,python,0.005246729397566405,0.002213384759119214,0.0009723045527366969,8.592961990586172e-05,0.030016219401286928,5.66472649649272e-05,0.9573836102458627,0.003981819953954016,4.3354804603234325e-05
"def modify_number(number):
   if number % 2 == 0:
       return number * 2
   else:
       return number - 1",python,python,3.6682406576162384e-06,0.0001736663399055097,1.561710437165574e-05,7.840200614614262e-07,1.5143048726989817e-06,9.117740302443485e-06,0.9997816154654009,1.066477124698503e-05,3.3520131806915543e-06
"def intersection(a, b): 
intersection_list = []
for item1 in a:
    if item1 in b:
        intersection_list.append(item1)
return intersection_list

a = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]
print(intersection(a,b))
# Output: [5, 8, 9, 10]",python,python,0.008333784905439876,0.031914080443743324,0.015348291686185319,0.00036056644186062284,0.0020161966505323125,0.2779351666929493,0.6621260269743287,0.0005416156483058774,0.0014242705566546016
"import random 

def generate_code():
    code = """"
    for _ in range(4):
        code += str(random.randint(0, 9))
    return code

code = generate_code()
print(code)",python,typescript,0.00018547908529648337,3.5569199151786402e-06,0.00011405007758428373,7.033882172900878e-06,0.00023474698764359183,0.0007537109621049991,0.07058800350243805,0.0009257245951727915,0.9271876939876716
"import re

phonePattern = re.compile(r'^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$') 

def validate_phone(phone_number): 
    if phone_pattern.search(phone_number): 
        return true
    else: 
        return false",python,python,9.600778962290382e-05,0.00045943842138782936,0.09207183313319638,3.554908931588878e-05,3.758044802294138e-05,1.4372285790973344e-05,0.9071680044644085,2.707412433497247e-05,9.01402439197649e-05
"def average(a, b): 
    return (a + b) / 2

print(average(2, 3))",python,python,0.00017344556807958458,0.003156107243459545,0.000685324248422018,3.637846842738874e-05,0.00013729963439269895,2.4458839606114683e-05,0.9953078789792532,0.00024817636373802583,0.00023093065462159192
"#!/usr/bin/env python2
##################################################
# GNU Radio Python Flow Graph
# Title: Output Window
# Generated: Sat Apr 30 16:45:27 2016
##################################################

if __name__ == '__main__':
    import ctypes
    import sys
    if sys.platform.startswith('linux'):
        try:
            x11 = ctypes.cdll.LoadLibrary('libX11.so')
            x11.XInitThreads()
        except:
            print ""Warning: failed to XInitThreads()""

from gnuradio import analog
from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import fft
from gnuradio import gr
from gnuradio import wxgui
from gnuradio.eng_option import eng_option
from gnuradio.fft import window
from gnuradio.filter import firdes
from gnuradio.wxgui import fftsink2
from gnuradio.wxgui import forms
from gnuradio.wxgui import numbersink2
from grc_gnuradio import wxgui as grc_wxgui
from optparse import OptionParser
import osmosdr
import time
import wx


class Output_window(grc_wxgui.top_block_gui):

    def __init__(self):
        grc_wxgui.top_block_gui.__init__(self, title=""Output Window"")
        _icon_path = ""/usr/share/icons/hicolor/32x32/apps/gnuradio-grc.png""
        self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY))

        ##################################################
        # Variables
        ##################################################
        self.threshold = threshold = -55
        self.samp_rate = samp_rate = 2.048e6
        self.freq = freq = 658e6
        self.fft_size = fft_size = 1.024e3

        ##################################################
        # Blocks
        ##################################################
        self.notebook = self.notebook = wx.Notebook(self.GetWin(), style=wx.NB_TOP)
        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), ""Spectrum"")
        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), ""Output"")
        self.notebook.AddPage(grc_wxgui.Panel(self.notebook), ""Stream"")
        self.Add(self.notebook)
        _threshold_sizer = wx.BoxSizer(wx.VERTICAL)
        self._threshold_text_box = forms.text_box(
        	parent=self.notebook.GetPage(1).GetWin(),
        	sizer=_threshold_sizer,
        	value=self.threshold,
        	callback=self.set_threshold,
        	label=""Threshold"",
        	converter=forms.float_converter(),
        	proportion=0,
        )
        self._threshold_slider = forms.slider(
        	parent=self.notebook.GetPage(1).GetWin(),
        	sizer=_threshold_sizer,
        	value=self.threshold,
        	callback=self.set_threshold,
        	minimum=-100,
        	maximum=0,
        	num_steps=100,
        	style=wx.SL_HORIZONTAL,
        	cast=float,
        	proportion=1,
        )
        self.notebook.GetPage(1).Add(_threshold_sizer)
        _freq_sizer = wx.BoxSizer(wx.VERTICAL)
        self._freq_text_box = forms.text_box(
        	parent=self.notebook.GetPage(0).GetWin(),
        	sizer=_freq_sizer,
        	value=self.freq,
        	callback=self.set_freq,
        	label=""freq"",
        	converter=forms.float_converter(),
        	proportion=0,
        )
        self._freq_slider = forms.slider(
        	parent=self.notebook.GetPage(0).GetWin(),
        	sizer=_freq_sizer,
        	value=self.freq,
        	callback=self.set_freq,
        	minimum=10e6,
        	maximum=10e9,
        	num_steps=100,
        	style=wx.SL_HORIZONTAL,
        	cast=float,
        	proportion=1,
        )
        self.notebook.GetPage(0).Add(_freq_sizer)
        self.wxgui_numbersink2_1 = numbersink2.number_sink_f(
        	self.notebook.GetPage(1).GetWin(),
        	unit=""signal present"",
        	minval=0,
        	maxval=1,
        	factor=1,
        	decimal_places=0,
        	ref_level=0,
        	sample_rate=samp_rate,
        	number_rate=15,
        	average=False,
        	avg_alpha=None,
        	label=""Signal Detection"",
        	peak_hold=False,
        	show_gauge=True,
        )
        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_1.win)
        self.wxgui_numbersink2_0 = numbersink2.number_sink_f(
        	self.notebook.GetPage(1).GetWin(),
        	unit=""dB"",
        	minval=-120,
        	maxval=0,
        	factor=1.0,
        	decimal_places=10,
        	ref_level=0,
        	sample_rate=samp_rate,
        	number_rate=15,
        	average=False,
        	avg_alpha=30e-3,
        	label=""level"",
        	peak_hold=False,
        	show_gauge=False,
        )
        self.notebook.GetPage(1).Add(self.wxgui_numbersink2_0.win)
        self.wxgui_fftsink2_0 = fftsink2.fft_sink_c(
        	self.notebook.GetPage(0).GetWin(),
        	baseband_freq=freq,
        	y_per_div=5,
        	y_divs=10,
        	ref_level=0,
        	ref_scale=2.0,
        	sample_rate=samp_rate,
        	fft_size=1024,
        	fft_rate=15,
        	average=True,
        	avg_alpha=30e-3,
        	title=""Spectrum"",
        	peak_hold=False,
        	win=window.rectangular,
        )
        self.notebook.GetPage(0).Add(self.wxgui_fftsink2_0.win)
        self.rtlsdr_source_0 = osmosdr.source( args=""numchan="" + str(1) + "" "" + """" )
        self.rtlsdr_source_0.set_sample_rate(samp_rate)
        self.rtlsdr_source_0.set_center_freq(freq, 0)
        self.rtlsdr_source_0.set_freq_corr(0, 0)
        self.rtlsdr_source_0.set_dc_offset_mode(0, 0)
        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)
        self.rtlsdr_source_0.set_gain_mode(False, 0)
        self.rtlsdr_source_0.set_gain(20, 0)
        self.rtlsdr_source_0.set_if_gain(10, 0)
        self.rtlsdr_source_0.set_bb_gain(5, 0)
        self.rtlsdr_source_0.set_antenna("""", 0)
        self.rtlsdr_source_0.set_bandwidth(0, 0)
          
        self.fft_1 = fft.fft_vcc(1024, True, (window.rectangular(1024)), True, 1)
        self.blocks_vector_to_stream_0 = blocks.vector_to_stream(gr.sizeof_float*1, 1024)
        self.blocks_threshold_ff_0 = blocks.threshold_ff(-100, threshold, 0)
        self.blocks_stream_to_vector_0 = blocks.stream_to_vector(gr.sizeof_gr_complex*1, 1024)
        self.blocks_nlog10_ff_0 = blocks.nlog10_ff(10, 1, 0)
        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_float*1, ""/media/shashwat/DATA/Q3/Wireless Networking/gnu codes/Outputs/db_498"", False)
        self.blocks_file_sink_0.set_unbuffered(False)
        self.blocks_divide_xx_0 = blocks.divide_ff(1)
        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1024)
        self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 1.04858e6)

        ##################################################
        # Connections
        ##################################################
        self.connect((self.analog_const_source_x_0, 0), (self.blocks_divide_xx_0, 1))    
        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_vector_to_stream_0, 0))    
        self.connect((self.blocks_divide_xx_0, 0), (self.blocks_nlog10_ff_0, 0))    
        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_file_sink_0, 0))    
        self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_threshold_ff_0, 0))    
        self.connect((self.blocks_nlog10_ff_0, 0), (self.wxgui_numbersink2_0, 0))    
        self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_1, 0))    
        self.connect((self.blocks_threshold_ff_0, 0), (self.wxgui_numbersink2_1, 0))    
        self.connect((self.blocks_vector_to_stream_0, 0), (self.blocks_divide_xx_0, 0))    
        self.connect((self.fft_1, 0), (self.blocks_complex_to_mag_squared_0, 0))    
        self.connect((self.rtlsdr_source_0, 0), (self.blocks_stream_to_vector_0, 0))    
        self.connect((self.rtlsdr_source_0, 0), (self.wxgui_fftsink2_0, 0))    


    def get_threshold(self):
        return self.threshold

    def set_threshold(self, threshold):
        self.threshold = threshold
        self._threshold_slider.set_value(self.threshold)
        self._threshold_text_box.set_value(self.threshold)
        self.blocks_threshold_ff_0.set_hi(self.threshold)

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)
        self.wxgui_fftsink2_0.set_sample_rate(self.samp_rate)

    def get_freq(self):
        return self.freq

    def set_freq(self, freq):
        self.freq = freq
        self._freq_slider.set_value(self.freq)
        self._freq_text_box.set_value(self.freq)
        self.rtlsdr_source_0.set_center_freq(self.freq, 0)
        self.wxgui_fftsink2_0.set_baseband_freq(self.freq)

    def get_fft_size(self):
        return self.fft_size

    def set_fft_size(self, fft_size):
        self.fft_size = fft_size


if __name__ == '__main__':
    parser = OptionParser(option_class=eng_option, usage=""%prog: [options]"")
    (options, args) = parser.parse_args()
    tb = Output_window()
    tb.Start(True)
    tb.Wait()
",python,html,7.234473559096457e-05,0.028298943627436644,0.6074047084355437,1.426481168434094e-07,3.4608789118653712e-06,8.428196426066976e-08,0.009611919707501557,0.3546011203165383,7.2753683957932324e-06
"matrix = [[ 1,  2,  3,  4], 
          [ 5,  6,  7,  8], 
          [ 9, 10, 11, 12], 
          [13, 14, 15, 16]] 

def print_matrix_in_spiral(matrix):
    row_start = 0
    row_end = len(matrix) - 1
    col_start = 0
    col_end = len(matrix[0]) - 1

    while row_start <= row_end and col_start <= col_end:
        for i in range(row_start, row_end + 1): 
            print(matrix[row_start][i], end = "" "") 
  
        row_start += 1
  
        for i in range(col_start, col_end + 1): 
            print(matrix[i][col_end], end = "" "") 
  
        col_end -= 1
  
        if row_start <= row_end: 
            for i in range(row_end, row_start - 1, -1): 
                print(matrix[row_end][i], end = "" "") 
   
            row_end -= 1
  
        if col_start <= col_end: 
            for i in range(col_end, col_start - 1, -1): 
                print(matrix[i][col_start], end = "" "") 
   
            col_start += 1

print_matrix_in_spiral(matrix)",python,python,0.00014000919210205623,0.00011237934337671797,0.0004458370720296182,1.8796954103828056e-05,2.4766910436972455e-05,0.1309711142536276,0.8678328292549327,0.00011769084494586419,0.00033657617444481834
"import random
import string

def generate_password():
  length = random.randrange(8, 11)
  password = ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(length))
  return password

if __name__ == '__main__':
  password = generate_password()
  print('Generated Password:', password)",sql,sql,1.9903847002884434e-12,3.566406881054243e-09,4.995611528661672e-09,2.5389887721269883e-05,4.900454551629136e-13,4.847524226071282e-09,1.2947962947479464e-05,0.9999616481182675,6.190406044275394e-10
"import logging

def handler(e):
 logging.exception(e)
 # Do any other error handling logic here.

try:
 # the code that could throw an error
except Exception as e:
 handler(e)",python,typescript,6.84339039400108e-05,2.9397689495351437e-06,5.128173319195867e-05,4.5491679227355404e-06,0.0002403471836446803,2.3676362162211738e-05,0.0002585243289166647,3.9770594778793945e-05,0.9993104769564936
"from flask import Flask, request
import sqlite3

app = Flask(name)

conn = sqlite3.connect('movies.db')
cur = conn.cursor()

@app.route('/api/movies', methods=['GET'])
def get_movie():
 title = request.args.get('title')
 language = request.args.get('language')
 year = request.args.get('year')
 
 query = 'SELECT * FROM movies WHERE title=' + title + ' AND language=' + language + ' AND year=' + year
 cur.execute(query)
 result = cur.fetchone()
 
 if not result:
 return {'error': 'No movie found for given parameters.'}, 400
 
 return {
 'title': result[0],
 'language': result[1],
 'year': result[2]
 }

if name == 'main':
 app.run(debug=True)",css,css,0.00011618517782894071,0.6959174630019551,0.18892048809135417,0.000276408610824434,1.69281271015336e-05,1.1253275021060173e-06,0.005253959190849081,0.10830177874784595,0.0011956637247386953
"def get_str_length(string):
  return len(string)

print(get_str_length(string)) # outputs 13",python,java,6.0050978424920424e-21,2.0725121511722836e-11,3.011205842036107e-13,0.9999998188363066,2.0233029942886713e-23,9.549523366649127e-18,1.798723596153245e-07,1.270278619791008e-09,2.889274171749121e-14
"import pandas as pd 

# Create dataframe
data = {
    'size': [1,600],
    'bedrooms': [3],
    'bathrooms': [2],
    'garage_size': [1]
    }
df = pd.DataFrame(data)

# Define the features and target
features = df[['size','bedrooms','bathrooms','garage_size']]
target = df['house_price']

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(features, target, test_size = 0.2)

# Import linear regression model and train
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train, y_train)

# Make prediction on test data
predictions = model.predict(x_test)
print(predictions)",css,python,0.008944574288744974,0.42224925056953694,0.008902546026228931,8.662504827272005e-06,4.644893914213637e-05,2.526458441005187e-05,0.4595943774200956,0.00013402678583012242,0.10009484888118396
"def generatemaxcombo(arr):
    max_combo = []
    value = 1
    for x in arr:
        value = value * x
        max_combo.append(value)
    return max_combo

arr = [4, 2, 8, 12]
max_combo = generatemaxcombo(arr)

print(""The maximum combination of {} is: {}"".format(arr, max_combo))",python,matlab,1.0601065994700352e-12,2.943426377191451e-10,1.0027324901256237e-12,1.506285289323756e-13,2.2004337441619627e-12,0.9999999996932967,1.3381484170043829e-16,1.2869988516638196e-13,7.81807087710591e-12
"def dotProduct(vector1, vector2): 
    dotProd = 0
    for i in range(len(vector1)):
        dotProd += vector1[i] * vector2[i]
    return dotProd",python,python,0.0010070369206350513,0.0008509799224868953,0.0025857483647355466,0.000177807532921697,0.00029121335213714,0.038874995428702964,0.9540088016377438,0.0008511988799922942,0.0013522179606447655
"The given code snippet defines a function called 'count_ones' which takes a single integer argument 'n'. It then initializes a count variable which is used to keep track of the number of ones in binary representation of the given argument. It then executes a loop which runs until all bits of the argument are processed in binary representation. It uses bitwise & operation on the argument with 1 and then compares the result with 1 to recognize whether the bit is 1 or 0. If it is 1, it increments the count by 1, and if it is 0, it does nothing. Finally, it shifts the argument to the right by 1 bit before looping back and processes the next bit.",javascript,typescript,4.392302504749279e-11,2.1005542297274256e-09,1.9516251257806897e-10,1.2045510900054119e-10,0.00017857907805161484,6.012351738328887e-11,3.4736977967489633e-09,8.942675500141004e-10,0.9998214140337647
"# Define a function to count the strings
def count_strings(lst):
 count = 0
 
 # Iterate through the list
 for s in lst:
 
 # Check if string length is greater than 2 and first and last character is same
 if len(s) >= 2 and s[0] == s[-1]:
 count += 1
 
 return count
 
# Driver Code
lst = ['abc', 'xyz', 'aba', '1221']
print(count_strings(lst))",python,python,4.448867929207831e-06,0.0007906594098248008,2.635850554911951e-05,0.00023138205779409834,0.0018437143974821902,1.786778460355354e-05,0.9084573731305341,0.005497644961531215,0.08313055088475166
"def getAverageOfFirstThree(data):
    sum = 0
    for i in range(3):
        sum += data[i]
    
    return sum / 3",python,matlab,7.924984589127614e-06,8.281765146159763e-05,0.0024611273768629003,0.0007845640239377552,6.722167108997982e-06,0.9849826637722238,0.011112078773129686,0.0003270512590151521,0.00023504999167096903
"#!/bin/bash

if [ -z ""$1"" ]; then
 echo ""Usage: $0 [dir]""
 exit 1
fi

DIR=""""$1""""

if [ ! -d ""$DIR"" ]; then
 echo ""Error: Directory \""$DIR\"" does not exist""
 exit 1
fi

cd ""$DIR""
python -m SimpleHTTPServer 8080",bash,bash,0.9999999999999147,1.7339261319201283e-15,3.445737148480867e-14,2.24330408571247e-18,2.6116516416905374e-14,1.7018759275488753e-14,1.6337247954068755e-15,4.266303017749901e-15,2.9800853165687724e-18
"def shorten_string(arr):
    """"""
    Manipulate a list of strings so that each string contains only the first letter from the original string.
    """"""
    result = []
    for word in arr:
        result.append(word[0])
    
    return result

# Call the function
arr = [""apple"", ""banana"", ""coconut""]
result = shorten_string(arr)
print(result)",python,python,4.780649736241254e-06,0.012943066579502826,9.192213581600958e-05,0.0024135443006916162,0.001018745032555935,0.003597116231266067,0.9752352146312837,0.004580851903600268,0.00011475853554724639
"from datetime import date

print(""Hello!"")

current_date = date.today().strftime(""%Y-%m-%d"")
print(""Today's date is"", current_date)",python,python,0.04239612875225597,0.041112353800270056,0.003617256914919938,4.458443108237339e-06,0.009351094780542331,0.0004910831989428207,0.900382202638518,0.0012654381816174193,0.0013799832898252987
"import matplotlib.pyplot as plt

data = [2, 3, 5, 6, 8, 4, 2, 4, 6, 9]

plt.hist(data)
plt.title(""Histogram of Data"")
plt.xlabel(""Data Values"")
plt.ylabel(""Frequency"")
plt.show()",python,html,0.0001918157365468514,0.015034576996867227,0.8952245949538497,0.00012757341782674818,0.0002809279522607414,0.00016948800151113884,0.06800800075240875,0.005809403017583995,0.015153619171145029
"output_list = []

def flatten_list(my_list):
    for item in my_list:
        if isinstance(item, list):
            flatten_list(item)
        elif isinstance(item, tuple):
            flatten_list(list(item))
        else:
            output_list.append(item)

flatten_list(input_list)

print(output_list)",python,python,0.0021130543385588234,0.05271965123581752,0.07155872800208349,0.00022212576506720316,0.03773002966775637,0.030046316003434714,0.8035235447851097,0.0012805961749687849,0.0008059540272033011
"# Find the second largest number from a given list

numbers = [12, 23, 45, 22, 50]

# Sort the list in ascending order
numbers.sort()

# Get the second largest number
second_largest_num = numbers[-2]

print('The second largest number in the list is:', second_largest_num)",python,python,0.0021258680847937206,0.00828802138364212,0.010728455909516118,0.0010278009833862751,0.038956544383766833,1.0987080674192246e-05,0.9266944298241042,0.00477539355061182,0.007392498799504981
"def sortListInDescendingOrder(list):
    return sorted(list, reverse=True)

list1 = [30, 10, 40, 20]
sortedList = sortListInDescendingOrder(list1)
print(sortedList)",python,python,0.0005810768643273802,0.013480617837136328,0.002403685023426514,7.446887919581879e-05,0.0008029675706909697,0.00021607088706869826,0.9816504930903315,0.0005688877932712737,0.00022173205455146627
"def optimize_route(startX, endX):
    best_route = [startX]
    next_x = startX

    while next_x < endX:
        best_cost = float(""inf"")
        for x in range(next_x+1, endX+1):
            cost = abs(x - next_x)
            if cost < best_cost:
                best_cost = cost
                next_x = x
        best_route.append(next_x)

    return best_route",python,matlab,0.0002750627755692694,0.0003058168281955531,0.0006480608237553097,6.960691179341456e-05,5.392963082748989e-05,0.9359098378037498,0.06185869210578084,0.0006244364208879595,0.000254556699440487
"# Python code for Newton-Raphson Method for 
# solving equations 

# An example function whose solution is determined using 
# Newton-Raphson method. The function is x^3 - x^2 + 2 
def func(x): 
	return x * x * x - x * x + 2

# Derivative of the above function which is 3*x^x - 2*x 
def derivFunc(x): 
	return 3 * x * x - 2 * x 

# Function to find the root 
def newtonRaphson(x): 
	h = func(x) / derivFunc(x) 
	while abs(h) >= 0.0001: 
		h = func(x) / derivFunc(x) 
		
		# x(i+1) = x(i) - f(x) / f'(x) 
		x = x - h 
	
	print(""The value of the root is : "", 
						""%.4f""% x) 

# Driver program to test above 
x = 3 # Initial values assumed 
newtonRaphson(x)",python,javascript,7.537424074478226e-08,2.4244376209083288e-09,3.0503136823303095e-09,1.981811472363298e-09,0.9999997925088444,7.972158549045915e-12,4.0909317972410226e-10,1.098491398010052e-08,1.1325837289127863e-07
"def add(x, y):
    return x + y",python,java,4.644166295168704e-05,3.0373726174217555e-05,0.0001836470763826539,0.7161181174906789,3.5323731553628805e-05,1.1044216229316879e-10,0.2834323043138984,0.00013554546581326585,1.8246422105049435e-05
"def sum_pair(array, target_sum):
    res_pair = []
    # Sort the array
    array.sort()
    # Set the left and right pointers
    l, r = 0, len(array) - 1
    while l != r:
        if array[l] + array[r] == target_sum:
            res_pair.append((array[l], array[r]))
            l += 1
            r -= 1
            # If sum is smaller than target sum, increase left
        elif array[l] + array[r] < target_sum:
            l += 1
            # If sum is greater than target sum, decrease right
        else:
            r -= 1
    return res_pair
 
print(sum_pair([2, 4, 6, 9], 8))",python,matlab,0.001772585512043866,0.000434367645223376,0.00035445624130573864,0.00025091884659770366,0.0002437538646464303,0.9953425827110305,9.028432490048984e-05,0.000228729341108273,0.0012823215131436915
"def calc_diff(arr1, arr2):
    # Initialize difference array
    diff = []

    # Iterate through arrays
    for i in range(len(arr1)):
        # Calculate the difference between two elements
        diff.append(abs(arr1[i] - arr2[i]))
        
    return diff",python,python,0.002369332933324215,0.0020238004115093705,0.0032323031905762134,0.002636307007664236,0.0004380094577000348,0.0075115379646117164,0.974567263663051,0.00394927004086818,0.003272175330694804
"import smtplib
import logging

def send_email():
 sender_email = ""my@mail.com""
 receiver_email = ""your@mail.com""

 message = """"""\
 Subject: Exception Alert

There has been an exception in the code.""""""

 with smtplib.SMTP('smtp.gmail.com', 587) as server:
 server.ehlo()
 server.starttls()
 server.login(sender_email, 'SENDER_EMAIL_PASSWORD')
 server.sendmail(sender_email, receiver_email, message)
 
logging.basicConfig(filename=""logfile.log"", 
                    level=logging.ERROR, 
                    format='%(asctime)s - %(levelname)s - %(message)s') 

try:
 raise Exception
except Exception:
 logging.error(""Error occurred"", exc_info=True)
 send_email()",python,typescript,0.00010849154125493805,0.011844770141805412,0.10924530169714079,0.014210710375473466,0.025478695339976102,0.00021021216013709736,0.11854777990097623,0.0021877897923841924,0.7181662490508518
"def minCoins(amount):  
  
    # Initializing the list of coins with the given amount 
    coins = [1, 2, 5] 
    num_coins = [999999999] * (amount+1) 
    num_coins[0] = 0
  
    for i in range(1, amount+1): 
        for j in coins: 
            if j <= i: 
                sub_res = num_coins[i-j] 
                if sub_res + 1 < num_coins[i]: 
                    num_coins[i] = sub_res + 1
  
    return num_coins[amount] 

print(minCoins(8))",python,matlab,0.01971751354561152,0.0029325772015478574,0.0006512770110708847,0.00014267938229564495,0.017468241141148966,0.76452615995084,0.17590532841844728,0.002252183994137781,0.01640403935489994
"s1 = set([i for i in s1])
s2 = set([i for i in s2])
common = list(s1.intersection(s2))
print(""The following characters occur in both the words: "" + ', '.join(common))",sql,sql,0.005356564896339417,0.010298398669713384,0.013862368813152157,9.72519538478103e-05,0.004402021970448854,0.26593006714354606,0.19379291170499674,0.47326867135774875,0.03299174349020701
"def findSmallest(arr):
    smallest = arr[0]
    for i in arr:
        if i < smallest:
            smallest = i
    return smallest

findSmallest([3, 5, 2, 1, 4])
# Output: 1",python,matlab,2.2273268125958175e-05,1.8772256105444963e-05,9.331429983941933e-06,1.2422957248296126e-06,2.8628047002665956e-06,0.999071746804498,0.0008702750210371573,2.712047108643818e-07,3.224915113806439e-06
"def compute_sum(int_arry):
    sum = 0
    # loop through each element in the array
    for i in int_arry:
        sum += i
    return sum

# example testing code
int_arry = [1, 2, 3, 4, 5]
total_sum = compute_sum(int_arry)

print(""Sum of array elements is"", total_sum)",python,java,0.0007105803693894286,0.001435823495367131,0.007694186638072213,0.6728092500041899,0.05900107912468839,0.18362667228657323,0.06861725592904035,0.0007054764424078105,0.005399675710271627
"def add_numbers(numbers):
    """"""
    Find the sum of a given list of numbers.
    Args:
        numbers: a list of numbers.
    Returns:
        The sum of the numbers.
    """"""
    sum = 0

    # Iterate over numbers
    for num in numbers:
        # Add number to total
        sum += num

    return sum

total = add_numbers([4, 7, 6, 2])

print(total)",python,java,1.5288840391971e-07,2.1141150962793786e-08,8.280014187838637e-06,0.9972996561060967,0.0025341910549991514,2.7472911596879065e-10,0.00013666614367353753,7.398694625101892e-06,1.3633682133736101e-05
"class Node: 
 def __init__(self, data): 
 self.data = data
 self.left = None
 self.right = None

# Function to insert a node 
def insert(node, data): 
 if node is None: 
 node = Node(data) 
 elif data < node.data: 
 node.left = insert(node.left, data) 
 else: 
 node.right = insert(node.right, data) 

return node 

if __name__ == '__main__':
 root = None 
 root = insert(root, 8) 
 root = insert(root, 3) 
 root = insert(root, 10) 
 root = insert(root, 1) 
 root = insert(root, 6)
 root = insert(root, 4) 
 root = insert(root, 7) 
 root = insert(root, 14)
 root = insert(root, 13)",sql,sql,0.00014232433932789357,0.0031740819322954752,0.003525124916256505,8.757209021713392e-05,0.0005425206778757774,0.00015558095914715563,0.09023192031563251,0.8995665322174371,0.0025743425518103195
"class DataStorage:

    def __init__(self):
        self.data = {}

    def store(self, key, value):
        """"""Stores a value in the data structure with the given key""""""
        self.data[key] = value

    def get(self, key):
        """"""Retrieves the value associated with a given key in the data structure""""""
        return self.data[key]

    def remove(self, key):
        """"""Removes the value associated with a given key from the data structure""""""
        if key in self.data:
            del self.data[key]",python,css,1.9508516352099045e-05,0.7609887119988485,0.014239346764652131,5.900872046603553e-07,8.970085694737242e-05,0.0005469697200129205,0.0005552185844039425,0.06664403457679387,0.1569159188947846
"import pytorch
import numpy as np

# Define the board size
ROWS = 6
COLS = 7

# Create a 2-dimensional numpy array board
board = np.zeros((ROWS,COLS))

# Define players
player1 = 1
player2 = -1

# Define a class for our agent
class Agent:
    def __init__(self, symbol):
        self.symbol = symbol
        
    def move(self, board):
        valid_moves = []
        for c in range(COLS):
            if board[ROWS-1][c] == 0:
                valid_moves.append(c)
        
        # Get the highest predicted value column
        col = self.predict(board, valid_moves)
        
        # Drop the piece in column
        for r in range(ROWS):
            # If row is empty
            if board[r][col] == 0:
                board[r][col] = self.symbol
                
                # End for loop
                break
    
    # Artificial intelligence/Machine Learning
    def predict(self, board, valid_moves):
        predictions = []
        # Loop through all the valid moves
        for col in valid_moves:
            # Create a deep copy of the board
            temp_board = board.copy()
            # Drop the piece in the column
            for r in range(ROWS):
                if temp_board[r][col] == 0:
                    temp_board[r][col] = self.symbol
                    break
            # Make a prediction with the Neural Network
            prediction = model.predict(temp_board.reshape(1, ROWS, COLS))
            predictions.append(prediction)
        
        # Search predictions for the highest value
        # and return the corresponding column index
        return int(np.argmax(predictions))",python,python,0.01599299805912508,0.020452364091417423,0.028403214716943317,0.00022907324747746497,0.0013050080549711855,0.07880631597478235,0.3727953581853941,0.1260701070048155,0.3559455606650735
"import pandas as pd

# Create the dataframe
df = pd.DataFrame({'date': dates, 'number': numbers, 'string': strings})

df
   date  number string
0  2013-01-01       1      a
1  2013-01-02       2      b
2  2013-01-03       3      c",css,java,3.653929474502556e-06,0.06470188404159762,0.002466783038897452,0.4752521097987282,1.7594418266307343e-06,1.557515218686638e-05,0.4344916973591478,0.01473622821414118,0.008330309023999762
"def concat_and_capitalize(str1, str2):
    result = str1 + str2
    return result.capitalize()

str1 = 'python'
str2 = 'programming'
print(concat_and_capitalize(str1, str2))",python,javascript,0.001297237678705537,0.000422245506009836,4.615258236660529e-08,4.402444473588082e-06,0.8488512449089289,1.3080379798843195e-05,0.14391326855246955,0.003740637634431191,0.001757836742600327
"def is_perfect_square(lst):
    for num in lst:
        if (int(num ** 0.5)) ** 2 != num: 
            return False
    return True",python,matlab,0.00010210686716474,2.7756525950131217e-09,0.00011022819073600922,0.001385550064209436,4.519664353020541e-06,0.5906726173797211,0.40771719835924924,1.8644372298545609e-06,5.9122616840802424e-06
"def product_of_list(list):
    output = {}
    for element in list:
        output[element] = element * element
    return output

print(product_of_list([7, 8, 5]))",python,matlab,1.9287472424580345e-05,1.856661692645238e-06,2.4022566742925788e-06,5.680956970992816e-08,4.1683754451473155e-07,0.9997913843778387,0.00018458192492620503,2.1115545884271548e-10,1.3448173895667995e-08
"def extract_domain_name(url):
  split_url = url.split('//')
  if len(split_url) == 2:
      domain_name = split_url[1]
  else: 
      domain_name = split_url[0]
  
  split_domain_name = domain_name.split('/')
  return split_domain_name[0]

domain_name = extract_domain_name(url)
print(domain_name)",python,python,1.4425931982896314e-05,0.0752105193679349,0.04971564425378588,0.2125946082664072,0.00262531216724629,0.008077412542874193,0.642006710679664,0.0050515144426275275,0.004703852347477195
"class Student:
    def __init__(self, name, gpa):
        self.name = name
        self.gpa = gpa

def read_excel(filename):
    excel_file = open(filename, 'r')
    lines = excel_file.readlines()
    students = list()
    for line in lines[1:]:
        name, gpa = line.split("","")
        students.append(Student(name, float(gpa)))
    return students",python,java,0.08015665172853695,0.005692648097078081,0.01140324660532095,0.8032092459372037,1.378583262684848e-07,0.0007567867612085856,0.09282264626060331,0.0010583794073077762,0.0049002573444144664
"import matplotlib.pyplot as plt

words = [""word1"", ""word2"", ""word3"", ""word4""]
frequencies = [5, 8, 3, 2]

plt.bar(words, frequencies)
plt.title(""Word Frequency Chart"")
plt.xlabel(""Words"")
plt.ylabel(""Frequency"")
plt.show()",python,html,0.0004785876238900472,0.0015447876484748764,0.8914473509190167,5.596829150916059e-05,9.951095048430644e-05,0.00013741769393173846,0.10157370069541653,0.004010401798257754,0.000652274379018794
"def find_intersection(list1, list2):
    intersection = []
    for item1 in list1:
        for item2 in list2:
            if item1 == item2:
                intersection.append(item1)
    return intersection

list1 = [1, 2, 3]
list2 = [3, 4, 5]
result = find_intersection(list1, list2)
print(result)",python,python,0.0002764520959281749,0.010641001768631413,0.0013020687672443945,8.310905188074369e-05,0.00042116514277943653,0.010459176301520589,0.9752016647019744,0.0007144221029820836,0.0009009400670586861
"def get_stats_for_string(string):
    num_elements = len(string)
    max_element = max(string)
    min_element = min(string)
    mean_element = sum(string) / num_elements
    return (max_element, min_element, mean_element)

string = ""abcdef""
stats_for_string = get_stats_for_string(string)
print(""Max: {0}, Min: {1}, Mean: {2}"".format(*stats_for_string))",python,java,1.2019065030600018e-21,6.648068588870255e-13,4.641581046093864e-14,0.9999999994012032,3.21282638280311e-24,7.361717265515111e-18,5.553533746175982e-10,4.2726867460535344e-11,5.429881709716029e-15
"# Program to remove duplicate elements

def remove_duplicates(nums):
 new_list = []
 for num in nums:
 if num not in new_list:
 new_list.append(num)
 
return new_list

# Main program
nums = [1, 3, 3, 5, 5, 7]
dedup_nums = remove_duplicates(nums)
print(dedup_nums) # [1, 3, 5, 7]",python,matlab,0.04780754233541023,2.0124567955141196e-06,0.00017921684276314177,1.1920481173995083e-06,3.7974304364580874e-05,0.7814399908734814,0.17024955244252557,0.0002562621875185966,2.6256509023569976e-05
"def minDepth(root):
    if root is None:
        return 0
    if root.left is None and root.right is None:
        return 1
    elif root.left is None:
        return minDepth(root.right) + 1
    elif root.right is None:
        return minDepth(root.left) + 1
    else:
        return min(minDepth(root.left), minDepth(root.right)) + 1",python,python,0.000646228938297029,0.0061029250709059586,0.0020314170898182936,0.0008235742228903072,0.004948002627936663,0.0004805177093749508,0.8526506870180738,0.13048511208435276,0.0018315352383500305
"import nltk 
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from collections import defaultdict
from string import punctuation
from heapq import nlargest
import numpy as np

# Function to summarize the given text
def summarize(text, n):
    # Tokenize the sentences in the text
    sents = sent_tokenize(text)
 
    # Tokenize the words in the text
    words = word_tokenize(text.lower())
 
    # Generate a list of stop words
    stop_words = set(stopwords.words('english') + list(punctuation))
 
    # Create a word frequency dictionary
    word_freq = defaultdict(int)
    for word in words:
        if word not in stop_words:
            word_freq[word] += 1
 
    max_freq = max(word_freq.values()) 
 
    # Normalize the frequencies
    for word in word_freq.keys():
        word_freq[word] *= 1.0/max_freq
 
    # Compute sentence scores
    sent_scores = defaultdict(int) 
    for i, sent in enumerate(sents):
        for word in word_tokenize(sent.lower()):
            if word in word_freq.keys():
                sent_scores[i] += word_freq[word]
 
    # Identify the n highest scoring sentences
    summary_sents = nlargest(n, sent_scores, key=sent_scores.get)
    summary = [sents[j] for j in sorted(summary_sents)]   
    return ' '.join(summary)",sql,sql,0.018819022245109,0.05506850648850856,0.004661729148677916,7.679649993214062e-05,0.0006184456715509884,0.00010981073524815055,0.14402811804049778,0.7627331620941429,0.013884409076332592
"def merge_list(list_1, list_2):
  merged_list =[]
  while list_1 and list_2:
    if list_1[0] < list_2[0]:
      merged_list.append(list_1.pop(0))
    else:
      merged_list.append(list_2.pop(0))
  merged_list.extend(list_1 if list_1 else list_2)
  return merged_list",python,matlab,1.0890292627343786e-11,7.701783685626415e-11,3.3618049224333057e-11,4.336833626712378e-12,9.339223976126966e-12,0.9999999994462587,3.569304682880465e-10,6.913877713146127e-21,6.16085250061165e-11
"from bs4 import BeautifulSoup


class HTMLParser:
    def __init__(self, html_doc):
        self.html_doc = html_doc

    def parse(self):
        soup = BeautifulSoup(self.html_doc, 'html.parser')
        return soup",python,html,0.00011992932786136185,0.009503036255566453,0.9584703863879445,1.7273839148024263e-06,1.5299915554448262e-05,8.784598334342951e-07,0.02563869277475899,0.00616674460744574,8.330488712035877e-05
"def average(k):
    sum = 0
    for i in range(1, k+1):
        sum += i

    return sum / k",python,matlab,9.547565796983706e-06,5.252700741997183e-06,0.00017515698887566046,0.000705933842489138,4.997744948917325e-06,0.9913516702889942,0.007690529778638234,3.636835839642934e-05,2.0542731118344073e-05
"""""""
Create a program to assess whether or not a movie genre is representing violent behaviour
""""""

import nltk
from nltk.tokenize import word_tokenize

def classify_movie(review):
    # Tokenize review
    tokens = word_tokenize(review)

    # Check for violent words in the review
    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']

    for token in tokens:
        if token in violent_words:
            return 'Yes'

    return 'No'

if __name__ == '__main__':
    review = 'The movie is full of thrilling action scenes and lots of violence.'
    result = classify_movie(review)
    print(result)",python,python,0.01989433741550939,0.059022440504981746,0.004517916898955755,5.6293730818046905e-05,0.015630510235748334,0.0035471549104154746,0.6072467139542567,0.2128641455311854,0.07722048681812918
"def count_strings_by_sum_of_ascii(strings):
    count = 0
    for string in strings:
        ascii_sum = 0
        for char in string:
            ascii_sum += ord(char)
        if ascii_sum % 3 == 0:
            count += 1
    return count",python,python,3.507427990700502e-08,0.0028406181451072292,5.072534225435806e-05,0.11451495936035157,4.11074293341038e-09,9.091345535763562e-05,0.8805567953915141,0.0019273389511705573,1.8610169221712987e-05
"# Node class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# LinkedList class
class LinkedList:
    def __init__(self):
        self.head = None
    
    def is_empty(self):
        return self.head == None
    
    def add(self, data):
        node = Node(data)
        node.next = self.head
        self.head = node

    def remove(self):
        if self.is_empty():
            return None
        data = self.head.data
        self.head = self.head.next
        return data",python,html,2.1789683701921507e-07,0.00022364890218628912,0.9854822487360875,5.193933064190994e-07,1.3203663731565383e-07,3.580685466923971e-09,0.0031582259912440605,0.011128747947571474,6.25551544471685e-06
"def count_list_items(list_of_strings):
 counts = {}
 
 for item in list_of_strings:
 if item not in counts:
 counts[item] = 1
 else:
 counts[item] += 1
 
 return counts
 
print(count_list_items(list_of_strings))
# Output: {""apple"": 2, ""banana"": 1, ""orange"": 1, ""kiwi"": 1}",css,python,0.003332602690192801,0.17085213448856354,0.0535868701434394,7.900697676157692e-05,0.007879934609858757,0.0017196982730347146,0.7618727742385698,0.0004069034990465567,0.00027007508053276724
"def most_common(list):
    dict = {}
    for item in list:
        dict[item] = dict.get(item,0) + 1
    max_count = 0
    max_item = list[0]
    for k,v in dict.items():
        if v > max_count:
            max_count = v
            max_item = k
    return max_item

list = ['a', 'a', 'b', 'd', 'e', 'a']
result = most_common(list)
print(result)",python,python,0.00047686564359347065,0.15475264518393544,0.011289465945366207,7.414258574902284e-05,0.011978162867349226,0.0710541030930975,0.7444002293437882,0.005581141263417756,0.0003932440737030931
"def bmi_calculation(height, weight):  
    bmi = weight / (height * height)  
    return bmi",python,python,0.012171854966528076,0.09475568653370141,0.026264004096436807,0.0031412258908503038,0.008070889376758804,0.004997757648795444,0.8261147470065219,0.012445039697470617,0.012038794782936684
"def search_element(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i 

    return -1",python,matlab,7.212021091856513e-09,6.344408882901645e-09,1.067514893749885e-08,2.1781124854065926e-09,5.318832114774081e-10,0.9947294727026803,0.0052704933370735976,1.366878885870933e-09,5.651792611462297e-09
"def calculate_avg_max_min(list_of_int):
    avg = sum(list_of_int) / len(list_of_int)
    maximum = max(list_of_int)
    minimum = min(list_of_int)
    return avg, maximum, minimum

list_of_int = [1, 7, 4, 6]
avg, max_int, min_int = calculate_avg_max_min(list_of_int)
print(""Average ="", avg)
print(""Maximum ="", max_int)
print(""Minimum ="", min_int)",python,python,0.00047301429321967105,0.004712918645872673,0.00201652941953902,0.00019603688795846968,0.0007727882222010784,2.76951825636484e-05,0.9894374599881167,0.0018055890792210481,0.0005579682813076913
"import requests
from bs4 import BeautifulSoup

items = [""iPhone 11 Pro"", ""Playstation 4 Pro"", ""Samsung Galaxy S20""]

for item in items:
    r = requests.get(""https://www.amazon.com/s?k="" + item)
    soup = BeautifulSoup(r.content, 'html.parser')
    product_prices = [price.get_text().replace(""$"", """") for price in soup.find_all(""span"", class_=""a-price-whole"")]
    print(f""The current price for {item} is {product_prices[0]}"")",python,css,2.674345570441343e-07,0.931547993113586,0.06466930771137311,0.00016673199260676516,0.0008359865106111212,5.083646018103251e-05,0.0025697361176907282,0.00015353154647729461,5.609112916722733e-06
"def merge_lists(list1, list2):
  merged_list = list1 + list2
  return merged_list

merged_list = merge_lists(list1, list2)
print(merged_list)",python,python,0.00048491949337856977,0.004143331530725897,0.0017769086602122694,0.00018707387499045344,0.00045820097356985844,0.0002180040238233314,0.9912473095789358,0.00035316190128662026,0.0011310899630773022
"import json

raw_data = [
 {
  ""customer_name"": ""John Doe"",
  ""total_amount_spent"": 2000
 },
 {
  ""customer_name"": ""Jane Doe"",
  ""total_amount_spent"": 800
 },
 {
  ""customer_name"": ""Joe Smith"",
  ""total_amount_spent"": 200
 }
]

# calculate total amount spent
total_amount_spent = 0
for customer in raw_data:
 total_amount_spent += customer['total_amount_spent']

# generate summary report
summary_report = {
 'total_amount_spent': total_amount_spent,
 'customers': []
}
for customer in raw_data:
 summary_report['customers'].append({
  'customer_name': customer['customer_name'],
  'total_amount_spent': customer['total_amount_spent']
 })

# save summary report to a file
with open('summary_report.json', 'w') as outfile:
 json.dump(summary_report, outfile)",css,bash,0.5480805266013634,0.422254264210087,0.0017725838209410043,6.036775488715951e-05,0.0008748233767480399,0.011277996268854439,0.002470414430867707,0.000513186717886096,0.012695836818365195
"import requests
from bs4 import BeautifulSoup

response = requests.get('https://example.com/')
soup = BeautifulSoup(response.text, 'html.parser')

for h1 in soup.find_all('h1'):
 print(h1.text)",python,html,6.122808576722514e-14,5.081124684081744e-05,0.9999448141494278,4.073636477243207e-06,7.276028901060229e-09,2.7697670444599295e-10,1.5941162017445437e-08,2.7557820898066986e-07,1.8948163565010155e-09
"def sort_items(items):
  items.sort()
  return items

print(sort_items(items))

# Output
['Apple', 'Avocado', 'Banana', 'Cherry']",python,python,0.001447792392680013,0.2624008701825854,0.0022012678581229753,7.727786295851277e-05,0.008015513480017276,1.9896293970401977e-05,0.7252650339850842,0.0005639236817333518,8.424262847731097e-06
"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

print(fibonacci(5)) # 5",python,python,4.2275645446491183e-07,3.145778564505491e-07,1.2416988701137009e-06,7.583447458110354e-09,2.202144762536432e-08,9.961657689670726e-06,0.9999870853192451,9.269990293555652e-07,1.738595966114118e-08
"def swap(items):
    temp = items[0]
    items[0] = items[-1]
    items[-1] = temp
    return items",python,css,0.0020597304337751136,0.4486034395259334,0.01393836340911009,0.0014597223164584724,0.32702105013856203,0.07235865224444418,0.13003493760133322,0.004308256816925763,0.00021584751345759534
"class Student:
 def __init__(self, name, grades):
  self.name = name
  self.grades = grades

 def calculate_grade(self):
  total = 0
  for grade in self.grades:
   total += grade

  return total / len(self.grades)

student1 = Student(""John"", [80,90,85,95])
print(student1.calculate_grade())
# Output: 88.75",python,python,0.002910804916778887,0.10618637173021847,0.0867078219321198,0.013272682934351188,2.210001658373773e-06,0.00011368657581315857,0.7777435789158311,0.011986868729856937,0.0010759742633718494
"def merge_arrays(array1, array2):
    merged_array = array1 + array2
    return merged_array

array1 = [1, 2, 3]
array2 = [4, 5, 6]
merged_array = merge_arrays(array1, array2)
print(merged_array)",python,python,0.014202429994457044,0.03434239249306387,0.02875873908909785,0.0033924942229153847,0.009804097243807066,0.00985721188023616,0.872264881071232,0.004600443908932494,0.022777310096257983
"SELECT a.id, a.name, b.age
FROM TableA a LEFT JOIN TableB b
ON a.id = b.id;",sql,sql,0.0017125854404369482,0.1535620032872911,0.13459404422452503,0.0038422201961896474,1.8366282871914308e-05,0.0001396887902585692,0.005799758059467087,0.6995264750234627,0.0008048586954970263
"import turtle

t = turtle.Turtle();
t.speed(2);

t.right(72);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);
t.left(144);
t.fd(100);

t.done();",python,css,0.09494398190143728,0.3645537934101464,0.07497176877452487,0.009583078311893659,0.11850029322677105,0.08662005895237862,0.17453296025746795,0.028024352749982377,0.04826971241539787
"import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense

# Create a Sequential model
model = Sequential()

# Add a hidden layer
model.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu'))

# Add an output layer
model.add(Dense(3, kernel_initializer='uniform', activation='softmax'))

# Compile the model
model.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc'])

# Fit the model
model.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))",python,bash,0.8650727763200063,0.0002566481891520416,0.00909727996305851,0.00024267762255012832,7.887514542295074e-06,9.741001219686651e-08,0.12482487416004613,5.5414889864544524e-08,0.0004977034057422941
"def check_divisible_3and5(num):
    if (num % 3 == 0 and num % 5 == 0):
        return True
    else:
        return False

# test given number
num = 10
if check_divisible_3and5(num):
    print(""%d is divisible by 3 and 5"" %num)
else:
    print(""%d is not divisible by 3 and 5"" %num)",python,matlab,1.1311044704637688e-08,1.2938166910547814e-10,4.325260553070233e-08,2.9400149402904493e-09,4.0877064157101097e-08,0.9999736237484778,2.5443449504567198e-05,4.191619203882e-09,8.301002873587801e-07
"def calculate_median(data):
    data.sort()
    if len(data) % 2 == 0:
        first_num = data[int(len(data) / 2) - 1]
        second_num = data[int(len(data) / 2)]
        median = (first_num + second_num) / 2
    else:
        median = data[int((len(data) - 1) / 2)]
    return median

result = calculate_median(data)
print(result)",python,python,0.00020383812710687342,0.06739739239574255,0.014758709014988942,0.09343936864737558,0.00014527776912752762,1.2161246958921065e-07,0.8158141350032507,0.0026815677774402026,0.005559589652497944
"The issue with the code snippet is that the two lists are not being concatenated, but instead being added together, resulting in a list containing the sums of the corresponding elements in the two lists. The correct code snippet should be as following:

list1 = [1, 2, 3]
list2 = [4, 5, 6]
list3 = list1 + list2",typescript,typescript,3.9679540956677095e-07,1.9017238422029173e-07,5.861328994166203e-07,1.814838301510806e-05,0.00011757954136772869,1.4969884852941713e-09,3.2612422082222636e-06,1.4046419212244215e-07,0.9998596957715352
"""""""
Generate a class with objects and methods in Python to store customer data
""""""

class Customer():
    '''
    This class stores customer information
    '''
    def __init__(self, name, address, phone):
        self.name = name
        self.address = address
        self.phone = phone
 
    def get_name(self):
        '''
        This method returns customer name
        '''
        return self.name
 
    def get_address(self):
        '''
        This method returns customer address
        '''
        return self.address
 
    def get_phone(self):
        '''
        This method returns customer phone number
        '''
        return self.phone
  
    def set_name(self, name):
        '''
        This method sets customer name
        '''
        self.name = name
 
    def set_address(self, address):
        '''
        This method sets customer address
        '''
        self.address = address
 
    def set_phone(self, phone):
        '''
        This method sets customer phone number
        '''
        self.phone = phone",python,java,0.00042506159841450823,0.0009137820068755031,0.0015627841582897101,0.9136379607905241,1.0878995618277127e-07,3.9185260477728024e-07,0.07948795154652966,0.0037368258068186336,0.00023513344998676503
"def most_frequent_elements(lst):
 count = {}
 for item in lst:
 if item in count:
 count[item] += 1
 else:
 count[item] = 1
 max_count = 0
 max_element = None
 for item in count:
 if count[item] > max_count:
 max_count = count[item]
 max_element = item

return max_element

print(most_frequent_elements([3, 4, 2, 5, 4, 3, 2, 5, 4]))
# Output: 4",python,python,0.00020568828513822874,0.007148218860113856,0.006390545950199233,5.172154359543088e-06,0.0034887877795280833,0.00024524531229686876,0.9824584550601366,4.24870991622583e-05,1.5399499065149462e-05
"# Find all numbers divisible by 7 and multiple of 5 between 0 and 50

# Create an empty list
result = []

# Loop through the range
for i in range(0, 51):
    # Check if number is divisible by 7 and multiple of 5
    if (i % 7 == 0) and (i % 5 == 0):
        # Add the number to the list
        result.append(i)

# Print the list 
print(result)  # Output: [0, 35, 70]",python,python,9.564516577891375e-05,0.002707035583609849,0.0003222337451751539,9.622516702862995e-05,0.0162955427468284,0.0016168762284731234,0.7508555845961277,0.006532004299619431,0.22147885246735893
"import string
import random

def generatePassword():
  characters = string.ascii_letters + string.digits + string.punctuation
  password = ''.join(random.choice(characters) for i in range(8))
  return password
 
print(generatePassword())",sql,sql,1.5180746954206852e-12,2.3372041425701626e-08,3.931660453852383e-08,0.004127750321685023,1.5323297864231905e-14,2.576276718023251e-09,3.239919231376511e-05,0.9958397829597742,2.259771116188594e-09
"import tweepy
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

#Twitter credentials
consumer_key = 'your_key'
consumer_secret = 'your_secret'
access_token = 'your_token'
access_token_secret = 'your_secret'

#Create OAuth authentication
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

#Create API object
api = tweepy.API(auth)

#initialize sentiment analyzer
analyzer = SentimentIntensityAnalyzer()

#Search query
search_query = '#sad'

#Search results
search_results = api.search(search_query)

#Loop through search results
for tweet in search_results:
    #Analyze sentiment
    sentiment = analyzer.polarity_scores(tweet.text)
    #Print sentiment
    print(f""{tweet.text} - {sentiment}"")",python,python,5.826117540650594e-05,0.07183350854626536,0.001268903627846422,0.008066664813733242,0.0015549379482020847,0.0014205885865065861,0.83636740127589,0.001764001474716356,0.07766573255143328
"def selection_sort(arr): 
    # Iterate through all array elements 
    for i in range(len(arr)): 
  
        # Find the minimum element in remaining  
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
  
        # Swap the found minimum element with  
        # the first element         
        arr[i], arr[min_idx] = arr[min_idx], arr[i] 

# Sample list 
arr = [23, 12, 45, 1, 30, 19, 7] 
  
selection_sort(arr) 

print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),",python,matlab,8.066155052017792e-08,1.0035985700782806e-07,5.334075498390544e-08,4.838387087602855e-09,2.4306559625288638e-08,0.9985682784797005,0.0014313521175036937,2.0335058961370035e-09,1.0386218051690028e-07
"# Solution
# First, let's import necessary libraries
import pandas as pd
import openpyxl as op

# Then, let's define a dictionary with user inputs
user_inputs = {
 'name': 'John Smith',
 'age': 28
 'gender': 'Male'
}

# Next, we need to create a Pandas DataFrame with the data
df = pd.DataFrame([user_inputs])

# Finally, we can write the data to an Excel spreadsheet
writer = pd.ExcelWriter('user_details.xlsx', engine='openpyxl')
df.to_excel(writer, sheet_name='Sheet1', index=False)
writer.save()",css,javascript,3.8441458476801413e-07,0.0005162795275397222,0.0002681920946154552,9.109604354173429e-07,0.6966849072486982,1.6212402067804422e-06,0.0001921687854777497,9.988758315313207e-07,0.30233453685261036
"def get_values(dictionary):
    return [value for key, value in dictionary.items() if value > 0]",python,matlab,1.4757455311128774e-10,2.3603295320653224e-05,1.668296261682227e-09,3.941056890098105e-11,5.091473208163596e-10,0.999976392957742,1.006481797776835e-15,8.656253959669691e-10,5.168821206791749e-10
"def calc_circumference(radius):
  circumference = 2 * 3.14 * radius
  return circumference
  
circumference = calc_circumference(radius)
print(circumference)",python,python,0.0032189679111286965,0.009130584843798749,0.00769969808137914,0.0007914176627468258,0.0024188660804305355,0.0015760068629620462,0.9685332386212407,0.00191001818940501,0.004721201746908201
"from threading import Thread

def worker():
    print(""I am a worker"")

threads = list()
for _ in range(5):
    th = Thread(target=worker)
    threads.append(th)
    th.start()

for th in threads:
    th.join()

print(""Done"")",sql,matlab,0.06161979208530174,0.014178609179682965,0.04288347822814338,0.0002965878157603037,0.0017591179383093026,0.5922235867356482,0.22990893725566922,0.056272442402641586,0.0008574483588432973
"def calculate_area_of_triangle(p1, p2, p3):
    a = ((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) ** 0.5 
    b = ((p3[0] - p2[0]) ** 2 + (p3[1] - p2[1]) ** 2) ** 0.5
    c = ((p3[0] - p1[0]) ** 2 + (p3[1] - p1[1]) ** 2) ** 0.5
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return area

result = calculate_area_of_triangle((2, 0), (3, 4), (6, 2))
print(result)",python,python,0.0022498377476755436,0.03730024259140556,0.00860836029841128,0.0009838253358415046,0.0032268789445097723,0.0017385706285199774,0.9348844957488623,0.003886109424423124,0.007121679280350886
"print(""Hello World!"")",python,bash,0.9999734119020168,9.96764694856539e-10,8.203989019786867e-09,1.3871331484896268e-31,2.3140070270935628e-05,1.5029167266270406e-12,3.438768591603071e-06,1.5910552505341453e-11,4.0953400341391626e-11
"from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

def prepare_presentation(content):
    """"""
    Develop a Python program to prepare a presentation in PDF format.
    
    :param content: presentation slides
    :return: PDF file of the presentation
    """"""
    # create a pdf object
    pdf_obj = canvas.Canvas('presentation.pdf', pagesize=A4)
    
    # add contents to the pdf
    for slide in content:
        pdf_obj.drawImage(slide)
    
    # save pdf
    pdf_obj.save()",python,bash,0.9892352752414091,0.003043906372003923,0.002804719023836778,9.438564520419612e-06,0.0013791230358211246,1.3604962489313463e-05,0.0017151126238548534,0.00038890262949995395,0.001409917546564488
"# input expression as a string
expr = ""2 * (3 + 1)""

# Evaluate the expression using eval()
result = eval(expr)

# print the result
print(""Result:"", result)",python,python,3.7670175185078016e-05,0.02563134015613244,0.00047148986703938876,0.0005877929866637477,7.692906497118011e-06,2.9747475056913508e-06,0.92423859323295,0.000966805524497591,0.04805564040352903
"# Function to convert temperature from Celsius to Fahrenheit
def cToF(celsius):
   return celsius * 9/5 + 32

# Function to convert temperature from Fahrenheit to Celsius
def fToC(fahrenheit):
   return (fahrenheit - 32) * 5/9

# Main code
# Get input from user
temperature = 28
scale = 'C'

# Convert the temperature to the target scale
if scale == 'C':
    output = cToF(temperature)
    outputScale = 'F'
else:
    output = fToC(temperature)
    outputScale = 'C'
    
# Print the result
print(f'{temperature} {scale} is {output} {outputScale}')",python,javascript,0.06545003083416182,0.11066522929043338,0.006222173968517994,8.228571100999763e-05,0.6524768270650866,0.00030773596950177113,0.14142960920083059,0.004414004443509851,0.018952103516948066
"def alphabetical_sort(words):
    return sorted(words)

list_of_words = [""python"", ""javascript"", ""java"", ""ruby""]
sorted_list = alphabetical_sort(list_of_words)
print(sorted_list)",python,python,0.0570918664160911,0.00047908288236403305,0.026152035299997038,2.197270433594938e-05,0.32280988350953643,0.011304633313845661,0.5200115717841589,0.018995746811288617,0.04313320727838236
"#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) 2015 Jérémie DECOCK (http://www.jdhp.org)

""""""
This is a simple Python GTK+3 TreeView CellRenderText snippet.

See: http://python-gtk-3-tutorial.readthedocs.org/en/latest/cellrenderers.html#cellrenderertext
""""""

from gi.repository import Gtk as gtk
from gi.repository import Pango as pango

# Countries, population (as in 2015) and continent.
DATA_LIST = [(""China"",         1370130000, ""Asia""),
             (""India"",         1271980000, ""Asia""),
             (""United States"", 321107000,  ""North America""),
             (""Indonesia"",     255461700,  ""Asia""),
             (""Brazil"",        204388000,  ""South America""),
             (""Pakistan"",      189936000,  ""Asia""),
             (""Nigeria"",       183523000,  ""Africa""),
             (""Bangladesh"",    158425000,  ""Asia""),
             (""Russia"",        146267288,  ""Eurasia""),
             (""Japan"",         126880000,  ""Asia"")]

def main():
    window = gtk.Window()
    window.set_default_size(300, 450)
    window.set_border_width(18)

    # Creating the ListStore model
    liststore = gtk.ListStore(str, int, str)
    for item in DATA_LIST:
        liststore.append(list(item))

    # Creating the treeview and add the columns
    treeview = gtk.TreeView(liststore)
    for column_index, column_title in enumerate([""Country"", ""Population"", ""Continent""]):
        renderer = gtk.CellRendererText()

        column = gtk.TreeViewColumn(column_title, renderer, text=column_index)
        column.set_resizable(True)       # Let the column be resizable

        # Use ellipsize for the ""Population"" and ""Continent"" columns
        if column_title in (""Population"", ""Continent""):
            renderer.set_property(""ellipsize"", pango.EllipsizeMode.END)
            renderer.set_property(""ellipsize-set"", True)

        if column_title == ""Population"":
            column.set_expand(True)      # This column will use all the space left

        treeview.append_column(column)

    # Scrolled window
    scrolled_window = gtk.ScrolledWindow()
    scrolled_window.set_border_width(0)
    scrolled_window.set_shadow_type(gtk.ShadowType.IN)                              # should be gtk.ShadowType.IN, gtk.ShadowType.OUT, gtk.ShadowType.ETCHED_IN or gtk.ShadowType.ETCHED_OUT
    scrolled_window.set_policy(gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS)     # should be gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS or gtk.PolicyType.NEVER
    scrolled_window.add(treeview)

    window.add(scrolled_window)

    window.connect(""delete-event"", gtk.main_quit) # ask to quit the application when the close button is clicked
    window.show_all()                             # display the window
    gtk.main()                                    # GTK+ main loop

if __name__ == '__main__':
    main()

",sql,typescript,0.02124171216922074,0.0018415121739358436,0.4352865228872678,0.0012351275511288246,0.020697649527237568,8.701443513346056e-05,0.0005752122973343305,0.00027773433089338514,0.518757514627848
"import requests
import json

# Get the response from reddit
url = ""https://www.reddit.com/r/dataisbeautiful/top/.json""
headers = {""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36""}
response = requests.get(url, headers=headers, allow_redirects=False)
data = json.loads(response.text)

# Get the list of the top 20 posts
post_list = data['data']['children']
top_20_posts = [post['data']['title'] for post in post_list[:20]]

print(top_20_posts)",css,css,8.160081110274977e-10,0.9996501671856848,4.1286200717878696e-05,0.00012051162104929103,2.5554080141296737e-06,1.8206264282310226e-07,0.00015188657527608434,1.595462966485409e-05,1.745550094196362e-05
"def find_subarrays(arr):
     subarrays = []
     for i in range(len(arr)):
         subarrays.append(arr[i:])
         for j in range(i+1, len(arr)):
             subarrays.append(arr[i:j+1])
     return subarrays",python,matlab,1.2124680026977077e-07,1.7209067593114018e-07,2.4919008044066126e-07,2.7636894024904652e-08,1.2576865697848891e-08,0.9984591952608245,0.0015400146166522832,5.93045189513787e-08,1.4807668779447925e-07
"import requests
from bs4 import BeautifulSoup 

# Request page
 URL = 'https://example.com/product' 
 page = requests.get(URL)

# Parse page 
soup = BeautifulSoup(page.content, 'html.parser')

# Extract the price 
price = soup.find(""span"", class_=""price"").get_text()
print(""Price of the product is: "",price)",python,css,4.937086300524753e-10,0.9443604183557771,0.017272328640331472,0.037938667856279744,3.131166465803117e-05,5.067834713132656e-08,0.0003128572049961901,5.636068159991428e-05,2.8004424301525547e-05
"import itertools

vowels = ['a', 'e', 'i', 'o', 'u']

for s in itertools.combinations_with_replacement(vowels, 2):
        print(''.join(s))",sql,sql,0.001760374694710779,0.0031825583308161608,0.0045269509684873685,6.252784364349047e-05,0.000635904842763438,0.023140146364558096,0.04408246750226205,0.9214121492631052,0.001196920189653444
"import random

def randomListGenerator():
    randomList = []
    for i in range(1, 21):
        randomNumber = random.randint(1,20)
        while randomNumber in randomList:
            randomNumber = random.randint(1,20)
        else:
            randomList.append(randomNumber)
    return randomList

print(randomListGenerator())",python,matlab,0.0009066912290209943,0.0015570366320810185,0.001790384449767524,7.392847299639139e-05,1.880174665807686e-05,0.7876606847538299,0.20339025018872514,0.003908043903565071,0.0006941786233558619
"class Name:
    def __init__(self, name):
        self.name = name

    def showName(self):
        print(self.name)

    def hideName(self):
        self.name = '*****'
        print(self.name)",python,java,1.7872739476972543e-05,3.976476211814236e-05,0.000874148100863662,0.970579548116619,1.4766242613408747e-11,2.6549366444018664e-08,0.02820148131735239,0.00028571956135138506,1.4388380857962506e-06
"#!/usr/bin/env python3
import argparse
import importlib
import os
import re
import sqlite3
from datetime import datetime
from urllib.parse import urljoin

import requests
import yaml


def load_plugin_class(plugin_class_str):
    """"""
    dynamically load a class from a string
    """"""
    class_data = plugin_class_str.split(""."")
    module_path = ""plugins."" + ""."".join(class_data[:-1])
    class_str = class_data[-1]

    mod = importlib.import_module(module_path)
    return getattr(mod, class_str)


# print if verbose output is on
def log(msg):
    if verbose_output:
        print(msg)


def course_loop():
    download_count = 0
    skip_count = 0

    # import config
    try:
        with open(os.path.join(os.path.dirname(__file__), 'data', 'config.yaml'), 'r', encoding='utf-8') as config_file:
            config = yaml.load(config_file)
    except FileNotFoundError:
        print(""Please provide a config file under data/config.yaml."")
        return

    # make the initial request to get the token
    session = requests.Session()

    # Loop through sources
    for src_cfg in config:
        # check if there are courses to download from
        if 'courses' not in src_cfg or (source_part is not None and src_cfg['name'] not in source_part):
            continue

        log('\n\nSource: %s' % src_cfg['name'])

        # load dynamically the source class
        try:
            src_class = load_plugin_class(src_cfg['class'])
            src = src_class()
        except AttributeError:
            print('Class %s not found. Check your config file.' % src_cfg['class'])
            continue
        except ImportError:
            print(
                'Class %s not found. Check your config file' % src_cfg['class']
                + ' and ensure you have the class qualifier relative to the plugin directory.')
            continue

        # login
        if 'login_url' in src_cfg and 'username' in src_cfg and 'password' in src_cfg:
            src.login(session, src_cfg['login_url'], src_cfg['username'], src_cfg['password'])

        # loop through courses
        for course in src_cfg['courses']:

            # check if only some courses should be checked
            if course_part is not None and course['name'] not in course_part:
                continue

            log('\nCourse: %s\n' % course['name'])

            if 'path' in course and course['path'] is not None:
                course_url = urljoin(src_cfg['base_url'], course['path'])
            elif 'param' in course and course['param'] is not None:
                course_url = src.course_url(src_cfg['base_url'], course['param'])
            else:
                course_url = src_cfg['base_url']

            # regex pattern for link text and file name
            text_pattern = re.compile(course['pattern'])

            filename_pattern = None
            if 'filename_pattern' in course:
                filename_pattern = re.compile(course['filename_pattern'])

            # get all relevant links from the source site
            links = src.link_list(session, course_url)

            if links is None:
                continue

            for link in links:
                if text_pattern.search(link[0]) is not None:
                    # request file http header
                    file_request = session.head(link[1], allow_redirects=True)

                    # get file name
                    if 'Content-Disposition' in file_request.headers:
                        file_disposition = file_request.headers['Content-Disposition']
                        file_name = file_disposition[
                                    file_disposition.index('filename=') + 10:len(file_disposition) - 1].encode(
                            'latin-1').decode('utf8')
                    else:
                        # last part of the link (usually filename)
                        file_name = link[1].rsplit('/', 1)[-1]

                    # check extension
                    file_ext = os.path.splitext(file_name)[1]
                    if 'ext' in course and course['ext'] is not False:
                        if file_ext != course['ext'] or file_ext not in course['ext']:
                            continue

                    # check file name
                    if filename_pattern is not None and filename_pattern.search(file_name) is None:
                        continue

                    # get last modified date as timestamp
                    if 'Last-Modified' in file_request.headers:
                        file_last_modified = int(datetime.strptime(file_request.headers['Last-Modified'], '%a, %d %b %Y %H:%M:%S %Z').timestamp())
                    else:
                        print(""No timestamp found for file %s"" % file_name)
                        continue

                    # adjust file name
                    if 'rename' in course and course['rename'] is not False:
                        # find a number
                        num = re.search('\d{1,3}', link[0])
                        if num is None:
                            num = re.search('\d{1,3}', file_name)
                        if num is None:
                            num = file_last_modified
                        else:
                            num = num.group(0)
                        file_name = course['rename'].replace('%', str(num)) + file_ext

                    # remove trailing whitespaces
                    file_name = file_name.strip()

                    # the complete file path
                    file_path = os.path.join(course['local_folder'], file_name)

                    # fetch old timestamp from database
                    file_last_modified_old = c.execute(
                        'SELECT last_modified FROM file_modifications WHERE source=? AND course=? AND file_name=?',
                        (src_cfg['name'], course['name'], file_name)).fetchone()

                    # save file and timestamp in the database if it doesn't exists
                    if not simulate and file_last_modified_old is None:
                        c.execute(
                            '''
                            INSERT INTO file_modifications (source, course, file_name, file_path, last_modified)
                            VALUES (?,?,?,?,?)
                            ''',
                            (src_cfg['name'], course['name'], file_name, file_path, file_last_modified))
                    # update timestamp if there's a newer version of the file
                    elif not simulate and file_last_modified > file_last_modified_old[0]:
                        c.execute(
                            'UPDATE file_modifications SET last_modified=? WHERE source=? AND course=? AND file_name=?',
                            (file_last_modified, src_cfg['name'], course['name'], file_name))
                    # otherwise skip saving
                    else:
                        skip_count += 1
                        # log(file_name + ' (skipped)')
                        continue

                    log(file_name + ' (new)')

                    if simulate:
                        conn.rollback()
                        continue

                    # request whole file
                    file_request = session.get(link[1])

                    # write file
                    try:
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        with open(file_path, 'wb') as f:
                            f.write(file_request.content)
                            download_count += 1
                    except FileNotFoundError:
                        print('Can\'t write file to %s' % file_path)
                        conn.rollback()

                    # save changes to the database
                    conn.commit()

    # display count of downloaded files
    log('\nDownloaded %i file(s), skipped %i file(s)' % (download_count, skip_count))


def clear_course():
    if course_to_clear[0] == 'all':
        c.execute(""DELETE FROM file_modifications"")
        log('\nCleared all courses')
    else:
        c.execute(""DELETE FROM file_modifications WHERE course=?"", course_to_clear)
        log('\nCleared course %s' % course_to_clear[0])
    conn.commit()


# command line args
parser = argparse.ArgumentParser(
    description='A simple script for downloading slides and exercises for university lectures.')
parser.add_argument('-v', '--verbose', action='store_true', help='verbose output')
parser.add_argument('-c', '--course', action='append', help='specify a course which should be checked')
parser.add_argument('-s', '--source', action='append', help='specify a source which should be checked')
parser.add_argument('-sim', '--simulate', action='store_true', help='specify if the process should only be simulated')
parser.add_argument('--clear', action='append',
                    help='specify a course which files should be deleted from the database (not from file system).'
                         + 'Use keyword \'all\' to clear the whole database')
args = parser.parse_args()

verbose_output = args.verbose
simulate = args.simulate
course_part = args.course
source_part = args.source
course_to_clear = args.clear

# database for timestamps
conn = sqlite3.connect(os.path.join(os.path.dirname(__file__), 'data', 'file_modifications.db'))
c = conn.cursor()

# check if table exists otherwise create it
c.execute(
    '''
    CREATE TABLE IF NOT EXISTS file_modifications (
        id	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        source TEXT,
        course	TEXT,
        file_name	TEXT,
        file_path TEXT,
        last_modified	INTEGER
    );
    ''')

if simulate:
    log(""Simulation on"")

if course_to_clear is not None:
    clear_course()
else:
    course_loop()

# close cursor
c.close()
",sql,sql,0.0011078085731941853,0.00278787071512709,0.0016563905247642893,0.00027407208021526405,0.0005278030791455401,0.005934801196842512,0.0012560919523494107,0.5118211590311823,0.47463400284717944
"from Crypto.PublicKey import RSA

def generate_key_pair():
 key = RSA.generate(2048)
 pub_key = key.publickey().export_key().decode()
 with open('public.pem', 'w') as file:
  file.write(pub_key)
 
 priv_key = key.export_key().decode()
 with open('private.pem', 'w') as file:
  file.write(priv_key)

generate_key_pair()",python,java,0.044019722396530174,0.013736674393858709,0.001874414438644149,0.8260127089123109,5.6670497192840074e-08,2.6145232836047542e-05,0.03799717897224496,0.0005064774945772246,0.07582662148850056
"my_list = [10,20,30,40]

total = 0
for num in my_list:
    total += num

print(""The sum of all elements in the list is: "" + str(total))",python,python,0.00015925229599325416,2.3714573772872307e-05,0.0017868220038916608,0.0002432902427008204,0.010397972316653285,0.48189422257029635,0.5036123508189566,0.000717691310079696,0.0011646838676554938
"def computeFibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   elif n==1: 
      return 0
   elif n==2: 
      return 1
   else: 
      return computeFibonacci(n-1)+computeFibonacci(n-2)",python,python,3.232194732799174e-05,5.617519117211845e-05,2.0676209274911402e-05,2.750087005002131e-07,1.3813488880745555e-06,4.3253131605144855e-07,0.9998766280106909,1.1798724559062511e-05,3.1102807032644405e-07
"my_list = [1, 5, 7, 2, 8]
my_list.sort()
print(my_list)",python,python,0.0010459563263707917,0.007183940175539912,0.00272764431972809,0.00026563356414261406,0.00048244932857239106,0.00042671298874529846,0.9852300410897339,0.0012246544756684794,0.0014129677314985761
"def max_two(list):
    #sort the list in ascending order
    list.sort()
    #return the last two elements
    return list[-2:]

#example
number_list = [2, 4, 5, 9, 10, 11]
result = max_two(number_list)

print(result)
# Output: [10, 11]",python,python,5.880189808084846e-05,0.00032905645123824256,0.0010658588459878575,0.0005266537690634025,0.0016539597602109838,5.146665146887524e-05,0.9954802471331068,0.0008129115636793297,2.1043927163608765e-05
"import calendar

# get the current month 
current_month = calendar.month_name[calendar.datetime.now().month]
print('Current Month is %s' %current_month)",python,python,0.047762607683570345,0.20044564707740617,0.01617544330662545,0.0012788458511731782,0.019815633415845343,0.0023193998263651367,0.6661173501156566,0.016924692919199402,0.029160379804158296
"import requests

url = 'https://www.example.com/users'
response = requests.get(url)
data = response.json()

for user in data:
    print(user['name'])",python,java,1.4113059676010848e-24,1.3555489610596561e-06,9.371024918053585e-11,0.9999986432934783,1.050202470976446e-13,5.078073380740648e-13,9.633280712694808e-10,9.915698030756368e-11,7.524830530187994e-13
"# Import relevant packages
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# Load the data
data = pd.read_csv('patients_data.csv')

# Create the feature and target vectors
X = data[['fever', 'headache', 'sore throat', 'nausea']]
y = data['disease']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Create and fit the Decision Tree
tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)

# Make predictions
predictions = tree.predict(X_test)

# Evaluate the model
accuracy = tree.score(X_test, y_test)
print('Accuracy: ', accuracy)",python,bash,0.9709254736559483,0.00925412688315391,0.00013466877172147164,1.3939447763609076e-08,8.38580333687481e-07,1.0092581683510293e-07,0.0015505454472555023,3.733660210990311e-11,0.018134231758986222
"def frequency(string): 
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq

print(frequency('hello world'))",python,python,0.001919984575801339,0.04146092168889035,0.027722724410916458,3.5700409522931923e-05,7.854451166968186e-05,0.012259809822603471,0.9105036556175138,0.004777697249145094,0.0012409617139370476
"import nltk
import numpy as np
import random
import string # to process standard python strings

# Read in the data
f = open('student_questions.txt','r',errors = 'ignore')
data = f.read()

conversationsPoints = data.lower().split(""

"")

# Create a dictionary that maps each word to its occurrence
word2count = {}
for conversation in conversationsPoints:
 for word in conversation.split():
 if word not in word2count.keys():
 word2count[word] = 1
 else:
 word2count[word] += 1

# Tokenize the words
words = sorted(list(word2count.keys()))

# Create the token_to_int dictionary
token2int = {}
int2token = {}

for i, word in enumerate(words):
 token2int[word] = i
 int2token[i] = word

# Create input and output datasets
X = []
Y = []

for conversation in conversationsPoints:
 sentence = conversation.lower().split()
 for i in range(1,len(sentence)):
 x = token2int[sentence[i-1]]
 y = token2int[sentence[i]]
 X.append(x)
 Y.append(y)

# One hot encode our input and output data
X_one_hot = np.zeros((len(X), len(words)), dtype=np.int32)
Y_one_hot = np.zeros((len(Y), len(words)), dtype=np.int32)

for i, x in enumerate(X):
X_one_hot[i][x] = 1

for i, y in enumerate(Y):
Y_one_hot[i][y] = 1


# Create and train the chatbot model
model = MyChatbot()
model.fit(X_one_hot, Y_one_hot, epochs=500, batch_size=32)

# Define bot response function
def bot_response(s):
 sentence = [word.lower() for word in s.split()]
 sentence = [token2int[word] for word in sentence]
 prediction = model.predict_single(sentence)
 int2word[prediction]
 return int2word[prediction]

# Run the app
while True:
 print('User: ', end='')
 s = input()
 response = bot_response(s)
 print('Chatbot: ' + response)",python,python,0.3944212281995099,0.049276597750219434,0.017312570709383433,4.146225579917999e-07,2.8209214742103775e-05,0.0022724207053785523,0.5223372487782246,0.010045435087653374,0.004305874932330628
"def count_vowels(string):
    count = 0
    vowels = set(""aeiouAEIOU"")
    for letter in string:
        if letter in vowels:
            count += 1
    return count",python,python,2.08322777885308e-06,0.003649133443836447,0.000506289626138261,0.15900883569405405,2.321310800613967e-07,0.000552075982694433,0.8248366911812393,0.011232860288293615,0.0002117984248851528
"def list_to_number(list1):
    result = list1[0]
    for i in range(1, len(list1)):
        result -= list1[i]
    return result",python,python,3.144615372302547e-06,5.980649464035767e-05,1.672381819868121e-05,8.204880029853585e-07,2.420574735460684e-06,6.448964880365282e-05,0.9997990835492214,4.390581686145089e-05,9.604994163624696e-06
"import random

# Initialize the game
level = 1
points = 0

while True:
 # Randomly generate the level
 level = random.randint(1, 10)
 
 # Print out the level and ask for input
 print('Level {}'.format(level))
 user_input = input()
 
 # Logic for checking the input
 if user_input == 'correct':
 points += 10
 elif user_input == 'wrong':
 break

# Print out the result
print('Points:', points)",python,python,0.002216903276388543,0.10536957200902163,0.006744301351668675,0.008721262273038856,0.0078108869938495395,3.449653339848696e-05,0.8649128769314522,0.0025195023239886313,0.001670198307193284
"odd_nums_list = []

for number in range(1, 26):
    if number % 2 != 0:
        odd_nums_list.append(number)

print(odd_nums_list) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]",python,matlab,6.148778878262585e-06,4.780314450494573e-05,3.008410754659857e-05,1.1851615491581765e-06,3.342668876924515e-07,0.9870687763227187,0.012828083516658883,8.504372778248984e-06,9.080328477376575e-06
"import re

# Clean a string of HTML tags 
def clean_html_tags(str):
    clean_str = re.sub(""<.*?>"", """", str)
    return clean_str

html_string = ""<p>This is a <b>test</b> string</p>""

clean_str = clean_html_tags(html_string)

print(clean_str) #This is a test string",python,java,1.5022631004867403e-09,1.4512310356176372e-06,0.006518515324667786,0.9909034903430386,9.341364121360097e-10,3.274555806455889e-09,0.002448114704027484,0.00012372651071713961,4.696175558033508e-06
"def factorial(x):
    result = 1
    for num in range(1,x+1):
        result *= num
    return result",python,matlab,1.536676955973043e-08,1.295313375893247e-10,7.551642569438592e-08,1.8430392601808305e-09,1.2690344661760763e-08,0.9268774913915381,0.07312205302515225,3.1117771878279915e-07,3.885948030959588e-08
"top_values = []
for key, value in dict.items():
    if len(top_values)<3:
        top_values.append(value)
    else:
        min_value = min(top_values)
        if value > min_value:
            top_values.remove(min_value)
            top_values.append(value)

print(top_values)",python,matlab,1.178476936393132e-09,2.474037963529567e-06,5.010177222801515e-09,1.0363676681124713e-10,1.2957743024076228e-09,0.9999975154960249,4.697959311872085e-14,2.167139419483061e-09,7.107598169646421e-10
"class Stack:
 def __init__(self):
  self.stack = []

 def push(self, item):
  self.stack.append(item)

 def pop(self):
  if self.stack:
   return self.stack.pop()
  else: 
   return None

 def is_empty(self):
  return len(self.stack) == 0",python,python,8.035758624133609e-05,0.012907726405608524,0.025832532706894038,4.411889938735203e-06,5.708706033725121e-05,9.67079305902723e-06,0.928173289241984,0.03287505221786258,5.9872098074675516e-05
"class NeuralNetwork:
    def __init__(self, input_size, num_outputs):
        self.input_size = input_size
        self.num_outputs = num_outputs

        self.weights = np.random.rand(input_size, num_outputs)

    def forward(self, x):
        z = np.dot(x, self.weights)
        return z",python,python,0.00012875393673546356,0.005570921710586593,0.030374008851631808,6.1702423955353735e-06,9.03861943069699e-06,9.231893349423009e-07,0.5226830573662494,0.44112997806354287,9.714802009263922e-05
"""""""
Write a Python program to optimize the cost of a given set of knapsack items.
""""""

def  knapsack(items, capacity): 
    #2D array matrix, (items+1) x (capacity+1)
    matrix = [[0] * (capacity + 1) for _ in range(len(items) + 1)] 
  
    # Fill matrix[][] in bottom up manner. 
    for item in range(len(items) + 1): 
        for weight in range(capacity + 1): 
            if item == 0 or weight == 0: 
                matrix[item][weight] = 0
            elif items[item-1][1] <= weight:
                matrix[item][weight] = max(matrix[item - 1][weight], 
                                         matrix[item - 1][weight - 
                                         items[item - 1][1]] + 
                                         items[item - 1][2])
            else: 
                matrix[item][weight] = matrix[item - 1][weight] 
  
    # Tabulating the matrix 
    print(""Matrix tabulation: "")
    for item in matrix:
        print(item)
    
    # Result w.r.t given capacity and items
    res = matrix[len(items)][capacity] 
    # Create a list to store the optimum solution. 
    ans =[] 
  
    item = len(items) 
    weight = capacity 
  
    while item > 0 and weight > 0:
        if res == matrix[item - 1][weight]: 
            item -= 1
        else:
            ans.append(items[item-1][0]) 
            res -= items[item - 1][2] 
            weight -= items[item - 1][1] 
            item -= 1
  
    print(""Optimum solution for the given capacity:{} of knapsack - "".format(capacity)) 
    for x in range(len(ans)): 
        print(ans[x], end="" "")
  
  
# Driver Code 
items = [(""A"", 4, 12), (""B"", 2, 1), (""C"", 2, 2), (""D"", 1, 1), (""E"", 10, 4)]
capacity = 15
knapsack(items, capacity)",python,python,0.0016868957920542851,0.020798710382318477,0.014576907255157373,1.3679868960954627e-05,0.03641431998813097,0.0005215651579658063,0.9252065933456964,0.0005636938125067065,0.0002176343972093019
"import tweepy

# Authentication
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

# Initializing the API
api = tweepy.API(auth)
 
#Fetching tweets from the given Twitter handle
tweets = api.user_timeline(screen_name='<Twitter handle>', count=200, include_rts=False, tweet_mode=""extended"")
 
# Storing the tweets in a list
tweet_list = []
for tweet in tweets:
 tweet_list.append(tweet.full_text)

# Saving the tweet list as a file
with open('data.txt', 'w') as f:
 for item in tweet_list:
 f.write(""%s\n"" % item)",python,typescript,0.019894925977293178,0.09905966434426487,0.026690118378653618,6.980274963415916e-05,0.007781268530986859,0.03355763473644779,0.1902352681513864,0.0029631139893638078,0.6197482031419692
"class Person:
 def __init__(self, first_name, last_name, age):
 self.first_name = first_name
 self.last_name = last_name
 self.age = age

 def greet(self):
 return f""Hello, my name is {self.first_name} {self.last_name} and I am {self.age} years old.""",python,python,0.0005642531650740982,0.0008344250938443416,0.07695425757838383,1.6079236450774938e-05,0.04281978898307591,2.787830972118921e-05,0.8523665060757938,0.02468760077892757,0.0017292107787284204
"def longestPalSubstr(string):
    maxLength = 1
    start = 0
    length = len(string)
  
    low = 0
    high = 0
  
    # One by one consider every character as center point of even and length palindromes 
    for i in range(1, length): 
        # Find the longest even length palindrome with center points as i-1 and i. 
        low = i - 1
        high = i 
        while low >= 0 and high < length and string[low] == string[high]: 
            if high - low + 1 > maxLength: 
                start = low 
                maxLength = high - low + 1
            low -= 1
            high += 1
  
        # Find the longest odd length palindrome with center point as i 
        low = i - 1
        high = i + 1
        while low >= 0 and high < length and string[low] == string[high]: 
            if high - low + 1 > maxLength: 
                start = low 
                maxLength = high - low + 1
            low -= 1
            high += 1
  
    print(""Longest palindrome substring is:"", end = """") 
    print(string[start:start + maxLength]) 

string = ""forgeeksskeegfor""
longestPalSubstr(string)",python,java,1.3547058553784449e-06,0.0038689828070290386,0.0002474531993697454,0.5143272014270104,2.2603916924889277e-06,0.00010296609171019403,0.4581115941008816,0.00799427429833231,0.015343912978118865
"# function to determine the number of days in a given month
def num_days_in_month(month):
 if month == 2:
 # account for leap year
 year = int(input('Enter the year: '))
 if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)):
 return 29
 else:
 return 28
 elif month in (4, 6, 9, 11):
 return 30
 else:
 return 31

# get month number from user
month = int(input('Enter the month (1-12): '))

# print the result
print('Number of days in the month:', num_days_in_month(month))",python,python,0.0004979316608969097,0.0104000647480187,0.00217130620388389,0.0017708868415234364,0.013455264299153436,4.605206550516583e-05,0.9627277134428155,0.0005937525469094806,0.008337028191293434
"# get user input
input_str = input('Enter a sentence: ')

# split into words
words = input_str.split(' ')

# create an empty dictionary
dic = {}

# loop over words
for word in words:
 # update dictionary
 if word in dic:
  dic[word] += 1
 else:
  dic[word] = 1

# find the most common word
most_common_word = ''
highest_count = 0

for word, count in dic.items():
 if count > highest_count:
  most_common_word = word
  highest_count = count

# print the result
print(f'The most common word is ""{most_common_word}"" with {highest_count} occurences.')",sql,python,0.014334809388097785,0.05595888158993922,0.00989423193395965,2.0249319186687184e-06,0.0005790745531074026,0.0007470599851687319,0.8515771154414973,0.06642629128373156,0.0004805108925796786
"import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten

# Create a Sequential model
model = Sequential()

# Add Conv2D and Dense layers
model.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28,28,1)))
model.add(Conv2D(32, kernel_size=3, activation='relu'))
model.add(Flatten())
model.add(Dense(10, activation='softmax'))

# Compile the model
model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])
              
# Train the model on the MNIST dataset
model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=3)",python,bash,0.8364972046592365,0.0010006611452163807,0.014351414594809367,0.002446738732727763,3.653776808550991e-05,1.1530542515716642e-06,0.1343455629826136,1.5860237225974107e-07,0.01132056846068719
"# This file is part of Shuup.
#
# Copyright (c) 2012-2017, Shoop Commerce Ltd. All rights reserved.
#
# This source code is licensed under the OSL-3.0 license found in the
# LICENSE file in the root directory of this source tree.
import random
import string

from django.conf import settings
from django.core.exceptions import ValidationError
from django.db import models
from django.db.models import Q
from django.utils.encoding import force_text, python_2_unicode_compatible
from django.utils.timezone import now
from django.utils.translation import ugettext_lazy as _
from enumfields import Enum
from parler.models import TranslatableModel, TranslatedFields

from shuup.campaigns.consts import (
    CAMPAIGNS_CACHE_NAMESPACE, CATALOG_FILTER_CACHE_NAMESPACE,
    CONTEXT_CONDITION_CACHE_NAMESPACE
)
from shuup.campaigns.models.basket_conditions import (
    CategoryProductsBasketCondition, ProductsInBasketCondition
)
from shuup.campaigns.utils.campaigns import get_product_ids_and_quantities
from shuup.campaigns.utils.matcher import get_matching_for_product
from shuup.core import cache
from shuup.core.fields import InternalIdentifierField
from shuup.core.models import Category, Order, Shop
from shuup.core.utils import context_cache
from shuup.utils.analog import define_log_model
from shuup.utils.properties import MoneyPropped


class CampaignType(Enum):
    CATALOG = 1
    BASKET = 2


class CampaignQueryset(models.QuerySet):
    def available(self, shop=None):
        query = Q(
            Q(active=True) &
            (Q(start_datetime__isnull=True) | Q(start_datetime__lte=now())) &
            (Q(end_datetime__isnull=True) | Q(end_datetime__gte=now()))
        )
        if shop:
            query &= Q(shop=shop)
        return self.filter(query)


class Campaign(MoneyPropped, TranslatableModel):
    admin_url_suffix = None

    shop = models.ForeignKey(Shop, verbose_name=_(""shop""), help_text=_(""The shop where the campaign is active.""))
    name = models.CharField(max_length=120, verbose_name=_(""name""), help_text=_(""The name for this campaign.""))

    # translations in subclass
    identifier = InternalIdentifierField(unique=True)

    active = models.BooleanField(default=False, verbose_name=_(""active""), help_text=_(
        ""Check this if the campaign is currently active. Please also set a start and end date.""
    ))
    start_datetime = models.DateTimeField(null=True, blank=True, verbose_name=_(""start date and time""), help_text=_(
        ""The date and time the campaign starts. This is only applicable if the campaign is marked as active.""
    ))
    end_datetime = models.DateTimeField(null=True, blank=True, verbose_name=_(""end date and time""), help_text=_(
        ""The date and time the campaign ends. This is only applicable if the campaign is marked as active.""
    ))
    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL, blank=True, null=True,
        related_name=""+"", on_delete=models.SET_NULL,
        verbose_name=_(""created by""))
    modified_by = models.ForeignKey(
        settings.AUTH_USER_MODEL, blank=True, null=True,
        related_name=""+"", on_delete=models.SET_NULL,
        verbose_name=_(""modified by""))
    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(""created on""))
    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(""modified on""))

    objects = CampaignQueryset.as_manager()

    class Meta:
        abstract = True
        verbose_name = _('Campaign')
        verbose_name_plural = _('Campaigns')

    def save(self, *args, **kwargs):
        super(Campaign, self).save(*args, **kwargs)
        cache.bump_version(CAMPAIGNS_CACHE_NAMESPACE)
        cache.bump_version(CONTEXT_CONDITION_CACHE_NAMESPACE)
        cache.bump_version(CATALOG_FILTER_CACHE_NAMESPACE)

    def is_available(self):
        if not self.active:  # move to manager?
            return False
        if self.start_datetime and self.end_datetime:
            if self.start_datetime <= now() <= self.end_datetime:
                return True
            return False
        elif self.start_datetime and not self.end_datetime:
            if self.start_datetime > now():
                return False
        elif not self.start_datetime and self.end_datetime:
            if self.end_datetime < now():
                return False
        return True

    @property
    def type(self):
        return CampaignType.BASKET if isinstance(self, BasketCampaign) else CampaignType.CATALOG


class CatalogCampaign(Campaign):
    _queryset = None

    admin_url_suffix = ""catalog_campaign""
    conditions = models.ManyToManyField('ContextCondition', blank=True, related_name='campaign')
    filters = models.ManyToManyField('CatalogFilter', blank=True, related_name='campaign')

    translations = TranslatedFields(public_name=models.CharField(max_length=120, blank=True, help_text=_(
        ""The campaign name to show in the store front.""
    )))

    def __str__(self):
        return force_text(_(""Catalog Campaign: %(name)s"" % dict(name=self.name)))

    def save(self, *args, **kwargs):
        super(CatalogCampaign, self).save(*args, **kwargs)
        self.filters.update(active=self.active)
        for f in self.filters.all():
            for matching_product in f.get_matching_shop_products():
                context_cache.bump_cache_for_shop_product(matching_product)
        self.conditions.update(active=self.active)

    def rules_match(self, context, shop_product, matching_catalog_filters, matching_context_conditions):
        if not self.is_available():
            return False

        # If rule has filters, all of them has to match
        for filter_pk in self.filters.values_list(""pk"", flat=True):
            if filter_pk not in matching_catalog_filters:
                return False

        # All filters match so let's check that also all the conditions match
        for condition_pk in self.conditions.values_list(""pk"", flat=True):
            if condition_pk not in matching_context_conditions:
                return False
        return True

    @classmethod
    def get_for_product(cls, shop_product):
        matching_filters = get_matching_for_product(shop_product, provide_category=""campaign_catalog_filter"")
        matching_conditions = get_matching_for_product(shop_product, provide_category=""campaign_context_condition"")
        query_filter = Q(Q(filters__in=matching_filters) | Q(conditions__in=matching_conditions))
        return cls.objects.available(shop=shop_product.shop).filter(query_filter).distinct()

    @classmethod
    def get_matching(cls, context, shop_product):
        prod_ctx_cache_elements = dict(
            customer=context.customer.pk or 0,
            shop=context.shop.pk,
            product_id=shop_product.pk)
        namespace = CAMPAIGNS_CACHE_NAMESPACE
        key = ""%s:%s"" % (namespace, hash(frozenset(prod_ctx_cache_elements.items())))
        cached_matching = cache.get(key, None)
        if cached_matching is not None:
            return cached_matching

        from shuup.campaigns.models.matching import get_matching_context_conditions, get_matching_catalog_filters
        matching_context_conditions = get_matching_context_conditions(context)
        matching_catalog_filters = get_matching_catalog_filters(shop_product)

        if not (matching_context_conditions or matching_catalog_filters):
            return []

        # Get all possible campaign id's for matching context_conditions
        campaigns_based_on_conditions = set(
            cls.objects.filter(
                active=True,
                shop=context.shop,
                conditions__id__in=matching_context_conditions
            ).values_list(""pk"", flat=True)
        )

        campaigns_based_on_catalog_filters = set()
        if hasattr(cls, ""filters""):
            # Get all possible campaigns for matching catalog_filters
            campaigns_based_on_catalog_filters = set(
                cls.objects.filter(
                    active=True,
                    shop=context.shop,
                    filters__id__in=matching_catalog_filters
                ).values_list(""pk"", flat=True)
            )

        all_possible_campaigns_ids = (campaigns_based_on_conditions | campaigns_based_on_catalog_filters)
        matching = []
        for campaign in cls.objects.filter(id__in=all_possible_campaigns_ids):
            if campaign.rules_match(context, shop_product, matching_catalog_filters, matching_context_conditions):
                matching.append(campaign)
        cache.set(key, matching, timeout=None)
        return matching


class BasketCampaign(Campaign):
    admin_url_suffix = ""basket_campaign""

    basket_line_text = models.CharField(
        max_length=120, verbose_name=_(""basket line text""), help_text=_(""This text will be shown in basket.""))

    conditions = models.ManyToManyField('BasketCondition', blank=True, related_name='campaign')
    coupon = models.OneToOneField('Coupon', null=True, blank=True, related_name='campaign', verbose_name=_(""coupon""))

    translations = TranslatedFields(
        public_name=models.CharField(max_length=120, verbose_name=_(""public name""), help_text=_(
            ""The campaign name to show in the store front.""
        ))
    )

    def __str__(self):
        return force_text(_(""Basket Campaign: %(name)s"" % dict(name=self.name)))

    def save(self, *args, **kwargs):
        if self.coupon:
            code_count_for_shop = BasketCampaign.objects.filter(
                active=True, shop_id=self.shop.id, coupon__code=self.coupon.code)
            if not self.id and code_count_for_shop.exists():
                raise ValidationError(_(""Can not have multiple active campaigns with same code.""))

            if self.id and code_count_for_shop.exclude(coupon_id=self.coupon.id).exists():
                raise ValidationError(_(""Can not have multiple active campaigns with same code.""))

        super(BasketCampaign, self).save(*args, **kwargs)
        self.conditions.update(active=self.active)

    @classmethod
    def get_for_product(cls, shop_product):
        matching_conditions = get_matching_for_product(
            shop_product, provide_category=""campaign_basket_condition"")
        matching_effects = get_matching_for_product(
            shop_product, provide_category=""campaign_basket_discount_effect_form"")
        matching_line_effects = get_matching_for_product(
            shop_product, provide_category=""campaign_basket_line_effect_form"")
        effects_q = Q(Q(line_effects__id__in=matching_line_effects) | Q(discount_effects__id__in=matching_effects))
        matching_q = Q(Q(conditions__in=matching_conditions) | effects_q)
        return cls.objects.available(shop=shop_product.shop).filter(matching_q).distinct()

    @classmethod
    def get_matching(cls, basket, lines):
        matching = []
        exclude_condition_ids = set()
        product_id_to_qty = get_product_ids_and_quantities(basket)

        # Get ProductsInBasketCondition's that can't match with the basket
        products_in_basket_conditions_to_check = set(
            ProductsInBasketCondition.objects.filter(
                products__id__in=product_id_to_qty.keys()
            ).values_list(""id"", flat=True)
        )
        exclude_condition_ids |= set(
            ProductsInBasketCondition.objects.exclude(
                id__in=products_in_basket_conditions_to_check
            ).values_list(""id"", flat=True)
        )

        # Get CategoryProductsBasketCondition's that can't match with the basket
        categories = set(Category.objects.filter(
            shop_products__product_id__in=product_id_to_qty.keys()).values_list(""id"", flat=True))
        category_products_in_basket_to_check = set(
            CategoryProductsBasketCondition.objects.filter(categories__in=categories).values_list(""id"", flat=True)
        )
        exclude_condition_ids |= set(
            CategoryProductsBasketCondition.objects.exclude(
                id__in=category_products_in_basket_to_check
            ).values_list(""id"", flat=True)
        )

        queryset = cls.objects.filter(active=True, shop=basket.shop)
        if exclude_condition_ids:
            queryset = queryset.exclude(conditions__id__in=exclude_condition_ids)
        for campaign in queryset.prefetch_related(""conditions""):
            if campaign.rules_match(basket, lines):
                matching.append(campaign)
        return matching

    def rules_match(self, basket, lines):
        """"""
        Check if basket rules match.

        They will not match if
        1) The campaign is not active
        2) The campaign has attached coupon
           which doesn't match or is not active
        3) Any of the attached rules doesn't match
        """"""
        if not self.is_available():
            return False

        if self.coupon and not (self.coupon.active and self.coupon.code.upper() in [c.upper() for c in basket.codes]):
            return False

        for rule in self.conditions.all():
            if not rule.matches(basket, lines):
                return False
        return True


class CouponUsage(models.Model):
    coupon = models.ForeignKey('Coupon', related_name='usages')
    order = models.ForeignKey(Order, related_name='coupon_usages')

    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL, blank=True, null=True,
        related_name=""+"", on_delete=models.SET_NULL,
        verbose_name=_(""created by""))
    modified_by = models.ForeignKey(
        settings.AUTH_USER_MODEL, blank=True, null=True,
        related_name=""+"", on_delete=models.SET_NULL,
        verbose_name=_(""modified by""))

    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(""created on""))
    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(""modified on""))

    @classmethod
    def add_usage(cls, order, coupon):
        return cls.objects.create(order=order, coupon=coupon)


@python_2_unicode_compatible
class Coupon(models.Model):
    admin_url_suffix = ""coupon""
    name_field = ""code""  # TODO: Document me
    search_fields = [""code""]    # used by Select2Multiple to know which fields use to search by

    code = models.CharField(max_length=12)

    usage_limit_customer = models.PositiveIntegerField(
        blank=True, null=True,
        verbose_name=_(""usage limit per customer""), help_text=_(""Limit the amount of usages per a single customer.""))
    usage_limit = models.PositiveIntegerField(
        blank=True, null=True,
        verbose_name=_(""usage limit""),
        help_text=_(""Set the absolute limit of usages for this coupon. ""
                    ""If the limit is zero (0) coupon cannot be used.""))

    active = models.BooleanField(default=False, verbose_name=_(""is active""))

    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL, blank=True, null=True,
        related_name=""+"", on_delete=models.SET_NULL,
        verbose_name=_(""created by""))
    modified_by = models.ForeignKey(
        settings.AUTH_USER_MODEL, blank=True, null=True,
        related_name=""+"", on_delete=models.SET_NULL,
        verbose_name=_(""modified by""))

    created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(""created on""))
    modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(""modified on""))

    def save(self, **kwargs):
        campaign = BasketCampaign.objects.filter(active=True, coupon_id=self.id).first()
        if campaign and BasketCampaign.objects.filter(
                active=True, shop_id=campaign.shop.id, coupon__code=self.code).exclude(id=campaign.id).exists():
            raise ValidationError(_(""Can not have multiple active campaigns with same code.""))

        return super(Coupon, self).save(**kwargs)

    @classmethod
    def generate_code(cls, length=6):
        if length > 12:
            length = 12
        return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(length))

    @property
    def exhausted(self):
        val = bool(self.usage_limit and self.usages.count() >= self.usage_limit)
        return val

    @property
    def attached(self):
        return BasketCampaign.objects.filter(coupon=self).exists()

    def attach_to_campaign(self, campaign):
        if not self.attached:
            self.campaign = campaign

    @classmethod
    def is_usable(cls, code, customer):
        try:
            code = cls.objects.get(code__iexact=code, active=True)
            return code.can_use_code(customer)
        except cls.DoesNotExist:
            return False

    def can_use_code(self, customer):
        """"""
        Check if customer can use the code

        :param customer:
        :type customer: `Contact` or None
        :rtype: True|False
        """"""
        if not self.active:
            return False

        if not self.attached:
            return False

        if self.usage_limit_customer:
            if not customer or customer.is_anonymous:
                return False
            if (self.usages.filter(order__customer=customer, coupon=self).count() >= self.usage_limit_customer):
                return False

        return not self.exhausted

    def use(self, order):
        return CouponUsage.add_usage(order=order, coupon=self)

    def increase_customer_usage_limit_by(self, amount):
        if self.usage_limit_customer:
            new_limit = self.usage_limit_customer + amount
        else:
            new_limit = self.usages.count() + amount
        self.usage_limit_customer = new_limit

    def increase_usage_limit_by(self, amount):
        self.usage_limit = self.usage_limit + amount if self.usage_limit else (self.usages.count() + amount)

    def has_been_used(self, usage_count=1):
        """""" See if code is used the times given """"""
        return CouponUsage.objects.filter(coupon=self).count() >= usage_count

    def __str__(self):
        return self.code


CatalogCampaignLogEntry = define_log_model(CatalogCampaign)
BasketCampaignLogEntry = define_log_model(BasketCampaign)
CouponLogEntry = define_log_model(Coupon)
CouponUsageLogEntry = define_log_model(CouponUsage)
",sql,bash,0.4487136810377612,0.2378325237067638,0.0015912319120694046,6.346175417734921e-05,0.0006504731423379688,1.618115158102697e-05,0.04627735535916307,0.018585230073047413,0.24626986186309882
"def BinaryToDecimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return decimal 
  
# Driver code 
binary = 101010
print(BinaryToDecimal(binary))",python,python,0.003682367144143737,0.011399983337393005,0.011588909638078335,0.002552733318886864,0.0028796465329279665,0.0018622219751351827,0.9449827256590926,0.001522879177209559,0.01952853321713254
"def add_matrix(A, B):
    """"""Add two matrices of the same size.""""""
    n = len(A)
    m = len(A[0])
    result = [[0 for _ in range(m)] for _ in range(n)] 
    for i in range(n):
        for j in range(m):
            result[i][j] = A[i][j] + B[i][j]
            
    return result

# Output
print(add_matrix(A,B))",python,python,1.9868527972600524e-07,1.6883615226099372e-08,2.440834910304915e-06,3.2491513938392655e-05,1.2874709859290726e-08,2.0782686798792952e-05,0.9999394477026126,2.9437260383700086e-06,1.6650920966545755e-06
"# Import libraries
from sklearn import tree
import pandas as pd

# Read data into a pandas DataFrame
data = pd.read_csv(""movie_reviews.csv"")
text = data['text']
y = data['sentiment']

# Split data into training and testing sets
from sklearn.model_selection import train_test_split
text_train, text_test, y_train, y_test = train_test_split(text, y, random_state=1)

# Create a decision tree classifier
clf = tree.DecisionTreeClassifier()
clf.fit(text_train, y_train)

# Predict sentiment for the test set
y_pred = clf.predict(text_test)

# Measure accuracy
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_pred, y_test)
print(""Accuracy:"", accuracy)",python,bash,0.44366293079912394,0.4312016556357391,0.0028398144895038033,2.569206804840616e-06,1.8099275918248072e-05,2.8048406037456153e-05,0.107122887566974,2.8095361264173987e-06,0.01512118508377214
"def find_max(list): 
    max = list[0] 
    for i in list: 
        if i > max: 
            max = i 
    return max 
  
list = [10, 3, 16, 17, 8]
print(""Maximum number in the list:"", find_max(list))",python,matlab,0.0004254151927581683,0.0021168532427633217,0.0021431949872078547,4.291647955530253e-05,0.002211707654502697,0.7453692376604791,0.23019326151023134,0.01574712479251738,0.0017502884799847451
"def compute_total_cost(price, quantity, shipping, tax):
    return price * quantity + shipping + tax",python,python,0.008203997223750904,0.13804505934180736,0.010732840564263707,0.00187348780900977,0.005249195154037745,0.003775587093399568,0.8162868249176554,0.003080614419576854,0.012752393476498609
"class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None
  
class LinkedList: 
    def __init__(self): 
        self.head = None

    def insert(self, new_node):
        temp = self.head 
  
        if temp is None: 
            self.head = new_node 
            return 
  
        while temp.next is not None: 
            temp = temp.next

        temp.next = new_node
#
5. Instruction: Given a list of integers, write a Python program to find the longest increasing sub-sequence from the given list.
5. Input:
[2, 3, 4, 5, 6, 1, 7, 8]
5. Output:
def longestIncreasingSubsequence(arr): 
    n = len(arr) 
  
    lis = [1]*n 

    for i in range (1 , n): 
        for j in range(0 , i): 
            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : 
                lis[i] = lis[j]+1
  
    maximum = 0
  
    for i in range(n): 
        maximum = max(maximum , lis[i]) 
  
    return maximum

arr = [2, 3, 4, 5, 6, 1, 7, 8]
print(""Length of Longest Increasing Subsequence is"", longestIncreasingSubsequence(arr))",sql,matlab,0.0014081513769646401,0.0002615387331623616,0.019677264993554818,2.832019875657205e-06,9.39573360671271e-05,0.9092704751297291,0.03436637225802374,0.03481372383783,0.00010568431479250862
"def print_odd_numbers(start, end):
    for i in range(start, end+1):
        if i % 2 != 0:
            print(i)",python,python,1.010714550830906e-05,1.2768219150855515e-05,3.365240135921107e-05,5.333352619970345e-07,1.003556385533583e-06,0.016012223807025532,0.9838540766823992,5.7748005373302426e-05,1.7886847536035078e-05
"import requests
import re

def crawl_website_for_phone_numbers(website):
    response = requests.get(website)
    phone_numbers = re.findall('\d{3}-\d{3}-\d{4}', response.text)
    return phone_numbers
    
if __name__ == '__main__':
    print(crawl_website_for_phone_numbers('www.example.com'))",python,java,4.156041622553236e-10,0.016391944999159743,0.030967437198483178,0.6954958522182915,2.6219955177614383e-05,5.470504382714328e-06,0.25550022061255356,0.0016080355911023009,4.818505245109445e-06
"def check_even(numbers):
  for num in numbers:
    if num % 2 == 0:
      return True
  return False",python,matlab,2.1366766069585942e-06,1.161926575553534e-10,3.799653949947187e-05,0.00021549382193714953,7.51147560464589e-06,0.9465929934187658,0.053141597547894194,1.566698971695504e-06,7.037045274237415e-07
"def textToList(string):
 words = []

 for char in string:
  if char.isalpha():
   words[-1] += char
  else:
   words.append('')
 
 words = [word.lower() for word in words if word]
 return words

print(textToList('Hi there, how are you?')) # returns ['hi', 'there', 'how', 'are', 'you']",python,python,9.276894341309164e-06,0.009470394944781264,0.002422127746219651,0.0016957603459070475,3.6445896749381606e-07,0.0036912791803184594,0.8267312028796981,0.1558667228165299,0.00011287073323680916
"import numpy as np
import matplotlib.pyplot as plt

# Creating a dataset
X = np.random.uniform(-1,1,100)
Y = np.random.uniform(-1,1,100)
# Class labels
y = np.zeros(100)
# Adding some noise
y[X>0] = 1
y[X<0] = 0

# Normal dataset
plt.scatter(X, Y, c=y)
plt.show()

# Unbalanced dataset
# Reducing the number of 0s
y[X<0] = np.random.choice(np.arange(0,2), int(0.50*len(y[X<0])), replace=False)
plt.scatter(X, Y, c=y)
plt.show()",python,python,0.05372066600052915,0.011872367418765347,0.012956036162476928,0.0032759560608915626,0.0005075910830153415,8.464491155729801e-06,0.8962244076348495,0.007734098912782753,0.013700412235533642
"import keras
from keras.models import Sequential
from keras.layers import Dense

# Define the model
model = Sequential()
model.add(Dense(8, input_dim=6, activation='relu'))
model.add(Dense(4, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])",python,bash,0.8931939451894478,0.0005051133274182238,0.020569226837616725,0.00019381771625999494,2.4182189362301298e-05,1.3602955441395811e-06,0.0847497358797893,7.025437092916362e-07,0.0007619160208521456
"list_of_strings = ['hello', 'world', 'hello', 'moon', 'sun']
unique_strings = set(list_of_strings)

for string in unique_strings:
    print(string)",python,python,0.016416860979677435,0.024628114097631475,0.010999315882382954,1.1747110932142926e-06,0.00015983108414359214,0.0002591825491500582,0.9368496023520465,0.009600808762856164,0.0010851095810185674
"import math

n = 100

#Calculate the square root of a number
square_root = math.sqrt(n)

print(f'Square root of {n} is {square_root}')",python,python,0.00416288932342369,0.02487305991454643,0.004192740905092581,0.0005454632633698504,0.033827430435862615,0.00029665560830763544,0.9089908142179388,0.006910508372432146,0.01620043795902635
"class Stack:
    def __init__(self):
        self.items = []
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        if self.is_empty():
            return None
        return self.items.pop()
    
    def peek(self):
        if self.is_empty():
            return None
        return self.items[-1]
    
    def is_empty(self):
        return self.items == []",python,python,2.2152149182293052e-05,0.012247257937537705,0.02665643948179002,1.3609063297739778e-06,0.00011522521768580597,2.2001864117512793e-06,0.7398340054940301,0.2211143231718459,7.035455186644468e-06
"sentence_words = my_sentence.split("" "")
print(sentence_words)",python,python,0.01817103158410323,0.049630062120641534,0.028375452663936176,0.0013210235425077346,0.00634924490265477,0.006789243672119994,0.8705947727598023,0.009154579445529916,0.009614589308704345
"def replace_vowels(string): 
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    new_string = """"
    for letter in string:
        if letter.lower() in vowels:
            new_string += ""_""
        else:
            new_string += letter
    return new_string

result = replace_vowels(""Hello World"")
print(result)",python,python,0.00034173161711629026,0.004384830845993014,0.0009543185098055869,2.9901859454982247e-06,1.4820422701607007e-05,0.00035038862473810975,0.9810868293729134,0.012665233270277475,0.00019885715050900967
"import time

def count_words(text):
    start_time = time.time()
    words = text.split(' ')
    result = len(words)
    end_time = time.time()
    duration = end_time - start_time
    return result, duration

if __name__ == '__main__':
    text = 'This sentence has five words'
    result, duration = count_words(text)
    print(f'The result is {result} and it took {duration} seconds!')",python,python,2.1303764556776958e-05,0.004896574831389113,0.0012260246556741064,1.2086530136089867e-05,5.070397386537126e-05,1.1785237084409195e-05,0.9551673335879883,0.03714700820628699,0.0014671792130189628
"import pandas as pd
import requests

url = 'https://api.openweathermap.org/data/2.5/weather?q=London&units=metric&appid=YOUR_API_KEY'
data = requests.get(url).json()

weather_data = {
 'city': data['name'],
 'temperature': data['main']['temp'],
 'humidity': data['main']['humidity'],
 'description': data['weather'][0]['description']
}

weather_df = pd.DataFrame(weather_data, index=[0])",css,css,1.550692570311912e-07,0.9843503053894948,0.0014872540696784756,0.0075412573734945434,5.684096294445966e-06,1.5288018781591225e-05,0.005781126089390308,0.00031830417851781825,0.0005006257150912487
"from flask import Flask, request
from nltk.stem import WordNetLemmatizer

app = Flask(__name__)

@app.route(""/lemmas"", methods=['POST'])
def lemmas():
    text = request.form[""text""]
    lemmatizer = WordNetLemmatizer()
    words = text.split("" "")
    lemmas = [lemmatizer.lemmatize(word) for word in words]
    return "" "".join(lemmas)
    
app.run(debug=True)",sql,sql,0.015237072900891761,0.23405180852010468,0.007231560043302709,6.437036808884403e-06,9.186528432312322e-05,6.898889953894486e-05,0.022309390343238072,0.7208201858064439,0.00018269116534790425
"def find_pairs_with_sum(values, target):
    indices_list = []
    for i in range(len(values)):
        x = target - values[i]
        if x in values[i+1:]:
            indices_list.extend([i, values.index(x)])
    return indices_list",python,python,0.00038478607126009724,0.002286288512188753,0.0038329673793735582,5.0522067552816004e-05,3.781260456893566e-05,0.0713808598018163,0.9192904594841965,0.002032249854219287,0.0007040542248238555
"def power(x, y): 
    if (y == 0): 
        return 1
    elif (int(y % 2) == 0): 
        return (power(x, int(y / 2)) *
               power(x, int(y / 2))) 
    else: 
        return (x * power(x, int(y / 2)) *
               power(x, int(y / 2))) 


# Driver Code 
x = 3; y = 5
print(power(x, y))",python,java,2.6442983337355917e-08,1.37751259724944e-09,3.1489981153381644e-09,0.9999996086385758,1.834881464028276e-09,4.2824816880101465e-17,3.52779036638149e-07,2.788857576140734e-10,5.49912637423148e-09
"def calculate_bmi(weight, height):
    bmi = weight / (height**2)
    return bmi

weight = 70
height = 1.80

bmi = calculate_bmi(weight, height)
print(""BMI: "" + str(bmi))",python,python,0.013144391586468044,0.13575929998175928,0.032683169061490956,0.003181427354548517,0.013519426003463059,0.006549896056363988,0.7708737240935303,0.012590641167147455,0.011698024695228406
"from collections import Counter

def frequent_words(words, n):
    counts = Counter(words)
    return [word for word, count in counts.items() if count >= n]

result = frequent_words(words, n)

print(result) # prints ['a', 'd']",python,python,0.0007751982838373548,0.004154158404521627,0.0004369659869257991,8.356595921557828e-08,1.4798629955143163e-05,1.0239570020046192e-05,0.9924505455379931,0.0021563319188262317,1.6781019614822333e-06
"import random

# constants
CELLS = [(0, 0), (0, 1), (0, 2),
         (1, 0), (1, 1), (1, 2),
         (2, 0), (2, 1), (2, 2)]

def get_locations():
    # monster = random location
    monster = random.choice(CELLS)
    # player = random location
    player = random.choice(CELLS)
    
    # if monster and player are in the same location, regenerate
    if monster == player:
        return get_locations()

    # door = random location
    door = random.choice(CELLS)
    # if monster, player or door are in the same location, regenerate
    if monster == door or player == door:
        return get_locations()

    return monster, player, door

def move_player(player, move):
    # get the player's current location
    x, y = player
    
    # if move is LEFT, y - 1
    if move == 'LEFT':
        y -= 1
    # if move is RIGHT, y + 1
    elif move == 'RIGHT':
        y += 1
    # if move is UP, x - 1
    elif move == 'UP':
        x -= 1
    # if move is DOWN, x + 1
    elif move == 'DOWN':
        x += 1

    # if the player moves beyond a boundary, they stay in the same place
    if x < 0:
        x = 0
    elif x > 2:
        x = 2
    elif y < 0:
        y = 0
    elif y > 2:
        y = 2

    return x, y

def get_moves(player):
    moves = [""LEFT"", ""RIGHT"", ""UP"", ""DOWN""]
    x, y = player
    
    # if monster is one the left side, they can't move left
    if x == 0:
        moves.remove(""LEFT"")
    # if monster is one the right side, they can't move right
    if x == 2:
        moves.remove(""RIGHT"")
    # if monster is one the top side, they can't move up
    if y == 0:
        moves.remove(""UP"")
    # if monster is one the bottom side, they can't move down
    if y == 2:
        moves.remove(""DOWN"")

    return moves

def draw_map(player):
    print("" _ _ _"")
    tile = ""|{}""

    for idx, cell in enumerate(CELLS):
        if idx in [0, 1, 3, 4, 6, 7]:
            if cell == player:
                print(tile.format(""X""), end="""")
            else:
                print(tile.format(""_""), end="""")
        else:
            if cell == player:
                print(tile.format(""X|""))
            else:
                print(tile.format(""_|""))
            

monster, player, door = get_locations()
print(""Welcome to the dungeon!"")

while True:
    moves = get_moves(player)
    print(""You're currently in room {}"".format(player))
    draw_map(player)

    print(""you can move {}"".format(moves)) # Fill in with available moves
    print(""Enter QUIT to quit"")

    # GET PLAYER'S MOVE
    move = input(""> "").upper()

    # if move is a valid, move player
    if move in moves:
        player = move_player(player, move)
    # if move isquit, quit
    if move == 'QUIT':
        break
    # if monster is player's location, end game
    if player == monster:
        print(""\nOH NO! The monster got you...\n"")
        break
    # if player is at the door, they win
    if player == door:
        print(""\nYou escaped! Congratulations!\n"")
        break",python,typescript,0.12580896300067895,0.0301418507007539,0.01993047329047604,2.1134003636451198e-05,0.01211100171332764,0.15470246772824287,0.22473156363686259,0.050780028921665235,0.38177251700435616
"import random
import string

def generate_password(length):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))",sql,sql,1.1873562066063212e-13,1.8766895299998872e-10,2.9879162528390127e-10,1.5333130038798926e-05,2.4463795739694757e-14,1.0152302791757994e-10,3.1048552092979407e-07,0.9999843557781929,1.8120871952909232e-11
"def estimate_pi(n_terms: int) -> float:
    numerator: float = 4.0
    denominator: float = 1.0
    operation: float = 1.0
    pi: float = 0.0

    for _ in range(n_terms):
        pi += operation * (numerator / denominator)
        denominator += 2.0
        operation *= -1.0

    return pi


if __name__ == ""__main__"":
    print(estimate_pi(1000))",python,python,0.009302153777938008,0.002331619185331803,0.0019926334323272245,0.006911151835302024,0.0004123929040035736,0.0038860137352713623,0.9721761038648622,0.0018377539152134206,0.0011501773497505463
"def print_squares_and_cubes_table():
  # Print top of the table
  print(""n\tSquare\tCube"")

  # Print the squares and cubes of natural numbers from 1 to 10
  for n in range(1, 11):
    print(n,""\t"", n*n,""\t"",n*n*n)

# Driver code
print_squares_and_cubes_table()",python,javascript,6.722160284842428e-05,1.771146795130213e-05,0.00041323896689663883,0.00022176698241062302,0.7385284093983611,0.00020104932590060592,0.16171825470065837,7.29331091612551e-05,0.09875941444581166
"def generate_grade(points):
    if points >= 90:
       return ""A""
    elif points >= 80:
       return ""B""
    elif points >= 70:
       return ""C""
    elif points >= 60:
       return ""D""
    else:
       return ""F""",python,python,0.0005095099941028864,0.006345667697272735,0.0015869821443997227,0.0001406260159992577,0.00042847675387729464,0.00045411993679690953,0.9892179437514923,0.000969122357849428,0.0003475513482093391
"a = 10
b = 20

print(""sum is"", a+b)",python,python,0.0027856531442349047,0.04969586289370305,0.017118430745523605,0.022280738220405664,0.023294576738355704,0.00251990771870638,0.8750294006314848,0.0024839444405880956,0.004791485466997773
"def count_chars(string):
    count_dict = {}

    for char in string:
        if char in count_dict:
            count_dict[char] += 1
        else:
            count_dict[char] = 1

    return count_dict

print(count_chars(""Hello World""))

# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}",css,python,0.004065748060052113,0.04623371623150235,0.008746825684031038,6.67385520526423e-05,0.00012548026973841885,0.0016837655371973062,0.9342334218107734,0.004289561963871458,0.0005547418907813172
"import requests
import pandas as pd
import json

url = 'https://www.example.com/'

response = requests.get(url)
products = json.loads(response.content)

price_df = pd.DataFrame(columns=['Product', 'Price'])

for product in products:
    product_name = product['name']
    product_price = product['price']
    price_df = price_df.append({'Product': product_name, 'Price': product_price}, ignore_index=True)

price_df.to_csv('product_price.csv', index=False)",css,java,1.3306469967664366e-12,0.269609525267275,1.0793131654641726e-05,0.730197238166286,1.3918853385682684e-07,5.033057659524507e-07,0.00017875430772769444,2.5248365990291064e-06,5.217948271268612e-07
"import findspark
findspark.init()

from pyspark import SparkContext

sc = SparkContext('local', 'fibonacci-generator')

def generate_fibonacci():
 rdd = sc.parallelize([0,1])
 for _ in range(100):
 rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])
 return rdd.collect()

result = generate_fibonacci()
print(result)",python,python,0.0004240755076297082,0.001939415389992969,0.00032276844769204026,3.1502725184372454e-06,2.5799093048041736e-05,0.000709592776055976,0.9963783923243261,0.00014857601849520383,4.823017024175941e-05
"def compute_readability(text):
    """"""Compute the readability score of a given text""""""
    words = 0
    sentences = 0
    syllables = 0
    for word in text.split():
        words += 1
        syllables += count_syllables(word)

    for sentence in text.split("".""):
        sentences += 1

    score = 206.835 - (1.015 * (words / sentences)) - (84.6 * (syllables / words))
    return score

def count_syllables(word):
    """"""Count the number of syllables in a given word""""""
    vowels = ""aeiouAEIOU""
    syllables = 0
    for letter in word:
        if letter in vowels:
            syllables += 1
    if len(word) >= 3 and word[-3:] == ""ely"" or word[-2:] == ""es"":
        syllables -= 1
    return syllables",python,python,0.003489376998721947,0.004206326727016461,0.0022294349802275577,9.31681259696601e-07,0.00023998062173253665,0.0008811068389128178,0.9136996942301001,0.0735211605978566,0.0017319873241723718
"def find_all_primes(n):
    """"""Finds all prime numbers up to a given number n.""""""
    primes = []
    for num in range(2, n+1):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            primes.append(num)
    return primes",python,matlab,2.2971524280360492e-10,9.605658172230814e-14,5.840769118444702e-10,1.4402808654553467e-10,6.509304089040962e-11,0.9999998751331003,1.1973171878960082e-07,1.2855470913903519e-09,2.8266244687354945e-09
"user_list = [2, 7, 4, 5]
sorted_list = sorted(user_list)
print(sorted_list)
# Output: [2, 4, 5, 7]",python,python,0.025234397521011535,0.020375997910584764,0.01106447635899555,0.0002447064977439835,0.0022602297105857086,0.0003711156807725361,0.9392950008884475,0.0009757040049774464,0.00017837142688075595
"from flask import Flask, request
import sqlite3

app = Flask(__name__)

@app.route('/api/getData', methods=['POST'])
def get_data():
 data = request.get_json()
 con = sqlite3.connect('database.db')
 cur = con.cursor()
 query = 'SELECT * FROM myTable WHERE id=?'
 result = cur.execute(query, (data['id'],)).fetchall()
 return result

if __name__ == '__main__':
 app.run(debug=True)",sql,sql,0.0005668024749451223,0.3217011596584252,0.0017213108509454835,1.1441227128972982e-06,2.2178852783280596e-05,3.4827998449207686e-06,0.0018383421612272316,0.6740169059108644,0.00012867316825134227
"myString = ""Hello World!""
for x in myString:
  print(x)",python,bash,0.9006271665297765,0.0012139998682586194,0.0036855250759865485,3.02382613743137e-12,0.03817042462406195,0.009500372198540446,0.04614520643602128,0.00024651929133268606,0.00041078597299810466
"def linear_search(list, item):
    """"""
    Implement linear search in a given list.
    list: the list to be searched
    item: the item to be searched for
    """"""
    for i in range(len(list)):
        if list[i] == item:
            return i 
    return -1",python,typescript,2.0746457613293098e-06,0.00026355369639189416,0.0006684138869313518,3.274135562097555e-05,0.011824983996446659,0.046701224928142604,0.17064652037478392,0.0002653325353001872,0.7695951545806211
"def remove_odd_numbers(input_list):
    new_list = [x for x in input_list if x % 2 == 0]
    return new_list

def find_sum_of_even_numbers(input_list):
    new_list = remove_odd_numbers(input_list)
    sum = 0
    for number in new_list:
        sum += number
    return sum

input_list = [1, 2, 3, 4, 5, 6, 7]
print('Sum of even numbers:', find_sum_of_even_numbers(input_list))",python,python,0.0001309953427091125,0.0007446599554477807,0.0011971260481290049,0.009240237163630462,0.00035158611556780986,0.0005091446509619538,0.9864534995187071,0.0008965751800741602,0.0004761760247724904
"def convert_roman_to_decimal(roman_string):
    # define a dictionary of key-value pairs
    roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
    # runs loop to accrue total
    total = 0
    for i in range(len(roman_string)):
        # assign values of characters
        check = roman_dict[roman_string[i]]
        if i+1 < len(roman_string):
            # if the Next letter is in the string, compare it
            check_next = roman_dict[roman_string[i+1]]
            if check >= check_next:
                # if the examined letter is bigger, add it
                total += check
            if check_next > check:
                # if the examined letter is smaller , subtract it
                total -= check
        else:
            total += check
    return total",css,python,0.0001832094567263379,0.10757533013915713,0.0038723781279072864,0.00466834016194679,0.008265302832235047,0.0456441348757018,0.5396005518622615,0.045010368603143676,0.2451803839409202
"def unique_list(list):
    unique_list = []
    for element in list:
        if element not in unique_list:
            unique_list.append(element)
    return unique_list

unique_elements = unique_list([1,2,2,3,3,3])
print(unique_elements)",python,matlab,1.8739814327280527e-06,3.5008096924647246e-06,2.745122607768604e-06,3.313354445148584e-07,1.1595820771791009e-06,0.9999237740418576,6.27010428818571e-05,2.1556449056689128e-08,3.892527556860452e-06
"import sys
import traceback

def visualize_program_calls():
  def trace_calls(frame, event, arg):
    if event != 'call':
      return
    co = frame.f_code
    func_name = co.co_name
    if func_name == 'write':
      # Ignore write() calls from print statements
      return
    func_line_no = frame.f_lineno
    func_filename = co.co_filename
    caller = frame.f_back
    caller_line_no = caller.f_lineno
    caller_filename = caller.f_code.co_filename
    print('Call to %s on line %s of %s from line %s of %s' % \
        (func_name, func_line_no, func_filename,
         caller_line_no, caller_filename))
    return

  sys.setprofile(trace_calls)

def _visualize_program_returns(*args):
  for thread_id, frame in sys._current_frames().items():
    print('Return from %s on line %s of %s' % \
        (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename))

sys.settrace(_visualize_program_returns)",python,python,0.07775234283783847,0.15556449485485888,0.015402134602990012,0.0005878771486902163,0.004087684146098253,0.001111719764447999,0.6903911055815568,0.005323647144855073,0.04977899391866425
"def count_substr(str, substr):
    count = 0
    start = 0
    while (str.find(substr, start) != -1):
        count += 1
        start = str.find(substr, start) + 1
    return count

string = ""abcdabcd""
substring = ""cd""
result = count_substr(string, substring)
print(result)",python,python,5.425389725846417e-07,0.000581786125838155,3.651579146147806e-05,0.0011318332946494236,1.9668872229950057e-07,1.4651078894324713e-07,0.9975672846230547,0.0006782961171121228,3.3983094001320807e-06
"def remove_other_list_elements_inplace(list_elements):
    list_elements[:] = [element for index, element in enumerate(list_elements) if (index + 1) % 2 == 1]
    return list_elements 

sample_list = [1,2,3,4,5,6]
print(""Original List:"", sample_list) 

remove_other_list_elements_inplace(sample_list)
print(""Modified List:"", sample_list)",python,matlab,0.0017301282498456247,0.00192929178741492,0.0025281330609345383,0.00014154509463047596,0.0010660227706010294,0.8173816169331387,0.17380618515303997,3.45287834639654e-05,0.0013825481669309133
"def generate_matrix():
    matrix = []
    for _ in range(5):
        row = [0] * 5
        matrix.append(row)
    return matrix
        
if __name__ == '__main__':
    matrix = generate_matrix()
    print(matrix)",python,python,0.00019276317202197884,0.000761105361248312,0.0007883463199055592,4.000865850111383e-05,6.554030049069537e-05,0.03793909855927216,0.9590806020464702,0.0008606844972800352,0.00027185108480993586
"def extract_words(sentence):
    non_vowel_words = []
    words = sentence.split()
    vowels = ['a','e','i','o','u','A','E','I','O','U']
    for word in words:
        if not any(char in vowels for char in word):
            non_vowel_words.append(word) 
    return non_vowel_words",python,python,0.005500073454298108,0.005739761449228293,0.00949466973026204,2.832972834627898e-06,8.806864040190484e-05,0.05763469158791293,0.695713182585602,0.22570158000553794,0.0001251395739222083
"import string

def clean_text(text):
 # remove punctuation 
 translator = str.maketrans('', '', string.punctuation)
 text = text.translate(translator)
 
 # remove unwanted words
 unwanted_words = {'the', 'and', 'a'}
 words = text.split(' ')
 words = [word for word in words if word not in unwanted_words]
 
 return ' '.join(words)",sql,sql,1.4665520874615125e-06,0.00015561955257540637,9.162451464508072e-05,3.973785739874167e-05,5.7393411208998675e-08,2.071265839673127e-06,0.013761145134219622,0.9859305989778535,1.7678751969569074e-05
"def sort_list(input_list): 
    # Traverse through all array elements 
    for i in range(len(input_list)): 
  
        # Find the minimum element in remaining  
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(input_list)): 
            if input_list[min_idx] > input_list[j]: 
                min_idx = j 
              
        # Swap the found minimum element with  
        # the first element         
        input_list[i], input_list[min_idx] = input_list[min_idx], input_list[i] 
  
    return input_list
  
# Driver code to test above
if __name__ == '__main__':
    input_list = [8, 15, 2, 18, 10]
    print(""Input list:"", input_list)
    print(""Sorted list:"", sort_list(input_list))",python,python,0.00034287001939062794,0.0002330683260330982,0.0005871195180086332,2.404649903138843e-05,0.0003417623014738174,0.06975714375786167,0.9263298036093386,0.0002019524662651948,0.0021822335025969857
"my_list = [1, -2, 9, 4, -7, 0]

# Initialize variables
largest_number = my_list[0]
smallest_number = my_list[0]

# Loop through list
for number in my_list:
    # Update variables
    if number > largest_number:
        largest_number = number
    if number < smallest_number:
        smallest_number = number

print(""Largest number:"", largest_number)
print(""Smallest number:"", smallest_number)",sql,python,0.002049167901018809,0.009806586839454493,0.0019492498039855204,0.00013475182753308875,7.568644703719832e-05,0.0050786421423067345,0.9755937710930918,0.004071203987715182,0.0012409399578572106
"def linearSearch(arr, value):
    
    for i in range(len(arr)):
        if arr[i] == value:
            return i
        
    return -1

arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170]
value = 110

idx = linearSearch(arr, value)

if idx != -1:
    print(""Element is present at index"", idx)
else:
    print(""Element is not present in the array"")",python,matlab,1.1410529060777637e-08,1.9488888450598058e-07,2.3477389803034943e-08,1.3664397742342128e-09,9.98152414969462e-09,0.9999997323601119,1.481063957417946e-08,8.385589782818914e-10,1.0865922307809307e-08
"def is_prime(num):
    if num > 1: 
        for i in range(2,num):
            if (num % i) == 0: 
                return False
        return True 
    else: 
        return False",python,matlab,2.2519113542722855e-12,2.7042726766247394e-18,3.093278463607561e-11,6.835920591015581e-14,1.500799917917631e-13,0.9999995621380299,4.378273490040063e-07,8.104364225202085e-13,4.074924146578199e-13
"import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import fetch_california_housing

# Load the dataset
dataset = fetch_california_housing()
X = dataset.data
y = dataset.target

# Train the model
regr = RandomForestRegressor(n_estimators=100, random_state=42)
regr.fit(X, y)

# Print the R2 score
score = round(regr.score(X, y) * 100, 2)
print(f""R2 score: {score}%"")",python,bash,0.8088408748932544,0.0955596569746378,0.0015575468107306512,9.589390031570057e-06,0.00023327375906298284,2.5910027934477642e-05,0.09288876218631414,1.6031206639903673e-06,0.0008827828373697887
"def extract_words_with_length_greater_equal_than(input_string, length):
    words = input_string.split(' ')
    
    result = []
    for word in words:
        if len(word) >= length:
            result.append(word)
    
    return result

result = extract_words_with_length_greater_equal_than(input_string, 4)       
print(result) # This should print ['This', 'sample', 'string']",python,python,3.6662083558065453e-06,0.00011898782866778923,1.7570877320041948e-05,2.1893599118382924e-05,1.0727234254540187e-07,1.084847582515111e-06,0.9981630573953246,0.0016693846352264419,4.247336061703762e-06
"#!/usr/bin/env python

import virtualenv

# Create a virtual environment
virtualenv_dir = virtualenv.create_environment()

# Activate the virtual environment
virtualenv.activate_environment(virtualenv_dir)

# Install package
virtualenv.install_package('mypackage', virtualenv_dir)",python,bash,0.9999902119038837,1.8728002620544701e-06,3.0132324769026918e-06,3.8454180371997267e-10,1.1242123417455651e-06,4.5349977238037634e-07,9.526452029236384e-08,1.2678480987937516e-06,1.9608541026249573e-06
"def longestCommonPrefix(strings):
    prefix = """"
    min_length = min([len(s) for s in strings])
    for i in range(min_length):
        current_char = strings[0][i]
        for s in strings:
            if s[i] != current_char:
                return prefix
        prefix += current_char
    return prefix

result = longestCommonPrefix(['car', 'cat', 'cow'])
print(result) # Output: 'c'",python,python,0.0003055731725873433,0.001937811011447788,0.0007089508956314615,0.00015004810388100366,1.1568503379251634e-05,0.05761567895593106,0.9376569662488675,0.0014477884803974674,0.00016561462787698504
"def find_duplicate_rows(arr):
    # Create a tracking array to keep track of visited rows
    visited = [0] * len(arr)

    # Iterate through the 2D array, starting from the 0th row
    for i, row in enumerate(arr):
        # If this row has been processed before, we do not need to process it again
        if visited[i]:
            continue

        # Else, check this row against all subsequent rows
        for j in range(i+1, len(arr)):
            # Mark what rows we have visited
            visited[j] = 1

            # If two rows match, we have found a duplicate
            if row == arr[j]:
                print(f'Duplicate row {i} and {j}')

find_duplicate_rows(arr)",python,matlab,0.0007205731654781338,0.0021329721667281464,0.001041313082353562,0.0003045810036733998,2.454517953186506e-05,0.45611375043057567,0.3191648003390625,0.0030523462643421108,0.2174451183682545
"from sklearn.ensemble import RandomForestClassifier

# Initialize the Random Forest model
model = RandomForestClassifier(n_estimators=100)

# Train the model using the training data
model.fit(train_x, train_y)

# Use the model to predict the class
predictions = model.predict(test_x)",python,bash,0.9964075861349125,0.00012338712904926566,9.101411371215119e-05,1.413072705268633e-06,9.443608401219306e-05,2.9887802885996844e-07,0.0007396819888469141,9.194321831930064e-10,0.002542181679300675
"def remove_duplicates(head):
    if head is None: 
        return None 
    current = head 
    while current.next: 
        if current.data == current.next.data: 
            current.next = current.next.next 
        else: 
            current = current.next
    return head",python,html,0.0010087520167971044,0.015926375692177475,0.9498348089950154,0.0004889884193753065,0.0007262619841751513,0.0016462789024821614,0.0246749468325852,0.004504814841481705,0.0011887723159106159
"""""""
Generate a code to create a scatterplot using the Seaborn library in Python
""""""

import pandas as pd
import seaborn as sns

#load the sample datasets
data1 = pd.read_csv('sample_data1.csv')
data2 = pd.read_csv('sample_data2.csv')

# Create a Scatterplot Using Seaborn
sns.relplot(x=""data1_x"", y=""data1_y"", data=data1); 
sns.relplot(x=""data2_x"", y=""data2_y"", data=data2);",python,typescript,6.622081079586908e-05,2.7868955019259277e-05,1.4596141152571494e-05,3.670091057591897e-08,3.5335055487492455e-06,1.4301260347542639e-06,1.8429137137378946e-05,7.084066558102455e-07,0.999867176216745
"def permutation(nums):
    if len(nums) == 1:
        return [nums]

    perm_list = [] 
    for i in range(len(nums)):
       m = nums[i] 

       remLst = nums[:i] + nums[i+1:] 

       for p in permutation(remLst): 
           perm_list.append([m] + p) 
    return perm_list",python,python,7.629442465934904e-05,0.00016226535750648005,0.00014533330653907726,1.0285348397733197e-05,2.013257109783071e-05,0.0033077094359867374,0.9959676288761823,0.000225875852931704,8.447482669876377e-05
"def sort_dicts_by_field(dict_list, field):
    sorted_list = sorted(dict_list, key=lambda k: k[field])
    return sorted_list",python,python,0.0026704820960061926,0.04781087898231479,0.00580345875338542,0.0005682910347489887,0.002940192456273172,0.000686595971602336,0.9352041805083435,0.002457967077581201,0.0018579531197441543
"# -*- coding: utf-8 -*-
# This file is part of Shuup.
#
# Copyright (c) 2012-2016, Shoop Ltd. All rights reserved.
#
# This source code is licensed under the AGPLv3 license found in the
# LICENSE file in the root directory of this source tree.
from django.db import models
from django.utils.encoding import python_2_unicode_compatible
from django.utils.translation import ugettext_lazy as _
from enumfields import Enum, EnumIntegerField
from jsonfield import JSONField

from shuup.core.fields import InternalIdentifierField
from shuup.core.modules import ModuleInterface
from shuup.utils.analog import define_log_model

from ._base import ShuupModel


class SupplierType(Enum):
    INTERNAL = 1
    EXTERNAL = 2

    class Labels:
        INTERNAL = _('internal')
        EXTERNAL = _('external')


@python_2_unicode_compatible
class Supplier(ModuleInterface, ShuupModel):
    default_module_spec = ""shuup.core.suppliers:BaseSupplierModule""
    module_provides_key = ""supplier_module""

    identifier = InternalIdentifierField(unique=True)
    name = models.CharField(verbose_name=_(""name""), max_length=64)
    type = EnumIntegerField(SupplierType, verbose_name=_(""supplier type""), default=SupplierType.INTERNAL)
    stock_managed = models.BooleanField(verbose_name=_(""stock managed""), default=False)
    module_identifier = models.CharField(max_length=64, blank=True, verbose_name=_('module'))
    module_data = JSONField(blank=True, null=True, verbose_name=_(""module data""))

    def __str__(self):
        return self.name

    def get_orderability_errors(self, shop_product, quantity, customer):
        """"""
        :param shop_product: Shop Product
        :type shop_product: shuup.core.models.ShopProduct
        :param quantity: Quantity to order
        :type quantity: decimal.Decimal
        :param contect: Ordering contact.
        :type contect: shuup.core.models.Contact
        :rtype: iterable[ValidationError]
        """"""
        return self.module.get_orderability_errors(shop_product=shop_product, quantity=quantity, customer=customer)

    def get_stock_statuses(self, product_ids):
        """"""
        :param product_ids: Iterable of product IDs
        :return: Dict of {product_id: ProductStockStatus}
        :rtype: dict[int, shuup.core.stocks.ProductStockStatus]
        """"""
        return self.module.get_stock_statuses(product_ids)

    def get_stock_status(self, product_id):
        """"""
        :param product_id: Product ID
        :type product_id: int
        :rtype: shuup.core.stocks.ProductStockStatus
        """"""
        return self.module.get_stock_status(product_id)

    def get_suppliable_products(self, shop, customer):
        """"""
        :param shop: Shop to check for suppliability
        :type shop: shuup.core.models.Shop
        :param customer: Customer contact to check for suppliability
        :type customer: shuup.core.models.Contact
        :rtype: list[int]
        """"""
        return [
            shop_product.pk
            for shop_product
            in self.shop_products.filter(shop=shop)
            if shop_product.is_orderable(self, customer, shop_product.minimum_purchase_quantity)
        ]

    def adjust_stock(self, product_id, delta, created_by=None, type=None):
        from shuup.core.suppliers.base import StockAdjustmentType
        adjustment_type = type or StockAdjustmentType.INVENTORY
        return self.module.adjust_stock(product_id, delta, created_by=created_by, type=adjustment_type)

    def update_stock(self, product_id):
        return self.module.update_stock(product_id)

    def update_stocks(self, product_ids):
        return self.module.update_stocks(product_ids)


SupplierLogEntry = define_log_model(Supplier)
",css,css,0.17658557652557752,0.60020187019772,0.036870646080568795,0.004533618131702861,0.0009890780778817336,3.262426228670927e-06,0.16705112945983677,0.009011943525175209,0.004752875575308391
"def largest_elements(arr):
    
    max_vals = []
    while arr:
        max_value = max(arr)
        max_vals.append(max_value)
        while max_value in arr:
            arr.remove(max_value)
    return max_vals",python,matlab,1.162981260279516e-05,7.690848121226916e-05,1.1847711929939514e-05,8.509842885198743e-06,8.147140715842544e-06,0.9959772874854598,0.003876008523139309,4.98680546527896e-07,2.9162321508603184e-05
"class Process:
    def start(self):
        # code to start the process 
        pass

    def stop(self):
        # code to stop the process 
        pass",python,typescript,0.000706726754723492,2.0501145521511305e-06,0.0001429126023215584,5.1992927541508414e-06,0.00011202092788001788,1.4221687652109764e-06,0.001710451853620898,0.0005210326655218502,0.9967981836198606
"message = 'Hello world!'

print(message.upper()) // HELLO WORLD!",python,bash,0.999713876851136,2.8224503278774414e-07,4.930750238523576e-07,7.435821343662181e-26,0.00027706535158177515,3.1595632358383725e-10,8.274732033013058e-06,3.3634504406638847e-09,4.06578574722489e-09
"result = ""Hello"" + "" "" + ""World""
print(result)",python,bash,0.9371532744344366,0.00012045159325741173,1.2402546080356972e-05,3.0820316986684684e-20,0.0027351817616159393,8.34620023387487e-09,0.05997533374258006,2.7301682733544186e-06,6.174075561661398e-07
"def classifySentence(sentence):
    #importing the necessary libraries
    import nltk
    from nltk.sentiment.vader import SentimentIntensityAnalyzer
    
    #Create a sentiment analyzer object
    sid_obj = SentimentIntensityAnalyzer() 
    
    #calling the polarity_scores method 
    sentiment_dict = sid_obj.polarity_scores(sentence) 
  
    #decide sentiment as positive, negative, neutral or mixed
    if sentiment_dict['compound'] >= 0.05 : 
        return ""Positive""
  
    elif sentiment_dict['compound'] <= - 0.05 : 
        return ""Negative""
  
    else : 
        return ""Neutral""
    
result = classifySentence(""She is a great teacher"")
print(result)",python,python,0.002363444506583184,0.030134752713367036,0.0015272322758653294,0.0001533338751792418,0.0009966952568811604,5.340792603798417e-05,0.9403204724930425,0.002406219153550749,0.02204444179949288
"import pandas as pd
import numpy as np
import keras

# Read the data
df = pd.read_csv('stocks.csv')

# Extract the features and target
features = df.drop(['Name', 'symbol', 'Close'], axis=1).values
target = df.Close.values

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Construct a model
model = keras.Sequential([
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(32, activation='relu'),
    keras.layers.Dense(1, activation='linear'),
])

# Compile the model
model.compile(optimizer='adam',
              loss='mse',
              metrics=['mae'])

# Train model
model.fit(X_train, y_train, epochs=10)

# Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test)

print('Test accuracy:', test_acc)",python,python,0.03839045534168772,0.012631169586053313,0.01660027457624234,6.233038055567362e-06,7.373076165222285e-06,2.5282124347951982e-05,0.5919012926445594,1.3864442821825576e-05,0.3404240551700666
"list1 = [1, 2, 3, 4, 5]
list2 = [5, 6, 7, 8]

def find_unique_elements(list1, list2):
    unique_elements = []
    for ele in list1:
        if ele not in list2:
            unique_elements.append(ele)
    for ele in list2:
        if ele not in list1:
            unique_elements.append(ele)

    return unique_elements

unique_elements = find_unique_elements(list1, list2)
print(unique_elements)",python,python,0.0020437593956848274,0.01901872438675082,0.00873150859739589,0.00047589875142895393,0.0017506340027156322,0.15445140472797547,0.8049043897753859,0.0025711539790312927,0.006052526383631288
"def arrange_list(input_list):
    # sort the list
    input_list.sort()
    # initialize the output list
    output_list = []
    # loop over elements in the input list
    for i in range(0, len(input_list)):
        if i % 2 == 0:
            output_list.append(input_list[i])
        else:
            output_list.append(input_list[len(input_list) - 1 - i])
    # return output list
    return output_list

if __name__ == '__main__':
    input_list = [3, 5, 4, 16, 9]
    print(arrange_list(input_list)) # [3, 16, 5, 4, 9]",python,python,0.005728166222853062,0.004742656009032169,0.006223209939635463,6.178440682183309e-05,0.0014249948316631853,0.03911094220698265,0.9349246577357385,0.007040280826715171,0.0007433078205579164
"def add_prefix(input_string, prefix):
    """"""Takes a string and adds a prefix to each word in the string.""""""
    output_string = []
    words = input_string.split()
    for word in words:
        output_string.append(prefix + word)
    return ' '.join(output_string)",sql,sql,2.1913778235060774e-05,0.0023789821971544113,0.0018853819984615476,0.0096585908810316,5.039287727511698e-06,0.0003111898904443255,0.08768286621363804,0.8970785653433557,0.0009774704099518874
"import random

password_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*().,?0123456789'

def generate_password(length):
    return ''.join(random.choices(password_characters, k=length))
  
print(generate_password(10))",sql,sql,1.2365008487857372e-05,1.889979732623635e-05,1.0572450424354735e-05,1.545712912392299e-07,0.00010387107333109145,4.6256129874875953e-07,0.0016306999587244154,0.9982203714700639,2.603109052071954e-06
"def trading_strategy(portfolio):
    """"""
    Function to design a trading strategy using Python to maximize profits while minimizing risks

    Arguments:
    portfolio -- current portfolio of the trader

    Returns:
    new_portfolio -- new and improved portfolio
    """"""

    # Initialize the new and improved portfolio
    new_portfolio = portfolio.copy()
 
    # Loop through all the stocks in the portfolio
    for stock in portfolio:
        # Calculate the current price of the stock
        price = get_price(stock)
 
        # Calculate the risk of buying the stock
        risk = get_risk(stock)
 
        # Calculate the expected return of buying the stock
        return_expected = get_expected_return(stock, price)
 
        # Calculate the risk/reward ratio
        risk_reward = return_expected/risk
 
        # If the risk/reward ratio is greater than 1,
        # then buy the stock
        if risk_reward > 1:
            # Calculate the amount to buy
            amount = calculate_amount_to_buy(portfolio, price, risk)
 coy
            # Buy the stock
            new_portfolio = buy_stock(new_portfolio, stock, amount)
 
        # Else, sell the stock
        else:
            # Sell the stock
            new_portfolio = sell_stock(new_portfolio, stock)

    # return the new and improved portfolio
    return new_portfolio",python,typescript,0.0020409394368282982,0.0014071503511788393,0.00020347645105791244,6.042892369605049e-06,0.014608665615775559,3.061718013424278e-05,0.0007150322611770061,0.00020183431175899337,0.9807862414997196
"import tkinter as tk

root = tk.Tk()

text_editor = tk.Text(root)

# create and add scrollbar
scrollbar = tk.Scrollbar(root)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
text_editor.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=text_editor.yview)

# add functions to widgets
text_editor.pack(fill=tk.BOTH, expand=True)

# create a menu and add commands
menu_bar = tk.Menu(root)

# add menu bars
root.config(menu=menu_bar)

def quit():
    root.destroy()

# set menu bar items
file_menu= tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label=""Open"", command=lambda: open_file())
file_menu.add_command(label=""Save"", command=lambda: save_file())
file_menu.add_command(label=""Quit"", command=lambda: quit())

# add menu drop downs
menu_bar.add_cascade(label=""File"", menu=file_menu)

# create a file open dialog
def open_file():
    file = tk.filedialog.askopenfile(mode=""r"")
    if file != None:
        contents = file.read()
        text_editor.insert('1.0', contents)

# create a file save dialog
def save_file():
    file = tk.filedialog.asksaveasfile(mode=""w"")
    if file != None:
        data = text_editor.get('1.0', tk.END)
        file.write(data)

root.mainloop()",sql,python,0.03519960611636554,0.11993126052956413,0.022973216962939046,0.0055295607767988355,0.003289712360064074,0.00013813020683487863,0.4362149647017605,0.23639817795084891,0.14032537039482415
"product = lambda x, y: x * y",python,css,0.006967385934331992,0.5568655597693001,0.01498505842791934,0.0008714990220385583,0.0014994032553446157,0.0012155949236100896,0.4100960584358755,0.0012904477797543682,0.0062089924518253055
"# import required libraries
import pandas as pd

# define the rating scale
rating_scale = [1,2,3,4,5]

# create an empty DataFrame
rating_df = pd.DataFrame(columns=['Team', 'Rating'])

# function to take in user input and add it to the DataFrame
def add_rating(team, rating):
    rating_df = rating_df.append({'Team': team, 'Rating': rating}, ignore_index=True)

# function to allow a user to rate a team
def rate_team():
    team = input('Which team would you like to rate? ')
    rating = input('Please enter a rating between 1 and 5: ')
    if rating not in rating_scale:
        print('Error: Rating must be between 1 and 5!')
        rate_team()
    else:
        add_rating(team, rating)
        print('Rating added successfully!')

# call the rate_team() function
rate_team()",css,typescript,0.00039494039126976787,0.023121107381795195,0.00113205342591718,4.296696938509735e-05,0.01612345864625418,0.00013933440874794672,0.02754010643781707,0.00125278559718857,0.930253246741625
"class AnagramDetector:
    def __init__(self, sentence1, sentence2):
        self.sentence1 = sentence1
        self.sentence2 = sentence2
    
    def is_anagram(self):
        # put words in sentences in lowercase
        s1_words = [word.lower() for word in self.sentence1.split()]
        s2_words = [word.lower() for word in self.sentence2.split()]
        
        # compare the length of the words
        if len(s1_words) != len(s2_words):
            return False
        
        # compare the words in both list
        for word in s1_words:
            if word not in s2_words:
                return False
        
        return True

detector = AnagramDetector(sentence1, sentence2)
result = detector.is_anagram()
print(result)",python,python,0.00063284578726077,0.0017221911465568579,0.01099336574650252,8.369610615498094e-07,0.00010929947620525683,5.4746613902492834e-05,0.9257093568928929,0.06062723663266594,0.00015012074295177126
"def is_prime(number): 
 
    # If given number is greater than 1 
    if number > 1: 
         
        # Iterate from 2 to n / 2  
        for i in range(2, int(number/2)): 
              
            # If number is divisible by any number between  
            # 2 and n / 2, it is not prime  
            if (number % i) == 0: 
                return False
        return True
    else: 
        return False",python,python,2.7329309166473805e-06,3.689201461007314e-05,3.208539748544295e-05,3.7274719765721534e-05,2.7932796531558833e-05,4.904911991345972e-05,0.9994723088397106,4.8084123158446524e-05,0.00029364005790805846
"import requests 

# API URL 
url = ""http://api.openweathermap.org/data/2.5/weather?""

# API Key 
api_key = ""Your_API_KEY""
 
# City name 
city_name = ""Dataak""

# parameters 
params = {
    'appid': api_key,
    'q': city_name,
    'units': 'metric'
} 

# GET request 
response = requests.get(url, params=params)

# Printing response 
data = response.json() 

# Parsing data 
temp = data['main']['temp'] 
wind_speed = data['wind']['speed'] 

# Printing output 
print('Temperature : {} degree celcius'.format(temp)) 
print('Wind Speed : {} m/s'.format(wind_speed))",css,css,1.0437161692499524e-06,0.9971928747769935,0.0012532300037045383,0.00015878180976847784,8.548260160778854e-06,0.00047953597318985293,0.0007438371338731772,0.00010172818879580278,6.04201373447873e-05
"def dot_product(v1, v2):
    total  = 0
    for (x1, x2) in zip(v1, v2):
        total += x1*x2
    return total",python,python,0.0010472891089050725,0.005613657357915512,0.004691239373368232,0.00021338012345589307,0.0006731325474757915,0.001628614142567649,0.9821554178430681,0.0020816284146128136,0.001895641088630865
"name = input(""Please enter your name: "")

print(""Hello "" + name + ""!"")",python,bash,0.8194424080586175,0.001279435570863008,0.012353213310647562,0.01528719450124633,1.8958455835201104e-06,5.6017785287314284e-05,0.15139649365390118,0.00011822863392570493,6.511263992809205e-05
"def primeSieve(n): 
    prime_list = [True for i in range(n+1)] 
    p = 2
    while (p * p <= n): 
        if (prime_list[p] == True): 
            for i in range(p * 2, n+1, p): 
                prime_list[i] = False
        p += 1
    primes=[] 
    for p in range(2, n): 
        if prime_list[p]: 
            primes.append(p) 
    return primes

print(primeSieve(10))  # [2, 3, 5, 7]",python,matlab,3.821967596264336e-06,8.20116149639005e-07,1.887394925405109e-05,2.792436838416037e-07,3.0566799083260546e-07,0.9902336641085306,0.009738712809757757,1.3201732517012911e-06,2.2019637853354844e-06
"string1 = ""hello""
string2 = ""world""

if string1 < string2:
    print(string1 + "" comes before "" + string2 + "" alphabetically"")
else:
    print(string2 + "" comes before "" + string1 + "" alphabetically"")",python,python,0.03744821739644531,0.009745754403695057,0.011083238009808894,3.594139881925319e-06,0.016195773439552346,0.0054428999287731315,0.9136433753397641,0.003319617382095595,0.003117529959983711
"import keras
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.layers import Embedding, LSTM, Dense, Dropout
from keras.models import Sequential

#Data loading and preprocessing
text = open('text_file.txt').read()
tokenizer = Tokenizer()
tokenizer.fit_on_texts([text])
encoded = tokenizer.texts_to_sequences([text])[0]

# Generating sequences
sequence_length = 15
sequences = list()
for i in range(sequence_length, len(encoded)):
    seq = encoded[i-sequence_length:i]
    line = ' '.join(map(str, seq))
    sequences.append(line)

# Generate model
model = Sequential()
model.add(Embedding(20000, 128, input_length=sequence_length)) 
model.add(LSTM(256)) 
model.add(Dense(500, activation='relu')) 
model.add(Dense(20000, activation='softmax')) 
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(sequences, encoded, epochs=50, verbose=2)",sql,bash,0.7591390222960896,0.002145975765336464,0.025161681788722943,0.00061219347239618,8.316967298590644e-05,4.694797227434953e-05,0.209766048368745,3.143688111759283e-05,0.0030135237823319307
"# Import libraries  
import numpy as np  
import pandas as pd  
from sklearn.ensemble import RandomForestRegressor  
from sklearn.model_selection import train_test_split  
from sklearn.metrics import mean_squared_error, r2_score  
from sklearn.preprocessing import StandardScaler, LabelEncoder  

# Read data
df = pd.read_csv('housing.csv')

# Pre-process data
X = df.drop('price', axis=1)
numeric_features = X.select_dtypes(include=[np.number])
numeric_features = numeric_features.fillna(-999)
scaler = StandardScaler()
scaled_data = scaler.fit_transform(numeric_features)
X[numeric_features.columns] = scaled_data

# Encode categorical features 
categorical_features = X.select_dtypes(include=['object'])
encoder = LabelEncoder()
categorical_features = categorical_features.apply(encoder.fit_transform)
X[categorical_features.columns] = categorical_features

# Split data 
y = df.price 
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

# Build and train model 
regressor = RandomForestRegressor(n_estimators=100, random_state=0) 
regressor.fit(X_train, y_train)

# Make predictions 
y_pred = regressor.predict(X_test)

# Assess performance 
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred) 
print('Root Mean Squared Error: ', rmse)
print('R2 score: ', r2)",python,python,0.008206741390297796,0.28708527390225297,0.006826922122864363,4.999155205354818e-05,6.813409303456398e-05,6.557929544371146e-05,0.6939616126404429,0.0010224819820543003,0.002713263021555741
"def sort_string():
    # get the string from the user
    string = input('Enter a string: ')

    # convert the string to a list and sort
    sorted_string = sorted(list(string))

    # print the sorted string
    print(''.join(sorted_string))

sort_string()",sql,java,2.198948748101052e-12,5.0074632366751055e-06,1.0889859068659706e-07,0.9979125481473516,2.93566719847479e-13,1.3933134463540825e-10,6.892328465884033e-05,0.0020127767372450462,6.353270932376499e-07
"def isMultipleOf5(num1, num2):
 # Calculate the sum
 sum = num1 + num2
 
 # Check if the sum is divisible by 5
 if sum % 5 == 0:
 return True
 else:
 return False

# Take user input
num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))

# Execute the function
result = isMultipleOf5(num1, num2)

# Print the result
print(""The sum is a multiple of 5:"", result)",python,python,0.0035335484134280085,0.003222556696422543,0.0013845229209985984,0.0028011543728840554,0.04704993457879579,2.720314257946931e-07,0.9373355823694558,0.0037513265706853676,0.0009211020459039827
"import requests
from bs4 import BeautifulSoup

url = ""http://example.com""

html_doc = requests.get(url).text

soup = BeautifulSoup(html_doc, 'html.parser')
headings = soup.find_all('h1')
anchors = soup.find_all('a')

for heading in headings:
 print(heading.text)

for anchor in anchors:
 print(anchor.get('href'))",python,html,1.043836950114398e-08,0.20755228300710055,0.7730223985795497,0.012515764707966703,7.044545021307288e-05,3.280068996266063e-05,0.005555165552782184,0.001212602541948927,3.852903210667491e-05
"sentence_string = 'This is an example sentence with some words.'
word_list = sentence_string.split(' ')

longest_word = sorted(word_list, key=len)[-1]

print(longest_word)

# Output
sentence",python,python,0.002539528104755637,0.014430074943587716,0.19667873774072617,0.015096536158533786,0.007463428277403883,0.00014631829677177487,0.7214794415836301,0.04180330803239302,0.00036262686219795643
"def is_anagram(s, t):
 s_list = list(s)
 t_list = list(t)
 s_list.sort()
 t_list.sort()
 if s_list == t_list:
 return True
 else:
 return False",python,python,0.00010327032668117905,0.0003612427569110305,0.0009216314015761983,3.489907441316644e-06,4.812527284823827e-05,0.00012171480023084667,0.9980456853051805,0.00038046465892641734,1.4375570204324337e-05
"import csv
import json
 
csv_file = open('data.csv', 'r')
json_file = open('data.json', 'w')
 
fieldnames = (""Name"",""Age"",""Profession"")
reader = csv.DictReader(csv_file, fieldnames)
out = json.dumps([r for r in reader])
json_file.write(out)",python,java,8.164868190548268e-05,0.3615468331118992,0.00531075589825977,0.6023146871218436,6.465882177126784e-05,0.00021760386294126158,0.02928608856318154,0.00012782733059797012,0.0010498966075997845
"""""""
Performance tests based on tests/highlevel/high-in-low6-memory.py
See also auth-*py.

- Data overhead is now at ~6.5 ms / MB.
  A lot of the data overhead comes from json.dumps. This is to build mixed cells.
  The rest is from get_hash.
  Pure Python version (with get_hash and dumps) is at 6.3 ms / MB,
  so the rest of the data overhead is fine!

- Database upload overhead is about the same (7 ms / MB) with a flatfile backend
  Database download is almost free.

- A structured cell auth operation is about 10 ms.

- map-list macro evaluation is cheap, 5 ms per (parallel) transformation

- re-translation is about 20 ms per transformation (on top of the macro)

- expression evaluation is about 10 ms + 0.5 ms / MB (of input + output) per transformation
  (speculative relationship!)

- BUT: Non-linear scaling:
  between 100 and 1000 parallel transformations, a x4 slowdown is observed for the last three overheads above.


NOTE: Mixed-to-str conversion is expensive, don't do it!



""""""

import sys
import seamless

import seamless.core.execute
seamless.core.execute.DIRECT_PRINT = True

seamless.database_sink.connect()
seamless.database_cache.connect()
#seamless.set_ncores(2)
#seamless.set_parallel_evaluations(5)

seamless.set_ncores(8) ###
seamless.set_parallel_evaluations(100)  ###

# for the big testing, 20 evaluations
seamless.set_parallel_evaluations(20)  ###

""""""
import logging
logging.basicConfig()
logging.getLogger(""seamless"").setLevel(logging.DEBUG)
""""""

from seamless.highlevel import Context, Cell, Macro
from seamless.highlevel.library import LibraryContainer

import time
import cProfile
cProfile.profiler = cProfile.Profile()

mylib = LibraryContainer(""mylib"")
mylib.map_list_N = Context()
def constructor(ctx, libctx, context_graph, inp, result):
    m = ctx.m = Macro()
    m.graph = context_graph
    m.pins.result = {""io"": ""output"", ""celltype"": ""mixed"", ""hash_pattern"": {""!"": ""#""}}

    ctx.inp = Context()
    ctx.cs_inp = Context()
    inp_prefix = ""INPUT_""
    m.inp_prefix = inp_prefix
    for key in inp:
        c = Cell()
        ctx.inp[key] = c
        c.hash_pattern = {""!"": ""#""}
        inp[key].connect(c)
        ctx.cs_inp[key] = Cell(""checksum"")
        ctx.cs_inp[key] = ctx.inp[key]
        setattr(m, inp_prefix + key , ctx.cs_inp[key])

    def map_list_N(ctx, inp_prefix, graph, **inp):
        #print(""INP"", inp)
        first_k = list(inp.keys())[0]
        length = len(inp[first_k])
        first_k = first_k[len(inp_prefix):]
        for k0 in inp:
            k = k0[len(inp_prefix):]
            if len(inp[k0]) != length:
                err = ""all cells in inp must have the same length, but '{}' has length {} while '{}' has length {}""
                raise ValueError(err.format(k, len(inp[k0]), first_k, length))

        print(""LENGTH"", length)

        from seamless.core import Cell as CoreCell
        from seamless.core.unbound_context import UnboundContext
        pseudo_connections = []
        ctx.result = cell(""mixed"", hash_pattern = {""!"": ""#""})

        ctx.sc_data = cell(""mixed"", hash_pattern = {""!"": ""#""})
        ctx.sc_buffer = cell(""mixed"", hash_pattern = {""!"": ""#""})
        ctx.sc = StructuredCell(
            data=ctx.sc_data,
            buffer=ctx.sc_buffer,
            inchannels=[(n,) for n in range(length)],
            outchannels=[()],
            hash_pattern = {""!"": ""#""}
        )

        for n in range(length):
            #print(""MACRO"", n+1)
            hc = HighLevelContext(graph)

            subctx = ""subctx%d"" % (n+1)
            setattr(ctx, subctx, hc)

            if not hasattr(hc, ""inp""):
                raise TypeError(""map_list_N context must have a subcontext called 'inp'"")
            hci = hc.inp
            if not isinstance(hci, UnboundContext):
                raise TypeError(""map_list_N context must have an attribute 'inp' that is a context, not a {}"".format(type(hci)))

            for k0 in inp:
                k = k0[len(inp_prefix):]
                if not hasattr(hci, k):
                    raise TypeError(""map_list_N context must have a cell called inp.'{}'"".format(k))
                if isinstance(hci[k], StructuredCell):
                    raise TypeError(""map_list_N context has a cell called inp.'{}', but its celltype must be mixed, not structured"".format(k))
                if not isinstance(hci[k], CoreCell):
                    raise TypeError(""map_list_N context must have an attribute inp.'{}' that is a cell, not a {}"".format(k, type(hci[k])))
                if hci[k].celltype != ""mixed"":
                    raise TypeError(""map_list_N context has a cell called inp.'{}', but its celltype must be mixed, not {}"".format(k, hci[k].celltype))

                con = ["".."" + k], [""ctx"", subctx, ""inp"", k]
                pseudo_connections.append(con)
                cs = inp[k0][n]
                hci[k].set_checksum(cs)

            resultname = ""result%d"" % (n+1)
            setattr(ctx, resultname, cell(""mixed""))
            c = getattr(ctx, resultname)
            hc.result.connect(c)
            c.connect(ctx.sc.inchannels[(n,)])
            con = [""ctx"", subctx, ""result""], [""..result""]
            pseudo_connections.append(con)

        ctx.sc.outchannels[()].connect(ctx.result)
        ctx._pseudo_connections = pseudo_connections
        print(""/MACRO"")

        """"""
        import logging
        logging.basicConfig()
        logging.getLogger(""seamless"").setLevel(logging.DEBUG)
        """"""

        import cProfile
        cProfile.profiler.enable()

    m.code = map_list_N
    ctx.result = Cell()
    ctx.result.hash_pattern = {""!"": ""#""}
    ctx.result = m.result
    result.connect_from(ctx.result)


mylib.map_list_N.constructor = constructor
mylib.map_list_N.params = {
    ""context_graph"": ""context"",
    ""inp"": {
        ""type"": ""celldict"",
        ""io"": ""input""
    },
    ""result"": {
        ""type"": ""cell"",
        ""io"": ""output""
    },
}

ctx = Context()
ctx.adder = Context()
sctx = ctx.adder
sctx.inp = Context()
sctx.inp.a = Cell(""mixed"")
sctx.inp.b = Cell(""mixed"")
sctx.a = Cell(""mixed"")
sctx.b = Cell(""mixed"")
sctx.a = sctx.inp.a
sctx.b = sctx.inp.b
def add(a,b):
    print(""ADD"", a[:10])
    return a+b
sctx.add = add
sctx.add.a = sctx.a
sctx.add.b = sctx.b
sctx.result = sctx.add
sctx.result.celltype = ""mixed""
ctx.compute()

ctx.data_a = Cell()
ctx.data_a.hash_pattern = {""!"": ""#""}
ctx.data_b = Cell()
ctx.data_b.hash_pattern = {""!"": ""#""}
ctx.compute()

# Next section is 14.5 secs (if the database is filled), but can be elided to ~0.5s by setting checksum directly (if in flatfile cache).
# Not having a DB at all is also 13 secs, so DB request communication (without upload) doesn't cost much.

repeat = int(10e6)
#repeat = int(5)
#for n in range(1000): # 2x10 GB
#for n in range(100): # 2x1 GB
for n in range(1000):
    a = ""A:%d:"" % n + str(n%10) * repeat
    b = ""B:%d:"" % n + str(n%10) * repeat
    ctx.data_a[n] = a
    ctx.data_b[n] = b
    if n % 20 == 0:
        ctx.compute()
    print(n+1)

ctx.compute()
print(ctx.data_a.checksum)
print(ctx.data_b.checksum)

""""""
ctx.data_a.set_checksum(""d07050610c50de8c810aa1d1e322786ed8932cf6eafa0fbe1f132b2c881af9c2"")
ctx.data_b.set_checksum(""374c02504f89ed0a760b03c3e1fd2258988576b919d763254709b66fc7bfb22e"")
ctx.compute()

""""""

#
### For repeat=10 million, 1000 items
### ctx.data_a.set_checksum(""fa4e6aa7e7edaa6feb036fd5e8c28ffc48575cefc332187552c5be4bf0511af8"")
### ctx.data_b.set_checksum(""2988c44780790e4ffceb1f97391e475f165e316f27a656957282a2998aee9d4f"")

### For repeat=10 million, 200 items
### ctx.data_a.set_checksum(""d07050610c50de8c810aa1d1e322786ed8932cf6eafa0fbe1f132b2c881af9c2"")
### ctx.data_b.set_checksum(""374c02504f89ed0a760b03c3e1fd2258988576b919d763254709b66fc7bfb22e"")

### For repeat=10 million
### ctx.data_a.set_checksum(""983730afb7ab41d524b72f1097daaf4a3c15b98943291f96e523730849cabe8c"")
### ctx.data_b.set_checksum(""46dabc02b59be44064a9e06dd50bc6841833578c2b6339fbc43f090cc17831fa"")

### For repeat=5
### ctx.data_a.set_checksum(""9b4a551a6c1c5830d6070b9c22ae1788b9743e9637be47d56103bcda019a897c"")
### ctx.data_b.set_checksum(""9820f1ab795db7b0d195f21966ecb071d76e9ce2fd3a90845974a3905584eb3e"")
ctx.compute()

""""""
If there is no database (100 x repeat 10e6):
- 13 secs up to here (6.5 ms per MB)
- 0.5 secs to evaluate the macro
- 2.3 secs (2.8 - 0.5) for re-translation (23 ms per transformer)
- 32 secs total time, which leaves 32 - 13 - 0.5 = 18.5 secs for transformation and expression evaluation
  Since 13 secs is required for calculate checksum and decoding, that means ~5.5 secs (55 ms per transformer) overhead
  This is a supplement of 32 ms over just re-translation

If there is no database (100 x repeat 5):
- 2.3 secs up to here (12 ms per auth operation)
- Still 0.5 secs to evaluate the macro
- Still 2.3 secs (2.8 - 0.5) for re-translation (23 ms per transformer, independent of data size!)
- 6.2 secs total time, which leaves 6.2 - 2.3 - 0.5 = 3.5 secs for transformation and expression evaluation
  This is an overhead of 35 ms per transformer, a supplement of just 12 ms over re-translation
  The 20 ms reduction compared to above comes from not handling 2x10 MB of input and 20 MB of output,
  so that's 0.5 ms/MB.

If there is no database (1000 x repeat 5):
- 11.7 secs up to here (12 ms per auth operation). So scales linearly.
- 6.5 secs to evaluate the macro, so scales about linearly
- 98 secs (104.5 - 6.5) for re-translation, which is 4x slower than above  (98 ms)
- 145 secs total time, which leaves 145 - 11.7 - 6.5 = 127 secs for transformation and expression evaluation
  This is an overhead of 127 ms per transformer, which is 4x slower than above (127 ms).
  => So in principle, 90 sconds slower than might be
    - Some 45 secs is await-upon-connection-tasks, this could be optimized?
    - 12 seconds from isinstance is probably unavoidable
    - 9 seconds comes from validate deep structure, that may be unavoidable
    - 5 seconds each from taskmanager.add_task (61k tasks) and asyncio.Task.done (119 million tasks). Avoidable?
  => do maplist-inside-maplist

If the database has not been filled:
- 27.5 secs up to here
If the database has been filled:
- 14 secs up to here: to synthesize the data, and to verify that all is present
  So the raw upload is 13.5 seconds (27.5 - 14); and communication with the DB delays only 1 sec.
- 1.5 secs up to here, with the above elision.

With the database:
- 1.5 secs to evaluate the macro (DB slows down!)
- 5.5 secs for re-translation
- 45.7 secs total time, which leaves 45.7 - 5.5 - 1.5 = 38.5 secs for transformation and expression evaluation
  Compare this to the 18.5 secs w/o database, this is a loss of 20 secs.
  But we have to count the download of the inputs and upload of the results.
  When removing the tfr entries from the database, transformations will be repeated, but no buffers will be uploaded,
  as the sink knows them already.
  This brings total time down to 32 secs, the same as no database!
  So all of the extra overhead is from upload, and download is almost free. (This could be hard disk caching, though)
- 5.5 secs total time with pulling transformation results out of the DB. Again, download is almost free.


Big test with the database (1000 x repeat 10e6):
- Total time 940 secs. Data upload overhead should be ~120 secs, and Seamless data overhead should be ~140 secs.
- 142 secs for re-translation + macro evaluation (142 ms / transformation), a factor 6 slowdown
- 940 - 142 - 120 - 140 = ~540 secs for evaluation
   I.e. 540 ms per transformation. If the same slowdown applies, it would have been 90.
   But we would have expected 30. So a larger slowdown (fewer parallel expressions may have been a cause too)
""""""

ctx.result = Cell()
ctx.result.hash_pattern = {""!"": ""#""}
ctx.compute()

ctx.include(mylib.map_list_N)
ctx.inst = ctx.lib.map_list_N(
    context_graph = ctx.adder,
    inp = {""a"": ctx.data_a, ""b"": ctx.data_b},
    result = ctx.result
)
ctx.compute()

print(""Exception:"", ctx.inst.ctx.m.exception)
print(ctx.result.data)

import pstats
sortby = 'tottime'
ps = pstats.Stats(cProfile.profiler).sort_stats(sortby)
ps.print_stats(40)

t0 = time.time()
""""""
print(""Re-set"")
graph = ctx.get_graph()
ctx_dummy = Context()
dummy_graph = ctx_dummy.get_graph()
ctx.set_graph(dummy_graph)
ctx.translate(force=True)
ctx.compute()
print(time.time()-t0)
print(""Re-eval"")
ctx.set_graph(graph)
""""""
""""""
ctx.translate(force=True)
ctx.compute()
print(time.time()-t0)
""""""",css,typescript,0.011377705225333991,0.03378455949686031,0.024200037613018713,0.001049406355573027,0.09000896622437576,0.0009200503005904975,0.10946240222373349,0.010068680117302593,0.7191281924432117
"def remove_vowels(string):
    # Replace all the vowels with empty string
    without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') 
    return without_vowels

if __name__ == '__main__':
    print(remove_vowels('Hello World!'))",python,python,0.0001580703976229896,0.015492791823256257,0.003153222381883801,0.0014814457412976238,1.53014269527149e-05,7.134800084992519e-05,0.9369946422642534,0.041719008307898986,0.0009141696559841266
"def sort_by_length(strings): 
    return sorted(strings, key=len) 
  
# Test 
strings = ['dog', 'cat', 'mouse', 'elephant'] 
  
print(sort_by_length(strings))",python,python,0.000862681090528465,0.030771926525434513,0.0024097756946344626,0.0001401282437692247,0.0006372006661257599,0.00014493298944207093,0.9608768868800277,0.002647953207817832,0.0015085147022200686
"def max_value(num1, num2, num3):
    max_val = num1
    if num2 > max_val:
        max_val = num2
    if num3 > max_val:
        max_val = num3
    return max_val",python,javascript,0.01501606536728946,0.028669189936872855,0.023477376544767153,0.0015771507814150549,0.46912987494772956,0.031178521420602304,0.4067048146820437,0.0076620361435947824,0.016584970175685183
"def towers_of_hanoi(n, from_rod, aux_rod, to_rod): 
    if n == 1: 
        print(""Move disk 1 from rod"",from_rod,""to rod"",to_rod)
        return
    towers_of_hanoi(n-1, from_rod, to_rod, aux_rod) 
    print(""Move disk"",n,""from rod"",from_rod,""to rod"",to_rod) 
    towers_of_hanoi(n-1, aux_rod, from_rod, to_rod) 
          
# Driver code  
n = 4
towers_of_hanoi(n, 'A', 'B', 'C')",python,python,0.04122719857260414,0.019453924637015462,0.011632313698833134,0.0006283776118719774,0.00871743438793497,0.0025736604361086897,0.8117662313872336,0.007038349722538468,0.09696250954585968
"def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1,10):
        if valid(bo, i, (row, col)):
            bo[row][col] = i

            if solve(bo):
                return True

            bo[row][col] = 0

    return False


def valid(bo, num, pos):
    # Check row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x * 3, box_x*3 + 3):
            if bo[i][j] == num and (i,j) != pos:
                return False

return True",python,matlab,2.6224093059646606e-05,1.2413581300160076e-05,0.00018780190785723177,2.8310555255810445e-06,5.2770915352208665e-06,0.7163695154907976,0.28329915356342394,1.5135810663901077e-05,8.164740583683296e-05
"def multiply_2_numbers(x, y):
    product = 0
    for i in range(y):
        product += x
    return product",python,python,0.0001915310516543024,0.0007994330974479892,0.0005283191634886874,1.6951380416994845e-05,2.270992510802294e-05,0.06431354217781855,0.9338493914779972,0.00010851465821246294,0.00016960706785573763
"def sort_by_attr(objects, attr):
 return sorted(objects, key=lambda item: item[attr])
 
sort_by_attr([{""name"": ""Alice"", ""age"": 20}, {""name"": ""Bob"", ""age"": 21}], ""age"")",css,css,0.0007459680169732203,0.82634681338164,0.0012149412618212715,0.011651815010429903,5.015941918449989e-05,0.0003934070178143935,0.15887120411678052,0.00024697585045453424,0.00047871592490185676
"import numpy as np
from sklearn import tree
 
# example data as an array
X = np.array([[21, 180, 70], [22, 178, 68], [19, 182, 72], 
 [18, 186, 80]])
 
# output label (The label can be any string that you set)
y = np.array(['male', 'male', 'female', 'female'])
 
# decision tree classifier
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)
 
# predict based on the given input
prediction = clf.predict([[24, 185, 85]])
 
print(prediction)",python,typescript,0.45993666926483606,0.02338868986729581,0.0009504967815319689,0.000724069992503634,4.567432474026474e-06,0.0009186813249623477,0.0054436693466099325,1.7687351987111435e-08,0.5086331383024343
"@app.route('/', methods=['GET','POST'])
def read_dataset():
    if request.method == 'POST':
        data = request.form['data']
        unique_items = len(set(data.split()))
        print('Number of Unique items is:',unique_items)
    return render_template('index.html')",python,html,0.006121755550506316,0.13575883807841738,0.8022472786095929,0.00045208914765657184,0.002312208314738576,1.178351872722279e-05,0.04834705997333583,0.0034969279067674506,0.001252058900257735
"#!/bin/bash

# Download and install Python
wget https://www.python.org/ftp/python/${version}/Python-${version}.tgz
tar -xvzf Python-${version}
cd Python-${version}/
./configure
make
make install

# Install modules
pip install ${modules[0]}
pip install ${modules[1]}",bash,bash,1.0,4.123664146827721e-21,2.191962134429567e-20,8.36545951787011e-36,1.648889101891369e-20,1.0040070705432433e-21,2.567519546686649e-22,5.797381778716982e-21,3.4540222849203564e-21
"import string 
import random

def gen_random_string(length): 
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length)) 

print(gen_random_string(10))",sql,sql,8.478124080031695e-11,2.033758307816913e-08,2.4116634544026914e-08,6.789264186792514e-06,2.9095610875864415e-11,1.136873349444684e-08,8.053197513851073e-05,0.9999126215646212,1.2592253279179805e-09
"class Stack:
 
    def __init__(self):
        self.stack = []
 
    # Add to the top of stack
    def push(self, data):
        self.stack.append(data)
 
    # Remove from the top of stack
    def pop(self):
        if self.stack:
            return self.stack.pop()
 
    # Peek top element
    def peek(self):
        return self.stack[-1]
 
    # Check if stack is empty
    def is_empty(self):
        return not bool(self.stack)",python,python,0.0003646512290499673,0.024745367148266605,0.06852750765179426,5.697548700281554e-05,0.0005272763263219699,5.747067420583133e-05,0.8054391402385613,0.09710155232713596,0.003180058917661138
"class Stack: 

    # Constructor 
    def __init__(self): 
        self.stack = [] 

    # Pop operation 
    def pop(self): 
        if len(self.stack) <= 0: 
            return ""Stack is empty"" 
        return self.stack.pop() 

    # Push operation 
    def push(self, data): 
        self.stack.append(data) 

    # Peek operation 
    def peek(self): 
        if len(self.stack) <= 0: 
            return ""Stack is empty"" 
        return self.stack[-1]",python,python,0.00021711275986307778,0.019756854940476565,0.02563161879356078,5.9476927986646806e-05,0.0001921693486879831,6.075700135116224e-05,0.8750118431881209,0.07860068196833021,0.0004694850716227684
"x = 5
def add_two_numbers(x, y):
    z = x + y
    return z

result = add_two_numbers(x, 5)
print(result)",python,javascript,0.0005597745027870831,0.03628115659616578,0.001157104651750077,8.432106394455494e-05,0.4788030637496102,2.315547890890566e-05,0.47773566721125954,0.004173630561918431,0.001182126183655281
"# generate a random prime number
def gen_prime(): 
    # generate a large, prime number 
    p = getPrime(1024)
    q = getPrime(1024)
 
    # compute the modulus
    n = p * q
    return n
 
# generate the private and public key
def gen_keys(n): 
    # generate two distinct large primes
    p = getPrime(1024)
    q = getPrime(1024)
    phi_n = (p - 1) * (q - 1)
 
    # choose an integer e such that e and phi(n) are coprime
    e = random.randrange(1, phi_n)
    g = gcd(e, phi_n)
    while g != 1:
        e = random.randrange(1, phi_n)
        g = gcd(e, phi_n)
 
    # generate private key
    d = modinv(e, phi_n)
 
    # return public and private keypair
    # public key is (e, n) and private key is (d, n)
    return ((e, n), (d, n))
 
# encrypt the message
def encrypt(pk, plaintext):
    # unpack the key into it's components
    key, n = pk
    # convert each letter in the plaintext to numbers based on the character using a^b mod m
    cipher = [(ord(char) ** key) % n for char in plaintext]
    # return the array of bytes
    return cipher
 
# decrypt the message
def decrypt(pk, ciphertext):
    # unpack the key into its components
    key, n = pk
    # generate the plaintext based on the ciphertext and key using a^b mod m
    plain = [chr((char ** key) % n) for char in ciphertext]
    # return the array of bytes as a string
    return ''.join(plain)",sql,java,4.5725477847194433e-07,1.366634078600803e-05,3.5102720955398615e-07,0.9599013355842118,1.4355003133541544e-10,1.5425178783944846e-09,6.480559026905327e-05,3.919494348236567e-06,0.04001546302232891
"def linearSearch(array, element): 
    for i in range(len(array)): 
        if array[i]==element: 
            return i
    return -1

linearSearch([1, 2, 3, 4, 5], 4) # returns 3",python,matlab,5.392192659166259e-09,1.654156284728072e-10,1.167106129088946e-09,1.8511515751467622e-10,1.6305838486067088e-10,0.9999999517947901,4.064751361730191e-08,4.007083671328276e-12,4.808013392553689e-10
"1. Complete pending assignments. 
2. Review algorithms. 
3. Update the portfolio website. 
4. Attend a programming workshop. 
5. Start working on a Machine Learning project. 
6. Read some articles on JavaScript. 
7. Create a web application using Node.js. 
8. Practice solving programming puzzles. 
9. Write a program for sorting an array. 
10. Research on different AI technologies. 
11. Write a blog post on recent web development trends. 
12. Participate in hackathons. 
13. Build a basic chatbot using Python. 
14. Try to implement a Genetic Algorithm. 
15. Learn a new programming language. 
16. Make an interactive website using HTML, CSS and JavaScript. 
17. Update skills by working on an open source project. 
18. Create a machine learning model to classify images. 
19. Work on an Android application.",sql,typescript,4.397534812439174e-09,5.4397707483570854e-11,9.82945711085661e-09,9.387388976971918e-13,1.6652192958419018e-09,5.894097626631077e-09,5.220693765899385e-11,4.510786105086359e-14,0.9999999781061026
"ID = input('User ID: ')

user_name = ID.split('che')[0]
print('User Name: ' + user_name)",python,html,0.04449416682581653,0.36661817711565664,0.3679375380921435,0.011284329542316791,8.896089445157927e-05,0.0009354911860702881,0.19857114051116773,0.008856560116616502,0.001213635715760433
"import json
 
data = {
  ""num1"": ""4"",
  ""num2"": ""3"",
  ""num3"": ""2"",
  ""num4"": ""1""
}
 
for key, value in data.items():
    print(key, value)",css,css,5.395603483612474e-07,0.9940912551489401,1.163352857201356e-05,1.3860423216181395e-08,3.627301917739243e-06,0.005886361126171797,3.957695673821031e-07,5.384751436461703e-06,7.889526229722836e-07
"def max_value(x, y):
 if x > y:
 return x
 else: 
 return y",python,python,0.00022992359103785935,0.0005104764447885187,0.00024555768555762963,1.894672976269567e-05,7.11161051817106e-05,0.00025020154002933963,0.9984854117979268,0.00011848926487102134,6.987684084476475e-05
"def replace_spaces(string):
    return string.replace(' ', '_')

string = 'Hello World'

print(replace_spaces(string))",python,python,5.197554464138669e-07,0.001912399214732449,0.0003872389375617308,0.11256768595660392,4.675570451067846e-10,1.3442264128482145e-07,0.875387927848791,0.009717548620688247,2.6544775977839902e-05
"def extract_nth_element(arr, n):
 nth_element = arr[n // len(arr[0])][n % len(arr[0])]
 return nth_element

arr = [[1,2,3], [4,5,6], [7,8,9]]
n = 5
print(extract_nth_element(arr, n))
# Output: 6",python,python,2.2694477503034085e-05,0.00011178650147570795,5.619817455133825e-06,1.2603085297589573e-06,8.503874781684714e-07,0.02320447612515832,0.976651967522835,2.789537806485969e-07,1.0659057843241405e-06
"import random

for i in range(10):
 ip_address = ""192.168.1."" + str(random.randrange(0, 255))
 print(ip_address)",python,python,0.00012986150222435167,0.00013213323401954527,0.002278625470775812,5.205383539359158e-06,5.459548388026608e-05,0.058828394417160534,0.938180724578318,0.00037769114693547457,1.276878314667279e-05
"class InventoryManager:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        self.items.remove(item)

    def print_inventory(self):
        for item in self.items:
            print(item)",python,python,4.988093778837763e-05,0.03656130003497726,0.24084949468662972,1.7889989910471816e-06,0.0028174791053636058,4.658623492081293e-06,0.6857135627467137,0.0339960833319551,5.751534089081074e-06
"import pandas as pd

# Load the dataset 
df = pd.read_csv('dataset.csv')

# Split the dataset into features and labels
X = df.drop('label', axis=1).values
y = df['label'].values

# Train the model
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(X, y)

# Make predictions on the dataset
predictions = model.predict(X)",python,bash,0.5836229084182667,0.06811579237613755,0.0019993069431672316,1.1319381103793788e-05,0.00026990449750202553,3.6941941002099515e-05,0.31714224758653375,3.786491604865511e-06,0.028797792364682114
"Optimizing the performance of a k-means clustering algorithm in Python primarily involves choosing the right distance-measure to calculate the dissimilarity between data points, selecting an initial set of cluster centroids, avoiding local minima, and selecting an appropriate value of 'k'. Distance-measures such as the Euclidean distance, Manhattan distance, and Minkowski distance can be employed to accurately measure the dissimilarity between data points. The initial set of centroids can be selected randomly or through the 'k-means++' algorithm. Choosing an appropriate 'k' value is important because it affects the quality of the cluster.",typescript,typescript,2.3441163166649735e-10,1.3466002413216873e-09,3.339295349134544e-10,9.860590244777497e-12,1.6103989015990732e-07,1.0409342802828522e-10,8.317511438084216e-11,5.381341991508661e-10,0.9999998363099051
"def sum_range(start, end): 
    sum = 0
    for i in range(start, end+1): 
        sum += i 
    return sum 
  
# Driver Code 
start = 2
end = 5
print(sum_range(start, end)) 
# Result: 14",python,python,3.636732287617787e-05,0.00012724202183291347,0.0001702501114400283,0.00018111011605947554,1.647984360552883e-05,0.00016274109859686518,0.9984158052647663,0.0003726607792506332,0.0005173434415722524
"def capitalize_words(string):
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)",sql,sql,2.1859929122246874e-07,9.688558145866234e-05,0.00015922435220999342,0.009585864033922881,3.5932258453614647e-09,1.9765988880874947e-06,0.007513254305736552,0.982640297828923,2.2751063438784323e-06
"import http.server
import socketserver

PORT = 8000

Handler = http.server.SimpleHTTPRequestHandler

httpd = socketserver.TCPServer(("""", PORT), Handler)

print(""Serving at port"", PORT)
httpd.serve_forever()",python,html,0.008914448614229055,0.008380319282396208,0.5740817895512775,0.00044473437816613183,0.0017264195719376106,5.130415574871836e-05,0.39881231996137184,0.0013671293791945288,0.006221535105678406
"import random
 
def main():
 # number of darts to throw
 n = 1000000
   
 # number of darts that land within the circle
 inside = 0
 
 # use the current system time as the seed
 random.seed()
 
 for i in range(n):
 # generate a random point x between -1 and 1
 x = random.uniform(-1, 1)
 
 # generate a random point y between -1 and 1
 y = random.uniform(-1, 1)
 
 # check to see if it landed within the circle or outside
 if (x*x + y*y <= 1):
 inside +=1
 
 pi = 4 * inside/n
 
 print (""Pi is roughly %f"" % pi)
 
if __name__ == ""__main__"":
 main()",python,typescript,0.0005472770346372026,9.640453269440014e-05,7.795891909747701e-05,9.585348427224435e-05,0.0018079176370772484,7.136934193594092e-05,0.15395289961923136,0.010221432709639449,0.8331288867214146
"def reduce_arr(arr):
    result = 0
    for i in arr:
        result += i
    return result

reduce_arr(arr)",python,matlab,5.057604540160084e-07,0.000294445742587013,1.0642496847410521e-06,1.5593679936931403e-07,9.154987194994825e-07,0.7379173244396561,0.26178267914817543,5.476070557189575e-07,2.3616168681227314e-06
"def int_to_Roman(num):
roma_numerals = {
 1: ""I"",
 4: ""IV"",
 5: ""V"",
 9: ""IX"",
 10: ""X"",
 40: ""XL"",
 50: ""L"",
 90: ""XC"",
 100: ""C"",
 400: ""CD"",
 500: ""D"",
 900: ""CM"",
 1000: ""M"",
}

roman_num = """"
for key, value in sorted(roma_numerals.items(), reverse=True):
 while num >= key:
 roman_num += value
 num -= key

return roman_num",css,matlab,2.3530909771757255e-05,0.00010856363256347102,1.8129493019967454e-05,2.1767079842506832e-07,8.210780937072393e-06,0.9998350811151756,2.666986305611475e-06,1.4394067875398093e-06,2.1600046405596736e-06
"import random

def generateEven():
    even_int = random.randint(0,10)
    if(even_int % 2 == 0):
        return even_int
    else:
        return generateEven()

print(generateEven())",python,python,3.0597172608541396e-06,1.656545971517772e-05,3.0543809614282626e-06,9.796565993791797e-09,2.1342333779296882e-07,4.222748395152727e-05,0.9999315962218925,3.1752246403647063e-06,9.829167434372326e-08
"def double(x):
    return x * 2",python,python,0.002400473238428543,0.009084555859974197,0.005054410581874672,0.00045998733673412905,0.00166191321084125,0.0004294519937736158,0.9765127854388742,0.001464655740546074,0.0029317665989536646
"import calendar

c = calendar.TextCalendar(calendar.SUNDAY)
str = c.formatyear(2019, 2, 1, 1, 3)
print (str)",python,python,0.006239826875220774,0.01140315546956062,0.017224973298419474,0.000497439358700379,0.013037085585367019,0.0013895822685047374,0.9455099256924786,0.002955187826318644,0.0017428236254296765
"# Python code

# input list
numbers = [3, 15, 6, 5, 2, 8, 7]

# set maximum number to -infinity
max_num = float(""-inf"")

# set second highest number to -infinity
second_highest = float(""-inf"")

# loop through list of numbers
for num in numbers:
  # check if num is greater than current maximum number
  if num > max_num:
    # set second highest to current maximum number
    second_highest = max_num
    # set current maximum number to num
    max_num = num
  # check if num is greater than second highest number, but smaller than current maximum number 
  elif num > second_highest:
    # set second highest number to num
    second_highest = num
  
# print the output
print(f'The two numbers are {max_num} and {second_highest}')",python,python,0.004914636508291468,3.730703415020325e-05,0.01020585410480643,0.027685784631544832,0.01628577182363459,0.2832416946627383,0.477328923089141,0.011603818713636992,0.16869620943205613
"import numpy as np
sequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)
def calculate_mean(sequence):
    return np.mean(sequence)",python,python,0.2016397756653251,0.01791114678955096,0.004326341413712173,0.0002401418035087142,0.0001550115325768727,0.000685442362468351,0.769790637232821,0.00018278292674390835,0.005068720273292848
"import requests
import json

def get_lat_long_from_address(address):
    """"""
    Converting a given address into its equivalent latitude and longitude coordinates.
    """"""
    try:
        url = 'https://maps.googleapis.com/maps/api/geocode/json?address=%s' % address
        response = requests.get(url).json()

        geography = response['results'][0]['geometry']
        latitude = geography['location']['lat']
        longitude = geography['location']['lng']
        return latitude, longitude
    except:
        return None

lat, lng = get_lat_long_from_address(""Tokyo Tower, Tokyo"")
print(""Latitude: %.06f \t Longitude: %.06f"" % (lat, lng))",python,css,6.780185391647057e-07,0.7944419976172307,0.004079517098111387,0.017576511056334756,0.0007172177757641052,0.0001928893433183772,0.17824896990025468,0.0031487125922570127,0.001593506598189952
"sentence = ""The cat is playing with a ball.""
words = sentence.split()

verbs = []
nouns = []

for word in words:
  if word in [""is"", ""playing""]:
    verbs.append(word)
  elif word in [""The"", ""cat"", ""a"", ""ball""]:
    nouns.append(word)

print(""Verbs:"", verbs)
print(""Nouns:"", nouns)",python,python,0.06153453151831894,0.11770166158987924,0.04533249979070416,0.00020020899490161628,0.02268670631064449,0.10050357533333998,0.5029550600630254,0.13960418000139474,0.009481576397791458
"import nltk 
import random 
from nltk.corpus import movie_reviews 

# Generate a set of documents
documents = [(list(movie_reviews.words(fileid)), category) 
             for category in movie_reviews.categories() 
             for fileid in movie_reviews.fileids(category)]

# Shuffle the documents
random.shuffle(documents)

# Generate features
all_words = []
for w in movie_reviews.words():
   all_words.append(w.lower())

all_words = nltk.FreqDist(all_words) 

word_features = list(all_words.keys())[:3000] 

# Function to create a dictionary of features for each review in the list documents
# The keys are the words in word_features
# The values of each key are either true or false for whether that feature appears in the review 
def find_features(document):
 features = {}
 words = set(document)
 for w in word_features:
     features[w] = (w in words)
 
 return features

#Find the features for all the documents
featuresets = [(find_features(rev), category) for (rev, category) in documents] 

#Create the training set using the featuresets
training_set = featuresets[:1900] 

# Create the testing set using the featuresets
testing_set = featuresets[1900:] 

# Train the classifier
classifier = nltk.NaiveBayesClassifier.train(training_set)

#Test the classifier and print the accuracy
print(""Classifier accuracy percent:"",(nltk.classify.accuracy(classifier, testing_set))*100)",python,typescript,0.0005553587993331547,0.02647644319415648,0.0031830307070510244,2.1895112045113275e-06,0.02824642694474572,0.0011076041802384657,0.00322471657169553,0.006290523261310168,0.9309137068302649
"def prime_factors(n):
    factors = []
    i = 2
    while n > 1:
        while n % i == 0:
            factors.append(i)
            n /= i
        i += 1
    return factors",python,python,0.006899922995370215,0.0268289293038506,0.022598527237141484,0.006286087263411883,0.005798831574981157,0.0555572394258001,0.8465939870850729,0.004033380534193029,0.025403094580178653
"import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest

# Load the data
data = pd.read_csv(""data.csv"")

# Create training and test sets
x_train, x_test = train_test_split(data, test_size=0.2)

# Train the Isolation Forest
isolation_forest = IsolationForest(random_state=0).fit(x_train)

# Make predictions
preds = isolation_forest.predict(x_test)

# Detect and mark anomalies
anomalies_index = np.where(preds == -1)[0]",sql,typescript,0.0026157748870909835,0.076775517887075,0.00508397675150578,5.808519051269959e-06,2.312195263729063e-05,2.9715267203981847e-05,0.2656683396212499,0.0005771716778734405,0.6492205734363122
"#import necessary modules
import requests
from bs4 import BeautifulSoup

#make the request and get the HTML
r = requests.get('https://www.example.com')
soup = BeautifulSoup(r.text, 'html.parser')

#find the product titles
product_titles = soup.find_all('h2', class_='product-title')

#initialize a list to store the titles
titles = []

#loop through the product titles and store them in the list
for title in product_titles:
 titles.append(title.text)

#find the product prices
product_prices = soup.find_all('span', class_='product-price')

#initialize a list to store the prices
prices = []

#loop through the product prices and store them in the list
for price in product_prices:
 prices.append(price.text)

#print the titles and prices
for i in range(len(titles)):
 print(f'{titles[i]}: {prices[i]}')",python,css,2.0757078911795814e-06,0.8340425173345762,0.10287534883180989,0.0003775553078908365,0.027888478637671524,0.00017280190962014525,0.00797888431197539,0.001408302400417372,0.025254035558147342
"def intersection(list1, list2):
    return [value for value in list1 if value in list2]

list1 = [1, 2, 3 ,4 ,5]
list2 = [3, 4, 5, 6 ,7]

print (intersection(list1, list2))",python,matlab,2.6515938387852797e-08,3.3341075906989646e-06,2.2848616936416175e-07,1.0038155031418685e-08,3.894151905655283e-08,0.9999961793768926,9.491150007639852e-11,7.204311291543136e-08,1.1039571055370012e-07
"def string_lengths(arr):
    lengths = [len(s) for s in arr]
    return lengths

result = string_lengths(['hello', 'world'])
print(result)",python,python,0.040725588765874086,0.0014083814452691423,8.453187584664501e-05,2.0566001725200528e-13,0.0009508231686208719,0.02120325439385089,0.9355996845736934,1.1202835945673659e-05,1.653294069367833e-05
"def merge_list(list1, list2):
    merged_list = list1 + list2
    final_list = list(dict.fromkeys(merged_list))
    return final_list

list1 = [""apple"",""orange"",""banana""]
list2 = [""cherry"",""pineapple"",""apple""]

result = merge_list(list1, list2)
print(result) # Output: [""apple"", ""orange"", ""banana"", ""cherry"", ""pineapple""]",python,python,0.0002245138360814674,0.02779009798046304,0.0008435593442037855,4.039449219812287e-05,0.00012667685623663814,2.926162835959558e-05,0.9705028462503813,0.0002568606003211029,0.000185789011754926
"def render_ascii_table(columns, rows):
    col_width = 10

    # Create array of column labels
    header_row = [('{:^' + str(col_width) + '}').format(label) for label in columns]

    # Create divider row
    divider_row = ['-' * col_width] * len(columns)

    # Create row of data
    data_rows = [[('{:^' + str(col_width) + '}').format(data) for data in row] for row in rows]

    # Create table
    table = [header_row] + [divider_row] + data_rows

    # Render table
    for row in table:
        print('|'.join(row))

render_ascii_table(['col1', 'col2', 'col3', 'col4'], [
    ['data1', 'data2', 'data3', 'data4'],
    ['data5', 'data6', 'data7', 'data8'],
    ['data9', 'data10', 'data11', 'data12']
])",css,python,0.0019190014305848152,0.15015464760681005,0.04032596370554203,0.00020721615561673857,0.01944912779418988,0.008738569711933576,0.5627437921694192,0.1251625330256548,0.09129914840024884
"Maths = 85
English = 70
Science = 90

# Calculate the average 
average = (Maths + English + Science) / 3

# Check the grade
if average >= 80:
    grade = 'A'
elif average >= 70:
    grade = 'B'
elif average >= 60:
    grade = 'C'
elif average >= 50:
    grade = 'D'
else:
    grade = 'F'

# Print the grade
print(grade)",python,css,0.020258793166143145,0.5089533934825939,0.025705442165041035,0.0010012946782402324,0.0134020828910251,0.019107880606554925,0.36441278722713494,0.0062080408111277515,0.040950284972138935
"#!/usr/bin/env python

text = ""Hello World this is a Test""
words = text.split()

for word in words:
 print(word)",python,bash,0.9999981257970453,2.3451304652940086e-08,1.5547230074317292e-07,1.7469074654223234e-17,1.0282166282432404e-07,1.2801606017256154e-09,9.620600640062293e-07,6.284376862235756e-07,6.797756033863626e-10
"for i in [1,2,3,4,5]:
    print(i)",python,matlab,7.57981419629807e-07,8.038253423770906e-06,7.343030695615063e-06,3.806882979393652e-08,4.608373399719722e-07,0.9985452119312823,0.001427610686059598,9.005344700315455e-06,1.5338662487897521e-06
"def minimum_coins_needed(amount):
    denominations = [1, 2, 5, 10]
    result = [0 for _ in range(amount+1)]
 
    # Compute the result for amount = 0
    result[0] = 0 
    
    # Iterate over all amount from 1 to desired
    for i in range(1, amount+1): 
        # Initialize an inner loop to maximum value (amount)
        temp_min = float('Inf')
        for j in range(0, len(denominations)): 
            # Check if coins are less than amount
            if denominations[j] <= i:
                temp_min = min(temp_min, result[i-denominations[j]])
        # Store the final result in amount's index
        result[i] = temp_min + 1
        
    return result[amount]",python,python,0.0078930759337423,0.00981090311332657,0.00011641011567295923,2.6725435190608304e-05,0.003438640625584297,0.43724332106714514,0.5339684390131357,0.0014642275871883546,0.006038257109014018
"import string
import random

chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation

def generate_password(size=8, chars=chars):
 return ''.join(random.choice(chars) for _ in range(size))

print(generate_password())",sql,sql,2.5414101227075403e-12,8.177578537890951e-08,1.4406083408736546e-07,0.06027261931550276,2.7081668888309885e-14,3.6048812264163644e-09,1.8186595943492984e-05,0.939708957292945,7.351539420538905e-09
"class Customer:
    '''
    A class used to store information about a Customer. 
    Attributes:
    name (str): the customer's name
    address (str): the customer's address
    phone_number (str): the customer's phone number
    email (str): the customer's email
    '''
    
    def __init__(self, name, address, phone_number, email):
        self.name = name
        self.address = address
        self.phone_number = phone_number
        self.email = email

    def display_info(self):
        print('Name: {}\nAddress: {}\nPhone Number: {}\nEmail: {}'.format(self.name, self.address, self.phone_number, self.email))",python,python,0.0010855114481842702,0.020516931264649967,0.031264654731270686,0.014887436676168547,4.6830698302893324e-05,8.322548778554443e-06,0.91618520365063,0.014092474143494278,0.0019126348385208995
"def find_all_occurrences(string, substring): 
    i=-1 
    indices = [] 
    while True: 
        i = string.find(substring, i + 1) 
        if i == -1: 
            break 
        indices.append(i) 
    return indices 

string = 'Python exercises, PHP exercises, C# exercises'
substring = 'exercises'

print(find_all_occurrences(string, substring))",python,java,1.74275120528649e-07,7.680812925904576e-05,1.7283601928149807e-05,0.9955369238454703,1.73712544296926e-10,2.3758786570980804e-06,0.00419409943474006,0.0001629992181316817,9.335442980597096e-06
"def loop_through_list(items):
    """"""Iterates through a list of items and prints each one""""""
    for item in items:
        print(item)",python,javascript,0.0005641800647853872,0.023258562137182415,0.0027668878901693267,1.961029732874662e-06,0.7240220769911099,0.0004940047392911313,0.24824670586958986,0.0006068356994066561,3.8785578732405554e-05
"class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

    def circumference(self):
        return 2 * 3.14 * self.radius",python,python,0.00015481471683502425,0.0028727185231959135,0.013572754978039234,2.228182769605668e-05,7.205002155606157e-05,1.30795524316729e-05,0.9713205865236753,0.011665865534102579,0.00030584832246829556
"# coding: utf-8

import sqlite3
import os
import time

import bottle
from bottle import default_app, route, view
from bottle import request
from bottle_utils.i18n import I18NPlugin
#from bottle_utils.i18n import lazy_gettext as _

#todo: refactor so that there is no error in Py3 local deployment and testing
import input_number as ip
from dbhelper import initialize_database
import hashlib

MOD_PATH = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.abspath(os.path.join(MOD_PATH, '..', '..', ""lagesonr.db""))

if not os.path.exists(DB_PATH):
    initialize_database(DB_PATH)

lagesonrdb = sqlite3.connect(DB_PATH)

#todo: populate list dynamically based on available/selected translations
LANGS = [
    ('de_DE', 'Deutsch'),
    ('en_US', 'English'),
]
# ('ar_AR', 'Arab'),
DEFAULT_LOCALE = 'en_US'

@route('/')
@view('start_page')
def index():
    """"""1.Seite: Helfer steht am LaGeSo und gibt Nummern ein [_____] """"""
    return {'entered': []}

@route('/', method='POST')
@view('start_page')
def do_enter():
    numbers = request.forms.get('numbers')
    timestamp = time.asctime()
    numbers = [num.strip() for num in numbers.split('\n')]
    result_num = []

    #todo: refactor fingerprint in extra function for better testing
    usr_agent = str(request.environ.get('HTTP_USER_AGENT'))
    usr_lang = str(request.environ.get('HTTP_ACCEPT_LANGUAGE'))
    usr_ip = str(request.remote_addr)

    usr_fingerprint = usr_agent + usr_lang + usr_ip
    usr_hash = hashlib.md5(usr_fingerprint.encode(""utf-8"")).hexdigest()

    with lagesonrdb as con:
        cur = con.cursor()
        for num in set(numbers):
            if ip.is_valid_number(num) and ip.is_ok_with_db(
                    num) and ip.is_valid_user():

                num = str(num).capitalize()
                query = 'SELECT NUMBER FROM NUMBERS WHERE NUMBER=""%s"" AND FINGERPRINT=""%s""' % (num, usr_hash)
                if len(list(cur.execute(query))) == 0:

                    insert = 'INSERT INTO NUMBERS(NUMBER, TIME, PLACE, USER, FINGERPRINT) VALUES (""%s"", ""%s"", ""-"", ' \
                             '""-"", ""%s"")' % (num, timestamp, usr_hash)
                    cur.execute(insert)
                    result_num.append(num)
                else:
                    result_num.append(""ALREADY ENTERED BY - %s - %s - %s: %s"" % (usr_ip, usr_agent, usr_lang, num))
                    #return {'entered': [""already before - by you!""], 'timestamp': timestamp}
            else:
                result_num.append(""INVALID INPUT: %s"" % num)

    return {'entered': result_num, 'timestamp': timestamp}


@route('/query')
@view('query_page')
def query():
    return {'result': '-', 'timestamp_first': '-','timestamp_last': '-', 'n': '-'}


@route('/query', method='POST')
@view('query_page')
def do_query():
    number = request.forms.get('number')
    timestamp_first = '-'
    timestamp_last = '-'
    n = '0'

    if ip.is_valid_number(number) and ip.is_ok_with_db(
            number) and ip.is_valid_user():

        with lagesonrdb as con:
            cur = con.cursor()

            number = str(number).capitalize()
            query = 'SELECT TIME FROM NUMBERS WHERE NUMBER=""%s"" ORDER BY TIME' % number
            result = list(cur.execute(query))
            n = len(result)
            if n > 0:
                timestamp_first, timestamp_last = result[0][0], result[-1][0]
            else:
                timestamp_first = 'NOT FOUND'
    else:
        timestamp_first = 'INVALID INPUT'

    return {'result': number, 'timestamp_first': timestamp_first,
                'timestamp_last': timestamp_last, 'n': n}


@route('/about')
@view('about')
def about():
    pass

@route('/impressum')
@view('impressum')
def impressum():
    pass

# findet templates im gleichen Verzeichnis
bottle.TEMPLATE_PATH.append(MOD_PATH)
app = default_app()
application = I18NPlugin(app, langs=LANGS, default_locale=DEFAULT_LOCALE,
                         domain='messages',
                         locale_dir=os.path.join(MOD_PATH, 'locales'))
",css,sql,0.0005043709937140742,0.005004485934662031,0.0012184416622405211,0.00015523538093896474,0.0013346098727760357,0.00813085564571287,0.019622128430529562,0.9623711841172595,0.0016586879621665537
"class Student:
    def __init__(self, student_id):
        self.student_id = student_id
        self.grades = {}

    def set_grade(self, subject, grade):
        self.grades[subject] = grade

    def get_grade(self, subject):
        return self.grades[subject]

    def get_average_grade(self):
        total = sum(self.grades.values())
        subjects = len(self.grades)
        return total / subjects",python,python,0.00031206839981150225,0.0541003349926325,0.07947790211315289,4.5071367455164965e-05,8.056228870235394e-05,1.5802666720554774e-05,0.7685287881925446,0.09629856226770668,0.0011409077112736678
"def encode_message(message, a, b):
    encoded_message = """"
    for char in message:
        # encode each character
        x = (ord(char) - 97) * a + b
        # wrap around if x is greater than 26
        x = x % 26
        # convert back to character
        encoded_message += chr(x + 97)
    return encoded_message

# Main
if __name__ == ""__main__"":
    message = ""Hello world""
    a = 3  # a and b must be relatively prime
    b = 5
    print(encode_message(message, a, b))  # Khoor zruog",python,python,0.003091634522417486,0.03976790120104572,0.006170862004300855,2.6868688312407435e-06,0.020224093001327815,0.002192018742348393,0.8707657886010215,0.011797973948191771,0.04598704111051528
"""""""
Design a function in Python to generate a random password
""""""

import string
import random

def generate_password(length=16):
    # list of possible characters for the password
    characters = string.ascii_letters + string.punctuation + string.digits
    
    # generate a random password
    password = ''.join(random.choice(characters) for i in range(length))
    
    # return the random password
    return password

# generate a random password
random_password = generate_password()

# print the random password
print(random_password)",sql,sql,1.0680337329197337e-08,1.4993332477643628e-07,1.4076891444861108e-07,1.0886261765811643e-06,8.547750971738067e-08,2.5677733217877727e-08,2.321479056866184e-05,0.9999747287913682,5.552540668982459e-07
"def solve_sudoku(board): 
 
    find = find_empty_location(board) 
    if not find: 
        return True
    else: 
        row, col = find 
  
    for i in range(1,10): 
        if is_valid(board, i, (row, col)): 
            board[row][col] = i 
  
            if solve_sudoku(board): 
                return True
  
            # Undo the current cell for backtracking 
            board[row][col] = 0
  
    return False",python,python,0.0016962501280146994,0.005433305056380005,0.0033271041049504945,6.458470597693948e-05,0.0003856864102560638,0.07242766116430092,0.9152392669274687,0.0005481590617659027,0.0008779824408861733
"from django.shortcuts import render
from django.http import JsonResponse
from django.core.paginator import Paginator

# Create your views here.
def get_user_records(request):
    page_num = request.GET.get('page', 1)
    page_size = int(request.GET.get('page_size', 10))

    users = User.objects.all().order_by('user_id')
    paginator = Paginator(users, page_size)
    page_data = paginator.page(page_num)
    response_data = {
        'data': [
            {
                'user_id': user.user_id,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'age': user.age,
                'email': user.email
            } for user in page_data
        ]
    }
    return JsonResponse(response_data)",css,bash,0.9590554866166153,0.04062009986014375,1.1253742841227846e-06,2.5177187260512226e-06,4.2105324338981285e-06,1.2822373141983527e-06,0.00026835768149409043,7.625511861270664e-06,3.929446712731705e-05
"def maxMinDifference(arr):
    return max(arr)-min(arr)

result = maxMinDifference([3, 4, 7, 8, 12])
print(result)",python,python,3.537519567134057e-06,0.000267522533069614,4.703522038251268e-06,5.862158481276114e-07,1.7682195174994183e-06,0.00012611695119600077,0.9995898727575762,2.389338899516857e-06,3.5029422877621324e-06
"def larger_than_num(nums, num_to_compare):
  count = 0
  for num in nums:
    if num > num_to_compare:
      count += 1
  
  return count

print(larger_than_num(nums, num_to_compare)) # 3",python,matlab,1.464321358630091e-07,9.305639126992641e-10,3.4164387797324887e-07,1.020543944098223e-08,6.656453095112437e-08,0.993252672232964,0.006746126494217153,4.636949177258208e-07,1.7180135280513838e-07
"for i in range(10, 0, -1):
    print(i)",python,matlab,5.9656415838442685e-12,9.24345959966392e-13,1.3906781818842273e-10,2.382126516031233e-13,1.6979731962244342e-13,0.9998352021961047,0.00016479765204655716,3.2524040295583e-14,5.450371823541461e-12
"class Fraction:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __add__(self, other):
        return Fraction(self.a * other.b + other.a * self.b, self.b * other.b)
    
    def __sub__(self, other):
        return Fraction(self.a * other.b - other.a * self.b, self.b * other.b)
   
    def __mul__(self, other):
        return Fraction(self.a * other.a , self.b * other.b)",python,python,0.000915807375842714,0.020640361314302736,0.033572338383882974,4.3715314254988064e-05,0.004814074959486151,5.3308346182668766e-05,0.8745740368447684,0.06504713305444948,0.0003392244068298972
"def evaluate_expr(expr):
 # Reverse the expression 
 expr = expr[::-1] 
  
 # Stack to store integer values. 
 values = [] 
  
 # Stack to store operators. 
 ops = [] 
  
 # Traverse the given expression. 
 i = 0
 while i < len(expr): 
   # Current character is a whitespace, skip it. 
   if expr[i] == ' ': 
     i += 1
     continue
   # Current character is an opening  
   # brace, push it to 'ops' 
   elif expr[i] == '(': 
     ops.append(expr[i]) 
   # Current character is a number, push  
   # it to stack for numbers. 
   elif expr[i].isdigit(): 
     val = 0
     # There may be more than one 
     # digits in number. 
     while (i < len(expr) and
            expr[i].isdigit()): 
       val = (val * 10) + int(expr[i]) 
       i += 1
     values.append(val) 
   # Closing brace encountered, solve  
   # entire brace. 
   elif expr[i] == ')': 
     while (not ops[-1] == '('): 
       val2 = values.pop() 
       val1 = values.pop() 
       op = ops.pop() 
  
       values.append(str(eval(val1 + op + val2))) 
     # pop opening bracket. 
     ops.pop() 
   # Current character is an operator. 
   else: 
     # While top of 'ops' has same or  
     # greater precedence to current  
     # token, which is an operator. 
     # Apply operator on top of 'ops'  
     # to top two elements in values stack. 
     while(len(ops) != 0 and
           not ops[-1] == '(' and
           not isHigherPrecedence(ops[-1], expr[i])): 
  
       val2 = values.pop() 
       val1 = values.pop() 
       op = ops.pop() 
  
       values.append(str(eval(val1 + op + val2))) 
     # Push current token to 'ops'. 
     ops.append(expr[i]); 
  
   i += 1
  
 # Entire expression has been parsed at this 
 # point, apply remaining ops to remaining 
 # values. 
 while len(ops) != 0: 
     val2 = values.pop() 
     val1 = values.pop() 
     op = ops.pop() 
  
     values.append(str(eval(val1 + op + val2))) 
  
 # Top of 'values' contains result, return it. 
 return values[-1]

def isHigherPrecedence(op1, op2): 
 if (op1 == '+' or op1 == '-') and (op2 == '*' or op2 == '/'): 
   return False
 else: 
   return True

if __name__ == ""__main__"": 
 expr = ""2-(8-3)""
 print(evaluate_expr(expr))",python,typescript,0.00042126174367566866,0.05353178530241937,0.006599551073284056,0.001746241953728748,0.011793757865209031,0.0016276448436845453,0.16112493175042508,0.008160680211970318,0.7549941452556032
"def identify_characters(s): 
    characters = []
        
    for char in s:
        if char not in characters:
            characters.append(char)
        
    return characters
 
print(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']",python,python,0.001472043045579715,0.019393820836262652,0.00673726621556649,4.561996613688475e-05,0.0008172897914635076,0.17490872280107264,0.760963279265941,0.034073151183484536,0.0015888068944925951
"import ast
import logging

from pygount import SourceAnalysis

# Logging configuration
logging.basicConfig(level=logging.INFO)

# Input code
code = """"""
def find_bugs(code):
    
    analyzed_code = SourceAnalysis.from_string(language='python', text=code)
    bugs = []

    for function in code: 
        if 'fopen' in function.body:
            bugs.append('Got a potential vulnerability!')

    return bugs
""""""

# Parsed syntax tree
tree = ast.parse(code)

# Find all functions
for node in ast.walk(tree):
    if isinstance(node, ast.FunctionDef):
        # Get the code for the function
        function_code = ast.get_source_segment(code, node)
        bugs = find_bugs(function_code)
        for bug in bugs:
            logging.warning(bug)",python,javascript,0.04107874580452353,0.002631386779757617,0.001779038929556155,1.186517469015861e-05,0.8273710534734091,0.005899475585380249,0.0003214076417058282,7.323961065637999e-05,0.120833787000321
"def words_count(text):
 words_dict = {}
 for word in text.split(' '):
 if word in words_dict:
 words_dict[word] += 1
 else:
 words_dict[word] = 1
 return words_dict

words_dict = words_count(""A quick brown fox jumps over the lazy dog"")
print(words_dict)",python,python,0.039339889070664075,0.30929606556002703,0.019649439904904642,0.00033681010173332136,0.00465914158637949,0.021300446301416216,0.5815461250748123,0.005902902022855404,0.017969180377207582
"def max_rect_area(matrix):

    max_area = 0

    for row in range(len(matrix)):
        for col in range(len(matrix[0])):

            if matrix[row][col] == 0: # if current element is 0, skip
                continue

            # calculate the maximum possible rectangle area
            # considering (row, col) as one of the vertices 
            min_column = len(matrix[0])
            for r in range(row, len(matrix)):
                min_column = min(min_column, matrix[r][col])

            # calculate area of the rectangle 
            # composed of 1s belonging with these limits 
            area = min_column*(r - row + 1)

            # update maximum area so far 
            max_area = max(max_area, area)

    return max_area

# Main Program 
matrix = [
    [1, 1, 0, 0],
    [1, 1, 1, 1],
    [1, 1, 1, 1],
    [0, 1, 1, 0]
]
result = max_rect_area(matrix) 

print(""The maximum rectangle area is {:d}"".format(result))",css,python,0.00025690813836475436,0.00012447601009736835,5.773292514462991e-05,3.3070026880951234e-06,3.7413307767889904e-05,0.00012390898893699674,0.9981097560542449,0.00035897365529542367,0.0009275239174599525
"import os
import shutil

# define a function to move file to designated folder 
def move_file (src_path, dest_path):
    shutil.move(src_path, dest_path)
    print(""File moved from"", src_path, ""to"", dest_path)

# define source and destination 
src_dir = ""./Unfiled_Documents/""
dest_dir = ""./Invoices_and_Receipts/""

# iterate through the files
for root, dirs, files in os.walk(src_dir):
    for file in files: 
        # check the file type 
        filename, file_extension = os.path.splitext(file)
        if file_extension in ['.pdf', '.odt', '.docx']:
            # move the file 
            src = os.path.join(root, file)
            dest = dest_dir + 'invoice_or_receipt' + file_extension
            move_file(src, dest)",sql,sql,0.02124204709655407,0.03717172688116293,0.000729758695168715,1.396613687260794e-07,0.036979981136407256,0.0006990358116693784,0.0048913502757012,0.8737420155145988,0.02454394492736894
"def remove_nonalphanum(text):
  new_string = """"
  for char in text:
    if char.isalnum():
      new_string += char
  return new_string

cleaned_string = remove_nonalphanum(text)
print(cleaned_string) #prints ""ThisisaStringwithymbols""",python,python,0.002500091354569082,0.012536314619560666,0.0006374267502896699,3.63549352854813e-06,0.0003666415679086221,0.0026334839041233246,0.9726138618210743,0.00584100234876696,0.002867542140178539
"# Initializing the list
list1 = [5, 6, 10, -9, 3, 21]

# Maximum and Minimum in a List

max = list1[0]
min = list1[0]

# Print all the list elements
for i in range(0, len(list1)):
    if list1[i]>max:
        max = list1[i]
    if list1[i]<min:
        min = list1[i]

print(""The max value is:"", max)
print(""The min value is:"", min)",python,matlab,0.0007907617983454922,0.0064139301774577,0.003677283693770915,7.260699405962513e-05,0.002373095364367057,0.8181706722385964,0.14339321682209089,0.011691450381051254,0.01341698253026068
"class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

    def get_area(self):
        s = (self.side1 + self.side2 + self.side3) / 2.0
        area = (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5
        return area

if __name__ == '__main__':
    triangle = Triangle(3, 4, 5)
    print(triangle.get_area())",python,python,0.0007086071303290217,0.0204097107019713,0.0644110850520919,8.076715807190662e-05,0.0003735603137594823,0.0001645317832381718,0.8722282949115684,0.03996926340684732,0.0016541795421224049
"names = [""Taylor"", ""Hilton"", ""John"", ""Jack"", ""Justin""]

search_input = input(""Enter a name to search: "")

filtered_names = []
for name in names:
 if search_input in name:
  filtered_names.append(name)
print(filtered_names)",python,java,2.260961132056824e-06,3.1361820172373254e-05,1.819178477810896e-05,0.9995852314181511,6.920012567734092e-11,0.0003062447307901433,2.5188139481133247e-05,6.877662399590564e-07,3.083331005480293e-05
"def sort_list_of_tuples(list_of_tuples, key, reverse=False):
    '''This function sorts a list of tuples based on the specified key
    in ascending or descending order

    Parameters: 
       list_of_tuples (list): list of tuples
       key: the index of the tuple that should be used to sort
       reverse (bool): flag to decide sorting order, 
                        False for ascending, True for descending

    Returns:
        list: A sorted list of tuples
    '''

    # sort using specified key
    sorted_list = sorted(list_of_tuples, key=lambda x: x[key], reverse=reverse)

    return sorted_list

list_of_tuples = [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]
key = 2

# Sort in ascending order
sorted_list_asc = sort_list_of_tuples(list_of_tuples, key, reverse=False)

# Sort in descending order
sorted_list_desc = sort_list_of_tuples(list_of_tuples, key, reverse=True)

print(""Sorted list in ascending order:"", sorted_list_asc)
print(""Sorted list in descending order:"", sorted_list_desc)",python,javascript,3.859611078327916e-05,0.0003620476860062517,0.0002090787762816142,8.093568847587995e-06,0.9888656979705677,0.000601049162418805,0.00882044714630323,0.0002016133742247172,0.0008933762045666973
"import random
import string

def  generate_password():
    chars = string.ascii_letters + string.digits
    size = 8
    return ''.join(random.choice(chars) for x in range(size))

print(generate_password())",sql,sql,6.204420145985873e-12,9.76700473855543e-09,4.4894868787437334e-08,8.755852702256554e-05,9.921255309240854e-14,2.916213578787474e-09,4.0115823835153425e-06,0.9999083709322397,1.373963702911761e-09
"# Python program to find all possible subset sums

def find_subset_sums(arr):
    sums = set()
    for i in range(2**len(arr)):
        csum = 0
        for j in range(len(arr)):
            if i & (1<<j):
                csum += arr[j]
        sums.add(csum)
    return sums",python,matlab,0.11502922210007284,1.1218084460105893e-05,2.7861611323410435e-05,1.9652149059467508e-06,3.256098028524013e-06,0.755771073944483,0.1291299906943504,2.2771839880926074e-05,2.6404124949804965e-06
"d = {'Name': 'John', 'Age': 20, 'Location': 'New York'}

def print_dict(d):
    formatted_str = ''
    for key, value in d.items():
        if formatted_str != '':
            formatted_str += ', '
        formatted_str += '{}={}'.format(key, value)
    print(formatted_str)

print_dict(d) # Output: Name=John, Age=20, Location=New York",css,css,3.4187435769925024e-05,0.9991850342723737,0.00014453403328925932,1.8199300265611196e-05,5.333284034549794e-07,0.0006116192979189819,1.6072650242489818e-06,3.4288407091531447e-06,8.562262454433789e-07
"import requests
 
url = 'http://example.com'
 
r = requests.get(url)
html = r.text
 
with open('page.html', 'w') as f:
 f.write(html)",python,html,8.989634557923042e-16,3.1811804634463975e-06,0.9952996343968178,0.004696614466941745,2.562613381334913e-09,3.1698308548458716e-11,2.626963316297345e-07,4.689958634345959e-09,2.9997517406809576e-07
"my_dict = {'Apple':1, 'Strawberry':4, 'Banana':3, 'Grapes':2}

sorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}

print(sorted_dict)

# Output: {'Apple': 1, 'Grapes': 2, 'Banana': 3, 'Strawberry': 4}",css,css,0.000827242571787907,0.9253033812959597,0.002539711506943275,3.765758257856582e-05,0.0009285500326637518,0.0002466909150224771,0.06995473271641912,9.475393222497233e-05,6.727944640042593e-05
"def hello_world_lines(n):
    for i in range(n):
        print(""Hello World!"")",python,bash,0.5917285746191364,1.940990668895525e-09,9.115876389146547e-07,4.941528734908687e-26,1.3079460818035994e-05,0.0006060028999945777,0.4076514103250894,1.58109253877462e-08,3.3554066929066225e-09
"def double_array(arr):
    return [element * 2 for element in arr]",python,matlab,6.100921335418994e-12,1.7206678023438883e-11,1.5072068654343634e-12,2.3829479999277507e-12,3.1737380128336937e-12,0.9999999926261642,7.330217469118932e-09,1.3699061741487466e-17,1.3246805397314058e-11
"# Importing the necessary module
import schedule

# Defining the job
def job():
    print(""Job executed!"")

# Scheduling the job to run every 5 minutes
schedule.every(5).minutes.do(job)

# Running the job
while True:
    schedule.run_pending()",python,typescript,0.06612381924197559,0.1265155969904705,0.027976948148263625,0.0006224536036179478,0.04327356404581502,0.003818080814928387,0.23822537603001984,0.006900035961054596,0.4865441251638546
"def generate_infinite_sequence(num):
    while True:
        yield num

for n in generate_infinite_sequence(5):
    print(n)",python,matlab,2.439269432539627e-09,1.540697597514214e-12,1.088195915011979e-08,2.3094878842792944e-10,4.839738594449183e-10,0.9999993642553273,6.18376352488633e-07,1.0094023282910205e-09,2.3212258464465183e-09
"import socket

HOST, PORT = '', 8888

listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
listen_socket.bind((HOST, PORT))
listen_socket.listen(1)

print('Serving HTTP on port %s ...' % PORT)
while True:
    client_connection, client_address = listen_socket.accept()
    request = client_connection.recv(1024)
    print(request)

    http_response = """"""\
HTTP/1.1 200 OK

Hello, World!
""""""
    client_connection.sendall(http_response)
    client_connection.close()",python,python,0.17493560090039406,0.043079091339961746,0.04066891964870531,5.994494202182515e-06,0.014619615273270816,0.00133395028912723,0.709402680598043,0.004367979502007798,0.011586167954287895
"import requests
from bs4 import BeautifulSoup

# Fetch page
page = requests.get(url)

# Parse HTML into BeautifulSoup object
soup = BeautifulSoup(page.text, 'html.parser')

# Extract required data
title = soup.title.string
description = soup.find(attrs={'name': 'description'}).get('content')

# Print out the data
print('Title:', title)
print('Description:', description)",css,html,3.540828776388562e-09,0.11016955971217612,0.8898228668258163,2.8371322720028173e-06,1.1263685137183939e-08,4.5979255218299153e-10,1.589519843067412e-06,2.397580603686371e-06,7.339649822688808e-07
"from flask import Flask, request
import requests

app = Flask(__name__)

@app.route('/wikipedia', methods=['GET'])
def search_wikipedia():
 query = request.args.get('query')
 response = requests.get(
 'https://en.wikipedia.org/w/api.php',
 params={
 'action': 'query',
 'list': 'search',
 'format': 'json',
 'srsearch': query
}).json()

 return response

if __name__ == '__main__':
 app.run()",css,css,9.144699464543727e-06,0.9991738419534318,2.8325276176316412e-05,6.524818585783674e-07,2.7170341317630134e-06,4.835309448679866e-07,0.0006036558716109427,0.00014423686322458676,3.694228915649668e-05
"def findMax(arr):
    max_number = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max_number:
            max_number = arr[i]
    return max_number

arr = [1, 4, 9, 3, 6, 5]
max_number = findMax(arr)
print(""The maximum element in the array is:"", max_number)",python,matlab,6.475518165227948e-06,7.142684327490119e-06,3.3933559525119457e-06,5.946337461708397e-07,4.069079737959112e-06,0.9909850762135008,0.008976811931519934,1.238143484198742e-07,1.6312768701568462e-05
"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
    
num = 7
result = factorial(num)
print(result)",python,python,3.978369629269536e-06,1.8451377277833114e-06,6.722336303081609e-06,2.210238695878772e-07,4.573157708040584e-06,0.0006114038777263996,0.9993563844114665,1.1944145302163723e-05,2.927540267114777e-06
"class Calculator:
    def __init__(self):
        pass

    def add(self, number1, number2):
        return number1 + number2

    def subtract(self, number1, number2):
        return number1 - number2

    def multiply(self, number1, number2):
        return number1 * number2

    def divide(self, number1, number2):
        return number1 / number2",python,python,0.011143929650665558,0.008582167439514886,0.0050719334513374065,0.0007966700240418286,0.001152734251103426,0.00019524677278692657,0.964574235062404,0.004696306926828088,0.003786776421317825
"import requests
import json

url = 'https://random-places.p.rapidapi.com/v1/get'

querystring = {'language': 'en-US', 'size': '1', 'types': 'city'}

headers = {
'x-rapidapi-host': 'random-places.p.rapidapi.com',
'x-rapidapi-key': <Your RapidAPI Key>
}

response = requests.request('GET', url, headers=headers, params=querystring)

data = json.loads(response.text)

destination = data['data'][0]

print(f'Destination: {destination[""name""]}, {destination[""country""]}')
print(f'Coordinates: {destination[""lat""]}, {destination[""lng""]}')",css,css,8.553299392620851e-10,0.988532265613699,0.0001798283261932248,0.00986998349826667,1.3219401528436287e-06,5.776318836417498e-07,0.0012528800368757887,0.00015169267126511517,1.1449426333872824e-05
"def gcd(a, b): 
    if a == 0: 
        return b 
    return gcd(b % a, a) 

if __name__ == '__main__':
    a = 4
    b = 12
    result = gcd(a, b) 
    print (""GCD of 4 and 12 is "" + str(result))",python,matlab,0.0007938318973504953,0.015971447373839223,0.005747043135765387,0.0005478915982081885,0.008862506508670384,0.6302078149469993,0.32607699393152406,0.002560181529526934,0.009232289078116017
"def to_dict(words):
    result = {}
    for word in words:
        result[word] = 1
    return result

result = to_dict([""Hello"", ""World"", ""Welcome""])
print(result)",python,python,0.0011707911356199174,0.0009160295781366213,8.096521030369957e-05,2.6223868547736624e-12,8.427986998041218e-05,2.776095843879817e-07,0.9971661913865995,0.0005799461831554764,1.51902399736412e-06
"def sort_strings(list_of_strings):
    sorted_list = sorted(list_of_strings, key=lambda str: str.lower())
    return sorted_list

result = sort_strings(['apple', 'orange', 'pear'])
print(result)",python,python,5.000115173072887e-05,0.007333574402050435,0.00047690309253077355,1.160080282365571e-05,0.0003459337987933742,4.780104017039337e-06,0.9912920771356625,0.00045223439162157776,3.2895120769948576e-05
"def reverseArray(list): 
    start = 0
    end = len(list) - 1
    while start < end:
        list[start], list[end] = list[end], list[start]
        start += 1
        end -= 1
    return list",python,python,0.00015534648674753648,0.0011747276230070114,0.0006479494404079417,4.494471859219831e-05,0.00025069212559724984,0.00032104081836805727,0.9869092955184504,0.009566182790723658,0.0009298204781058081
"def sum_odd_numbers(n):
    sum = 0
    for i in range(1,n+1):
        if i % 2 != 0:
            sum += i
    return sum

odd_sum = sum_odd_numbers(10)
print(odd_sum)",python,matlab,3.496353925165133e-05,2.962204693807161e-05,0.00043421129436890246,0.0003944130444959871,1.2042849641517057e-05,0.9420866150665059,0.05690659681079992,5.88834038062106e-05,4.265194419176804e-05
"import pandas as pd
from sklearn.linear_model import LinearRegression

# Create
data = {'Size': [500], 
'Rooms': [4]}

df = pd.DataFrame(data)

# Train
X = df[['Size','Rooms']] 
Y = df['Price'] 
  
reg = LinearRegression().fit(X, Y) 
  
# Predict
reg.predict([[500,4]]) # Predicted price: 1715.667543",css,css,0.0011974990819696035,0.770017280701803,0.008014238768542346,9.408688813438066e-05,9.891109143072516e-05,0.0002636072139065466,0.21251953787156644,0.0018455986604158667,0.0059492397222309515
"import random

def generate_hex_numbers(n): 
    hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] 
    return hex_numbers

print(generate_hex_numbers(10))",python,python,4.2634846330193e-06,2.650588624768304e-06,5.811664465471179e-06,1.5727187647972293e-08,1.1340566359868302e-07,0.00010847034783072906,0.9997413468851819,0.000136829216045104,4.986803676724425e-07
"def two_sum(lst, x):
 for i in range(len(lst)):
  for j in range(i+1, len(lst)):
   if lst[i] + lst[j] == x:
    return True 
 return False

list = [1, 3, 7, 4, 5]
X = 12

two_sum(list, X) # True",python,python,2.375714310069258e-06,1.0781478018172089e-06,1.1850746734012928e-05,5.894924559205082e-08,1.2654526802843555e-07,0.0004563852686551218,0.9995228961590809,4.535841171891696e-06,6.926277328339204e-07
"import random
import string

def random_string(stringLength=8):
    letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join(random.choice(letters_and_numbers) for i in range(stringLength))",sql,sql,1.8171403748808156e-12,3.4514205922065756e-08,7.656097660550391e-08,0.11206089998924089,8.591753485210411e-15,6.608487761480259e-09,5.0932508785231224e-05,0.8878880441759209,5.6405570047777994e-09
"def check_anagrams(s1, s2):
    s1 = s1.lower().replace("" "", """")
    s2 = s2.lower().replace("" "", """")
    return sorted(s1) == sorted(s2)",python,python,0.0019815297569073355,0.017388415603067593,0.00607200757466212,0.0003995164282772657,0.0020253821436466814,0.0005362874070688611,0.9657461079233896,0.003127643878449249,0.002723109284531271
"def days_between_dates(date1, date2):
    """"""
    Calculate the number of days between two dates
    date1: date object
    date2: date object
    """"""
    time_diff = date2 - date1
    return time_diff.days

days_between_dates(date(2020,1,2), date(2020,2,19))",python,python,0.001760923687872379,0.035959256107923374,0.002733472267926652,0.0034174901809331686,0.004165447907427536,0.00016963931933837074,0.9253622264194843,0.0029520589080068854,0.02347948520108734
"def caesarCipherEncrypt(str, key): 
    encrypted_str = """" 
  
    # traverse text 
    for i in range(len(str)): 
        char = str[i] 
  
        # Encrypt uppercase characters 
        if (char.isupper()): 
            encrypted_str += chr((ord(char) + key-65) % 26 + 65) 
  
        # Encrypt lowercase characters 
        else: 
            encrypted_str += chr((ord(char) + key - 97) % 26 + 97) 
  
    return encrypted_str 
  
# Driver code 
result = caesarCipherEncrypt(""Hello, World!"", 5) 
print(result)",python,python,0.0010291213431152704,0.0002962909536394371,0.00019890767258682297,4.261653678659951e-09,0.0005770244362860865,3.0851706490475984e-05,0.99726922880124,0.000555494201815348,4.307662317253391e-05
"def generateFibo(length):
    fibo = [0, 1]
    for i in range(2, length):
        fibo.append(fibo[i-2] + fibo[i-1])
    return fibo

if __name__ == '__main__':
    print(generateFibo(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",python,matlab,2.339376277225817e-07,6.548513612469654e-07,5.71506606918853e-07,2.1616798086421725e-08,4.084085987971955e-07,0.9923665742012471,0.007608383192973987,2.308439738221727e-05,6.788740416624808e-08
"sum = 455
  
total = 0
for i in range(pixel1, pixel2):
    if i % 2 != 0:
        total += i
print('sum =', total)",python,matlab,2.5702713454274418e-05,2.3003740638623842e-05,0.00046692676825745683,6.769947237669346e-05,4.6676226543691634e-06,0.7299652676508218,0.2693796544272126,3.582671304385708e-05,3.12508915404337e-05
"import re

input_string = ""This is an example string""
start_string = ""an""
end_string = ""string""

 regex = re.compile(start_string + '(.*?)' + end_string)
result = re.search(regex, input_string) 
if result: 
    print(result.group(1))",python,java,3.6983468051155897e-09,1.8642091874552656e-05,0.017860625140984864,0.9568652790077153,3.072389552124904e-08,7.941679080884422e-08,0.025129150653441235,0.0001224685485053115,3.7207184453443978e-06
"def findLargestCount(list):
    max_count = 0
    result = []
    
    for item in list:
        length_item = len(item)
        if length_item > max_count:
            max_count = length_item
            result = [item]
        elif length_item == max_count:
            result.append(item)
            
    return result",python,python,7.618508566858516e-05,0.017867502749106933,0.0039740143337633985,7.776727564122156e-06,0.004037433596471083,0.0024158941335582045,0.9708989792894179,0.0006740612727988744,4.815281165083552e-05
"# Import the requests library 
import requests 

# Get the website's content 
r = requests.get('https://www.example.com/') 

# Get the webpage's HTML 
html = r.text

# Print the HTML 
print(html)",python,html,2.1087739374092446e-14,1.1597205333223578e-05,0.998417936101944,0.0015690705494710755,1.8605411548828884e-07,6.127935088009344e-11,2.554203984603546e-07,1.1925985390193868e-07,8.353475835569125e-07
"def word_frequency(text):
    # Create a dictionary to store word frequencies
    freq = {}

    # Split the text into words
    words = text.split()

    # Iterate through every word and add it to the dictionary
    for word in words:
        if word in freq:
            freq[word] += 1
        else:
            freq[word] = 1

    # Return the dictionary
    return freq",python,python,0.008125478033766731,0.24847354075934414,0.014454424591430525,1.4443552198236723e-05,0.0023181930068642675,0.00011348054121825792,0.41649559519271845,0.0833370193997166,0.2266678249227427
"class Movie:
    def __init__(self, title, rating):
        self.title = title
        self.rating = rating",python,html,3.742121096112993e-06,0.000397189249294973,0.9984852038273014,9.419329402456045e-07,2.5173293182447335e-06,1.9206579547463197e-07,0.001011058787203725,8.763185554290767e-05,1.1522831507045715e-05
"def to_arr(this):
    """"""Returns Python array from Js array""""""
    return [this.get(str(e)) for e in xrange(len(this))]


ARR_STACK = set({})

class ArrayPrototype:
    def toString():
        # this function is wrong but I will leave it here fore debugging purposes.
        func = this.get('join')
        if not func.is_callable():
            @this.Js
            def func():
                return '[object %s]'%this.Class
        return func.call(this, ())

    def toLocaleString():
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        # separator is simply a comma ','
        if not arr_len:
            return ''
        res = []
        for i in xrange(arr_len):
            element = array[str(i)]
            if element.is_undefined() or element.is_null():
                res.append('')
            else:
                cand = element.to_object()
                str_func = element.get('toLocaleString')
                if not str_func.is_callable():
                    raise this.MakeError('TypeError', 'toLocaleString method of item at index %d is not callable'%i)
                res.append(element.callprop('toLocaleString').value)
        return ','.join(res)

    def concat():
        array = this.to_object()
        A = this.Js([])
        items = [array]
        items.extend(to_arr(arguments))
        n = 0
        for E in items:
            if E.Class=='Array':
                k = 0
                e_len = len(E)
                while k<e_len:
                    if E.has_property(str(k)):
                        A.put(str(n), E.get(str(k)))
                    n+=1
                    k+=1
            else:
                A.put(str(n), E)
                n+=1
        return A

    def join(separator):
        ARR_STACK.add(this)
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        separator = ',' if separator.is_undefined() else separator.to_string().value
        elems = []
        for e in xrange(arr_len):
            elem = array.get(str(e))
            if elem in ARR_STACK:
                s = ''
            else:
                s = elem.to_string().value
            elems.append(s if not (elem.is_undefined() or elem.is_null()) else '')
        res =  separator.join(elems)
        ARR_STACK.remove(this)
        return res

    def pop(): #todo check
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not arr_len:
            array.put('length', this.Js(arr_len))
            return None
        ind = str(arr_len-1)
        element = array.get(ind)
        array.delete(ind)
        array.put('length', this.Js(arr_len-1))
        return element


    def push(item): # todo check
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        to_put = arguments.to_list()
        i = arr_len
        for i, e in enumerate(to_put, arr_len):
            array.put(str(i), e)
        if to_put:
            i+=1
            array.put('length', this.Js(i))
        return i


    def reverse():
        array = this.to_object() # my own algorithm
        vals = to_arr(array)
        has_props = [array.has_property(str(e)) for e in xrange(len(array))]
        vals.reverse()
        has_props.reverse()
        for i, val in enumerate(vals):
            if has_props[i]:
                array.put(str(i), val)
            else:
                array.delete(str(i))
        return array


    def shift():  #todo check
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not arr_len:
            array.put('length', this.Js(0))
            return None
        first = array.get('0')
        for k in xrange(1, arr_len):
            from_s, to_s = str(k), str(k-1)
            if array.has_property(from_s):
                array.put(to_s, array.get(from_s))
            else:
                array.delete(to)
        array.delete(str(arr_len-1))
        array.put('length', this.Js(str(arr_len-1)))
        return first

    def slice(start, end): # todo check
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        relative_start = start.to_int()
        k = max((arr_len + relative_start), 0) if relative_start<0 else  min(relative_start, arr_len)
        relative_end = arr_len if end.is_undefined() else end.to_int()
        final =  max((arr_len + relative_end), 0) if relative_end<0 else min(relative_end, arr_len)
        res = []
        n = 0
        while k<final:
            pk = str(k)
            if array.has_property(pk):
                res.append(array.get(pk))
            k += 1
            n += 1
        return res

    def sort(cmpfn):
        if not this.Class in {'Array', 'Arguments'}:
            return this.to_object() # do nothing
        arr = [this.get(str(i)) for i in xrange(len(this))]
        if not arr:
            return this
        if not cmpfn.is_callable():
            cmpfn = None
        cmp = lambda a,b: sort_compare(a, b, cmpfn)
        arr.sort(cmp=cmp)
        for i in xrange(len(arr)):
            this.put(unicode(i), arr[i])
        return this

    def splice(start, deleteCount):
        # 1-8
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        relative_start = start.to_int()
        actual_start = max((arr_len + relative_start),0) if relative_start<0 else min(relative_start, arr_len)
        actual_delete_count =  min(max(deleteCount.to_int(),0 ), arr_len - actual_start)
        k = 0
        A = this.Js([])
        # 9
        while k<actual_delete_count:
            if array.has_property(str(actual_start+k)):
                A.put(str(k), array.get(str(actual_start+k)))
            k += 1
        # 10-11
        items = to_arr(arguments)[2:]
        items_len = len(items)
        # 12
        if items_len<actual_delete_count:
            k = actual_start
            while k < (arr_len-actual_delete_count):
                fr = str(k+actual_delete_count)
                to = str(k+items_len)
                if array.has_property(fr):
                    array.put(to, array.get(fr))
                else:
                    array.delete(to)
                k += 1
            k = arr_len
            while k > (arr_len - actual_delete_count + items_len):
                array.delete(str(k-1))
                k -= 1
        # 13
        elif items_len>actual_delete_count:
            k = arr_len - actual_delete_count
            while k>actual_start:
                fr = str(k + actual_delete_count - 1)
                to = str(k + items_len - 1)
                if array.has_property(fr):
                    array.put(to, array.get(fr))
                else:
                    array.delete(to)
                k -= 1
        # 14-17
        k = actual_start
        while items:
            E = items.pop(0)
            array.put(str(k), E)
            k += 1
        array.put('length', this.Js(arr_len - actual_delete_count + items_len))
        return A

    def unshift():
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        argCount = len(arguments)
        k = arr_len
        while k > 0:
            fr = str(k - 1)
            to = str(k + argCount - 1)
            if array.has_property(fr):
                array.put(to, array.get(fr))
            else:
                array.delete(to)
            k -= 1
        j = 0
        items = to_arr(arguments)
        while items:
            E = items.pop(0)
            array.put(str(j), E)
            j += 1
        array.put('length', this.Js(arr_len + argCount))
        return arr_len + argCount

    def indexOf(searchElement):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if arr_len == 0:
            return -1
        if len(arguments)>1:
            n = arguments[1].to_int()
        else:
            n = 0
        if n >= arr_len:
            return -1
        if n >= 0:
            k = n
        else:
            k = arr_len - abs(n)
            if k < 0:
                k = 0
        while k < arr_len:
            if array.has_property(str(k)):
                elementK = array.get(str(k))
                if searchElement.strict_equality_comparison(elementK):
                    return k
            k += 1
        return -1

    def lastIndexOf(searchElement):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if arr_len == 0:
            return -1
        if len(arguments)>1:
            n = arguments[1].to_int()
        else:
            n = arr_len - 1
        if n >= 0:
            k = min(n, arr_len-1)
        else:
            k = arr_len - abs(n)
        while k >= 0:
            if array.has_property(str(k)):
                elementK = array.get(str(k))
                if searchElement.strict_equality_comparison(elementK):
                    return k
            k -= 1
        return -1


    def every(callbackfn):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not callbackfn.is_callable():
            raise this.MakeError('TypeError', 'callbackfn must be a function')
        T = arguments[1]
        k = 0
        while k<arr_len:
            if array.has_property(str(k)):
                kValue = array.get(str(k))
                if not callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:
                    return False
            k += 1
        return True


    def some(callbackfn):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not callbackfn.is_callable():
            raise this.MakeError('TypeError', 'callbackfn must be a function')
        T = arguments[1]
        k = 0
        while k<arr_len:
            if array.has_property(str(k)):
                kValue = array.get(str(k))
                if callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:
                    return True
            k += 1
        return False

    def forEach(callbackfn):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not callbackfn.is_callable():
            raise this.MakeError('TypeError', 'callbackfn must be a function')
        T = arguments[1]
        k = 0
        while k<arr_len:
            if array.has_property(str(k)):
                kValue = array.get(str(k))
                callbackfn.call(T, (kValue, this.Js(k), array))
            k+=1

    def map(callbackfn):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not callbackfn.is_callable():
            raise this.MakeError('TypeError', 'callbackfn must be a function')
        T = arguments[1]
        A = this.Js([])
        k = 0
        while k<arr_len:
            Pk = str(k)
            if array.has_property(Pk):
                kValue = array.get(Pk)
                mappedValue = callbackfn.call(T, (kValue, this.Js(k), array))
                A.define_own_property(Pk, {'value': mappedValue, 'writable': True,
                    'enumerable': True, 'configurable': True})
            k += 1
        return A

    def filter(callbackfn):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not callbackfn.is_callable():
            raise this.MakeError('TypeError', 'callbackfn must be a function')
        T = arguments[1]
        res = []
        k = 0
        while k<arr_len:
            if array.has_property(str(k)):
                kValue = array.get(str(k))
                if callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value:
                    res.append(kValue)
            k += 1
        return res # converted to js array automatically

    def reduce(callbackfn):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not callbackfn.is_callable():
            raise this.MakeError('TypeError', 'callbackfn must be a function')
        if not arr_len and len(arguments)<2:
            raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')
        k = 0
        if len(arguments)>1: # initial value present
            accumulator = arguments[1]
        else:
            kPresent = False
            while not kPresent and k<arr_len:
                kPresent = array.has_property(str(k))
                if kPresent:
                    accumulator = array.get(str(k))
                k += 1
            if not kPresent:
                raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')
        while k<arr_len:
            if array.has_property(str(k)):
                kValue = array.get(str(k))
                accumulator = callbackfn.call(this.undefined, (accumulator, kValue, this.Js(k), array))
            k += 1
        return accumulator


    def reduceRight(callbackfn):
        array = this.to_object()
        arr_len = array.get('length').to_uint32()
        if not callbackfn.is_callable():
            raise this.MakeError('TypeError', 'callbackfn must be a function')
        if not arr_len and len(arguments)<2:
            raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')
        k = arr_len - 1
        if len(arguments)>1: # initial value present
            accumulator = arguments[1]
        else:
            kPresent = False
            while not kPresent and k>=0:
                kPresent = array.has_property(str(k))
                if kPresent:
                    accumulator = array.get(str(k))
                k -= 1
            if not kPresent:
                raise this.MakeError('TypeError', 'Reduce of empty array with no initial value')
        while k>=0:
            if array.has_property(str(k)):
                kValue = array.get(str(k))
                accumulator = callbackfn.call(this.undefined, (accumulator, kValue, this.Js(k), array))
            k -= 1
        return accumulator


def sort_compare(a, b, comp):
    if a is None:
        if b is None:
            return 0
        return 1
    if b is None:
        if a is None:
            return 0
        return -1
    if a.is_undefined():
        if b.is_undefined():
            return 0
        return 1
    if b.is_undefined():
        if a.is_undefined():
            return 0
        return -1
    if comp is not None:
        res = comp.call(a.undefined, (a, b))
        return res.to_int()
    x, y = a.to_string(), b.to_string()
    if x<y:
        return -1
    elif x>y:
        return 1
    return 0




",css,matlab,0.00014575169266798222,6.227073152841453e-06,2.2113751066788874e-05,1.8805654662947944e-05,2.3382336325875896e-05,0.9997484287984586,1.7642682694918973e-05,1.4371755109562967e-05,3.2762558602491626e-06
"""""""
Generate a python program to generate a subset of random numbers from the given array
""""""

import random

# Function to generate a subset of random numbers
def generate_subset(array, subset_size):
    # Get a list of indices
    indices = random.sample(range(len(array)), subset_size)
    
    # Get a list of elements from the array
    subset = [array[i] for i in indices]
    
    return subset

if __name__ == '__main__':
    array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1]
    subset_size = 5
    print(generate_subset(array, subset_size))",python,bash,0.84407164733082,0.0005600786977758782,0.0006659547957993404,2.0741023815546398e-05,0.07306851441900872,0.0008164605269026698,0.048958031077687245,0.03080853495894951,0.00103003716924125
"def maxNum(numsList):
    maxNum = numsList[0]
    for num in numsList:
        if num > maxNum:
            maxNum = num
    return maxNum

numList = [4, 9, 10, 11, 12]
print(""The maximum number in the list is:"", maxNum(numList))",python,matlab,4.25715103696867e-05,1.8058771092769419e-06,6.686005037042464e-05,1.3986958288766428e-06,8.18345260441609e-05,0.9951256554648887,0.004535508666810709,2.1303934087429915e-05,0.00012306127449089257
"import logging

# Create logutillogger
logutillogger = logging.getLogger('logutil')
logutillogger.setLevel(logging.ERROR)

# Create a file handler
file_handler = logging.FileHandler('app_error.log')
file_handler.setLevel(logging.ERROR)

# Create a formatter
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
file_handler.setFormatter(formatter)

# Add the file handler to the logger
logutillogger.addHandler(file_handler)

# Log the errors
try:
 # Code that may throw an error
except Exception as e:
 logutillogger.exception(e)",python,typescript,0.00026880366133822303,8.297344843598934e-05,0.00034047329539999883,0.00012122458703447553,0.022579432228885258,4.0113707027009666e-05,0.0025055645046701165,0.0005888165777162149,0.9734725979894926
"class WordCounter:
 def __init__(self, text):
 self.text = text
 
 def count_words(self):
 return len(self.text.split())

text = 'This is some sample text.'
wc = WordCounter(text)
num_words = wc.count_words()
print(num_words) # Output: 4",python,python,0.00013867148087482454,0.010967120908001372,0.0011296213131208,1.6525740024926485e-05,1.612348961893008e-05,1.305793751862265e-06,0.8848060948856165,0.10094056063335152,0.0019839757556393907
"multiply = 1
for x in range(1,6):
 multiply = multiply * x

print(multiply)",python,python,0.0005331313196716436,0.0002704164364784212,0.0018552340801759675,5.36720285135931e-05,0.0001329633486753089,0.4673536699980667,0.528325416411639,0.0007362233598994198,0.0007392730168799414
"def flatten(arr):
    result = []
 
    for item in arr:
        if isinstance(item, list):
            result.extend(flatten(item))
        else:
            result.append(item)
 
    return result
 
flattenedArr = flatten(arr)
print(flattenedArr)",python,python,2.560683323551041e-05,0.021582650363065215,0.0006472171112893641,3.1647854577824156e-06,0.0008512023427886272,0.4501102915257577,0.5267502937918263,1.495366195030352e-05,1.4619584629424121e-05
"list_of_nums = [1, 2, 3, 4, 5]

dictionary = {}
for num in list_of_nums:
 dictionary[num] = num

print(dictionary)

# Output {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}",css,matlab,1.2030669129249767e-06,8.388495000607667e-08,2.3132961451176442e-06,5.251159818886817e-08,1.1223885796992386e-07,0.9999532392411936,4.197834893233964e-05,4.4118278090228534e-07,5.76228628809817e-07
"for i in range(10):
    print(i)",python,matlab,5.9656415838442685e-12,9.24345959966392e-13,1.3906781818842273e-10,2.382126516031233e-13,1.6979731962244342e-13,0.9998352021961047,0.00016479765204655716,3.2524040295583e-14,5.450371823541461e-12
"import re

class EmailParser:
 def __init__(self, email):
 self.email = email
 
 def parse_username(self):
 return re.search('(.*)@', self.email).group(1)
 
 def parse_domain(self):
 return re.search('@(.*)', self.email).group(1)

# Usage
parser = EmailParser(""john@example.com"")
print(parser.parse_username())
# john
print(parser.parse_domain())
# example.com",python,html,8.332587994389006e-11,0.012063780805852272,0.5379905442138874,0.3924382095267902,8.030374446731698e-06,1.5449867733895342e-08,0.055275217144871984,0.002221359377245558,2.843023712288296e-06
"import random
numbers = []

for i in range(10):
 number = random.randint(1, 100)
 numbers.append(number)
 
print(numbers)",python,python,3.1993446948562158e-06,1.3735596368672766e-05,2.6246383491222477e-05,0.00031699005095733813,1.0302594296226557e-05,5.751769427927674e-06,0.9996044174210698,1.7756778549918908e-05,1.6000611438908562e-06
"import json

def list_to_json(data):
    return json.dumps(data)",python,css,1.1347903578340046e-05,0.9959880442754366,0.0001613971138487575,5.796306033403486e-07,3.951083397032854e-06,8.92971297441347e-07,0.0037680314113158705,3.8919070614940556e-05,2.683653990778661e-05
"from multiprocessing import Pool

def process_data(record):
 # Process the data

def process_list_data(data):
 with Pool() as p:
 p.map(process_data, data)

list_data = [1,2,3,4,5]

process_list_data(list_data)",python,typescript,0.0022436306661633636,0.0337312519674095,0.009470868844434474,5.1043636176705044e-05,0.00022815562599659908,0.0001305737173826067,0.0723663468617024,0.0006639927154782953,0.881114135965256
"import random

def generate_permutation(nums):
 n = len(nums)
 permutation = []

# Generate a random index and add the element at that index to the list
 for _ in range(n):
 idx = random.randint(0, len(nums) - 1)
 permutation.append(nums[idx])
 nums.pop(idx)

return permutation

# Test the function
print(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]",python,python,0.0008461057024178335,0.00012939902168716943,0.00023730783120498296,1.433859977269456e-05,0.021976855359565218,8.27496221050862e-05,0.9720231811229119,0.003681036906944981,0.0010090258333899857
"class Numbers:
   
    def __init__(self):
        pass
   
    def add(self, a, b):
        return a + b
   
    def subtract(self, a, b):
        return a - b",python,python,2.4283734876937615e-06,6.444985092072244e-05,0.0015683042865149064,0.0008802291012575211,2.4025978844501112e-06,2.7092042039111238e-11,0.9935363757242828,0.003934875564046022,1.0934474513818172e-05
"def maxElement(arr):
    return max(arr)

array = [2, 78, 34, 55]

print(maxElement(array)) # 78",python,python,0.006216325141793236,0.010320209087338788,0.003140805659610833,0.00046727213544739085,0.0008151022695401446,0.12495182742316212,0.8516213007190414,0.00029907348073961317,0.0021680840833263712
"""""""
Detect malicious HTTP requests using Python
""""""
import requests
from urllib.parse import urlparse
import re

def detect_malicious_requests(url):
    # Parse the URL
    parsed_url = urlparse(url)

    # Check for malicious URL patterns
    malicious_patterns = [
        r""\.exe$"",
        r""\.js$"",
        r""\.gz$"",
        r""\.bat$"",
        r""\.zip$"",
        r""\.php$"",
        r""\.sh$"",
        r""\.json$""
    ]
    for pattern in malicious_patterns:
        if re.search(pattern, parsed_url.path):
            return ""MALICIOUS""

    # Check for suspicious file extensions
    suspicious_file_extensions = [
        "".xml"",
        "".config"",
        "".log"",
        "".ini""
    ]
    for extension in suspicious_file_extensions:
        if parsed_url.path.endswith(extension):
            return ""SUSPICIOUS""

    # Check for HTTP status codes
    response = requests.get(url)
    if response.status_code == 401:
        return ""MALICIOUS""

    return ""SAFE""

if __name__ == '__main__':
    url = ""http://example.com/index.php""
    print(detect_malicious_requests(url))",python,css,2.8770814674646658e-08,0.3690834490507006,0.1605152517924311,0.2913055861965962,0.004297640292892696,0.003530776907605256,0.16615089182380582,0.0025661451434623875,0.0025502300216912175
"import numpy as np

x = np.array([1,2,3,4,5])
y = np.array([2,3,4,5,6])

corr = np.corrcoef(x, y)

print(corr[0][1]) # 0.98999999999999999",python,bash,0.9560977869047413,0.002526716387703199,0.000872892768938255,3.202397106977697e-05,1.5229911586524867e-05,0.0007665150488983199,0.03877484643481976,9.717752790699384e-07,0.0009130167969636686
"def my_sqrt(x): 
    guess = x
    i = 0
    while guess * guess != x and i < 20:
        guess = (guess + x/guess) / 2.0
        i += 1
    return guess 

result = my_sqrt(36) 
print(""Square root of 36 is = "", result)",python,python,0.0013207298514911867,0.01674105010333449,0.005744477690290405,0.0009027444753623214,0.004357963533089145,0.0006311682836359111,0.9519314336028283,0.0028986692131485457,0.015471763246819604
"def closest_match(numbers, search_term):
    closest_match = None
    min_diff = float('inf')
    
    for number in numbers:
        diff = abs(number - search_term)
        if diff < min_diff:
            min_diff = diff
            closest_match = number
    
    return closest_match",python,python,0.0004461034858151498,0.003426146930053028,0.0010050056860405028,0.001603640740834339,0.00047923433838551426,7.819753251906839e-05,0.9918516624312612,0.000542537371775551,0.0005674714833157724
"def sort_by_length(words):
    return sorted(words, key=len)",python,python,7.767362162325284e-05,0.0030347891756727957,0.0018751027633570237,1.9847966822805637e-05,0.00017467620801968177,1.1085476539983496e-05,0.9808280346579827,0.013957331388603693,2.145874137799906e-05
"import flask
from flask import jsonify
import sqlite3
from flask import g

app = flask.Flask(name)

DATABASE = 'data.db'

def get_db():
   db = getattr(g, '_database', None)
   if db is None:
       db = g._database = sqlite3.connect(DATABASE)
   return db

@app.route('/data', methods=['POST'])
def store_data():
   db = get_db()
   cur = db.cursor()
   cur.execute(""INSERT INTO data (data) VALUES (?)"", (flask.request.form['data'],))
   db.commit()
   return jsonify(status='OK', message='Data stored')

@app.route('/data', methods=['GET'])
def get_data():
   db = get_db()
   cur = db.cursor()
   cur.execute('SELECT * FROM data')
   row = cur.fetchall()
   data = [item[0] for item in row]
   return jsonify(status='OK', message=data)

if name == 'main':
   app.run(debug=True)",sql,sql,0.00043277780874566594,0.2342705701189585,0.019011877579741147,1.7136569758453115e-05,7.266561014269713e-06,3.1628411362155108e-06,0.0011131459572398528,0.7450764125551973,6.76500082085186e-05
"employee_data = {
    ""Michael"": 45000,
    ""Andrew"": 55000,
    ""Mark"": 70000
}",css,python,0.03344522342202318,0.10564444689210196,0.05412966464485883,0.007795460585962923,0.019009128678025008,0.0344040148693489,0.6862784599258593,0.006436265207938535,0.05285733577388134
"def comb3(arr):
    result = []
    for i in range(len(arr)):
       for j in range(i+1, len(arr)):
           for k in range(j+1, len(arr)):
               t = [arr[i],arr[j],arr[k]]
               result.append(t)
    return result",python,matlab,1.6596783706649624e-09,8.66218401143605e-09,4.877068360910021e-09,3.3973984808254526e-10,2.0230948731034244e-10,0.6785197071691865,0.32148026731182355,6.997585002915171e-09,2.7804248967850952e-09
"for key,value in my_dict.items(): 
    print(key,"" :"",value)",python,css,2.0616154884746588e-06,0.6888280623992481,1.01409317521903e-05,2.7662794198923983e-07,2.477307575423573e-05,0.31112962694275414,3.00911221037744e-08,3.6234738267140194e-06,1.4048421119690985e-06
"import requests
from bs4 import BeautifulSoup

# Define the function to scrape articles from a website
def scrape_articles(url):
  # Make a GET request to fetch the raw HTML content
  html_content = requests.get(url).text
  # Parse the html content
  soup = BeautifulSoup(html_content, ""lxml"")
  # Return articles
  return soup.find_all(""article"")

# Example
articles = scrape_articles('https://example.com/news')",python,html,2.4892097617269324e-09,2.082721296510898e-05,0.8941227806942019,0.09925473970787274,0.003573067579590655,0.0020987970533760253,0.00043682124523510544,0.00043297451186275995,5.9989505685819754e-05
"totalCost = 0
for item, price in items.items():
totalCost += price

print(f'Total cost of the cart is {totalCost}')",python,python,0.0013916694595721539,0.42656917600558764,0.014479809183818517,0.0009000419100189627,0.08773569173442057,0.0005824697334721833,0.457614834349887,0.002869002236502401,0.00785730538672057
"def get_largest(a, b, c):
    largest = a 
    if b>largest:
        largest = b
    if c>largest:
        largest = c
    return largest

print(get_largest(10, 20, 15))",python,python,0.007748191474155783,0.02219613293482017,0.07275579078735527,0.00117204778843798,0.002605855072420937,0.02121578786166437,0.864306479330744,0.0007512041943263855,0.007248510556075091
"def word_count(sentence):
    count = 0
    for word in sentence.split(' '):
        count += 1
    return count",python,python,0.0003107252739361152,0.0023518047491719904,0.0005230750438535021,2.7109279059530206e-06,5.2086763984734995e-05,5.269142922678079e-05,0.9948740348970228,0.0017910304767679336,4.1840438130250395e-05
"def get_length(string):
    return len(string)

length = get_length(""Hello"")
print(length)",python,python,9.30870456855293e-07,0.00034173544332266175,6.8121157368358e-05,0.02225438221017648,1.9912827619811356e-06,5.056721274573415e-07,0.9692040353254041,0.008114547094840064,1.3750943541972397e-05
"def sum_values(d):
    sum = 0
    for value in d.values():
        sum += value
    return sum

total = sum_values(d)
print(total) # 60",python,matlab,2.579826162950724e-06,0.000256255096607973,4.587120423060531e-05,1.7656154465694753e-05,2.6207694083498987e-06,0.9996568292083343,3.24705970400095e-08,9.345289877048566e-06,8.80998031589814e-06
"def find_pairs(nums, num):
    pairs = []
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] + nums[j] == num:
                pairs.append((nums[i], nums[j]))
    return len(pairs)

if __name__ == '__main__':
	nums = [1,2,3,4]
	num = 7
	pairs = find_pairs(nums, num)
	print(pairs)",python,python,1.9745846317789647e-05,2.627648698423228e-06,4.588508579402261e-05,2.6772114823903788e-06,9.475439987018898e-06,0.23982697375368095,0.7600406747017191,2.908297489792918e-05,2.285733742218563e-05
"def linearSearch(arr, x): 
  
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1",python,matlab,1.2219282472320438e-08,1.0806083591004948e-08,1.8035956221079678e-08,3.6593488945450994e-09,9.374965942492903e-10,0.9920978784067421,0.007902064053555053,2.272048574999131e-09,9.609486423024752e-09
"string1 = input(""Enter a string: "")
string2 = input(""Enter another string: "")

if string1 == string2:
 print(""The strings are equal"")
else:
 print(""The strings are not equal"")",python,python,5.753444426348074e-05,0.012775349690130628,0.000732727821528817,0.06992902796095658,1.8978660872234822e-06,0.00017986761973971357,0.8769017422820643,0.02848564974520181,0.010936202570027602
"def tsp(graph, start, end): 
    # Create an unvisited list 
    unvisited = {vertex: None for vertex in graph} 
    current = start 
    unvisited[current] = current 
    visited = dict() 
    route = list() 
  
    while True: 
        visited[current] = current 
        route.append(current) 
        unvisited.pop(current, None) 
        if current == end: 
            break
  
        min_dist = float('inf')
        for neighbour in graph[current].keys(): 
            if neighbour not in unvisited: 
                continue
            dist = graph[current][neighbour]
            if dist < min_dist: 
                min_dist = dist 
                next_vertex = neighbour 
  
        current = next_vertex 
  
    route.append(end) 
    return route",css,css,0.2624357933233855,0.3327975943357654,0.035101039427315774,0.0008182459282272069,0.0023414187540441115,0.2043661340203084,0.13915110488078722,0.00787136603066244,0.015117303299503998
"def clear_dictionary(d): 
    keys = list(d.keys()) 
    for key in keys: 
        del d[key]",python,css,0.0019807732554676044,0.9159210873888498,0.014581491112892255,0.00023251745856183202,0.0009951159902535102,0.010795274093255643,0.034049833639601526,0.00834659542971932,0.013097311631398673
"import random

def generate_password():
  data = ""0123456789""
  length = 10
  password = """".join(random.sample(data, length))
  return password

print(generate_password())",sql,sql,1.8999813371784913e-07,3.7487700497685847e-06,1.5650632021876112e-06,2.8969411861239188e-09,4.162951715205138e-06,1.5028995455351767e-08,0.000269740109531172,0.9997202505057398,3.246756915834312e-07
"""""""
Program to calculate the Fibonacci number at a particular index
""""""

def fibonacci_at_index(index):
    """"""Returns the Fibonacci number at a given index.
    
    Args:
        index (int): The index of the Fibonacci number to be returned
    
    Returns:
        int: The Fibonacci number at the given index
    """"""
    if index <= 0:
        return 0
    if index == 1:
        return 1
    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2)

if __name__ == '__main__':
    index = int(input())
    print(fibonacci_at_index(index))",python,python,0.19165397183706662,0.00021403786694715494,0.020920886136130246,0.024742409234061628,0.06532198658397183,1.4212027143629262e-06,0.6103590292947725,0.00026712389460989183,0.08651913394972595
"def find_mode(List): 
    max_count = 0
    modes = [] 
    for num in List: 
        current_count = List.count(num) 
        if current_count > max_count: 
            max_count = current_count 
            modes = [num] 
        elif current_count == max_count: 
            modes.append(num) 
    return modes",python,matlab,9.815472448401715e-06,4.177060853067079e-07,2.336831108020602e-05,1.810274947464686e-06,7.390164478979172e-06,0.9995638391356505,0.0003633668159507618,1.3907414044658611e-05,1.6084705313716686e-05
"class Stack:

def __init__(self):
    self.items = []

def push(self, item):
    self.items.append(item)

def pop(self):
    return self.items.pop()

def is_empty(self):
    return self.items == []

def peek(self):
    if not self.is_empty():
        return self.items[-1]

def get_stack(self):
    return self.items",python,python,1.5990380254902176e-05,0.007168878502200761,0.0269218939597092,7.416516966269145e-07,0.00010067796003395176,6.290279431183253e-07,0.7571694106552623,0.20861699939287273,4.778470026431375e-06
"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import bisect
import itertools
import operator

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

class _BNode(object):
    __slots__ = [""tree"", ""contents"", ""children""]

    def __init__(self, tree, contents=None, children=None):
        self.tree = tree
        self.contents = contents or []
        self.children = children or []
        if self.children:
            assert len(self.contents) + 1 == len(self.children), \
                ""one more child than data item required""

    def __repr__(self):
        name = getattr(self, ""children"", 0) and ""Branch"" or ""Leaf""
        return ""<%s %s>"" % (name, "", "".join(map(str, self.contents)))

    def lateral(self, parent, parent_index, dest, dest_index):
        if parent_index > dest_index:
            dest.contents.append(parent.contents[dest_index])
            parent.contents[dest_index] = self.contents.pop(0)
            if self.children:
                dest.children.append(self.children.pop(0))
        else:
            dest.contents.insert(0, parent.contents[parent_index])
            parent.contents[parent_index] = self.contents.pop()
            if self.children:
                dest.children.insert(0, self.children.pop())

    def shrink(self, ancestors):
        parent = None

        if ancestors:
            parent, parent_index = ancestors.pop()
            # try to lend to the left neighboring sibling
            if parent_index:
                left_sib = parent.children[parent_index - 1]
                if len(left_sib.contents) < self.tree.order:
                    self.lateral(
                        parent, parent_index, left_sib, parent_index - 1)
                    return

            # try the right neighbor
            if parent_index + 1 < len(parent.children):
                right_sib = parent.children[parent_index + 1]
                if len(right_sib.contents) < self.tree.order:
                    self.lateral(
                        parent, parent_index, right_sib, parent_index + 1)
                    return

        center = len(self.contents) // 2
        sibling, push = self.split()

        if not parent:
            parent, parent_index = self.tree.BRANCH(
                self.tree, children=[self]), 0
            self.tree._root = parent

        # pass the median up to the parent
        parent.contents.insert(parent_index, push)
        parent.children.insert(parent_index + 1, sibling)
        if len(parent.contents) > parent.tree.order:
            parent.shrink(ancestors)

    def grow(self, ancestors):
        parent, parent_index = ancestors.pop()

        minimum = self.tree.order // 2
        left_sib = right_sib = None

        # try to borrow from the right sibling
        if parent_index + 1 < len(parent.children):
            right_sib = parent.children[parent_index + 1]
            if len(right_sib.contents) > minimum:
                right_sib.lateral(parent, parent_index + 1, self, parent_index)
                return

        # try to borrow from the left sibling
        if parent_index:
            left_sib = parent.children[parent_index - 1]
            if len(left_sib.contents) > minimum:
                left_sib.lateral(parent, parent_index - 1, self, parent_index)
                return

        # consolidate with a sibling - try left first
        if left_sib:
            left_sib.contents.append(parent.contents[parent_index - 1])
            left_sib.contents.extend(self.contents)
            if self.children:
                left_sib.children.extend(self.children)
            parent.contents.pop(parent_index - 1)
            parent.children.pop(parent_index)
        else:
            self.contents.append(parent.contents[parent_index])
            self.contents.extend(right_sib.contents)
            if self.children:
                self.children.extend(right_sib.children)
            parent.contents.pop(parent_index)
            parent.children.pop(parent_index + 1)

        if len(parent.contents) < minimum:
            if ancestors:
                # parent is not the root
                parent.grow(ancestors)
            elif not parent.contents:
                # parent is root, and its now empty
                self.tree._root = left_sib or self

    def split(self):
        center = len(self.contents) // 2
        median = self.contents[center]
        sibling = type(self)(
            self.tree,
            self.contents[center + 1:],
            self.children[center + 1:])
        self.contents = self.contents[:center]
        self.children = self.children[:center + 1]
        return sibling, median

    def insert(self, index, item, ancestors):
        self.contents.insert(index, item)
        if len(self.contents) > self.tree.order:
            self.shrink(ancestors)

    def remove(self, index, ancestors):
        minimum = self.tree.order // 2

        if self.children:
            # find the smallest in the right subtree, exchange the value with the current node
            # then delete the smallest one, just like the idea in the binary search tree.
            # Note: only if len(descendent.contents) > minimum, we do this way in order to avoid 'grow' operation.
            # Or we will inspect the left tree and do it any way
            # all internal nodes have both left and right subtree.
            additional_ancestors = [(self, index + 1)]
            descendent = self.children[index + 1]
            while descendent.children:
                additional_ancestors.append((descendent, 0))
                descendent = descendent.children[0]
            if len(descendent.contents) > minimum:
                ancestors.extend(additional_ancestors)
                self.contents[index] = descendent.contents[0]
                descendent.remove(0, ancestors)
                return

            # fall back to the left child, and exchange with the biggest, then delete the biggest anyway.
            additional_ancestors = [(self, index)]
            descendent = self.children[index]
            while descendent.children:
                additional_ancestors.append(
                    (descendent, len(descendent.children) - 1))
                descendent = descendent.children[-1]
            ancestors.extend(additional_ancestors)
            self.contents[index] = descendent.contents[-1]
            descendent.remove(len(descendent.children) - 1, ancestors)
        else:
            self.contents.pop(index)
            if len(self.contents) < minimum and ancestors:
                self.grow(ancestors)

class _BPlusLeaf(_BNode):
    __slots__ = [""tree"", ""contents"", ""data"", ""next""]

    def __init__(self, tree, contents=None, data=None, next=None):
        self.tree = tree
        self.contents = contents or []
        self.data = data or []
        self.next = next
        assert len(self.contents) == len(self.data), ""one data per key""

    def insert(self, index, key, data, ancestors):
        self.contents.insert(index, key)
        self.data.insert(index, data)

        if len(self.contents) > self.tree.order:
            self.shrink(ancestors)

    def lateral(self, parent, parent_index, dest, dest_index):
        if parent_index > dest_index:
            dest.contents.append(self.contents.pop(0))
            dest.data.append(self.data.pop(0))
            parent.contents[dest_index] = self.contents[0]
        else:
            dest.contents.insert(0, self.contents.pop())
            dest.data.insert(0, self.data.pop())
            parent.contents[parent_index] = dest.contents[0]

    def split(self):
        center = len(self.contents) // 2
        median = self.contents[center - 1]
        sibling = type(self)(
            self.tree,
            self.contents[center:],
            self.data[center:],
            self.next)
        self.contents = self.contents[:center]
        self.data = self.data[:center]
        self.next = sibling
        return sibling, sibling.contents[0]

    def remove(self, index, ancestors):
        minimum = self.tree.order // 2
        if index >= len(self.contents):
            self, index = self.next, 0

        key = self.contents[index]

        # if any leaf that could accept the key can do so
        # without any rebalancing necessary, then go that route
        current = self
        while current is not None and current.contents[0] == key:
            if len(current.contents) > minimum:
                if current.contents[0] == key:
                    index = 0
                else:
                    index = bisect.bisect_left(current.contents, key)
                current.contents.pop(index)
                current.data.pop(index)
                return
            current = current.next

        self.grow(ancestors)

    def grow(self, ancestors):
        minimum = self.tree.order // 2
        parent, parent_index = ancestors.pop()
        left_sib = right_sib = None

        # try borrowing from a neighbor - try right first
        if parent_index + 1 < len(parent.children):
            right_sib = parent.children[parent_index + 1]
            if len(right_sib.contents) > minimum:
                right_sib.lateral(parent, parent_index + 1, self, parent_index)
                return

        # fallback to left
        if parent_index:
            left_sib = parent.children[parent_index - 1]
            if len(left_sib.contents) > minimum:
                left_sib.lateral(parent, parent_index - 1, self, parent_index)
                return

        # join with a neighbor - try left first
        if left_sib:
            left_sib.contents.extend(self.contents)
            left_sib.data.extend(self.data)
            parent.remove(parent_index - 1, ancestors)
            return

        # fallback to right
        self.contents.extend(right_sib.contents)
        self.data.extend(right_sib.data)
        parent.remove(parent_index, ancestors)

class BTree(object):
    BRANCH = LEAF = _BNode

    def __init__(self, order):
        self.order = order
        self._root = self._bottom = self.LEAF(self)

    def _path_to(self, item):
        """"""

        """"""
        current = self._root
        ancestry = []

        while getattr(current, ""children"", None):
            index = bisect.bisect_left(current.contents, item)
            ancestry.append((current, index))
            if index < len(current.contents) \
                and current.contents[index] == item:
                return ancestry
            current = current.children[index]

        index = bisect.bisect_left(current.contents, item)
        ancestry.append((current, index))
        present = index < len(current.contents)
        present = present and current.contents[index] == item
        return ancestry

    def _present(self, item, ancestors):
        last, index = ancestors[-1]
        return index < len(last.contents) and last.contents[index] == item

    def insert(self, item):
        current = self._root
        ancestors = self._path_to(item)
        node, index = ancestors[-1]
        while getattr(node, ""children"", None):
            node = node.children[index]
            index = bisect.bisect_left(node.contents, item)
            ancestors.append((node, index))
        node, index = ancestors.pop()
        node.insert(index, item, ancestors)

    def remove(self, item):
        current = self._root
        ancestors = self._path_to(item)

        if self._present(item, ancestors):
            node, index = ancestors.pop()
            node.remove(index, ancestors)
        else:
            raise ValueError(""%r not in %s"" % (item, self.__class__.__name__))

    def __contains__(self, item):
        return self._present(item, self._path_to(item))

    def __iter__(self):
        def _recurse(node):
            if node.children:
                for child, item in zip(node.children, node.contents):
                    for child_item in _recurse(child):
                        yield child_item
                    yield item
                for child_item in _recurse(node.children[-1]):
                    yield child_item
            else:
                for item in node.contents:
                    yield item

        for item in _recurse(self._root):
            yield item

    def __repr__(self):
        def recurse(node, accum, depth):
            accum.append((""  "" * depth) + repr(node))
            for node in getattr(node, ""children"", []):
                recurse(node, accum, depth + 1)

        accum = []
        recurse(self._root, accum, 0)
        return ""\n"".join(accum)

    @classmethod
    def bulkload(cls, items, order):
        tree = object.__new__(cls)
        tree.order = order

        leaves = tree._build_bulkloaded_leaves(items)
        tree._build_bulkloaded_branches(leaves)

        return tree

    def _build_bulkloaded_leaves(self, items):
        minimum = self.order // 2
        leaves, seps = [[]], []

        for item in items:
            if len(leaves[-1]) < self.order:
                leaves[-1].append(item)
            else:
                seps.append(item)
                leaves.append([])

        if len(leaves[-1]) < minimum and seps:
            last_two = leaves[-2] + [seps.pop()] + leaves[-1]
            leaves[-2] = last_two[:minimum]
            leaves[-1] = last_two[minimum + 1:]
            seps.append(last_two[minimum])

        return [self.LEAF(self, contents=node) for node in leaves], seps

    def _build_bulkloaded_branches(self, (leaves, seps)):
        minimum = self.order // 2
        levels = [leaves]

        while len(seps) > self.order + 1:
            items, nodes, seps = seps, [[]], []

            for item in items:
                if len(nodes[-1]) < self.order:
                    nodes[-1].append(item)
                else:
                    seps.append(item)
                    nodes.append([])

            if len(nodes[-1]) < minimum and seps:
                last_two = nodes[-2] + [seps.pop()] + nodes[-1]
                nodes[-2] = last_two[:minimum]
                nodes[-1] = last_two[minimum + 1:]
                seps.append(last_two[minimum])

            offset = 0
            for i, node in enumerate(nodes):
                children = levels[-1][offset:offset + len(node) + 1]
                nodes[i] = self.BRANCH(self, contents=node, children=children)
                offset += len(node) + 1

            levels.append(nodes)

        self._root = self.BRANCH(self, contents=seps, children=levels[-1])

class BPlusTree(BTree):
    LEAF = _BPlusLeaf

    def _get(self, key):
        node, index = self._path_to(key)[-1]

        if index == len(node.contents):
            if node.next:
                node, index = node.next, 0
            else:
                return

        while node.contents[index] == key:
            yield node.data[index]
            index += 1
            if index == len(node.contents):
                if node.next:
                    node, index = node.next, 0
                else:
                    return

    def _path_to(self, item):
        path = super(BPlusTree, self)._path_to(item)
        node, index = path[-1]
        while hasattr(node, ""children""):
            node = node.children[index]
            index = bisect.bisect_left(node.contents, item)
            path.append((node, index))
        return path

    def get(self, key, default=None):
        try:
            return self._get(key).next()
        except StopIteration:
            return default

    def getlist(self, key):
        return list(self._get(key))

    def insert(self, key, data):
        path = self._path_to(key)
        node, index = path.pop()
        node.insert(index, key, data, path)

    def remove(self, key):
        path = self._path_to(key)
        node, index = path.pop()
        node.remove(index, path)

    __getitem__ = get
    __setitem__ = insert
    __delitem__ = remove

    def __contains__(self, key):
        for item in self._get(key):
            return True
        return False

    def iteritems(self):
        node = self._root
        while hasattr(node, ""children""):
            node = node.children[0]

        while node:
            for pair in itertools.izip(node.contents, node.data):
                yield pair
            node = node.next

    def iterkeys(self):
        return itertools.imap(operator.itemgetter(0), self.iteritems())

    def itervalues(self):
        return itertools.imap(operator.itemgetter(1), self.iteritems())

    __iter__ = iterkeys

    def items(self):
        return list(self.iteritems())

    def keys(self):
        return list(self.iterkeys())

    def values(self):
        return list(self.itervalues())

    def _build_bulkloaded_leaves(self, items):
        minimum = self.order // 2
        leaves, seps = [[]], []

        for item in items:
            if len(leaves[-1]) >= self.order:
                seps.append(item)
                leaves.append([])
            leaves[-1].append(item)

        if len(leaves[-1]) < minimum and seps:
            last_two = leaves[-2] + leaves[-1]
            leaves[-2] = last_two[:minimum]
            leaves[-1] = last_two[minimum:]
            seps.append(last_two[minimum])

        leaves = [self.LEAF(
            self,
            contents=[p[0] for p in pairs],
            data=[p[1] for p in pairs])
                  for pairs in leaves]

        for i in xrange(len(leaves) - 1):
            leaves[i].next = leaves[i + 1]

        return leaves, [s[0] for s in seps]

def main():
    bt = BTree(2)
    l = range(20, 0, -1)
    bt.insert('박씨')
    bt.insert('정씨')
    bt.insert('김씨')
    bt.insert('이씨')
    bt.insert('황씨')

    BP = BPlusTree(bt)

    BP.insert('박', '박씨')   
    for i in range(0,5):
        print list(bt)[i]

    print BP.values()[0]
    print BP.keys()[0]
    print BP.items()[0]

    print BP.get('박씨')
    #for i, item in enumerate(l):
    #    bt.insert(item)
    #    print list(bt)

if __name__ == '__main__':
    #unittest.main()
    main()


",sql,html,0.0014434147587917693,0.06173491267387575,0.4675560567928674,2.245222167225078e-06,0.0008196875145523759,8.059883044434105e-05,0.24394410970117072,0.2237978100981717,0.0006211644079587974
"def lcs(str1, str2):
    matrix = [[0] * (len(str2) + 1) for i in range(len(str1) + 1)]

    for i, x in enumerate(str1):
        for j, y in enumerate(str2):
            if x == y:
                matrix[i+1][j+1] = matrix[i][j] + 1
            else:
                matrix[i+1][j+1] = max(
                    matrix[i+1][j],
                    matrix[i][j+1]
                )

    result = """"
    x, y = len(str1), len(str2)
    while x != 0 and y != 0:
        if matrix[x][y] == matrix[x-1][y]:
            x -= 1
        elif matrix[x][y] == matrix[x][y-1]:
            y -= 1
        else:
            result = str1[x-1] + result
            x -= 1
            y -= 1

    return result",python,python,3.780901040672328e-05,0.0003188119010364348,3.4538746118824965e-06,6.919175316309876e-06,0.0006949587238567746,0.0013782440675989569,0.996002501531928,0.001411937072618883,0.00014536464262588123
"def lcs(X, Y): 
    # find the length of the strings
    m = len(X)
    n = len(Y)
  
    # declaring the array for storing the dp values 
    L = [[None]*(n+1) for i in range(m+1)] 
  
    """"""Following steps build L[m+1][n+1] in bottom up fashion 
    Note: L[i][j] contains length of LCS of X[0..i-1] 
    and Y[0..j-1]""""""
    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0 : 
                L[i][j] = 0
            elif X[i-1] == Y[j-1]: 
                L[i][j] = L[i-1][j-1]+1
            else: 
                L[i][j] = max(L[i-1][j] , L[i][j-1]) 
  
    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] 
    return L[m][n] 

# Driver program 
X = ""lmnopq""
Y = ""abclmnopq""
print(""Length of LCS is "", lcs(X, Y))",python,python,0.00682076206689991,0.00024071411940821072,0.0011768166532851805,0.00014454721528869854,0.09305033279039951,0.006151126126442788,0.8197089195810302,0.045588448405301206,0.02711833304194418
"def array_sort(array):
  # Iterate over the array
  for i in range(len(array)):
    # Find the minimum element
    min_position = i
    for j in range(i + 1, len(array)):
      if array[min_position] > array[j]:
        min_position = j

    # Swap minimum element to current position
    array[i], array[min_position] = array[min_position], array[i]
  
  return array",python,matlab,3.144441420928826e-06,3.833326528417832e-08,1.548588866690795e-07,4.434074223469768e-09,3.157792349398062e-08,0.9999959614100258,3.973859262673601e-07,6.9447463413986514e-09,2.606137308589089e-07
"import requests
from bs4 import BeautifulSoup

url = 'https://www.imdb.com/chart/top?sort=us,asc'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

movie_names = []
for div in soup.find_all('div', {'class': 'lister-list'}):
  for h3 in div.find_all('h3'):
    movie_names.append(h3.find('a').text)

print(movie_names)",css,html,5.88500564204729e-16,1.042347552816644e-07,0.9999993705359324,5.233762067178415e-07,1.316385797929903e-10,3.110558437218844e-10,4.317221707279103e-10,7.76223803265151e-10,2.0246482220260928e-10
"def MatrixMultiplication(A, B): 
    # Dimensions of A 
    m = len(A) 
    p = len(A[0]) 
    # Dimensions of B 
    q = len(B) 
    r = len(B[0]) 
    # Generating the result matrix 
    # C with dimensions m x r 
    C = [[0 for row in range(0, r)] for col in range(0, m)] 
    for i in range(0, m): 
        for j in range(0, r): 
            for k in range(0, p): 
                # Performing the multiplication operation 
                C[i][j] += A[i][k] * B[k][j] 
    # Printing the result matrix 
    return C",python,python,1.8732425523771208e-06,3.853692886377052e-07,7.092295466781356e-06,7.688697802901435e-08,2.8516615668543452e-06,0.03571331503809131,0.9641974092110847,4.239207061676751e-05,3.460422435456806e-05
"def diffHighestLowest(arr):
    lowest = min(arr)
    highest = max(arr)
    return highest - lowest

arr = [12, 24, 3, 8, -1]
difference = diffHighestLowest(arr)
print(difference)  # 25",python,matlab,0.0004236061840302215,0.004749273571209615,0.00040727595865708716,8.978029163573344e-05,0.00013114479381008055,0.8092203303931612,0.18466586684453282,2.6834555852370355e-05,0.0002858874071106531
"class VendingMachine():
    def __init__(self):
        # All the items and their prices
        self.products = {
            'Chips': 1.5,
            'Soda': 1.25,
            'Snickers': 2.25
        }
    
    def dispenseItem(self, inputAmount):
        for item in self.products:
            if self.products[item] <= inputAmount:
                print('Dispensing: ', item)
                inputAmount -= self.products[item]
                break
        self.calculateChange(inputAmount)
        
    def calculateChange(self, inputAmount):
        print('Change remaining: ', inputAmount)

vm = VendingMachine()
vm.dispenseItem(2.75)",css,python,0.00013483845648499623,0.18460885966558427,0.08941064769510165,3.712037294258819e-06,0.0038560322952278982,1.7021518442082828e-05,0.7001198846754759,0.02180753088624796,4.1472770141095724e-05
"""""""
Class for a given type of rational number, with methods for adding, subtracting, multiplying, and dividing rational numbers.
""""""

class Rational:
    def __init__(self, numerator, denominator):
        self.numerator = numerator
        self.denominator = denominator

    def __str__(self):
        return f""{self.numerator}/{self.denominator}""

    def add(self, other):
        numerator = self.numerator * other.denominator + self.denominator * other.numerator
        denominator = self.denominator * other.denominator
        return Rational(numerator, denominator)
    
    def subtract(self, other):
        numerator = self.numerator * other.denominator - self.denominator * other.numerator
        denominator = self.denominator * other.denominator
        return Rational(numerator, denominator)
    
    def multiply(self, other):
        numerator = self.numerator * other.numerator
        denominator = self.denominator * other.denominator
        return Rational(numerator, denominator)
    
    def divide(self, other):
        numerator = self.numerator * other.denominator
        denominator = self.denominator * other.numerator
        return Rational(numerator, denominator)",python,python,0.0030295636475598463,0.023232232719380887,0.02846637175584641,0.0007843127862881786,0.006273682124007804,0.0004884627968982203,0.9157506625598396,0.01814926224727123,0.003825449362907908
"cur.execute(""UPDATE orders SET customer_name = %s, price = %s WHERE order_id = %s"", (customer_name, price, order_id))
conn.commit()",sql,sql,0.002907442495689936,0.03102809634097995,0.002846162761993226,0.0005869596004587306,0.0010896958967589801,0.001636159008256632,0.011939108003552558,0.9431025864141744,0.004863789478135651
"def sum_of_squares(numbers):
    squares_sum = []
    for i in range(len(numbers)):
        squares_sum.append(sum([num**2 for num in numbers[:i+1]]))
    return squares_sum",python,matlab,8.752691231426904e-10,1.01949724202616e-13,1.3281422925445569e-08,3.3747387856257456e-06,2.8999515628742893e-09,0.9999959947630629,6.056517938455351e-07,6.708681751125796e-09,1.0809300497642224e-09
"def multiply(a, b):
    return a * b

print(multiply(2, 3))",python,python,0.0005597062989074148,0.002759366192002012,0.001683105059041057,8.080659777218204e-05,0.00036806711307364227,8.717735040672064e-05,0.9925826879231437,0.0012595767852812724,0.0006195066803716606
"def compare_strings(str1, str2):
    str1 = str1.lower()
    str2 = str2.lower()
    
    return str1 == str2",python,javascript,0.0006304094891914443,0.0007152767676640104,1.1652558039325885e-06,0.00015823770037640307,0.7933115856102356,0.0001785422047669317,0.1975128827295516,0.006483128262983924,0.0010087719794261837
"def is_armstrong_number(num):
  n = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit**n
    temp //= 10
  return sum == num",python,matlab,2.4722447182775835e-10,1.217820387904097e-11,7.96028680582844e-09,3.4530842022838878e-09,1.5216183341010086e-09,0.9999999859330064,8.595745430693185e-11,1.6615530541849827e-10,6.204888582788997e-10
"odd_list = []
even_list = []

for x in list:
    if x % 2 == 0:
        even_list.append(x)
    else:
        odd_list.append(x)
        
print(""Odd numbers: "", odd_list)
print(""Even numbers: "", even_list)",python,matlab,4.9027374917432756e-05,0.0002829393446013758,0.00017891768993964928,0.00017958808949696046,8.393754174131785e-05,0.9990788539059811,6.442335545490488e-06,7.367249377146128e-05,6.662122400505802e-05
"# Function to print the pyramid pattern
def print_pyramid(n):
    k = 2*n - 2
 
    # outer loop to print rows
    for i in range(0, n):
      
        # inner loop to print columns
        for j in range(0, k):
            print(end="" "")
      
        # decrementing k after each loop
        k = k - 1
     
        # inner loop to print foo pattern
        for j in range(0, i+1):       
            print(""* "", end="""")
        print(""\r"")

# Driver Code
n = 5
print_pyramid(n)",python,python,3.3318301489222856e-06,1.530176870325175e-05,5.494235501177583e-05,8.716056985860034e-07,0.001548452853154677,0.0022571750132262536,0.995601333287172,0.0004415516993320623,7.703958755233188e-05
"def removeVowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    new_string = '' 
    for char in string: 
        if char not in vowels: 
            new_string += char 
    return new_string 

string = 'My name is John'
removeVowelString = removeVowels(string) 
print(removeVowelString)",python,java,6.079660724197431e-09,1.4731500738941014e-05,1.4820442280162374e-05,0.9932290112664697,1.2742344279489206e-09,1.2556958353077012e-06,0.006224983918631313,0.00051265331961739,2.536502532035778e-06
"import numpy as np
from sklearn.feature_extraction.text import CountVectorizer

def vectorize_corpus(corpus):
    # Initialize the CountVectorizer
    vectorizer = CountVectorizer()
    # Fit the corpus
    X = vectorizer.fit_transform(corpus)
    # Convert the sparse matrix to numpy array
    X = X.toarray()
    # Return the vectorized corpus and the corresponding feature names
    return X, vectorizer.get_feature_names()",python,typescript,0.055962888779650104,0.011775588589346953,0.0013064183197887408,3.051994760598885e-05,0.0006214397406177619,3.608969092347444e-05,0.2555891972077129,8.179439068684068e-05,0.6745960633336674
"import random

# define a function to generate random numbers
def generate_random(start, end):
	return random.randint(start, end)

# generate a random number in the given range
start = 10
end = 15
print(generate_random(start, end))",python,python,1.4744203595071659e-05,0.00010524342835427418,1.3585148665382513e-05,1.233359513340508e-06,0.00038624455622916223,2.417349326436117e-07,0.9982744275060678,0.001084732070177837,0.00011954799246437164
"import heapq

def create_heap(items):
 heapq.heapify(items)

def add_item(items, item):
 heapq.heappush(items, item)

def pop_item(items):
 return heapq.heappop(items)

items = [4, 5, 2, 33, 1]
create_heap(items)
add_item(items, 6)
pop_item(items)",python,python,0.0008201275523524489,0.19879472229206438,0.005731191742109754,0.00015739687024064102,0.09797314386532817,9.172451953995681e-05,0.6952765090050835,0.0011314161939589018,2.3767959322304308e-05
"import re

def contains_numbers(string):
    """"""Classify if a given string contains any numbers.""""""
    return bool(re.search(r'\d', string))

# Usage Example
string = ""password123""
contains_numbers = contains_numbers(string)
print(contains_numbers)  # True",python,java,6.604804707241579e-19,1.3337008421551171e-11,9.648333076350276e-11,0.9999999900825255,1.3894683212555615e-19,1.7166420366902862e-15,9.5559722645674e-09,2.509165863147486e-10,7.635712618873008e-13
"import re

pattern = r'myname=(?P<name>.+?)&email=(?P<email>.+?)&age=(?P<age>.+)'
string = 'myname=Linda&email=linda@example.com&age=30'

# Extract values
match = re.search(pattern, string)
name = match.group('name')
email = match.group('email')
age = match.group('age')

# Print results
print('Name:', name)
print('Email:', email)
print('Age:', age)",python,java,2.9124926301024265e-11,1.4659789403585163e-05,1.4286996481239578e-05,0.9999536823729517,1.561038351691148e-13,3.988371341579059e-10,1.7297626842525888e-05,6.922030278341658e-08,3.565899957650035e-09
"import re

HEX_COLOR_REGEX = re.compile(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')",python,html,0.019518412638421596,0.0010372592834589666,0.8903954206331386,4.77543016320683e-06,0.00037782835097426005,0.0001807787826082367,0.08745745745481771,0.00027781246297658096,0.0007502549634408149
"def generate_fibonacci_series(n):
    print(""0"")
    current = 0
    next = 1
    for i in range(0, n):
        print(current)
        temp = current
        current = next
        next = temp + next",python,matlab,0.00045714765966466147,0.0009165033024394805,0.0006523314787419312,6.886416788022521e-05,0.00011467650024192984,0.956273742670223,0.03811210558368743,0.0029616660164509165,0.00044296262067055085
"import nltk
import sklearn

# load the data 
data = list(nltk.corpus.gutenberg.sents('melville-moby_dick.txt'))

# pre-process the data to remove stopwords, punctuation, numbers and special characters, and lowercase it
processed_data = [nltk.word_tokenize(str(sentence)) for sentence in data] 
processed_data = [nltk.pos_tag(sentence) for sentence in processed_data]

# create the features for the model 
featuresets = [(nltk.pos_tag(sentence), category) for sentence, category in processed_data]

# split the data into training and testing sets
training_set = featuresets[:int(len(featuresets)*0.8)]
testing_set = featuresets[int(len(featuresets)*0.8):]

# create the text mining model using Naive Bayes 
text_classifier = SklearnClassifier(naive_bayes.MultinomialNB())
 
# Train the model 
text_classifier.train(training_set)

# Test the accuracy of the model 
print('Text Mining Model Accuracy: ', nltk.classify.accuracy(text_classifier, testing_set))",python,typescript,0.0009475516948826787,0.0010549547571149683,0.0002175351674342848,1.7968806237512537e-05,8.384606220129184e-05,1.3597452003555636e-07,0.0027597517837278647,1.54619307977919e-05,0.9949027938230837
"def factorial(number):
  total = 1
  while number > 0: 
    total *= number
    number -= 1
  return total

print(factorial(5))",python,python,3.1289166072741617e-06,0.00010761758243823784,3.4685277071794325e-05,1.4710979645218852e-06,3.761216855472155e-06,1.0320223247868776e-06,0.999832478081221,6.271478034538918e-06,9.554327482619609e-06
"# Function to calculate the Mertens function
def mertens_function(m):
    # Initialize the result
    res = 0
    
    # Iterate over all numbers from 1 to m
    for j in range(1, m+1):
        res += moebius_function(j)
    
    return res

# Function to calculate the Moebius function
def moebius_function(n):
    # Initialize result 
    res = 1
    
    # Iterate over all factors
    for i in range(2, n + 1):
        cnt = 0
        while n % i == 0:
            n = int(n / i)
            cnt += 1
           
        if cnt > 1: 
            res = 0
            break
        if cnt == 1: 
            res = -res 
        
    return res

# Main Program
m = int(input(""Enter the range: ""))

res = mertens_function(m)

print(""The Mertens function of"", m, ""is"", res)",python,javascript,0.0005107003261837956,0.00038392846697736,7.433242592935402e-05,0.00019082080614315537,0.9596237209003482,2.1474076688626347e-06,0.03876872453273453,0.00040588589104321993,3.973924297163863e-05
"def sort_descending(list):
    sorted_list = sorted(list, reverse=True)
    return sorted_list",python,python,0.0024341039776663016,0.009106758946361083,0.0062608584934444305,0.00027276620780972486,0.0041492793211643265,0.0011451852822378862,0.9725176460328079,0.0034139172784795504,0.0006994844600287522
"def bin_from_text(text):
    bin_text = """"
    for char in text:
        bin_text += bin(ord(char)).lstrip(""0b"") + "" ""
    return bin_text",python,python,0.434025122012326,0.020743258984085182,0.0009950253156948761,1.145785032018122e-05,0.0007221571434375335,0.0015469111515802507,0.5323078572327481,0.008990337295636572,0.0006578730141713921
"import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.datasets import mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize our data
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# Reshape image data
x_train = x_train.reshape((x_train.shape[0], 28, 28, 1))
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1))

# Convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

# Create our neural network
model = keras.Sequential([
 keras.layers.Conv2D(32, 
  kernel_size=(3, 3),
  activation='relu',
  input_shape=(28, 28, 1)
 ),
 keras.layers.MaxPooling2D(pool_size=(2, 2)),
 keras.layers.Conv2D(64,
  kernel_size=(3, 3),
  activation='relu'
 ),
 keras.layers.MaxPooling2D(pool_size=(2, 2)),
 keras.layers.Flatten(),
 keras.layers.Dense(128, activation='relu'),
 keras.layers.Dense(10, activation='softmax')
])
model.compile(
 optimizer='adam',
 loss=keras.losses.categorical_crossentropy,
 metrics=['accuracy']
)

# Fit our model
model.fit(x_train, y_train, batch_size=64, epochs=2, verbose=1)

# Evaluate our model
score = model.evaluate(x_test, y_test, verbose=0)

# Print our model's accuracy
print('Test loss:', score[0])
print('Test accuracy:', score[1])",python,python,0.006479100693147131,0.039082424439244215,0.1765868614543305,0.000150533341254793,3.2116799842276086e-05,0.006186781698149476,0.6808284167528246,0.00020168743337559958,0.09045207738783143
"""""""
Create a Python script that monitors a given URL and sends an email notification if there is an error while accessing the resource
""""""

import requests
import smtplib

# Monitor the URL
URL = 'https://example.com'
response = requests.get(URL)
status_code = response.status_code

# Send an email if there is an error
if status_code == 404:
    # Set up the email server
    server = smtplib.SMTP('smtp.example.com', 25)
    server.ehlo()
    server.starttls()

    # Set the 'from' and 'to' addresses
    from_email = 'monitor@example.com'
    to_email = 'admin@example.com'

    # Construct the message
    message = 'Error 404 on ' + URL

    # Send the email
    server.sendmail(from_email, to_email, message)
    server.quit()",python,java,4.9279260854758065e-15,4.086343355720579e-06,4.57815931959691e-05,0.9999267964912371,2.3945364033468343e-06,5.741985155419174e-10,3.490662012372171e-07,4.8877300745932337e-08,2.0542518102311295e-05
"import nltk
import numpy as np
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentiment_score(text): 
   """"""
   Computes the sentiment score of a given text.
   """"""
   sid = SentimentIntensityAnalyzer()
   scores = sid.polarity_scores(text)
   sentiment = np.argmax(list(scores.values()))
   return sentiment 

if __name__ == '__main__':
    text = 'I love this film'
    print(sentiment_score(text))",python,python,0.003206128079102123,0.03204117614820312,0.00041494006023220256,6.15965562545723e-05,2.579718234320947e-05,0.0001121074515954229,0.8561047890952355,0.006492838578389253,0.10154062684864461
"# This program creates the string ""999,888,777,666,555"".

# create a list of numbers
list = [999, 888, 777, 666, 555]

# join the values in the list
output = "","".join([str(item) for item in list])

# print the output 
print(output) # Outputs: 999,888,777,666,555",sql,bash,0.40388707604433827,0.014415823753921905,0.24980439905541327,0.0007043898277337478,0.04126017688601961,0.0007526231465663167,0.09021265160278384,0.19484443488592756,0.004118424797295642
"import pandas as pd

# Load the input dataset
data = pd.read_csv(""data.csv"")

# Split into X and y
X = data.iloc[:,0:6]
y = data.iloc[:,6]

# Build the model
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X,y)

# Make predictions
predictions = model.predict(X)",python,python,0.33478999913791013,0.09274933260415334,0.0065371352245059185,4.4956008327220315e-06,5.732683297518732e-05,1.648073392725712e-05,0.5598072184302689,6.9252881450961426e-06,0.0060310861472814845
"def reverse_string(string):
    result = """"
    for i in range(len(string) - 1, -1, -1):
        result += string[i]
    return result

reverse_string(""hello"")",python,python,9.003564281469997e-11,3.9609937700996745e-06,5.444383914822126e-07,0.0062124345417656395,2.5503296740446867e-12,9.760353396404083e-08,0.9936556843256578,0.000127186875381677,9.112891345888761e-08
"def isIsomorphic(s1, s2): 
        if len(s1) != len(s2): 
            return False

        mapping = {} 
        for i in range(len(s1)): 
            if s1[i] in mapping: 
                if mapping[s1[i]] != s2[i]: 
                    return False
            else: 
                if s2[i] in mapping.values(): 
                    return False
                mapping[s1[i]] = s2[i] 

        return True

s1 = ""add""
s2 = ""egg""

if(isIsomorphic(s1, s2) == True): 
    print(""Yes"") 
else: 
    print(""No"")",python,python,0.00025938779578717956,0.0013092502054633684,0.0012933228957426716,4.2055858609435926e-05,3.5921042967796656e-05,0.000841891682720079,0.9956706709628017,0.0004168680760669825,0.0001306314798405854
"def triangle_numbers(n):
    res = 0
    for i in range(n):
        res += i+1
    return res

result = triangle_numbers(n)
print(result) # output: 15",python,python,2.55457756990785e-05,0.0005109496158511903,5.080991381009801e-05,8.233762605202633e-07,2.9158080376628646e-06,0.0005602779999509795,0.9987353361035447,0.00011109906758859839,2.2423392573588744e-06
"def calculator():
    while True:
        operation = input('''
        Please type in the math operation you would like to complete:
        + for addition
        - for subtraction
        * for multiplication
        / for division
        ''')

        number_1 = int(input('Please enter the first number: '))
        number_2 = int(input('Please enter the second number: '))

        if operation == '+':
            print('{} + {} = '.format(number_1, number_2))
            print(number_1 + number_2)

        elif operation == '-':
            print('{} - {} = '.format(number_1, number_2))
            print(number_1 - number_2)

        elif operation == '*':
            print('{} * {} = '.format(number_1, number_2))
            print(number_1 * number_2)

        elif operation == '/':
            print('{} / {} = '.format(number_1, number_2))
            print(number_1 / number_2)

        else:
            print('You have not typed a valid operator, please run the program again.')
            break

calculator()",python,bash,0.8736992437710953,0.005816456429823486,3.504810245688947e-05,2.1377221954685553e-05,8.261426921210331e-05,1.6811564849174064e-06,0.11945429960092192,0.00018327884635516734,0.0007060006016956432
"def count_vowels(s):
  count = 0
  vowels = ""aeiou""
  
  for char in s:
    if char in vowels: 
      count += 1
  
  return count",python,python,0.0001713465489245073,0.0029755504892427774,0.00052674182441053,6.308988679257107e-06,0.0001252430177589453,0.0031036749285393932,0.9921998705676986,0.0007216979928539966,0.00016956564189176554
"def mean(data):
    return sum(data) / len(data)

def median(data):
    sorted_data = sorted(data)
    mid = len(data)//2
    if len(data) % 2 == 0:
        return (sorted_data[mid] + sorted_data[mid-1])/2
    else:
        return sorted_data[mid]

def mode(data):
    counted_data = dict()
    for item in data:
        if item not in counted_data:
            counted_data[item] = 1
        else:
            counted_data[item] += 1
    highest_count = 0
    modes = []
    for key, value in counted_data.items():
        if value > highest_count:
            modes = [key]
            highest_count = value
        elif value == highest_count:
            modes.append(key)
    if len(modes) == len(data):
        modes = []
    return modes",python,css,5.470975438759269e-05,0.5735287278397897,0.021516189268343124,1.1516223892389745e-05,0.00046990409343275794,0.3977513251962516,0.003257396948021485,0.0030011576156666786,0.0004090730602148331
"@app.route(""/get_top_user"", methods=[""GET""])
def get_top_user():
    user_list = Users.query.order_by(desc(Users.score)).first()
    return jsonify(user_list.serialize())",python,css,0.0015946642082373139,0.6715302818064708,0.024035906095438656,0.0005680689543728618,0.0008494380752830575,0.00038636395513669025,0.23880618554610508,0.03198039059479139,0.03024870076416431
"def fib(n):
 a, b = 0, 1
 while a < n:
 print(a, end="" "")
 a, b = b, a+b
 print()

n = int(input(""Enter the number of terms: ""))
fib(n)",python,python,0.0003522510359240872,0.0006886575527305814,0.00038591518158415604,0.003650967012301678,0.0002406292518027671,1.4092993832155054e-08,0.9942362885611911,0.000113360870511882,0.00033191644095967684
"def is_palindrome(word):
    reversed_word = word[::-1]
    if word == reversed_word:
        return True
    else:
        return False",python,python,0.023337483056917723,0.0017428823332834018,0.01013022564992592,2.1410341803178368e-05,0.00021969974957630458,0.00017833340787532038,0.9637505082582822,0.0003045232418323169,0.00031493396050334053
"user_preferences = {
    'language': 'english',
    'font_size': 12,
    'background_color': '#FFFFFF'
}",css,python,0.012113924595821635,0.21751322793869066,0.21939632882716448,0.005005520053197751,0.020846143576061904,0.027438350048023034,0.32283795334151594,0.0012691447991050242,0.17357940682041953
"def multiply_add_one(x, y):
    print(x + 1 * y)",python,python,2.035461490781966e-12,3.715669161269778e-08,7.58296989384162e-11,3.9953120795015435e-15,1.6246227400490235e-13,2.0235261176510354e-16,0.99999991681412,4.5950842141535296e-08,3.1422001815800516e-13
"import tensorflow as tf
from tensorflow import keras

# Define model
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),
    tf.keras.layers.GlobalAveragePooling1D(),
    tf.keras.layers.Dense(24, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile Model
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

# Train the model
model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels))

# Make predictions
sentiment = model.predict(testing_padded)",python,python,0.14956077773982476,0.009004039363415303,0.011621864325406997,2.630732566024099e-05,2.6460342064972306e-05,0.0005715374745525247,0.8072855355324767,4.1952857324221e-06,0.021899282610866044
"def sortDescending(numbers):
    for i in range(len(numbers)): 
        for j in range(i):
            if numbers[j] < numbers[j+1]:
                temp = numbers[j] 
                numbers[j] = numbers[j+1] 
                numbers[j+1] = temp 
  
    return numbers

print(sortDescending([6,2,12,5]))",python,java,3.179424271239232e-05,1.7861186037124705e-05,0.0003498025754029929,0.6272162090322626,0.00041730991275565674,2.9044109506104247e-06,0.37183791132833915,8.380875744591603e-05,4.239855409344609e-05
"def is_prime(n): 
    if n <= 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False
    return True",python,python,1.583796435139497e-07,2.829063375768894e-08,3.962396070607732e-06,9.785096474935669e-09,2.3007483727141916e-08,9.283407907303936e-05,0.9999028516607115,9.45152148318359e-08,3.78860726559015e-08
"class StringComparator:

def __init__(self, string1, string2):
 self.string1 = string1
 self.string2 = string2

def is_equal(self):
 return self.string1 == self.string2

def is_different(self):
 return self.string1 != self.string2

def is_similar(self, threshold=0.5):
 distance = edit_distance(self.string1, self.string2)
 max_length = max(len(self.string1), len(self.string2))

 return distance / max_length < threshold",python,python,0.00017790509430224628,0.0062232147010504455,0.02685221075527326,1.964718649145024e-05,0.00010503523562968682,1.0875879038926764e-05,0.9136006838810413,0.05261018748253291,0.0004002397846397156
"import json

article_data = {
    'name': 'Bob Dylan', 
    'prize': 'Nobel Prize for Literature',
    'year': 2016,
    'description': 'having created new poetic expressions within the great American song tradition'
}

with open('article_data.json', 'w') as outfile:  
    json.dump(article_data, outfile)",css,css,0.19252877778610958,0.7310795543823959,0.0025254420028944795,0.0024130252002985855,0.0003880761299594141,0.0020478173587328676,0.026746063590545977,0.00022049483351320597,0.04205074871555004
"# File name: most_frequent_words.py

def most_frequent_words(text):
 words = text.split()
 word_freq = {}
 
 for word in words:
 if word in word_freq:
 word_freq[word] += 1
 else:
 word_freq[word] = 1
 
 words = sorted(word_freq.items(), key = lambda x: x[1], reverse = True)
 
 return words

result = most_frequent_words('The cat was playing in the garden. The cat was chasing a butterfly.')
print(result)
# Output: [('The', 2), ('cat', 2), ('was', 2), ('playing', 1), ('in', 1), ('the', 1), ('garden.', 1), ('chasing', 1), ('a', 1), ('butterfly.', 1)]",python,python,0.16805780552149485,0.043562002921809645,0.008042783005908109,1.6656100767673022e-05,0.002807507655761174,0.00032019260781674134,0.748760098662947,0.028033164138349106,0.0003997893851457464
"def linearSearch(arr, target):
  for i in range(len(arr)):
    if arr[i] == target:
      return i
  return -1 # target not found",python,matlab,4.37324026526643e-06,1.000120318499999e-05,1.1250155078973096e-05,1.5482890586787309e-06,6.829787189391357e-07,0.6030840863056962,0.39687702504221894,4.609458848116546e-06,6.423326929844165e-06
"import random

def approximate_probability(event, iterations):
    num_occurences = 0
    for i in range(iterations):
        if event():
            num_occurences += 1
    return num_occurences / iterations",python,python,0.0007571039384233067,0.0005911518191135055,0.0010957805260763908,2.9899407523532504e-05,7.922015533043195e-05,0.31495213699190033,0.6736578251175085,0.008551428780623956,0.0002854532635000947
"# Create an empty string 
seq = """"

# Loop through the alphabet 
for i in range(65, 75):
    # Convert the ASCII code to a character 
    seq += chr(i)
# Print the output 
print(seq)",python,typescript,0.0003607367074618902,0.0010130881321363389,0.003074176564538271,0.0014196364757173567,0.0004905259152855815,0.0025295113580403087,0.39961755601312104,0.003414661468056901,0.5880801073656423
"import random

def generate_random_even_number():
    n = 0
    while n < 1000 or n > 9999:
        n = 0
        for i in range(4):
            n += random.randint(0, 8) * (10 ** i)
        if n % 2 == 0:
            break
    return n",python,matlab,8.523493512591842e-06,1.6481775645233887e-06,7.011567210474355e-06,1.2384988750468245e-07,1.58159856773835e-06,0.8107605709761533,0.18921408351717214,1.1176548611099084e-06,5.339165070621657e-06
"import cv2
import numpy as np
import tensorflow as tf

# Load the COCO class labels .txt file
labels_file_path = tf.keras.utils.get_file('label.txt', 'https://raw.githubusercontent.com/qw3081020/models/master/label.txt')
with open(labels_file_path, 'r') as f:
    labels = [line.strip() for line in f.readlines()]

# Initialize the recognition model
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3)))
model.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))
model.add(tf.keras.layers.ZeroPadding2D((1, 1)))
model.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu'))
model.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2)))

model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(256, activation='relu'))
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dense(len(labels), activation='softmax'))

# Load model weights
model.load_weights('model.h5')

# Load the input image
image = cv2.imread('input_image.jpg')
image = cv2.resize(image, (300, 300))

# Use the model to predict the labels
labels_predicted = model.predict(np.expand_dims(image, axis=0))[0]

# Sort the labels by confidence
labels_sorted_by_confidence = [
    label for label, confidence in 
    sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True)
]

# Print the predicted labels
print(labels_sorted_by_confidence)",python,python,0.30668917359634157,0.007174033133484611,0.012478545513562261,0.012740582917942606,6.221741101785815e-05,1.9060267542586594e-06,0.6243694678758049,1.9021687726074073e-06,0.03648217135631916
"import numpy as np

def generate_matrix(m, n, k):
    matrix = np.random.randint(k + 1, high=9, size=(m, n))
    return matrix

m = 5
n = 5
k = 6
matrix = generate_matrix(m, n, k)
print(matrix)",python,python,0.0009850551779630107,0.00131395990878656,0.0006672785332429575,2.1408474859460946e-05,2.2161105767041704e-05,7.9098173208091e-06,0.9959763299123747,0.00029182169794895606,0.0007140753717364838
"def findCombinations(arr, target): 
    result = [] 
    for i in range(len(arr)-2): 
        for j in range(i + 1, len(arr)-1):  
            for k in range(j + 1, len(arr)): 
                if arr[i] + arr[j] + arr[k] == target: 
                    temp = [] 
                    temp.append(arr[i]) 
                    temp.append(arr[j]) 
                    temp.append(arr[k]) 
                    result.append(temp) 
  
    return result
  
# Driver Code 
arr = [2, 3, 4, 5] 
X = 9
print(findCombinations(arr, X))",python,matlab,3.2857930796427754e-12,2.8129444602429135e-11,9.921354682302078e-12,4.0543492293823624e-12,2.5960165351060154e-12,0.9999999869393115,1.2987207508609464e-08,2.9061458491677942e-12,2.2587966556125505e-11
"def greatest_common_divisor(a, b):
    if a < b:
        a, b = b, a

    while b > 0:
        a, b = b, a % b

    return a

result = greatest_common_divisor(12, 24)
print(result)",python,python,0.0007439024999844608,0.03729720030723239,0.0018888928522778133,0.00012517006921657195,0.0004924228646122335,0.01452830021590889,0.9418822626803645,0.0019547143734805674,0.0010871341369226599
"def generate_tree(h): 
    # h is the height of the tree
    # Initialize the number of spaces per line 
    n_spaces = h - 1
  
    # Generate the tree structure 
    for i in range(1, h+1): 
        # Print h-i spaces at the beginning of each line 
        for j in range(n_spaces): 
            print(end="" "") 
              
        # Print i stars at the end of each line 
        for j in range(i): 
            print(""* "", end="""") 
              
        # Move to the next line (Print a newline character) 
        print() 
          
        # Update the number of spaces used 
        n_spaces -= 1",sql,python,0.03220544635891975,8.764179399917454e-05,0.0006249654024686024,1.1447351186683763e-06,0.0014815369181000223,0.0007946036634775909,0.8205130118417693,0.00019796913654844875,0.14409368014959859
"positive_numbers = []
negative_numbers = []

for num in numbers:
 if num > 0:
  positive_numbers.append(num)
 else:
  negative_numbers.append(num)

print('Positive numbers:', positive_numbers)
print('Negative numbers:', negative_numbers)",python,matlab,4.3012171659522887e-07,1.5162095768646323e-09,1.6029814143710037e-06,9.216662464958257e-06,8.658164648059334e-07,0.9999730200066532,1.3971454375822533e-05,4.6951709154848943e-07,4.219236091300587e-07
"import re

IPs = [""123.235.123.245"", ""54.72.56.14"", ""182.193.146.172""]
for ip in IPs:
 ip_parts = ip.split('.')
 octet1 = ip_parts[0]
 octet2 = ip_parts[1]
 octet3 = ip_parts[2]
 octet4 = ip_parts[3]

 print(f'The first octet is {octet1}, the second is {octet2}, the third is {octet3}, and the fourth is {octet4}.')",python,typescript,0.008254398462798426,0.008966263000463054,0.05055394450284428,0.0001355971015501708,0.2967126152325669,0.004124329248618802,0.006669617467076933,0.00735661862360668,0.6172266163604748
"# Import libraries
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the data
X = np.loadtxt('data.csv', delimiter=', ',skiprows=1, usecols=[0,1])
y = np.loadtxt('data.csv', delimiter=', ', skiprows=1, usecols=[2], dtype=str)

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5)

# Create and train the model
model = LogisticRegression().fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_pred, y_test)
print('Model accuracy:', accuracy)",python,python,0.3352950370175852,0.09996576570739492,0.014843302307393898,3.198003099128877e-06,4.91652221717766e-05,1.3064143406204443e-05,0.517664551909089,7.205259438040841e-06,0.03215871043042191
"def filterStringDict(input):
    result = {}
    for key, value in input.items():
        # Check if value is a string
        if isinstance(value, str):
            # Add to result
            result[key] = value
    return result",python,matlab,2.1877836451728336e-06,0.39945664831204597,0.00010558936517035173,0.0013962593468776004,1.828846883163895e-05,0.5974043641349722,1.1876745550531164e-06,0.0016106082039880083,4.866709913963172e-06
"def read_int_even_odd():
    number = int(input(""Enter an integer: ""))
    if number % 2 == 0:
        print(""The number is even"")
    else:
        print(""The number is odd"")
    
read_int_even_odd()",python,python,0.00013086901014825012,0.0005116683254687627,0.00016258272723103923,0.0003116991797476466,0.00037921662077107813,3.793179569089614e-07,0.9982699229810061,0.00013965835650495286,9.400348116521181e-05
"def celsius_to_fahrenheit(celsius):
    """"""
    Convert Celsius Temperature to Fahrenheit.

    Parameters:
        celsius (float): Temperature in Celsius
        
    Returns:
        Temperature in Fahrenheit
    """"""
    return celsius * 9/5 + 32",python,python,0.008772979002112772,0.020613332873403376,0.010345101138790736,0.0008953336359390821,0.007608681290160148,0.017588082318590586,0.9143633587817429,0.004528799205393964,0.015284331753866516
"import random
import string

length = 10
chars = string.ascii_letters + string.digits
password = ''.join(random.choice(chars) for i in range(length))

print(password)",sql,sql,1.2412962664581921e-12,4.4179791002955394e-09,2.8950283616857033e-09,3.717146569752706e-05,3.761348975940544e-13,2.0200080523841646e-09,2.2712751408215735e-06,0.9999605477515312,1.729977531002503e-10
"def reverse_string_words(string): 
    words = string.split("" "") 
    words.reverse()
    return ' '.join(words)  
  
string = ""Python programming is fun""
print(reverse_string_words(string))",sql,java,8.594948732823672e-12,5.71309304932541e-07,2.6858097369820235e-07,0.9902616059212008,1.1642665584045477e-12,1.2266786247949946e-10,3.5895471743468054e-05,0.009701617209563007,4.137478701730111e-08
"import smtplib

sender = ‘sender@example.com’
receivers = ‘receiver@example.com’

message = “””
Subject: Sending Email using Python

This is a test e-mail message.
”””

try:
   smtpObj = smtplib.SMTP(‘localhost’)
   smtpObj.sendmail(sender, receivers, message)         
   print(“Successfully sent email”)
except SMTPException:
   print(“Error: unable to send email”)",python,java,9.18747296356222e-07,0.011043695098200941,0.009784290192952063,0.9545612552292696,0.0008162890948151213,4.2430453747328555e-05,0.01870909391250682,0.0009631863955522,0.004078840875659343
"import flask
from flask import request, redirect, url_for, render_template
from functools import wraps

app = flask.Flask(__name__)
app.config[""DEBUG""] = True

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if ""username"" not in flask.session:
            return redirect(url_for(""login"", next=flask.request.url))
        return f(*args, **kwargs)
    return decorated_function

@app.route(""/"")
@login_required
def home():
    pages = [
        {""title"": ""Python"", ""slug"": ""python""},
        {""title"": ""JavaScript"", ""slug"": ""javascript""},
        {""title"": ""HTML/CSS"", ""slug"": ""html-css""}
    ]

    return render_template(""cms.html"", pages=pages)

@app.route(""/login/"", methods=[""GET"", ""POST""])
def login():
    if request.method == ""POST"":
        flask.session[""username""] = request.form[""username""]
        return redirect(url_for(""home""))

    return render_template(""login.html"")

@app.route(""/logout/"")
def logout():
    flask.session.pop(""username"", None)
    return redirect(url_for(""login""))

app.run()",css,html,2.880972811762807e-05,3.476396680235318e-05,0.9999082421269764,1.4712119185609479e-07,3.34088971256264e-06,5.290376771591862e-08,2.0561617679291387e-05,1.4957822178121268e-06,2.5858635342906595e-06
"OldList = [5,5,5,2,1,2,3,5]
NewList = []

for Num in OldList:
    if Num not in NewList:
        NewList.append(Num)

print(NewList)",python,matlab,3.3535948623803694e-08,1.6501957661301164e-10,8.886282346652255e-08,3.570091467401193e-09,1.3406867257441473e-08,0.9999994468579414,3.419524720476073e-07,2.1373636019240883e-08,5.027520020902262e-08
"def remove_elem(string, elem):
    """"""This function removes a specified element from the given string of words""""""
    return ' '.join([word for word in string.split() if word != elem])",sql,java,6.281373875861749e-08,2.090004350893437e-05,5.059145990492578e-05,0.9221820928146006,3.428375776831754e-09,3.664254975735402e-06,0.004315365692836721,0.07342049746852075,6.82202353758073e-06
"class FamilyTreeNode:
    def __init__(self, name, parent=None):
        self.name = name
        self.parent = parent
        self.children = []

    def add_child(self, child):
        child.parent = self
        self.children.append(child)

    def get_siblings(self):
        siblings = []
        if self.parent is not None:
            for child in self.parent.children:
                if not self.name == child.name:
                    siblings.append(child.name)
        return siblings",python,python,0.003583398979014646,0.05231818910316075,0.20345597983656116,0.14313159518452226,4.060358429301257e-06,0.0012475460183273533,0.38755470650579055,0.20740414347548827,0.0013003805387057261
"class Employee:
    def __init__(self, emp_id, name, department, salary):
        self.emp_id = emp_id
        self.name = name
        self.department = department
        self.salary = salary",python,python,0.001425871218911091,0.007173400346538827,0.05182278869169418,0.40176950046421506,3.464217588845157e-07,3.030782954622572e-05,0.5132547891506817,0.023688831911890695,0.000834163964763387
"class Item():
    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity

    def update_item(self, quantity):
        self.quantity += quantity
        
    def get_item_price(self):
        return self.price * self.quantity

class VendingMachine():
    def __init__(self, items):
        self.items = items

    def calculate_total_price(self, items):
        total_price = 0
        for item in items:
            total_price += item.get_item_price()
        return total_price

# Create your items
coke = Item('Coke', 1.00, 1)
chips = Item('Chips', 0.75, 1)

# Create your Vending machine 
vending_machine = VendingMachine([coke, chips])

# Calculate total price
price = vending_machine.calculate_total_price([coke, chips])

print(price) 

Output:
1.75",python,python,0.0002654498276019516,0.2229188539113539,0.043070092976017674,0.0001837833907811094,4.4189286021974083e-05,2.9599111624132973e-06,0.7245010009968308,0.008964808158441973,4.886154178824423e-05
"import math

def largest_prime_factor(n):

# Separate the list of larger factors of the number into prime and composite numbers 
    factors = []
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            factors.append(i)
            factors.append(int(n/i))
# Find the largest prime factor in the list
    prime_factors = []
    for potential_factor in factors:
        is_prime = True
        for j in range(2,int(math.sqrt(potential_factor))+1):
            if potential_factor % j == 0 and potential_factor != j: 
                is_prime = False
        if is_prime:
            prime_factors.append(potential_factor)

# Return the largest prime factor
    return max(prime_factors)

print(largest_prime_factor(331))",python,python,0.0013775562172003552,0.0004437834936407803,0.0032811210089548513,0.03800979579467168,0.00182375706225905,0.0005261574645761351,0.9198437981700031,0.0006456895930471517,0.034048341195647105
"import pandas as pd

data_df = pd.DataFrame(data)

print(data_df)",python,css,4.629120645651157e-05,0.5789648097067522,0.005166425722561436,3.510135345053374e-05,1.803250869860053e-05,0.00010063378883841971,0.37034365028485783,0.008892780779166042,0.03643227464921831
"import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Create the data
data = {'Monthly Income': [1900, 2300, 2800, 3500],
        'Monthly Expenses': [750, 850, 950, 1250]}
df = pd.DataFrame(data)

# Train the model
x = df['Monthly Income'].values.reshape(-1, 1)
y = df['Monthly Expenses'].values
reg = LinearRegression().fit(x, y)

# Create the prediction
prediction = reg.predict([[2300]])
print('Predicted total monthly expenses: ', prediction)",css,typescript,0.028508855370286232,0.13810775544067436,0.006036289040310627,3.371157522570679e-05,0.0001088045455979788,7.803590586807194e-05,0.33602799827679275,4.255766926043723e-05,0.49105599217598384
"def contains_number(numbers, number):
 for x in numbers:
 if x == number:
 return True
 return False",python,python,8.687950060505753e-07,9.673725866834945e-06,2.176283961867932e-05,6.89198584881189e-05,2.1342672824063265e-06,2.623586040979648e-08,0.9998943324917494,1.7968171241269425e-06,4.84969003993105e-07
"class Stack:
  
    # empty list to store stack elements
    def __init__(self):
        self.stack = []
  
    # push element to the stack
    def push(self, data):
        self.stack.append(data)
  
    # pop element from the stack
    def pop(self):
        self.stack.pop() 
  
    # peek element from the stack
    def peek(self):
        return self.stack[-1]",python,python,0.0006043043092144702,0.06560998854908473,0.033075349423558734,2.0230592669285547e-05,0.0009738430993477302,0.0007370742736565202,0.8746250285958138,0.01463864908055169,0.009715532076103109
"import requests
import bs4

url = 'https://example.com/articles'

# Fetch the page
response = requests.get(url)
html_soup = bs4.BeautifulSoup(response.text, 'html.parser')

# Extract list of articles from the page
articles = html_soup.find_all('article')

# Iterate over the articles
for article in articles:
 # Extract the title, author, and content
 title = article.find('h2').text
 author = article.find('p', {'class': 'author'}).text
 content = article.find('p', {'class': 'content'}).text
 
 # Print out the extracted values
 print(""Title:"", title)
 print(""Author:"", author)
 print(""Content:"", content)",css,html,8.862154252780664e-09,6.678874403203233e-05,0.9891839511361534,0.005032786865186673,6.416615430226924e-05,0.00493310348824507,0.00024765071821255863,0.0002248662109651137,0.0002466778207484406
"def find_duplicates(arr):
    duplicates = []
    seen = set()
    for i in arr:
        if i not in seen:
            seen.add(i)
        else:
            duplicates.append(i)
    return duplicates",python,matlab,0.0001758023645368089,0.0004508179673392897,0.0002663731231464053,0.00022449293680585814,4.0512298466649895e-05,0.9856312902967824,0.013019192346822877,3.027098993809745e-05,0.00016124767616157665
"def normalize(arr):
    minVal = min(arr)
    maxVal = max(arr)
    normalizedArr = [(x - minVal) / (maxVal - minVal) for x in arr]
    return normalizedArr

result = normalize([3, 4, 6, 8, 10])
print(result)  // [0.0, 0.2, 0.4, 0.6, 0.8]",python,python,5.593473283028674e-05,0.0015129319044141151,0.00011713130998208041,1.5786593916563164e-05,4.5884243342400703e-05,0.27257111370797227,0.7255457903121642,1.5946012170145177e-05,0.0001194811832078954
"def solve_scheduling(tasks):
    # Sort tasks by their finish time
    tasks.sort(key=lambda task: task[""end""])

    # Initialize the solution sequence
    sequence = [tasks[0]]

    # Loop over the rest of the tasks in order
    for curr_task in tasks[1:]:
        last_task = sequence[-1]
        if curr_task[""start""] >= last_task[""end""]:
            sequence.append(curr_task)

    return sequence

tasks = [{""start"":3, ""end"":7}, {""start"":1, ""end"":2}, {""start"":6, ""end"":10}, {""start"":8, ""end"":11}, {""start"":12, ""end"":15}]
sequence = solve_scheduling(tasks)

print(""The sequence of tasks is:"")
for task in sequence:
    print(task)",css,typescript,0.0004885282741177924,0.0002675731141562535,0.006136022719009383,0.00015786019508285876,0.007113807897796503,0.0018838834655778198,0.1506029859907578,0.010769454231979099,0.8225798841115225
"def frequency_of_words(s):
    # split the string into words
    words = s.split(' ')
    
    # create a dictionary and initialize the frequency to 0
    frequency = {}
    
    for word in words:
        if word not in frequency:
            # if this is a new word, then add it to the dictionary
            frequency[word] = 0
        
        # increment the frequency of this word
        frequency[word] += 1
    
    return frequency",python,typescript,0.006168130468464813,0.01683243834173857,0.019830381544648824,0.0032271247419821476,0.00011459126085341951,0.00012821116805400757,0.37840610331061936,0.14856428492746646,0.42672873423617236
"def concatenate_strings(str1, str2):
    return str1 + str2

print(concatenate_strings(""Hello"", ""world!""))",python,javascript,0.035416178733799895,0.00015726990545465302,2.1881239807302957e-06,5.944811099591753e-11,0.8415457084650794,6.635278850408866e-06,0.12242196782840448,0.0003624115426017217,8.764006238042486e-05
"""""""Mission Pinball Framework (mpf) setup.py.""""""
import re
from setuptools import setup

#  http://stackoverflow.com/questions/458550/standard-way-to-embed-version-into-python-package
VERSIONFILE = ""mpf/_version.py""
VERSION_STRING_LONG = open(VERSIONFILE, ""rt"").read()
VSRE = r""^__version__ = ['\""]([^'\""]*)['\""]""
_MO = re.search(VSRE, VERSION_STRING_LONG, re.M)
if _MO:
    VERSION_STRING = _MO.group(1)
else:
    raise RuntimeError(""Unable to find version string in %s."" % (VERSIONFILE,))

pin2dmd_requires = [
    'pyusb==1.1.0'
]

linux_i2c_requires = [
    'smbus2_asyncio==0.0.5'
]

rpi_requires = [
    'apigpio-mpf==0.0.3'
]

cli_requires = [
    'prompt_toolkit==3.0.8',
    'asciimatics==1.12.0',
    'terminaltables==3.1.0',
]

osc_requires = [
    'python-osc==1.7.4'
]

irc_requires = [
    'irc==19.0.1'
]

vpe_requires = [
    'grpcio_tools==1.34.0',
    'grpcio==1.34.0',
    'protobuf==3.14.0',
]

crash_reporter_requires = [
    'requests==2.22.0'
]


all_requires = (pin2dmd_requires + cli_requires + linux_i2c_requires + rpi_requires + osc_requires + irc_requires +
                vpe_requires + crash_reporter_requires)

setup(

    name='mpf',
    version=VERSION_STRING,
    description='Mission Pinball Framework',
    long_description='''Let's build a pinball machine!

The Mission Pinball Framework (MPF) is an open source, cross-platform,
Python-based software framework for powering real pinball machines.

MPF is written in Python. It can run on Windows, OS X, and Linux
with the same code and configurations.

MPF interacts with real, physical pinball machines via modern pinball
controller hardware such as a Multimorphic P-ROC or P3-ROC, a FAST Pinball
controller, or Open Pinball Project hardware controllers. You can use MPF to
power your own custom-built machine or to update the software in existing
Williams, Bally, Stern, or Data East machines.

MPF is a work-in-progress that is not yet complete, though we're actively
developing it and checking in several commits a week. It's MIT licensed,
actively developed by fun people, and supported by a vibrant, pinball-loving
community.''',

    url='https://missionpinball.org',
    author='The Mission Pinball Framework Team',
    author_email='brian@missionpinball.org',
    license='MIT',

    classifiers=[
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Natural Language :: English',
        'Operating System :: MacOS :: MacOS X',
        'Operating System :: Microsoft :: Windows',
        'Operating System :: POSIX :: Linux',
        'Topic :: Artistic Software',
        'Topic :: Games/Entertainment :: Arcade'

    ],

    keywords='pinball',

    include_package_data=True,
    package_data={'': ['*.yaml', '*.png', '*.so', '*.pyd', '*.ogg', '*.wav']},

    # MANIFEST.in picks up the rest
    packages=['mpf'],

    zip_safe=False,

    install_requires=['ruamel.yaml==0.15.100',
                      'pyserial==3.5',
                      'pyserial-asyncio==0.4;platform_system==""Windows""',
                      'pyserial-asyncio==0.5;platform_system!=""Windows""',
                      'sortedcontainers==2.3.0',
                      'psutil==5.7.3',
                      ],

    extras_require={
        'all': all_requires,
        'pin2dmd': pin2dmd_requires,
        'linux_i2c': linux_i2c_requires,
        'rpi': rpi_requires,
        'cli': cli_requires,
        'osc': osc_requires,
        'irc': irc_requires,
        'vpe': vpe_requires,
        'crash_reporter': crash_reporter_requires,
    },

    tests_require=[],
    test_suite=""mpf.tests"",

    entry_points={
        'console_scripts': [
            'mpf = mpf.commands:run_from_command_line',
        ]
    }
)
",css,typescript,3.1481949881207062e-06,1.2571853852166469e-05,5.48704714178561e-06,3.5282726987198014e-06,0.0015910133539275804,9.680035722343264e-08,1.3599642346915924e-07,7.179792997907383e-08,0.9983839466826809
"import os
import sys
from vulpo.utils import ShellCommand, get_ts
import vulpo
import vulpo.utils

class ScriptBase(object):

    def __init__(self, config_file=None):
        self.instance_id = vulpo.config.get('Instance', 'instance-id', 'default')
        self.name = self.__class__.__name__
        self.ts = get_ts()
        if config_file:
            vulpo.config.read(config_file)

    def notify(self, subject, body=''):
        vulpo.utils.notify(subject, body)

    def mkdir(self, path):
        if not os.path.isdir(path):
            try:
                os.mkdir(path)
            except:
                vulpo.log.error('Error creating directory: %s' % path)

    def umount(self, path):
        if os.path.ismount(path):
            self.run('umount %s' % path)

    def run(self, command, notify=True, exit_on_error=False, cwd=None):
        self.last_command = ShellCommand(command, cwd=cwd)
        if self.last_command.status != 0:
            vulpo.log.error('Error running command: ""%s"". Output: ""%s""' % (command, self.last_command.output))
            if notify:
                self.notify('Error encountered', \
                        'Error running the following command:\n\t%s\n\nCommand output:\n\t%s' % \
                        (command, self.last_command.output))
            if exit_on_error:
                sys.exit(-1)
        return self.last_command.status

    def main(self):
        pass

",python,sql,0.005077780661853782,0.07785680766282381,0.3767504028130557,1.272757189904141e-06,0.00024113378356340848,1.5008261850609586e-05,0.03019960125793619,0.5097178675419136,0.00014012525981305869
"def celsius_to_fahrenheit(celsius): 
    fahrenheit = celsius * 9/5 + 32
    return fahrenheit",python,python,0.012319334203658931,0.014520396522004188,0.011578587439826333,0.0011258383094487681,0.00284613603025773,0.0019182078400334461,0.9460343510893153,0.0018852782827411408,0.007771870282714174
"#! /usr/bin/env python3

import os
import sys
import math

from itertools import product

# REXI
from mule_local.rexi.REXICoefficients import *
from mule_local.rexi.pcirexi.BeanREXI import BeanREXI
from mule_local.rexi.pcirexi.LRREXI import LRREXI
from mule_local.rexi.trexi.TREXI import *
from mule_local.rexi.cirexi.CIREXI import *
from mule_local.rexi.elrexi.ELREXI import *
from mule_local.rexi.brexi.BREXI import *

# EFloat
efloat_mode = ""float""


def get_rexi_benchmarks(jg):
    # Accumulator of all REXI methods
    # rexi_method['rexi_method'] = 'file'               # Choose REXI method which is typically 'file' for all file-based ones
    # rexi_method['rexi_files_coefficients'] = None     # List with approximations for different 'phi' functions
    rexi_methods = []

    #
    # CI REXI
    #
    if True:
        # REXI stuff
        def fun_params_ci_N(ci_max_real, ci_max_imag):
            if ci_max_imag >= 7:
                return 128
            else:
                return 32

        params_ci_max_imag = [30.0]
        params_ci_max_real = [10.0]

        #
        # Scale the CI circle radius relative to this time step size
        # We do this simply to get a consistent time stepping method
        # Otherwise, CI would not behave consistently
        # Yes, that's ugly, but simply how it goes :-)
        #
        params_ci_max_imag_scaling_relative_to_timestep_size = 480
        # params_ci_max_imag_scaling_relative_to_timestep_size = None

        params_ci_min_imag = 5.0

        rexi_method = {}

        # Choose REXI method which is typically 'file' for all file-based ones
        rexi_method['rexi_method'] = 'file'

        # List with approximations for different 'phi' functions
        rexi_method['rexi_files_coefficients'] = None

        for ci_max_imag, ci_max_real in product(params_ci_max_imag, params_ci_max_real):

            if params_ci_max_imag_scaling_relative_to_timestep_size != None:
                ci_max_imag *= (jg.runtime.timestep_size / params_ci_max_imag_scaling_relative_to_timestep_size)

            # ""phi0""
            cirexi = CIREXI(efloat_mode=efloat_mode)
            coeffs_phi0 = cirexi.setup(
                    function_name=""phi0"",
                    N=fun_params_ci_N(ci_max_real, ci_max_imag),
                    lambda_include_imag=ci_max_imag,
                    lambda_max_real=ci_max_real
                ).toFloat()

            # ""phi1""
            cirexi = CIREXI(efloat_mode=efloat_mode)
            coeffs_phi1 = cirexi.setup(
                    function_name=""phi1"",
                    N=fun_params_ci_N(ci_max_real, ci_max_imag),
                    lambda_include_imag=ci_max_imag,
                    lambda_max_real=ci_max_real
                ).toFloat()

            # ""phi2""
            cirexi = CIREXI(efloat_mode=efloat_mode)
            coeffs_phi2 = cirexi.setup(
                    function_name=""phi2"",
                    N=fun_params_ci_N(ci_max_real, ci_max_imag),
                    lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real
                ).toFloat()

            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]

            # Add to list of REXI methods
            rexi_methods.append(rexi_method)

    #
    # EL-REXI
    #
    if True:
        max_imags = [30.0]
        rexi_method = {}

        # Choose REXI method which is typically 'file' for all file-based ones
        rexi_method['rexi_method'] = 'file'

        # List with approximations for different 'phi' functions
        rexi_method['rexi_files_coefficients'] = None

        for max_imag in max_imags:
            # ""phi0""
            elrexi = ELREXI(efloat_mode=efloat_mode)
            coeffs_phi0 = elrexi.setup(
                    function_name=""phi0"",
                    N=max(64, int(75 * max_imag / 30)),
                    lambda_max_real=10.5,
                    lambda_max_imag=max_imag + 2.5
                ).toFloat()

            # ""phi1""
            elrexi = ELREXI(efloat_mode=efloat_mode)
            coeffs_phi1 = elrexi.setup(
                    function_name=""phi1"",
                    N=max(64, int(75 * max_imag / 30)),
                    lambda_max_real=10.5,
                    lambda_max_imag=max_imag + 2.5
                ).toFloat()

            # ""phi2""
            elrexi = ELREXI(efloat_mode=efloat_mode)
            coeffs_phi2 = elrexi.setup(
                    function_name=""phi2"",
                    N=max(64, int(75 * max_imag / 30)),
                    lambda_max_real=10.5,
                    lambda_max_imag=max_imag + 2.5
                ).toFloat()

            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]

            # Add to list of REXI methods
            rexi_methods.append(rexi_method)

    #
    # LR-REXI (Rectangle contour with Gauss-Legendre Quadrature)
    #
    if True:
        max_imags = [30.0]
        rexi_method = {}

        # Choose REXI method which is typically 'file' for all file-based ones
        rexi_method['rexi_method'] = 'file'

        # List with approximations for different 'phi' functions
        rexi_method['rexi_files_coefficients'] = None

        for max_imag in max_imags:

            # ""phi0""
            lrrexi = LRREXI(efloat_mode=efloat_mode)
            coeffs_phi0 = lrrexi.setup(
                    function_name=""phi0"",
                    width=23,
                    height=2 * max_imag + 20,
                    center=-1,
                    N=128).toFloat()

            # ""phi1""
            lrrexi = LRREXI(efloat_mode=efloat_mode)
            coeffs_phi1 = lrrexi.setup(
                    function_name=""phi1"",
                    width=23,
                    height=2 * max_imag + 20,
                    center=-1,
                    N=128).toFloat()

            # ""phi2""
            lrrexi = LRREXI(efloat_mode=efloat_mode)
            coeffs_phi2 = lrrexi.setup(
                    function_name=""phi2"",
                    width=23,
                    height=2 * max_imag + 20,
                    center=-1,
                    N=128).toFloat()

            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]

            # Add to list of REXI methods
            rexi_methods.append(rexi_method)

    #
    # Bean-REXI
    #
    if True:
        max_imags = [30.0]
        rexi_method = {}

        # Choose REXI method which is typically 'file' for all file-based ones
        rexi_method['rexi_method'] = 'file'

        # List with approximations for different 'phi' functions
        rexi_method['rexi_files_coefficients'] = None

        for max_imag in max_imags:
            # ""phi0""
            beanrexi = BeanREXI(efloat_mode=efloat_mode)
            coeffs_phi0 = beanrexi.setup(
                    function_name=""phi0"",
                    horizontal_radius=16,
                    vertical_radius=max_imag / 30 * 35,
                    center=-2,
                    N=max(64, int(75 * max_imag / 30))).toFloat()

            # ""phi1""
            beanrexi = BeanREXI(efloat_mode=efloat_mode)
            coeffs_phi1 = beanrexi.setup(
                    function_name=""phi1"",
                    horizontal_radius=16,
                    vertical_radius=max_imag / 30 * 35,
                    center=-2,
                    N=max(64, int(75 * max_imag / 30))).toFloat()


            # ""phi2""
            beanrexi = BeanREXI(efloat_mode=efloat_mode)
            coeffs_phi2 = beanrexi.setup(
                    function_name=""phi2"",
                    horizontal_radius=16,
                    vertical_radius=max_imag / 30 * 35,
                    center=-2,
                    N=max(64, int(75 * max_imag / 30))).toFloat()

            rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2]

            # Add to list of REXI methods
            rexi_methods.append(rexi_method)

    return rexi_methods


if __name__ == ""__main__"":
    pass
",python,java,0.18969724752029787,0.2351191076323251,0.004386725023359858,0.23920091046443778,0.05113402259273956,0.00016107723997776826,0.13725391126945974,0.12471220951602272,0.01833478874137963
"def square_root(x):
    if not isinstance(x, int):
        raise TypeError('Input must be an integer')
    return x**0.5",python,python,0.01908643423106781,0.004551874733318116,0.025174384798683027,0.20910433914136012,0.006465393278963129,5.037628750995642e-05,0.6850148453363653,0.0014567567129145558,0.04909559547981788
"num = 1
while num <= 10:
    print(num)
    num += 1",python,matlab,4.371318549240273e-09,5.433667356856447e-13,1.9793500853863872e-08,1.5762753322858168e-09,1.7521525019945289e-09,0.9999844847865756,1.5477648726109826e-05,1.1696666751045775e-09,8.901241138864666e-09
"# Compute the average of the numbers
numbers = [1, 2, 3, 4, 5]
total = 0
for number in numbers:
    total += number

# Divide the total by the number of elements in the list
average = total / len(numbers)

# Print the average
print(average)",python,python,7.31294185665063e-05,0.0010810036694786712,0.0007087522965164288,0.00047202028833582074,0.033262720241559185,3.219010658483462e-08,0.947070898070595,0.0002546369298027726,0.017076806895039
"import tkinter as tk

root = tk.Tk()

# Create the two checkboxes
cat_var = tk.IntVar()
dog_var = tk.IntVar()
cat_checkbox = tk.Checkbutton(root, text=""Cat"", variable=cat_var)
dog_checkbox = tk.Checkbutton(root, text=""Dog"", variable=dog_var)
cat_checkbox.pack()
dog_checkbox.pack()

# Create the button
button = tk.Button(root, text=""Submit"")
button.pack()

# Define the button handler
def button_handler():
 if cat_var.get():
 print(""Cat is checked"")
 else:
 print(""Cat is not checked"")

 if dog_var.get():
 print(""Dog is checked"")
 else:
 print(""Dog is not checked"")

# Set the button handler
button.configure(command=button_handler)
root.mainloop()",python,typescript,0.011203916625123525,0.03830175203058709,0.0082583456200076,0.0008992433937577134,0.01062563868170682,0.0005430106267191555,0.3488401060209644,0.10989746395758557,0.47143052304354804
"def merge_sort(arr): 
    if len(arr) >1: 
        mid = len(arr)//2
        L = arr[:mid]
        R = arr[mid:]
  
        merge_sort(L)
        merge_sort(R)
  
        i = j = k = 0
          
        while i < len(L) and j < len(R): 
            if L[i] < R[j]: 
                arr[k] = L[i] 
                i+=1
            else: 
                arr[k] = R[j] 
                j+=1
            k+=1
          
        while i < len(L): 
            arr[k] = L[i] 
            i+=1
            k+=1
          
        while j < len(R): 
            arr[k] = R[j] 
            j+=1
            k+=1

if __name__ == '__main__':
    arr = [0, 4, 1, 3, 6, 5, 8, 7]
    print(""Given array is"", arr)
    merge_sort(arr) 
    print(""Sorted array is: "", arr)",python,matlab,7.548355027270717e-06,7.927779745802838e-05,7.167137846855696e-06,4.7425622866687316e-06,3.029952338696485e-06,0.9444655947026166,0.05540117408201388,1.0885404747309834e-06,3.0376869937345002e-05
"import roslib
import rospy
import sys
import timeit
import os
import Image_Process
import cv2
import cv2.cv as cv
import numpy as np
import BoW
import Analysis
import Segmentation
from sklearn import cluster
import Descriptors

class Learn:
    def __init__(self):
        path = ""/media/iglu/Data/Dataset/DatasetIglu/Dataset_united/Ana_point/""
        i = 0

        Seg = Segmentation.Segmentation()
        f = open(path+""List.txt"",'r')
        for line in f:
            print ""Starting Training""
            start_time = timeit.default_timer()
            # code you want to evaluate
            Time = line
            file1 = next(f).rstrip('\n')
            file2 = next(f).rstrip('\n')
            Label = next(f).rstrip('\n')
            RGB = cv2.imread(path+""RGB/""+file1) #[:-4]+""_RGB.jpg""
            Depth = cv2.imread(path+""Depth/""+file2) #[:-4]+""_Depth.png""
            Mesh = []
            for i in xrange(0, Depth.shape[0]):
                for j in xrange(0, Depth.shape[1]):
                    Mesh.append((i, j, Depth[i][j][0]))
            kmeans = cluster.KMeans(Mesh,8)
            print kmeans.n_clusters
            # Depthv = self.Inpaint(Depth)
            # Seg.CreateCloud(Depth)
            # L = Seg.PlaneSegmentation()
            # image = np.zeros(RGB.shape, RGB.dtype)
            # depth2 = np.zeros(Depth.shape, Depth.dtype)
            # for data in L:
            #     image[int(data[0]),int(data[1])] = RGB[int(data[0]),int(data[1])]
            #     depth2[int(data[0]), int(data[1])] = Depth[int(data[0]), int(data[1])]
            #     print Depth[int(data[0]), int(data[1])]
            # Seg.CreateCloud(depth2)
            # L = Seg.PlaneSegmentation()
            # image2 = np.zeros(image.shape, image.dtype)
            # depth3 = np.zeros(depth2.shape, depth2.dtype)
            # for data in L:
            #     image2[int(data[0]),int(data[1])] = image[int(data[0]),int(data[1])]
            #     depth3[int(data[0]), int(data[1])] = depth2[int(data[0]), int(data[1])]
            #     print Depth[int(data[0]), int(data[1])]
            elapsed = timeit.default_timer() - start_time
            print ""Tiempo: "" + elapsed.__str__()
            cv2.imshow(""RGB"", RGB )
            cv2.imshow(""Depthv"", depth2)
            cv2.waitKey(0) & 0xFF
            cv2.destroyAllWindows()
            # print ""Enviado ""+file+"" ""+i.__str__()
            # if i >150:
            #     break

    def Inpaintv1(self,Depth):
        Depth_Small = Depth
        Temp2 = Depth
        x1 = int(Depth.shape[0] * 0.2)
        x2 = int(Depth.shape[1] * 0.2)
        x3 = Depth.shape[2]
        cv2.resize(Depth, (x1, x2), Depth_Small)
        Temp = Depth_Small
        mask = (Depth_Small == 0)
        zeros = np.zeros(Depth_Small.shape, Depth_Small.dtype)
        ones = np.ones(Depth_Small.shape, Depth_Small.dtype)
        ones *= 255
        maskk = np.where(mask == True, ones, zeros)
        maskk = maskk[:, :, 0]
        cv2.inpaint(Depth_Small, maskk, 10.0, cv2.INPAINT_TELEA, Temp)
        cv2.resize(Temp, (Depth.shape[0], Depth.shape[1]), Temp2)
        return Temp2

    def Inpaint(self,Depth):
        Depth_Small = Depth
        Temp2 = Depth
        Temp = Depth_Small
        mask = (Depth_Small == 0)
        zeros = np.zeros(Depth_Small.shape, Depth_Small.dtype)
        ones = np.ones(Depth_Small.shape, Depth_Small.dtype)
        ones *= 255
        maskk = np.where(mask == True, ones, zeros)
        maskk = maskk[:, :, 0]
        cv2.inpaint(Depth_Small, maskk, 30.0, cv2.INPAINT_TELEA, Temp)
        Temp2 = Temp
        return Temp2

def main(args):
    # Learn()
    oll = np.zeros(25)
    list = ['glass','Nesquik cereales','fork','bowl','Milk Box','Coke','plate','Heinz ketchup','Apple','lime','orange','Green tea box (Lipton)','cofee mug','Special K','water bottle','banana','Bote Pringles','pitcher','kleenex box','Spoon','Diet Coke','Mayonaise Heinz','Instant noodles','knife','lemon']

if __name__ == '__main__':
    main(sys.argv)",sql,java,0.008350532898321494,0.01578498914708334,0.003525717779578567,0.9621185944305403,5.051229992765691e-05,4.9053446642133195e-08,0.009115434634963419,0.0003406722387156704,0.0007134975174230953
"def factorial(inp):
    if inp == 0:
        return 1
    else:
        return inp*factorial(inp-1)",python,python,0.0028067494675700867,0.0041939051461283745,0.0035009641523565094,0.0003256938377348423,0.0016376542615196218,0.002465871233707549,0.9816464634864835,0.00143341196173879,0.0019892864527605325
"import numpy as np
from sklearn.linear_model import LogisticRegression
# Build Logistic Regression model 
model = LogisticRegression() 
model.fit(X_train, y_train)",python,bash,0.9555546216427595,0.0010904768301923796,0.0002463133163200332,2.758193858241326e-06,1.6319405630988372e-06,4.542923740093353e-06,0.04305632903591662,1.0975573720244515e-09,4.33250190928154e-05
"class Numbers(object): 
    def __init__(self, num1, num2): 
        self.num1 = num1 
        self.num2 = num2 

    def find_sum(self): 
        return self.num1 + self.num2 

    def find_product(self): 
        return self.num1 * self.num2 

#creating an object 
num_object = Numbers(22, 10) 

#finding sum 
sum_result = num_object.find_sum() 

#finding product 
product_result = num_object.find_product()",python,python,2.508052764440429e-05,0.002254132462996032,0.0029768465647140134,1.6785607623615275e-05,4.817583261230882e-05,4.212603885673857e-07,0.9879967829638368,0.006527233057229716,0.00015454172295477827
"def check_pair(arr, sum):
    s = set()
    for item in arr:
        target = sum - item
        if(target in s):
            return True
        s.add(item)
    return False

print(check_pair([2, 4, 6, 5], 8))",python,python,0.0002628718877823149,0.004622291603125922,0.02307167965890818,0.00305571208770851,0.0030407849132146067,0.008507986721690524,0.9573481549860959,5.397250788002132e-05,3.654563359403735e-05
"def createDict(arr):
  res = {}
  for i in range(len(arr)):
    res[arr[i]] = i + 1
  return res

d = createDict([2, 3, 1])
print(d)",python,python,1.985645453744416e-06,3.0945153171698445e-05,5.424761232277525e-06,5.369784050519569e-07,3.4048635121214697e-07,0.022054990109377823,0.9778982162197534,4.809938121210852e-06,2.7507081336527976e-06
"import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D

# Load the data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Build the model 
model = Sequential()
model.add(Flatten(input_shape=(28, 28)))
model.add(Dense(128, activation=""relu""))
model.add(Dense(10, activation=""softmax""))

# Compile the model
model.compile(loss=""sparse_categorical_crossentropy"",
              optimizer=""adam"",
              metrics=[""accuracy""])

# Train the model
model.fit(x_train, y_train, epochs=10)

# Evaluate the model
score = model.evaluate(x_test, y_test, verbose=0)
print(""Test loss:"", score[0])
print(""Test accuracy:"", score[1])",python,bash,0.6820912439710323,0.007605878297277686,0.01822542639484312,8.044706916575691e-05,2.8337747332028354e-05,6.844945054109227e-06,0.28392626383236436,4.622861117037883e-07,0.008035095456819005
"def longestPalindrome(s):
    answer = ''
    max_length = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            curr_str = s[i:j]
            curr_str_rev = curr_str[::-1]
            
            if curr_str == curr_str_rev and max_length < len(curr_str):
                max_length = len(curr_str)
                answer = curr_str
    
    return answer",python,python,1.3196229274387214e-05,2.115078059031404e-05,8.540460819126764e-05,1.8870916209783192e-06,1.6247520259782236e-06,0.08807840585392897,0.91160673160054,9.34901224939682e-05,9.810896133423677e-05
"# Function to count words
def word_count(string):
 
 # Create a dictionary to store results
 words = {}
 
 # Split the string into words
 for word in string.split():
 
  # Check if the word is in the dictionary
  if word in words:
   # Increment the count
   words[word] += 1
  else:
   # Add the word to the dictionary
   words[word] = 1
 
 return words

# Test
string = 'This is a test string to count the words in the string.'
print(word_count(string)) # Output: {'This': 1, 'is': 1, 'a': 1, 'test': 1, 'string': 2, 'to': 1, 'count': 1, 'the': 1, 'words': 1, 'in': 1}",css,java,2.7142511834344605e-08,0.0007091420073503617,0.00016308479324241926,0.632841559283451,3.284260827438428e-08,5.03604927223511e-08,0.031791135603220964,0.33406304462214986,0.00043192334497267306
"class SimpleCalculator:
    """"""A simple class which has methods to do basic arithmetic operations.""""""
    def __init__(self):
        """"""Initializing an instance of the SimpleCalculator class.""""""
        self.result = 0
    
    def __str__(self):
        """"""Returns the string representation for the SimpleCalculator class.""""""
        return ""Simple Calculator""
    
    def add(self, num1, num2):
        self.result = num1 + num2
        return self.result
    
    def subtract(self, num1, num2):
        self.result = num1 - num2
        return self.result
    
    def multiply(self, num1, num2):
        self.result = num1 * num2
        return self.result
    
    def divide(self, num1, num2):
        self.result = num1 / num2
        return self.result",python,python,1.4087756224724377e-05,0.0009658085586229418,0.00015625770725026907,3.2868918718256162e-06,3.1608252962918775e-06,3.390652232111901e-08,0.9941226685592401,0.004647052673266435,8.764312170531591e-05
"class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None
        self.down = None
  
# Function to create multi-level linked list 
def multiLevelLL(root): 
    
    q = Queue() 
    q.put(root) 
    lnk_lnst = [] 
  
    while q.empty() == False: 
        p = q.get() 
        lnk_lnst.append(p) 
        left = p.next 
        right = p.down 
        if left is not None: 
            q.put(left) 
        if right is not None: 
            q.put(right) 
    return lnk_lnst 
  
#Example Usage
root = Node(10) 
root.next = Node(2) 
root.next.next = Node(6) 
root.next.next.next = Node(8) 
root.next.next.next.next = Node(4) 
  
root.down = Node(3) 
root.down.down = Node(19) 
  
root.next.down = Node(5) 
root.next.down.down = Node(11) 
  
root.next.next.down = Node(7) 

llist = multiLevelLL(root) 
# Printing the Multi-level Linked List 
for i in llist: 
    print(i.data, end = "" "")",python,python,0.00018192316557345137,0.011893565804464356,0.0029885204903812614,0.0002481697076733455,0.0007290132727298569,0.0009956694154677227,0.707125338905755,0.26970712148859394,0.006130677749361033
"def isOdd(number): 
  
    if number % 2 == 0: 
        return False
    else: 
        return True",python,python,1.447317867584538e-06,2.3495826064075475e-05,1.2511913293055531e-05,4.326489975695831e-08,2.021796043078475e-07,2.0198031909450644e-07,0.9999613727447852,5.283693586704271e-07,1.964038085688411e-07
"def area_of_triangle(base, height):
 return 0.5 * base * height

# Calculate the area of triangle
a = area_of_triangle(5, 4)
print('The area of the triangle is: ', a)",python,python,0.003111432368594311,0.020235835596555802,0.0058480760593492866,0.0009132578172956194,0.06784656355734976,0.0001471339724776932,0.5742323773312143,0.005851500236854752,0.3218138230603084
"prices = [12, 10, 5, 8] 
quantities = [1, 2, 3, 4]
 
total_cost = 0

for i in range(len(prices)):
    total_cost += prices[i] * quantities[i]

print(total_cost)",python,python,0.0008686996795403453,0.001383384476383648,0.002771575726054922,0.0001160594322019963,0.00020713434288607764,0.05352435137970955,0.9395819584612711,0.0007243237274374733,0.0008225127745148717
"string1 + string2

result = string1 + string2
print(result)",python,python,0.00010597935029061986,0.0030781569662188812,0.00036705919104629975,3.1921962375201646e-05,0.00017825256507329707,2.524852482308738e-05,0.9951070954322943,0.0008169265848707389,0.000289359423007664
"def find_profit(cost_price, selling_price):
    profit = selling_price - cost_price
    return profit",python,python,0.002214028927464375,0.013197670863383191,0.0060862384279290254,0.0006922566724860084,0.001995550414883031,0.00048060881483527536,0.9688638440601955,0.0015158095449330313,0.0049539922738902585
"def create_ordered_dict(list_tuple):
    ordered_dict = OrderedDict()
    for key, value in list_tuple:
        ordered_dict[key] = value
    return ordered_dict",python,matlab,7.009567648594181e-07,0.029535470824946484,4.293034674657605e-06,1.0220409742535414e-07,5.390019158840803e-06,0.9704503360011419,4.0807584405635635e-09,2.6022611171594014e-06,1.1006173402968316e-06
"def join_list(lst):
    return "" "".join(lst)",sql,sql,2.647508800229894e-05,0.00010994762301918027,0.0001276178576485621,2.5320332875339783e-06,2.103693210242015e-05,7.616227075719982e-07,0.03175361970949168,0.967915101978931,4.2907154809602584e-05
"class ListNode:
    def __init__(self, val):
        self.val = val
        self.next = None
    
def display_nth_node(head, n):
    index = 0
    current_node = head
    while current_node and index<n:
        index += 1
        current_node = current_node.next
    if current_node is None:
        return None
    else:
        return current_node.val

head = ListNode(5)
displayed_node = display_nth_node(head, 2)
print(displayed_node) # None",python,html,0.00016247702448454347,0.0037815964668600826,0.9548083195900098,5.851661649948167e-05,0.0001387535190512933,3.245413484672912e-05,0.04012369100198058,0.0006744490078767193,0.00021974263839070633
"import flask
from flask import Flask, request, jsonify
import json

app = Flask(name)

@app.route('/countries', methods=['GET'])
def get_countries():
with open('data.json', 'r') as f:
 countries = json.load(f)
 return jsonify(countries)

if name == 'main':
 app.run()",python,css,0.0038339591559078965,0.9934905697452311,0.0004395724956694738,7.782850607041812e-05,3.555165660836309e-07,3.085948334056039e-06,0.0016993419858722927,0.00032930824497147756,0.00012597840137719077
"def find_primes_less_than(max_value):
    primes=[]
    for num in range(2, max_value + 1):
        is_prime = True
        for i in range(2, num):
            if (num % i == 0):
               is_prime = False
        if is_prime:
            primes.append(num) 
    return primes",python,matlab,1.3403171221275766e-11,8.17102904610599e-16,4.572459001400285e-11,7.782504390929959e-13,1.0802040289062107e-12,0.9999999617061189,3.8222419866761424e-08,3.206704255011726e-12,7.267529054578609e-12
"def count_matches(list_a, list_b):
    count = 0
    for item_a in list_a:
        for item_b in list_b:
            if item_b == item_a:
                count += 1
    return count",python,python,0.0013326155864297915,0.008570357716763633,0.0030849090237006645,0.00012493273419515404,0.001195513268730771,0.07258161276187317,0.9096705632783401,0.0014038315620523202,0.0020356640679143577
"arr = [3, 4, 5]
sum = 0
for i in arr:
    sum = sum + i

average = sum / len(arr)
print(average)",python,matlab,1.0322682761884711e-06,1.55864089022438e-05,6.143779684768481e-06,6.169951619029229e-05,6.834571977590452e-07,0.9998165613852397,9.521682602520943e-05,3.383490095077227e-07,2.7380094742339223e-06
"data = {'John': 24, 'Adam': 45, 'Kate': 12}

def get_max_min(data):
    """"""This function will return the maximum and minimum value of a given dictionary""""""
    max_value = max(data.values())
    min_value = min(data.values())
    return max_value, min_value

if __name__ == '__main__':
    data = {'John': 24, 'Adam': 45, 'Kate': 12}
    max_value, min_value = get_max_min(data)
    print('Max Value: {}, Min Value: {}'.format(max_value, min_value))",css,css,0.0011576317280048692,0.8102185029640614,0.06450947815409697,0.0002980130032704851,0.004209000434650471,0.034851040710503184,0.0026857191634683175,0.007816209476202483,0.07425440436574188
"def leftRotate(arr, k): 
    new_arr = arr[k:] + arr[:k] 
    return new_arr",python,matlab,4.222399586191212e-09,3.1464776385808855e-08,6.92484621431537e-10,3.0325112746757914e-09,3.892451809367542e-09,0.9999880280129765,1.191811573032802e-05,7.794107674641507e-14,1.0566591722195466e-08
"class Employee:
    def __init__(self, name, age, salary):
        self.name = name
        self.age = age
        self.salary = salary",python,python,0.00016277398009114638,0.014102344873749086,0.0170935334240734,0.16465574925466983,1.8500564915872395e-08,4.473977942547585e-06,0.8001276179553167,0.0037303047879695592,0.00012318324562298014
"import sqlite3

def get_table_meta_info(db_name, table_name):
    conn = sqlite3.connect(db_name)
    
    cur = conn.cursor()
    cur.execute(""SELECT * FROM ""+ table_name)
    col_names = [tuple[0] for tuple in cur.description]
    row_length = len(col_names) 
    
    cur.execute(""PRAGMA table_info(""+ table_name +"")"")
    table_info = cur.fetchall()
    
    data_types = []
    
    for row in table_info:
        data_types.append(row[2])
        
    meta_info = {
            'table_name': table_name,
            'row_length': row_length,
            'column_names': col_names,
            'data_types': data_types
    }
    return meta_info",css,sql,0.0011664333535112035,0.004414376996199156,0.0010770776224206919,0.00011131908560173041,0.00046163565095487383,0.0021184315977195453,0.005737620349040743,0.9841192822226787,0.0007938231218731164
"def generateFibonacci(n): 
    # Taking 1st two fibonacci nubers as 0 and 1 
    FibArray = [0, 1] 
   
    while len(FibArray) < n: 
        next_fib_num = FibArray[-1] + FibArray[-2] 
        FibArray.append(next_fib_num) 
      
    return FibArray 
  
# Driver Code 
result = generateFibonacci(10) 
print(result)",python,python,0.0009417419669153093,0.009262759702506281,0.0036230705478615373,0.004749447447772186,0.0005863406802249757,0.0001754384783856112,0.8474431168654146,0.0009235200775901475,0.13229456423332922
"import nltk

def tokenize_and_tag(filename):
 tokens = nltk.word_tokenize(open(filename).read())
 tagged_tokens = nltk.pos_tag(tokens)
 print(tagged_tokens)

tokenize_and_tag('text.txt')

# Output: [('The', 'DT'), ('quick', 'JJ'), ('brown', 'NN'), ('fox', 'NN'), ('jumps', 'VBZ'), ('over', 'IN'), ('the', 'DT'), ('lazy', 'JJ'), ('dog', 'NN'), ('.', '.')]",python,python,0.06367470279303922,0.0888868489138224,0.015750191100591636,0.0003685621792900193,0.014230497469263659,0.002000169660136744,0.7448024192015803,0.04640766940986457,0.023878939272411345
"def isDivisibleBy9(num):
    # Base case 
    if(num == 0 or num == 9): 
        return True
   
    if(num < 9): 
        return False
  
    # Recursive case
    return isDivisibleBy9(sum(map(int,str(num)))) 

if __name__ == '__main__':
    num = int(input('Enter a number: '))
    if isDivisibleBy9(num):
        print('Yes, {} is divisible by 9.'.format(num))
    else:
        print('No, {} is not divisible by 9.'.format(num))",python,matlab,1.0193451652774434e-05,7.768540739936595e-10,1.58758557000812e-05,9.224598673511904e-05,5.090523129812272e-06,0.9982712693022402,0.0016021541099301754,1.214380507017417e-06,1.9556132509735525e-06
"def mean(numbers):
    return sum(numbers) / len(numbers)

def median(numbers):
    numbers.sort()
    middle_index = int(len(numbers)/2)
    if len(numbers) % 2 == 0:
        return (numbers[middle_index] + numbers[middle_index-1])/2
    else:
        return numbers[middle_index]

def mode(numbers):
    max_freq = 0
    modes = []
    for num in set(numbers):
        count = numbers.count(num)
        if count > max_freq:
            modes.clear()
            modes.append(num)
            max_freq = count
        elif count == max_freq and num not in modes:
            modes.append(num)
    return modes",python,java,3.3418046994719244e-05,5.360542123725976e-06,0.00013789896626593067,0.6332646780553588,0.000196782705470261,4.6432532963669113e-07,0.3662364942925767,7.838687369033964e-05,4.651619218970174e-05
"def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1,10):
        if valid(bo, i, (row, col)):
            bo[row][col] = i

            if solve(bo):
                return True

            bo[row][col] = 0

    return False


def valid(bo, num, pos):
    # Check row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x * 3, box_x*3 + 3):
            if bo[i][j] == num and (i,j) != pos:
                return False

    return True


def find_empty(bo):
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j)  # row, col",python,matlab,2.2674117796195866e-05,9.883311672893821e-06,0.00014469451828561607,2.4349159373842034e-06,3.909931441424317e-06,0.6675472875217544,0.3321923541763461,2.0019175824875133e-05,5.6742330941193794e-05
"class Student:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender",python,python,0.00013113133814304038,0.015597875181183149,0.0128772386525721,0.1572328361646075,1.2016257827480556e-08,3.984042561278055e-06,0.8111791556861325,0.0027812952931465357,0.00019647162539612745
"def compareLongestString(str1, str2):
 
  if len(str1) > len(str2):
   longestString = str1
  elif len(str2) > len(str1):
   longestString = str2
  else:
   longestString = ""Strings have the same length""

  return longestString

print(compareLongestString(""Python"", ""C++""))",python,python,0.018023933047034122,0.0018105547348279377,1.0197093582596603e-05,4.242168481304442e-05,0.34530976984718864,0.0002699439354929154,0.6012980842372464,0.026172040537439347,0.007063054882375082
"def replace_word(txt, replace_word, replace_with): 
    words = txt.split("" "") 
    for i in range(0, len(words)): 
        if (words[i] == replace_word): 
            words[i] = replace_with
    return "" "".join(words)

s = ""Roses are red, violets are blue.""
print(replace_word(s, ""blue"", ""red"")) # Roses are red, violets are red.",sql,python,0.0011829937889607986,0.005086730104239448,0.006541413772099311,0.00010973241869606027,0.00039782640220202884,0.01855858012519937,0.7337784476624715,0.22951453381401515,0.004829741912116702
"def averageList(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)

print(averageList([10, 15, 20, 25]))",python,python,1.6948736903265636e-05,2.7853809469828523e-06,0.00022449016141469282,0.0013515013187811958,5.368310077667064e-05,0.00027408372071475133,0.9980458697823466,1.7312664182829256e-05,1.3325133933121541e-05
"# This function prints the values 1 to 10
def print_numbers(): 
    for i in range(1,11): 
        print(""The number is "" + str(i)) 
          
print_numbers()",python,python,0.0013148730853149572,1.2611133522347982e-05,0.0008029561618410378,3.2776220294398824e-06,0.05004058940516571,0.2028392325624828,0.7429683255382254,0.0001613483549037832,0.0018567861365143465
"import requests

def getCurrentTemperature(location):
  API_KEY = '<your API key>'
  API_URL = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'.format(location, API_KEY)

  response = requests.get(API_URL)
  data = response.json()

  # convert temperature from kelvin to Celsius
  temperature_celsius = data['main']['temp'] - 273.15

  return temperature_celsius

location = ""London, UK""
temperature = getCurrentTemperature(location)
print(temperature)",python,css,0.001174956555702197,0.9183405641852209,0.031365048907059705,1.337911721732457e-05,0.000438053618884869,0.000371217012276637,0.04480099015493578,0.0017874327543312247,0.0017083576943714863
"def generate_strings(alphabet, length):
    lst = []
    
    for a in alphabet:
        for b in alphabet:
            for c in alphabet:
                s = a + b + c
                lst.append(s)
                
    return lst

result = generate_strings(alphabet, length)
print(result)",python,python,0.0004884132025757558,0.005360088897556219,0.001094045523231367,4.8837583736770394e-05,0.002920195892884029,0.11484135627683582,0.8607077485420178,0.013907947933351,0.0006313661478111653
"def calculate_std_deviation(numbers):
 mean = sum(numbers) / len(numbers)
 
 variance = 0
 for num in numbers:
 variance += (num - mean)**2
 variance = variance/len(numbers)
 
 std_deviation = variance**0.5
 return std_deviation
 
 
numbers = [2, 4, 4, 4, 5, 5, 7, 9]
std_deviation = calculate_std_deviation(numbers)
print('The standard deviation is: {}'.format(std_deviation))",python,java,0.0006931555030127724,0.00010987359523517487,0.0016897931815696404,0.5008499696471852,0.006824671742581182,1.3254681287882221e-05,0.4881097857820815,0.0005767362432519189,0.0011327596237948304
"# Python program to generate 
# a unique 6 digit number 
import random 
def generate_number(): 
      
    # Choose a random number 
    # between 10000 and 99999 
    random_number = random.randint(10000, 99999) 
  
    # Return the random number 
    return random_number 
  
# Driver Code 
if __name__ == ""__main__"": 
    print(generate_number())",python,python,0.20482615789680023,9.22043917372288e-05,9.678599276138959e-05,6.448981081061314e-07,0.00012732094679340555,1.0098582626643206e-06,0.7837933822240639,0.010659438767202434,0.00040305502427063534
"def common_elements(list1, list2):
    # Make a copy of list 
    list_copy = list2[:] 

    # Iterate the original list  
    for item in list1: 
        if item in list_copy: 
            list_copy.remove(item) 

    # Return the common elements  
    return list(set(list1) & set(list2))",python,python,0.0024201523031728445,0.014941368374005311,0.020813574904948496,2.3082835784740943e-05,0.2125972639302146,0.0017066264955631768,0.7407812983248339,0.005139378699204142,0.0015772541322729323
"def factorial(num): 
    if num == 0: 
        return 1
    else: 
        return num * factorial(num-1) 

x = 5
print(factorial(x)) 
# 120",python,matlab,1.9293090230083946e-06,1.6209871101860382e-09,2.883678939797448e-06,1.2763400086423454e-07,6.665029099233328e-07,0.9754327248619502,0.024559481044903204,1.246225186754637e-06,9.391220990405217e-07
"# -*- coding: utf-8 -*-

# 1st-run initialisation

# Set settings.base.prepopulate to 0 in Production
# (to save 1x DAL hit every page).
pop_list = settings.get_base_prepopulate()
if pop_list == 0:
    pop_list = []
else:
    table = db[auth.settings.table_group_name]
    # The query used here takes 2/3 the time of .count().
    if db(table.id > 0).select(table.id, limitby=(0, 1)).first():
        pop_list = []
    if not isinstance(pop_list, (list, tuple)):
        pop_list = [pop_list]

if len(pop_list) > 0:

    # =========================================================================
    # Populate default roles and permissions
    #

    # Allow debug
    import sys

    print >> sys.stdout, ""Please be patient whilst the database is populated""

    # Shortcuts
    acl = auth.permission
    sysroles = auth.S3_SYSTEM_ROLES
    create_role = auth.s3_create_role
    #update_acls = auth.s3_update_acls

    # Do not remove or change order of these 5 definitions (System Roles):
    create_role(""Administrator"",
                ""System Administrator - can access & make changes to any data"",
                uid=sysroles.ADMIN,
                system=True, protected=True)

    create_role(""Authenticated"",
                ""Authenticated - all logged-in users"",
                uid=sysroles.AUTHENTICATED,
                protected=True)

    create_role(""Anonymous"",
                ""Unauthenticated users"",
                # Allow unauthenticated users to view the list of organisations
                # so they can select an organisation when registering
                dict(t=""org_organisation"", uacl=acl.READ, entity=""any""),
                # Allow unauthenticated users to see the list of sites for an
                # org when registering
                dict(c=""org"", f=""sites_for_org"", uacl=acl.READ, entity=""any""),
                uid=sysroles.ANONYMOUS,
                protected=True)

    # Primarily for Security Policy 2
    create_role(""Editor"",
                ""Editor - can access & make changes to any unprotected data"",
                uid=sysroles.EDITOR,
                system=True, protected=True)

    # MapAdmin
    map_admin = create_role(""MapAdmin"",
                            ""MapAdmin - allowed access to edit the MapService Catalogue"",
                            dict(c=""gis"", uacl=acl.ALL, oacl=acl.ALL),
                            dict(c=""gis"", f=""location"", uacl=acl.ALL, oacl=acl.ALL),
                            uid=sysroles.MAP_ADMIN,
                            system=True, protected=True)

    # OrgAdmin (policies 6, 7 and 8)
    create_role(""OrgAdmin"",
                ""OrgAdmin - allowed to manage user roles for entity realms"",
                uid=sysroles.ORG_ADMIN,
                system=True, protected=True)

    # Enable shortcuts (needed by default.py)
    system_roles = auth.get_system_roles()
    ADMIN = system_roles.ADMIN
    AUTHENTICATED = system_roles.AUTHENTICATED
    ANONYMOUS = system_roles.ANONYMOUS
    EDITOR = system_roles.EDITOR
    MAP_ADMIN = system_roles.MAP_ADMIN
    ORG_ADMIN = system_roles.ORG_ADMIN

    # =========================================================================
    # Configure Scheduled Tasks
    #

    has_module = settings.has_module
    if has_module(""msg""):

        # Send Messages from Outbox
        # SMS every minute
        s3task.schedule_task(""msg_process_outbox"",
                             vars={""contact_method"":""SMS""},
                             period=120,  # seconds
                             timeout=120, # seconds
                             repeats=0    # unlimited
                             )
        # Emails every 5 minutes
        s3task.schedule_task(""msg_process_outbox"",
                             vars={""contact_method"":""EMAIL""},
                             period=300,  # seconds
                             timeout=300, # seconds
                             repeats=0    # unlimited
                             )
        # Tweets every minute
        #s3task.schedule_task(""msg_process_outbox"",
        #                     vars={""contact_method"":""TWITTER""},
        #                     period=120,  # seconds
        #                     timeout=120, # seconds
        #                     repeats=0    # unlimited
        #                     )

        # Subscription notifications
        s3task.schedule_task(""notify_check_subscriptions"",
                             period=300,
                             timeout=300,
                             repeats=0)

    # Daily maintenance
    s3task.schedule_task(""maintenance"",
                         vars={""period"":""daily""},
                         period=86400, # seconds, so 1/day
                         timeout=600,  # seconds
                         repeats=0     # unlimited
                         )

    # =========================================================================
    # Import PrePopulate data
    #

    # Override authorization
    auth.override = True

    # Load all Models to ensure all DB tables present
    s3db.load_all_models()

    # Shortcuts
    path_join = os.path.join
    request_folder = request.folder

    if settings.get_auth_opt_in_to_email():
        table = db.pr_group
        for team in settings.get_auth_opt_in_team_list():
            table.insert(name = team, group_type = 5)

    # Synchronisation
    db.sync_config.insert() # Defaults are fine

    # Person Registry
    tablename = ""pr_person""
    # Add extra indexes on search fields
    # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL
    field = ""first_name""
    db.executesql(""CREATE INDEX %s__idx on %s(%s);"" % (field, tablename, field))
    field = ""middle_name""
    db.executesql(""CREATE INDEX %s__idx on %s(%s);"" % (field, tablename, field))
    field = ""last_name""
    db.executesql(""CREATE INDEX %s__idx on %s(%s);"" % (field, tablename, field))

    # GIS
    # Add extra index on search field
    # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL
    tablename = ""gis_location""
    field = ""name""
    db.executesql(""CREATE INDEX %s__idx on %s(%s);"" % (field, tablename, field))

    # Messaging Module
    if has_module(""msg""):
        update_super = s3db.update_super
        # To read inbound email, set username (email address), password, etc.
        # here. Insert multiple records for multiple email sources.
        table = db.msg_email_channel
        id = table.insert(server = ""imap.gmail.com"",
                          protocol = ""imap"",
                          use_ssl = True,
                          port = 993,
                          username = ""example-username"",
                          password = ""password"",
                          delete_from_server = False
                          )
        update_super(table, dict(id=id))
        # Need entries for the Settings/1/Update URLs to work
        table = db.msg_sms_outbound_gateway
        id = table.insert(outgoing_sms_handler = ""WEB_API"")
        update_super(table, dict(id=id))
        table = db.msg_sms_modem_channel
        id = table.insert(modem_baud = 115200)
        update_super(table, dict(id=id))
        table = db.msg_sms_webapi_channel
        id = table.insert(to_variable = ""to"")
        update_super(table, dict(id=id))
        table = db.msg_sms_smtp_channel
        id = table.insert(address=""changeme"")
        update_super(table, dict(id=id))
        table = db.msg_tropo_channel
        id = table.insert(token_messaging = """")
        update_super(table, dict(id=id))
        table = db.msg_twitter_channel
        id = table.insert(enabled = False)
        update_super(table, dict(id=id))

    # Budget Module
    if has_module(""budget""):
        db.budget_parameter.insert() # Defaults are fine

    # Climate Module
    if has_module(""climate""):
        s3db.climate_first_run()

    # CAP module
    if has_module(""cap""):
        db.cap_alert.insert(template_title=""Default"", is_template=True)

    # Incident Reporting System
    if has_module(""irs""):
        # Categories visible to ends-users by default
        table = db.irs_icategory
        table.insert(code = ""flood"")
        table.insert(code = ""geophysical.landslide"")
        table.insert(code = ""roadway.bridgeClosure"")
        table.insert(code = ""roadway.roadwayClosure"")
        table.insert(code = ""other.buildingCollapsed"")
        table.insert(code = ""other.peopleTrapped"")
        table.insert(code = ""other.powerFailure"")

    # Supply Module
    if has_module(""supply""):
        db.supply_catalog.insert(name = settings.get_supply_catalog_default())

    # Ensure DB population committed when running through shell
    db.commit()

    # =========================================================================
    # PrePopulate import (from CSV)
    #

    # Create the bulk Importer object
    bi = s3base.S3BulkImporter()

    s3.import_role = bi.import_role
    s3.import_user = bi.import_user
    s3.import_image = bi.import_image
    s3.import_remote_csv = bi.import_remote_csv

    # Relax strict email-matching rule for import updates of person records
    email_required = settings.get_pr_import_update_requires_email()
    settings.pr.import_update_requires_email = False

    # Additional settings for user table imports:
    s3db.configure(""auth_user"",
                   onaccept = lambda form: auth.s3_approve_user(form.vars))
    s3db.add_components(""auth_user"", auth_membership=""user_id"")

    # Flag that Assets are being imported, not synced
    s3.asset_import = True

    # Allow population via shell scripts
    if not request.env.request_method:
        request.env.request_method = ""GET""

    grandTotalStart = datetime.datetime.now()
    for pop_setting in pop_list:
        start = datetime.datetime.now()
        # Clear Tasklist
        bi.tasks = []
        # Import data specific to the prepopulate setting
        if pop_setting == 1:
            # Populate with the default data
            path = path_join(request_folder,
                             ""private"",
                             ""templates"",
                             ""default"")
            bi.perform_tasks(path)
        else:
            path = path_join(request_folder,
                             ""private"",
                             ""templates"",
                             pop_setting)
            if os.path.exists(path):
                bi.perform_tasks(path)
            else:
                print >> sys.stderr, ""Unable to install data %s no valid directory found"" % pop_setting

        grandTotalEnd = datetime.datetime.now()
        duration = grandTotalEnd - grandTotalStart
        try:
            # Python 2.7
            duration = '{:.2f}'.format(duration.total_seconds()/60)
            print >> sys.stdout, ""Pre-populate task completed in %s mins"" % duration
        except AttributeError:
            # older Python
            print >> sys.stdout, ""Pre-populate task completed in %s"" % duration
        bi.resultList = []
    for errorLine in bi.errorList:
        try:
            print >> sys.stderr, errorLine
        except:
            s3_unicode = s3base.s3_unicode
            _errorLine = """"
            for i in range(0, len(errorLine)):
                try:
                    _errorLine += s3_unicode(errorline[i])
                except:
                    pass
            print >> sys.stderr, _errorLine

    # Restore setting for strict email-matching
    settings.pr.import_update_requires_email = email_required

    # Restore Auth
    auth.override = False

    # Update Location Tree (disabled during prepop)
    start = datetime.datetime.now()
    gis.update_location_tree()
    end = datetime.datetime.now()
    print >> sys.stdout, ""Location Tree update completed in %s"" % (end - start)

    # Countries are only editable by MapAdmin
    db(db.gis_location.level == ""L0"").update(owned_by_group=map_admin)

    if has_module(""stats""):
        # Populate stats_demographic_aggregate (disabled during prepop)
        # - needs to be done after locations
        start = datetime.datetime.now()
        s3db.stats_demographic_rebuild_all_aggregates()
        end = datetime.datetime.now()
        print >> sys.stdout, ""Demographic data aggregation completed in %s"" % (end - start)

    if has_module(""vulnerability""):
        # Populate vulnerability_aggregate (disabled during prepop)
        # - needs to be done after locations
        start = datetime.datetime.now()
        s3db.vulnerability_rebuild_all_aggregates()
        end = datetime.datetime.now()
        print >> sys.stdout, ""Vulnerability data aggregation completed in %s"" % (end - start)

    grandTotalEnd = datetime.datetime.now()
    duration = grandTotalEnd - grandTotalStart
    try:
        # Python 2.7
        duration = '{:.2f}'.format(duration.total_seconds()/60)
        print >> sys.stdout, ""Pre-populate completed in %s mins"" % duration
    except AttributeError:
        # older Python
        print >> sys.stdout, ""Pre-populate completed in %s"" % duration

    # Restore view
    response.view = ""default/index.html""

# END =========================================================================
",css,typescript,0.0005783461183479315,0.031899545962208245,0.11122228089515737,0.001720355055347157,0.0108134745719782,0.00021024151640428634,0.0026640084468479547,0.0415901989841966,0.7993015484495123
"def merge_sort(alist):
    if len(alist)>1:
        mid = len(alist)//2
        lefthalf = alist[:mid]
        righthalf = alist[mid:]

        merge_sort(lefthalf)
        merge_sort(righthalf)

        i=0
        j=0
        k=0
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                alist[k]=lefthalf[i]
                i=i+1
            else:
                alist[k]=righthalf[j]
                j=j+1
            k=k+1

        while i < len(lefthalf):
            alist[k]=lefthalf[i]
            i=i+1
            k=k+1

        while j < len(righthalf):
            alist[k]=righthalf[j]
            j=j+1
            k=k+1",python,python,0.006635893259594536,0.016482912645417507,0.01467390366900585,0.0020746733004296278,0.00286608383737779,0.01880888967177303,0.9111485305803239,0.004683476018221953,0.02262563701785577
"# Load libraries
import pandas as pd
import numpy as np

# Load data
data = pd.read_csv(""stockdata.csv"")

# Split data
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

# Train/Test Split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Decision Tree Model
from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(criterion='entropy', random_state=0)
clf.fit(X_train, y_train)

# Model Accuracy
y_pred = clf.predict(X_test)
print('Model accuracy: ',clf.score(X_test, y_test))",python,bash,0.9914825934240685,0.0038379300818525528,0.00018486141177368026,1.4664708248439023e-07,1.4818230981776841e-07,3.8526993159878117e-07,0.0044789398634039026,5.382926925054518e-11,1.4995065748277775e-05
"if (5 > 7):
    greater = 5
else:
    greater = 7

print(""The greater number is: "", greater)",python,python,0.011411087435082654,0.03901153576756944,0.014191217030170376,0.001022583287824442,0.02123596913906616,0.08823888489717419,0.7757950409351332,0.011504622100957873,0.03758905940702167
"def split_list(lst, size):
    part1 = lst[:size]
    part2 = lst[size:]
    return part1, part2

# example
my_list = [1, 2, 3, 4, 5, 6, 7]
part1, part2 = split_list(my_list, 3)
print(part1) # [1, 2, 3]
print(part2) # [4, 5, 6, 7]",python,python,0.0012266428682530777,0.012245522855976474,0.019383887503341878,0.002907843376345596,0.002184853940378454,0.0004776930829019086,0.9568966329292592,0.002813063446534446,0.0018638599970090591
"def sort_list(a_list):
 '''
 Sort the given list of strings in alphabetical order

 Args:
 a_list (list): List of strings

 Returns:
 list: Returns the sorted list in alphabetical order
 '''

 return sorted(a_list)",python,javascript,0.0005408771759610058,0.0003523382724987744,0.0019177199528924082,0.0002451241147971485,0.7018386323898709,0.013409598464805312,0.2302216406221211,0.0501126561980229,0.0013614128090304873
"def sort(arr): 
    n = len(arr) 
    
    for i in range(n-1): 
        min_index = i 
        for j in range(i+1, n): 
            if arr[min_index] > arr[j]: 
                min_index = j 
                  
        arr[i], arr[min_index] = arr[min_index], arr[i] 
        
    return arr

list = [3, 5, 2, 1, 4] 
print(sort(list)) # [1, 2, 3, 4, 5]",python,matlab,4.0942159820332955e-06,6.748077550172268e-06,7.01339736185927e-06,1.1350978404122678e-06,1.1772785579438405e-06,0.9162458925839365,0.08372681130229517,1.34735075490136e-06,5.7806957208681886e-06
"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

p = Person(""John"", 18)
print(p.name, p.age)",python,java,0.00019024985244121037,0.0022637631342626967,0.00843026385179777,0.7504754401256186,7.153606837199411e-08,2.099455538466221e-06,0.23810503039562342,0.0004928239407088663,4.0257707940675474e-05
"import re

string = ""There are 45.8 apples and 12.3 oranges.""
numbers = re.findall(r""[-+]?\d*\.\d+|\d+"", string)
print(numbers)

# Output: ['45.8', '12.3']",python,java,8.421883192667651e-07,4.225097305748739e-05,0.0016672285994611335,0.975787061401319,1.86863367864733e-08,6.96000037684988e-09,0.02243322530527726,4.380231462741118e-05,2.55635716010133e-05
"def filter_even(arr):
    result = []
    for i in arr:
        if i % 2 != 0:
            result.append(i)
    return result",python,matlab,1.875615254027873e-10,1.2931884845660116e-07,4.186015409644437e-10,4.0744505496929705e-11,2.1546481472782865e-10,0.9999928617220545,7.0072804249198676e-06,1.4248617597508628e-10,6.738135014313025e-10
"def factorial(n):
    if n == 0:
        return 1
    
    return n * factorial(n-1)",python,python,4.944839578745002e-05,7.498479524924585e-05,7.278192487355846e-05,6.1239539783890616e-06,6.940781765129698e-05,2.299286322905327e-05,0.9996402642098589,3.141816132128325e-05,3.257787805101708e-05
"def removeDuplicates(arr):
 result = []
 for num in arr:
  if num not in result:
   result.append(num)
 return result
 
arr = [1, 2, 3, 2, 5, 4, 3, 1]
print(removeDuplicates(arr)) # should print [1, 2, 3, 5, 4]",python,matlab,5.463353955368018e-11,1.810116508894358e-11,1.4626354706261711e-10,9.865682130472205e-12,4.4498979911317147e-11,0.9999992349621694,7.638162847276143e-07,2.546583757745934e-11,9.227172672058718e-10
"x = False and False

# Output
print(x)
# False",python,python,0.006692351258923942,0.04026720734265863,0.027585362890552623,0.0001883064713345997,0.002002428836518409,0.00013315242454685052,0.9161377970479111,0.0007554015570096918,0.0062379921705442865
"def reverse_words(string):
    words = string.split(' ')
    reversed_words = words[::-1]
    reversed_string = ' '.join(reversed_words)
    return reversed_string",sql,sql,2.669889497550611e-07,0.0005672292683968906,0.0006384918855396471,0.11727270152075298,7.267468619261318e-08,5.324272230794983e-06,0.032865576971030236,0.8486191349297253,3.1201488688292986e-05
"def factorial(number): 
    if number == 0: 
        return 1
    else:
        return number * factorial(number - 1)",python,python,5.24708610409622e-06,0.00010361078830339986,1.620692208644411e-05,8.608422614582561e-07,3.322531027299005e-06,7.038785709560307e-06,0.9998494073096397,9.280305260182538e-06,5.0254296078907785e-06
"def most_frequent_words(string):
    '''
    Function to find the ten most frequent words in a given string
    
    Parameters
    string: string
    
    Returns
    list of the ten most frequent words
    '''
    string = string.lower()
    words = string.split()
    word_frequency = {}
    # populate the word_frequency dictionary
    for word in words:
        if word in word_frequency.keys():
            word_frequency[word] += 1
        else:
            word_frequency[word] = 1
    # sort the dictionary in descending order by frequency
    sorted_words = sorted(word_frequency.items(), key=lambda kv: kv[1], reverse=True)
    top_ten = sorted_words[:10]
    return [word[0] for word in top_ten]",sql,java,2.7463070963653223e-07,0.0033980480823486274,0.0008872243293090642,0.8557598525319935,3.837132923508595e-07,2.2203588997094947e-05,0.07315011752578368,0.06671770188401853,6.419371354756333e-05
"# function to calculate GCD 
def gcd(x, y): 
  
    # This function implements the Euclidian 
    # algorithm to find GCD 
    while(y): 
        x, y = y, x % y 
  
    return x 

# Driver program to test above function 
n1 = 28
n2 = 56
print(""GCD of"", n1, ""and"", n2, ""is"", gcd(n1, n2))",python,javascript,3.909017928662709e-05,1.9254158162158953e-05,2.7813405776199733e-05,5.56064292651064e-05,0.9994924329261775,0.00015919728185161594,1.1802820875488141e-05,1.2410108991836359e-05,0.00018239268961345464
"def insertSort(sortedArray, x): 
    n = len(sortedArray) 
    sortedArray.append(x) 
    for i in range(n-1, -1, -1): 
        if sortedArray[i] > x: 
            sortedArray[i + 1] = sortedArray[i] 
            sortedArray[i] = x 
    return sortedArray

print(insertSort(sortedArray, x))",python,python,0.00836049291985393,0.011621232847760997,0.018057524659923874,0.001512817427091997,0.0034876986462963598,0.22151839158588393,0.7206509296992695,0.0035942789228293557,0.011196633291090037
"import random

def random_walk(n_steps):
    x = 0
    y = 0

    for _ in range(n_steps):
        direction = random.choice([-1, 1])
        x += direction * random.randint(1, 10)
        y += direction * random.randint(1, 10)

    return x, y",python,python,1.4504928075811248e-05,1.9876595531308933e-05,6.507746220446645e-05,5.834060375275135e-07,4.495891297834306e-06,0.00022969881198354946,0.9962490315327661,0.003407484396241052,9.246975862388206e-06
"def is_palindrome(string_to_test):
    reverse = reversed(string_to_test)
    if list(string_to_test) == list(reverse):
        return True
    return False",python,python,0.00020063680432445792,0.00044786828996294463,0.0016116033863894865,1.4064435648577359e-05,0.00014209939531980575,0.00014944462197936497,0.9964860819296197,0.0008433867796536429,0.00010481435710227551
"import nltk
from nltk.tokenize import word_tokenize

sample_text = ""This painting is an amazing representation of the beauty of nature.""
words = word_tokenize(sample_text)
tags = nltk.pos_tag(words)

generator_words = [""Explore"",""Discover"",""Witness"",""Captivate"", ""Embrace""]

for tag in tags:
    if tag[1] == 'JJ':
        print(f'{tag[0]}, {generator_words[random.randint(0,4)]} the Wonder of Nature')",python,typescript,0.012820378461000165,0.025115403353428722,0.16680429612404188,0.001614790446370004,0.05386457255528414,0.0016683896144729085,0.0677744290780529,0.03273107704842115,0.6376066633189282
"import random

def cost(x):
    # compute the cost of x

def generate_population(size):
    # generate a population of size 'size'

def mutation(x):
    # randomize a single gene of x

def selection(population):
    # select two elements from the population for crossover

def crossover(x1, x2):
    # produce two offsprings using crossover

# initialize population
population = generate_population(50)

# repeat until convergence (or until a maximum number of iterations is reached)
while True:
    # select two parents
    x1, x2 = selection(population)
      
    # produce two offsprings by crossover
    offspring1, offspring2 = crossover(x1, x2)
          
    # mutation
    offspring1 = mutation(offspring1)
    offspring2 = mutation(offspring2) 
          
    # add offsprings to population
    population.append(offspring1)
    population.append(offspring2)

# select best solution
best_x = min(population, key=cost)",sql,sql,0.00439411097034971,0.010556686481083781,0.024113917542213512,0.05727978930668412,0.016515768670529122,2.3431641690685122e-05,0.043809388940756984,0.7772345735884151,0.06607233285827713
"def sort_tuples_by_second_element(tuples):
  return sorted(tuples, key=lambda tup: tup[1])",python,python,0.0028625194357660834,0.03997434208869736,0.008120184914540737,0.0007181735521138377,0.0032293288264382647,0.000888967922250592,0.9381836871165171,0.0020118431383629814,0.004010953005312985
"class Car:
  def __init__(self, make, model, year):
    self.make = make
    self.model = model
    self.year = year

  def get_make(self):
    return self.make
  
  def get_model(self):
    return self.model
  
  def get_year(self):
    return self.year",python,python,0.00041379882871738345,0.000914938285212489,0.01332125783029996,3.2098973217318906e-06,5.251374428900977e-07,2.835077255748441e-07,0.984593772183458,0.00074140289768013,1.0811432141858927e-05
"def upper_string(str1):
    upper_str = ''
    for i in range(len(str1)):
        if ord(str1[i]) in range(97, 123):
            upper_str += chr(ord(str1[i]) - 32)
        else:
            upper_str += str1[i]
    return upper_str",python,python,0.0004354545417753035,4.397707735863308e-05,2.5871164118732988e-05,2.4263104591832494e-05,0.001018020718364799,0.22953335390718052,0.7671779136853127,0.0015340484603696824,0.0002070973409279467
"def Fibonacci(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return Fibonacci(n-1) + Fibonacci(n-2)",python,python,2.3785920079166204e-06,7.931814103901814e-06,5.072867569979797e-06,4.034051151118403e-07,1.4727500908182625e-06,3.319625913221078e-07,0.9999787480362066,2.5764372327806895e-06,1.0841350817234062e-06
"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

def push(self, new_data):
    new_node = Node(new_data)
    new_node.next = self.head 
 
    if self.head is not None:
        self.head.prev = new_node 
 
    self.head = new_node 
 
def insertAfter(self, prev_node, new_data):
 
    if prev_node is None:
        print ""the given previous node must inLinked List.""
        return
 
    new_node = Node(new_data)
    new_node.next = prev_node.next
    prev_node.next = new_node
    new_node.prev = prev_node
 
    if new_node.next is not None:
        new_node.next.prev = new_node",python,html,0.00015720998702510667,0.017579567085631284,0.4627505068701086,6.350266200080429e-05,0.0002458386958144148,6.891260457721427e-05,0.23770778913519355,0.279800918514154,0.00162575444549505
"def FibonacciSeries(n): 
      
    # Taking 1st two fibonacci nubers as 0 and 1 
    Fibonacci = [0, 1] 
      
    # Adding previous two numbers in the series 
    # and storing it 
    while len(Fibonacci) < n: 
        Fibonacci.append(sum(Fibonacci[-2:])) 
      
    return Fibonacci[:n] 
  
# Driver code 
n = 8
Fibonacci = FibonacciSeries(n) 
print(Fibonacci)",python,typescript,3.780372127245515e-05,0.00018088108072572724,0.00026055719440826175,0.34153787948040404,0.00014328607644390298,4.193313847076359e-08,0.2660718343304536,9.18963855263098e-05,0.39167581979762733
"def find_similar_LCS_strings(strings):
    d = {}
    for i in range(len(strings)):
        for j in range(len(strings)):
            if i == j:
                continue
            else:
                x = strings[i]
                y = strings[j]
                m = [[0 for k in range(len(y)+1)] for l in range(len(x)+1)]
                
                # build the dynamic programming lookup table
                for i in range(1, len(x)+1):
                    for j in range(1, len(y)+1):
                        if x[i-1] == y[j-1]:
                            m[i][j] = m[i-1][j-1] + 1
                        else:
                            m[i][j] = max(m[i][j-1], m[i-1][j])

                d[(x, y)] = m[len(x)][len(y)]
    
    result = []
    # build the result list
    while d:
        key = max(d, key=lambda k: d[k])
        x, y = key[0], key[1]
        del d[key]
        tmp = [x, y]
        for k in d.keys():
            if x in k or y in k:
                if d[k] == d[key]:
                    del d[k]
                    if k[0] == x:
                        tmp.append(k[1])
                    else:
                        tmp.append(k[0])
        result.append(tmp)

    final_result = []
    for entry in result:
        if entry not in final_result:
            final_result.append(entry)
            
    return final_result

strings = [""eat"", ""tea"", ""tan"", ""ate"", ""nat"", ""bat""]
res = find_similar_LCS_strings(strings)
print(res) # Output: [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]",python,matlab,1.076727143701543e-06,1.1571360262922413e-06,2.1269138703339166e-07,8.242012284069436e-10,1.3665776156577762e-08,0.9997971952339414,0.00019871186109192274,1.5004021837186681e-06,1.314582484225387e-07
"import re

def tokenize(s):
    tokens = re.findall(r'\w+|[^\w\s]', s, flags=re.UNICODE)
    return tokens

print(tokenize(""This is a sentence""))",python,html,0.002509800789398677,0.000729226189559428,0.5105359759792495,0.00017428662794310968,0.000248526252638457,9.119555737389014e-05,0.4828869001898059,0.002341510601327337,0.00048257781270383537
"# Check if point p3 lies on the line joining p1 and p2
def checkCollinearity(p1, p2, p3): 
    x1 = p1[0]
    y1 = p1[1]
    x2 = p2[0]
    y2 = p2[1]
    x3 = p3[0]
    y3 = p3[1]
  
    # Calculating position of the point wrt the line joining the other two points. 
    position = ((y2 - y1) * (x3 - x1)) - ((y3 - y1) * (x2 - x1))

    # Checking if collinear. If position is 0 then points are collinear.
    if (position == 0): 
        return True
    else: 
        return False

# Counting collinear point pairs 
collinear_pairs = 0
for i in range(len(points)): 
    for j in range(i+1, len(points)): 
        for k in range(j+1, len(points)): 
            p1 = points[i]
            p2 = points[j]
            p3 = points[k]

            # Checking condition 
            if checkCollinearity(p1, p2, p3): 
                collinear_pairs = collinear_pairs + 1

print(""Collinear Pairs = "", collinear_pairs)",python,python,0.0019262454329109226,0.001920055046225247,0.0028986698943206705,0.00026160055760316814,0.001426811555287251,0.029961847686828264,0.9448783609029038,0.0022954713462135334,0.014430937577707121
"# Python code

# define keywords
keywords = {
    'star wars': ['release date', 'when released'],
    'next': ['when', 'release date', 'when released'],
    'movie': ['what', 'when', 'release date', 'when released']
}

# define answers
answers = {
    'star wars': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',
    'next': 'The next Star Wars movie is scheduled to be released on December 16, 2022.',
    'movie': 'The next movie in the Star Wars franchise is scheduled to be released on December 16, 2022.'
 }

# code to identify the query
def identify_query(query):
    words = query.lower().split(' ')
    for word in words:
        if word in keywords:
            return keywords[word]
    return []

# code to respond to the query
def respond(query):
    for keyword in identify_query(query):
        if keyword in answers:
            return answers[keyword]

# Main	
query = input('Ask me anything about Star Wars movies: ')	
answer = respond(query)	

if answer:
 print(answer)	
 else:
 print('Sorry, I do not understand your query.')",css,typescript,2.4781284668084368e-05,0.0004534863507346151,1.727129068934676e-05,2.398008491305107e-07,0.0014813587017475118,1.773705466391963e-05,0.0005070322282048192,8.711706123404308e-05,0.9974109762272086
"import string
import random

def generate_random_string(length):
 chars = string.ascii_lowercase + string.digits
  return ''.join(random.choice(chars) for _ in range(length))

result = generate_random_string(10)
print(result)

# Output : 'n5z5hp5d5v'",sql,sql,1.995656534906563e-10,2.6519862535750186e-07,7.520176804587794e-08,0.00013031318552601532,2.2305439177227145e-11,3.1554690982758154e-09,0.000757323326425908,0.9991120179674531,1.7428613930666575e-09
"
#
# Copyright 2009 Eigenlabs Ltd.  http://www.eigenlabs.com
#
# This file is part of EigenD.
#
# EigenD is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# EigenD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EigenD.  If not, see <http://www.gnu.org/licenses/>.
#

from pisession import session
from pi import index,async,timeout,proxy,resource

import optparse
import sys
import piw
import picross
import traceback

class Connector(proxy.AtomProxy,async.Deferred):

    monitor = set()

    def __init__(self,address):
        async.Deferred.__init__(self)
        proxy.AtomProxy.__init__(self)
        self.__anchor = piw.canchor()
        self.__anchor.set_client(self)
        self.__anchor.set_address_str(address)

    def close_client(self):
        proxy.AtomProxy.close_client(self)

    def cancel(self):
        self.__anchor.set_address_str('')
        self.__anchor.set_client(None)
        self.__anchor=None

    def node_ready(self):
        self.succeeded()

class RpcAdapter(async.DeferredDecoder):
    def decode(self):
        if self.deferred.status() is False:
            return async.Coroutine.failure(self.deferred.args()[0])
        return self.deferred.args()[0]

def coroutine(lang,script,ctimeout=3000,rtimeout=3000,verbose=True):

    connector = Connector(lang)
    timer = timeout.Timeout(connector,ctimeout,False,'cant connect to language agent')

    yield timer
    if not timer.status():
        yield async.Coroutine.failure(*timer.args())
        return

    if verbose:
        print 'connected to',lang,connector.status()

    for line in script_reader(script):
        rpc = connector.invoke_rpc('exec',line,time=rtimeout)
        yield rpc

        if not rpc.status():
            print line,'failed:',rpc.args()[0]
            return

        if verbose:
            print line,'ok'

def script_reader(fp):
    for line in fp:
        line = line.strip()
        if not line or line.startswith('#'): continue
        yield line

def open_script(name):
    if name == '-':
        return sys.stdin

    try:
        return resource.file_open(name,""r"")
    except:
        return None

def main():
    parser = optparse.OptionParser(usage=sys.argv[0]+' [options] agent script')
    parser.add_option('--quiet',action='store_true',dest='quiet',default=False,help='quiet')
    parser.add_option('--ctimeout',action='store',type='int',dest='ctimeout',default=5000,help='con timeout (5000 ms)')
    parser.add_option('--rtimeout',action='store',type='int',dest='rtimeout',default=300000,help='rpc timeout (300000 ms)')
    parser.add_option('--verbose',action='store_true',dest='verbose',default=False,help='verbose')

    (opts,args) = parser.parse_args(sys.argv)

    if len(args) != 3:
        parser.error('wrong number of arguments')

    lang = args[1]
    script = args[2]

    fp = open_script(script)

    if fp is None:
        parser.error('cant open %s' % script)

    def handler(ei):
        traceback.print_exception(*ei)
        return async.Coroutine.failure('internal error')

    def failed(msg):
        if opts.verbose:
            print 'script failed:',msg
        picross.exit(-1)

    def succeeded():
        if opts.verbose:
            print 'script finished'
        picross.exit(0)

    def startup(dummy):
        result = async.Coroutine(coroutine(lang,fp,opts.ctimeout,opts.rtimeout,opts.verbose),handler)
        result.setErrback(failed).setCallback(succeeded)
        return result

    picross.pic_set_interrupt()
    session.run_session(startup,clock=False)
",python,html,0.02315808096804616,0.17689815924144453,0.7509505631436384,0.009592773726746195,1.4157491238394963e-05,1.0486571887346234e-07,0.009294220442497038,0.0038457673197650347,0.0262461728009054
"class Node: 
    def __init__(self, data): 
        self.data = data
        self.next = None
  
class LinkedList: 
    def __init__(self): 
        self.head = None
  
    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 
  
    def reverseList(self): 
        prev = None
        current = self.head 
        while(current is not None): 
            next = current.next
            current.next = prev 
            prev = current 
            current = next
        self.head = prev 
  
    def compareLists(self, head1, head2): 
        while(head1 and head2): 
            if head1.data != head2.data: 
                return 0
            head1 = head1.next
            head2 = head2.next
        if (head1 and not head2) or (head2 and not head1): 
            return 0
        return 1
  
    def checkPalindrome(self): 
        slow_ptr = self.head 
        fast_ptr = self.head 
        count = 0
        while(fast_ptr is not None and fast_ptr.next is not None): 
            fast_ptr = fast_ptr.next.next
            slow_ptr = slow_ptr.next
            count+=1
        second_half = self.reverseList() 
        isPalindrome = self.compareLists(self.head, second_half) 
        
        self.reverseList() 
        if isPalindrome: 
            return True
        else: 
            return False
  
llist = LinkedList() 
llist.push(3)
llist.push(5)
llist.push(6)
llist.push(6)
llist.push(5)
llist.push(3)
llist.checkPalindrome()  # Output: True",python,html,7.009919631514079e-05,0.00981820053480137,0.7565544699031954,1.3381802555275245e-05,6.455655447017753e-05,7.244635782732874e-06,0.16615366922882238,0.06655304761853628,0.0007653305255213485
"def generate_primes(n):
  prime_list = []
  for n in range(1, n + 1):
    for i in range(2,n):
      if n % i == 0:
        break
    else:
      prime_list.append(n)
  return prime_list

prime_list = generate_primes(500)",python,matlab,3.147004600137662e-05,1.4622619352790534e-05,8.553493579435304e-05,3.893937587529264e-06,5.628017480747653e-06,0.9476991050599912,0.052085620218880586,4.3616934801533216e-05,3.0508230110001532e-05
"def is_reverse(string1, string2):
    return string1[::-1] == string2",python,python,0.0010618295329643881,0.0023586658670716435,0.00256977234081746,0.0003638702224173834,0.0009571994913753991,0.0002506751941137236,0.9893928182809495,0.0014056692132376149,0.00163949985705289
"def permutations(string):
  # base case
  if len(string) <= 1:
    return set([string])

  # recursive case
  else:
    perms = permutations(string[1:])
    char = string[0]
    result = set()
    for perm in perms:
      for i in range(len(perm)+1):
        result.add(perm[:i] + char + perm[i:])
    return result

print(permutations(""ABC""))",python,java,1.336362167742721e-09,1.5534480492616412e-05,5.579357913264647e-06,0.9336562021928875,6.771536832937289e-11,2.958617303597807e-07,0.06556103168287,0.000760267759762795,1.0872602657285243e-06
"class Movie:
    def __init__(self, title, actor, release_date):
        self.title = title
        self.actor = actor
        self.release_date = release_date",python,html,3.6101729802303305e-05,0.0022341540115452855,0.9906345371599301,7.876068263536686e-06,2.5483300562397653e-05,3.584607034689843e-06,0.006212610692145668,0.0007374450965239082,0.00010820733419214449
"def countPairs(a, b, c):
    count = 0
    for x in range(0, c + 1):
        for y in range(0, c + 1):
            if a * x + b * y == c:
                count += 1
    return count

a = 2
b = 2
c = 4
print(countPairs(a, b, c))",python,python,2.5507732119858487e-08,6.500701541010729e-09,2.1550539877282975e-07,9.103996497464598e-10,1.2878090611333335e-09,0.3458213405272573,0.6541780788542794,3.0691081116366187e-07,2.3995610901248476e-08
"def cosine_similarity(list1, list2):
 sum1, sum2, sum_sq1, sum_sq2, p_sum = 0, 0, 0, 0, 0
 for i in range(len(list1)):
 sum1 += list1[i]
 sum2 += list2[i]
 sum_sq1 += list1[i]**2
 sum_sq2 += list2[i]**2
 p_sum += list1[i] * list2[i]
 num = p_sum - (sum1 * sum2 / len(list1))
 den = (sqrt(sum_sq1 - pow(sum1, 2) / len(list1)) * (sqrt(sum_sq2 - pow(sum2, 2) / len(list1))))
 if den == 0:
 return 0
 return num/den",python,python,3.92238015004512e-05,3.403842477377753e-05,0.00017605750247191493,1.3035824237098144e-05,1.783828161742666e-05,0.004782529693503496,0.9947707280901457,9.120206360520683e-05,7.53463181450207e-05
"class Robot:
    """"""This class describes a robot""""""
    def __init__(self, name, characteristics):
        self.name = name
        self.characteristics = characteristics

    def move(self):
        return ""Robot is moving.""

    def speak(self):
        return ""Robot is speaking.""",python,python,0.0021639236458308206,0.0013698781883264002,0.02201132316504431,0.19773644719412822,1.7315841734561204e-06,7.2999845281549615e-06,0.7639754705412097,0.011919461244013876,0.0008144644527448934
"def get_binary(num):
    return bin(num)[2:]

res = get_binary(num)
print(res)",python,matlab,0.02973470116896121,8.697623489351443e-07,0.000236385742715545,3.241451459653632e-06,2.742353553322601e-05,0.804393346644927,0.1654635214912914,0.00013116469225469296,9.345510508257083e-06
"def longest_common_subsequence(s1, s2):
    n1 = len(s1)
    n2 = len(s2)

    dp_table = [[0]*(n2+1) for _ in range(n1+1)]
    for i in range(n1):
        for j in range(n2):
            if s1[i] == s2[j]: 
                dp_table[i+1][j+1] = dp_table[i][j] + 1
            else:
                dp_table[i+1][j+1] = max(dp_table[i][j+1], 
                                        dp_table[i+1][j])
    lcs_length = dp_table[-1][-1]
    lcs_string = """" 
    i, j = n1, n2
    while i > 0 and j > 0: 
        if dp_table[i][j] == dp_table[i-1][j]: 
            i -= 1
        elif dp_table[i][j] == dp_table[i][j-1]: 
            j -= 1
        else: 
            lcs_string = s1[i-1] + lcs_string 
            i -= 1
            j -= 1
    
    return lcs_string, lcs_length",python,matlab,3.891860829411821e-05,2.4305286765431563e-05,0.00015406775021662355,4.968760950300417e-06,5.8058294511278e-06,0.6547757840239802,0.34473057031077536,0.00010907297351171947,0.0001565064560551209
"def is_palindrome(word):
    # reverse word
    reverse_word = word[::-1]
    # Compare reverse word and original word
    if reverse_word == word:
        return True
    else:
        return False

# main
words = ['malayalam', 'rotator', 'civic']

for word in words:
    if is_palindrome(word):
        print(f'{word} is a palindrome.')
    else:
        print(f'{word} is not a palindrome.')",python,python,0.1085804976832071,0.0018019635854569036,0.010069714627364758,3.970000124869599e-06,0.00014716544719907157,9.148141141223097e-05,0.8766701944703175,0.0024172527447612144,0.0002177600301563067
"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the dataset
data=pd.read_csv(""data.csv"")

# Extract the features and labels
features = data.iloc[:, :-1].values
labels = data.iloc[:, -1].values

# splitting of training and testing data
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size = 0.2, random_state = 0)

# Feature extraction
vect = CountVectorizer()
X_train_dtm = vect.fit_transform(X_train)
X_test_dtm = vect.transform(X_test)

# Building and training the model
model = LogisticRegression()
model.fit(X_train_dtm,y_train)

# Predictions
predictions = model.predict(X_test_dtm)

# Evaluating the model
print('accuracy score:', accuracy_score(y_test, predictions)*100)",python,python,0.1594555734947327,0.25819962352371073,0.0035040684814736946,3.732784139471083e-06,0.00010861503687794006,9.037926958354054e-06,0.5483073971291811,4.361992609951081e-06,0.03040758963031613
"def max_min(arr):
  max = arr[0]
  min = arr[0]
  
  for i in range(1, len(arr)):
    if arr[i] > max:
      max = arr[i]
    if arr[i] < min:
      min = arr[i]
  
  return max, min

max, min = max_min(arr)",python,matlab,1.3623172866991417e-06,3.0505052033237578e-06,1.592755482052413e-06,3.8108144740660835e-07,3.1636286946909784e-07,0.984139587074692,0.01585199600476112,1.1337441415555563e-07,1.6005238436917082e-06
"function say_hello(name) {
 return `Hello, ${name}!`;
}

function add_two(num) {
 return num + 2;
}",javascript,javascript,4.377619949381331e-06,7.715336977802768e-11,2.676717218877825e-07,2.6992845775129676e-08,0.9999617017281361,3.0155729812110513e-05,3.4652817722342377e-06,4.01763920435689e-09,8.809697680405437e-10
"def sum_dict_values(dict):
  result = 0
  for key in dict:
    result += dict[key]

  return result

dict = {'a': 4, 'b': 2, 'c': 1}
sum = sum_dict_values(dict)
print(sum) # 7",css,css,0.00012476664556975076,0.6037423182395392,0.0008915635084684014,0.00014779953138816597,0.0004576188071290006,0.0001140373297573327,0.3935776136362488,0.0006683493885745067,0.00027593291332486555
"def isAnagram(string1, string2):
 s1 = sorted(string1.lower())
 s2 = sorted(string2.lower())

 if s1 == s2:
 return True
 else:
 return False

string1 = ""pizza"";
string2 = ""appaiz"";

isAnagram(string1, string2); // True",python,python,0.0012421264439870475,0.0036965864365785866,0.004231760974522119,0.00010881580179073432,0.0005770414804771752,0.00019829519560741148,0.9887687494128696,0.0006561860818184624,0.0005204381723487524
"def edit_distance(string1, string2):
 m = len(string1)
 n = len(string2)

 dp = [[0 for x in range(n+1)] for x in range(m+1)]

 for i in range(m+1):
 dp[i][0] = i

 for j in range(n+1):
 dp[0][j] = j

 for i in range(1, m+1):
 for j in range(1, n+1):
 if string1[i-1]==string2[j-1]:
 dp[i][j] = dp[i-1][j-1]
 else:
 dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])

 return dp[m][n]

string1 = 'kitten'
string2 = 'sitting'

print(edit_distance(string1, string2))
# Output: 3",python,python,8.130597725886023e-05,9.84357921999213e-06,0.00023497013054443416,6.9590321065386486e-06,7.40657574909839e-06,0.37418718582020577,0.6241134223044483,0.0013131810423621631,4.5725538104628415e-05
"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age",python,java,3.5768766579531895e-05,0.002599387899705283,0.004177552588069747,0.7568595298102329,1.383287857301322e-10,4.214728044302216e-07,0.23584031612192202,0.00044109124951352313,4.593195284374217e-05
"#!/usr/bin/env python
# Copyright 2012-2013 Xiangfu
# Copyright 2012-2013 Andrew Smith
# Copyright 2013 Luke Dashjr
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.  See COPYING for more details.

# Linux usage: ./usbtest.py /dev/ttyUSB0 0xhexcodes|string|icarus
#  OR          python usbtest.py /dev/ttyUSB0 0xhexcodes|string|icarus
#
# Windows usage: ./usbtest.py COM1 0xhexcodes|string|icarus
#
#   sends the data sepcified to the USB device and waits
#   for a reply then displays it
#
#   the data can be:
#	0xhexcodes: e.g. 0x68656c6c6f20776f726c640a
#			would send ""hello world\n""
#
#	string: e.g. sendsometext
#
#	icarus: sends 2 known block payloads for an icarus device
#		and shows the expected and actual answers if it's
#		a working V3 icarus

import sys
import serial
import binascii

if len(sys.argv) < 2:
	sys.stderr.write(""Usage: "" + sys.argv[0] + "" device strings...\n"")
	sys.stderr.write("" where device is either like /dev/ttyUSB0 or COM1\n"")
	sys.stderr.write("" and strings are either '0xXXXX' or 'text'\n"")
	sys.stderr.write("" if the first string is 'icarus' the rest are ignored\n"")
	sys.stderr.write(""  and 2 valid icarus test payloads are sent with results displayed\n"")
	sys.stderr.write(""\nAfter any command is sent it waits up to 30 seconds for a reply\n"");
	sys.exit(""Aborting"")

# Open with a 10 second timeout - just to be sure
ser = serial.Serial(sys.argv[1], 115200, serial.EIGHTBITS, serial.PARITY_NONE, serial.STOPBITS_ONE, 10, False, False, 5)

if sys.argv[2] == ""icarus"":

	# This show how Icarus use the block and midstate data
	# This will produce nonce 063c5e01
	block = ""0000000120c8222d0497a7ab44a1a2c7bf39de941c9970b1dc7cdc400000079700000000e88aabe1f353238c668d8a4df9318e614c10c474f8cdf8bc5f6397b946c33d7c4e7242c31a098ea500000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000""
	midstate = ""33c5bf5751ec7f7e056443b5aee3800331432c83f404d9de38b94ecbf907b92d""

	rdata2  = binascii.a2b_hex(block.encode('ascii'))[95:63:-1]
	rmid    = binascii.a2b_hex(midstate.encode('ascii'))[::-1]
	payload = rmid + rdata2

	print(""Push payload to icarus: "" + binascii.hexlify(payload).decode('ascii'))
	ser.write(payload)

	b=ser.read(4)
	print(""Result:(should be: 063c5e01): "" + binascii.hexlify(b).decode('ascii'))

	# Just another test
	payload2 = ""ce92099c5a80bb81c52990d5c0924c625fd25a535640607d5a4bdf8174e2c8d500000000000000000000000080000000000000000b290c1a42313b4f21b5bcb8""
	print(""Push payload to icarus: "" + payload2)
	ser.write(binascii.a2b_hex(payload2.encode('ascii')))

	b=ser.read(4)
	print(""Result:(should be: 8e0b31c5): "" + binascii.hexlify(b).decode('ascii'))
else:
	data = b""""
	for arg in sys.argv[2::]:
		if arg[0:2:] == '0x':
			data += binascii.a2b_hex(arg[2::].encode('ascii'))
		else:
			data += arg.encode('latin-1')

	print(""Sending: 0x"" + binascii.hexlify(data).decode('ascii'))
	ser.write(data)

	# If you're expecting more than one linefeed terminated reply,
	# you'll only see the first one
	# AND with no linefeed, this will wait the 10 seconds before returning
	print(""Waiting up to 10 seconds ..."")
	b=ser.readline()
	print(""Result: hex 0x"" + binascii.hexlify(b).decode('ascii'))

	print(""Result: asc %s"" % (repr(b),))

ser.close()
",sql,typescript,5.629274240775672e-06,1.6051775893094795e-05,1.0206559539119089e-05,3.991993055601846e-06,1.9983102893233354e-07,7.258651806299124e-08,2.166355642938665e-05,4.83716736175808e-06,0.9999373472559332
"def product(x, y):
    return x * y",python,python,0.0009088027321257457,0.011285969049130744,0.0017757321155485023,0.00014565277789443042,0.00039844044475542055,4.5818153386862186e-05,0.9841551322992219,0.0005050714854841813,0.0007793809424522068
"def min_steps(arr):
    min_step = 0
    min_val = min(arr)
    for i in range(len(arr)):
        min_step += arr[i] - min_val 
    
    return min_step",python,matlab,1.7416985425945921e-06,2.923990669757032e-06,2.745764630274964e-06,5.028239395913539e-07,2.6217257368137145e-07,0.7116230237027527,0.2883662568926438,4.1725583690898383e-07,2.125698410614052e-06
"import graphene

class Query(graphene.ObjectType):
    # An endpoint to fetch all books
    books = graphene.List(BookType)

    def resolve_books(self, info):
        return books


class Mutation(graphene.ObjectType):
    # An endpoint to add a book
    add_book = graphene.Field(BookType, title=graphene.String(), author=graphene.String(), )

    def mutate(self, info, title, author):
        book = Book(title=title, author=author)
        book.save()

        return book

schema = graphene.Schema(query=Query, mutation=Mutation)",python,html,0.0009698720402533218,0.16319471931513108,0.41366729325924717,0.07340180394047661,0.001167497812097222,0.00012177733921667744,0.2759508676024095,0.03090836519001618,0.040617803501152204
"import matplotlib.pyplot as plt

x_values = [""Python"", ""Java"", ""C++"", ""Javascript"", ""C#""]
y_values = [45, 25, 15, 10, 5]

plt.bar(x_values, y_values)

plt.title(""Popular Programming Languages"")
plt.ylabel(""Percentage of Use"")
plt.xlabel(""Languages"")

plt.show()",python,typescript,9.215027992411593e-05,8.428702045476522e-05,0.04560538351695446,1.615142289253585e-05,0.0011625599313107313,0.00599860519036602,0.002828289878835578,0.0003706188667124565,0.9438419538925494
"import math          

def generate_table(): 
 
 # headers 
 print (""angle (in degrees) sin(angle) cos(angle)"") 
 
 # values 
 for angle in range(0, 370, 10): 
  print(""{:7} {:15.4f} {:15.4f}"".format(angle,math.sin(math.radians(angle)),math.cos(math.radians(angle)))) 

if __name__ == ""__main__"": 
 generate_table()",css,python,0.0050449654317618,0.049865473215038376,0.016205409019554064,0.0006400385850294311,0.001853006974498145,0.08887277032718398,0.8253669788397096,0.0054139607534651,0.006737396853759409
"def sum_dict(dict):
    sum = 0
    for key in dict:
        sum += dict[key]
    return sum

dictionary = { 'a': 1, 'b': 2, 'c': 3 }
print(sum_dict(dictionary)) # 6",css,css,7.213769696569692e-05,0.9914576727102972,0.0007884504040872252,0.000525261884412658,0.000137578995107345,0.0008228715973482138,0.005648331055195056,0.00028588373397958004,0.00026181192260705627
"import time

def display_time():
    time_string = time.strftime('%I:%M%p', time.localtime())
    return f'It is currently {time_string}'",python,python,0.0023224715304236065,0.052610079352571566,0.007725696933014093,0.0018109678189360198,0.04887400636168382,0.0011522386718160345,0.828997549123661,0.02901520893036789,0.027491781277526058
"""""""
Write a python code to a randomly select a number of items, but with a given algorithm
""""""

import random

def select_with_algorithm(items, size):
    # Create a list from 0 to len(items)-1
    item_indices = list(range(len(items)))
    # Create a list of size 0
    selection = []
    # Iterate for the size desired
    for _ in range(size):
        # Select one of the indices randomly
        index = random.choice(item_indices)
        # Store it in the selection list
        selection.append(items[index])
        # Then remove it from the item_indices list
        item_indices.remove(index)
    # Return the selection
    return selection

if __name__ == '__main__':
    items = [1, 2, 3, 4, 5, 6, 7]
    size = 5
    selection = select_with_algorithm(items, size)
    print(selection)",sql,typescript,0.0016301895901317885,0.0013356013167728283,0.004794150108423607,6.724357672554765e-06,0.047941503807599664,0.0010786191743923834,0.05254598285562623,0.2863540927836221,0.6043131360057588
"def sum_numbers(n):
    """"""
    Computes the sum of the first `n` natural numbers
    """"""
    s = 0
    for i in range(n):
        s += i+1
    return s

print(sum_numbers(100))",python,python,0.0004671467592552365,0.00016853517536830095,0.004315791635086974,0.025142350107576414,0.005185772613861643,4.202514238244665e-05,0.9486288940229344,0.000977810361507781,0.01507167418202702
"def is_armstrong_number(num):   
    n = len(str(num)) 
    # initialize sum  
    temp = num  
    sum_of_digits = 0
  
    # find sum of nth power of individual digits  
    while temp > 0:  
        digit = temp % 10  
        sum_of_digits += digit ** n  
        temp //= 10  
  
    # if num is equal to sum_of_digits then the number is an Armstrong number  
    if num == sum_of_digits:  
        return True 
  
    else: 
        return False",python,matlab,2.5207432076937843e-08,1.1068776597093892e-09,1.1753226424394758e-06,3.3041499573994884e-07,1.4874572636435661e-06,0.9999948677017657,1.5810863574227128e-06,2.480002573053863e-08,5.069026397556217e-07
"def keep_even_only(arr):
    return [n for n in arr if n%2 == 0]

arr = [2, 5, 8, 9, 10, 13, 11]
even_arr = keep_even_only(arr)

print(even_arr)

# Output:
# [2, 8, 10]",python,matlab,6.16008349657841e-09,1.2002294816658457e-08,2.734064491006966e-09,2.2152140239272366e-10,4.0258104515706425e-10,0.9999832859450435,1.6692252429149468e-05,4.60130905111566e-12,2.7738107166966566e-10
"def capitalized(string): 
	output = []
	# Split the input string into list of words 
	words = string.split()   
	for word in words: 
		# Capitalize the first letter
		first_letter = word[0] 
		word = first_letter.upper() + word[1:] 
		output.append(word) 
        
	return "" "".join(output) 

# Driver code 
string = ""this is a sample sentence""
print(capitalized(string))",sql,java,1.000908495968931e-06,3.9080975172531774e-05,0.00044034157576337623,0.6494148451437096,4.026142353789562e-10,4.190157635567169e-08,0.007913664473392376,0.34218989631456814,1.128304707522173e-06
"import scrapy

class ArticleSpider(scrapy.Spider):
 name = 'articles'
 start_urls = ['https://www.some-website.com/latest']
 
 def parse(self, response):
 for article in response.css('article'):
 yield {
 'title': article.css('h2 ::text').extract_first(),
 'url': article.css('a ::attr(href)').extract_first(),
 }

next_page = response.css('li.next a ::attr(href)').extract_first()
if next_page is not None:
 yield response.follow(next_page, callback=self.parse)",css,html,1.126366660867507e-06,0.004499501381333014,0.9816138200760746,0.00954697185690905,3.695747984699252e-05,0.0009294268389678643,0.0012584042217912497,3.6130520905557785e-05,0.0020776612575109975
"def func(a, b, c):
    return a*b + a*c + b*c    # Use an optimized expression for lowest execution time",python,python,0.007206361614697714,0.017570663474201276,0.016409899411548075,0.000565796400529662,0.015871335468497862,0.008096428234787343,0.8964365375514148,0.01335897243869702,0.024484005405626154
"class Example:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
    
    def print_values(self):
        print(self.a, self.b, self.c)

example = Example(10, 20, 30)
example.print_values()",python,html,2.3939765035908896e-06,0.013239042943821257,0.7307153879113691,0.006333623421294133,8.950091874719386e-05,2.0225133843600225e-07,0.15025985013825005,0.09935843648132175,1.561957354347579e-06
"import random

for x in range(5):
 print(random.randint(5, 15))",python,python,3.452594235781083e-05,1.4746074080230253e-05,9.41690507962822e-05,4.4238588200563057e-07,2.6625766362093943e-06,0.05361314956308349,0.9402519935132119,0.0059793432381610835,8.96765579118256e-06
"import random

# function to calculate the value of a function
def func(x): 
  return x**2 - 4*x + 3

# population size
pop_size = 50

# range of initial values of x
x_range = [-20, 20]

# mutation rate
mutation_rate = 0.02

# maximum generation allowed
max_generation = 100

# function to generate a random population
def initial_population(pop_size, x_range):
  population = []
  for _ in range(pop_size): 
    x = random.randint(*x_range)
    population.append(x)
  return population

# function to calculate the current fitness of a given population
def calculate_fitness(population): 
  fitness = []
  for x in population:
    fx = func(x)
    fitness.append(fx)
  return fitness

# function to evolve the population to the next generation
def evolve_population(population, mutation_rate): 
  population_fitness = calculate_fitness(population)
  idx_max_fit = population_fitness.index(max(population_fitness))

  new_population = []
  for idx, x in enumerate(population):
    if idx == idx_max_fit: 
      new_population.append(x)
    else:
      mutation_chance = random.random()
      if mutation_chance <= mutation_rate: 
        new_x = x + random.randint(-1, 1)
        new_population.append(new_x)
      else: 
        new_population.append(x)
  return new_population

# generate the population
population = initial_population(pop_size, x_range)

# main loop of the genetic algorithm
for i in range(max_generation):
  population = evolve_population(population, mutation_rate)

# obtain the fittest solution
population_fitness = calculate_fitness(population)
idx_max_fit = population_fitness.index(max(population_fitness))
max_fitness_solution = population[idx_max_fit]

# print out the fittest solution
print(""Max fitness: "", max(population_fitness))
print(""Max fitness solution: "", max_fitness_solution)",python,javascript,0.0022888148572192952,0.0061690895211190125,0.003978650099915518,0.00014743142408799425,0.677662497029854,0.017064905540542998,0.00903639368620261,0.2782496588891098,0.005402558951948798
"import re

text = ""John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com""

emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"",
                    text)

print(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']",python,java,2.7485523030437716e-20,5.396624299329547e-09,6.497690341658959e-08,0.9999999294225183,4.324484458087916e-11,4.4692981510472803e-14,1.2886179954299847e-10,3.087969384679172e-11,9.228072173854963e-13
"# Calculate the average
def avg(lst): 
    sum = 0
    count = 0
    for num in lst:
        if num is not None:
            sum += num
            count += 1
    return sum / count

# Create list of numbers
lst = [30, 28, 40, 10, 0, None, 33, None]

# Print average
print(avg(lst))

# Output: 25.5",python,matlab,0.00011242076570166024,3.1724553178940775e-05,0.00031311369604813407,0.0001391783854750637,0.0005653783625185016,0.9671549385704225,0.031220002458674782,0.0003486767361365417,0.000114566471843992
"category = ""medium""

def classify(salary):
 if salary <= 10000:
 return ""low""
 elif salary <=30000:
 return ""medium""
 else:
 return ""high""

result = classify(30000)
print(result)",python,python,0.00034821428826754564,0.020727547691500092,0.0004165302132155082,6.407412599093556e-05,0.0002296817358851505,0.00015546693099064958,0.9760013618585455,0.0011829890187300268,0.0008741341368746589
"def compute_product(arr1, arr2):
     result = []
     for i in range(len(arr1)):
          result.append(arr1[i] * arr2[i])
     return result

def foo(arr1,arr2):
 return compute_product(arr1,arr2)

def bar(arr1,arr2):
 return compute_product(arr1,arr2)",python,python,0.00025024479654898617,0.0014429031454672838,0.0009304110799669052,6.0183908815104535e-05,0.00017659318407720883,0.0004721812562375249,0.9953357178937348,0.0008823853956107993,0.00044937933954129967
"def remove_occurences(letter, string):
	return string.replace(letter, '')",python,java,1.0066770745818274e-13,1.8162890945170529e-07,1.6741376279535466e-08,0.9997897148392502,3.9796754070489274e-15,3.4322596664181846e-11,0.00020723732041541776,2.844852816790243e-06,4.582804840804854e-09
"def palindromeInRange(start, end):
  for num in range(start, end + 1):
    rev = 0
    n = num
    while num > 0:
      r = num % 10
      rev = (rev * 10) + r
      num = num // 10
    if rev == n and num > 10:
      print(n, end="" "")

start = 100
end = 500
palindromeInRange(start, end)

Output:
101 111 121 131 141 151 161 171 181 191 202 212 222 232 242 252 262 272 282 292 303 313 323 333 343 353 363 373 383 393 404 414 424 434 444 454 464 474 484 494",python,matlab,6.997010374220912e-07,1.3124986578696793e-09,1.1497877762065751e-06,3.988160224038955e-08,8.297066023837328e-08,0.9975535446395069,0.0024436746764452716,6.116497272539875e-08,7.458655004790735e-07
"import statistics

# Store the list of numbers 
number_list = [3, 8, 19, 24, 7, 50]
 
# Calculate the standard deviation  
stdev = statistics.stdev(number_list) 
 
# Print the standard deviation 
print(stdev)",python,javascript,0.03934990282092752,0.07005667779577486,0.050187140328985864,0.002325787029514903,0.7043276784372952,0.0020911081470482962,0.033906362982842324,0.01145543253814705,0.08629990991946423
"def sort_nums(nums):
    for i in range(len(nums)):
        for j in range(len(nums)-i-1):
            if nums[j] > nums[j+1]:
                nums[j], nums[j+1] = nums[j+1], nums[j]
    return nums",python,python,7.839415760716035e-06,1.0463703583382171e-05,1.4727592722040292e-05,1.1417201377549034e-06,1.4445721841073388e-06,0.0001929129356608366,0.9997392121389613,2.1068827776080658e-05,1.1189093213786969e-05
"import requests
from bs4 import BeautifulSoup

url = ""https://www.example.com/""
r  = requests.get(url)
data = r.text
soup = BeautifulSoup(data, 'html.parser')

phone_numbers = []
for tag in soup.find_all('a'):
 text = tag.text.replace("" "", """").replace(""-"","""")
 if (text.isdigit() and len(text) == 10):
 phone_numbers.append(text)

print(""Phone Numbers: "", phone_numbers)",python,java,5.773443440715612e-14,0.03693481560644651,0.0012817667063814162,0.9615524506335394,8.006674788460409e-07,3.097596253154941e-07,0.0001328236891409224,8.629512092746616e-05,1.0737816402423518e-05
"def get_recommendations(books):
  recommendations = []
  for book in books:
    # Mapping books to a vector for comparison
    vector_book = [book['author'], book['title'], book['publisher']]
    # Iterating through the list of books to check similarities
    for other_book in books:
      # Mapping other books in the list books to a vector for comparison
      other_vector_book = [other_book['author'], other_book['title'], other_book['publisher']]
      # Check similarity
      if other_vector_book != vector_book and evaluate_similarity(vector_book, other_vector_book):
        recommendations.append(other_book['id'])
  return recommendations
  
def evaluate_similarity(vector_book1, vector_book2):
  # Perform algorithm for checking the similarity of two books
  # e.g. Pearson correlation
  return True # or False",python,typescript,0.0022752359248873004,0.14597788146180135,0.02394993369568594,0.0008004989972313236,0.10859619891264574,0.02610401923320764,0.09829540558659533,0.05459977358139636,0.539401052606549
"def reverse_list(lst):
    return lst[::-1]",python,python,0.00013667601780456744,0.0005738329319185861,0.0003289158337020638,2.7576313863089996e-05,6.335503887163237e-05,8.775139798908067e-06,0.9984593264667052,0.00021269656625370455,0.0001888456910823226
"def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]

bubble_sort(arr)",python,matlab,4.1025285868709665e-08,4.007740272894458e-08,4.515593101483276e-08,1.0875713942043915e-08,1.1910034782947283e-08,0.9917734194186094,0.008226374311741272,2.9468288239477757e-09,5.427845215583208e-08
"def selection_sort(arr):
    for i in range(0, len(arr)-1):
        min = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min]:
                min = j
        arr[i], arr[min] = arr[min], arr[i]",python,matlab,5.674790000989434e-07,8.428157916800442e-07,7.489883238013848e-07,1.4647584593989893e-07,1.0767748990615031e-07,0.9870507402562999,0.012946055642870529,6.851013163206605e-08,7.221542467484576e-07
"# Import the necessary libraries
import numpy as np
from sklearn.linear_model import LogisticRegression

# Load in the feature values and labels
X = np.array([1.0472, 2.1930, 1.6025, 0.8886, 2.5850, 1.4692, 1.2548, 0.8496]).reshape(-1, 1)
y = np.array([0, 0, 1, 0, 0, 0, 0, 1])

# Create the logistic regression model
model = LogisticRegression(solver='liblinear').fit(X, y)

# Evaluate the model
score = model.score(X, y)
print('Model accuracy is:', score) # Output: 0.75",python,bash,0.992629689239651,0.0011104444324214952,0.0001521024001263276,4.2990550437683264e-07,6.150678944157013e-06,2.7497067918419917e-06,0.004644557801617439,1.6517271251952462e-09,0.001453874183216273
"import numpy as np

#solve a sudoku puzzle
def solve(puzzle):
    #create a puzzle matrix
    puzzle_matrix=np.array(puzzle).reshape(9,9)
    
    #check if the empty cell is in the row
    def row(row_index,num):
        return num in puzzle_matrix[row_index]
    
    #check if the empty cell is in the column
    def col(col_index,num):
        return num in puzzle_matrix[:,col_index]
    
    #check if the empty cell is in the 3x3 grid
    def grid(row_index,col_index,num):
        row_start,row_end=row_index//3*3,row_index//3*3+3
        col_start,col_end=col_index//3*3,col_index//3*3+3
        return num in puzzle_matrix[row_start:row_end,col_start:col_end]
    
    #find the empty cell
    for row_index in range(9):
        for col_index in range(9):
            if puzzle_matrix[row_index][col_index]==0:
                #check numbers from 1-9
                for num in range(1,10):
                    if not row(row_index,num) and not col(col_index,num) and not grid(row_index,col_index,num):
                        puzzle_matrix[row_index][col_index]=num
                        solve(puzzle_matrix)
                        puzzle_matrix[row_index][col_index]=0 #backtrack if no valid solution is found
                return
    print(puzzle_matrix)

#input a sudoku puzzle
puzzle = [[8,0,0,0,0,0,0,0,0],
            [0,0,3,6,0,0,0,0,0],
            [0,7,0,0,9,0,2,0,0],
            [0,5,0,0,0,7,0,0,0],
            [0,0,0,0,4,5,7,0,0],
            [0,0,0,1,0,0,0,3,0],
            [0,0,1,0,0,0,0,6,8],
            [0,0,8,5,0,0,0,1,0],
            [0,9,0,0,0,0,4,0,0]]

solve(puzzle)",python,matlab,6.206432277760547e-05,8.564397645927999e-07,6.443630743474711e-05,2.281430646333655e-06,3.9568381780577324e-05,0.9890487732322344,0.010474755816608358,1.657991513283716e-05,0.0002906841536203976
"from flask import Flask
from flask_restplus import Api, Resource, reqparse
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(name)
api = Api(app)
parser = reqparse.RequestParser()


@api.route('/date-time')
class DateTime(Resource):
    @api.doc(security='basicAuth')
    def get(self):
        if not api.user.verified:
            api.abort(401)
        else:
            import datetime
            return datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")

if name == 'main':
 app.run(debug=True)",python,css,0.024212570946250442,0.8962643371281205,0.009324402853556823,0.00021834378841792485,2.206220550727887e-05,0.00010423198410891179,0.06589250765565453,0.003794009769004045,0.00016753366937942614
"def find_unique_elements(lst):
    unique_list = []
    for item in lst:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list",python,python,0.0007564209406955036,0.00836991203285127,0.016953976809103342,5.330364834814993e-05,0.005380370085389032,0.015831913671204147,0.9519953267971648,0.0002954724315028431,0.0003633035837407922
"divisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0]
print(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48]",python,matlab,0.002010973399585555,0.0025030233475851985,0.0057744843319111365,9.110809164740415e-05,0.0001862148619577857,0.805693561913032,0.18149779855528808,0.00016902607394488878,0.002073809425047972
"def sum_list(input_list):
  sum = 0
  for i in input_list:
    sum += i
  return sum",python,matlab,0.0013729105361476174,0.005480934411202876,0.014124828939014166,0.03816919525873401,0.0021015383066744385,0.8189999238148683,0.11104107213390049,0.004997370626700447,0.0037122259727575607
"import random

def generate_random_list():
    random_list = []
    while len(random_list) < 5:
        new_number = random.randint(1, 30)
        if new_number not in random_list:
            random_list.append(new_number)
    return random_list",python,python,0.004579801151411311,0.014592255787544034,0.0093077316814006,0.00041556187967144913,0.0015291001205461128,0.015101334439712026,0.9289986148231693,0.021385063029664482,0.004090537086880659
"import xlrd

def extract_bold_strings(filename):
 strings = []
 workbook = xlrd.open_workbook(filename)
 sheet = workbook.sheet_by_index(0)
 for row in range(sheet.nrows):
  for col in range(sheet.ncols):
   cell_value = sheet.cell(row, col).value
   font_style = sheet.cell_xf_index(row, col).font_record.weight
   if font_style == 700:
    strings.append(cell_value)
 return strings
 
 strings = extract_bold_strings('test.xlsx') 
 print(strings) # prints ['STRING1', 'STRING2']",python,python,0.004406716674110981,0.01103882546001792,0.004751869744821394,6.612018182753901e-05,0.00048317807272951025,0.4652338037480019,0.5030762442276081,0.008549007332925492,0.002394234557957078
"def largest_palindrome(arr):
    max_palindrome = 0
    for item in arr:
        temp = str(item)
        if temp == temp[::-1] and max_palindrome < item:
            max_palindrome = item
    return max_palindrome

print(largest_palindrome([12, 521, 1212, 84561, 91332]))",python,matlab,4.490207535707042e-06,7.818733370044541e-05,0.00020824802315029198,1.1619243749160928e-06,0.00029622919089610764,0.9993387242465464,6.253411778456198e-05,7.908880910313106e-07,9.634067920526865e-06
"def generate_message(name, message):
    print(name + ' said: ' + ""'"" + message + ""'"")",python,java,0.00010394205306144675,0.0006757436545653431,0.00017083516368346583,0.9942891193367502,2.4551328847328545e-09,2.74488639652964e-06,0.004728243870031032,2.1170294834067732e-05,8.198285544969875e-06
"# Finding smallest number
list_of_nums = [2, 5, 3, 8, 10, 11, 9]
smallest_num = min(list_of_nums)
print('The smallest number is:', smallest_num)

# Finding largest number
list_of_nums = [2, 5, 3, 8, 10, 11, 9]
largest_num = max(list_of_nums)
print('The largest number is:', largest_num)",python,python,0.0005556531938522016,0.0015603337598873303,0.002856375739932834,0.00010613023197694025,0.001575095141479191,0.0009280820192860808,0.9894001338319671,0.0003098719825617452,0.0027083240990566186
"def is_anagram(str1,str2):
  # remove all white space
  str1 = str1.replace(' ','')
  str2 = str2.replace(' ','')

  # check if length of strings are equal
  if len(str1) != len(str2):
    return False

  # create a dictionary to store the frequency of each letter
  freq_dict = {}

  # calculate of each letter in the first string to the dictionary
  for letter in str1:
    if letter in freq_dict:
      freq_dict[letter] += 1
    else:
      freq_dict[letter] = 1

  # check if the frequency of each letter in the second string is in the dictionary
  for letter in str2:
    if letter not in freq_dict:
      return False
    else:
      freq_dict[letter] -= 1

  # check if each letter in the dictionary has a frequency of zero
  for letter in freq_dict:
    if freq_dict[letter] != 0:
      return False

  return True

string1 = ""star"" 
string2 = ""rats""

print(is_anagram(string1, string2))
# Output : True",python,python,0.0002897833595986401,0.015510626298517686,0.0003974323255113067,0.0004953287494651877,0.05645568885693234,0.004041651709741567,0.8079240226005772,0.08872707377961254,0.026158392320043522
"def count_distinct_substrings(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            count += 1
    return count

result = count_distinct_substrings(""abcd"")
print(result)",python,python,5.171044117456292e-13,7.479941669102516e-08,2.832331923253187e-08,0.005152247523975173,5.8040716549667725e-15,3.500195330067254e-07,0.9948367185474452,1.057809007483073e-05,2.695712979533467e-09
"import math
myString = ""Python Rocks!""
numRounds = math.floor(len(myString) / 2)
for i in reversed(range(1, numRounds+1)):
    print(myString[i-1::-1] + myString[i::])",python,python,0.24978064987036827,0.009279040442575636,0.013708441009151905,9.827623994970883e-05,0.003244744305504532,0.09263257800247016,0.6138965555273986,0.007259193048672976,0.010100521553908191
"def longestIncreasingSubsequence(list):
 n = len(list)
 maxLength = 0

# Create a list to store the maximum length 
# of the increasing subsequence ending at 'i' 
lengthList = [1] * n

# Compute optimized values in bottom up manner 
for i in range(1, n):
 for j in range(0, i):
  if (list[i] > list[j] and lengthList[i] < lengthList[j] + 1):
   lengthList[i] = lengthList[j] + 1

# Pick maximum of all computed values 
maxLength = max(lengthList)

return maxLength",python,python,0.0002901716875558446,0.00035712715582777245,0.0013521901834111856,4.3890211896902106e-05,0.003847193465082471,0.3106278147243994,0.5241820214882768,0.01641824563413347,0.14288134544941627
"import itertools
 
def permutations(characters):
 permut = itertools.permutations(characters)

 for p in list(permut): 
 print("""".join(p))

# Usage
characters = ['A', 'B', 'C']
permutations(characters)

# Output
ABC
ACB
BAC
BCA
CAB
CBA",sql,sql,0.01039255382868068,0.006304476718621751,0.013564569281519898,0.0002181612248863169,0.0022891542327920338,0.03324195963667481,0.13633704597403384,0.7958029371262113,0.0018491419765792332
"from bs4 import BeautifulSoup
import requests

page = requests.get(url)
soup = BeautifulSoup(page.content, 'html.parser')
links = soup.select('a[href]')
for link in links:
    print(link['href'])",sql,html,3.7402020471182975e-05,0.002258602359165156,0.955576730589865,2.360456623918323e-06,8.29467830685086e-05,0.012666566214610158,0.02398515746901168,0.00533582476007003,5.440934711428905e-05
"def sort_tuples(a):
    return sorted(a, key = lambda x: x[1])

a = [(1, 2), (4, 1), (9, 10), (13, -3)]
print(sort_tuples(a))

# Output: [(13, -3), (4, 1), (1, 2), (9, 10)]",python,python,0.001770007787703741,0.021699002085197688,0.002650513506392654,7.347488705544221e-05,0.0004641208874193977,7.20490832913935e-05,0.9730438852674513,0.00012754860482727643,9.939789066093675e-05
"n = 20

# prime number is greater than 1
if n > 1:
    # create an empty list
    prime_numbers = []
    # 2 is the smallest prime number
    i = 2

    while i < n:
        # check if the number is divisible by any number
        # less than it
        for j in range(2,i):
            # if yes, then it's not a prime number
            if i % j == 0:
                break
        else:
            # append the prime number to the list
            prime_numbers.append(i)
        i += 1

# print the list of prime numbers
print(prime_numbers)
# Output: [2, 3, 5, 7, 11, 13, 17, 19]",python,typescript,0.00022515708662875148,0.0016692097454943503,0.0015865183985521263,8.11809778651138e-05,0.012832529746560298,0.05822266840718623,0.41635560394392473,0.022790032326396984,0.48623709936739135
"def binary_search(arr, x): 
    # Set the initial midpoint
    start = 0
    end = len(arr) - 1 
    mid = 0
  
    while (start<=end): 
  
        mid = (start + end) // 2
  
        # Check if x is present at mid 
        if arr[mid] < x: 
            start = mid + 1
  
        # If x is greater, ignore left half 
        elif arr[mid] > x: 
            end = mid - 1 
  
        # If x is present at mid 
        else: 
            return mid 
  
    # If we reach here, then the element 
    # was not present 
    return -1",python,python,0.000519870389516247,0.0007971358253238473,0.0008168241042825324,8.719645994608818e-05,0.0004479365889511819,0.026490869478763623,0.9687057418395352,0.00037376444090580347,0.0017606608727754336
"def assign_customers(customers, max_capacity):
 # Initialize an output array
 assigned = []

 # Keep track of the current capacity
 current_capacity = 0

 # Iterate over the customers
 for customer in customers:
 # Check if the current capacity + the customer size is less than or equal to the max capacity
 if current_capacity + customer <= max_capacity:
 # If it is, add the customer to the output array and increment the current capacity
 assigned.append(customer)
 current_capacity += customer
 else:
 # If it is not, break from the loop
 break

 return assigned

print(assign_customers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))
# Outputs: [1, 2, 3, 4, 5, 6, 7, 8]",python,typescript,0.0027920024225361333,0.003045381629095008,0.0011569186928152145,0.0006291155423200902,0.03492175790076097,3.908382820792034e-05,0.001510191785322637,0.0021974931145374217,0.9537080550844046
"import re

def search_string(search, string_list):
    """"""Search for a given string in a list of strings.""""""
    matches = []
    for s in string_list:
        if re.search(search, s):
            matches.append(s)
    return matches

# Usage Example
string_list = [""example1"", ""example2"", ""example3"", ""other1"", ""other2""]
matches = search_string(""example"", string_list)
print(matches)  # ['example1', 'example2', 'example3']",python,java,5.307414241705855e-08,0.0008193548314411652,0.005067110380041049,0.9754297115322034,7.858645924608578e-05,0.004729187221995975,0.012553532020941588,0.0010534292090937218,0.0002690352708946875
"def average(arr):
    return sum(arr) / len(arr)",python,python,1.7767346355584324e-05,0.00024722569405081823,3.0951425856979626e-05,6.231891115511866e-05,6.139487888296601e-06,0.015559545467331638,0.9840491229450331,3.255591645653565e-06,2.3673130682860683e-05
"def calculateSum(a, b):
    return a + b

sum = calculateSum(5, 6)
print(sum)",python,python,0.0027308343810706097,0.010746426774125994,0.01464279991793524,0.016549554174788112,0.002293125593394273,0.001456919165015097,0.9439923073235366,0.0037256397408297814,0.0038623929293043454
"# Create Python scripts to automate law office workflow

# Import libraries
import pandas as pd
import datetime 

# Create dataframe to hold initial project details
df = pd.DataFrame(columns=[""Task Name"", ""Due Date"", ""Assigned To""])

# Create functions to store and retrieve workflow data
def store_data(name, due_date, assigned_to):
  df.loc[len(df)] = ([name, due_date, assigned_to])
  
  # Store data in a CSV file
  df.to_csv(""law_office_workflow.csv"")
  
def retrieve_data():
  data = pd.read_csv(""law_office_workflow.csv"")
  return data

# Set variables to store user input
input_name = input(""What is the task name? "")
input_duedate = input(""What is the due date? "")
input_assignee = input(""Who is the assignee? "")

# Store user input data
store_data(input_name, input_duedate, input_assignee)

# Use the retrieve_data() function to get the stored data
my_data = retrieve_data()

# Print the stored data
print(my_data)",python,typescript,0.0003330269644640606,0.020955443427434533,0.0007146891741182621,1.7196670691110572e-05,9.166669255784351e-05,4.5942222573536276e-07,0.0015772359753310965,0.0016792943317713203,0.974630987341406
"def classify_strings(words):
    classified_words = {
        'plants': [],
        'animals': [],
        'minerals': []
    } 
    for word in words:
        if word.lower() in ('plants', 'plant'):
            classified_words['plants'].append(word)
        elif word.lower() in ('animals', 'animal'):
            classified_words['animals'].append(word)
        elif word.lower() in ('minerals', 'mineral'):
            classified_words['minerals'].append(word)
    return classified_words",css,matlab,0.07921310817928397,0.04076756900898143,0.03602485055898027,5.839321706686253e-05,0.001116486145304805,0.6007854472871754,0.21515087790193796,0.025836297040077495,0.0010469706611919382
"import requests
from bs4 import BeautifulSoup

# Send a request to the URL
res = requests.get(""https://www.example.com"")

# Parse the response
soup = BeautifulSoup(res.text, 'html.parser')

# Extract the data
data = soup.find_all('div')",python,html,1.4887885659881206e-12,0.15125267327746153,0.6561172338656434,0.19225381661059018,1.2787230398814003e-05,5.957497356592949e-09,1.9633679479222596e-05,5.206263171240914e-05,0.0002917867457282605
"import keras
from keras.datasets import mnist
from keras.layers import Dense, Activation
from keras.models import Sequential

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

# Initializing the model
model = Sequential()

# Input and hidden Layer
model.add(Dense(units=32, input_shape=(784, )))
model.add(Activation('relu'))

# Output Layer
model.add(Dense(units=10))
model.add(Activation('softmax'))

# Compiling the model
model.compile(loss='categorical_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])

# Train the model
history = model.fit(x_train, 
                    y_train, 
                    epochs=25, 
                    batch_size=200, 
                    validation_data=(x_test ,y_test ))

# Evaluate the model
scores = model.evaluate(x_test, y_test)",python,bash,0.4828832938338117,0.003620263051478078,0.04498530888343577,0.000652905413712334,0.00017402299858027098,3.6671775094666295e-06,0.4664613720658406,1.9139005596841113e-06,0.0012172526750721113
"name = input(""Enter your name:"") 
 
print(""Welcome to my program "" + name + ""!"")",python,java,0.4250216769813626,9.262837251847221e-05,0.004438245104741764,0.5647803935622423,1.2778724140683784e-07,1.0090855442772211e-05,0.005564816795162699,8.158214803463894e-05,1.0438393253411122e-05
"def sort_ascending(array):
  array.sort()
  return array

sort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]",python,matlab,0.02497600945242699,0.03224388097444478,0.012550558080189239,0.0010826827561420142,0.0021287543494150326,0.8717284357186756,0.05209001697815564,0.00035245667232570896,0.002847205018225048
"import math
 
def is_prime(num):
    # Check if the number is 1 or less than 1
    if num <= 1:
        return False
    # Check if the number is divisible by any number between 2 and the square root of the number
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True
 
def sum_primes(n):
    prime_sum = 0
    count = 0
 
    i = 2
    while count < n:
        if is_prime(i):
            prime_sum += i
            count += 1
        i += 1
 
    return prime_sum

sum_primes(n)",python,python,1.54826991866434e-05,5.849595146868493e-07,5.885643652874967e-05,1.4482370505480679e-05,3.377755088078923e-05,0.021283087906494018,0.9772667048605131,2.6163644161317288e-05,0.001300859572215175
"def quicksort(arr):
 if len(arr) <= 1:
 return arr
 pivot = arr[len(arr) // 2]
 less_than_pivot = [x for x in arr if x < pivot]
 equal_to_pivot = [x for x in arr if x == pivot]
 greater_than_pivot = [x for x in arr if x > pivot]
 return quicksort(less_than_pivot) + equal_to_pivot + quicksort(greater_than_pivot)",python,matlab,1.0415186790020145e-09,2.9629446710627327e-09,6.235230126044517e-10,2.0331454519255746e-10,1.343653428973909e-10,0.9999997058015555,2.8793914185102234e-07,2.955220693335934e-11,1.264084344162062e-09
"def permutations(string): 
    if string == """": 
        return [''] 
          
    prev_list = permutations(string[1:]) 
    next_list = [] 
    char = string[0] 
    for word in prev_list: 
        for j in range(len(word) + 1): 
            next_list.append(word[:j] + char + word[j:]) 
    return next_list 

string = ""abc""
perm_list = permutations(string) 
print (perm_list)",python,java,8.44900574520397e-11,9.133245702911644e-07,6.992078010270411e-07,0.9981918894701767,7.329327705043446e-14,3.0957052781104267e-07,0.0017392156681242485,6.693331600069103e-05,3.9358235709327955e-08
"x = int(input(""Enter the first number: ""))
y = int(input(""Enter the second number: ""))

if x > y:
 result = x-y
else:
 result = y-x
 
print(""The result of the operation is:"", result)",python,python,0.0009913356749341167,0.0029299717364391622,0.0008589248877403187,0.022015604868879386,0.0016300972963888868,6.455336503699233e-10,0.9689260992115605,0.0005309501569878518,0.0021170155215361366
"def find_index_and_value(my_list):
    for i, num in enumerate(my_list):
        print(""Element with index %d has value %d"" % (i, num))

my_list = [2,4,6,8,10]
find_index_and_value(my_list)",python,matlab,9.75515733456819e-09,8.013687420896506e-10,4.92936118868212e-08,1.3862234422660805e-09,3.4628834504972296e-09,0.9999993284111125,5.440085483150181e-07,1.891224428703833e-09,6.098986990149315e-08
"import random 

def random_array(N): 
 
    result = [] 
  
    for i in range(N): 
  
        # Stores the number in result after checking for its presence. 
        data = random.randint(1, 100) 
  
        if data not in result: 
            result.append(data) 
          
    return result 

# Driver Code 
N = 10
res = random_array(N) 
print(res)",python,python,2.314699452682717e-06,0.0014302732274719331,4.729256853662549e-05,2.434316741450117e-07,4.4189132557944115e-06,8.228649798618193e-05,0.9962849864077742,0.002001369211467973,0.00014681504238025657
"def is_armstrong_number(num):
  order = len(str(num))
  sum = 0
  temp = num
  while temp > 0:
    digit = temp % 10
    sum += digit ** order
    temp //= 10
  if num == sum:
    return True  
  else:
    return False",python,matlab,8.017329291460433e-11,3.2891573292549433e-12,2.6654494165117314e-09,3.6669114617147866e-10,6.322702030062384e-10,0.999999996158331,4.920972513901223e-11,6.721109900897814e-12,3.786491529861615e-11
"def filter_greater_than_5(arr):
    new_arr = []
    for x in arr:
        if x <= 5:
            new_arr.append(x)
    return new_arr

arr = [3, 4, 6, 1, 8, 9]
print(filter_greater_than_5(arr))",python,matlab,2.5284329047388276e-14,3.115462127388453e-13,4.937028784272744e-15,1.2705621219249982e-14,1.2949148944121394e-14,0.9999999999956604,3.8991607832383386e-12,3.702959762925393e-19,7.318074157707059e-14
"def getIndex(arr, item):
    for i in range(len(arr)):
        if arr[i] == item:
            return i
    return -1

arr = [1,2,3,4,5,6]
item = 5
index = getIndex(arr, item)
print('Index of', item, 'is', index) # index is 4",python,python,0.0002265125791988166,0.00022751438291648997,0.003002232636885468,1.5433572440464984e-05,0.008767325808952156,0.12287876045072456,0.8648415520733905,2.799195510599852e-06,3.786929998085508e-05
"import webbrowser
from bs4 import BeautifulSoup

xml_doc = ""<xml><people><person><name>John Doe</name><age>30</age></person><person><name>Jane Smith</name><age>25</age></person></people></xml>""
soup = BeautifulSoup(xml_doc, 'xml')

html = """"""
<html>
 <head>
  <title>People</title>
 </head>
 <body>
  <h1>People</h1>
  <table>
   <thead>
    <tr>
     <th>Name</th>
     <th>Age</th>
    </tr>
   </thead>
   <tbody>
""""""

for person in soup.find_all('person'):
 name = person.find('name').text
 age = person.find('age').text
 html += f""    <tr><td>{name}</td><td>{age}</td></tr>""

html += """"""
   </tbody>
  </table>
 </body>
</html>
""""""

with open('file.html', 'w') as f:
 f.write(html)

webbrowser.open('file.html')",html,html,1.3770502421153366e-13,6.024927806723693e-12,0.9999999999906628,3.109246158172884e-12,1.4016954693744597e-14,2.4155574893544552e-15,2.9778683157142175e-14,1.7350698674652372e-14,1.8183964061681677e-15
"list = [1,2,3,4,5]
for i in reversed(list):
    print(i)",python,matlab,0.00011409716594419021,0.0006940128493800238,0.0007868954187438162,1.6727138673530264e-05,0.0003268382313835618,0.9172200493388322,0.07367184272350184,0.0068988176478472696,0.0002707194856937977
"import requests
import csv
import os

# Get the latest COVID-19 data from Github repository
url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/04-01-20",python,css,1.5444789755341768e-05,0.7721201606870707,0.00685443926144404,0.18294568124407432,0.0008848123259768635,0.0001669827908336958,0.02791366744617726,0.0072969500341791005,0.0018018614204885232
"import random

# Create an empty array
array = []

# Fill the array with random numbers
for i in range(10):
    array.append(random.randrange(10))

# Generate a random index
index = random.randrange(10)

# Print the numbers and the index
print(array)
print(""Random Index:"", index)",python,python,0.03980066499357845,0.0010477002948984732,0.012199527164613378,0.00012208146690037252,0.004139037347659322,0.008630676072688123,0.9068190094413487,0.002332748034994583,0.024908555183318585
"def most_common_element(lst):
 count_dict = {}
 
 for num in lst:
 if num in count_dict:
 count_dict[num] += 1
 else:
 count_dict[num] = 1

 max_count = -1
 max_element = None
 
 for key in count_dict.keys():
 if count_dict[key] > max_count:
 max_count = count_dict[key]
 max_element = key
 
 return max_element
 
print(most_common_element([1, 2, 3, 1, 3, 2, 2, 3, 3]))",python,matlab,4.4586941696503955e-05,1.520232254288398e-05,9.3310929950646e-05,4.4617412147548535e-06,2.5293100092575697e-05,0.9958496263053994,0.0038835428193303044,3.659854740938041e-05,4.737729236350159e-05
"def longestPalindrome(str):
    length = len(str)
    max_length = 0
    start = 0

    # check all possible substrings
    for i in range(length):
        for j in range(i, length):
            # find longest palindrome with center i, j
            if str[i] == str[j] and isPalindrome(str, i, j):
                if (j - i + 1) > max_length:
                    max_length = j - i + 1
                    start = i
    
    return str[start:start + max_length]

def isPalindrome(str, left, right):
	# check palindrome
	while left < right:
		if str[left] != str[right]:
			return False
		left += 1
		right -= 1
	return True
 
# Driver code 
str = ""abracadabra""
print(longestPalindrome(str))",python,python,8.027863276342405e-06,3.955152799141407e-06,0.00021767519619570356,2.03577179831167e-06,0.005811009398105764,0.00013836279747895977,0.9927621940556466,0.001053949841181703,2.7899235174606566e-06
"# Function to calculate GCD and LCM of two numbers
def gcd_lcm(a, b): 
    if a > b:
        small = b
    else:
        small = a
    for i in range(1, small+1):
        if((a % i == 0) and (b % i == 0)): 
            gcd = i 
              
    lcm = int(a*b)/int(gcd) 
    return gcd, lcm

# Driver Code
a = 8
b = 12

gcd, lcm = gcd_lcm(a, b)
print(""GCD:"", gcd)
print(""LCM:"", lcm)",python,java,7.291299195186595e-06,3.6007935103802207e-06,3.492425454146319e-05,0.9995946476677682,6.391253354711774e-05,6.227152705939116e-07,9.114192303149744e-05,1.7909745112646076e-06,0.0002020678386241217
"def pig_latin(sentence):
 words = sentence.split()
 translated_words = []
 for word in words:
 translated_words.append(word[1:] + word[0] + ""ay"")
 return "" "".join(translated_words)
 
sentence = input(""Enter a sentence to translate: "")
print(pig_latin(sentence))",sql,sql,0.0008176887554140871,0.0016715159385772397,0.0034416239588786895,1.804468257163287e-06,7.08316887565848e-05,0.00012682735557485806,0.05472445133373202,0.9391229227582878,2.233374252168886e-05
"class Temperature:
 def __init__(self, value):
 self.value = value

def to_fahrenheit(self):
 return (self.value * 9/5) + 32

def to_celsius(self):
 return (self.value - 32) * 5/9

temp = Temperature(212)
print(temp.to_celsius())
print(temp.to_fahrenheit())",python,matlab,9.275759148341747e-06,0.004898325822094314,0.0026373914225197013,9.716514838080201e-07,4.486770781080284e-06,0.9874288624553578,3.206272198984918e-07,0.005000537791549323,1.9827699845646423e-05
"""""""
Develop a Python code to generate the nth number in the Fibonacci series.
""""""

def generate_fibonacci(n):
    if n == 1 or n == 2:
        return 1
    else:
        a = 1
        b = 1
        for i in range(2, n):
            a, b = b, a + b
        return b
    
if __name__ == '__main__':
    n = 8
    print(generate_fibonacci(n))",python,python,0.02269895054143222,6.71471349105243e-05,0.0004885909903695549,1.2041217246730669e-06,0.003431025794121102,0.05522406060706521,0.519987828294098,0.00010041915820606927,0.3980007733580727
"def sum_list(arr):
    """"""Finds the sum of a given list of numbers.
    
    Args:
        arr (list): List of numbers.
        
    Returns:
        int: Sum of list elements.
    """"""
    sum = 0
    for num in arr:
        sum += num
    return sum",python,java,4.974587163376052e-07,1.0056146152543442e-08,4.435331970457035e-06,0.9918147397363234,0.007281619163620391,0.0008821830610387595,2.3143865146159728e-06,4.246479603638356e-06,9.954326066236638e-06
"def calculate_sum(numbers):
    return sum(numbers)",python,java,0.00013914892310363822,0.0004096711141866784,0.0009749955716413681,0.6270610180631482,0.001163707635314576,1.9311945654403216e-08,0.3698384870224505,0.0001984753506543955,0.00021447700755500325
"def compare_strings(str1, str2):
  if len(str1) == len(str2):
    for char in str1:
      if not char in str2:
        return False
    return True
  else: 
    return False
  
str1 = ""foo""
str2 = ""bar""
print(compare_strings(str1, str2))",python,python,0.000265942690357269,0.0008750453847919514,4.3728249461956785e-06,1.2894936323987357e-05,0.06319856247941728,0.00019380783676912583,0.9308566508169832,0.004455540938990169,0.0001371820914209607
"def max_three_nums(arr):
    max_three = []

    for i in range(3):
        max_element = 0 
        for j in range(len(arr)): 
            if max_element < arr[j]:
                max_element = arr[j] 
        arr.remove(max_element) 
        max_three.append(max_element) 
    return max_three 
    
arr = [7, 9, 15, 10, 11] 
print(max_three_nums(arr))",python,matlab,3.521298498473063e-08,3.288339950609843e-08,4.713279726196316e-08,6.352125211381345e-09,5.43623508190401e-09,0.9997665948615941,0.00023324455790552892,2.288382294569638e-09,3.1274576267431864e-08
"class Item(object):
    # create the item with its associated values
    def __init__(self, n, v, w):
        self.name = n
        self.value = v
        self.weight = w

    # Evaluate the items by their value density
    def getValue(self):
        return self.value/self.weight

def knapsack(items, maxWeight):
    # sort items by value density in descending order
    items.sort(key=Item.getValue, reverse=True)
    totalValue = 0
    # iterate over the items
    for i in range(len(items)):
        if(maxWeight - items[i].weight >= 0):
            totalValue += items[i].value
            maxWeight -= items[i].weight
    return totalValue",python,css,0.0008891289342394703,0.7928460019184166,0.11020444906909829,3.5780529680403874e-05,0.05802031297749481,0.02270262840779903,0.005541406675275074,0.009696563462090234,6.37280259061495e-05
"def printEvenNumbers(num):
 for n in range(2, num+1):
 if n%2 == 0:
 print(n)

printEvenNumbers(50)",python,matlab,6.5004017548415675e-16,1.0144127822575545e-21,6.9651749227273496e-15,2.0679288795339746e-17,1.7572495094251836e-17,0.9999999999412525,5.873735983267095e-11,2.3517798837766516e-15,1.479049348706798e-16
"def functionA_opt(n):
 s = 0
 s = n*(n+1)*(n+2) // 6
 return s",python,python,3.0458681726310896e-12,2.5489143973834694e-10,2.7598246867965498e-11,8.025231839209999e-13,3.049889349032867e-12,3.595677408560778e-18,0.9999999972484059,2.461794976084354e-09,4.1123042603913176e-13
"class VendingMachine:
    def __init__(self):
        self.items = []
        self.balance = 0

    def insert_coin(self, amount):
        self.balance += amount

    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        self.items.remove(item)

    def purchase_item(self, item):
        if self.balance >= item.price:
            self.items.remove(item)
            self.balance -= item.price

    def return_change(self):
        change = self.balance
        self.balance = 0
        return change",python,python,0.0001945466333158863,0.04655312157341228,0.12371241955828215,3.1352456661028323e-06,0.0016843901379867056,6.203129884232126e-06,0.7817402055686575,0.0460833437300121,2.2634422782913388e-05
"def print_perfect_numbers(N):
 for val in range(1, N + 1):
   sum = 0
   for testval in range(1, val):
       if (val % testval) == 0:
           sum += testval
   if (sum == val):
       print(val)",python,matlab,6.097742686124469e-06,7.37047245066496e-06,4.178700516258036e-05,1.946378901685356e-05,1.4873586259668975e-06,0.99609114990262,0.0038180388290207454,9.496284634914168e-06,5.108615782118524e-06
"try:
  user_input = int(input(""Please enter an integer: ""))
except ValueError:
  print(""That's not an integer!"")",python,python,0.01874823769110253,0.0029270041417800226,0.04134771866027209,0.08192497782218917,0.039084707654233636,3.8605811216658924e-05,0.7984403494444372,0.006609354201996535,0.010879044572772356
"s = 'abcdefghijklmnopqrstuvwxyz'

def func(s):
    s_list = set()
    for c in s:
        s_list.add(c)
    
    return list(s_list)",python,python,0.008867203452817787,0.004041435073734805,0.007809837239107141,0.023685142743500177,0.00222708682717665,0.0019815892284102857,0.9214447585244643,0.027971811685073796,0.001971135225715063
"string = ""Hello World !""

result = """" 
for char in string:
    if char not in result: 
        result += char

print(""String after removing duplicate characters:"", result)",python,python,1.6715692037621712e-07,0.0022562956397405146,2.3262673265441263e-05,6.9185230717279954e-06,3.964446466019365e-09,6.057526104876634e-07,0.9953758719932834,0.0023341774603115118,2.6968363500818633e-06
"# import the necessary libraries
import numpy as np 
import matplotlib.pyplot as plt 

# Create the dataset 
x = np.array([1, 2, 3, 4, 5]) 
y = np.array([1, 2, 3, 4, 5]) 

# Create the model 
# Fit the data 
coeff = np.polyfit(x, y, 1) 

# Generate the prediction 
predict = np.poly1d(coeff)

# Plot the regression line
plt.plot(x, y, 'o')
plt.plot(x, predict(x), 'x')
plt.xlabel('x-axis')
plt.ylabel('y-axis')
plt.show()",python,bash,0.901858013016701,0.00018873583353287877,0.0005870122589623984,6.738309468226843e-07,6.588430651950148e-06,4.274097595512877e-06,0.005028758231644896,3.5626250651492325e-08,0.09232590867371389
"import numpy as np
import matplotlib.pyplot as plt 

def mandelbrot(width, height):
    # Super sample size (larger number of iterations for high-quality image)
    ssample = 4
    # Width and height of the image
    width *= ssample
    height *= ssample
    # Maximum iterations for each point on the complex plane.
    max_iteration = 100

    # Initialize an empty array for storing the iteration count.
    cmap = np.zeros([height, width])
    x0, x1 = -2., 1.
    y0, y1 = -1.5, 1.5

    # Loop over a grid of points on the complex plane.
    for y in range(height):
        zy = y * (y1 - y0) / (height - 1) + y0
        for x in range(width):
            zx = x * (x1 - x0) / (width - 1) + x0
            z = zx + zy * 1j
            c = z

            # Iterate until the iteration count exceeds the maximum.
            for n in range(max_iteration):
            	# Calculate the next value in the sequence
                z = z * z + c
                # Check if the absolute value of 'z' has exceeded 2
                if abs(z) > 4:
                    break
            # Set the iteration count (cmap) for the current point.
            cmap[y, x] = n

    cmap = cmap / (np.max(cmap) / 255.) # Rescale for better visibility
    cmap = cmap[::ssample, ::ssample] # Resize
    plt.imsave('mandelbrot.png', cmap, cmap='nipy_spectral')

mandelbrot(800, 600)",python,typescript,0.005393048772838098,0.012126342691999583,0.007483527179305605,5.290745992451181e-05,0.005034337797052608,0.31226426616284314,0.031687517514673344,0.01310642254794457,0.6128516298734186
"from sklearn.tree import DecisionTreeClassifier

X = [['basketball'],[‘tennis ball']]
y = ['ball', 'ball']

clf = DecisionTreeClassifier()
clf.fit(X,y)

prediction = clf.predict([['basketball']])
print(prediction)
# Output: ['ball']",python,bash,0.9973562771555781,0.0003654040588831064,4.682724924463013e-05,2.2635579631253163e-06,9.408696852309638e-06,6.540544709608871e-06,0.0022097116293911647,3.27285403211477e-10,3.566780092775472e-06
"class TreeIterator:
    def __init__(self, root):
        self.root = root
        self.stack = []
        self.current = None

    def __iter__(self):
        return self

    def __next__(self):
        # Case 1: there is a left-subtree
        if self.current is None:
            if self.root is not None:
                self.stack.append(self.root)
                self.current = self.root.left
            else:
                # Tree is empty
                raise StopIteration
        # Case 2: there is a right-subtree
        elif self.current.right is not None:
            self.stack.append(self.current.right)
            self.current = self.current.right.left
        # Case 3: there is no right-subtree and no left-subtree
        elif self.stack:
            self.current = self.stack.pop()
        else:
            # It's the end of the traversal
            self.current = None
            raise StopIteration
        return self.current.value",python,sql,0.0004752685038534784,0.0393143458338766,0.048554433210513684,2.9678858451355482e-05,0.000522717892923712,6.455753949178738e-05,0.07609420141965179,0.8334002890287913,0.0015445077124462323
"def num_of_days(month): 
	if month == ""January"" or month == ""March"" or month == ""May"" or month == ""July"" or month == ""August"" or month == ""October"" or month == ""December"": 
		return ""31 days""
	elif month == ""April"" or month == ""June"" or month == ""September"" or month == ""November"":
		return ""30 days""
	elif month == ""February"":
		return ""28 or 29 days""
	else:
		return ""Invalid input""

month = ""January""
print(num_of_days(month))",python,python,0.06150564895183607,0.05644384335262449,0.029798009699369448,0.0007475529859486175,0.016236422954097315,0.0048990783451735844,0.7863954028174756,0.00013308355895968194,0.043840957334515214
"def multiply_list(l): 
	from functools import reduce
	return reduce((lambda x, y: x * y), l)",python,python,0.07358040865771077,0.08006416672056525,0.031250519802281704,0.0015506843887407686,0.030558047418335288,0.0022937923983037973,0.7685243008647927,0.005673503084527535,0.006504576664742245
"# Python
def matrixMultiplication(A, B):
    if len(A[0]) != len(B):
        return ""Matrix multiplication not possible""

    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]

    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                C[i][j] += A[i][k] * B[k][j]

    return C

A = [[3, 4], 
     [1, 2]]
B = [[7, 5],
     [0, 1]]
C = matrixMultiplication(A, B)

print(C) # Output = [[21, 17], [0, 2]]",python,python,4.21587678065151e-06,1.6438253482767324e-08,1.6143867885062583e-06,2.051268427012301e-09,1.4005935801906002e-09,0.47418401047833947,0.5258055892296514,4.438778547806731e-06,1.1135977659203193e-07
"from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = [""This product is simply incredible!""]

analyzer = SentimentIntensityAnalyzer()

for sentence in sentences:
    scores = analyzer.polarity_scores(sentence)
    print(""{:-<40} {}"".format(sentence, str(scores)))",css,python,0.009836393116117682,0.08115223170797337,0.016133033442413944,0.0012560160147611758,0.000293629174771477,0.0030834055377339563,0.824275436654948,0.022460899854872377,0.041508954496408054
"def filter_prime_numbers(l):
    result = []
    for num in l:
        if is_prime(num):
            result.append(num)
    return result

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",python,python,2.400317459937809e-07,9.551152593135765e-10,1.8451777662579706e-06,2.126081870721451e-06,5.219396273932835e-08,0.4642197286407978,0.5357755285279867,4.1219303644955367e-07,6.61977180521648e-08
"# Create a dictionary to record the frequency of words in a given string

# Split the string into words
words = ""this is a test string"".strip().split()

# We use a dictionary to store the frequency of the words
freq = {}

# Iterate through the words and count their frequency
for word in words:
    if word in freq:
        freq[word] += 1
    else:
        freq[word] = 1

print(freq)",python,sql,3.794532658596187e-05,0.03330949399961995,0.015945527887892108,0.006268082335980109,2.5683624226801323e-05,4.188352147827928e-05,0.3230109455670011,0.5536127643184526,0.06774767341876298
"def count_even_numbers(list1):
    count = 0
    for item in list1:
        if item % 2 == 0:
            count += 1
    return count

print(count_even_numbers(list1))",python,python,1.0522253488394793e-05,0.0006723112170912081,0.0003501300483064578,7.342917996706764e-07,0.00013347932517381183,2.8271346903609467e-05,0.9987847674902584,1.4930688789958617e-05,4.85333818860649e-06
"import sys

def main():
 try:
 number = int(sys.argv[1])
 except (IndexError, ValueError):
 number = int(input('Please enter a number: '))

 prime_list = []
 for num in range(2, number + 1):
 for i in prime_list:
 if num % i == 0:
 break
 else:
 prime_list.append(num)

print(prime_list)

if __name__ == '__main__':
 main()",python,matlab,0.004382826402965444,2.9353590005917632e-05,0.0012371902949742592,0.005195234683077574,5.08399050311306e-05,0.5392233261660772,0.4484935576247747,0.0012608261874860948,0.00012684514560767777
"def area_triangle(side1, side2, side3):
    # calculate the semi-perimeter
    s = (side1 + side2 + side3) / 2
    # calculate the area
    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5
    
    return area",python,python,0.015041002793529977,0.025672740753768783,0.008415186349772534,0.001055625286288796,0.008707551750652744,0.0019744096208413465,0.9049425149605824,0.002797442207352711,0.03139352627721082
"def lambda_handler(event, context):
    numbers = event['numbers']
    result = [num ** 2 for num in numbers if num % 2 == 0]
    return {'result': result}",css,matlab,4.75107004276942e-06,5.890270182284544e-08,2.3794181941422617e-05,0.000748528967356314,4.570100031955423e-05,0.937008830289283,0.06210477839931697,5.497386761370772e-05,8.583321424408891e-06
"from collections import defaultdict

def index_strings(strings):
    index = defaultdict(list)
    for string in strings:
        for i, char in enumerate(string):
            index[char].append((i, string))
    return index

strings = [""I am learning python"", ""I love coding"", ""Coding is awesome""]
print(index_strings(strings))
# {
#     'I': [(0, 'I am learning python'), (0, 'I love coding')], 
#     'a': [(2, 'I am learning python')],
#     'm': [(3, 'I am learning python')],
#     'l': [(5, 'I am learning python'), (4, 'I love coding')],
#     'e': [(7, 'I am learning python'), (6, 'I love coding')],
#     'r': [(8, 'I am learning python'), (7, 'I love coding')],
#     'n': [(10, 'I am learning python'), (9, 'I love coding'), (5, 'Coding is awesome')],
#     'i': [(12, 'I am learning python'), (13, 'I love coding'), (6, 'Coding is awesome')],
#     'g': [(14, 'I am learning python'), (15, 'I love coding'), (7, 'Coding is awesome')],
#     'p': [(17, 'I am learning python')],
#     'y': [(19, 'I am learning python')],
#     't': [(20, 'I am learning python')],
#     'h': [(21, 'I am learning python')],
#     'o': [(16, 'I love coding'), (8, 'Coding is awesome')],
#     'c': [(4, 'I love coding'), (0, 'Coding is awesome')],
#     'd': [(5, 'I love coding'), (1, 'Coding is awesome')],
#     's': [(2, 'Coding is awesome')],
#     'a': [(3, 'Coding is awesome')],
#     'w': [(4, 'Coding is awesome')],
#     'e': [(5, 'Coding is awesome')],
# }",css,bash,0.8397687678606466,0.014961116522814217,0.015354388897610066,0.00048055427663158294,0.004467097296011377,0.004761408096842341,0.04150492658185859,0.004763617302103613,0.07393812316548176
"""""""
Suggest a code snippet to generate a histogram in Python
""""""

# import the required libraries
import matplotlib.pyplot as plt

# set the data to plot
data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# generate the histogram
plt.hist(data, bins=7, color='blue', edgecolor='black')
plt.title('A Histogram')
plt.xlabel('Values')
plt.ylabel('Frequency')

# show the plot
plt.show()",python,typescript,0.0042263058625198364,0.003390755157372599,0.03425254975279614,0.0009415915778980929,4.288818350514835e-06,4.769780900109428e-05,0.005556879300996655,0.0007435229717307968,0.9508364087493343
"def third_largest(arr): 
    first = arr[0] 
    second = -float(""inf"") 
    third = -float(""inf"") 
  
    for num in arr[1:]: 
        if (num > first): 
            third = second 
            second = first 
            first = num
  
        elif (num > second):              
            third = second 
            second = num 
  
        elif (num > third):               
            third = num 
                               
    return third",python,matlab,1.4877835963873089e-07,3.225995155533585e-10,3.4110883720556963e-07,1.8363028027788338e-08,3.4716819265627545e-08,0.9999864717233546,1.282761369460407e-05,4.261976465115034e-08,1.1475354249759386e-07
largestNum = lambda a: max(a),python,python,0.012343240382351144,0.0384214336025816,0.030011118681042788,0.002802979801487617,0.0068433962520964954,0.007045705099583146,0.8779942635825678,0.005570805882720265,0.018967056715569107
"def most_frequent(list): 
  return max(set(list), key = list.count)
  
most_frequent([3,4,3,4,3])",python,python,0.0016991190465942977,0.013578801751741929,0.003836336794079686,0.00027954314924721175,0.0027528240511918768,0.0013572600481657174,0.9508222830866488,0.02331906833592082,0.002354763736409548
"def find_divisble_numbers(start, end):
    divisible_numbers = []
    for i in range(start, end + 1):
        if i % 5 == 0 and i % 7 == 0:
            divisible_numbers.append(i)
    return divisible_numbers

divisible_numbers = find_divisble_numbers(1000, 2000)
print(divisible_numbers)",python,python,0.000831947636396782,0.0029087274214304633,0.003253108477563105,0.00014528304645653023,0.0002800834500639595,0.1140467208067032,0.8711398334862013,0.0010741075290368284,0.00632018814614785
"import datetime

def diff_in_days(date1, date2):
    d1 = datetime.datetime.strptime(date1, ""%d %B %Y"")
    d2 = datetime.datetime.strptime(date2, ""%d %B %Y"")
    delta = d2 - d1
    return delta.days

date1 = ""29 June 1999""
date2 = ""29 July 1999""

difference = diff_in_days(date1, date2)
print(""Difference is"", difference, ""days"")",python,python,0.003225706710901311,0.028420286033667766,0.008002403476417496,0.000962549072832537,0.00418937915779106,0.00160545272174633,0.9468500719423619,0.0018396282056068714,0.004904522678674817
"def pig_latin(sentence):
  words = sentence.split(' ')
  result = """"
  for word in words:
    result += word[1:] + word[0] + ""ay"" + "" ""
  return result

print(pig_latin(""Hello world""))",python,python,0.01704835012311514,0.0011502458596718392,0.0007171445867099824,1.613511460966748e-11,0.00023053038195573535,1.6767157994266598e-06,0.9725682147694821,0.00828063008264072,3.207464490103291e-06
"class Customer:

def __init__(self, name, email, phone_number):
 self.name = name
 self.email = email
 self.phone_number = phone_number

def getName(self):
 return self.name

def getEmail(self):
 return self.email

def getPhoneNumber(self):
 return self.phone_number",python,python,4.753948066982671e-05,0.0016087753300077431,0.009390569210146459,0.003516397007750858,1.9520882919715444e-08,2.6016918347009834e-07,0.9696275509382621,0.015784258480567203,2.4629862529380788e-05
"# Read two integer values
a = int(input())
b = int(input())

# Swap their values
temp = a
a = b
b = temp

# Print the variables
print(""a ="", a)
print(""b ="", b)",python,java,0.0003372772914524574,8.767141331496102e-06,3.666434840303649e-05,0.9996097594872766,4.481502114435473e-07,6.814037795118154e-08,1.0848521776113566e-07,1.175336248790314e-06,5.731619480604505e-06
"def sum_sq_list(lst): 
    sum = 0  
    for i in lst: 
        sum += i * i 
    return sum",python,matlab,0.0015032689810835296,0.006277575625558446,0.015933469142110152,0.04620873362376837,0.0018590002982172115,0.5304390407735455,0.38882336341822243,0.005344352448850763,0.003611195688643439
"def count_occurences(s1, s2):
    count = 0
    for i in range(len(s2) - len(s1) + 1):
        if s2[i:i + len(s1)] == s1:
            count += 1
    return count

if __name__ == '__main__':
    s1 = 'aa'
    s2 = 'aaaaaa'
    count = count_occurences(s1, s2)
    print(count)",python,python,3.485790296758812e-05,0.0002903543985930856,0.00011813799178708559,3.0226288788719866e-06,9.654723807356312e-06,0.00019508570386634502,0.999089578463778,0.00021619193225964604,4.311625406213802e-05
"def print_dict_alphabetically(dictionary):
    sorted_keys = sorted(dictionary.keys())
    for key in sorted_keys:
        print(f""{key}: {dictionary[key]}"")

print_dict_alphabetically({
 'Mark': '68',
 'Carol': '35',
 'John': '42'
})",css,css,5.343848243789541e-05,0.9951118288317852,0.0001637528064150621,3.923309746854381e-06,2.7508292984755883e-05,3.460359623569346e-05,0.004396845490859161,9.082813987019653e-05,0.00011727104966507186
"# Function to get the middle of the linked list 
def getmiddle(head): 
    if(head == None): 
        return head 
  
    slow_ptr = head 
    fast_ptr = head 
  
    while(fast_ptr != None and fast_ptr.next != None): 
        slow_ptr = slow_ptr.next
        fast_ptr = fast_ptr.next.next
  
    return slow_ptr",python,html,0.0001873867783929255,0.0029457522643676526,0.9745376191809986,0.0002044114774238163,0.00864315371276316,0.00019634784169336259,0.008862181598578656,0.000716402508415384,0.003706744637366267
"text_cleaned = ""This is the text for processing!
Some punctuation must be removed.
Lets Trim the whitespace too.
Please preserve the cases as is.""",typescript,typescript,6.756051109421167e-06,8.02138278968785e-06,2.67850894837637e-05,2.1175909528032977e-06,2.8361958594262143e-05,1.5640201471202807e-06,4.5266913613587205e-05,1.0601957234340581e-05,0.9998705250360751
"def login(username, password):
    hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()
    if username in users and users[username] == hashed_password:
        return True
    else:
        return False",python,python,1.0631556769255827e-05,0.0691978888163331,0.0066979765821813825,0.03743138889046607,0.001127310410491748,0.002884835319518363,0.8366208757782294,0.0344635188634698,0.011565573782540766
"num = 15
while num >= 10:
    print(num)
    num -= 1",python,matlab,2.4802289397017448e-09,7.897587721926221e-13,1.1839985279000871e-08,9.141373171276467e-10,1.0331071136239212e-09,0.9999984704389487,1.5083169834945968e-06,6.478724775391738e-10,4.3279466366432966e-09
"def generate_invoice(customer_info):
  items = customer_info['items']
  total = sum(item['price'] * item['quantity'] for item in items)
  subtotal = total - (total * customer_info['discount'])
  tax = subtotal * 0.15
  invoice = {
    'name': customer_info['name'],
    'items': items,
    'discount': customer_info['discount'],
    'total': total,
    'subtotal': subtotal,
    'tax': tax
  }
 
  return invoice",css,python,0.0010885083070088064,0.16405592956088613,0.02324371982627916,0.010272874556784089,0.0032070984287314247,0.0003958432888113226,0.797393443373814,0.0002772029362552686,6.537972142977018e-05
"import requests
from bs4 import BeautifulSoup

url = 'https://example.com'

# Fetch the html page
page = requests.get(url)

# Parse the HTML page
soup = BeautifulSoup(page.content, 'html.parser')

# Extract the product names and prices
product_names = soup.find_all('div', class_='name')
product_prices = soup.find_all('div', class_='price')

# Print the results
for i in range(len(product_names)):
 print(product_names[i].text, product_prices[i].text)",python,html,1.718370930613581e-13,4.881702066891889e-06,0.9999894154475197,5.482500792379235e-06,2.795410322648802e-09,1.629923519556765e-10,4.5418958431643805e-08,5.565948665945849e-08,1.1631260145336533e-07
"def calculate_sum_divisors(n):
    total_sum = 0
    for i in range(1, n + 1):
        if n % i == 0:
            total_sum += i
    return total_sum
 
print(calculate_sum_divisors(90))",python,matlab,0.0001301162477968693,0.00015548132346449747,0.0004878854024020511,1.960816645452014e-05,3.487841487504921e-05,0.8427855073324654,0.15610783443110787,0.00012263813096930173,0.00015605055046434327
"def identifyElements(list1, list2):
  
  # create a set from list1
  set1 = set(list1)
  
  # create a set from list2
  set2 = set(list2)
  
  # store the common elements in result
  result = []
  
  # check for each element of list2 if it is present in set1 
  for element in set2:
    if element in set1:
      result.append(element)
  
  return result

list1 = [1, 4, 5, 6, 7] 
list2 = [2, 3, 5, 6, 7]

result = identifyElements(list1, list2)
print(""Common Elements :"",result)

# Output: Common Elements: [5, 6, 7]",python,python,0.00028085613762108717,0.011959952798595035,0.00032660339250075197,1.7302628008324988e-05,0.00047187829438394117,0.27515161614470374,0.710423778014417,1.7858065770550065e-05,0.0013501545239996005
"def maxDifference(arr): 
    n = len(arr) 
    max_diff = arr[1] - arr[0] 
  
    for i in range(0, n): 
        for j in range(i + 1, n): 
            if (arr[j] - arr[i] > max_diff): 
                max_diff = arr[j] - arr[i] 
    return max_diff 
  
arr = [3, 8, 9, 6, 4, 10] 
print( maxDifference(arr))",python,matlab,2.1562292422242494e-07,3.991134143812205e-07,2.956208345581822e-07,5.788180850823894e-08,5.486117478777691e-08,0.9657751394602168,0.03422355795405587,1.5607929064628316e-08,2.638776416336553e-07
"import tensorflow as tf

# Define the model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(5,)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

# Compile the model
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)",python,python,0.06300095438399803,0.006345329494240662,0.014144061792080354,3.3502464129111824e-05,5.946803693354917e-05,0.0004262995197732023,0.8372999007829273,1.324437430217375e-05,0.07867723915161559
"def longest_word(string):
    words = string.split("" "")
    max_length = 0
    longest_word = """"
    for word in words:
        if(len(word) > max_length):
            max_length = len(word)
            longest_word = word
    print(""Longest word is {} with length {}"".format(longest_word,max_length))",python,python,0.0006117874232287585,0.004354355041734528,0.004296442141552278,0.006772212801277852,1.2637368139706852e-05,0.00018806143785988222,0.9538227557401737,0.029718751452488902,0.00022299659354430148
"def reverseLinkedList(head):
    curr = head 
    prev = None
    while (curr != None): 
        temp = curr.next
        curr.next = prev 
        prev = curr 
        curr = temp
    head = prev
    return head

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Create a Linked list 
head1 = Node(3)
head1.next = Node(5)
head1.next.next = Node(7)
head1.next.next.next = Node(8)

head1 = reverseLinkedList(head1)

temp = head1
while(temp != None):
    print temp.data,
    temp = temp.next",python,matlab,0.00015892391993022964,0.01685633918575363,0.4601918997060288,0.0004901450623807195,0.0005364430390275855,0.4641866131034257,0.005584406321699326,0.04496689223527531,0.007028337426478735
"import numpy as np

#Numpy array of the board
board = np.zeros((3, 3))

#List to keep track of all the moves made
moves_made = []

#Available actions
actions = ['up', 'down', 'left', 'right']

#Target reward
target = 100

# Learning rate
rate = 0.2

# Discount factor
gamma = 0.7

# Maximum Episodes
max_episodes = 10000

#This function will evaluate the board and choose the best move
def choose_action(state):
  if np.random.uniform(0, 1) < rate:
    action = np.random.choice(actions)
  else:
    values = []
    # Evaluate all possible moves
    for a in actions:
      values.append(evaluate_board(state, a))

    # Choose the action with the maximum value
    action = values.index(max(values))
  
  return action

#This function evaluates the board state for a given action
def evaluate_board(state, action):
  next_state = make_move(state, action)
  reward = check_win(next_state)
  value = reward + gamma * get_values_actions(next_state)
  return value

#This function makes a move on the board
def make_move(state, action):
  next_state = np.copy(state)
  if action == 'up':
    if np.any(next_state[0] == 0):
      next_state[0][np.argwhere(next_state[0] == 0)] = 1
  elif action == 'down':
    if np.any(next_state[2] == 0):
      next_state[2][np.argwhere(next_state[2] == 0)] = 1
  elif action == 'left':
    for row in next_state:
      if 0 in row:
        row[np.argwhere(row == 0)] = 1
        break
  elif action == 'right':
    for row in reversed(next_state):
      if 0 in row:
        row[np.argwhere(row == 0)] = 1
        break
  
  return next_state

#This function checks the board to see if there is a winner
def check_win(next_state):
  win = False
  for row in next_state:
    if np.all(row == 1):
      win = True
  for col in range(3):
    if np.all(next_state[:,col] == 1):
      win = True

  diag1 = np.array(next_state[0][0] == next_state[1][1] == next_state[2][2] == 1)
  diag2 = np.array(next_state[0][2] == next_state[1][1] == next_state[2][0] == 1)

  if np.any(diag1):
    win = True
  elif np.any(diag2):
    win = True

  return win

#This function gets the values of each action for a given board
def get_values_actions(state):
  current_val = 0
  for move in moves_made:
    current_val += evaluate_board(state, move)

  return current_val

#Game Loop
for i in range(max_episodes):
  state = board
  print('Episode:', i)
  done = False

  while not done:
    action = choose_action(state)
    moves_made.append(action)

    state = make_move(state, action)
    done = check_win(state)

    if done:
      reward = target
      print('Reward:', reward)
      break;",python,matlab,0.06980281427649068,0.0735333680468911,0.02703165722839327,0.0005923184616007044,0.08009436379057772,0.3412449568034967,0.1203426753954872,0.21423166910120334,0.07312617689585928
"import time

class Timer:
    # Constructor
    def __init__(self, duration):
        self.duration = duration
        self.start_time = time.time()
        self.end_time = self.start_time + self.duration

    # Methods
    def start(self):
        while time.time() < self.end_time:
            minutes, seconds = divmod((self.end_time - time.time()), 60)
            print(f'{int(minutes)} minutes and {int(seconds)} seconds left')
            time.sleep(1)
        print('Timer completed')
        
if __name__ == '__main__':
    timer = Timer(300) # Timer duration in seconds (5-minute timer in this example)
    timer.start()",python,python,0.0005401642403195082,0.004143036058049084,0.31868995849644055,0.026556146317934327,0.00017879419809886107,2.231943147318792e-05,0.577161592615392,0.07150247792374387,0.0012055107185485827
"number = int(input(""Please enter a number: ""))

for n in range(2, number + 1):
    is_prime = True
    for i in range(2, n):
        if n % i == 0:
            is_prime = False
            break
    if is_prime:
        print(n)",python,python,5.332344463200342e-06,4.07175954937824e-07,1.3889402545371025e-05,8.694520989999535e-06,1.2061572532214154e-07,0.002832398726137436,0.9971376719353316,1.0384111206151153e-06,4.4686773131608925e-07
"def is_anagram(s1, s2): 
    s1 = s1.replace("" "", """").lower()
    s2 = s2.replace("" "", """").lower()

    if len(s1) != len(s2):
        return False
    
    count = {}

    for letter in s1:
        if letter in count:
            count[letter] += 1
        else:
            count[letter] = 1
    
    for letter in s2:
        if letter in count:
            count[letter] -= 1
        else:
           return False
    
    for letter in count:
        if count[letter] != 0:
            return False

    return True",python,python,0.0001553169180846844,0.0022776030004029732,0.0009186288274250911,1.410291949510558e-05,0.0001123153564535422,0.0015286753873208268,0.9936332811638122,0.0011458994019479247,0.0002141770250576548
"import random

# Representing the problem
# The algorithm is applied to this
graph = { 
 'A': ['B', 'C', 'D'], 
 'B': ['A', 'C',  'E'], 
 'C': ['A', 'B', 'D', 'E'], 
 'D': ['A', 'C'], 
 'E': ['B', 'C']
}

def findBestRoute(graph):
  # randomly select starting node 
  currentNode = random.choice(list(graph.keys()))
 
  # the shortest route needs at least 
  # length = number of nodes in the graph
  bestRoute = [currentNode] 
  min_length =  len(graph)
 
  # Loop until length is same as min_length
  while len(bestRoute) < min_length: 
 
    # Find neighbors of the current node
    nbrs = graph[currentNode] 
 
    # Find a neighbor 
    # with minimum distance
    nextNode = None
    minDist = float('Inf')
 
    # Check for each neighbor 
    for node in nbrs: 
        if node not in bestRoute: 
            dist = 0
            for i in range(len(bestRoute)-1): 
                dist += graph[bestRoute[i]][node] 
            if dist < minDist : 
                minDist = dist
                nextNode = node
 
    # Append the neighbor to bestRoute 
    bestRoute.append(nextNode) 
    currentNode = nextNode 
   
  return bestRoute 
  
# Driver program 
print(findBestRoute(graph))",css,bash,0.7066441984099221,0.007341466376125373,0.0013768710983607002,6.054249614095954e-05,0.012093557586127289,0.009393879275388687,0.15199898080982266,0.002884221791786249,0.10820628215632595
"from flask import Flask, request
import sqlite3

app = Flask(name)

@app.route('/form', methods=['POST'])
def save_form():
 conn = sqlite3.connect('data.db')
 c = conn.cursor()
 c.execute(""INSERT INTO submission VALUES ('name': ?, 'email': ?, 'phone': ?)"", (request.json['name'], request.json['email'], request.json['phone'])
 conn.commit()
 conn.close()
 return {'message': 'Successfully saved data'}
 
if name == 'main':
 app.run(debug=True)",css,sql,0.003446327345442817,0.2994392411810803,0.00042632400849918823,0.0005747281278383263,2.1594369764894313e-07,2.792247763479372e-06,0.00033958932452277975,0.6957597986498911,1.098317126410497e-05
"import requests
 
# Make a get request to get the latest position of the International Space Station
response = requests.get(""http://api.open-notify.org/iss-now.json"")
 
# Print the status code of the response
print(response.status_code)",python,css,0.043187961292609836,0.7178159705826309,0.0006512715188688541,3.4484941426904367e-07,0.00670229028390877,2.427532406678779e-06,0.02817685954399603,0.002155285256834591,0.20130758913933017
"words = [""Hello"",""World!"",""Good"",""Morning""]

words.sort(key=len)

print(words)",python,python,0.0733082886814265,0.002924637559836608,0.008919589269079013,5.027453281697921e-12,0.0088055213819889,7.906394111614246e-06,0.8945531133822686,0.01147096476240398,9.978563857172648e-06
"import json

def findLongWords(words):
    result = []
    for word in words:
        if len(word) > 7:
            result.append(word)
    return result

data = json.loads(input_data)
words = data[""words""]

print(findLongWords(words)) // [""catastrophe"", ""accelerate""]",python,python,5.9948784530489966e-05,0.07539418141317397,0.0008703565523152547,7.911075525099615e-08,3.0134850719991035e-06,1.7361251491117e-05,0.8968860335362157,0.02676761474418983,1.4111222564526158e-06
"def print_roman_numeral(num):
    if num == 1:
        return ""I""
    elif num == 2:
        return ""II""
    elif num == 3:
        return ""III""
    elif num == 4:
        return ""IV""
    elif num == 5:
        return ""V""
    else:
        return ""invalid number""

number = int(input(""Enter a number between 1 and 5: ""))
print(print_roman_numeral(number))",python,python,2.2392853436894156e-06,5.709081995840872e-08,7.751882126786648e-06,4.587914220494736e-06,4.909956255027276e-07,0.00031627491661429625,0.9996641212119203,3.080762026665482e-06,1.3959413023675822e-06
"def celsius_to_fahrenheit(celsius):
	fahrenheit = celsius * 9/5 + 32
	return fahrenheit",python,python,0.012319334203658931,0.014520396522004188,0.011578587439826333,0.0011258383094487681,0.00284613603025773,0.0019182078400334461,0.9460343510893153,0.0018852782827411408,0.007771870282714174
"def order_items_by_popularity(items):
    """"""Function to order items by their popularity.""""""
    items_dict = {}
 
    # Create a dictionary of item and its count
    for item in items:
        if item in items_dict:
            items_dict[item] += 1
        else:
            items_dict[item] = 1
 
    # Sort the items by their count in descending order
    sorted_items = sorted(items_dict.items(), key=lambda i: i[1], reverse=True)
 
    # Store the sorted items in a list
    sorted_items_list = [item[0] for item in sorted_items]
 
    return sorted_items_list",python,javascript,6.119664461289828e-07,0.004464171192468912,8.370220552015556e-05,2.2379529206444622e-08,0.9951100226272953,4.009330378627634e-06,0.0003357952613437298,1.6356162857300668e-06,2.9420732324859115e-08
"def generate_dict(keys, values):
 n = len(keys)
 if n != len(values):
  return None

 dct = {}
 for i in range(n):
  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])

 return dct

keys = [‘a’, ‘b’, ‘c’, ‘d’]
values = [1, 2, 3, 4]
result = generate_dict(keys, values)
print(result)",python,python,0.0011872206593990442,0.19199326685827073,0.00845355738323235,0.00019721416579479039,8.703930291184963e-05,0.008030917018929851,0.7763619642474066,0.006257247254433137,0.007431573109621644
"def add_numbers(a, b):
    """"""Returns the sum of two numbers""""""
    return a + b

if __name__ == '__main__':
    print(add_numbers(2, 3))",python,java,1.8454223455002565e-07,1.1409968088688111e-07,3.0174441827078753e-06,0.9991986291072144,2.806661306991221e-06,3.045668929050358e-13,0.0007907588125962429,1.9903762341794596e-06,2.498956245719232e-06
"# Python program for implementation of Bubble Sort 
def bubbleSort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]",python,matlab,0.00016809813741725202,1.192931361714758e-07,1.3246376515866768e-07,3.4051343885461868e-09,6.098488438451189e-07,0.9990813459140031,0.0007479289528917812,2.3672126220424478e-08,1.7383126820145664e-06
"def sortSentence(sentence):
    words = sentence.split("" "")
    words.sort()
    return words

result = sortSentence(""This is a great day"")
print(result)",python,python,5.2079991014752574e-06,0.00033558024560851913,0.0006030340704820179,4.631523476772428e-06,3.3707373278197332e-06,2.1196036873696277e-07,0.9354240222444075,0.06362262762316163,1.3135960656820771e-06
"def get_primes(n):
 primes = []
 for num in range(2, n + 1):
 is_prime = True
 for divisor in range(2, num):
 if num % divisor == 0:
 is_prime = False
 break
 
 if is_prime:
 primes.append(num)
 
 return primes
 
primes = get_primes(25)
print(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23]",python,matlab,1.5614941531356795e-07,9.722581767559684e-11,1.1920027930304825e-07,1.0660395253742523e-09,8.468856713787789e-09,0.9999220473859971,7.762078478410793e-05,1.5849207866757593e-08,3.099819426990181e-08
"def longest_color_name(colors): 
 longest_name = 0 
 longest_color = None
 for color in colors: 
  if len(color) > longest_name: 
   longest_name = len(color) 
   longest_color = color
 return longest_color",python,java,1.3695404932675176e-14,6.476644396904225e-14,9.723953167672232e-14,0.9999999999965261,3.802966388783363e-30,5.09088889767468e-14,3.2282263165843426e-12,6.9895812290939515e-15,1.2117779453757044e-14
"def find_median(arr):
    n = len(arr) 
    arr.sort() 
  
    if n % 2 != 0: 
        return arr[n//2] 
  
    return (arr[(n-1)//2] + arr[n//2]) / 2.0",python,python,1.2826457717769679e-05,9.889198078544055e-05,9.711164350494657e-06,6.320538512701055e-06,8.40018649379305e-06,0.06988426603583146,0.9299670771595886,9.75061029648904e-07,1.1531415690087516e-05
"import pandas as pd

# Load data
movies = pd.read_csv('dataset/movies.csv')

# Create recommendations based on user interests
def recommend_movies(interests):
 # Create a list of movies based on user interests
 recommended_movies = movies[movies['Genre'].isin(interests)]
 # Sort movies by popularity
 recommended_movies = recommended_movies.sort_values('Popularity', ascending=False)
 
 return recommended_movies[['Title', 'Rating', 'Genre']]

# Use the function to get recommendations
recommend_movies(['Sci-Fi', 'Horror'])",python,python,0.002138934021174537,0.1778965859536643,0.04467909681910134,0.000678227936177927,0.07932207467311445,0.0023305734649939477,0.3875191045607115,0.02641673606440096,0.27901866650666096
"import tweepy

consumer_key = ''
consumer_secret = ''
access_token = ''
access_token_secret = ''

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

api = tweepy.API(auth)

public_tweets = api.search('python')
for tweet in public_tweets:
    print(tweet.text)",python,python,0.00019582649775117225,0.05115716203145147,0.011956420793639434,0.1969198188584391,0.008282182102999415,0.02025670704172548,0.6813856350210098,0.004603764046758429,0.0252424836062259
"def combine_list(list1, list2):
    if len(list1) > len(list2):
        longest_list = list1
        shortest_list = list2
    else:
        longest_list = list2
        shortest_list = list1
        
    combined_list = []
    i = 0

    for el in longest_list:
        combined_list.append(el)
        if i < len(shortest_list):
            combined_list.append(shortest_list[i])
        i += 1
    return combined_list

list1 = [1, -2, 3]
list2 = [4, 5, -6]
combine_list(list1, list2)  # [1, 4, -2, 5, 3, -6]",python,python,0.0016636568304278594,0.018212445892270165,0.005023735556152887,0.00036818776114491485,0.0010773894290716905,0.04969823776379206,0.9194188543185998,0.0018590741859925075,0.0026784182625481396
"import cv2

# Create the classifier
classifier = cv2.CascadeClassifier(""haarcascade.xml"")

# Load the image
img = cv2.imread(""image.jpg"")

# Detect objects in the image
objects = classifier.detectMultiScale(img)

# Loop through the objects and identify it
for (x,y,w,h) in objects:
    cv2.rectangle(img,(x,y),(x+w,y+h), (255,0,0), 2)
    cv2.putText(img, ""Object"", (x,y-10), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2)

# Display the resulting frame
cv2.imwrite(""result.jpg"", img)",python,typescript,0.02615033627629009,0.049546203614666655,0.0019871803921817583,0.00018944367983768498,0.03521476179249389,0.003196983792735893,0.11833785751226789,0.00044991696428311697,0.764927315975243
"def capitalize_words(string):
  words = string.split()
  capitalized_words = [word.capitalize() for word in words]
  return ' '.join(capitalized_words)",sql,sql,3.538560462569214e-07,0.00010221238378517938,0.0001771967322844868,0.0053532533589650206,7.673231773516072e-09,2.8366957158938113e-06,0.006896809898965327,0.9874639454228261,3.3839781799140128e-06
"def calculate_mean(numbers):
    total_sum = 0
    for num in numbers:
        total_sum += num
    mean = total_sum / len(numbers)
    return mean

print(calculate_mean([10, 20, 30]))",python,python,0.00045121348660799376,0.00013766750809103795,0.0019553621974967104,0.008989746123613253,0.0011025660382034746,0.0035943798535997646,0.9828485864404037,0.00040422082239740636,0.0005162575295866527
"def isPerfectSquare(n):
    root =  n ** 0.5
    return root == int(root)

result = isPerfectSquare(36)
print(result)",python,python,7.961198511198262e-05,0.0011604951790047397,0.00014545588755872992,0.02164038670557794,8.3042170259746e-05,1.0223029740441103e-08,0.9756457734275756,0.0011845014777954403,6.0722944086232495e-05
"# Importing the required libraries
import numpy as np
from sklearn import datasets
from sklearn.linear_model import LogisticRegression

# Load the iris dataset
iris = datasets.load_iris()
X = iris.data[:, :2] #take only first 2 features
y = iris.target

# Create an instance of Logistic Regression Classifier and fit the data.
logreg = LogisticRegression()
logreg.fit(X, y)",python,typescript,0.18093299181158884,0.06814727283234764,0.010529230417011527,5.2162099305812406e-05,0.0009384934408821219,0.00012424150443810468,0.32371990171105086,3.466421158218217e-05,0.41552104197179296
